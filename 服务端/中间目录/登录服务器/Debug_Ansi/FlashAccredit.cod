; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\登录服务器\FlashAccredit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?data@CPlex@@QAEPAXXZ				; CPlex::data
PUBLIC	??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
PUBLIC	?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
PUBLIC	?RemoveHead@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU_PER_IO_OPERATION_DATA@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveHead
PUBLIC	?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail
PUBLIC	?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll
PUBLIC	?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
PUBLIC	?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
PUBLIC	?RemoveAt@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAt
PUBLIC	?NewNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::NewNode
PUBLIC	?FreeNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEXPAUCNode@1@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::FreeNode
PUBLIC	??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
PUBLIC	?Serialize@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEXAAVCArchive@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::Serialize
PUBLIC	?Dump@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXAAVCDumpContext@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::Dump
PUBLIC	?AssertValid@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AssertValid
PUBLIC	??_G?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEPAXI@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`scalar deleting destructor'
PUBLIC	??0CFlashAccredit@@QAE@XZ			; CFlashAccredit::CFlashAccredit
PUBLIC	??1CFlashAccredit@@QAE@XZ			; CFlashAccredit::~CFlashAccredit
PUBLIC	?StartService@CFlashAccredit@@QAE_NXZ		; CFlashAccredit::StartService
PUBLIC	?StopService@CFlashAccredit@@QAE_NXZ		; CFlashAccredit::StopService
PUBLIC	?SetServiceParameter@CFlashAccredit@@QAEXG@Z	; CFlashAccredit::SetServiceParameter
PUBLIC	?GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z ; CFlashAccredit::GetIOOperationItem
PUBLIC	?CloseSocket@CFlashAccredit@@QAE_NI@Z		; CFlashAccredit::CloseSocket
PUBLIC	?AcceptWork@CFlashAccredit@@SAXPAX@Z		; CFlashAccredit::AcceptWork
PUBLIC	?ReadWriteWork@CFlashAccredit@@SAXPAX@Z		; CFlashAccredit::ReadWriteWork
PUBLIC	??$_snprintf_s@$0CAA@@@YAHAAY0CAA@DIPBDZZ	; _snprintf_s<512>
PUBLIC	??$SerializeElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCArchive@@PAPAU_PER_IO_OPERATION_DATA@@H@Z ; SerializeElements<_PER_IO_OPERATION_DATA *>
PUBLIC	??$DumpElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCDumpContext@@PBQAU_PER_IO_OPERATION_DATA@@H@Z ; DumpElements<_PER_IO_OPERATION_DATA *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_05PLCFPPOI@with?5@			; `string'
PUBLIC	??_C@_09HCLNAIDE@?5elements@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_7?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`vftable'
PUBLIC	??_C@_0O@OLPJBALP@?$LM?S?T?X?M?x?B?g?J?$KH?$LA?$NM?$CB@ ; `string'
PUBLIC	??_C@_0DD@KAEGCGFA@?O?$LF?M?$LD?W?J?T?$LE?$LC?$LL?W?c?$LL?r?U?$NP?5TCP?1IP?5?P?$KN?R?i?C?$LL?S@ ; `string'
PUBLIC	??_C@_0BP@MEFHIL@?M?x?B?g?$LA?s?$LG?$KI?$LH?$KC?I?z?$LE?m?N?s?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0CH@DNAGPLGD@?$LG?K?$LP?Z?U?$PN?$LB?$LL?F?d?K?$PL?$LH?$PO?N?q?U?$LM?S?C?$KD?$KM?$LM?$OA?L?$PN?5?$CFd?5?$LG@ ; `string'
PUBLIC	??_C@_0BP@NMCBKPBH@?$LE?$LE?$LN?$KI?M?x?B?g?W?J?T?$LE?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0CB@LCBIFBCI@?$LA?s?$LG?$KI?$LM?$OA?L?$PNSOCKET?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA@ ; `string'
PUBLIC	?__LINE__Var@?0??GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z@4JA ; `CFlashAccredit::GetIOOperationItem'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@HFALJBOE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_0KO@HBAKDAKE@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?$DP?$DO?5?$AN?6?$DMcross?9@ ; `string'
PUBLIC	??_R4?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@@8 ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8 ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8 ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8 ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__CreateIoCompletionPort@16:PROC
EXTRN	__imp__GetQueuedCompletionStatus@20:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:PROC ; AfxAssertValidObject
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__listen@8:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	__imp__WSACleanup@0:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__WSAAccept@20:PROC
EXTRN	__imp__WSARecv@28:PROC
EXTRN	__imp__WSASend@28:PROC
EXTRN	__imp__WSASocketA@24:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	??1CObject@@UAE@XZ:PROC				; CObject::~CObject
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	??0CObject@@IAE@XZ:PROC				; CObject::CObject
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?AssertValid@CObject@@UBEXXZ:PROC		; CObject::AssertValid
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:PROC	; CObject::Dump
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:PROC		; AfxIsValidAddress
EXTRN	?IsStoring@CArchive@@QBEHXZ:PROC		; CArchive::IsStoring
EXTRN	?EnsureRead@CArchive@@QAEXPAXI@Z:PROC		; CArchive::EnsureRead
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?GetDepth@CDumpContext@@QBEHXZ:PROC		; CDumpContext::GetDepth
EXTRN	??6CDumpContext@@QAEAAV0@PBD@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@H@Z:PROC		; CDumpContext::operator<<
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	?AfxMessageBox@@YGHPBDII@Z:PROC			; AfxMessageBox
EXTRN	??_E?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEPAXI@Z:PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8 DD FLAT:??_R0?AV?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@@8 ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8 ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8 DD 00H ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@ DD 00H ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@@8
	DD	FLAT:??_R3?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_C@_0KO@HBAKDAKE@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?$DP?$DO?5?$AN?6?$DMcross?9@
CONST	SEGMENT
??_C@_0KO@HBAKDAKE@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?$DP?$DO?5?$AN?6?$DMcross?9@ DB '<'
	DB	'?xml version="1.0"?> ', 0dH, 0aH, '<cross-domain-policy> ', 0dH
	DB	0aH, '<site-control permitted-cross-domain-policies="all"/>', 0dH
	DB	0aH, '<allow-access-from domain="*" to-ports="*" />', 0dH, 0aH
	DB	'</cross-domain-policy> ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@HFALJBOE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EM@HFALJBOE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0b5H, 0c7H, 0c2H, 0bcH, 0b7H, 0feH, 0ceH, 0f1H, 0c6H
	DB	0f7H, '\flashaccredit.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z@4JA DD 0a0H ; `CFlashAccredit::GetIOOperationItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@LCBIFBCI@?$LA?s?$LG?$KI?$LM?$OA?L?$PNSOCKET?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA@
CONST	SEGMENT
??_C@_0CB@LCBIFBCI@?$LA?s?$LG?$KI?$LM?$OA?L?$PNSOCKET?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA@ DB 0b0H
	DB	0f3H, 0b6H, 0a8H, 0bcH, 0e0H, 0ccH, 0fdH, 'SOCKET', 0caH, 0a7H
	DB	0b0H, 0dcH, 0a3H, 0acH, 0cdH, 0f8H, 0c2H, 0e7H, 0c6H, 0f4H, 0b6H
	DB	0afH, 0caH, 0a7H, 0b0H, 0dcH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NMCBKPBH@?$LE?$LE?$LN?$KI?M?x?B?g?W?J?T?$LE?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_0BP@NMCBKPBH@?$LE?$LE?$LN?$KI?M?x?B?g?W?J?T?$LE?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@ DB 0b4H
	DB	0b4H, 0bdH, 0a8H, 0cdH, 0f8H, 0c2H, 0e7H, 0d7H, 0caH, 0d4H, 0b4H
	DB	0caH, 0a7H, 0b0H, 0dcH, 0a3H, 0acH, 0cdH, 0f8H, 0c2H, 0e7H, 0c6H
	DB	0f4H, 0b6H, 0afH, 0caH, 0a7H, 0b0H, 0dcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DNAGPLGD@?$LG?K?$LP?Z?U?$PN?$LB?$LL?F?d?K?$PL?$LH?$PO?N?q?U?$LM?S?C?$KD?$KM?$LM?$OA?L?$PN?5?$CFd?5?$LG@
CONST	SEGMENT
??_C@_0CH@DNAGPLGD@?$LG?K?$LP?Z?U?$PN?$LB?$LL?F?d?K?$PL?$LH?$PO?N?q?U?$LM?S?C?$KD?$KM?$LM?$OA?L?$PN?5?$CFd?5?$LG@ DB 0b6H
	DB	0cbH, 0bfH, 0daH, 0d5H, 0fdH, 0b1H, 0bbH, 0c6H, 0e4H, 0cbH, 0fbH
	DB	0b7H, 0feH, 0ceH, 0f1H, 0d5H, 0bcH, 0d3H, 0c3H, 0a3H, 0acH, 0bcH
	DB	0e0H, 0ccH, 0fdH, ' %d ', 0b6H, 0cbH, 0bfH, 0daH, 0caH, 0a7H, 0b0H
	DB	0dcH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MEFHIL@?M?x?B?g?$LA?s?$LG?$KI?$LH?$KC?I?z?$LE?m?N?s?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_0BP@MEFHIL@?M?x?B?g?$LA?s?$LG?$KI?$LH?$KC?I?z?$LE?m?N?s?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@ DB 0cdH
	DB	0f8H, 0c2H, 0e7H, 0b0H, 0f3H, 0b6H, 0a8H, 0b7H, 0a2H, 0c9H, 0faH
	DB	0b4H, 0edH, 0ceH, 0f3H, 0a3H, 0acH, 0cdH, 0f8H, 0c2H, 0e7H, 0c6H
	DB	0f4H, 0b6H, 0afH, 0caH, 0a7H, 0b0H, 0dcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KAEGCGFA@?O?$LF?M?$LD?W?J?T?$LE?$LC?$LL?W?c?$LL?r?U?$NP?5TCP?1IP?5?P?$KN?R?i?C?$LL?S@
CONST	SEGMENT
??_C@_0DD@KAEGCGFA@?O?$LF?M?$LD?W?J?T?$LE?$LC?$LL?W?c?$LL?r?U?$NP?5TCP?1IP?5?P?$KN?R?i?C?$LL?S@ DB 0cfH
	DB	0b5H, 0cdH, 0b3H, 0d7H, 0caH, 0d4H, 0b4H, 0b2H, 0bbH, 0d7H, 0e3H
	DB	0bbH, 0f2H, 0d5H, 0dfH, ' TCP/IP ', 0d0H, 0adH, 0d2H, 0e9H, 0c3H
	DB	0bbH, 0d3H, 0d0H, 0b0H, 0b2H, 0d7H, 0b0H, 0a3H, 0acH, 0cdH, 0f8H
	DB	0c2H, 0e7H, 0c6H, 0f4H, 0b6H, 0afH, 0caH, 0a7H, 0b0H, 0dcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLPJBALP@?$LM?S?T?X?M?x?B?g?J?$KH?$LA?$NM?$CB@
CONST	SEGMENT
??_C@_0O@OLPJBALP@?$LM?S?T?X?M?x?B?g?J?$KH?$LA?$NM?$CB@ DB 0bcH, 0d3H, 0d4H
	DB	0d8H, 0cdH, 0f8H, 0c2H, 0e7H, 0caH, 0a7H, 0b0H, 0dcH, '!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@
CONST	SEGMENT
??_7?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@ DD FLAT:??_R4?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXXZ
	DD	FLAT:?Dump@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCLNAIDE@?5elements@
CONST	SEGMENT
??_C@_09HCLNAIDE@?5elements@ DB ' elements', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLCFPPOI@with?5@
CONST	SEGMENT
??_C@_05PLCFPPOI@with?5@ DB 'with ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\afxtempl.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFlashAccredit@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlashAccredit@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlashAccredit@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFlashAccredit@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFlashAccredit@@QAE@XZ$2
__ehfuncinfo$??0CFlashAccredit@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CFlashAccredit@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z$0
__ehfuncinfo$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCDumpContext@@PBQAU_PER_IO_OPERATION_DATA@@H@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCDumpContext@@PBQAU_PER_IO_OPERATION_DATA@@H@Z PROC ; DumpElements<_PER_IO_OPERATION_DATA *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCDumpContext@@PBQAU_PER_IO_OPERATION_DATA@@H@Z ENDP ; DumpElements<_PER_IO_OPERATION_DATA *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCArchive@@PAPAU_PER_IO_OPERATION_DATA@@H@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCArchive@@PAPAU_PER_IO_OPERATION_DATA@@H@Z PROC ; SerializeElements<_PER_IO_OPERATION_DATA *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCArchive@@PAPAU_PER_IO_OPERATION_DATA@@H@Z ENDP ; SerializeElements<_PER_IO_OPERATION_DATA *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0CAA@@@YAHAAY0CAA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0CAA@@@YAHAAY0CAA@DIPBDZZ PROC		; _snprintf_s<512>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	68 00 02 00 00	 push	 512			; 00000200H
  00020	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __vsnprintf_s
  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_snprintf_s@$0CAA@@@YAHAAY0CAA@DIPBDZZ ENDP		; _snprintf_s<512>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?ReadWriteWork@CFlashAccredit@@SAXPAX@Z
_TEXT	SEGMENT
_nRet$1 = -288						; size = 4
_dwSendBytes$2 = -284					; size = 4
_buf$3 = -280						; size = 256
_pSendIOOperdata$4 = -24				; size = 4
_pIOOperdata$5 = -20					; size = 4
_dwCompletionKey$6 = -16				; size = 4
_dwThancferred$7 = -12					; size = 4
_pFlashAccredit$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_pParam$ = 8						; size = 4
?ReadWriteWork@CFlashAccredit@@SAXPAX@Z PROC		; CFlashAccredit::ReadWriteWork, COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 271  : 	//变量定义
; 272  : 	CFlashAccredit * pFlashAccredit = (CFlashAccredit *)pParam;

  00016	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  00019	89 45 f8	 mov	 DWORD PTR _pFlashAccredit$[ebp], eax
$LN2@ReadWriteW:

; 273  : 
; 274  : 	//线程循环
; 275  : 	while(true)

  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	85 c0		 test	 eax, eax
  00023	0f 84 4a 01 00
	00		 je	 $LN1@ReadWriteW

; 276  : 	{
; 277  : 		//等待完成端口上SOCKET的完成
; 278  : 		DWORD dwThancferred=0;

  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwThancferred$7[ebp], 0

; 279  : 		DWORD  dwCompletionKey=0;

  00030	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwCompletionKey$6[ebp], 0

; 280  : 		LPPER_IO_OPERATION_DATA pIOOperdata=NULL;

  00037	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pIOOperdata$5[ebp], 0

; 281  : 		GetQueuedCompletionStatus(pFlashAccredit->m_lIOCPHandle,&dwThancferred,&dwCompletionKey,(LPOVERLAPPED *)&pIOOperdata,INFINITE);

  0003e	6a ff		 push	 -1
  00040	8d 45 ec	 lea	 eax, DWORD PTR _pIOOperdata$5[ebp]
  00043	50		 push	 eax
  00044	8d 4d f0	 lea	 ecx, DWORD PTR _dwCompletionKey$6[ebp]
  00047	51		 push	 ecx
  00048	8d 55 f4	 lea	 edx, DWORD PTR _dwThancferred$7[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pFlashAccredit$[ebp]
  0004f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00052	51		 push	 ecx
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetQueuedCompletionStatus@20

; 282  : 		if(pIOOperdata==NULL) continue;

  00059	83 7d ec 00	 cmp	 DWORD PTR _pIOOperdata$5[ebp], 0
  0005d	75 02		 jne	 SHORT $LN4@ReadWriteW
  0005f	eb bb		 jmp	 SHORT $LN2@ReadWriteW
$LN4@ReadWriteW:

; 283  : 
; 284  : 		//检查是否有错误产生
; 285  : 		if(dwThancferred == 0 && (pIOOperdata->cbOperationType == RECV_POSTED || pIOOperdata->cbOperationType == SEND_POSTED))

  00061	83 7d f4 00	 cmp	 DWORD PTR _dwThancferred$7[ebp], 0
  00065	75 23		 jne	 SHORT $LN5@ReadWriteW
  00067	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$5[ebp]
  0006a	83 78 20 65	 cmp	 DWORD PTR [eax+32], 101	; 00000065H
  0006e	74 09		 je	 SHORT $LN6@ReadWriteW
  00070	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$5[ebp]
  00073	83 78 20 66	 cmp	 DWORD PTR [eax+32], 102	; 00000066H
  00077	75 11		 jne	 SHORT $LN5@ReadWriteW
$LN6@ReadWriteW:

; 286  : 		{
; 287  : 			//关闭SOCKET
; 288  : 			pFlashAccredit->CloseSocket(pIOOperdata->socket);

  00079	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$5[ebp]
  0007c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0007f	51		 push	 ecx
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _pFlashAccredit$[ebp]
  00083	e8 00 00 00 00	 call	 ?CloseSocket@CFlashAccredit@@QAE_NI@Z ; CFlashAccredit::CloseSocket

; 289  : 			continue;

  00088	eb 92		 jmp	 SHORT $LN2@ReadWriteW
$LN5@ReadWriteW:

; 290  : 		}
; 291  : 
; 292  : 		//为请求服务
; 293  : 		if(pIOOperdata->cbOperationType == RECV_POSTED)

  0008a	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$5[ebp]
  0008d	83 78 20 65	 cmp	 DWORD PTR [eax+32], 101	; 00000065H
  00091	0f 85 bf 00 00
	00		 jne	 $LN7@ReadWriteW

; 294  : 		{
; 295  : 			//分配缓存
; 296  : 			LPPER_IO_OPERATION_DATA pSendIOOperdata = pFlashAccredit->GetIOOperationItem(pIOOperdata->socket, SEND_POSTED);

  00097	6a 66		 push	 102			; 00000066H
  00099	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$5[ebp]
  0009c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0009f	51		 push	 ecx
  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _pFlashAccredit$[ebp]
  000a3	e8 00 00 00 00	 call	 ?GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z ; CFlashAccredit::GetIOOperationItem
  000a8	89 45 e8	 mov	 DWORD PTR _pSendIOOperdata$4[ebp], eax

; 297  : 			if( pSendIOOperdata == NULL) continue;

  000ab	83 7d e8 00	 cmp	 DWORD PTR _pSendIOOperdata$4[ebp], 0
  000af	75 05		 jne	 SHORT $LN9@ReadWriteW
  000b1	e9 66 ff ff ff	 jmp	 $LN2@ReadWriteW
$LN9@ReadWriteW:

; 298  : 
; 299  : 			//回应客户端
; 300  : 			CHAR buf[256]=("<?xml version=\"1.0\"?> \r\n<cross-domain-policy> \r\n<site-control permitted-cross-domain-policies=\"all\"/>\r\n<allow-access-from domain=\"*\" to-ports=\"*\" />\r\n</cross-domain-policy> ");

  000b6	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  000bb	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0KO@HBAKDAKE@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?$DP?$DO?5?$AN?6?$DMcross?9@
  000c0	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR _buf$3[ebp]
  000c6	f3 a5		 rep movsd
  000c8	66 a5		 movsw
  000ca	6a 52		 push	 82			; 00000052H
  000cc	6a 00		 push	 0
  000ce	8d 45 96	 lea	 eax, DWORD PTR _buf$3[ebp+174]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 _memset
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 301  : 			CopyMemory(pSendIOOperdata->cbDataBuff,buf,sizeof(buf));

  000da	68 00 01 00 00	 push	 256			; 00000100H
  000df	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d e8	 mov	 ecx, DWORD PTR _pSendIOOperdata$4[ebp]
  000e9	83 c1 24	 add	 ecx, 36			; 00000024H
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _memcpy
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  : 
; 303  : 			//发送数据
; 304  : 			DWORD dwSendBytes=0;

  000f5	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwSendBytes$2[ebp], 0

; 305  : 			INT nRet = WSASend(pSendIOOperdata->socket,&(pSendIOOperdata->WSABuff),1,&dwSendBytes,0,&(pSendIOOperdata->Overlapped),NULL);

  000ff	6a 00		 push	 0
  00101	8b 45 e8	 mov	 eax, DWORD PTR _pSendIOOperdata$4[ebp]
  00104	50		 push	 eax
  00105	6a 00		 push	 0
  00107	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _dwSendBytes$2[ebp]
  0010d	51		 push	 ecx
  0010e	6a 01		 push	 1
  00110	8b 55 e8	 mov	 edx, DWORD PTR _pSendIOOperdata$4[ebp]
  00113	83 c2 14	 add	 edx, 20			; 00000014H
  00116	52		 push	 edx
  00117	8b 45 e8	 mov	 eax, DWORD PTR _pSendIOOperdata$4[ebp]
  0011a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0011d	51		 push	 ecx
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSASend@28
  00124	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _nRet$1[ebp], eax

; 306  : 			if(nRet==SOCKET_ERROR && WSAGetLastError() != WSA_IO_PENDING)

  0012a	83 bd e0 fe ff
	ff ff		 cmp	 DWORD PTR _nRet$1[ebp], -1
  00131	75 21		 jne	 SHORT $LN10@ReadWriteW
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00139	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  0013e	74 14		 je	 SHORT $LN10@ReadWriteW

; 307  : 			{
; 308  : 				pFlashAccredit->CloseSocket(pSendIOOperdata->socket);

  00140	8b 45 e8	 mov	 eax, DWORD PTR _pSendIOOperdata$4[ebp]
  00143	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00146	51		 push	 ecx
  00147	8b 4d f8	 mov	 ecx, DWORD PTR _pFlashAccredit$[ebp]
  0014a	e8 00 00 00 00	 call	 ?CloseSocket@CFlashAccredit@@QAE_NI@Z ; CFlashAccredit::CloseSocket

; 309  : 				continue;

  0014f	e9 c8 fe ff ff	 jmp	 $LN2@ReadWriteW
$LN10@ReadWriteW:

; 310  : 			}
; 311  : 		}

  00154	eb 18		 jmp	 SHORT $LN8@ReadWriteW
$LN7@ReadWriteW:

; 312  : 		else if(pIOOperdata->cbOperationType == SEND_POSTED)

  00156	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$5[ebp]
  00159	83 78 20 66	 cmp	 DWORD PTR [eax+32], 102	; 00000066H
  0015d	75 0f		 jne	 SHORT $LN8@ReadWriteW

; 313  : 		{
; 314  : 			//关闭SOCKET
; 315  : 			pFlashAccredit->CloseSocket(pIOOperdata->socket);

  0015f	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$5[ebp]
  00162	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00165	51		 push	 ecx
  00166	8b 4d f8	 mov	 ecx, DWORD PTR _pFlashAccredit$[ebp]
  00169	e8 00 00 00 00	 call	 ?CloseSocket@CFlashAccredit@@QAE_NI@Z ; CFlashAccredit::CloseSocket
$LN8@ReadWriteW:

; 316  : 		}
; 317  : 	}

  0016e	e9 a9 fe ff ff	 jmp	 $LN2@ReadWriteW
$LN1@ReadWriteW:

; 318  : }

  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00179	33 cd		 xor	 ecx, ebp
  0017b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
?ReadWriteWork@CFlashAccredit@@SAXPAX@Z ENDP		; CFlashAccredit::ReadWriteWork
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?AcceptWork@CFlashAccredit@@SAXPAX@Z
_TEXT	SEGMENT
_nRet$1 = -24						; size = 4
_dwFlags$2 = -20					; size = 4
_dwRecvBytes$3 = -16					; size = 4
_pIOOperdata$4 = -12					; size = 4
_sockAccept$5 = -8					; size = 4
_pFlashAccredit$ = -4					; size = 4
_pParam$ = 8						; size = 4
?AcceptWork@CFlashAccredit@@SAXPAX@Z PROC		; CFlashAccredit::AcceptWork, COMDAT

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 240  : 	//变量定义
; 241  : 	CFlashAccredit * pFlashAccredit = (CFlashAccredit *)pParam;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pParam$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _pFlashAccredit$[ebp], eax
$LN2@AcceptWork:

; 242  : 
; 243  : 	//线程循环
; 244  : 	while(true)

  0000f	b8 01 00 00 00	 mov	 eax, 1
  00014	85 c0		 test	 eax, eax
  00016	0f 84 a3 00 00
	00		 je	 $LN1@AcceptWork

; 245  : 	{
; 246  : 		//接收用户连接，被和完成端口关联
; 247  : 		SOCKET sockAccept = WSAAccept(pFlashAccredit->m_hServerSocket,NULL,NULL,NULL,0);

  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	6a 00		 push	 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _pFlashAccredit$[ebp]
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	51		 push	 ecx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAccept@20
  00030	89 45 f8	 mov	 DWORD PTR _sockAccept$5[ebp], eax

; 248  : 
; 249  : 		//分配缓存
; 250  : 		LPPER_IO_OPERATION_DATA pIOOperdata = pFlashAccredit->GetIOOperationItem(sockAccept, RECV_POSTED);

  00033	6a 65		 push	 101			; 00000065H
  00035	8b 45 f8	 mov	 eax, DWORD PTR _sockAccept$5[ebp]
  00038	50		 push	 eax
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _pFlashAccredit$[ebp]
  0003c	e8 00 00 00 00	 call	 ?GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z ; CFlashAccredit::GetIOOperationItem
  00041	89 45 f4	 mov	 DWORD PTR _pIOOperdata$4[ebp], eax

; 251  : 		if( pIOOperdata == NULL) continue;

  00044	83 7d f4 00	 cmp	 DWORD PTR _pIOOperdata$4[ebp], 0
  00048	75 02		 jne	 SHORT $LN4@AcceptWork
  0004a	eb c3		 jmp	 SHORT $LN2@AcceptWork
$LN4@AcceptWork:

; 252  : 
; 253  : 		//关联SOCKET和完成端口
; 254  : 		CreateIoCompletionPort((HANDLE)sockAccept,pFlashAccredit->m_lIOCPHandle,NULL,1);

  0004c	6a 01		 push	 1
  0004e	6a 00		 push	 0
  00050	8b 45 fc	 mov	 eax, DWORD PTR _pFlashAccredit$[ebp]
  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	51		 push	 ecx
  00057	8b 55 f8	 mov	 edx, DWORD PTR _sockAccept$5[ebp]
  0005a	52		 push	 edx
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateIoCompletionPort@16

; 255  : 
; 256  : 		//投递接收操作
; 257  : 		DWORD dwRecvBytes=0;

  00061	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwRecvBytes$3[ebp], 0

; 258  : 		DWORD dwFlags=0;

  00068	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwFlags$2[ebp], 0

; 259  : 		INT nRet = WSARecv(pIOOperdata->socket,&(pIOOperdata->WSABuff),1,&dwRecvBytes,&dwFlags,&(pIOOperdata->Overlapped),NULL);

  0006f	6a 00		 push	 0
  00071	8b 45 f4	 mov	 eax, DWORD PTR _pIOOperdata$4[ebp]
  00074	50		 push	 eax
  00075	8d 4d ec	 lea	 ecx, DWORD PTR _dwFlags$2[ebp]
  00078	51		 push	 ecx
  00079	8d 55 f0	 lea	 edx, DWORD PTR _dwRecvBytes$3[ebp]
  0007c	52		 push	 edx
  0007d	6a 01		 push	 1
  0007f	8b 45 f4	 mov	 eax, DWORD PTR _pIOOperdata$4[ebp]
  00082	83 c0 14	 add	 eax, 20			; 00000014H
  00085	50		 push	 eax
  00086	8b 4d f4	 mov	 ecx, DWORD PTR _pIOOperdata$4[ebp]
  00089	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0008c	52		 push	 edx
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSARecv@28
  00093	89 45 e8	 mov	 DWORD PTR _nRet$1[ebp], eax

; 260  : 		if(nRet==SOCKET_ERROR && WSAGetLastError() != WSA_IO_PENDING)

  00096	83 7d e8 ff	 cmp	 DWORD PTR _nRet$1[ebp], -1
  0009a	75 1e		 jne	 SHORT $LN5@AcceptWork
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  000a2	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000a7	74 11		 je	 SHORT $LN5@AcceptWork

; 261  : 		{
; 262  : 			pFlashAccredit->CloseSocket(sockAccept);

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _sockAccept$5[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _pFlashAccredit$[ebp]
  000b0	e8 00 00 00 00	 call	 ?CloseSocket@CFlashAccredit@@QAE_NI@Z ; CFlashAccredit::CloseSocket

; 263  : 			continue;

  000b5	e9 55 ff ff ff	 jmp	 $LN2@AcceptWork
$LN5@AcceptWork:

; 264  : 		}
; 265  : 	}

  000ba	e9 50 ff ff ff	 jmp	 $LN2@AcceptWork
$LN1@AcceptWork:

; 266  : }

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
?AcceptWork@CFlashAccredit@@SAXPAX@Z ENDP		; CFlashAccredit::AcceptWork
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?CloseSocket@CFlashAccredit@@QAE_NI@Z
_TEXT	SEGMENT
_pIOOperdata$1 = -32					; size = 4
_tempPos$2 = -28					; size = 4
_i$3 = -24						; size = 4
_pIOOperdata$4 = -20					; size = 4
_tempPos$5 = -16					; size = 4
_i$6 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_Socket$ = 8						; size = 4
?CloseSocket@CFlashAccredit@@QAE_NI@Z PROC		; CFlashAccredit::CloseSocket, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 203  : 	//关闭连接
; 204  : 	closesocket(Socket);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Socket$[ebp]
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 205  : 
; 206  : 	//清理记录
; 207  : 	POSITION pos=m_IORecvOperationItemList.GetHeadPosition();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 28	 add	 ecx, 40			; 00000028H
  0001c	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
  00021	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 208  : 	for (INT_PTR i=0;i<m_IORecvOperationItemList.GetCount();i++)

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN4@CloseSocke
$LN2@CloseSocke:
  0002d	8b 45 f4	 mov	 eax, DWORD PTR _i$6[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 f4	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@CloseSocke:
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 28	 add	 ecx, 40			; 00000028H
  0003c	e8 00 00 00 00	 call	 ?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
  00041	39 45 f4	 cmp	 DWORD PTR _i$6[ebp], eax
  00044	7d 47		 jge	 SHORT $LN3@CloseSocke

; 209  : 	{
; 210  : 		POSITION tempPos=pos;

  00046	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  00049	89 45 f0	 mov	 DWORD PTR _tempPos$5[ebp], eax

; 211  : 		LPPER_IO_OPERATION_DATA pIOOperdata=m_IORecvOperationItemList.GetNext(pos);

  0004c	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 28	 add	 ecx, 40			; 00000028H
  00056	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 4d ec	 mov	 DWORD PTR _pIOOperdata$4[ebp], ecx

; 212  : 		if(pIOOperdata->socket == Socket)

  00060	8b 45 ec	 mov	 eax, DWORD PTR _pIOOperdata$4[ebp]
  00063	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00066	3b 4d 08	 cmp	 ecx, DWORD PTR _Socket$[ebp]
  00069	75 20		 jne	 SHORT $LN8@CloseSocke

; 213  : 		{
; 214  : 			m_IORecvOperationItemList.RemoveAt(tempPos);

  0006b	8b 45 f0	 mov	 eax, DWORD PTR _tempPos$5[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 c1 28	 add	 ecx, 40			; 00000028H
  00075	e8 00 00 00 00	 call	 ?RemoveAt@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAt

; 215  : 			m_IdleIOOperationItemList.AddTail(pIOOperdata);

  0007a	8d 45 ec	 lea	 eax, DWORD PTR _pIOOperdata$4[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	83 c1 44	 add	 ecx, 68			; 00000044H
  00084	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail

; 216  : 			break;

  00089	eb 02		 jmp	 SHORT $LN3@CloseSocke
$LN8@CloseSocke:

; 217  : 		}
; 218  : 	}

  0008b	eb a0		 jmp	 SHORT $LN2@CloseSocke
$LN3@CloseSocke:

; 219  : 
; 220  : 	//清理记录
; 221  : 	pos=m_IOSendOperationItemList.GetHeadPosition();

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00093	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
  00098	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 222  : 	for (INT_PTR i=0;i<m_IOSendOperationItemList.GetCount();i++)

  0009b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  000a2	eb 09		 jmp	 SHORT $LN7@CloseSocke
$LN5@CloseSocke:
  000a4	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  000a7	83 c0 01	 add	 eax, 1
  000aa	89 45 e8	 mov	 DWORD PTR _i$3[ebp], eax
$LN7@CloseSocke:
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000b3	e8 00 00 00 00	 call	 ?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
  000b8	39 45 e8	 cmp	 DWORD PTR _i$3[ebp], eax
  000bb	7d 47		 jge	 SHORT $LN6@CloseSocke

; 223  : 	{
; 224  : 		POSITION tempPos=pos;

  000bd	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  000c0	89 45 e4	 mov	 DWORD PTR _tempPos$2[ebp], eax

; 225  : 		LPPER_IO_OPERATION_DATA pIOOperdata=m_IOSendOperationItemList.GetNext(pos);

  000c3	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000cd	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d4	89 4d e0	 mov	 DWORD PTR _pIOOperdata$1[ebp], ecx

; 226  : 		if(pIOOperdata->socket == Socket)

  000d7	8b 45 e0	 mov	 eax, DWORD PTR _pIOOperdata$1[ebp]
  000da	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000dd	3b 4d 08	 cmp	 ecx, DWORD PTR _Socket$[ebp]
  000e0	75 20		 jne	 SHORT $LN9@CloseSocke

; 227  : 		{
; 228  : 			m_IOSendOperationItemList.RemoveAt(tempPos);

  000e2	8b 45 e4	 mov	 eax, DWORD PTR _tempPos$2[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000ec	e8 00 00 00 00	 call	 ?RemoveAt@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAt

; 229  : 			m_IdleIOOperationItemList.AddTail(pIOOperdata);

  000f1	8d 45 e0	 lea	 eax, DWORD PTR _pIOOperdata$1[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f8	83 c1 44	 add	 ecx, 68			; 00000044H
  000fb	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail

; 230  : 			break;

  00100	eb 02		 jmp	 SHORT $LN6@CloseSocke
$LN9@CloseSocke:

; 231  : 		}
; 232  : 	}

  00102	eb a0		 jmp	 SHORT $LN5@CloseSocke
$LN6@CloseSocke:

; 233  : 
; 234  : 	return true;

  00104	b0 01		 mov	 al, 1

; 235  : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 04 00	 ret	 4
?CloseSocket@CFlashAccredit@@QAE_NI@Z ENDP		; CFlashAccredit::CloseSocket
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z
_TEXT	SEGMENT
$T1 = -76						; size = 4
_pIOOperdata$ = -8					; size = 4
_this$ = -4						; size = 4
_Socket$ = 8						; size = 4
_cbOperationType$ = 12					; size = 1
?GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z PROC ; CFlashAccredit::GetIOOperationItem, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 	//参数效验
; 162  : 	ASSERT(cbOperationType==SEND_POSTED || cbOperationType==RECV_POSTED);

  0000c	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbOperationType$[ebp]
  00010	83 f8 66	 cmp	 eax, 102		; 00000066H
  00013	74 22		 je	 SHORT $LN10@GetIOOpera
  00015	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _cbOperationType$[ebp]
  00019	83 f9 65	 cmp	 ecx, 101		; 00000065H
  0001c	74 19		 je	 SHORT $LN10@GetIOOpera
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z@4JA
  00024	83 c2 02	 add	 edx, 2
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@HFALJBOE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN10@GetIOOpera
  00036	cc		 int	 3
$LN10@GetIOOpera:

; 163  : 	if(cbOperationType!=SEND_POSTED && cbOperationType!=RECV_POSTED) return NULL;

  00037	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbOperationType$[ebp]
  0003b	83 f8 66	 cmp	 eax, 102		; 00000066H
  0003e	74 10		 je	 SHORT $LN2@GetIOOpera
  00040	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbOperationType$[ebp]
  00044	83 f8 65	 cmp	 eax, 101		; 00000065H
  00047	74 07		 je	 SHORT $LN2@GetIOOpera
  00049	33 c0		 xor	 eax, eax
  0004b	e9 cd 00 00 00	 jmp	 $LN1@GetIOOpera
$LN2@GetIOOpera:

; 164  : 
; 165  : 	//定义变量
; 166  : 	LPPER_IO_OPERATION_DATA pIOOperdata = NULL;

  00050	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pIOOperdata$[ebp], 0

; 167  : 
; 168  : 	//获取BUFF
; 169  : 	if(m_IdleIOOperationItemList.GetCount() > 0)

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 44	 add	 ecx, 68			; 00000044H
  0005d	e8 00 00 00 00	 call	 ?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
  00062	85 c0		 test	 eax, eax
  00064	7e 10		 jle	 SHORT $LN3@GetIOOpera

; 170  : 	{
; 171  : 		pIOOperdata = m_IdleIOOperationItemList.RemoveHead();

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 44	 add	 ecx, 68			; 00000044H
  0006c	e8 00 00 00 00	 call	 ?RemoveHead@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU_PER_IO_OPERATION_DATA@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveHead
  00071	89 45 f8	 mov	 DWORD PTR _pIOOperdata$[ebp], eax

; 172  : 	}
; 173  : 	else //分配缓存

  00074	eb 23		 jmp	 SHORT $LN4@GetIOOpera
$LN3@GetIOOpera:

; 174  : 	{
; 175  : 		pIOOperdata = new PER_IO_OPERATION_DATA;

  00076	68 24 04 00 00	 push	 1060			; 00000424H
  0007b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00080	83 c4 04	 add	 esp, 4
  00083	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00086	8b 45 b4	 mov	 eax, DWORD PTR $T1[ebp]
  00089	89 45 f8	 mov	 DWORD PTR _pIOOperdata$[ebp], eax

; 176  : 		if( pIOOperdata == NULL) return NULL;

  0008c	83 7d f8 00	 cmp	 DWORD PTR _pIOOperdata$[ebp], 0
  00090	75 07		 jne	 SHORT $LN4@GetIOOpera
  00092	33 c0		 xor	 eax, eax
  00094	e9 84 00 00 00	 jmp	 $LN1@GetIOOpera
$LN4@GetIOOpera:

; 177  : 	}
; 178  : 
; 179  : 	//设置缓存
; 180  : 	pIOOperdata->socket = Socket;

  00099	8b 45 f8	 mov	 eax, DWORD PTR _pIOOperdata$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _Socket$[ebp]
  0009f	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 181  : 	memset(&(pIOOperdata->Overlapped),0,sizeof(OVERLAPPED));

  000a2	6a 14		 push	 20			; 00000014H
  000a4	6a 00		 push	 0
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _pIOOperdata$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _memset
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 182  : 	memset(pIOOperdata->cbDataBuff,0,sizeof(pIOOperdata->cbDataBuff));

  000b2	68 00 04 00 00	 push	 1024			; 00000400H
  000b7	6a 00		 push	 0
  000b9	8b 45 f8	 mov	 eax, DWORD PTR _pIOOperdata$[ebp]
  000bc	83 c0 24	 add	 eax, 36			; 00000024H
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 _memset
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 183  : 	pIOOperdata->WSABuff.len = sizeof(pIOOperdata->cbDataBuff);

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _pIOOperdata$[ebp]
  000cb	c7 40 14 00 04
	00 00		 mov	 DWORD PTR [eax+20], 1024 ; 00000400H

; 184  : 	pIOOperdata->WSABuff.buf = pIOOperdata->cbDataBuff;

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _pIOOperdata$[ebp]
  000d5	83 c0 24	 add	 eax, 36			; 00000024H
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _pIOOperdata$[ebp]
  000db	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 185  : 	pIOOperdata->cbOperationType = cbOperationType;

  000de	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbOperationType$[ebp]
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _pIOOperdata$[ebp]
  000e5	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 186  : 
; 187  : 	//记录缓存
; 188  : 	if(cbOperationType == RECV_POSTED)

  000e8	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbOperationType$[ebp]
  000ec	83 f8 65	 cmp	 eax, 101		; 00000065H
  000ef	75 11		 jne	 SHORT $LN6@GetIOOpera

; 189  : 	{
; 190  : 		m_IORecvOperationItemList.AddTail(pIOOperdata);

  000f1	8d 45 f8	 lea	 eax, DWORD PTR _pIOOperdata$[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f8	83 c1 28	 add	 ecx, 40			; 00000028H
  000fb	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail
  00100	eb 18		 jmp	 SHORT $LN7@GetIOOpera
$LN6@GetIOOpera:

; 191  : 	}
; 192  : 	else if(cbOperationType == SEND_POSTED)

  00102	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbOperationType$[ebp]
  00106	83 f8 66	 cmp	 eax, 102		; 00000066H
  00109	75 0f		 jne	 SHORT $LN7@GetIOOpera

; 193  : 	{
; 194  : 		m_IOSendOperationItemList.AddTail(pIOOperdata);

  0010b	8d 45 f8	 lea	 eax, DWORD PTR _pIOOperdata$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00115	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail
$LN7@GetIOOpera:

; 195  : 	}
; 196  : 
; 197  : 	return pIOOperdata;

  0011a	8b 45 f8	 mov	 eax, DWORD PTR _pIOOperdata$[ebp]
$LN1@GetIOOpera:

; 198  : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
?GetIOOperationItem@CFlashAccredit@@QAEPAU_PER_IO_OPERATION_DATA@@IE@Z ENDP ; CFlashAccredit::GetIOOperationItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?SetServiceParameter@CFlashAccredit@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wServicePort$ = 8					; size = 2
?SetServiceParameter@CFlashAccredit@@QAEXG@Z PROC	; CFlashAccredit::SetServiceParameter, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 155  : 	m_wServicePort=wServicePort;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 4d 08	 mov	 cx, WORD PTR _wServicePort$[ebp]
  00013	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 156  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?SetServiceParameter@CFlashAccredit@@QAEXG@Z ENDP	; CFlashAccredit::SetServiceParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?StopService@CFlashAccredit@@QAE_NXZ
_TEXT	SEGMENT
$T1 = -108						; size = 4
$T2 = -104						; size = 4
$T3 = -100						; size = 4
_pIOOperdata$4 = -32					; size = 4
_i$5 = -28						; size = 4
_pIOOperdata$6 = -24					; size = 4
_i$7 = -20						; size = 4
_pIOOperdata$8 = -16					; size = 4
_i$9 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
?StopService@CFlashAccredit@@QAE_NXZ PROC		; CFlashAccredit::StopService, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 	//清理记录
; 105  : 	POSITION pos=m_IORecvOperationItemList.GetHeadPosition();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 28	 add	 ecx, 40			; 00000028H
  00012	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
  00017	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 106  : 	for (INT_PTR i=0;i<m_IORecvOperationItemList.GetCount();i++)

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$9[ebp], 0
  00021	eb 09		 jmp	 SHORT $LN4@StopServic
$LN2@StopServic:
  00023	8b 45 f4	 mov	 eax, DWORD PTR _i$9[ebp]
  00026	83 c0 01	 add	 eax, 1
  00029	89 45 f4	 mov	 DWORD PTR _i$9[ebp], eax
$LN4@StopServic:
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 28	 add	 ecx, 40			; 00000028H
  00032	e8 00 00 00 00	 call	 ?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
  00037	39 45 f4	 cmp	 DWORD PTR _i$9[ebp], eax
  0003a	7d 4a		 jge	 SHORT $LN3@StopServic

; 107  : 	{
; 108  : 		LPPER_IO_OPERATION_DATA pIOOperdata=m_IORecvOperationItemList.GetNext(pos);

  0003c	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 28	 add	 ecx, 40			; 00000028H
  00046	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	89 4d f0	 mov	 DWORD PTR _pIOOperdata$8[ebp], ecx

; 109  : 		if(pIOOperdata->socket)

  00050	8b 45 f0	 mov	 eax, DWORD PTR _pIOOperdata$8[ebp]
  00053	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00057	74 2b		 je	 SHORT $LN11@StopServic

; 110  : 		{
; 111  : 			//关闭连接
; 112  : 			closesocket(pIOOperdata->socket);

  00059	8b 45 f0	 mov	 eax, DWORD PTR _pIOOperdata$8[ebp]
  0005c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0005f	51		 push	 ecx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 113  : 			delete pIOOperdata;

  00066	8b 45 f0	 mov	 eax, DWORD PTR _pIOOperdata$8[ebp]
  00069	89 45 9c	 mov	 DWORD PTR $T3[ebp], eax
  0006c	68 24 04 00 00	 push	 1060			; 00000424H
  00071	8b 4d 9c	 mov	 ecx, DWORD PTR $T3[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007a	83 c4 08	 add	 esp, 8

; 114  : 			pIOOperdata = NULL;

  0007d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pIOOperdata$8[ebp], 0
$LN11@StopServic:

; 115  : 		}
; 116  : 	}

  00084	eb 9d		 jmp	 SHORT $LN2@StopServic
$LN3@StopServic:

; 117  : 	m_IORecvOperationItemList.RemoveAll();

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	83 c1 28	 add	 ecx, 40			; 00000028H
  0008c	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll

; 118  : 
; 119  : 	//清理记录
; 120  : 	pos=m_IOSendOperationItemList.GetHeadPosition();

  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00097	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
  0009c	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 121  : 	for (INT_PTR i=0;i<m_IOSendOperationItemList.GetCount();i++)

  0009f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  000a6	eb 09		 jmp	 SHORT $LN7@StopServic
$LN5@StopServic:
  000a8	8b 45 ec	 mov	 eax, DWORD PTR _i$7[ebp]
  000ab	83 c0 01	 add	 eax, 1
  000ae	89 45 ec	 mov	 DWORD PTR _i$7[ebp], eax
$LN7@StopServic:
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000b7	e8 00 00 00 00	 call	 ?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
  000bc	39 45 ec	 cmp	 DWORD PTR _i$7[ebp], eax
  000bf	7d 4a		 jge	 SHORT $LN6@StopServic

; 122  : 	{
; 123  : 		LPPER_IO_OPERATION_DATA pIOOperdata=m_IOSendOperationItemList.GetNext(pos);

  000c1	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000cb	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d2	89 4d e8	 mov	 DWORD PTR _pIOOperdata$6[ebp], ecx

; 124  : 		if(pIOOperdata->socket)

  000d5	8b 45 e8	 mov	 eax, DWORD PTR _pIOOperdata$6[ebp]
  000d8	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  000dc	74 2b		 je	 SHORT $LN12@StopServic

; 125  : 		{
; 126  : 			//关闭连接
; 127  : 			closesocket(pIOOperdata->socket);

  000de	8b 45 e8	 mov	 eax, DWORD PTR _pIOOperdata$6[ebp]
  000e1	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000e4	51		 push	 ecx
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 128  : 			delete pIOOperdata;

  000eb	8b 45 e8	 mov	 eax, DWORD PTR _pIOOperdata$6[ebp]
  000ee	89 45 98	 mov	 DWORD PTR $T2[ebp], eax
  000f1	68 24 04 00 00	 push	 1060			; 00000424H
  000f6	8b 4d 98	 mov	 ecx, DWORD PTR $T2[ebp]
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ff	83 c4 08	 add	 esp, 8

; 129  : 			pIOOperdata = NULL;

  00102	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pIOOperdata$6[ebp], 0
$LN12@StopServic:

; 130  : 		}
; 131  : 	}

  00109	eb 9d		 jmp	 SHORT $LN5@StopServic
$LN6@StopServic:

; 132  : 	m_IOSendOperationItemList.RemoveAll();

  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00111	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll

; 133  : 
; 134  : 	//清理记录
; 135  : 	pos=m_IdleIOOperationItemList.GetHeadPosition();

  00116	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	83 c1 44	 add	 ecx, 68			; 00000044H
  0011c	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
  00121	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 136  : 	for (INT_PTR i=0;i<m_IdleIOOperationItemList.GetCount();i++)

  00124	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  0012b	eb 09		 jmp	 SHORT $LN10@StopServic
$LN8@StopServic:
  0012d	8b 45 e4	 mov	 eax, DWORD PTR _i$5[ebp]
  00130	83 c0 01	 add	 eax, 1
  00133	89 45 e4	 mov	 DWORD PTR _i$5[ebp], eax
$LN10@StopServic:
  00136	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	83 c1 44	 add	 ecx, 68			; 00000044H
  0013c	e8 00 00 00 00	 call	 ?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
  00141	39 45 e4	 cmp	 DWORD PTR _i$5[ebp], eax
  00144	7d 4a		 jge	 SHORT $LN9@StopServic

; 137  : 	{
; 138  : 		LPPER_IO_OPERATION_DATA pIOOperdata=m_IdleIOOperationItemList.GetNext(pos);

  00146	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  00149	50		 push	 eax
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	83 c1 44	 add	 ecx, 68			; 00000044H
  00150	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
  00155	8b 08		 mov	 ecx, DWORD PTR [eax]
  00157	89 4d e0	 mov	 DWORD PTR _pIOOperdata$4[ebp], ecx

; 139  : 		if(pIOOperdata->socket)

  0015a	8b 45 e0	 mov	 eax, DWORD PTR _pIOOperdata$4[ebp]
  0015d	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00161	74 2b		 je	 SHORT $LN13@StopServic

; 140  : 		{
; 141  : 			//关闭连接
; 142  : 			closesocket(pIOOperdata->socket);

  00163	8b 45 e0	 mov	 eax, DWORD PTR _pIOOperdata$4[ebp]
  00166	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00169	51		 push	 ecx
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 143  : 			delete pIOOperdata;

  00170	8b 45 e0	 mov	 eax, DWORD PTR _pIOOperdata$4[ebp]
  00173	89 45 94	 mov	 DWORD PTR $T1[ebp], eax
  00176	68 24 04 00 00	 push	 1060			; 00000424H
  0017b	8b 4d 94	 mov	 ecx, DWORD PTR $T1[ebp]
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00184	83 c4 08	 add	 esp, 8

; 144  : 			pIOOperdata = NULL;

  00187	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pIOOperdata$4[ebp], 0
$LN13@StopServic:

; 145  : 		}
; 146  : 	}

  0018e	eb 9d		 jmp	 SHORT $LN8@StopServic
$LN9@StopServic:

; 147  : 	m_IdleIOOperationItemList.RemoveAll();

  00190	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00193	83 c1 44	 add	 ecx, 68			; 00000044H
  00196	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll

; 148  : 
; 149  : 	return true;

  0019b	b0 01		 mov	 al, 1

; 150  : }

  0019d	5f		 pop	 edi
  0019e	5e		 pop	 esi
  0019f	5b		 pop	 ebx
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c3		 ret	 0
?StopService@CFlashAccredit@@QAE_NXZ ENDP		; CFlashAccredit::StopService
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?StartService@CFlashAccredit@@QAE_NXZ
_TEXT	SEGMENT
_pszString$1 = -988					; size = 4
_pszString$2 = -984					; size = 4
_SystemInfo$ = -980					; size = 36
_szString$3 = -944					; size = 512
_pszString$4 = -432					; size = 4
_pszString$5 = -428					; size = 4
_SocketAddr$ = -424					; size = 16
_WSAData$ = -408					; size = 400
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?StartService@CFlashAccredit@@QAE_NXZ PROC		; CFlashAccredit::StartService, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 04 00
	00		 sub	 esp, 1116		; 0000045cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	//加载网络
; 31   : 	WSADATA WSAData;
; 32   : 	if (WSAStartup(MAKEWORD(2,2),&WSAData)!=0)

  00019	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR _WSAData$[ebp]
  0001f	50		 push	 eax
  00020	68 02 02 00 00	 push	 514			; 00000202H
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8
  0002b	85 c0		 test	 eax, eax
  0002d	74 15		 je	 SHORT $LN2@StartServi

; 33   : 	{
; 34   : 		AfxMessageBox(TEXT("加载网络失败!"));

  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OLPJBALP@?$LM?S?T?X?M?x?B?g?J?$KH?$LA?$NM?$CB@
  00038	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox

; 35   : 		return false;

  0003d	32 c0		 xor	 al, al
  0003f	e9 de 01 00 00	 jmp	 $LN1@StartServi
$LN2@StartServi:

; 36   : 	}
; 37   : 
; 38   : 	//建立网络
; 39   : 	SOCKADDR_IN SocketAddr;
; 40   : 	ZeroMemory(&SocketAddr,sizeof(SocketAddr));

  00044	6a 10		 push	 16			; 00000010H
  00046	6a 00		 push	 0
  00048	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _SocketAddr$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _memset
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 
; 42   : 	//建立网络
; 43   : 	SocketAddr.sin_family=AF_INET;

  00057	b8 02 00 00 00	 mov	 eax, 2
  0005c	66 89 85 58 fe
	ff ff		 mov	 WORD PTR _SocketAddr$[ebp], ax

; 44   : 	SocketAddr.sin_addr.s_addr=INADDR_ANY;

  00063	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _SocketAddr$[ebp+4], 0

; 45   : 	SocketAddr.sin_port=htons(m_wServicePort);

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00070	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00074	51		 push	 ecx
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  0007b	66 89 85 5a fe
	ff ff		 mov	 WORD PTR _SocketAddr$[ebp+2], ax

; 46   : 	m_hServerSocket=WSASocket(AF_INET,SOCK_STREAM,IPPROTO_TCP,NULL,0,WSA_FLAG_OVERLAPPED);

  00082	6a 01		 push	 1
  00084	6a 00		 push	 0
  00086	6a 00		 push	 0
  00088	6a 06		 push	 6
  0008a	6a 01		 push	 1
  0008c	6a 02		 push	 2
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSASocketA@24
  00094	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	89 01		 mov	 DWORD PTR [ecx], eax

; 47   : 
; 48   : 	//错误判断
; 49   : 	if (m_hServerSocket==INVALID_SOCKET) 

  00099	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	83 38 ff	 cmp	 DWORD PTR [eax], -1
  0009f	75 21		 jne	 SHORT $LN3@StartServi

; 50   : 	{
; 51   : 		LPCTSTR pszString=TEXT("系统资源不足或者 TCP/IP 协议没有安装，网络启动失败");

  000a1	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszString$5[ebp], OFFSET ??_C@_0DD@KAEGCGFA@?O?$LF?M?$LD?W?J?T?$LE?$LC?$LL?W?c?$LL?r?U?$NP?5TCP?1IP?5?P?$KN?R?i?C?$LL?S@

; 52   : 		AfxMessageBox(pszString);

  000ab	6a 00		 push	 0
  000ad	6a 00		 push	 0
  000af	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _pszString$5[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox

; 53   : 		return false;

  000bb	32 c0		 xor	 al, al
  000bd	e9 60 01 00 00	 jmp	 $LN1@StartServi
$LN3@StartServi:

; 54   : 	}
; 55   : 
; 56   : 	//绑定链接
; 57   : 	if (::bind(m_hServerSocket,(SOCKADDR*)&SocketAddr,sizeof(SocketAddr))==SOCKET_ERROR)

  000c2	6a 10		 push	 16			; 00000010H
  000c4	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _SocketAddr$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d0	52		 push	 edx
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12
  000d7	83 f8 ff	 cmp	 eax, -1
  000da	75 21		 jne	 SHORT $LN4@StartServi

; 58   : 	{
; 59   : 		LPCTSTR pszString=TEXT("网络绑定发生错误，网络启动失败");

  000dc	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszString$4[ebp], OFFSET ??_C@_0BP@MEFHIL@?M?x?B?g?$LA?s?$LG?$KI?$LH?$KC?I?z?$LE?m?N?s?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@

; 60   : 		AfxMessageBox(pszString);

  000e6	6a 00		 push	 0
  000e8	6a 00		 push	 0
  000ea	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _pszString$4[ebp]
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox

; 61   : 		return false;

  000f6	32 c0		 xor	 al, al
  000f8	e9 25 01 00 00	 jmp	 $LN1@StartServi
$LN4@StartServi:

; 62   : 	}
; 63   : 
; 64   : 	//监听端口
; 65   : 	if (listen(m_hServerSocket,200)==SOCKET_ERROR)

  000fd	68 c8 00 00 00	 push	 200			; 000000c8H
  00102	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00105	8b 08		 mov	 ecx, DWORD PTR [eax]
  00107	51		 push	 ecx
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__listen@8
  0010e	83 f8 ff	 cmp	 eax, -1
  00111	75 59		 jne	 SHORT $LN5@StartServi

; 66   : 	{
; 67   : 		TCHAR szString[512]=TEXT("");

  00113	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00118	88 85 50 fc ff
	ff		 mov	 BYTE PTR _szString$3[ebp], al
  0011e	68 ff 01 00 00	 push	 511			; 000001ffH
  00123	6a 00		 push	 0
  00125	8d 85 51 fc ff
	ff		 lea	 eax, DWORD PTR _szString$3[ebp+1]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 _memset
  00131	83 c4 0c	 add	 esp, 12			; 0000000cH

; 68   : 		_sntprintf_s(szString,CountArray(szString),TEXT("端口正被其他服务占用，监听 %d 端口失败"), m_wServicePort);

  00134	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00137	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0013b	51		 push	 ecx
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DNAGPLGD@?$LG?K?$LP?Z?U?$PN?$LB?$LL?F?d?K?$PL?$LH?$PO?N?q?U?$LM?S?C?$KD?$KM?$LM?$OA?L?$PN?5?$CFd?5?$LG@
  00141	68 00 02 00 00	 push	 512			; 00000200H
  00146	8d 95 50 fc ff
	ff		 lea	 edx, DWORD PTR _szString$3[ebp]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 ??$_snprintf_s@$0CAA@@@YAHAAY0CAA@DIPBDZZ ; _snprintf_s<512>
  00152	83 c4 10	 add	 esp, 16			; 00000010H

; 69   : 		AfxMessageBox(szString);

  00155	6a 00		 push	 0
  00157	6a 00		 push	 0
  00159	8d 85 50 fc ff
	ff		 lea	 eax, DWORD PTR _szString$3[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox

; 70   : 		return false;

  00165	32 c0		 xor	 al, al
  00167	e9 b6 00 00 00	 jmp	 $LN1@StartServi
$LN5@StartServi:

; 71   : 	}
; 72   : 
; 73   : 	//系统信息
; 74   : 	SYSTEM_INFO SystemInfo;
; 75   : 	GetSystemInfo(&SystemInfo);

  0016c	8d 85 2c fc ff
	ff		 lea	 eax, DWORD PTR _SystemInfo$[ebp]
  00172	50		 push	 eax
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4

; 76   : 
; 77   : 	//完成端口
; 78   : 	m_lIOCPHandle = CreateIoCompletionPort(INVALID_HANDLE_VALUE,NULL,NULL,SystemInfo.dwNumberOfProcessors);

  00179	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _SystemInfo$[ebp+20]
  0017f	50		 push	 eax
  00180	6a 00		 push	 0
  00182	6a 00		 push	 0
  00184	6a ff		 push	 -1
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateIoCompletionPort@16
  0018c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 79   : 	if(m_lIOCPHandle == NULL)

  00192	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00195	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00199	75 1e		 jne	 SHORT $LN6@StartServi

; 80   : 	{
; 81   : 		LPCTSTR pszString=TEXT("创建网络资源失败，网络启动失败");

  0019b	c7 85 28 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszString$2[ebp], OFFSET ??_C@_0BP@NMCBKPBH@?$LE?$LE?$LN?$KI?M?x?B?g?W?J?T?$LE?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA?$NM@

; 82   : 		AfxMessageBox(pszString);

  001a5	6a 00		 push	 0
  001a7	6a 00		 push	 0
  001a9	8b 85 28 fc ff
	ff		 mov	 eax, DWORD PTR _pszString$2[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox

; 83   : 		return false;

  001b5	32 c0		 xor	 al, al
  001b7	eb 69		 jmp	 SHORT $LN1@StartServi
$LN6@StartServi:

; 84   : 	}
; 85   : 
; 86   : 	//绑定SOCKET
; 87   : 	if(NULL == CreateIoCompletionPort((HANDLE)m_hServerSocket, m_lIOCPHandle, 0, 0))

  001b9	6a 00		 push	 0
  001bb	6a 00		 push	 0
  001bd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001c0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001c3	51		 push	 ecx
  001c4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001c7	8b 02		 mov	 eax, DWORD PTR [edx]
  001c9	50		 push	 eax
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateIoCompletionPort@16
  001d0	85 c0		 test	 eax, eax
  001d2	75 1e		 jne	 SHORT $LN7@StartServi

; 88   : 	{
; 89   : 		LPCTSTR pszString=TEXT("绑定监听SOCKET失败，网络启动失败");

  001d4	c7 85 24 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszString$1[ebp], OFFSET ??_C@_0CB@LCBIFBCI@?$LA?s?$LG?$KI?$LM?$OA?L?$PNSOCKET?J?$KH?$LA?$NM?$KD?$KM?M?x?B?g?F?t?$LG?$KP?J?$KH?$LA@

; 90   : 		AfxMessageBox(pszString);

  001de	6a 00		 push	 0
  001e0	6a 00		 push	 0
  001e2	8b 85 24 fc ff
	ff		 mov	 eax, DWORD PTR _pszString$1[ebp]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ?AfxMessageBox@@YGHPBDII@Z ; AfxMessageBox

; 91   : 		return false;

  001ee	32 c0		 xor	 al, al
  001f0	eb 30		 jmp	 SHORT $LN1@StartServi
$LN7@StartServi:

; 92   : 	}
; 93   : 
; 94   : 	//创建工作线程
; 95   : 	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)AcceptWork, (LPVOID)this, 0, 0);

  001f2	6a 00		 push	 0
  001f4	6a 00		 push	 0
  001f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	50		 push	 eax
  001fa	68 00 00 00 00	 push	 OFFSET ?AcceptWork@CFlashAccredit@@SAXPAX@Z ; CFlashAccredit::AcceptWork
  001ff	6a 00		 push	 0
  00201	6a 00		 push	 0
  00203	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24

; 96   : 	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)ReadWriteWork, (LPVOID)this, 0, 0);

  00209	6a 00		 push	 0
  0020b	6a 00		 push	 0
  0020d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00210	50		 push	 eax
  00211	68 00 00 00 00	 push	 OFFSET ?ReadWriteWork@CFlashAccredit@@SAXPAX@Z ; CFlashAccredit::ReadWriteWork
  00216	6a 00		 push	 0
  00218	6a 00		 push	 0
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24

; 97   : 
; 98   : 	return true;

  00220	b0 01		 mov	 al, 1
$LN1@StartServi:

; 99   : }

  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx
  00225	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00228	33 cd		 xor	 ecx, ebp
  0022a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022f	8b e5		 mov	 esp, ebp
  00231	5d		 pop	 ebp
  00232	c3		 ret	 0
?StartService@CFlashAccredit@@QAE_NXZ ENDP		; CFlashAccredit::StartService
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ??1CFlashAccredit@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFlashAccredit@@QAE@XZ PROC				; CFlashAccredit::~CFlashAccredit, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CFlashAccredit@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	StopService();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?StopService@CFlashAccredit@@QAE_NXZ ; CFlashAccredit::StopService

; 24   : 	WSACleanup();

  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0

; 25   : }

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 44	 add	 ecx, 68			; 00000044H
  0003f	e8 00 00 00 00	 call	 ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 28	 add	 ecx, 40			; 00000028H
  0004a	e8 00 00 00 00	 call	 ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00055	e8 00 00 00 00	 call	 ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CFlashAccredit@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CFlashAccredit@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CFlashAccredit@@QAE@XZ ENDP				; CFlashAccredit::~CFlashAccredit
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ??0CFlashAccredit@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlashAccredit@@QAE@XZ PROC				; CFlashAccredit::CFlashAccredit, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlashAccredit@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	6a 0a		 push	 10			; 0000000aH
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00033	e8 00 00 00 00	 call	 ??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	6a 0a		 push	 10			; 0000000aH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 28	 add	 ecx, 40			; 00000028H
  00047	e8 00 00 00 00	 call	 ??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
  0004c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00050	6a 0a		 push	 10			; 0000000aH
  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 44	 add	 ecx, 68			; 00000044H
  00058	e8 00 00 00 00	 call	 ??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
  0005d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 13   : 	m_hServerSocket = INVALID_SOCKET;

  00061	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00064	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 14   : 	m_lIOCPHandle = INVALID_HANDLE_VALUE;

  0006a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 15   : 	m_wServicePort = 843;

  00074	b8 4b 03 00 00	 mov	 eax, 843		; 0000034bH
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 16   : 	m_IOSendOperationItemList.RemoveAll();

  00080	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00086	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll

; 17   : 	m_IORecvOperationItemList.RemoveAll();

  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	83 c1 28	 add	 ecx, 40			; 00000028H
  00091	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll

; 18   : 	m_IdleIOOperationItemList.RemoveAll();

  00096	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 44	 add	 ecx, 68			; 00000044H
  0009c	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll

; 19   : }

  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlashAccredit@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
__unwindfunclet$??0CFlashAccredit@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
__unwindfunclet$??0CFlashAccredit@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 44	 add	 ecx, 68			; 00000044H
  0001c	e9 00 00 00 00	 jmp	 ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
__ehhandler$??0CFlashAccredit@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlashAccredit@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlashAccredit@@QAE@XZ ENDP				; CFlashAccredit::CFlashAccredit
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEPAXI@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 21		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 0e		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	6a 1c		 push	 28			; 0000001cH
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEPAXI@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AssertValid@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXXZ PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AssertValid, COMDAT
; _this$ = ecx

; 1225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1226 : 	CObject::AssertValid();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 1227 : 
; 1228 : 	if (m_nCount == 0)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001b	75 3c		 jne	 SHORT $LN2@AssertVali

; 1229 : 	{
; 1230 : 		// empty list
; 1231 : 		ASSERT(m_pNodeHead == NULL);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 14		 je	 SHORT $LN5@AssertVali
  00026	68 cf 04 00 00	 push	 1231			; 000004cfH
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00030	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00035	85 c0		 test	 eax, eax
  00037	74 01		 je	 SHORT $LN5@AssertVali
  00039	cc		 int	 3
$LN5@AssertVali:

; 1232 : 		ASSERT(m_pNodeTail == NULL);

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00041	74 14		 je	 SHORT $LN6@AssertVali
  00043	68 d0 04 00 00	 push	 1232			; 000004d0H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN6@AssertVali
  00056	cc		 int	 3
$LN6@AssertVali:

; 1233 : 	}
; 1234 : 	else

  00057	eb 50		 jmp	 SHORT $LN1@AssertVali
$LN2@AssertVali:

; 1235 : 	{
; 1236 : 		// non-empty list
; 1237 : 		ASSERT(AfxIsValidAddress(m_pNodeHead, sizeof(CNode)));

  00059	6a 01		 push	 1
  0005b	6a 0c		 push	 12			; 0000000cH
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 14		 jne	 SHORT $LN7@AssertVali
  0006d	68 d5 04 00 00	 push	 1237			; 000004d5H
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00077	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007c	85 c0		 test	 eax, eax
  0007e	74 01		 je	 SHORT $LN7@AssertVali
  00080	cc		 int	 3
$LN7@AssertVali:

; 1238 : 		ASSERT(AfxIsValidAddress(m_pNodeTail, sizeof(CNode)));

  00081	6a 01		 push	 1
  00083	6a 0c		 push	 12			; 0000000cH
  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00091	85 c0		 test	 eax, eax
  00093	75 14		 jne	 SHORT $LN1@AssertVali
  00095	68 d6 04 00 00	 push	 1238			; 000004d6H
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a4	85 c0		 test	 eax, eax
  000a6	74 01		 je	 SHORT $LN1@AssertVali
  000a8	cc		 int	 3
$LN1@AssertVali:

; 1239 : 	}
; 1240 : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?AssertValid@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXXZ ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Dump@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_temp$1 = -12						; size = 4
_pos$2 = -8						; size = 4
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXAAVCDumpContext@@@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::Dump, COMDAT
; _this$ = ecx

; 1204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1205 : 	CObject::Dump(dc);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 1206 : 
; 1207 : 	dc << "with " << m_nCount << " elements";

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_09HCLNAIDE@?5elements@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_05PLCFPPOI@with?5@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1208 : 	if (dc.GetDepth() > 0)

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00047	85 c0		 test	 eax, eax
  00049	7e 49		 jle	 SHORT $LN4@Dump

; 1209 : 	{
; 1210 : 		POSITION pos = GetHeadPosition();

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
  00053	89 45 f8	 mov	 DWORD PTR _pos$2[ebp], eax
$LN2@Dump:

; 1211 : 		while (pos != NULL)

  00056	83 7d f8 00	 cmp	 DWORD PTR _pos$2[ebp], 0
  0005a	74 38		 je	 SHORT $LN4@Dump

; 1212 : 		{
; 1213 : 			TYPE temp[1];
; 1214 : 			temp[0] = ((CList*)this)->GetNext(pos);

  0005c	8d 45 f8	 lea	 eax, DWORD PTR _pos$2[ebp]
  0005f	50		 push	 eax
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
  00068	b9 04 00 00 00	 mov	 ecx, 4
  0006d	6b d1 00	 imul	 edx, ecx, 0
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	89 44 15 f4	 mov	 DWORD PTR _temp$1[ebp+edx], eax

; 1215 : 			dc << "\n";

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0007e	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1216 : 			DumpElements<TYPE>(dc, temp, 1);

  00083	6a 01		 push	 1
  00085	8d 45 f4	 lea	 eax, DWORD PTR _temp$1[ebp]
  00088	50		 push	 eax
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ??$DumpElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCDumpContext@@PBQAU_PER_IO_OPERATION_DATA@@H@Z ; DumpElements<_PER_IO_OPERATION_DATA *>

; 1217 : 		}

  00092	eb c2		 jmp	 SHORT $LN2@Dump
$LN4@Dump:

; 1218 : 	}
; 1219 : 
; 1220 : 	dc << "\n";

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0009c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1221 : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
?Dump@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UBEXAAVCDumpContext@@@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
tv136 = -88						; size = 4
_newData$1 = -20					; size = 4
_nNewCount$2 = -16					; size = 4
_pData$3 = -12						; size = 4
_pNode$4 = -8						; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEXAAVCArchive@@@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1170 : 	ASSERT_VALID(this);

  0000c	68 92 04 00 00	 push	 1170			; 00000492H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1171 : 
; 1172 : 	CObject::Serialize(ar);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 1173 : 
; 1174 : 	if (ar.IsStoring())

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00033	85 c0		 test	 eax, eax
  00035	74 69		 je	 SHORT $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	51		 push	 ecx
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00041	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	89 4d f8	 mov	 DWORD PTR _pNode$4[ebp], ecx
  0004f	eb 08		 jmp	 SHORT $LN4@Serialize
$LN2@Serialize:
  00051	8b 45 f8	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d f8	 mov	 DWORD PTR _pNode$4[ebp], ecx
$LN4@Serialize:
  00059	83 7d f8 00	 cmp	 DWORD PTR _pNode$4[ebp], 0
  0005d	74 3f		 je	 SHORT $LN3@Serialize

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));

  0005f	6a 01		 push	 1
  00061	6a 0c		 push	 12			; 0000000cH
  00063	8b 45 f8	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN10@Serialize
  00070	68 9b 04 00 00	 push	 1179			; 0000049bH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN10@Serialize
  00083	cc		 int	 3
$LN10@Serialize:

; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00084	8b 45 f8	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00087	83 c0 08	 add	 eax, 8
  0008a	89 45 f4	 mov	 DWORD PTR _pData$3[ebp], eax

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);

  0008d	6a 01		 push	 1
  0008f	8b 45 f4	 mov	 eax, DWORD PTR _pData$3[ebp]
  00092	50		 push	 eax
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ??$SerializeElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCArchive@@PAPAU_PER_IO_OPERATION_DATA@@H@Z ; SerializeElements<_PER_IO_OPERATION_DATA *>

; 1187 : 		}

  0009c	eb b3		 jmp	 SHORT $LN2@Serialize
$LN3@Serialize:

; 1188 : 	}
; 1189 : 	else

  0009e	eb 46		 jmp	 SHORT $LN1@Serialize
$LN7@Serialize:

; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000a3	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  000a8	89 45 f0	 mov	 DWORD PTR _nNewCount$2[ebp], eax
$LN5@Serialize:

; 1192 : 		while (nNewCount--)

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$2[ebp]
  000ae	89 45 a8	 mov	 DWORD PTR tv136[ebp], eax
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _nNewCount$2[ebp]
  000b4	83 e9 01	 sub	 ecx, 1
  000b7	89 4d f0	 mov	 DWORD PTR _nNewCount$2[ebp], ecx
  000ba	83 7d a8 00	 cmp	 DWORD PTR tv136[ebp], 0
  000be	74 26		 je	 SHORT $LN1@Serialize

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);

  000c0	6a 01		 push	 1
  000c2	8d 45 ec	 lea	 eax, DWORD PTR _newData$1[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ??$SerializeElements@PAU_PER_IO_OPERATION_DATA@@@@YGXAAVCArchive@@PAPAU_PER_IO_OPERATION_DATA@@H@Z ; SerializeElements<_PER_IO_OPERATION_DATA *>

; 1196 : 			AddTail(newData[0]);

  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	6b c8 00	 imul	 ecx, eax, 0
  000d7	8d 54 0d ec	 lea	 edx, DWORD PTR _newData$1[ebp+ecx]
  000db	52		 push	 edx
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail

; 1197 : 		}

  000e4	eb c5		 jmp	 SHORT $LN5@Serialize
$LN1@Serialize:

; 1198 : 	}
; 1199 : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
?Serialize@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAEXAAVCArchive@@@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@

; 879  : 	RemoveAll();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $LN1@CList
  00045	68 70 03 00 00	 push	 880			; 00000370H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN1@CList
  00058	cc		 int	 3
$LN1@CList:

; 881  : }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@UAE@XZ ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::~CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?FreeNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEXPAUCNode@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?FreeNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEXPAUCNode@1@@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::FreeNode, COMDAT
; _this$ = ecx

; 936  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 937  : 	pNode->data.~TYPE();
; 938  : 	pNode->pNext = m_pNodeFree;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pNode$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 939  : 	m_pNodeFree = pNode;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _pNode$[ebp]
  0001d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 940  : 	m_nCount--;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00026	83 e9 01	 sub	 ecx, 1
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00036	7d 14		 jge	 SHORT $LN4@FreeNode
  00038	68 ad 03 00 00	 push	 941			; 000003adH
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN4@FreeNode
  0004b	cc		 int	 3
$LN4@FreeNode:

; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00053	75 08		 jne	 SHORT $LN1@FreeNode

; 945  : 		RemoveAll();

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll
$LN1@FreeNode:

; 946  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?FreeNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEXPAUCNode@1@@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::FreeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
tv88 = -96						; size = 4
$T1 = -92						; size = 4
_pNode$ = -24						; size = 4
___afx_condVal$2 = -20					; size = 4
_i$3 = -16						; size = 4
_pNode$4 = -12						; size = 4
_pNewBlock$5 = -8					; size = 4
_this$ = -4						; size = 4
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 902  : 	if (m_pNodeFree == NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	75 71		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00015	6a 0c		 push	 12			; 0000000cH
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 14	 add	 edx, 20			; 00000014H
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create
  0002a	89 45 f8	 mov	 DWORD PTR _pNewBlock$5[ebp], eax

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _pNewBlock$5[ebp]
  00030	e8 00 00 00 00	 call	 ?data@CPlex@@QAEPAXXZ	; CPlex::data
  00035	89 45 f4	 mov	 DWORD PTR _pNode$4[ebp], eax

; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	6b d1 0c	 imul	 edx, ecx, 12
  00044	03 55 f4	 add	 edx, DWORD PTR _pNode$4[ebp]
  00047	89 55 f4	 mov	 DWORD PTR _pNode$4[ebp], edx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d f0	 mov	 DWORD PTR _i$3[ebp], ecx
  00056	eb 12		 jmp	 SHORT $LN4@NewNode
$LN2@NewNode:
  00058	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _pNode$4[ebp]
  00064	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  00067	89 4d f4	 mov	 DWORD PTR _pNode$4[ebp], ecx
$LN4@NewNode:
  0006a	83 7d f0 00	 cmp	 DWORD PTR _i$3[ebp], 0
  0006e	7c 16		 jl	 SHORT $LN7@NewNode

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	89 10		 mov	 DWORD PTR [eax], edx

; 915  : 			m_pNodeFree = pNode;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR _pNode$4[ebp]
  00081	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 916  : 		}

  00084	eb d2		 jmp	 SHORT $LN2@NewNode
$LN7@NewNode:

; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008d	74 09		 je	 SHORT $LN11@NewNode
  0008f	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00096	eb 07		 jmp	 SHORT $LN12@NewNode
$LN11@NewNode:
  00098	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN12@NewNode:
  0009f	8b 4d a0	 mov	 ecx, DWORD PTR tv88[ebp]
  000a2	89 4d ec	 mov	 DWORD PTR ___afx_condVal$2[ebp], ecx
  000a5	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000a9	75 14		 jne	 SHORT $LN13@NewNode
  000ab	68 96 03 00 00	 push	 918			; 00000396H
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ba	85 c0		 test	 eax, eax
  000bc	74 01		 je	 SHORT $LN13@NewNode
  000be	cc		 int	 3
$LN13@NewNode:
  000bf	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000c3	75 05		 jne	 SHORT $LN5@NewNode
  000c5	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@NewNode:
  000ca	33 c0		 xor	 eax, eax
  000cc	75 b8		 jne	 SHORT $LN7@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d4	89 4d e8	 mov	 DWORD PTR _pNode$[ebp], ecx

; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000dd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e2	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 922  : 	pNode->pPrev = pPrev;

  000e5	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  000eb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  000ee	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  000f4	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000fc	83 c1 01	 add	 ecx, 1
  000ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00102	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow

  00105	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00108	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0010c	7f 14		 jg	 SHORT $LN14@NewNode
  0010e	68 9d 03 00 00	 push	 925			; 0000039dH
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00118	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0011d	85 c0		 test	 eax, eax
  0011f	74 01		 je	 SHORT $LN14@NewNode
  00121	cc		 int	 3
$LN14@NewNode:

; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00122	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00125	83 c0 08	 add	 eax, 8
  00128	50		 push	 eax
  00129	6a 04		 push	 4
  0012b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00130	83 c4 08	 add	 esp, 8
  00133	89 45 a4	 mov	 DWORD PTR $T1[ebp], eax

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00136	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
$LN10@NewNode:

; 932  : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 08 00	 ret	 8
?NewNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::NewNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAt@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXPAU__POSITION@@@Z
_TEXT	SEGMENT
_pOldNode$ = -8						; size = 4
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?RemoveAt@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXPAU__POSITION@@@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 1100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1101 : 	ASSERT_VALID(this);

  0000c	68 4d 04 00 00	 push	 1101			; 0000044dH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1102 : 
; 1103 : 	CNode* pOldNode = (CNode*) position;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00022	89 45 f8	 mov	 DWORD PTR _pOldNode$[ebp], eax

; 1104 : 	ASSERT(AfxIsValidAddress(pOldNode, sizeof(CNode)));

  00025	6a 01		 push	 1
  00027	6a 0c		 push	 12			; 0000000cH
  00029	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00032	85 c0		 test	 eax, eax
  00034	75 14		 jne	 SHORT $LN7@RemoveAt
  00036	68 50 04 00 00	 push	 1104			; 00000450H
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00040	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00045	85 c0		 test	 eax, eax
  00047	74 01		 je	 SHORT $LN7@RemoveAt
  00049	cc		 int	 3
$LN7@RemoveAt:

; 1105 : 
; 1106 : 	// remove pOldNode from list
; 1107 : 	if (pOldNode == m_pNodeHead)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  00050	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00053	75 0d		 jne	 SHORT $LN2@RemoveAt

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1110 : 	}
; 1111 : 	else

  00060	eb 35		 jmp	 SHORT $LN3@RemoveAt
$LN2@RemoveAt:

; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));

  00062	6a 01		 push	 1
  00064	6a 0c		 push	 12			; 0000000cH
  00066	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  00069	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00072	85 c0		 test	 eax, eax
  00074	75 14		 jne	 SHORT $LN8@RemoveAt
  00076	68 59 04 00 00	 push	 1113			; 00000459H
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00080	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00085	85 c0		 test	 eax, eax
  00087	74 01		 je	 SHORT $LN8@RemoveAt
  00089	cc		 int	 3
$LN8@RemoveAt:

; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  0008d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00090	8b 55 f8	 mov	 edx, DWORD PTR _pOldNode$[ebp]
  00093	8b 02		 mov	 eax, DWORD PTR [edx]
  00095	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@RemoveAt:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  00097	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  0009d	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000a0	75 0e		 jne	 SHORT $LN4@RemoveAt

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1119 : 	}
; 1120 : 	else

  000ae	eb 35		 jmp	 SHORT $LN5@RemoveAt
$LN4@RemoveAt:

; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));

  000b0	6a 01		 push	 1
  000b2	6a 0c		 push	 12			; 0000000cH
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  000bf	85 c0		 test	 eax, eax
  000c1	75 14		 jne	 SHORT $LN9@RemoveAt
  000c3	68 62 04 00 00	 push	 1122			; 00000462H
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000cd	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000d2	85 c0		 test	 eax, eax
  000d4	74 01		 je	 SHORT $LN9@RemoveAt
  000d6	cc		 int	 3
$LN9@RemoveAt:

; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  000d7	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000da	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dc	8b 55 f8	 mov	 edx, DWORD PTR _pOldNode$[ebp]
  000df	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN5@RemoveAt:

; 1124 : 	}
; 1125 : 	FreeNode(pOldNode);

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?FreeNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEXPAUCNode@1@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::FreeNode

; 1126 : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
?RemoveAt@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXPAU__POSITION@@@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
_rPosition$ = 8						; size = 4
?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext, COMDAT
; _this$ = ecx

; 811  : 	{ CNode* pNode = (CNode*) rPosition;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _rPosition$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx

; 812  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));

  00014	6a 01		 push	 1
  00016	6a 0c		 push	 12			; 0000000cH
  00018	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00021	85 c0		 test	 eax, eax
  00023	75 14		 jne	 SHORT $LN3@GetNext
  00025	68 2c 03 00 00	 push	 812			; 0000032cH
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00034	85 c0		 test	 eax, eax
  00036	74 01		 je	 SHORT $LN3@GetNext
  00038	cc		 int	 3
$LN3@GetNext:

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00039	8b 45 08	 mov	 eax, DWORD PTR _rPosition$[ebp]
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	89 10		 mov	 DWORD PTR [eax], edx

; 814  : 		return pNode->data; }

  00043	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00046	83 c0 08	 add	 eax, 8
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?GetNext@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEAAPAU_PER_IO_OPERATION_DATA@@AAPAU__POSITION@@@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition, COMDAT
; _this$ = ecx

; 805  : 	{ return (POSITION) m_pNodeHead; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetHeadPosition@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEPAU__POSITION@@XZ ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetHeadPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 863  : 	ASSERT_VALID(this);

  0000c	68 5f 03 00 00	 push	 863			; 0000035fH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx
  00028	eb 08		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx
$LN4@RemoveAll:
  00032	83 7d f8 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  00036	74 02		 je	 SHORT $LN3@RemoveAll

; 868  : 		pNode->data.~TYPE();

  00038	eb f0		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00068	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 874  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?RemoveAll@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEXXZ ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z
_TEXT	SEGMENT
_pNewNode$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 966  : 	ASSERT_VALID(this);

  0000c	68 c6 03 00 00	 push	 966			; 000003c6H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0001f	6a 00		 push	 0
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?NewNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::NewNode
  00030	89 45 f8	 mov	 DWORD PTR _pNewNode$[ebp], eax

; 969  : 	pNewNode->data = newElement;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _newElement$[ebp]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 970  : 	if (m_pNodeTail != NULL)

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00045	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004d	8b 55 f8	 mov	 edx, DWORD PTR _pNewNode$[ebp]
  00050	89 11		 mov	 DWORD PTR [ecx], edx

; 972  : 	else

  00052	eb 09		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 973  : 		m_pNodeHead = pNewNode;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  0005a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@AddTail:

; 974  : 	m_pNodeTail = pNewNode;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  00063	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 975  : 	return (POSITION) pNewNode;

  00066	8b 45 f8	 mov	 eax, DWORD PTR _pNewNode$[ebp]

; 976  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?AddTail@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU__POSITION@@ABQAU_PER_IO_OPERATION_DATA@@@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::AddTail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveHead@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU_PER_IO_OPERATION_DATA@@XZ
_TEXT	SEGMENT
tv73 = -84						; size = 4
_returnValue$ = -16					; size = 4
_pOldNode$ = -12					; size = 4
___afx_condVal$1 = -8					; size = 4
_this$ = -4						; size = 4
?RemoveHead@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU_PER_IO_OPERATION_DATA@@XZ PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveHead, COMDAT
; _this$ = ecx

; 1007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1008 : 	ASSERT_VALID(this);

  0000c	68 f0 03 00 00	 push	 1008			; 000003f0H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@RemoveHead:

; 1009 : 	ENSURE(m_pNodeHead != NULL);  // don't call on empty list !!!

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN9@RemoveHead
  00028	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN10@RemoveHead
$LN9@RemoveHead:
  00031	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN10@RemoveHead:
  00038	8b 4d ac	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$1[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00042	75 14		 jne	 SHORT $LN11@RemoveHead
  00044	68 f1 03 00 00	 push	 1009			; 000003f1H
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN11@RemoveHead
  00057	cc		 int	 3
$LN11@RemoveHead:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@RemoveHead
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@RemoveHead:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@RemoveHead

; 1010 : 	ASSERT(AfxIsValidAddress(m_pNodeHead, sizeof(CNode)));

  00067	6a 01		 push	 1
  00069	6a 0c		 push	 12			; 0000000cH
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00077	85 c0		 test	 eax, eax
  00079	75 14		 jne	 SHORT $LN12@RemoveHead
  0007b	68 f2 03 00 00	 push	 1010			; 000003f2H
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00085	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008a	85 c0		 test	 eax, eax
  0008c	74 01		 je	 SHORT $LN12@RemoveHead
  0008e	cc		 int	 3
$LN12@RemoveHead:

; 1011 : 
; 1012 : 	CNode* pOldNode = m_pNodeHead;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	89 4d f4	 mov	 DWORD PTR _pOldNode$[ebp], ecx

; 1013 : 	TYPE returnValue = pOldNode->data;

  00098	8b 45 f4	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009e	89 4d f0	 mov	 DWORD PTR _returnValue$[ebp], ecx

; 1014 : 
; 1015 : 	m_pNodeHead = pOldNode->pNext;

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  000a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a9	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1016 : 	if (m_pNodeHead != NULL)

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000af	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000b3	74 0f		 je	 SHORT $LN6@RemoveHead

; 1017 : 		m_pNodeHead->pPrev = NULL;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000bb	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1018 : 	else

  000c2	eb 0a		 jmp	 SHORT $LN7@RemoveHead
$LN6@RemoveHead:

; 1019 : 		m_pNodeTail = NULL;

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN7@RemoveHead:

; 1020 : 	FreeNode(pOldNode);

  000ce	8b 45 f4	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	e8 00 00 00 00	 call	 ?FreeNode@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@IAEXPAUCNode@1@@Z ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::FreeNode

; 1021 : 	return returnValue;

  000da	8b 45 f0	 mov	 eax, DWORD PTR _returnValue$[ebp]
$LN8@RemoveHead:

; 1022 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
?RemoveHead@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAEPAU_PER_IO_OPERATION_DATA@@XZ ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::RemoveHead
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount, COMDAT
; _this$ = ecx

; 780  : 	{ return m_nCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QBEHXZ ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nBlockSize$ = 8					; size = 4
??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z PROC ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nBlockSize$[ebp], 0
  00047	7f 14		 jg	 SHORT $LN3@CList
  00049	68 54 03 00 00	 push	 852			; 00000354H
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@CList
  0005c	cc		 int	 3
$LN3@CList:

; 853  : 
; 854  : 	m_nCount = 0;

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0007b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 856  : 	m_pBlocks = NULL;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _nBlockSize$[ebp]
  00095	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 858  : }

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CList@PAU_PER_IO_OPERATION_DATA@@ABQAU1@@@QAE@H@Z ENDP ; CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>::CList<_PER_IO_OPERATION_DATA *,_PER_IO_OPERATION_DATA * const &>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxplex_.h
;	COMDAT ?data@CPlex@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@CPlex@@QAEPAXXZ PROC				; CPlex::data, COMDAT
; _this$ = ecx

; 35   : 	void* data() { return this+1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?data@CPlex@@QAEPAXXZ ENDP				; CPlex::data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1605 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __vsnprintf_s_l
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 1607 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1584 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1585 :         int const _Result = __stdio_common_vsnprintf_s(

  00009	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00033	83 c4 20	 add	 esp, 32			; 00000020H
  00036	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;

  00039	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003d	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003f	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00046	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00048	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004b	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004e	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1590 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\登录服务器\flashaccredit.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
