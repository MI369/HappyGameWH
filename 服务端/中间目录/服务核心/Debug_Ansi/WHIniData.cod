; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHIniData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0CWHIniData@@QAE@XZ				; CWHIniData::CWHIniData
PUBLIC	??1CWHIniData@@UAE@XZ				; CWHIniData::~CWHIniData
PUBLIC	?SetIniFilePath@CWHIniData@@QAEXPBD@Z		; CWHIniData::SetIniFilePath
PUBLIC	?GetIniFilePath@CWHIniData@@QAEPBDXZ		; CWHIniData::GetIniFilePath
PUBLIC	?ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z	; CWHIniData::ReadRect
PUBLIC	?ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z	; CWHIniData::ReadSize
PUBLIC	?ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z	; CWHIniData::ReadPoint
PUBLIC	?ReadColor@CWHIniData@@QAE_NAAKPBD1@Z		; CWHIniData::ReadColor
PUBLIC	?ReadInt@CWHIniData@@QAEIPBD0H@Z		; CWHIniData::ReadInt
PUBLIC	?ReadString@CWHIniData@@QAEPBDPBD00PADG@Z	; CWHIniData::ReadString
PUBLIC	?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z ; CWHIniData::ReadEncryptString
PUBLIC	?WriteInt@CWHIniData@@QAE_NPBD0H@Z		; CWHIniData::WriteInt
PUBLIC	?WriteString@CWHIniData@@QAE_NPBD00@Z		; CWHIniData::WriteString
PUBLIC	?WriteEncryptString@CWHIniData@@QAE_NPBD00@Z	; CWHIniData::WriteEncryptString
PUBLIC	?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z	; CWHIniData::SwitchStringToValue
PUBLIC	??0CWHIniData@@QAE@ABV0@@Z			; CWHIniData::CWHIniData
PUBLIC	??4CWHIniData@@QAEAAV0@ABV0@@Z			; CWHIniData::operator=
PUBLIC	??_GCWHIniData@@UAEPAXI@Z			; CWHIniData::`scalar deleting destructor'
PUBLIC	??_ECWHIniData@@UAEPAXI@Z			; CWHIniData::`vector deleting destructor'
PUBLIC	??0CWHEncrypt@@QAE@ABV0@@Z			; CWHEncrypt::CWHEncrypt
PUBLIC	??4CWHEncrypt@@QAEAAV0@ABV0@@Z			; CWHEncrypt::operator=
PUBLIC	??_GCWHEncrypt@@UAEPAXI@Z			; CWHEncrypt::`scalar deleting destructor'
PUBLIC	??_ECWHEncrypt@@UAEPAXI@Z			; CWHEncrypt::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException@		; `string'
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7CWHIniData@@6B@				; CWHIniData::`vftable'
PUBLIC	??_7CWHEncrypt@@6B@				; CWHEncrypt::`vftable'
PUBLIC	?__LINE__Var@?0??ReadInt@CWHIniData@@QAEIPBD0H@Z@4JA ; `CWHIniData::ReadInt'::`1'::__LINE__Var
PUBLIC	??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??WriteInt@CWHIniData@@QAE_NPBD0H@Z@4JA ; `CWHIniData::WriteInt'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ReadString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA ; `CWHIniData::ReadString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteString@CWHIniData@@QAE_NPBD00@Z@4JA ; `CWHIniData::WriteString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA ; `CWHIniData::ReadEncryptString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteEncryptString@CWHIniData@@QAE_NPBD00@Z@4JA ; `CWHIniData::WriteEncryptString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z@4JA ; `CWHIniData::ReadRect'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z@4JA ; `CWHIniData::ReadSize'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z@4JA ; `CWHIniData::ReadPoint'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ReadColor@CWHIniData@@QAE_NAAKPBD1@Z@4JA ; `CWHIniData::ReadColor'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z@4JA ; `CWHIniData::SwitchStringToValue'::`1'::__LINE__Var
PUBLIC	??_R4CWHIniData@@6B@				; CWHIniData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHIniData@@@8				; CWHIniData `RTTI Type Descriptor'
PUBLIC	??_R3CWHIniData@@8				; CWHIniData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHIniData@@8				; CWHIniData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHIniData@@8			; CWHIniData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CWHEncrypt@@6B@				; CWHEncrypt::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHEncrypt@@@8				; CWHEncrypt `RTTI Type Descriptor'
PUBLIC	??_R3CWHEncrypt@@8				; CWHEncrypt::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHEncrypt@@8				; CWHEncrypt::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHEncrypt@@8			; CWHEncrypt::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memset:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	__imp__GetPrivateProfileStringA@24:PROC
EXTRN	__imp__WritePrivateProfileStringA@16:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	??0CWHEncrypt@@QAE@XZ:PROC			; CWHEncrypt::CWHEncrypt
EXTRN	??1CWHEncrypt@@UAE@XZ:PROC			; CWHEncrypt::~CWHEncrypt
EXTRN	?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z:PROC	; CWHEncrypt::XorEncrypt
EXTRN	?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z:PROC	; CWHEncrypt::XorCrevasse
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHEncrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHEncrypt@@8 DD FLAT:??_R0?AVCWHEncrypt@@@8 ; CWHEncrypt::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHEncrypt@@8
rdata$r	SEGMENT
??_R2CWHEncrypt@@8 DD FLAT:??_R1A@?0A@EA@CWHEncrypt@@8	; CWHEncrypt::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHEncrypt@@8
rdata$r	SEGMENT
??_R3CWHEncrypt@@8 DD 00H				; CWHEncrypt::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHEncrypt@@@8
data$r	SEGMENT
??_R0?AVCWHEncrypt@@@8 DD FLAT:??_7type_info@@6B@	; CWHEncrypt `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHEncrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHEncrypt@@6B@
rdata$r	SEGMENT
??_R4CWHEncrypt@@6B@ DD 00H				; CWHEncrypt::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHEncrypt@@@8
	DD	FLAT:??_R3CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHIniData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHIniData@@8 DD FLAT:??_R0?AVCWHIniData@@@8 ; CWHIniData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHIniData@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHIniData@@8
rdata$r	SEGMENT
??_R2CWHIniData@@8 DD FLAT:??_R1A@?0A@EA@CWHIniData@@8	; CWHIniData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHIniData@@8
rdata$r	SEGMENT
??_R3CWHIniData@@8 DD 00H				; CWHIniData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHIniData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHIniData@@@8
data$r	SEGMENT
??_R0?AVCWHIniData@@@8 DD FLAT:??_7type_info@@6B@	; CWHIniData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHIniData@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHIniData@@6B@
rdata$r	SEGMENT
??_R4CWHIniData@@6B@ DD 00H				; CWHIniData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHIniData@@@8
	DD	FLAT:??_R3CWHIniData@@8
rdata$r	ENDS
;	COMDAT ?__LINE__Var@?0??SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z@4JA DD 0f6H ; `CWHIniData::SwitchStringToValue'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ReadColor@CWHIniData@@QAE_NAAKPBD1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ReadColor@CWHIniData@@QAE_NAAKPBD1@Z@4JA DD 0dcH ; `CWHIniData::ReadColor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z@4JA DD 0c1H ; `CWHIniData::ReadPoint'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z@4JA DD 0a6H ; `CWHIniData::ReadSize'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z@4JA DD 089H ; `CWHIniData::ReadRect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteEncryptString@CWHIniData@@QAE_NPBD00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteEncryptString@CWHIniData@@QAE_NPBD00@Z@4JA DD 078H ; `CWHIniData::WriteEncryptString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA DD 05aH ; `CWHIniData::ReadEncryptString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteString@CWHIniData@@QAE_NPBD00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteString@CWHIniData@@QAE_NPBD00@Z@4JA DD 04cH ; `CWHIniData::WriteString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ReadString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ReadString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA DD 03eH ; `CWHIniData::ReadString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteInt@CWHIniData@@QAE_NPBD0H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteInt@CWHIniData@@QAE_NPBD0H@Z@4JA DD 02eH ; `CWHIniData::WriteInt'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0baH, 0cbH, 0d0H, 0c4H, '\whinidata.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ReadInt@CWHIniData@@QAEIPBD0H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ReadInt@CWHIniData@@QAEIPBD0H@Z@4JA DD 020H ; `CWHIniData::ReadInt'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CWHEncrypt@@6B@
CONST	SEGMENT
??_7CWHEncrypt@@6B@ DD FLAT:??_R4CWHEncrypt@@6B@	; CWHEncrypt::`vftable'
	DD	FLAT:??_ECWHEncrypt@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CWHIniData@@6B@
CONST	SEGMENT
??_7CWHIniData@@6B@ DD FLAT:??_R4CWHIniData@@6B@	; CWHIniData::`vftable'
	DD	FLAT:??_ECWHIniData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHEncrypt@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHIniData@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WriteInt@CWHIniData@@QAE_NPBD0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteInt@CWHIniData@@QAE_NPBD0H@Z$0
__ehfuncinfo$?WriteInt@CWHIniData@@QAE_NPBD0H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WriteInt@CWHIniData@@QAE_NPBD0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z$0
__ehfuncinfo$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHEncrypt@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHEncrypt@@UAEPAXI@Z PROC				; CWHEncrypt::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHEncrypt@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHEncrypt@@UAE@XZ ; CWHEncrypt::~CWHEncrypt
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 04		 push	 4
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 04		 push	 4
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHEncrypt@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHEncrypt@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHEncrypt@@UAEPAXI@Z ENDP				; CWHEncrypt::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHEncrypt@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHEncrypt@@UAEPAXI@Z PROC				; CWHEncrypt::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHEncrypt@@UAEPAXI@Z ENDP				; CWHEncrypt::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHEncrypt@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHEncrypt@@QAEAAV0@ABV0@@Z PROC			; CWHEncrypt::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??4CWHEncrypt@@QAEAAV0@ABV0@@Z ENDP			; CWHEncrypt::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHEncrypt@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHEncrypt@@QAE@ABV0@@Z PROC				; CWHEncrypt::CWHEncrypt, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHEncrypt@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0CWHEncrypt@@QAE@ABV0@@Z ENDP				; CWHEncrypt::CWHEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHIniData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHIniData@@UAEPAXI@Z PROC				; CWHIniData::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHIniData@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 47		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHIniData@@UAE@XZ ; CWHIniData::~CWHIniData
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	68 08 01 00 00	 push	 264			; 00000108H
  00044	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00050	83 e0 01	 and	 eax, 1
  00053	74 1d		 je	 SHORT $LN3@vector
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	69 48 fc 08 01
	00 00		 imul	 ecx, DWORD PTR [eax-4], 264
  0005f	83 c1 04	 add	 ecx, 4
  00062	51		 push	 ecx
  00063	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 ea 04	 sub	 edx, 4
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006f	83 c4 08	 add	 esp, 8
$LN3@vector:
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 e8 04	 sub	 eax, 4
  00078	eb 24		 jmp	 SHORT $LN5@vector
$LN2@vector:
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1CWHIniData@@UAE@XZ	; CWHIniData::~CWHIniData
  00082	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00085	83 e0 01	 and	 eax, 1
  00088	74 11		 je	 SHORT $LN4@vector
  0008a	68 08 01 00 00	 push	 264			; 00000108H
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00098	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHIniData@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHIniData@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHIniData@@UAEPAXI@Z ENDP				; CWHIniData::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHIniData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHIniData@@UAEPAXI@Z PROC				; CWHIniData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHIniData@@UAE@XZ	; CWHIniData::~CWHIniData
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 08 01 00 00	 push	 264			; 00000108H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCWHIniData@@UAEPAXI@Z ENDP				; CWHIniData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHIniData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S13$1 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHIniData@@QAEAAV0@ABV0@@Z PROC			; CWHIniData::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _$S13$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _$S13$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _$S13$1[ebp], eax
$LN4@operator:
  0001e	81 7d f8 04 01
	00 00		 cmp	 DWORD PTR _$S13$1[ebp], 260 ; 00000104H
  00025	73 14		 jae	 SHORT $LN3@operator
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	03 45 f8	 add	 eax, DWORD PTR _$S13$1[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00030	03 4d f8	 add	 ecx, DWORD PTR _$S13$1[ebp]
  00033	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00036	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00039	eb da		 jmp	 SHORT $LN2@operator
$LN3@operator:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??4CWHIniData@@QAEAAV0@ABV0@@Z ENDP			; CWHIniData::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHIniData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHIniData@@QAE@ABV0@@Z PROC				; CWHIniData::CWHIniData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHIniData@@6B@
  00015	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00018	83 c6 04	 add	 esi, 4
  0001b	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0001e	83 c7 04	 add	 edi, 4
  00021	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00026	f3 a5		 rep movsd
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??0CWHIniData@@QAE@ABV0@@Z ENDP				; CWHIniData::CWHIniData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z
_TEXT	SEGMENT
_lValue$ = -8						; size = 4
_this$ = -4						; size = 4
_pszSring$ = 8						; size = 4
?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z PROC	; CWHIniData::SwitchStringToValue, COMDAT
; _this$ = ecx

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 	//效验参数
; 248  : 	ASSERT((pszSring!=NULL)&&(pszSring[0]!=0));

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pszSring$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 15		 je	 SHORT $LN11@SwitchStri
  00014	b9 01 00 00 00	 mov	 ecx, 1
  00019	6b d1 00	 imul	 edx, ecx, 0
  0001c	8b 45 08	 mov	 eax, DWORD PTR _pszSring$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	0f be 14 11	 movsx	 edx, BYTE PTR [ecx+edx]
  00025	85 d2		 test	 edx, edx
  00027	75 18		 jne	 SHORT $LN12@SwitchStri
$LN11@SwitchStri:
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z@4JA
  0002e	83 c0 02	 add	 eax, 2
  00031	50		 push	 eax
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00037	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003c	85 c0		 test	 eax, eax
  0003e	74 01		 je	 SHORT $LN12@SwitchStri
  00040	cc		 int	 3
$LN12@SwitchStri:

; 249  : 	if ((pszSring==NULL)||(pszSring[0]==0)) return 0L;

  00041	8b 45 08	 mov	 eax, DWORD PTR _pszSring$[ebp]
  00044	83 38 00	 cmp	 DWORD PTR [eax], 0
  00047	74 15		 je	 SHORT $LN7@SwitchStri
  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  00054	8b 02		 mov	 eax, DWORD PTR [edx]
  00056	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  0005a	85 c9		 test	 ecx, ecx
  0005c	75 07		 jne	 SHORT $LN2@SwitchStri
$LN7@SwitchStri:
  0005e	33 c0		 xor	 eax, eax
  00060	e9 b1 00 00 00	 jmp	 $LN1@SwitchStri
$LN2@SwitchStri:

; 250  : 
; 251  : 	//寻找开始
; 252  : 	while (((pszSring[0]>0)&&(pszSring[0]<TEXT('0')))||(pszSring[0]>TEXT('9'))) pszSring++;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	6b c8 00	 imul	 ecx, eax, 0
  0006d	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  00076	85 c9		 test	 ecx, ecx
  00078	7e 16		 jle	 SHORT $LN9@SwitchStri
  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	6b c8 00	 imul	 ecx, eax, 0
  00082	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  0008b	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0008e	7c 16		 jl	 SHORT $LN8@SwitchStri
$LN9@SwitchStri:
  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	6b c8 00	 imul	 ecx, eax, 0
  00098	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  0009b	8b 02		 mov	 eax, DWORD PTR [edx]
  0009d	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  000a1	83 f9 39	 cmp	 ecx, 57			; 00000039H
  000a4	7e 0f		 jle	 SHORT $LN3@SwitchStri
$LN8@SwitchStri:
  000a6	8b 45 08	 mov	 eax, DWORD PTR _pszSring$[ebp]
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	83 c1 01	 add	 ecx, 1
  000ae	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  000b1	89 0a		 mov	 DWORD PTR [edx], ecx
  000b3	eb b0		 jmp	 SHORT $LN2@SwitchStri
$LN3@SwitchStri:

; 253  : 
; 254  : 	//读取数值
; 255  : 	LONG lValue=0L;

  000b5	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lValue$[ebp], 0
$LN4@SwitchStri:

; 256  : 	while ((pszSring[0]>=TEXT('0'))&&(pszSring[0]<=TEXT('9')))

  000bc	b8 01 00 00 00	 mov	 eax, 1
  000c1	6b c8 00	 imul	 ecx, eax, 0
  000c4	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  000cd	83 f9 30	 cmp	 ecx, 48			; 00000030H
  000d0	7c 41		 jl	 SHORT $LN5@SwitchStri
  000d2	b8 01 00 00 00	 mov	 eax, 1
  000d7	6b c8 00	 imul	 ecx, eax, 0
  000da	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  000dd	8b 02		 mov	 eax, DWORD PTR [edx]
  000df	0f be 0c 08	 movsx	 ecx, BYTE PTR [eax+ecx]
  000e3	83 f9 39	 cmp	 ecx, 57			; 00000039H
  000e6	7f 2b		 jg	 SHORT $LN5@SwitchStri

; 257  : 	{
; 258  : 		lValue=lValue*10L+pszSring[0]-TEXT('0');

  000e8	6b 45 f8 0a	 imul	 eax, DWORD PTR _lValue$[ebp], 10
  000ec	b9 01 00 00 00	 mov	 ecx, 1
  000f1	6b d1 00	 imul	 edx, ecx, 0
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _pszSring$[ebp]
  000f7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000f9	0f be 14 11	 movsx	 edx, BYTE PTR [ecx+edx]
  000fd	8d 44 10 d0	 lea	 eax, DWORD PTR [eax+edx-48]
  00101	89 45 f8	 mov	 DWORD PTR _lValue$[ebp], eax

; 259  : 		++pszSring;

  00104	8b 45 08	 mov	 eax, DWORD PTR _pszSring$[ebp]
  00107	8b 08		 mov	 ecx, DWORD PTR [eax]
  00109	83 c1 01	 add	 ecx, 1
  0010c	8b 55 08	 mov	 edx, DWORD PTR _pszSring$[ebp]
  0010f	89 0a		 mov	 DWORD PTR [edx], ecx

; 260  : 	}

  00111	eb a9		 jmp	 SHORT $LN4@SwitchStri
$LN5@SwitchStri:

; 261  : 
; 262  : 	return lValue;

  00113	8b 45 f8	 mov	 eax, DWORD PTR _lValue$[ebp]
$LN1@SwitchStri:

; 263  : }

  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 04 00	 ret	 4
?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ENDP	; CWHIniData::SwitchStringToValue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?WriteEncryptString@CWHIniData@@QAE_NPBD00@Z
_TEXT	SEGMENT
tv139 = -654						; size = 1
_result$ = -525						; size = 1
_szRegString$ = -524					; size = 513
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pszItem$ = 8						; size = 4
_pszSubItem$ = 12					; size = 4
_lpString$ = 16						; size = 4
?WriteEncryptString@CWHIniData@@QAE_NPBD00@Z PROC	; CWHIniData::WriteEncryptString, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 02 00
	00		 sub	 esp, 656		; 00000290H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 	//效验状态
; 122  : 	ASSERT(m_szIniFile[0] != 0);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00024	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  00029	85 c0		 test	 eax, eax
  0002b	75 19		 jne	 SHORT $LN3@WriteEncry
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteEncryptString@CWHIniData@@QAE_NPBD00@Z@4JA
  00033	83 c1 02	 add	 ecx, 2
  00036	51		 push	 ecx
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00041	85 c0		 test	 eax, eax
  00043	74 01		 je	 SHORT $LN3@WriteEncry
  00045	cc		 int	 3
$LN3@WriteEncry:

; 123  : 	ASSERT(pszItem != NULL);

  00046	83 7d 08 00	 cmp	 DWORD PTR _pszItem$[ebp], 0
  0004a	75 18		 jne	 SHORT $LN4@WriteEncry
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteEncryptString@CWHIniData@@QAE_NPBD00@Z@4JA
  00051	83 c0 03	 add	 eax, 3
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0005a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005f	85 c0		 test	 eax, eax
  00061	74 01		 je	 SHORT $LN4@WriteEncry
  00063	cc		 int	 3
$LN4@WriteEncry:

; 124  : 	ASSERT(pszSubItem != NULL);

  00064	83 7d 0c 00	 cmp	 DWORD PTR _pszSubItem$[ebp], 0
  00068	75 18		 jne	 SHORT $LN5@WriteEncry
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteEncryptString@CWHIniData@@QAE_NPBD00@Z@4JA
  0006f	83 c0 04	 add	 eax, 4
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00078	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007d	85 c0		 test	 eax, eax
  0007f	74 01		 je	 SHORT $LN5@WriteEncry
  00081	cc		 int	 3
$LN5@WriteEncry:

; 125  : 
; 126  : 	TCHAR szRegString[MAX_ENCRYPT_LEN + 1] = TEXT("");

  00082	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00087	88 85 f4 fd ff
	ff		 mov	 BYTE PTR _szRegString$[ebp], al
  0008d	68 00 02 00 00	 push	 512			; 00000200H
  00092	6a 00		 push	 0
  00094	8d 85 f5 fd ff
	ff		 lea	 eax, DWORD PTR _szRegString$[ebp+1]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _memset
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 127  : 	CWHEncrypt::XorEncrypt(lpString, szRegString, CountArray(szRegString));

  000a3	68 01 02 00 00	 push	 513			; 00000201H
  000a8	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szRegString$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d 10	 mov	 ecx, DWORD PTR _lpString$[ebp]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z ; CWHEncrypt::XorEncrypt
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 	//读取数值
; 129  : 	bool result = WritePrivateProfileString(pszItem, pszSubItem, szRegString, m_szIniFile);

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000be	83 c0 04	 add	 eax, 4
  000c1	50		 push	 eax
  000c2	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _szRegString$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 0c	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  000cc	52		 push	 edx
  000cd	8b 45 08	 mov	 eax, DWORD PTR _pszItem$[ebp]
  000d0	50		 push	 eax
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WritePrivateProfileStringA@16
  000d7	85 c0		 test	 eax, eax
  000d9	74 09		 je	 SHORT $LN6@WriteEncry
  000db	c6 85 72 fd ff
	ff 01		 mov	 BYTE PTR tv139[ebp], 1
  000e2	eb 07		 jmp	 SHORT $LN7@WriteEncry
$LN6@WriteEncry:
  000e4	c6 85 72 fd ff
	ff 00		 mov	 BYTE PTR tv139[ebp], 0
$LN7@WriteEncry:
  000eb	8a 8d 72 fd ff
	ff		 mov	 cl, BYTE PTR tv139[ebp]
  000f1	88 8d f3 fd ff
	ff		 mov	 BYTE PTR _result$[ebp], cl

; 130  : 
; 131  : 	return result;

  000f7	8a 85 f3 fd ff
	ff		 mov	 al, BYTE PTR _result$[ebp]

; 132  : 	//return WriteString(pszItem, pszSubItem, lpString);
; 133  : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 0c 00	 ret	 12			; 0000000cH
?WriteEncryptString@CWHIniData@@QAE_NPBD00@Z ENDP	; CWHIniData::WriteEncryptString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?WriteString@CWHIniData@@QAE_NPBD00@Z
_TEXT	SEGMENT
tv128 = -70						; size = 1
_result$ = -5						; size = 1
_this$ = -4						; size = 4
_pszItem$ = 8						; size = 4
_pszSubItem$ = 12					; size = 4
_lpString$ = 16						; size = 4
?WriteString@CWHIniData@@QAE_NPBD00@Z PROC		; CWHIniData::WriteString, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 77   : 	//效验状态
; 78   : 	ASSERT(m_szIniFile[0] != 0);

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  0001c	85 c0		 test	 eax, eax
  0001e	75 19		 jne	 SHORT $LN3@WriteStrin
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteString@CWHIniData@@QAE_NPBD00@Z@4JA
  00026	83 c1 02	 add	 ecx, 2
  00029	51		 push	 ecx
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00034	85 c0		 test	 eax, eax
  00036	74 01		 je	 SHORT $LN3@WriteStrin
  00038	cc		 int	 3
$LN3@WriteStrin:

; 79   : 	ASSERT(pszItem != NULL);

  00039	83 7d 08 00	 cmp	 DWORD PTR _pszItem$[ebp], 0
  0003d	75 18		 jne	 SHORT $LN4@WriteStrin
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteString@CWHIniData@@QAE_NPBD00@Z@4JA
  00044	83 c0 03	 add	 eax, 3
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN4@WriteStrin
  00056	cc		 int	 3
$LN4@WriteStrin:

; 80   : 	ASSERT(pszSubItem != NULL);

  00057	83 7d 0c 00	 cmp	 DWORD PTR _pszSubItem$[ebp], 0
  0005b	75 18		 jne	 SHORT $LN5@WriteStrin
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteString@CWHIniData@@QAE_NPBD00@Z@4JA
  00062	83 c0 04	 add	 eax, 4
  00065	50		 push	 eax
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN5@WriteStrin
  00074	cc		 int	 3
$LN5@WriteStrin:

; 81   : 	
; 82   : 	//读取数值
; 83   : 	bool result = WritePrivateProfileString(pszItem, pszSubItem, lpString, m_szIniFile);

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 c0 04	 add	 eax, 4
  0007b	50		 push	 eax
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _lpString$[ebp]
  0007f	51		 push	 ecx
  00080	8b 55 0c	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _pszItem$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WritePrivateProfileStringA@16
  0008e	85 c0		 test	 eax, eax
  00090	74 06		 je	 SHORT $LN6@WriteStrin
  00092	c6 45 ba 01	 mov	 BYTE PTR tv128[ebp], 1
  00096	eb 04		 jmp	 SHORT $LN7@WriteStrin
$LN6@WriteStrin:
  00098	c6 45 ba 00	 mov	 BYTE PTR tv128[ebp], 0
$LN7@WriteStrin:
  0009c	8a 4d ba	 mov	 cl, BYTE PTR tv128[ebp]
  0009f	88 4d fb	 mov	 BYTE PTR _result$[ebp], cl

; 84   : 
; 85   : 	return result;

  000a2	8a 45 fb	 mov	 al, BYTE PTR _result$[ebp]

; 86   : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 0c 00	 ret	 12			; 0000000cH
?WriteString@CWHIniData@@QAE_NPBD00@Z ENDP		; CWHIniData::WriteString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?WriteInt@CWHIniData@@QAE_NPBD0H@Z
_TEXT	SEGMENT
tv140 = -87						; size = 1
$T2 = -86						; size = 1
_result$ = -21						; size = 1
_value$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pszItem$ = 8						; size = 4
_pszSubItem$ = 12					; size = 4
_lpString$ = 16						; size = 4
?WriteInt@CWHIniData@@QAE_NPBD0H@Z PROC			; CWHIniData::WriteInt, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?WriteInt@CWHIniData@@QAE_NPBD0H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	//效验状态
; 48   : 	ASSERT(m_szIniFile[0] != 0);

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	6b c8 00	 imul	 ecx, eax, 0
  00033	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00036	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  0003b	85 c0		 test	 eax, eax
  0003d	75 19		 jne	 SHORT $LN3@WriteInt
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteInt@CWHIniData@@QAE_NPBD0H@Z@4JA
  00045	83 c1 02	 add	 ecx, 2
  00048	51		 push	 ecx
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN3@WriteInt
  00057	cc		 int	 3
$LN3@WriteInt:

; 49   : 	ASSERT(pszItem != NULL);

  00058	83 7d 08 00	 cmp	 DWORD PTR _pszItem$[ebp], 0
  0005c	75 18		 jne	 SHORT $LN4@WriteInt
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteInt@CWHIniData@@QAE_NPBD0H@Z@4JA
  00063	83 c0 03	 add	 eax, 3
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00071	85 c0		 test	 eax, eax
  00073	74 01		 je	 SHORT $LN4@WriteInt
  00075	cc		 int	 3
$LN4@WriteInt:

; 50   : 	ASSERT(pszSubItem != NULL);

  00076	83 7d 0c 00	 cmp	 DWORD PTR _pszSubItem$[ebp], 0
  0007a	75 18		 jne	 SHORT $LN5@WriteInt
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteInt@CWHIniData@@QAE_NPBD0H@Z@4JA
  00081	83 c0 04	 add	 eax, 4
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0008a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008f	85 c0		 test	 eax, eax
  00091	74 01		 je	 SHORT $LN5@WriteInt
  00093	cc		 int	 3
$LN5@WriteInt:

; 51   : 
; 52   : 	CString value;

  00094	8d 4d ec	 lea	 ecx, DWORD PTR _value$[ebp]
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 	value.Format("%d", lpString);

  000a4	8b 45 10	 mov	 eax, DWORD PTR _lpString$[ebp]
  000a7	50		 push	 eax
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000ad	8d 4d ec	 lea	 ecx, DWORD PTR _value$[ebp]
  000b0	51		 push	 ecx
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 54   : 	//读取数值
; 55   : 	bool result = WritePrivateProfileString(pszItem, pszSubItem, value, m_szIniFile);

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 c0 04	 add	 eax, 4
  000c0	50		 push	 eax
  000c1	8d 4d ec	 lea	 ecx, DWORD PTR _value$[ebp]
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000ca	50		 push	 eax
  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR _pszSubItem$[ebp]
  000ce	51		 push	 ecx
  000cf	8b 55 08	 mov	 edx, DWORD PTR _pszItem$[ebp]
  000d2	52		 push	 edx
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WritePrivateProfileStringA@16
  000d9	85 c0		 test	 eax, eax
  000db	74 06		 je	 SHORT $LN6@WriteInt
  000dd	c6 45 a9 01	 mov	 BYTE PTR tv140[ebp], 1
  000e1	eb 04		 jmp	 SHORT $LN7@WriteInt
$LN6@WriteInt:
  000e3	c6 45 a9 00	 mov	 BYTE PTR tv140[ebp], 0
$LN7@WriteInt:
  000e7	8a 45 a9	 mov	 al, BYTE PTR tv140[ebp]
  000ea	88 45 eb	 mov	 BYTE PTR _result$[ebp], al

; 56   : 
; 57   : 	return result;

  000ed	8a 45 eb	 mov	 al, BYTE PTR _result$[ebp]
  000f0	88 45 aa	 mov	 BYTE PTR $T2[ebp], al
  000f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fa	8d 4d ec	 lea	 ecx, DWORD PTR _value$[ebp]
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00103	8a 45 aa	 mov	 al, BYTE PTR $T2[ebp]

; 58   : }

  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteInt@CWHIniData@@QAE_NPBD0H@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _value$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?WriteInt@CWHIniData@@QAE_NPBD0H@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteInt@CWHIniData@@QAE_NPBD0H@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteInt@CWHIniData@@QAE_NPBD0H@Z ENDP			; CWHIniData::WriteInt
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z
_TEXT	SEGMENT
_WHEncrypt$2 = -540					; size = 4
_dwReadCount$ = -536					; size = 4
_szStringRead$ = -532					; size = 512
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszItem$ = 8						; size = 4
_pszSubItem$ = 12					; size = 4
_pszDefault$ = 16					; size = 4
_pszString$ = 20					; size = 4
_wMaxCount$ = 24					; size = 2
?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z PROC	; CWHIniData::ReadEncryptString, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 02 00
	00		 sub	 esp, 656		; 00000290H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 91   : 	//效验状态
; 92   : 	ASSERT(m_szIniFile[0] != 0);

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  00041	85 c0		 test	 eax, eax
  00043	75 19		 jne	 SHORT $LN6@ReadEncryp
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
  0004b	83 c1 02	 add	 ecx, 2
  0004e	51		 push	 ecx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00054	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00059	85 c0		 test	 eax, eax
  0005b	74 01		 je	 SHORT $LN6@ReadEncryp
  0005d	cc		 int	 3
$LN6@ReadEncryp:

; 93   : 	ASSERT(wMaxCount <= MAX_SOURCE_LEN);

  0005e	0f b7 45 18	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  00062	83 f8 40	 cmp	 eax, 64			; 00000040H
  00065	7e 19		 jle	 SHORT $LN7@ReadEncryp
  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
  0006d	83 c1 03	 add	 ecx, 3
  00070	51		 push	 ecx
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00076	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007b	85 c0		 test	 eax, eax
  0007d	74 01		 je	 SHORT $LN7@ReadEncryp
  0007f	cc		 int	 3
$LN7@ReadEncryp:

; 94   : 	ASSERT(pszItem != NULL);

  00080	83 7d 08 00	 cmp	 DWORD PTR _pszItem$[ebp], 0
  00084	75 18		 jne	 SHORT $LN8@ReadEncryp
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
  0008b	83 c0 04	 add	 eax, 4
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00094	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00099	85 c0		 test	 eax, eax
  0009b	74 01		 je	 SHORT $LN8@ReadEncryp
  0009d	cc		 int	 3
$LN8@ReadEncryp:

; 95   : 	ASSERT(pszSubItem != NULL);

  0009e	83 7d 0c 00	 cmp	 DWORD PTR _pszSubItem$[ebp], 0
  000a2	75 18		 jne	 SHORT $LN9@ReadEncryp
  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
  000a9	83 c0 05	 add	 eax, 5
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000b2	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b7	85 c0		 test	 eax, eax
  000b9	74 01		 je	 SHORT $LN9@ReadEncryp
  000bb	cc		 int	 3
$LN9@ReadEncryp:

; 96   : 
; 97   : 	//设置结果
; 98   : 	if (wMaxCount > 0) pszString[0] = 0;

  000bc	0f b7 45 18	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  000c0	85 c0		 test	 eax, eax
  000c2	7e 0f		 jle	 SHORT $LN2@ReadEncryp
  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	6b c8 00	 imul	 ecx, eax, 0
  000cc	8b 55 14	 mov	 edx, DWORD PTR _pszString$[ebp]
  000cf	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0
$LN2@ReadEncryp:

; 99   : 
; 100  : 	//读取字符
; 101  : 	TCHAR szStringRead[MAX_ENCRYPT_LEN];
; 102  : 	DWORD dwReadCount = GetPrivateProfileString(pszItem, pszSubItem, NULL, szStringRead, MAX_ENCRYPT_LEN, m_szIniFile);

  000d3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d6	83 c0 04	 add	 eax, 4
  000d9	50		 push	 eax
  000da	68 00 02 00 00	 push	 512			; 00000200H
  000df	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _szStringRead$[ebp]
  000e5	51		 push	 ecx
  000e6	6a 00		 push	 0
  000e8	8b 55 0c	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  000eb	52		 push	 edx
  000ec	8b 45 08	 mov	 eax, DWORD PTR _pszItem$[ebp]
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24
  000f6	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _dwReadCount$[ebp], eax

; 103  : 
; 104  : 	//解密字符
; 105  : 	if ((dwReadCount > 0) && (dwReadCount <= CountArray(szStringRead)))

  000fc	83 bd e8 fd ff
	ff 00		 cmp	 DWORD PTR _dwReadCount$[ebp], 0
  00103	76 48		 jbe	 SHORT $LN3@ReadEncryp
  00105	81 bd e8 fd ff
	ff 00 02 00 00	 cmp	 DWORD PTR _dwReadCount$[ebp], 512 ; 00000200H
  0010f	77 3c		 ja	 SHORT $LN3@ReadEncryp

; 106  : 	{
; 107  : 		CWHEncrypt WHEncrypt;

  00111	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _WHEncrypt$2[ebp]
  00117	e8 00 00 00 00	 call	 ??0CWHEncrypt@@QAE@XZ	; CWHEncrypt::CWHEncrypt
  0011c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 108  : 		WHEncrypt.XorCrevasse(szStringRead, pszString, wMaxCount);

  00123	0f b7 45 18	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  00127	50		 push	 eax
  00128	8b 4d 14	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0012b	51		 push	 ecx
  0012c	8d 95 ec fd ff
	ff		 lea	 edx, DWORD PTR _szStringRead$[ebp]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 ?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z ; CWHEncrypt::XorCrevasse
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 	}

  0013b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00142	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _WHEncrypt$2[ebp]
  00148	e8 00 00 00 00	 call	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
$LN3@ReadEncryp:

; 110  : 	//默认参数
; 111  : 	if ((wMaxCount>0)&&(pszString[0]==0)) 

  0014d	0f b7 45 18	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  00151	85 c0		 test	 eax, eax
  00153	7e 26		 jle	 SHORT $LN4@ReadEncryp
  00155	b8 01 00 00 00	 mov	 eax, 1
  0015a	6b c8 00	 imul	 ecx, eax, 0
  0015d	8b 55 14	 mov	 edx, DWORD PTR _pszString$[ebp]
  00160	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00164	85 c0		 test	 eax, eax
  00166	75 13		 jne	 SHORT $LN4@ReadEncryp

; 112  : 		lstrcpyn(pszString,pszDefault,wMaxCount);

  00168	0f b7 45 18	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d 10	 mov	 ecx, DWORD PTR _pszDefault$[ebp]
  00170	51		 push	 ecx
  00171	8b 55 14	 mov	 edx, DWORD PTR _pszString$[ebp]
  00174	52		 push	 edx
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
$LN4@ReadEncryp:

; 113  : 
; 114  : 	return pszString;

  0017b	8b 45 14	 mov	 eax, DWORD PTR _pszString$[ebp]

; 115  : 	//return ReadString(pszItem, pszSubItem, pszDefault, pszString, wMaxCount);
; 116  : }

  0017e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00181	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00188	59		 pop	 ecx
  00189	5f		 pop	 edi
  0018a	5e		 pop	 esi
  0018b	5b		 pop	 ebx
  0018c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018f	33 cd		 xor	 ecx, ebp
  00191	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z$0:
  00000	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR _WHEncrypt$2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
__ehhandler$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 60 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-672]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadEncryptString@CWHIniData@@QAEPBDPBD00PADG@Z ENDP	; CWHIniData::ReadEncryptString
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?ReadString@CWHIniData@@QAEPBDPBD00PADG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszItem$ = 8						; size = 4
_pszSubItem$ = 12					; size = 4
_pszDefault$ = 16					; size = 4
_pszString$ = 20					; size = 4
_wMaxCount$ = 24					; size = 2
?ReadString@CWHIniData@@QAEPBDPBD00PADG@Z PROC		; CWHIniData::ReadString, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	//效验状态
; 64   : 	ASSERT(m_szIniFile[0]!=0);

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  0001c	85 c0		 test	 eax, eax
  0001e	75 19		 jne	 SHORT $LN3@ReadString
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
  00026	83 c1 02	 add	 ecx, 2
  00029	51		 push	 ecx
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00034	85 c0		 test	 eax, eax
  00036	74 01		 je	 SHORT $LN3@ReadString
  00038	cc		 int	 3
$LN3@ReadString:

; 65   : 	ASSERT(pszItem != NULL);

  00039	83 7d 08 00	 cmp	 DWORD PTR _pszItem$[ebp], 0
  0003d	75 18		 jne	 SHORT $LN4@ReadString
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ReadString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
  00044	83 c0 03	 add	 eax, 3
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN4@ReadString
  00056	cc		 int	 3
$LN4@ReadString:

; 66   : 	ASSERT(pszSubItem != NULL);

  00057	83 7d 0c 00	 cmp	 DWORD PTR _pszSubItem$[ebp], 0
  0005b	75 18		 jne	 SHORT $LN5@ReadString
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ReadString@CWHIniData@@QAEPBDPBD00PADG@Z@4JA
  00062	83 c0 04	 add	 eax, 4
  00065	50		 push	 eax
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN5@ReadString
  00074	cc		 int	 3
$LN5@ReadString:

; 67   : 
; 68   : 	//读取字符
; 69   : 	GetPrivateProfileString(pszItem,pszSubItem,pszDefault,pszString,wMaxCount,m_szIniFile);

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 c0 04	 add	 eax, 4
  0007b	50		 push	 eax
  0007c	0f b7 4d 18	 movzx	 ecx, WORD PTR _wMaxCount$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 14	 mov	 edx, DWORD PTR _pszString$[ebp]
  00084	52		 push	 edx
  00085	8b 45 10	 mov	 eax, DWORD PTR _pszDefault$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR _pszSubItem$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 08	 mov	 edx, DWORD PTR _pszItem$[ebp]
  00090	52		 push	 edx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 70   : 
; 71   : 	return pszString;

  00097	8b 45 14	 mov	 eax, DWORD PTR _pszString$[ebp]

; 72   : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 14 00	 ret	 20			; 00000014H
?ReadString@CWHIniData@@QAEPBDPBD00PADG@Z ENDP		; CWHIniData::ReadString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?ReadInt@CWHIniData@@QAEIPBD0H@Z
_TEXT	SEGMENT
_uReadData$ = -8					; size = 4
_this$ = -4						; size = 4
_pszItem$ = 8						; size = 4
_pszSubItem$ = 12					; size = 4
_nDefault$ = 16						; size = 4
?ReadInt@CWHIniData@@QAEIPBD0H@Z PROC			; CWHIniData::ReadInt, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	//效验状态
; 34   : 	ASSERT(m_szIniFile[0]!=0);

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  0001c	85 c0		 test	 eax, eax
  0001e	75 19		 jne	 SHORT $LN3@ReadInt
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadInt@CWHIniData@@QAEIPBD0H@Z@4JA
  00026	83 c1 02	 add	 ecx, 2
  00029	51		 push	 ecx
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00034	85 c0		 test	 eax, eax
  00036	74 01		 je	 SHORT $LN3@ReadInt
  00038	cc		 int	 3
$LN3@ReadInt:

; 35   : 	ASSERT(pszItem != NULL);

  00039	83 7d 08 00	 cmp	 DWORD PTR _pszItem$[ebp], 0
  0003d	75 18		 jne	 SHORT $LN4@ReadInt
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ReadInt@CWHIniData@@QAEIPBD0H@Z@4JA
  00044	83 c0 03	 add	 eax, 3
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN4@ReadInt
  00056	cc		 int	 3
$LN4@ReadInt:

; 36   : 	ASSERT(pszSubItem != NULL);

  00057	83 7d 0c 00	 cmp	 DWORD PTR _pszSubItem$[ebp], 0
  0005b	75 18		 jne	 SHORT $LN5@ReadInt
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ReadInt@CWHIniData@@QAEIPBD0H@Z@4JA
  00062	83 c0 04	 add	 eax, 4
  00065	50		 push	 eax
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN5@ReadInt
  00074	cc		 int	 3
$LN5@ReadInt:

; 37   : 
; 38   : 	//读取数值
; 39   : 	UINT uReadData=GetPrivateProfileInt(pszItem,pszSubItem,nDefault,m_szIniFile);

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 c0 04	 add	 eax, 4
  0007b	50		 push	 eax
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _nDefault$[ebp]
  0007f	51		 push	 ecx
  00080	8b 55 0c	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _pszItem$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0008e	89 45 f8	 mov	 DWORD PTR _uReadData$[ebp], eax

; 40   : 
; 41   : 	return uReadData;

  00091	8b 45 f8	 mov	 eax, DWORD PTR _uReadData$[ebp]

; 42   : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
?ReadInt@CWHIniData@@QAEIPBD0H@Z ENDP			; CWHIniData::ReadInt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?ReadColor@CWHIniData@@QAE_NAAKPBD1@Z
_TEXT	SEGMENT
_pszString$1 = -76					; size = 4
_szReadData$ = -72					; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ValueColor$ = 8					; size = 4
_pszItem$ = 12						; size = 4
_pszSubItem$ = 16					; size = 4
?ReadColor@CWHIniData@@QAE_NAAKPBD1@Z PROC		; CWHIniData::ReadColor, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 221  : 	//效验状态
; 222  : 	ASSERT(m_szIniFile[0]!=0);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00024	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  00029	85 c0		 test	 eax, eax
  0002b	75 19		 jne	 SHORT $LN4@ReadColor
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadColor@CWHIniData@@QAE_NAAKPBD1@Z@4JA
  00033	83 c1 02	 add	 ecx, 2
  00036	51		 push	 ecx
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00041	85 c0		 test	 eax, eax
  00043	74 01		 je	 SHORT $LN4@ReadColor
  00045	cc		 int	 3
$LN4@ReadColor:

; 223  : 
; 224  : 	//设置变量
; 225  : 	TCHAR szReadData[64]=TEXT("");

  00046	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0004b	88 45 b8	 mov	 BYTE PTR _szReadData$[ebp], al
  0004e	6a 3f		 push	 63			; 0000003fH
  00050	6a 00		 push	 0
  00052	8d 45 b9	 lea	 eax, DWORD PTR _szReadData$[ebp+1]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _memset
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 226  : 	ZeroMemory(&ValueColor,sizeof(ValueColor));

  0005e	6a 04		 push	 4
  00060	6a 00		 push	 0
  00062	8b 45 08	 mov	 eax, DWORD PTR _ValueColor$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 227  : 
; 228  : 	//读取字符
; 229  : 	GetPrivateProfileString(pszItem,pszSubItem,TEXT(""),szReadData,CountArray(szReadData),m_szIniFile);

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 c0 04	 add	 eax, 4
  00074	50		 push	 eax
  00075	6a 40		 push	 64			; 00000040H
  00077	8d 4d b8	 lea	 ecx, DWORD PTR _szReadData$[ebp]
  0007a	51		 push	 ecx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00080	8b 55 10	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  00083	52		 push	 edx
  00084	8b 45 0c	 mov	 eax, DWORD PTR _pszItem$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 230  : 
; 231  : 	//数据处理
; 232  : 	if (szReadData[0]!=0)

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	0f be 54 0d b8	 movsx	 edx, BYTE PTR _szReadData$[ebp+ecx]
  0009b	85 d2		 test	 edx, edx
  0009d	74 46		 je	 SHORT $LN2@ReadColor

; 233  : 	{
; 234  : 		//读取变量
; 235  : 		LPCTSTR pszString=szReadData;

  0009f	8d 45 b8	 lea	 eax, DWORD PTR _szReadData$[ebp]
  000a2	89 45 b4	 mov	 DWORD PTR _pszString$1[ebp], eax

; 236  : 		ValueColor=RGB(SwitchStringToValue(pszString),SwitchStringToValue(pszString),SwitchStringToValue(pszString));

  000a5	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000b1	0f b6 f0	 movzx	 esi, al
  000b4	8d 4d b4	 lea	 ecx, DWORD PTR _pszString$1[ebp]
  000b7	51		 push	 ecx
  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000c0	0f b6 d0	 movzx	 edx, al
  000c3	c1 e2 08	 shl	 edx, 8
  000c6	0b f2		 or	 esi, edx
  000c8	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000d4	0f b6 c8	 movzx	 ecx, al
  000d7	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000da	0b f1		 or	 esi, ecx
  000dc	8b 55 08	 mov	 edx, DWORD PTR _ValueColor$[ebp]
  000df	89 32		 mov	 DWORD PTR [edx], esi

; 237  : 
; 238  : 		return true;

  000e1	b0 01		 mov	 al, 1
  000e3	eb 02		 jmp	 SHORT $LN1@ReadColor
$LN2@ReadColor:

; 239  : 	}
; 240  : 
; 241  : 	return false;

  000e5	32 c0		 xor	 al, al
$LN1@ReadColor:

; 242  : }

  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 0c 00	 ret	 12			; 0000000cH
?ReadColor@CWHIniData@@QAE_NAAKPBD1@Z ENDP		; CWHIniData::ReadColor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z
_TEXT	SEGMENT
_pszString$1 = -76					; size = 4
_szReadData$ = -72					; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ValuePoint$ = 8					; size = 4
_pszItem$ = 12						; size = 4
_pszSubItem$ = 16					; size = 4
?ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z PROC	; CWHIniData::ReadPoint, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 194  : 	//效验状态
; 195  : 	ASSERT(m_szIniFile[0]!=0);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00024	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  00029	85 c0		 test	 eax, eax
  0002b	75 19		 jne	 SHORT $LN4@ReadPoint
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z@4JA
  00033	83 c1 02	 add	 ecx, 2
  00036	51		 push	 ecx
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00041	85 c0		 test	 eax, eax
  00043	74 01		 je	 SHORT $LN4@ReadPoint
  00045	cc		 int	 3
$LN4@ReadPoint:

; 196  : 
; 197  : 	//设置变量
; 198  : 	TCHAR szReadData[64]=TEXT("");

  00046	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0004b	88 45 b8	 mov	 BYTE PTR _szReadData$[ebp], al
  0004e	6a 3f		 push	 63			; 0000003fH
  00050	6a 00		 push	 0
  00052	8d 45 b9	 lea	 eax, DWORD PTR _szReadData$[ebp+1]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _memset
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 199  : 	ZeroMemory(&ValuePoint,sizeof(ValuePoint));

  0005e	6a 08		 push	 8
  00060	6a 00		 push	 0
  00062	8b 45 08	 mov	 eax, DWORD PTR _ValuePoint$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 
; 201  : 	//读取字符
; 202  : 	GetPrivateProfileString(pszItem,pszSubItem,TEXT(""),szReadData,CountArray(szReadData),m_szIniFile);

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 c0 04	 add	 eax, 4
  00074	50		 push	 eax
  00075	6a 40		 push	 64			; 00000040H
  00077	8d 4d b8	 lea	 ecx, DWORD PTR _szReadData$[ebp]
  0007a	51		 push	 ecx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00080	8b 55 10	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  00083	52		 push	 edx
  00084	8b 45 0c	 mov	 eax, DWORD PTR _pszItem$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 203  : 
; 204  : 	//数据处理
; 205  : 	if (szReadData[0]!=0)

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	0f be 54 0d b8	 movsx	 edx, BYTE PTR _szReadData$[ebp+ecx]
  0009b	85 d2		 test	 edx, edx
  0009d	74 2d		 je	 SHORT $LN2@ReadPoint

; 206  : 	{
; 207  : 		//读取变量
; 208  : 		LPCTSTR pszString=szReadData;

  0009f	8d 45 b8	 lea	 eax, DWORD PTR _szReadData$[ebp]
  000a2	89 45 b4	 mov	 DWORD PTR _pszString$1[ebp], eax

; 209  : 		ValuePoint.x=SwitchStringToValue(pszString);

  000a5	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _ValuePoint$[ebp]
  000b4	89 01		 mov	 DWORD PTR [ecx], eax

; 210  : 		ValuePoint.y=SwitchStringToValue(pszString);

  000b6	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _ValuePoint$[ebp]
  000c5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 211  : 
; 212  : 		return true;

  000c8	b0 01		 mov	 al, 1
  000ca	eb 02		 jmp	 SHORT $LN1@ReadPoint
$LN2@ReadPoint:

; 213  : 	}
; 214  : 
; 215  : 	return false;

  000cc	32 c0		 xor	 al, al
$LN1@ReadPoint:

; 216  : }

  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	33 cd		 xor	 ecx, ebp
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 0c 00	 ret	 12			; 0000000cH
?ReadPoint@CWHIniData@@QAE_NAAUtagPOINT@@PBD1@Z ENDP	; CWHIniData::ReadPoint
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z
_TEXT	SEGMENT
_pszString$1 = -76					; size = 4
_szReadData$ = -72					; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ValueSize$ = 8						; size = 4
_pszItem$ = 12						; size = 4
_pszSubItem$ = 16					; size = 4
?ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z PROC	; CWHIniData::ReadSize, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 167  : 	//效验状态
; 168  : 	ASSERT(m_szIniFile[0]!=0);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00024	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  00029	85 c0		 test	 eax, eax
  0002b	75 19		 jne	 SHORT $LN4@ReadSize
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z@4JA
  00033	83 c1 02	 add	 ecx, 2
  00036	51		 push	 ecx
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00041	85 c0		 test	 eax, eax
  00043	74 01		 je	 SHORT $LN4@ReadSize
  00045	cc		 int	 3
$LN4@ReadSize:

; 169  : 
; 170  : 	//设置变量
; 171  : 	TCHAR szReadData[64]=TEXT("");

  00046	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0004b	88 45 b8	 mov	 BYTE PTR _szReadData$[ebp], al
  0004e	6a 3f		 push	 63			; 0000003fH
  00050	6a 00		 push	 0
  00052	8d 45 b9	 lea	 eax, DWORD PTR _szReadData$[ebp+1]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _memset
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : 	ZeroMemory(&ValueSize,sizeof(ValueSize));

  0005e	6a 08		 push	 8
  00060	6a 00		 push	 0
  00062	8b 45 08	 mov	 eax, DWORD PTR _ValueSize$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  : 
; 174  : 	//读取字符
; 175  : 	GetPrivateProfileString(pszItem,pszSubItem,TEXT(""),szReadData,CountArray(szReadData),m_szIniFile);

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 c0 04	 add	 eax, 4
  00074	50		 push	 eax
  00075	6a 40		 push	 64			; 00000040H
  00077	8d 4d b8	 lea	 ecx, DWORD PTR _szReadData$[ebp]
  0007a	51		 push	 ecx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00080	8b 55 10	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  00083	52		 push	 edx
  00084	8b 45 0c	 mov	 eax, DWORD PTR _pszItem$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 176  : 
; 177  : 	//数据处理
; 178  : 	if (szReadData[0]!=0)

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	0f be 54 0d b8	 movsx	 edx, BYTE PTR _szReadData$[ebp+ecx]
  0009b	85 d2		 test	 edx, edx
  0009d	74 2d		 je	 SHORT $LN2@ReadSize

; 179  : 	{
; 180  : 		//读取变量
; 181  : 		LPCTSTR pszString=szReadData;

  0009f	8d 45 b8	 lea	 eax, DWORD PTR _szReadData$[ebp]
  000a2	89 45 b4	 mov	 DWORD PTR _pszString$1[ebp], eax

; 182  : 		ValueSize.cx=SwitchStringToValue(pszString);

  000a5	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _ValueSize$[ebp]
  000b4	89 01		 mov	 DWORD PTR [ecx], eax

; 183  : 		ValueSize.cy=SwitchStringToValue(pszString);

  000b6	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _ValueSize$[ebp]
  000c5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 184  : 
; 185  : 		return true;

  000c8	b0 01		 mov	 al, 1
  000ca	eb 02		 jmp	 SHORT $LN1@ReadSize
$LN2@ReadSize:

; 186  : 	}
; 187  : 
; 188  : 	return false;

  000cc	32 c0		 xor	 al, al
$LN1@ReadSize:

; 189  : }

  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	33 cd		 xor	 ecx, ebp
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 0c 00	 ret	 12			; 0000000cH
?ReadSize@CWHIniData@@QAE_NAAUtagSIZE@@PBD1@Z ENDP	; CWHIniData::ReadSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z
_TEXT	SEGMENT
_pszString$1 = -76					; size = 4
_szReadData$ = -72					; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ValueRect$ = 8						; size = 4
_pszItem$ = 12						; size = 4
_pszSubItem$ = 16					; size = 4
?ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z PROC	; CWHIniData::ReadRect, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 138  : 	//效验状态
; 139  : 	ASSERT(m_szIniFile[0]!=0);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00024	0f be 44 0a 04	 movsx	 eax, BYTE PTR [edx+ecx+4]
  00029	85 c0		 test	 eax, eax
  0002b	75 19		 jne	 SHORT $LN4@ReadRect
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z@4JA
  00033	83 c1 02	 add	 ecx, 2
  00036	51		 push	 ecx
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CJNGAGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00041	85 c0		 test	 eax, eax
  00043	74 01		 je	 SHORT $LN4@ReadRect
  00045	cc		 int	 3
$LN4@ReadRect:

; 140  : 
; 141  : 	//设置变量
; 142  : 	TCHAR szReadData[64]=TEXT("");

  00046	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0004b	88 45 b8	 mov	 BYTE PTR _szReadData$[ebp], al
  0004e	6a 3f		 push	 63			; 0000003fH
  00050	6a 00		 push	 0
  00052	8d 45 b9	 lea	 eax, DWORD PTR _szReadData$[ebp+1]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _memset
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 143  : 	ZeroMemory(&ValueRect,sizeof(ValueRect));

  0005e	6a 10		 push	 16			; 00000010H
  00060	6a 00		 push	 0
  00062	8b 45 08	 mov	 eax, DWORD PTR _ValueRect$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 144  : 
; 145  : 	//读取字符
; 146  : 	GetPrivateProfileString(pszItem,pszSubItem,TEXT(""),szReadData,CountArray(szReadData),m_szIniFile);

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 c0 04	 add	 eax, 4
  00074	50		 push	 eax
  00075	6a 40		 push	 64			; 00000040H
  00077	8d 4d b8	 lea	 ecx, DWORD PTR _szReadData$[ebp]
  0007a	51		 push	 ecx
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00080	8b 55 10	 mov	 edx, DWORD PTR _pszSubItem$[ebp]
  00083	52		 push	 edx
  00084	8b 45 0c	 mov	 eax, DWORD PTR _pszItem$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 147  : 
; 148  : 	//数据处理
; 149  : 	if (szReadData[0]!=0)

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	0f be 54 0d b8	 movsx	 edx, BYTE PTR _szReadData$[ebp+ecx]
  0009b	85 d2		 test	 edx, edx
  0009d	74 51		 je	 SHORT $LN2@ReadRect

; 150  : 	{
; 151  : 		//读取变量
; 152  : 		LPCTSTR pszString=szReadData;

  0009f	8d 45 b8	 lea	 eax, DWORD PTR _szReadData$[ebp]
  000a2	89 45 b4	 mov	 DWORD PTR _pszString$1[ebp], eax

; 153  : 		ValueRect.left=SwitchStringToValue(pszString);

  000a5	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _ValueRect$[ebp]
  000b4	89 01		 mov	 DWORD PTR [ecx], eax

; 154  : 		ValueRect.top=SwitchStringToValue(pszString);

  000b6	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _ValueRect$[ebp]
  000c5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 155  : 		ValueRect.right=SwitchStringToValue(pszString);

  000c8	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _ValueRect$[ebp]
  000d7	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 156  : 		ValueRect.bottom=SwitchStringToValue(pszString);

  000da	8d 45 b4	 lea	 eax, DWORD PTR _pszString$1[ebp]
  000dd	50		 push	 eax
  000de	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?SwitchStringToValue@CWHIniData@@IAEJAAPBD@Z ; CWHIniData::SwitchStringToValue
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _ValueRect$[ebp]
  000e9	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 157  : 
; 158  : 		return true;

  000ec	b0 01		 mov	 al, 1
  000ee	eb 02		 jmp	 SHORT $LN1@ReadRect
$LN2@ReadRect:

; 159  : 	}
; 160  : 
; 161  : 	return false;

  000f0	32 c0		 xor	 al, al
$LN1@ReadRect:

; 162  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 0c 00	 ret	 12			; 0000000cH
?ReadRect@CWHIniData@@QAE_NAAUtagRECT@@PBD1@Z ENDP	; CWHIniData::ReadRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.h
;	COMDAT ?GetIniFilePath@CWHIniData@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIniFilePath@CWHIniData@@QAEPBDXZ PROC		; CWHIniData::GetIniFilePath, COMDAT
; _this$ = ecx

; 29   : 	LPCTSTR GetIniFilePath() { return m_szIniFile; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetIniFilePath@CWHIniData@@QAEPBDXZ ENDP		; CWHIniData::GetIniFilePath
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?SetIniFilePath@CWHIniData@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszIniFile$ = 8					; size = 4
?SetIniFilePath@CWHIniData@@QAEXPBD@Z PROC		; CWHIniData::SetIniFilePath, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	//设置变量
; 25   : 	lstrcpyn(m_szIniFile,pszIniFile,CountArray(m_szIniFile));

  0000c	68 04 01 00 00	 push	 260			; 00000104H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszIniFile$[ebp]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 04	 add	 ecx, 4
  0001b	51		 push	 ecx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 26   : 
; 27   : 	return;
; 28   : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?SetIniFilePath@CWHIniData@@QAEXPBD@Z ENDP		; CWHIniData::SetIniFilePath
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ??1CWHIniData@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWHIniData@@UAE@XZ PROC				; CWHIniData::~CWHIniData, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHIniData@@6B@

; 19   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CWHIniData@@UAE@XZ ENDP				; CWHIniData::~CWHIniData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ??0CWHIniData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWHIniData@@QAE@XZ PROC				; CWHIniData::CWHIniData, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHIniData@@6B@

; 10   : 	//设置变量
; 11   : 	ZeroMemory(m_szIniFile,sizeof(m_szIniFile));

  00015	68 04 01 00 00	 push	 260			; 00000104H
  0001a	6a 00		 push	 0
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c0 04	 add	 eax, 4
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 _memset
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 12   : 
; 13   : 	return;
; 14   : }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0CWHIniData@@QAE@XZ ENDP				; CWHIniData::CWHIniData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 330  : 		if (pszCategory == nullptr)

  00016	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0001c	e9 a9 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00021	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00028	72 2d		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0002a	33 c0		 xor	 eax, eax
  0002c	75 27		 jne	 SHORT $LN5@RegisterCa
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 51 01 00 00	 push	 337			; 00000151H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 01		 jne	 SHORT $LN5@RegisterCa
  00054	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  00055	eb 73		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00057	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  00064	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	6a 00		 push	 0
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  00080	8b 45 08	 mov	 eax, DWORD PTR _pszCategory$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  00089	6a 7f		 push	 127			; 0000007fH
  0008b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _swprintf_s
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 7f		 push	 127			; 0000007fH
  000a3	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000ad	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000b3	51		 push	 ecx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000c2	83 c0 01	 add	 eax, 1
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMFNIFA@atlTraceException@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 20 00 00	 push	 8192			; 00002000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1538 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1539 :             int _Result;
; 1540 :             va_list _ArgList;
; 1541 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1542 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vswprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1543 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1544 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1545 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whinidata.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
