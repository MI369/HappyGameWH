; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHRegKey.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?m_szMainKeyName@CWHRegKey@@1PADA		; CWHRegKey::m_szMainKeyName
_BSS	SEGMENT
?m_szMainKeyName@CWHRegKey@@1PADA DB 040H DUP (?)	; CWHRegKey::m_szMainKeyName
_BSS	ENDS
CONST	SEGMENT
?szProductKey@@3QBDB DB 'WHJHGamePlatform', 00H		; szProductKey
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0CWHRegKey@@QAE@XZ				; CWHRegKey::CWHRegKey
PUBLIC	??1CWHRegKey@@UAE@XZ				; CWHRegKey::~CWHRegKey
PUBLIC	?SetMainKeyName@CWHRegKey@@SAXPBD@Z		; CWHRegKey::SetMainKeyName
PUBLIC	?GetMainKeyName@CWHRegKey@@SAPBDXZ		; CWHRegKey::GetMainKeyName
PUBLIC	?Detach@CWHRegKey@@QAEPAUHKEY__@@XZ		; CWHRegKey::Detach
PUBLIC	?Attach@CWHRegKey@@QAEPAUHKEY__@@PAU2@@Z	; CWHRegKey::Attach
PUBLIC	?CloseRegKey@CWHRegKey@@QAE_NXZ			; CWHRegKey::CloseRegKey
PUBLIC	?OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z		; CWHRegKey::OpenRegKey
PUBLIC	?OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z		; CWHRegKey::OpenRegKey
PUBLIC	?OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z	; CWHRegKey::OpenItemKey
PUBLIC	?CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z	; CWHRegKey::CreateItemKey
PUBLIC	?EnumItemString@CWHRegKey@@QAE_NKPADK@Z		; CWHRegKey::EnumItemString
PUBLIC	?WriteValue@CWHRegKey@@QAE_NPBDK@Z		; CWHRegKey::WriteValue
PUBLIC	?WriteString@CWHRegKey@@QAE_NPBD0@Z		; CWHRegKey::WriteString
PUBLIC	?WriteEncryptString@CWHRegKey@@QAE_NPBD0@Z	; CWHRegKey::WriteEncryptString
PUBLIC	?WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z		; CWHRegKey::WriteBinary
PUBLIC	?GetValue@CWHRegKey@@QAEKPBDK@Z			; CWHRegKey::GetValue
PUBLIC	?GetBinary@CWHRegKey@@QAEKPBDPAXK@Z		; CWHRegKey::GetBinary
PUBLIC	?GetString@CWHRegKey@@QAEKPBDPADI@Z		; CWHRegKey::GetString
PUBLIC	?GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z	; CWHRegKey::GetEncryptString
PUBLIC	?DeleteValue@CWHRegKey@@QAE_NPBD@Z		; CWHRegKey::DeleteValue
PUBLIC	?RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z		; CWHRegKey::RecurseDeleteKey
PUBLIC	??BCWHRegKey@@QAEPAUHKEY__@@XZ			; CWHRegKey::operator HKEY__ *
PUBLIC	?GetRegKey@CWHRegKey@@QAEPAUHKEY__@@XZ		; CWHRegKey::GetRegKey
PUBLIC	?RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z ; CWHRegKey::RecurseDeleteKey
PUBLIC	??0CWHRegKey@@QAE@ABV0@@Z			; CWHRegKey::CWHRegKey
PUBLIC	??4CWHRegKey@@QAEAAV0@ABV0@@Z			; CWHRegKey::operator=
PUBLIC	??_GCWHRegKey@@UAEPAXI@Z			; CWHRegKey::`scalar deleting destructor'
PUBLIC	??_ECWHRegKey@@UAEPAXI@Z			; CWHRegKey::`vector deleting destructor'
PUBLIC	??0CWHEncrypt@@QAE@ABV0@@Z			; CWHEncrypt::CWHEncrypt
PUBLIC	??4CWHEncrypt@@QAEAAV0@ABV0@@Z			; CWHEncrypt::operator=
PUBLIC	??_GCWHEncrypt@@UAEPAXI@Z			; CWHEncrypt::`scalar deleting destructor'
PUBLIC	??_ECWHEncrypt@@UAEPAXI@Z			; CWHEncrypt::`vector deleting destructor'
PUBLIC	??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ	; _snprintf_s<256>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7CWHRegKey@@6B@				; CWHRegKey::`vftable'
PUBLIC	??_7CWHEncrypt@@6B@				; CWHEncrypt::`vftable'
PUBLIC	?__LINE__Var@?0??SetMainKeyName@CWHRegKey@@SAXPBD@Z@4JA ; `CWHRegKey::SetMainKeyName'::`1'::__LINE__Var
PUBLIC	??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??Attach@CWHRegKey@@QAEPAUHKEY__@@PAU3@@Z@4JA ; `CWHRegKey::Attach'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z@4JA ; `CWHRegKey::OpenRegKey'::`1'::__LINE__Var
PUBLIC	??_C@_0BC@PPFGGFLE@Software?2?$CFs?2?$CFs?2?$CFs@ ; `string'
PUBLIC	?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z@4JA ; `CWHRegKey::OpenRegKey'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA ; `CWHRegKey::OpenItemKey'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA ; `CWHRegKey::CreateItemKey'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??EnumItemString@CWHRegKey@@QAE_NKPADK@Z@4JA ; `CWHRegKey::EnumItemString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteValue@CWHRegKey@@QAE_NPBDK@Z@4JA ; `CWHRegKey::WriteValue'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteString@CWHRegKey@@QAE_NPBD0@Z@4JA ; `CWHRegKey::WriteString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z@4JA ; `CWHRegKey::WriteBinary'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??GetValue@CWHRegKey@@QAEKPBDK@Z@4JA ; `CWHRegKey::GetValue'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??GetBinary@CWHRegKey@@QAEKPBDPAXK@Z@4JA ; `CWHRegKey::GetBinary'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??GetString@CWHRegKey@@QAEKPBDPADI@Z@4JA ; `CWHRegKey::GetString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z@4JA ; `CWHRegKey::GetEncryptString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DeleteValue@CWHRegKey@@QAE_NPBD@Z@4JA ; `CWHRegKey::DeleteValue'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z@4JA ; `CWHRegKey::RecurseDeleteKey'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z@4JA ; `CWHRegKey::RecurseDeleteKey'::`1'::__LINE__Var
PUBLIC	??_R4CWHRegKey@@6B@				; CWHRegKey::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHRegKey@@@8				; CWHRegKey `RTTI Type Descriptor'
PUBLIC	??_R3CWHRegKey@@8				; CWHRegKey::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHRegKey@@8				; CWHRegKey::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHRegKey@@8			; CWHRegKey::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CWHEncrypt@@6B@				; CWHEncrypt::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHEncrypt@@@8				; CWHEncrypt `RTTI Type Descriptor'
PUBLIC	??_R3CWHEncrypt@@8				; CWHEncrypt::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHEncrypt@@8				; CWHEncrypt::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHEncrypt@@8			; CWHEncrypt::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegCreateKeyA@12:PROC
EXTRN	__imp__RegDeleteKeyA@8:PROC
EXTRN	__imp__RegDeleteValueA@8:PROC
EXTRN	__imp__RegEnumKeyA@16:PROC
EXTRN	__imp__RegOpenKeyA@12:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__RegSetValueExA@24:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?AfxGetApp@@YGPAVCWinApp@@XZ:PROC		; AfxGetApp
EXTRN	??1CWHEncrypt@@UAE@XZ:PROC			; CWHEncrypt::~CWHEncrypt
EXTRN	?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z:PROC	; CWHEncrypt::XorEncrypt
EXTRN	?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z:PROC	; CWHEncrypt::XorCrevasse
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHEncrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHEncrypt@@8 DD FLAT:??_R0?AVCWHEncrypt@@@8 ; CWHEncrypt::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHEncrypt@@8
rdata$r	SEGMENT
??_R2CWHEncrypt@@8 DD FLAT:??_R1A@?0A@EA@CWHEncrypt@@8	; CWHEncrypt::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHEncrypt@@8
rdata$r	SEGMENT
??_R3CWHEncrypt@@8 DD 00H				; CWHEncrypt::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHEncrypt@@@8
data$r	SEGMENT
??_R0?AVCWHEncrypt@@@8 DD FLAT:??_7type_info@@6B@	; CWHEncrypt `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHEncrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHEncrypt@@6B@
rdata$r	SEGMENT
??_R4CWHEncrypt@@6B@ DD 00H				; CWHEncrypt::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHEncrypt@@@8
	DD	FLAT:??_R3CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHRegKey@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHRegKey@@8 DD FLAT:??_R0?AVCWHRegKey@@@8 ; CWHRegKey::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHRegKey@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHRegKey@@8
rdata$r	SEGMENT
??_R2CWHRegKey@@8 DD FLAT:??_R1A@?0A@EA@CWHRegKey@@8	; CWHRegKey::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHRegKey@@8
rdata$r	SEGMENT
??_R3CWHRegKey@@8 DD 00H				; CWHRegKey::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHRegKey@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHRegKey@@@8
data$r	SEGMENT
??_R0?AVCWHRegKey@@@8 DD FLAT:??_7type_info@@6B@	; CWHRegKey `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHRegKey@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHRegKey@@6B@
rdata$r	SEGMENT
??_R4CWHRegKey@@6B@ DD 00H				; CWHRegKey::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHRegKey@@@8
	DD	FLAT:??_R3CWHRegKey@@8
rdata$r	ENDS
;	COMDAT ?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z@4JA DD 0131H ; `CWHRegKey::RecurseDeleteKey'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z@4JA DD 0124H ; `CWHRegKey::RecurseDeleteKey'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DeleteValue@CWHRegKey@@QAE_NPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DeleteValue@CWHRegKey@@QAE_NPBD@Z@4JA DD 0118H ; `CWHRegKey::DeleteValue'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z@4JA DD 0107H ; `CWHRegKey::GetEncryptString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??GetString@CWHRegKey@@QAEKPBDPADI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetString@CWHRegKey@@QAEKPBDPADI@Z@4JA DD 0f8H ; `CWHRegKey::GetString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??GetBinary@CWHRegKey@@QAEKPBDPAXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetBinary@CWHRegKey@@QAEKPBDPAXK@Z@4JA DD 0e9H ; `CWHRegKey::GetBinary'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??GetValue@CWHRegKey@@QAEKPBDK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetValue@CWHRegKey@@QAEKPBDK@Z@4JA DD 0dbH ; `CWHRegKey::GetValue'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z@4JA DD 0cfH ; `CWHRegKey::WriteBinary'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteString@CWHRegKey@@QAE_NPBD0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteString@CWHRegKey@@QAE_NPBD0@Z@4JA DD 0b7H ; `CWHRegKey::WriteString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteValue@CWHRegKey@@QAE_NPBDK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteValue@CWHRegKey@@QAE_NPBDK@Z@4JA DD 0abH ; `CWHRegKey::WriteValue'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??EnumItemString@CWHRegKey@@QAE_NKPADK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??EnumItemString@CWHRegKey@@QAE_NKPADK@Z@4JA DD 09cH ; `CWHRegKey::EnumItemString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA DD 08eH ; `CWHRegKey::CreateItemKey'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA DD 080H ; `CWHRegKey::OpenItemKey'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z@4JA DD 06aH ; `CWHRegKey::OpenRegKey'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@PPFGGFLE@Software?2?$CFs?2?$CFs?2?$CFs@
CONST	SEGMENT
??_C@_0BC@PPFGGFLE@Software?2?$CFs?2?$CFs?2?$CFs@ DB 'Software\%s\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z@4JA DD 055H ; `CWHRegKey::OpenRegKey'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Attach@CWHRegKey@@QAEPAUHKEY__@@PAU3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Attach@CWHRegKey@@QAEPAUHKEY__@@PAU3@@Z@4JA DD 03dH ; `CWHRegKey::Attach'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0baH, 0cbH, 0d0H, 0c4H, '\whregkey.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetMainKeyName@CWHRegKey@@SAXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetMainKeyName@CWHRegKey@@SAXPBD@Z@4JA DD 027H ; `CWHRegKey::SetMainKeyName'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CWHEncrypt@@6B@
CONST	SEGMENT
??_7CWHEncrypt@@6B@ DD FLAT:??_R4CWHEncrypt@@6B@	; CWHEncrypt::`vftable'
	DD	FLAT:??_ECWHEncrypt@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CWHRegKey@@6B@
CONST	SEGMENT
??_7CWHRegKey@@6B@ DD FLAT:??_R4CWHRegKey@@6B@		; CWHRegKey::`vftable'
	DD	FLAT:??_ECWHRegKey@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHEncrypt@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHRegKey@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CWHRegKey@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ PROC		; _snprintf_s<256>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	68 00 01 00 00	 push	 256			; 00000100H
  00020	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __vsnprintf_s
  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ENDP		; _snprintf_s<256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHEncrypt@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHEncrypt@@UAEPAXI@Z PROC				; CWHEncrypt::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHEncrypt@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHEncrypt@@UAE@XZ ; CWHEncrypt::~CWHEncrypt
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 04		 push	 4
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 04		 push	 4
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHEncrypt@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHEncrypt@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHEncrypt@@UAEPAXI@Z ENDP				; CWHEncrypt::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHEncrypt@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHEncrypt@@UAEPAXI@Z PROC				; CWHEncrypt::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHEncrypt@@UAEPAXI@Z ENDP				; CWHEncrypt::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHEncrypt@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHEncrypt@@QAEAAV0@ABV0@@Z PROC			; CWHEncrypt::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??4CWHEncrypt@@QAEAAV0@ABV0@@Z ENDP			; CWHEncrypt::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHEncrypt@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHEncrypt@@QAE@ABV0@@Z PROC				; CWHEncrypt::CWHEncrypt, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHEncrypt@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0CWHEncrypt@@QAE@ABV0@@Z ENDP				; CWHEncrypt::CWHEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHRegKey@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHRegKey@@UAEPAXI@Z PROC				; CWHRegKey::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHRegKey@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHRegKey@@UAE@XZ ; CWHRegKey::~CWHRegKey
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 08		 push	 8
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 cd 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*8+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CWHRegKey@@UAE@XZ	; CWHRegKey::~CWHRegKey
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 08		 push	 8
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHRegKey@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHRegKey@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHRegKey@@UAEPAXI@Z ENDP				; CWHRegKey::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHRegKey@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHRegKey@@UAEPAXI@Z PROC				; CWHRegKey::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHRegKey@@UAE@XZ	; CWHRegKey::~CWHRegKey
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHRegKey@@UAEPAXI@Z ENDP				; CWHRegKey::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHRegKey@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHRegKey@@QAEAAV0@ABV0@@Z PROC			; CWHRegKey::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4CWHRegKey@@QAEAAV0@ABV0@@Z ENDP			; CWHRegKey::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHRegKey@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHRegKey@@QAE@ABV0@@Z PROC				; CWHRegKey::CWHRegKey, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHRegKey@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0CWHRegKey@@QAE@ABV0@@Z ENDP				; CWHRegKey::CWHRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z
_TEXT	SEGMENT
_szKeyName$ = -272					; size = 256
_lResult$ = -16						; size = 4
_hSubKey$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hParentKey$ = 8					; size = 4
_pszSubKeyName$ = 12					; size = 4
?RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z PROC	; CWHRegKey::RecurseDeleteKey, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 306  : 	//效验参数
; 307  : 	ASSERT(hParentKey!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _hParentKey$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN7@RecurseDel
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN7@RecurseDel
  00036	cc		 int	 3
$LN7@RecurseDel:

; 308  : 	ASSERT(pszSubKeyName!=NULL);

  00037	83 7d 0c 00	 cmp	 DWORD PTR _pszSubKeyName$[ebp], 0
  0003b	75 18		 jne	 SHORT $LN8@RecurseDel
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z@4JA
  00042	83 c0 03	 add	 eax, 3
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00050	85 c0		 test	 eax, eax
  00052	74 01		 je	 SHORT $LN8@RecurseDel
  00054	cc		 int	 3
$LN8@RecurseDel:

; 309  : 
; 310  : 	//打开键项
; 311  : 	HKEY hSubKey=NULL;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hSubKey$[ebp], 0

; 312  : 	LONG lResult=RegOpenKey(hParentKey,pszSubKeyName,&hSubKey);

  0005c	8d 45 f4	 lea	 eax, DWORD PTR _hSubKey$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pszSubKeyName$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 08	 mov	 edx, DWORD PTR _hParentKey$[ebp]
  00067	52		 push	 edx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyA@12
  0006e	89 45 f0	 mov	 DWORD PTR _lResult$[ebp], eax

; 313  : 	if (lResult!=ERROR_SUCCESS) return lResult;

  00071	83 7d f0 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  00075	74 05		 je	 SHORT $LN2@RecurseDel
  00077	8b 45 f0	 mov	 eax, DWORD PTR _lResult$[ebp]
  0007a	eb 67		 jmp	 SHORT $LN1@RecurseDel
$LN2@RecurseDel:

; 314  : 
; 315  : 	//递归删除
; 316  : 	TCHAR szKeyName[256];
; 317  : 	while (RegEnumKey(hSubKey,0,szKeyName,sizeof(szKeyName))==ERROR_SUCCESS)

  0007c	68 00 01 00 00	 push	 256			; 00000100H
  00081	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  00087	50		 push	 eax
  00088	6a 00		 push	 0
  0008a	8b 4d f4	 mov	 ecx, DWORD PTR _hSubKey$[ebp]
  0008d	51		 push	 ecx
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegEnumKeyA@16
  00094	85 c0		 test	 eax, eax
  00096	75 2d		 jne	 SHORT $LN3@RecurseDel

; 318  : 	{
; 319  : 		//删除键项
; 320  : 		lResult=RecurseDeleteKey(hSubKey,szKeyName);

  00098	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szKeyName$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _hSubKey$[ebp]
  000a2	51		 push	 ecx
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z ; CWHRegKey::RecurseDeleteKey
  000ab	89 45 f0	 mov	 DWORD PTR _lResult$[ebp], eax

; 321  : 		if (lResult!=ERROR_SUCCESS)

  000ae	83 7d f0 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  000b2	74 0f		 je	 SHORT $LN5@RecurseDel

; 322  : 		{
; 323  : 			RegCloseKey(hSubKey);

  000b4	8b 45 f4	 mov	 eax, DWORD PTR _hSubKey$[ebp]
  000b7	50		 push	 eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 324  : 			return lResult;

  000be	8b 45 f0	 mov	 eax, DWORD PTR _lResult$[ebp]
  000c1	eb 20		 jmp	 SHORT $LN1@RecurseDel
$LN5@RecurseDel:

; 325  : 		}
; 326  : 	}

  000c3	eb b7		 jmp	 SHORT $LN2@RecurseDel
$LN3@RecurseDel:

; 327  : 
; 328  : 	//关闭键项
; 329  : 	RegCloseKey(hSubKey);

  000c5	8b 45 f4	 mov	 eax, DWORD PTR _hSubKey$[ebp]
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 330  : 
; 331  : 	//删除键项
; 332  : 	lResult=RegDeleteKey(hParentKey,pszSubKeyName);

  000cf	8b 45 0c	 mov	 eax, DWORD PTR _pszSubKeyName$[ebp]
  000d2	50		 push	 eax
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _hParentKey$[ebp]
  000d6	51		 push	 ecx
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegDeleteKeyA@8
  000dd	89 45 f0	 mov	 DWORD PTR _lResult$[ebp], eax

; 333  : 
; 334  : 	return lResult;

  000e0	8b 45 f0	 mov	 eax, DWORD PTR _lResult$[ebp]
$LN1@RecurseDel:

; 335  : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
?RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z ENDP	; CWHRegKey::RecurseDeleteKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.h
;	COMDAT ?GetRegKey@CWHRegKey@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRegKey@CWHRegKey@@QAEPAUHKEY__@@XZ PROC		; CWHRegKey::GetRegKey, COMDAT
; _this$ = ecx

; 94   : 	HKEY GetRegKey() { return m_hRegKey; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetRegKey@CWHRegKey@@QAEPAUHKEY__@@XZ ENDP		; CWHRegKey::GetRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.h
;	COMDAT ??BCWHRegKey@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCWHRegKey@@QAEPAUHKEY__@@XZ PROC			; CWHRegKey::operator HKEY__ *, COMDAT
; _this$ = ecx

; 92   : 	operator HKEY() { return m_hRegKey; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??BCWHRegKey@@QAEPAUHKEY__@@XZ ENDP			; CWHRegKey::operator HKEY__ *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z
_TEXT	SEGMENT
tv85 = -76						; size = 4
_lResult$ = -8						; size = 4
_this$ = -4						; size = 4
_pszSubKeyName$ = 8					; size = 4
?RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z PROC		; CWHRegKey::RecurseDeleteKey, COMDAT
; _this$ = ecx

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 293  : 	//效验参数
; 294  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@RecurseDel
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@RecurseDel
  0002d	cc		 int	 3
$LN3@RecurseDel:

; 295  : 	ASSERT(pszSubKeyName!=NULL);

  0002e	83 7d 08 00	 cmp	 DWORD PTR _pszSubKeyName$[ebp], 0
  00032	75 18		 jne	 SHORT $LN4@RecurseDel
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z@4JA
  00039	83 c0 03	 add	 eax, 3
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN4@RecurseDel
  0004b	cc		 int	 3
$LN4@RecurseDel:

; 296  : 
; 297  : 	//删除键项
; 298  : 	LONG lResult=RecurseDeleteKey(m_hRegKey,pszSubKeyName);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _pszSubKeyName$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?RecurseDeleteKey@CWHRegKey@@AAEJPAUHKEY__@@PBD@Z ; CWHRegKey::RecurseDeleteKey
  0005f	89 45 f8	 mov	 DWORD PTR _lResult$[ebp], eax

; 299  : 
; 300  : 	return (lResult==ERROR_SUCCESS);

  00062	83 7d f8 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  00066	75 09		 jne	 SHORT $LN5@RecurseDel
  00068	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  0006f	eb 07		 jmp	 SHORT $LN6@RecurseDel
$LN5@RecurseDel:
  00071	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN6@RecurseDel:
  00078	8a 45 b4	 mov	 al, BYTE PTR tv85[ebp]

; 301  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?RecurseDeleteKey@CWHRegKey@@QAE_NPBD@Z ENDP		; CWHRegKey::RecurseDeleteKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?DeleteValue@CWHRegKey@@QAE_NPBD@Z
_TEXT	SEGMENT
tv77 = -76						; size = 4
_lResult$ = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
?DeleteValue@CWHRegKey@@QAE_NPBD@Z PROC			; CWHRegKey::DeleteValue, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  : 	//效验参数
; 282  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@DeleteValu
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DeleteValue@CWHRegKey@@QAE_NPBD@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@DeleteValu
  0002d	cc		 int	 3
$LN3@DeleteValu:

; 283  : 
; 284  : 	//删除数值
; 285  : 	LONG lResult=RegDeleteValue(m_hRegKey,pszName);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	52		 push	 edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegDeleteValueA@8
  0003f	89 45 f8	 mov	 DWORD PTR _lResult$[ebp], eax

; 286  : 
; 287  : 	return (lResult==ERROR_SUCCESS);

  00042	83 7d f8 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  00046	75 09		 jne	 SHORT $LN4@DeleteValu
  00048	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0004f	eb 07		 jmp	 SHORT $LN5@DeleteValu
$LN4@DeleteValu:
  00051	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN5@DeleteValu:
  00058	8a 45 b4	 mov	 al, BYTE PTR tv77[ebp]

; 288  : }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?DeleteValue@CWHRegKey@@QAE_NPBD@Z ENDP			; CWHRegKey::DeleteValue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z
_TEXT	SEGMENT
_szRegString$ = -524					; size = 513
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pszName$ = 8						; size = 4
_pszString$ = 12					; size = 4
_uMaxCount$ = 16					; size = 4
?GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z PROC		; CWHRegKey::GetEncryptString, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 02 00
	00		 sub	 esp, 652		; 0000028cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 264  : 	//效验参数
; 265  : 	ASSERT(pszString!=NULL);

  00019	83 7d 0c 00	 cmp	 DWORD PTR _pszString$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN3@GetEncrypt
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN3@GetEncrypt
  00036	cc		 int	 3
$LN3@GetEncrypt:

; 266  : 	ASSERT(m_hRegKey!=NULL);

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003e	75 19		 jne	 SHORT $LN4@GetEncrypt
  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z@4JA
  00046	83 c1 03	 add	 ecx, 3
  00049	51		 push	 ecx
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN4@GetEncrypt
  00058	cc		 int	 3
$LN4@GetEncrypt:

; 267  : 
; 268  : 	//读取字符
; 269  : 	TCHAR szRegString[MAX_ENCRYPT_LEN+1]=TEXT("");

  00059	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0005e	88 85 f4 fd ff
	ff		 mov	 BYTE PTR _szRegString$[ebp], al
  00064	68 00 02 00 00	 push	 512			; 00000200H
  00069	6a 00		 push	 0
  0006b	8d 85 f5 fd ff
	ff		 lea	 eax, DWORD PTR _szRegString$[ebp+1]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _memset
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 270  : 	GetString(pszName,szRegString,CountArray(szRegString));

  0007a	68 01 02 00 00	 push	 513			; 00000201H
  0007f	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szRegString$[ebp]
  00085	50		 push	 eax
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  00089	51		 push	 ecx
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?GetString@CWHRegKey@@QAEKPBDPADI@Z ; CWHRegKey::GetString

; 271  : 
; 272  : 	//解密数据
; 273  : 	CWHEncrypt::XorCrevasse(szRegString,pszString,uMaxCount);

  00092	0f b7 45 10	 movzx	 eax, WORD PTR _uMaxCount$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0009a	51		 push	 ecx
  0009b	8d 95 f4 fd ff
	ff		 lea	 edx, DWORD PTR _szRegString$[ebp]
  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 ?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z ; CWHEncrypt::XorCrevasse
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 274  : 
; 275  : 	return lstrlen(pszString);

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4

; 276  : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
?GetEncryptString@CWHRegKey@@QAEKPBDPADI@Z ENDP		; CWHRegKey::GetEncryptString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?GetString@CWHRegKey@@QAEKPBDPADI@Z
_TEXT	SEGMENT
_lResult$ = -16						; size = 4
_dwResultSize$ = -12					; size = 4
_dwType$ = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
_pszString$ = 12					; size = 4
_uMaxCount$ = 16					; size = 4
?GetString@CWHRegKey@@QAEKPBDPADI@Z PROC		; CWHRegKey::GetString, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 	//效验参数
; 250  : 	ASSERT(pszString!=NULL);

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pszString$[ebp], 0
  00010	75 18		 jne	 SHORT $LN5@GetString
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetString@CWHRegKey@@QAEKPBDPADI@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN5@GetString
  00029	cc		 int	 3
$LN5@GetString:

; 251  : 	ASSERT(m_hRegKey!=NULL);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	75 19		 jne	 SHORT $LN6@GetString
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??GetString@CWHRegKey@@QAEKPBDPADI@Z@4JA
  00039	83 c1 03	 add	 ecx, 3
  0003c	51		 push	 ecx
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN6@GetString
  0004b	cc		 int	 3
$LN6@GetString:

; 252  : 
; 253  : 	//读取数值
; 254  : 	DWORD dwType=REG_NONE,dwResultSize=uMaxCount*sizeof(TCHAR);

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwType$[ebp], 0
  00053	8b 45 10	 mov	 eax, DWORD PTR _uMaxCount$[ebp]
  00056	89 45 f4	 mov	 DWORD PTR _dwResultSize$[ebp], eax

; 255  : 	LONG lResult=RegQueryValueEx(m_hRegKey,pszName,0,&dwType,(BYTE *)(pszString),&dwResultSize);

  00059	8d 45 f4	 lea	 eax, DWORD PTR _dwResultSize$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  00060	51		 push	 ecx
  00061	8d 55 f8	 lea	 edx, DWORD PTR _dwType$[ebp]
  00064	52		 push	 edx
  00065	6a 00		 push	 0
  00067	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  0006a	50		 push	 eax
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00071	52		 push	 edx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00078	89 45 f0	 mov	 DWORD PTR _lResult$[ebp], eax

; 256  : 	if ((lResult!=ERROR_SUCCESS)||(dwType!=REG_SZ)) return 0;

  0007b	83 7d f0 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  0007f	75 06		 jne	 SHORT $LN3@GetString
  00081	83 7d f8 01	 cmp	 DWORD PTR _dwType$[ebp], 1
  00085	74 04		 je	 SHORT $LN2@GetString
$LN3@GetString:
  00087	33 c0		 xor	 eax, eax
  00089	eb 03		 jmp	 SHORT $LN1@GetString
$LN2@GetString:

; 257  : 
; 258  : 	return dwResultSize/sizeof(TCHAR);

  0008b	8b 45 f4	 mov	 eax, DWORD PTR _dwResultSize$[ebp]
$LN1@GetString:

; 259  : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?GetString@CWHRegKey@@QAEKPBDPADI@Z ENDP		; CWHRegKey::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?GetBinary@CWHRegKey@@QAEKPBDPAXK@Z
_TEXT	SEGMENT
_lResult$ = -16						; size = 4
_dwResultSize$ = -12					; size = 4
_dwType$ = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
_pData$ = 12						; size = 4
_dwBufferSize$ = 16					; size = 4
?GetBinary@CWHRegKey@@QAEKPBDPAXK@Z PROC		; CWHRegKey::GetBinary, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 234  : 	//效验参数
; 235  : 	ASSERT(pData!=NULL);

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00010	75 18		 jne	 SHORT $LN5@GetBinary
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetBinary@CWHRegKey@@QAEKPBDPAXK@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN5@GetBinary
  00029	cc		 int	 3
$LN5@GetBinary:

; 236  : 	ASSERT(m_hRegKey!=NULL);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00031	75 19		 jne	 SHORT $LN6@GetBinary
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??GetBinary@CWHRegKey@@QAEKPBDPAXK@Z@4JA
  00039	83 c1 03	 add	 ecx, 3
  0003c	51		 push	 ecx
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN6@GetBinary
  0004b	cc		 int	 3
$LN6@GetBinary:

; 237  : 
; 238  : 	//读取数值
; 239  : 	DWORD dwType=REG_NONE,dwResultSize=dwBufferSize;

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwType$[ebp], 0
  00053	8b 45 10	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  00056	89 45 f4	 mov	 DWORD PTR _dwResultSize$[ebp], eax

; 240  : 	LONG lResult=RegQueryValueEx(m_hRegKey,pszName,0,&dwType,(BYTE *)(pData),&dwResultSize);

  00059	8d 45 f4	 lea	 eax, DWORD PTR _dwResultSize$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00060	51		 push	 ecx
  00061	8d 55 f8	 lea	 edx, DWORD PTR _dwType$[ebp]
  00064	52		 push	 edx
  00065	6a 00		 push	 0
  00067	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  0006a	50		 push	 eax
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00071	52		 push	 edx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00078	89 45 f0	 mov	 DWORD PTR _lResult$[ebp], eax

; 241  : 	if ((lResult!=ERROR_SUCCESS)||(dwType!=REG_BINARY)) return 0;

  0007b	83 7d f0 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  0007f	75 06		 jne	 SHORT $LN3@GetBinary
  00081	83 7d f8 03	 cmp	 DWORD PTR _dwType$[ebp], 3
  00085	74 04		 je	 SHORT $LN2@GetBinary
$LN3@GetBinary:
  00087	33 c0		 xor	 eax, eax
  00089	eb 03		 jmp	 SHORT $LN1@GetBinary
$LN2@GetBinary:

; 242  : 
; 243  : 	return dwResultSize;

  0008b	8b 45 f4	 mov	 eax, DWORD PTR _dwResultSize$[ebp]
$LN1@GetBinary:

; 244  : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?GetBinary@CWHRegKey@@QAEKPBDPAXK@Z ENDP		; CWHRegKey::GetBinary
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?GetValue@CWHRegKey@@QAEKPBDK@Z
_TEXT	SEGMENT
_lResult$ = -20						; size = 4
_dwValue$ = -16						; size = 4
_dwResultSize$ = -12					; size = 4
_dwType$ = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
_dwDefValue$ = 12					; size = 4
?GetValue@CWHRegKey@@QAEKPBDK@Z PROC			; CWHRegKey::GetValue, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 	//效验参数
; 221  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN5@GetValue
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??GetValue@CWHRegKey@@QAEKPBDK@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN5@GetValue
  0002d	cc		 int	 3
$LN5@GetValue:

; 222  : 
; 223  : 	//读取数值
; 224  : 	DWORD dwType=REG_NONE,dwResultSize=sizeof(DWORD),dwValue=0;

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwType$[ebp], 0
  00035	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _dwResultSize$[ebp], 4
  0003c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwValue$[ebp], 0

; 225  : 	LONG lResult=RegQueryValueEx(m_hRegKey,pszName,0,&dwType,(BYTE *)(&dwValue),&dwResultSize);

  00043	8d 45 f4	 lea	 eax, DWORD PTR _dwResultSize$[ebp]
  00046	50		 push	 eax
  00047	8d 4d f0	 lea	 ecx, DWORD PTR _dwValue$[ebp]
  0004a	51		 push	 ecx
  0004b	8d 55 f8	 lea	 edx, DWORD PTR _dwType$[ebp]
  0004e	52		 push	 edx
  0004f	6a 00		 push	 0
  00051	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005b	52		 push	 edx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00062	89 45 ec	 mov	 DWORD PTR _lResult$[ebp], eax

; 226  : 	if ((lResult!=ERROR_SUCCESS)||(dwType!=REG_DWORD)) return dwDefValue;

  00065	83 7d ec 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  00069	75 06		 jne	 SHORT $LN3@GetValue
  0006b	83 7d f8 04	 cmp	 DWORD PTR _dwType$[ebp], 4
  0006f	74 05		 je	 SHORT $LN2@GetValue
$LN3@GetValue:
  00071	8b 45 0c	 mov	 eax, DWORD PTR _dwDefValue$[ebp]
  00074	eb 03		 jmp	 SHORT $LN1@GetValue
$LN2@GetValue:

; 227  : 
; 228  : 	return dwValue;

  00076	8b 45 f0	 mov	 eax, DWORD PTR _dwValue$[ebp]
$LN1@GetValue:

; 229  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
?GetValue@CWHRegKey@@QAEKPBDK@Z ENDP			; CWHRegKey::GetValue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z
_TEXT	SEGMENT
tv81 = -76						; size = 4
_lResult$ = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
_pData$ = 12						; size = 4
_dwSize$ = 16						; size = 4
?WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z PROC		; CWHRegKey::WriteBinary, COMDAT
; _this$ = ecx

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 	//效验参数
; 209  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@WriteBinar
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@WriteBinar
  0002d	cc		 int	 3
$LN3@WriteBinar:

; 210  : 
; 211  : 	//写入数值
; 212  : 	LONG lResult=RegSetValueEx(m_hRegKey,pszName,0,REG_BINARY,(LPBYTE)(pData),dwSize);

  0002e	8b 45 10	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00035	51		 push	 ecx
  00036	6a 03		 push	 3
  00038	6a 00		 push	 0
  0003a	8b 55 08	 mov	 edx, DWORD PTR _pszName$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00044	51		 push	 ecx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24
  0004b	89 45 f8	 mov	 DWORD PTR _lResult$[ebp], eax

; 213  : 
; 214  : 	return (lResult==ERROR_SUCCESS);

  0004e	83 7d f8 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  00052	75 09		 jne	 SHORT $LN4@WriteBinar
  00054	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  0005b	eb 07		 jmp	 SHORT $LN5@WriteBinar
$LN4@WriteBinar:
  0005d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN5@WriteBinar:
  00064	8a 45 b4	 mov	 al, BYTE PTR tv81[ebp]

; 215  : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
?WriteBinary@CWHRegKey@@QAE_NPBDPBXK@Z ENDP		; CWHRegKey::WriteBinary
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?WriteEncryptString@CWHRegKey@@QAE_NPBD0@Z
_TEXT	SEGMENT
_szRegString$ = -524					; size = 513
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pszName$ = 8						; size = 4
_pszString$ = 12					; size = 4
?WriteEncryptString@CWHRegKey@@QAE_NPBD0@Z PROC		; CWHRegKey::WriteEncryptString, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 02 00
	00		 sub	 esp, 652		; 0000028cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 	//加密数据
; 198  : 	TCHAR szRegString[MAX_ENCRYPT_LEN+1]=TEXT("");

  00019	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0001e	88 85 f4 fd ff
	ff		 mov	 BYTE PTR _szRegString$[ebp], al
  00024	68 00 02 00 00	 push	 512			; 00000200H
  00029	6a 00		 push	 0
  0002b	8d 85 f5 fd ff
	ff		 lea	 eax, DWORD PTR _szRegString$[ebp+1]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 199  : 	CWHEncrypt::XorEncrypt(pszString,szRegString,CountArray(szRegString));

  0003a	68 01 02 00 00	 push	 513			; 00000201H
  0003f	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szRegString$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z ; CWHEncrypt::XorEncrypt
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 
; 201  : 	//写入字符
; 202  : 	return WriteString(pszName,szRegString);

  00052	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _szRegString$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?WriteString@CWHRegKey@@QAE_NPBD0@Z ; CWHRegKey::WriteString

; 203  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006b	33 cd		 xor	 ecx, ebp
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?WriteEncryptString@CWHRegKey@@QAE_NPBD0@Z ENDP		; CWHRegKey::WriteEncryptString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?WriteString@CWHRegKey@@QAE_NPBD0@Z
_TEXT	SEGMENT
tv84 = -80						; size = 4
_lResult$ = -12						; size = 4
_dwDataSize$ = -8					; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
_pszString$ = 12					; size = 4
?WriteString@CWHRegKey@@QAE_NPBD0@Z PROC		; CWHRegKey::WriteString, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  : 	//效验参数
; 185  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@WriteStrin
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteString@CWHRegKey@@QAE_NPBD0@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@WriteStrin
  0002d	cc		 int	 3
$LN3@WriteStrin:

; 186  : 
; 187  : 	//写入数值
; 188  : 	DWORD dwDataSize=CountStringBuffer(pszString);

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 f8	 mov	 DWORD PTR _dwDataSize$[ebp], eax

; 189  : 	LONG lResult=RegSetValueEx(m_hRegKey,pszName,0,REG_SZ,(LPBYTE)pszString,dwDataSize);

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _dwDataSize$[ebp]
  00041	50		 push	 eax
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  00045	51		 push	 ecx
  00046	6a 01		 push	 1
  00048	6a 00		 push	 0
  0004a	8b 55 08	 mov	 edx, DWORD PTR _pszName$[ebp]
  0004d	52		 push	 edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	51		 push	 ecx
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24
  0005b	89 45 f4	 mov	 DWORD PTR _lResult$[ebp], eax

; 190  : 
; 191  : 	return (lResult==ERROR_SUCCESS);

  0005e	83 7d f4 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  00062	75 09		 jne	 SHORT $LN4@WriteStrin
  00064	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  0006b	eb 07		 jmp	 SHORT $LN5@WriteStrin
$LN4@WriteStrin:
  0006d	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN5@WriteStrin:
  00074	8a 45 b0	 mov	 al, BYTE PTR tv84[ebp]

; 192  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
?WriteString@CWHRegKey@@QAE_NPBD0@Z ENDP		; CWHRegKey::WriteString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?WriteValue@CWHRegKey@@QAE_NPBDK@Z
_TEXT	SEGMENT
tv81 = -76						; size = 4
_lResult$ = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
_dwValue$ = 12						; size = 4
?WriteValue@CWHRegKey@@QAE_NPBDK@Z PROC			; CWHRegKey::WriteValue, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 	//效验参数
; 173  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@WriteValue
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteValue@CWHRegKey@@QAE_NPBDK@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@WriteValue
  0002d	cc		 int	 3
$LN3@WriteValue:

; 174  : 
; 175  : 	//写入数值
; 176  : 	LONG lResult=RegSetValueEx(m_hRegKey,pszName,0,REG_DWORD,(LPBYTE)(&dwValue),sizeof(DWORD));

  0002e	6a 04		 push	 4
  00030	8d 45 0c	 lea	 eax, DWORD PTR _dwValue$[ebp]
  00033	50		 push	 eax
  00034	6a 04		 push	 4
  00036	6a 00		 push	 0
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00042	50		 push	 eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24
  00049	89 45 f8	 mov	 DWORD PTR _lResult$[ebp], eax

; 177  : 
; 178  : 	return (lResult==ERROR_SUCCESS);

  0004c	83 7d f8 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  00050	75 09		 jne	 SHORT $LN4@WriteValue
  00052	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00059	eb 07		 jmp	 SHORT $LN5@WriteValue
$LN4@WriteValue:
  0005b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN5@WriteValue:
  00062	8a 45 b4	 mov	 al, BYTE PTR tv81[ebp]

; 179  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?WriteValue@CWHRegKey@@QAE_NPBDK@Z ENDP			; CWHRegKey::WriteValue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?EnumItemString@CWHRegKey@@QAE_NKPADK@Z
_TEXT	SEGMENT
tv81 = -76						; size = 4
_lResult$ = -8						; size = 4
_this$ = -4						; size = 4
_dwIndex$ = 8						; size = 4
_pszString$ = 12					; size = 4
_dwSize$ = 16						; size = 4
?EnumItemString@CWHRegKey@@QAE_NKPADK@Z PROC		; CWHRegKey::EnumItemString, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 157  : 	//效验参数
; 158  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@EnumItemSt
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??EnumItemString@CWHRegKey@@QAE_NKPADK@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@EnumItemSt
  0002d	cc		 int	 3
$LN3@EnumItemSt:

; 159  : 
; 160  : 	//设置变量
; 161  : 	pszString[0]=0;

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	6b c8 00	 imul	 ecx, eax, 0
  00036	8b 55 0c	 mov	 edx, DWORD PTR _pszString$[ebp]
  00039	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 162  : 
; 163  : 	//枚举键项
; 164  : 	LONG lResult=RegEnumKey(m_hRegKey,dwIndex,pszString,dwSize);

  0003d	8b 45 10	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  00048	52		 push	 edx
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004f	51		 push	 ecx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegEnumKeyA@16
  00056	89 45 f8	 mov	 DWORD PTR _lResult$[ebp], eax

; 165  : 
; 166  : 	return (lResult==ERROR_SUCCESS);

  00059	83 7d f8 00	 cmp	 DWORD PTR _lResult$[ebp], 0
  0005d	75 09		 jne	 SHORT $LN4@EnumItemSt
  0005f	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00066	eb 07		 jmp	 SHORT $LN5@EnumItemSt
$LN4@EnumItemSt:
  00068	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN5@EnumItemSt:
  0006f	8a 45 b4	 mov	 al, BYTE PTR tv81[ebp]

; 167  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
?EnumItemString@CWHRegKey@@QAE_NKPADK@Z ENDP		; CWHRegKey::EnumItemString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z
_TEXT	SEGMENT
_hRegKey$ = -8						; size = 4
_this$ = -4						; size = 4
_pszSubKeyName$ = 8					; size = 4
?CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z PROC	; CWHRegKey::CreateItemKey, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 	//效验参数
; 144  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@CreateItem
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@CreateItem
  0002d	cc		 int	 3
$LN3@CreateItem:

; 145  : 	ASSERT(pszSubKeyName!=NULL);

  0002e	83 7d 08 00	 cmp	 DWORD PTR _pszSubKeyName$[ebp], 0
  00032	75 18		 jne	 SHORT $LN4@CreateItem
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA
  00039	83 c0 03	 add	 eax, 3
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN4@CreateItem
  0004b	cc		 int	 3
$LN4@CreateItem:

; 146  : 
; 147  : 	//创建键项
; 148  : 	HKEY hRegKey=NULL;

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hRegKey$[ebp], 0

; 149  : 	RegCreateKey(m_hRegKey,pszSubKeyName,&hRegKey);

  00053	8d 45 f8	 lea	 eax, DWORD PTR _hRegKey$[ebp]
  00056	50		 push	 eax
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _pszSubKeyName$[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyA@12

; 150  : 
; 151  : 	return hRegKey;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _hRegKey$[ebp]

; 152  : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?CreateItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z ENDP	; CWHRegKey::CreateItemKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z
_TEXT	SEGMENT
_hRegKey$ = -8						; size = 4
_this$ = -4						; size = 4
_pszSubKeyName$ = 8					; size = 4
?OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z PROC	; CWHRegKey::OpenItemKey, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 129  : 	//效验参数
; 130  : 	ASSERT(m_hRegKey!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN3@OpenItemKe
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN3@OpenItemKe
  0002d	cc		 int	 3
$LN3@OpenItemKe:

; 131  : 	ASSERT(pszSubKeyName!=NULL);

  0002e	83 7d 08 00	 cmp	 DWORD PTR _pszSubKeyName$[ebp], 0
  00032	75 18		 jne	 SHORT $LN4@OpenItemKe
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z@4JA
  00039	83 c0 03	 add	 eax, 3
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN4@OpenItemKe
  0004b	cc		 int	 3
$LN4@OpenItemKe:

; 132  : 
; 133  : 	//打开键项
; 134  : 	HKEY hRegKey=NULL;

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hRegKey$[ebp], 0

; 135  : 	RegOpenKey(m_hRegKey,pszSubKeyName,&hRegKey);

  00053	8d 45 f8	 lea	 eax, DWORD PTR _hRegKey$[ebp]
  00056	50		 push	 eax
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _pszSubKeyName$[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyA@12

; 136  : 
; 137  : 	return hRegKey;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _hRegKey$[ebp]

; 138  : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?OpenItemKey@CWHRegKey@@QAEPAUHKEY__@@PBD@Z ENDP	; CWHRegKey::OpenItemKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z
_TEXT	SEGMENT
tv143 = -336						; size = 4
_lResult$ = -268					; size = 4
_szFullKeyName$ = -264					; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pszMainKeyName$ = 8					; size = 4
_pszKeyName$ = 12					; size = 4
_bCreate$ = 16						; size = 1
?OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z PROC		; CWHRegKey::OpenRegKey, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 	//效验参数
; 108  : 	ASSERT(pszKeyName!=NULL);

  00019	83 7d 0c 00	 cmp	 DWORD PTR _pszKeyName$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN5@OpenRegKey
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN5@OpenRegKey
  00036	cc		 int	 3
$LN5@OpenRegKey:

; 109  : 	ASSERT(pszMainKeyName!=NULL);

  00037	83 7d 08 00	 cmp	 DWORD PTR _pszMainKeyName$[ebp], 0
  0003b	75 18		 jne	 SHORT $LN6@OpenRegKey
  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z@4JA
  00042	83 c0 03	 add	 eax, 3
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00050	85 c0		 test	 eax, eax
  00052	74 01		 je	 SHORT $LN6@OpenRegKey
  00054	cc		 int	 3
$LN6@OpenRegKey:

; 110  : 
; 111  : 	//关闭键项
; 112  : 	if (m_hRegKey!=NULL) RegCloseKey(m_hRegKey);

  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005c	74 0d		 je	 SHORT $LN2@OpenRegKey
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00064	51		 push	 ecx
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN2@OpenRegKey:

; 113  : 
; 114  : 	//生成键名
; 115  : 	TCHAR szFullKeyName[256]=TEXT("");

  0006b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00070	88 85 f8 fe ff
	ff		 mov	 BYTE PTR _szFullKeyName$[ebp], al
  00076	68 ff 00 00 00	 push	 255			; 000000ffH
  0007b	6a 00		 push	 0
  0007d	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szFullKeyName$[ebp+1]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memset
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH

; 116  : 	_sntprintf_s(szFullKeyName,CountArray(szFullKeyName),TEXT("Software\\%s\\%s\\%s"),szProductKey,pszMainKeyName,pszKeyName);

  0008c	8b 45 0c	 mov	 eax, DWORD PTR _pszKeyName$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _pszMainKeyName$[ebp]
  00093	51		 push	 ecx
  00094	68 00 00 00 00	 push	 OFFSET ?szProductKey@@3QBDB
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PPFGGFLE@Software?2?$CFs?2?$CFs?2?$CFs@
  0009e	68 00 01 00 00	 push	 256			; 00000100H
  000a3	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szFullKeyName$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 ??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ; _snprintf_s<256>
  000af	83 c4 18	 add	 esp, 24			; 00000018H

; 117  : 
; 118  : 	//打开键项
; 119  : 	m_hRegKey=NULL;

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 120  : 	LONG lResult=RegOpenKey(HKEY_CURRENT_USER,szFullKeyName,&m_hRegKey);

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	83 c0 04	 add	 eax, 4
  000c2	50		 push	 eax
  000c3	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szFullKeyName$[ebp]
  000c9	51		 push	 ecx
  000ca	68 01 00 00 80	 push	 -2147483647		; 80000001H
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyA@12
  000d5	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lResult$[ebp], eax

; 121  : 	if ((lResult!=ERROR_SUCCESS)&&(bCreate==true)) lResult=RegCreateKey(HKEY_CURRENT_USER,szFullKeyName,&m_hRegKey);

  000db	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _lResult$[ebp], 0
  000e2	74 28		 je	 SHORT $LN3@OpenRegKey
  000e4	0f b6 45 10	 movzx	 eax, BYTE PTR _bCreate$[ebp]
  000e8	83 f8 01	 cmp	 eax, 1
  000eb	75 1f		 jne	 SHORT $LN3@OpenRegKey
  000ed	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	83 c0 04	 add	 eax, 4
  000f3	50		 push	 eax
  000f4	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szFullKeyName$[ebp]
  000fa	51		 push	 ecx
  000fb	68 01 00 00 80	 push	 -2147483647		; 80000001H
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyA@12
  00106	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lResult$[ebp], eax
$LN3@OpenRegKey:

; 122  : 
; 123  : 	return (lResult==ERROR_SUCCESS);

  0010c	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _lResult$[ebp], 0
  00113	75 0c		 jne	 SHORT $LN7@OpenRegKey
  00115	c7 85 b0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv143[ebp], 1
  0011f	eb 0a		 jmp	 SHORT $LN8@OpenRegKey
$LN7@OpenRegKey:
  00121	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv143[ebp], 0
$LN8@OpenRegKey:
  0012b	8a 85 b0 fe ff
	ff		 mov	 al, BYTE PTR tv143[ebp]

; 124  : }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00137	33 cd		 xor	 ecx, ebp
  00139	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 0c 00	 ret	 12			; 0000000cH
?OpenRegKey@CWHRegKey@@QAE_NPBD0_N@Z ENDP		; CWHRegKey::OpenRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z
_TEXT	SEGMENT
tv136 = -336						; size = 4
_lResult$ = -268					; size = 4
_szFullKeyName$ = -264					; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pszKeyName$ = 8					; size = 4
_bCreate$ = 12						; size = 1
?OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z PROC		; CWHRegKey::OpenRegKey, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 86   : 	//效验参数
; 87   : 	ASSERT(pszKeyName!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pszKeyName$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN5@OpenRegKey
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN5@OpenRegKey
  00036	cc		 int	 3
$LN5@OpenRegKey:

; 88   : 
; 89   : 	//关闭键项
; 90   : 	if (m_hRegKey!=NULL) RegCloseKey(m_hRegKey);

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003e	74 0d		 je	 SHORT $LN2@OpenRegKey
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00046	51		 push	 ecx
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$LN2@OpenRegKey:

; 91   : 
; 92   : 	//生成键名
; 93   : 	TCHAR szFullKeyName[256]=TEXT("");

  0004d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00052	88 85 f8 fe ff
	ff		 mov	 BYTE PTR _szFullKeyName$[ebp], al
  00058	68 ff 00 00 00	 push	 255			; 000000ffH
  0005d	6a 00		 push	 0
  0005f	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _szFullKeyName$[ebp+1]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 94   : 	_sntprintf_s(szFullKeyName,CountArray(szFullKeyName),TEXT("Software\\%s\\%s\\%s"),szProductKey,m_szMainKeyName,pszKeyName);

  0006e	8b 45 08	 mov	 eax, DWORD PTR _pszKeyName$[ebp]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ?m_szMainKeyName@CWHRegKey@@1PADA ; CWHRegKey::m_szMainKeyName
  00077	68 00 00 00 00	 push	 OFFSET ?szProductKey@@3QBDB
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PPFGGFLE@Software?2?$CFs?2?$CFs?2?$CFs@
  00081	68 00 01 00 00	 push	 256			; 00000100H
  00086	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szFullKeyName$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ; _snprintf_s<256>
  00092	83 c4 18	 add	 esp, 24			; 00000018H

; 95   : 
; 96   : 	//打开键项
; 97   : 	m_hRegKey=NULL;

  00095	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00098	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 98   : 	LONG lResult=RegOpenKey(HKEY_CURRENT_USER,szFullKeyName,&m_hRegKey);

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	83 c0 04	 add	 eax, 4
  000a5	50		 push	 eax
  000a6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szFullKeyName$[ebp]
  000ac	51		 push	 ecx
  000ad	68 01 00 00 80	 push	 -2147483647		; 80000001H
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyA@12
  000b8	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lResult$[ebp], eax

; 99   : 	if ((lResult!=ERROR_SUCCESS)&&(bCreate==true)) lResult=RegCreateKey(HKEY_CURRENT_USER,szFullKeyName,&m_hRegKey);

  000be	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _lResult$[ebp], 0
  000c5	74 28		 je	 SHORT $LN3@OpenRegKey
  000c7	0f b6 45 0c	 movzx	 eax, BYTE PTR _bCreate$[ebp]
  000cb	83 f8 01	 cmp	 eax, 1
  000ce	75 1f		 jne	 SHORT $LN3@OpenRegKey
  000d0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	83 c0 04	 add	 eax, 4
  000d6	50		 push	 eax
  000d7	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szFullKeyName$[ebp]
  000dd	51		 push	 ecx
  000de	68 01 00 00 80	 push	 -2147483647		; 80000001H
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCreateKeyA@12
  000e9	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _lResult$[ebp], eax
$LN3@OpenRegKey:

; 100  : 
; 101  : 	return (lResult==ERROR_SUCCESS);

  000ef	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _lResult$[ebp], 0
  000f6	75 0c		 jne	 SHORT $LN6@OpenRegKey
  000f8	c7 85 b0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv136[ebp], 1
  00102	eb 0a		 jmp	 SHORT $LN7@OpenRegKey
$LN6@OpenRegKey:
  00104	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv136[ebp], 0
$LN7@OpenRegKey:
  0010e	8a 85 b0 fe ff
	ff		 mov	 al, BYTE PTR tv136[ebp]

; 102  : }

  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011a	33 cd		 xor	 ecx, ebp
  0011c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 08 00	 ret	 8
?OpenRegKey@CWHRegKey@@QAE_NPBD_N@Z ENDP		; CWHRegKey::OpenRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?CloseRegKey@CWHRegKey@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseRegKey@CWHRegKey@@QAE_NXZ PROC			; CWHRegKey::CloseRegKey, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	//关闭键项
; 75   : 	RegCloseKey(m_hRegKey);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	51		 push	 ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 76   : 
; 77   : 	//设置变量
; 78   : 	m_hRegKey=NULL;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 79   : 
; 80   : 	return true;

  00023	b0 01		 mov	 al, 1

; 81   : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?CloseRegKey@CWHRegKey@@QAE_NXZ ENDP			; CWHRegKey::CloseRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?Attach@CWHRegKey@@QAEPAUHKEY__@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hRegKey$ = 8						; size = 4
?Attach@CWHRegKey@@QAEPAUHKEY__@@PAU2@@Z PROC		; CWHRegKey::Attach, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	//效验参数
; 63   : 	ASSERT(hRegKey!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _hRegKey$[ebp], 0
  00010	75 18		 jne	 SHORT $LN3@Attach
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??Attach@CWHRegKey@@QAEPAUHKEY__@@PAU3@@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN3@Attach
  00029	cc		 int	 3
$LN3@Attach:

; 64   : 
; 65   : 	//设置变量
; 66   : 	m_hRegKey=hRegKey;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _hRegKey$[ebp]
  00030	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 67   : 
; 68   : 	return m_hRegKey;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 69   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Attach@CWHRegKey@@QAEPAUHKEY__@@PAU2@@Z ENDP		; CWHRegKey::Attach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?Detach@CWHRegKey@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT
_hRegKey$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@CWHRegKey@@QAEPAUHKEY__@@XZ PROC		; CWHRegKey::Detach, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	//保存变量
; 51   : 	HKEY hRegKey=m_hRegKey;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d f8	 mov	 DWORD PTR _hRegKey$[ebp], ecx

; 52   : 
; 53   : 	//设置变量
; 54   : 	m_hRegKey=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 55   : 
; 56   : 	return hRegKey;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _hRegKey$[ebp]

; 57   : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Detach@CWHRegKey@@QAEPAUHKEY__@@XZ ENDP		; CWHRegKey::Detach
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.h
;	COMDAT ?GetMainKeyName@CWHRegKey@@SAPBDXZ
_TEXT	SEGMENT
?GetMainKeyName@CWHRegKey@@SAPBDXZ PROC			; CWHRegKey::GetMainKeyName, COMDAT

; 33   : 	static LPCTSTR GetMainKeyName() { return m_szMainKeyName; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?m_szMainKeyName@CWHRegKey@@1PADA ; CWHRegKey::m_szMainKeyName
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetMainKeyName@CWHRegKey@@SAPBDXZ ENDP			; CWHRegKey::GetMainKeyName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?SetMainKeyName@CWHRegKey@@SAXPBD@Z
_TEXT	SEGMENT
_pszMainKeyName$ = 8					; size = 4
?SetMainKeyName@CWHRegKey@@SAXPBD@Z PROC		; CWHRegKey::SetMainKeyName, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 40   : 	//设置变量
; 41   : 	ASSERT(pszMainKeyName!=NULL);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pszMainKeyName$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN3@SetMainKey
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SetMainKeyName@CWHRegKey@@SAXPBD@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CBEPACCF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00022	85 c0		 test	 eax, eax
  00024	74 01		 je	 SHORT $LN3@SetMainKey
  00026	cc		 int	 3
$LN3@SetMainKey:

; 42   : 	lstrcpyn(m_szMainKeyName,pszMainKeyName,CountArray(m_szMainKeyName));

  00027	6a 40		 push	 64			; 00000040H
  00029	8b 45 08	 mov	 eax, DWORD PTR _pszMainKeyName$[ebp]
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ?m_szMainKeyName@CWHRegKey@@1PADA ; CWHRegKey::m_szMainKeyName
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 43   : 
; 44   : 	return;
; 45   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?SetMainKeyName@CWHRegKey@@SAXPBD@Z ENDP		; CWHRegKey::SetMainKeyName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ??1CWHRegKey@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CWHRegKey@@UAE@XZ PROC				; CWHRegKey::~CWHRegKey, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CWHRegKey@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHRegKey@@6B@

; 31   : 	//关闭键项
; 32   : 	if (m_hRegKey!=NULL) CloseRegKey();

  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003b	74 08		 je	 SHORT $LN3@CWHRegKey
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?CloseRegKey@CWHRegKey@@QAE_NXZ ; CWHRegKey::CloseRegKey
$LN3@CWHRegKey:

; 33   : 
; 34   : 	return;
; 35   : }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CWHRegKey@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CWHRegKey@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CWHRegKey@@UAE@XZ ENDP				; CWHRegKey::~CWHRegKey
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ??0CWHRegKey@@QAE@XZ
_TEXT	SEGMENT
_pWinApp$1 = -8						; size = 4
_this$ = -4						; size = 4
??0CWHRegKey@@QAE@XZ PROC				; CWHRegKey::CWHRegKey, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHRegKey@@6B@

; 15   : 	//键项变量
; 16   : 	m_hRegKey=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 17   : 
; 18   : 	//键名变量
; 19   : 	if (m_szMainKeyName[0]==0)

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	6b c8 00	 imul	 ecx, eax, 0
  00027	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR ?m_szMainKeyName@CWHRegKey@@1PADA[ecx]
  0002e	85 d2		 test	 edx, edx
  00030	75 1c		 jne	 SHORT $LN1@CWHRegKey

; 20   : 	{
; 21   : 		CWinApp * pWinApp=AfxGetApp();

  00032	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  00037	89 45 f8	 mov	 DWORD PTR _pWinApp$1[ebp], eax

; 22   : 		lstrcpyn(m_szMainKeyName,pWinApp->m_pszAppName,CountArray(m_szMainKeyName));

  0003a	6a 40		 push	 64			; 00000040H
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _pWinApp$1[ebp]
  0003f	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00042	51		 push	 ecx
  00043	68 00 00 00 00	 push	 OFFSET ?m_szMainKeyName@CWHRegKey@@1PADA ; CWHRegKey::m_szMainKeyName
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
$LN1@CWHRegKey:

; 23   : 	}
; 24   : 
; 25   : 	return;
; 26   : }

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??0CWHRegKey@@QAE@XZ ENDP				; CWHRegKey::CWHRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1605 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __vsnprintf_s_l
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 1607 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1584 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1585 :         int const _Result = __stdio_common_vsnprintf_s(

  00009	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00033	83 c4 20	 add	 esp, 32			; 00000020H
  00036	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;

  00039	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003d	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003f	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00046	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00048	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004b	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004e	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1590 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whregkey.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
