; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHBase64.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?alph@@3QB_WB DW 041H					; alph
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	02bH
	DW	02fH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	__vscprintf_l
PUBLIC	__vscprintf
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	?AtlThrowLastWin32@ATL@@YGXXZ			; ATL::AtlThrowLastWin32
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
PUBLIC	?GetCategoryName@CTrace@ATL@@CAPA_WI@Z		; ATL::CTrace::GetCategoryName
PUBLIC	?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z		; ATL::CTrace::TraceV
PUBLIC	?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z		; ATL::CTrace::TraceV
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	??0CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::CPreserveLastError
PUBLIC	??1CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::~CPreserveLastError
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z		; ATL::CW2AEX<128>::CW2AEX<128>
PUBLIC	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ			; ATL::CW2AEX<128>::~CW2AEX<128>
PUBLIC	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ			; ATL::CW2AEX<128>::operator char *
PUBLIC	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z		; ATL::CW2AEX<128>::Init
PUBLIC	??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z		; ATL::AtlConvFreeMemory<char>
PUBLIC	??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z	; ATL::AtlConvAllocMemory<char>
PUBLIC	??0CWHBase64@@QAE@XZ				; CWHBase64::CWHBase64
PUBLIC	??1CWHBase64@@UAE@XZ				; CWHBase64::~CWHBase64
PUBLIC	?Encode@CWHBase64@@SAHPBDHQADH@Z		; CWHBase64::Encode
PUBLIC	?Decode@CWHBase64@@SAHPBDHQADH@Z		; CWHBase64::Decode
PUBLIC	??0CWHBase64@@QAE@ABV0@@Z			; CWHBase64::CWHBase64
PUBLIC	??4CWHBase64@@QAEAAV0@ABV0@@Z			; CWHBase64::operator=
PUBLIC	??_GCWHBase64@@UAEPAXI@Z			; CWHBase64::`scalar deleting destructor'
PUBLIC	??_ECWHBase64@@UAEPAXI@Z			; CWHBase64::`vector deleting destructor'
PUBLIC	?GetCodeLength@@YAHH@Z				; GetCodeLength
PUBLIC	??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z		; ATL::CA2WEX<128>::CA2WEX<128>
PUBLIC	??1?$CA2WEX@$0IA@@ATL@@QAE@XZ			; ATL::CA2WEX<128>::~CA2WEX<128>
PUBLIC	??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ		; ATL::CA2WEX<128>::operator wchar_t *
PUBLIC	?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z		; ATL::CA2WEX<128>::Init
PUBLIC	??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z	; ATL::AtlConvFreeMemory<wchar_t>
PUBLIC	??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z	; ATL::AtlConvAllocMemory<wchar_t>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException@		; `string'
PUBLIC	?m_nLevel@CTrace@ATL@@1IA			; ATL::CTrace::m_nLevel
PUBLIC	?m_nCategory@CTrace@ATL@@1IA			; ATL::CTrace::m_nCategory
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ ; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
PUBLIC	??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ ; `string'
PUBLIC	??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_7CWHBase64@@6B@				; CWHBase64::`vftable'
PUBLIC	?__LINE__Var@?0??Encode@CWHBase64@@SAHPBDHQADH@Z@4JA ; `CWHBase64::Encode'::`1'::__LINE__Var
PUBLIC	??_C@_0ED@MDAPINED@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??Decode@CWHBase64@@SAHPBDHQADH@Z@4JA ; `CWHBase64::Decode'::`1'::__LINE__Var
PUBLIC	??_R4CWHBase64@@6B@				; CWHBase64::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHBase64@@@8				; CWHBase64 `RTTI Type Descriptor'
PUBLIC	??_R3CWHBase64@@8				; CWHBase64::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHBase64@@8				; CWHBase64::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHBase64@@8			; CWHBase64::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___recalloc:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLevel@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLevel@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLevel
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHBase64@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHBase64@@8 DD FLAT:??_R0?AVCWHBase64@@@8 ; CWHBase64::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHBase64@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHBase64@@8
rdata$r	SEGMENT
??_R2CWHBase64@@8 DD FLAT:??_R1A@?0A@EA@CWHBase64@@8	; CWHBase64::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHBase64@@8
rdata$r	SEGMENT
??_R3CWHBase64@@8 DD 00H				; CWHBase64::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHBase64@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHBase64@@@8
data$r	SEGMENT
??_R0?AVCWHBase64@@@8 DD FLAT:??_7type_info@@6B@	; CWHBase64 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHBase64@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHBase64@@6B@
rdata$r	SEGMENT
??_R4CWHBase64@@6B@ DD 00H				; CWHBase64::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHBase64@@@8
	DD	FLAT:??_R3CWHBase64@@8
rdata$r	ENDS
;	COMDAT ?__LINE__Var@?0??Decode@CWHBase64@@SAHPBDHQADH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Decode@CWHBase64@@SAHPBDHQADH@Z@4JA DD 06fH ; `CWHBase64::Decode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0ED@MDAPINED@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0ED@MDAPINED@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0baH, 0cbH, 0d0H, 0c4H, '\whbase64.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Encode@CWHBase64@@SAHPBDHQADH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Encode@CWHBase64@@SAHPBDHQADH@Z@4JA DD 036H ; `CWHBase64::Encode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CWHBase64@@6B@
CONST	SEGMENT
??_7CWHBase64@@6B@ DD FLAT:??_R4CWHBase64@@6B@		; CWHBase64::`vftable'
	DD	FLAT:??_ECWHBase64@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ DB '_'
	DB	00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
CONST	SEGMENT
??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ DB 'AtlThrow: hr = 0x'
	DB	'%x', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\atlexcept.h', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA DD 041H	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H
	DB	's', 00H, '%', 00H, 'l', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'u', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '-', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?m_nCategory@CTrace@ATL@@1IA
_DATA	SEGMENT
?m_nCategory@CTrace@ATL@@1IA DD 0ffffffffH		; ATL::CTrace::m_nCategory
_DATA	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'v', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHBase64@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Decode@CWHBase64@@SAHPBDHQADH@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Decode@CWHBase64@@SAHPBDHQADH@Z$0
__tryblocktable$?Decode@CWHBase64@@SAHPBDHQADH@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?Decode@CWHBase64@@SAHPBDHQADH@Z$4
__unwindtable$?Decode@CWHBase64@@SAHPBDHQADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Decode@CWHBase64@@SAHPBDHQADH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?Decode@CWHBase64@@SAHPBDHQADH@Z$3
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?Decode@CWHBase64@@SAHPBDHQADH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Decode@CWHBase64@@SAHPBDHQADH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Decode@CWHBase64@@SAHPBDHQADH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Encode@CWHBase64@@SAHPBDHQADH@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Encode@CWHBase64@@SAHPBDHQADH@Z$0
__tryblocktable$?Encode@CWHBase64@@SAHPBDHQADH@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Encode@CWHBase64@@SAHPBDHQADH@Z$3
__unwindtable$?Encode@CWHBase64@@SAHPBDHQADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Encode@CWHBase64@@SAHPBDHQADH@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?Encode@CWHBase64@@SAHPBDHQADH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Encode@CWHBase64@@SAHPBDHQADH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Encode@CWHBase64@@SAHPBDHQADH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0
__ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1
__ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z
_TEXT	SEGMENT
tv129 = -84						; size = 4
tv81 = -84						; size = 4
tv65 = -84						; size = 4
_ppReallocBuf$1 = -16					; size = 4
___atl_condVal$2 = -12					; size = 4
___atl_condVal$3 = -8					; size = 4
___atl_condVal$4 = -4					; size = 4
_ppBuff$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pszFixedBuffer$ = 16					; size = 4
_nFixedBufferLength$ = 20				; size = 4
??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z PROC	; ATL::AtlConvAllocMemory<wchar_t>, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@AtlConvAll:

; 113  : 	ATLENSURE_THROW(ppBuff != NULL, E_INVALIDARG);

  00009	83 7d 08 00	 cmp	 DWORD PTR _ppBuff$[ebp], 0
  0000d	74 09		 je	 SHORT $LN32@AtlConvAll
  0000f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00016	eb 07		 jmp	 SHORT $LN33@AtlConvAll
$LN32@AtlConvAll:
  00018	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN33@AtlConvAll:
  0001f	8b 45 ac	 mov	 eax, DWORD PTR tv65[ebp]
  00022	89 45 fc	 mov	 DWORD PTR ___atl_condVal$4[ebp], eax
$LN7@AtlConvAll:
  00025	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00029	75 24		 jne	 SHORT $LN5@AtlConvAll
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00035	6a 00		 push	 0
  00037	6a 71		 push	 113			; 00000071H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0003e	6a 02		 push	 2
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	83 f8 01	 cmp	 eax, 1
  0004c	75 01		 jne	 SHORT $LN5@AtlConvAll
  0004e	cc		 int	 3
$LN5@AtlConvAll:
  0004f	33 c0		 xor	 eax, eax
  00051	75 d2		 jne	 SHORT $LN7@AtlConvAll
  00053	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00057	75 0a		 jne	 SHORT $LN2@AtlConvAll
  00059	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0005e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@AtlConvAll:
  00063	33 c0		 xor	 eax, eax
  00065	75 a2		 jne	 SHORT $LN4@AtlConvAll
$LN10@AtlConvAll:

; 114  : 	ATLENSURE_THROW(nLength >= 0, E_INVALIDARG);

  00067	83 7d 0c 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0006b	7c 09		 jl	 SHORT $LN35@AtlConvAll
  0006d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN36@AtlConvAll
$LN35@AtlConvAll:
  00076	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN36@AtlConvAll:
  0007d	8b 45 ac	 mov	 eax, DWORD PTR tv81[ebp]
  00080	89 45 f8	 mov	 DWORD PTR ___atl_condVal$3[ebp], eax
$LN13@AtlConvAll:
  00083	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  00087	75 24		 jne	 SHORT $LN11@AtlConvAll
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00093	6a 00		 push	 0
  00095	6a 72		 push	 114			; 00000072H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0009c	6a 02		 push	 2
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000a4	83 c4 18	 add	 esp, 24			; 00000018H
  000a7	83 f8 01	 cmp	 eax, 1
  000aa	75 01		 jne	 SHORT $LN11@AtlConvAll
  000ac	cc		 int	 3
$LN11@AtlConvAll:
  000ad	33 c0		 xor	 eax, eax
  000af	75 d2		 jne	 SHORT $LN13@AtlConvAll
  000b1	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  000b5	75 0a		 jne	 SHORT $LN8@AtlConvAll
  000b7	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000bc	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@AtlConvAll:
  000c1	33 c0		 xor	 eax, eax
  000c3	75 a2		 jne	 SHORT $LN10@AtlConvAll
$LN16@AtlConvAll:

; 115  : 	ATLENSURE_THROW(pszFixedBuffer != NULL, E_INVALIDARG);

  000c5	83 7d 10 00	 cmp	 DWORD PTR _pszFixedBuffer$[ebp], 0
  000c9	74 09		 je	 SHORT $LN38@AtlConvAll
  000cb	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv129[ebp], 1
  000d2	eb 07		 jmp	 SHORT $LN39@AtlConvAll
$LN38@AtlConvAll:
  000d4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN39@AtlConvAll:
  000db	8b 45 ac	 mov	 eax, DWORD PTR tv129[ebp]
  000de	89 45 f4	 mov	 DWORD PTR ___atl_condVal$2[ebp], eax
$LN19@AtlConvAll:
  000e1	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  000e5	75 24		 jne	 SHORT $LN17@AtlConvAll
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  000f1	6a 00		 push	 0
  000f3	6a 73		 push	 115			; 00000073H
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000fa	6a 02		 push	 2
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00102	83 c4 18	 add	 esp, 24			; 00000018H
  00105	83 f8 01	 cmp	 eax, 1
  00108	75 01		 jne	 SHORT $LN17@AtlConvAll
  0010a	cc		 int	 3
$LN17@AtlConvAll:
  0010b	33 c0		 xor	 eax, eax
  0010d	75 d2		 jne	 SHORT $LN19@AtlConvAll
  0010f	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  00113	75 0a		 jne	 SHORT $LN14@AtlConvAll
  00115	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0011a	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN14@AtlConvAll:
  0011f	33 c0		 xor	 eax, eax
  00121	75 a2		 jne	 SHORT $LN16@AtlConvAll

; 116  : 
; 117  : 	//if buffer malloced, try to realloc.
; 118  : 	if (*ppBuff != pszFixedBuffer)

  00123	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00126	8b 08		 mov	 ecx, DWORD PTR [eax]
  00128	3b 4d 10	 cmp	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0012b	74 53		 je	 SHORT $LN23@AtlConvAll

; 119  : 	{
; 120  : 		if( nLength > nFixedBufferLength )

  0012d	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00130	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00133	7e 32		 jle	 SHORT $LN25@AtlConvAll

; 121  : 		{
; 122  : 			_CharType* ppReallocBuf = static_cast< _CharType* >( _recalloc(*ppBuff, nLength,sizeof( _CharType ) ) );

  00135	6a 02		 push	 2
  00137	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0013e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00140	52		 push	 edx
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___recalloc
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014a	89 45 f0	 mov	 DWORD PTR _ppReallocBuf$1[ebp], eax

; 123  : 			if (ppReallocBuf == NULL)

  0014d	83 7d f0 00	 cmp	 DWORD PTR _ppReallocBuf$1[ebp], 0
  00151	75 0a		 jne	 SHORT $LN27@AtlConvAll

; 124  : 			{
; 125  : 				AtlThrow( E_OUTOFMEMORY );

  00153	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00158	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN27@AtlConvAll:

; 126  : 			}
; 127  : 			*ppBuff = ppReallocBuf;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00160	8b 4d f0	 mov	 ecx, DWORD PTR _ppReallocBuf$1[ebp]
  00163	89 08		 mov	 DWORD PTR [eax], ecx

; 128  : 		} else

  00165	eb 17		 jmp	 SHORT $LN26@AtlConvAll
$LN25@AtlConvAll:

; 129  : 		{
; 130  : 			free(*ppBuff);

  00167	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	51		 push	 ecx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00173	83 c4 04	 add	 esp, 4

; 131  : 			*ppBuff=pszFixedBuffer;

  00176	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00179	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0017c	89 08		 mov	 DWORD PTR [eax], ecx
$LN26@AtlConvAll:

; 132  : 		}
; 133  : 
; 134  : 	} else //Buffer is not currently malloced.

  0017e	eb 26		 jmp	 SHORT $LN24@AtlConvAll
$LN23@AtlConvAll:

; 135  : 	{
; 136  : 		if( nLength > nFixedBufferLength )

  00180	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00183	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00186	7e 16		 jle	 SHORT $LN28@AtlConvAll

; 137  : 		{
; 138  : 			*ppBuff = static_cast< _CharType* >( calloc(nLength,sizeof( _CharType ) ) );

  00188	6a 02		 push	 2
  0018a	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0018d	50		 push	 eax
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00194	83 c4 08	 add	 esp, 8
  00197	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0019a	89 01		 mov	 DWORD PTR [ecx], eax

; 139  : 		} else

  0019c	eb 08		 jmp	 SHORT $LN24@AtlConvAll
$LN28@AtlConvAll:

; 140  : 		{
; 141  : 			*ppBuff=pszFixedBuffer;

  0019e	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a1	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  001a4	89 08		 mov	 DWORD PTR [eax], ecx
$LN24@AtlConvAll:

; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	if (*ppBuff == NULL)

  001a6	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a9	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ac	75 0a		 jne	 SHORT $LN31@AtlConvAll

; 146  : 	{
; 147  : 		AtlThrow( E_OUTOFMEMORY );

  001ae	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  001b3	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN31@AtlConvAll:

; 148  : 	}
; 149  : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z ENDP	; ATL::AtlConvAllocMemory<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z
_TEXT	SEGMENT
_pBuff$ = 8						; size = 4
_pszFixedBuffer$ = 12					; size = 4
_nFixedBufferLength$ = 16				; size = 4
??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z PROC		; ATL::AtlConvFreeMemory<wchar_t>, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 	(nFixedBufferLength);
; 158  : 	if( pBuff != pszFixedBuffer )

  00009	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR _pszFixedBuffer$[ebp]
  0000f	74 0f		 je	 SHORT $LN2@AtlConvFre

; 159  : 	{
; 160  : 		free( pBuff );

  00011	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001b	83 c4 04	 add	 esp, 4

; 161  : 	}
; 162  : #ifdef _DEBUG
; 163  : 	else

  0001e	eb 17		 jmp	 SHORT $LN1@AtlConvFre
$LN2@AtlConvFre:

; 164  : 	{
; 165  : 		memset(pszFixedBuffer,ATLCONV_DEADLAND_FILL,nFixedBufferLength*sizeof(_CharType));

  00020	8b 45 10	 mov	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00023	d1 e0		 shl	 eax, 1
  00025	50		 push	 eax
  00026	68 fe 00 00 00	 push	 254			; 000000feH
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@AtlConvFre:

; 166  : 	}
; 167  : #endif
; 168  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z ENDP		; ATL::AtlConvFreeMemory<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z
_TEXT	SEGMENT
tv142 = -84						; size = 4
tv84 = -84						; size = 4
_bFailed$ = -16						; size = 4
_nLengthW$ = -12					; size = 4
_nLengthA$ = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
_nCodePage$ = 12					; size = 4
?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z PROC		; ATL::CA2WEX<128>::Init, COMDAT
; _this$ = ecx

; 369  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 		if (psz == NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00010	75 0e		 jne	 SHORT $LN2@Init

; 371  : 		{
; 372  : 			m_psz = NULL;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 373  : 			return;

  0001b	e9 11 01 00 00	 jmp	 $LN6@Init
$LN2@Init:

; 374  : 		}
; 375  : 		int nLengthA = static_cast<int>(strlen( psz ))+1;

  00020	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _strlen
  00029	83 c4 04	 add	 esp, 4
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 45 f8	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 376  : 		int nLengthW = nLengthA;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00035	89 45 f4	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 377  : 
; 378  : 		AtlConvAllocMemory(&m_psz,nLengthW,m_szBuffer,t_nBufferLength);

  00038	68 80 00 00 00	 push	 128			; 00000080H
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 c0 04	 add	 eax, 4
  00043	50		 push	 eax
  00044	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthW$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z ; ATL::AtlConvAllocMemory<wchar_t>
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 379  : 
; 380  : 		BOOL bFailed=(0 == ::MultiByteToWideChar( nCodePage, 0, psz, nLengthA, m_psz, nLengthW ) );

  00054	8b 45 f4	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  00057	50		 push	 eax
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	52		 push	 edx
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00065	51		 push	 ecx
  00066	6a 00		 push	 0
  00068	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  0006b	52		 push	 edx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00072	85 c0		 test	 eax, eax
  00074	75 09		 jne	 SHORT $LN7@Init
  00076	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  0007d	eb 07		 jmp	 SHORT $LN8@Init
$LN7@Init:
  0007f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN8@Init:
  00086	8b 45 ac	 mov	 eax, DWORD PTR tv84[ebp]
  00089	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax

; 381  : 		if (bFailed)

  0008c	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00090	74 7a		 je	 SHORT $LN3@Init

; 382  : 		{
; 383  : 			if (GetLastError()==ERROR_INSUFFICIENT_BUFFER)

  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00098	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0009b	75 6f		 jne	 SHORT $LN3@Init

; 384  : 			{
; 385  : 				nLengthW = ::MultiByteToWideChar( nCodePage, 0, psz, nLengthA, NULL, 0);

  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000a8	51		 push	 ecx
  000a9	6a 00		 push	 0
  000ab	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  000ae	52		 push	 edx
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  000b5	89 45 f4	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 386  : ATLPREFAST_SUPPRESS(6102)
; 387  : 				AtlConvAllocMemory(&m_psz,nLengthW,m_szBuffer,t_nBufferLength);

  000b8	68 80 00 00 00	 push	 128			; 00000080H
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	83 c0 04	 add	 eax, 4
  000c3	50		 push	 eax
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthW$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	52		 push	 edx
  000cc	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z ; ATL::AtlConvAllocMemory<wchar_t>
  000d1	83 c4 10	 add	 esp, 16			; 00000010H

; 388  : ATLPREFAST_UNSUPPRESS()
; 389  : 				bFailed=(0 == ::MultiByteToWideChar( nCodePage, 0, psz, nLengthA, m_psz, nLengthW ) );

  000d4	8b 45 f4	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dd	52		 push	 edx
  000de	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000e5	51		 push	 ecx
  000e6	6a 00		 push	 0
  000e8	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  000eb	52		 push	 edx
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  000f2	85 c0		 test	 eax, eax
  000f4	75 09		 jne	 SHORT $LN9@Init
  000f6	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv142[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN10@Init
$LN9@Init:
  000ff	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN10@Init:
  00106	8b 45 ac	 mov	 eax, DWORD PTR tv142[ebp]
  00109	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax
$LN3@Init:

; 390  : 			}
; 391  : 		}
; 392  : 		if (bFailed)

  0010c	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00110	74 1f		 je	 SHORT $LN6@Init

; 393  : 		{
; 394  : 			AtlConvFreeMemory(m_psz, m_szBuffer, t_nBufferLength);

  00112	68 80 00 00 00	 push	 128			; 00000080H
  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	83 c0 04	 add	 eax, 4
  0011d	50		 push	 eax
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	8b 11		 mov	 edx, DWORD PTR [ecx]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z ; ATL::AtlConvFreeMemory<wchar_t>
  00129	83 c4 0c	 add	 esp, 12			; 0000000cH

; 395  : 			AtlThrowLastWin32();

  0012c	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$LN6@Init:

; 396  : 		}
; 397  : 	}

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z ENDP		; ATL::CA2WEX<128>::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ PROC			; ATL::CA2WEX<128>::operator wchar_t *, COMDAT
; _this$ = ecx

; 361  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 362  : 		return( m_psz );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 363  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ENDP			; ATL::CA2WEX<128>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CA2WEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CA2WEX<128>::~CA2WEX<128>, COMDAT
; _this$ = ecx

; 356  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 		AtlConvFreeMemory(m_psz,m_szBuffer,t_nBufferLength);

  0000c	68 80 00 00 00	 push	 128			; 00000080H
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z ; ATL::AtlConvFreeMemory<wchar_t>
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 358  : 	}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CA2WEX<128>::~CA2WEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z PROC			; ATL::CA2WEX<128>::CA2WEX<128>, COMDAT
; _this$ = ecx

; 345  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  : 		m_psz( m_szBuffer )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 346  : 		Init( psz, _AtlGetConversionACP() );

  00017	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  0001c	50		 push	 eax
  0001d	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z ; ATL::CA2WEX<128>::Init

; 347  : 	}

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z ENDP			; ATL::CA2WEX<128>::CA2WEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whbase64.cpp
;	COMDAT ?GetCodeLength@@YAHH@Z
_TEXT	SEGMENT
tv68 = -72						; size = 4
_len$ = -4						; size = 4
_nDataLength$ = 8					; size = 4
?GetCodeLength@@YAHH@Z PROC				; GetCodeLength, COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 36   : 	int len=nDataLength+nDataLength/3 + (int)(nDataLength%3!=0);

  00009	8b 45 08	 mov	 eax, DWORD PTR _nDataLength$[ebp]
  0000c	99		 cdq
  0000d	b9 03 00 00 00	 mov	 ecx, 3
  00012	f7 f9		 idiv	 ecx
  00014	85 d2		 test	 edx, edx
  00016	74 09		 je	 SHORT $LN4@GetCodeLen
  00018	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0001f	eb 07		 jmp	 SHORT $LN5@GetCodeLen
$LN4@GetCodeLen:
  00021	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN5@GetCodeLen:
  00028	8b 45 08	 mov	 eax, DWORD PTR _nDataLength$[ebp]
  0002b	99		 cdq
  0002c	b9 03 00 00 00	 mov	 ecx, 3
  00031	f7 f9		 idiv	 ecx
  00033	03 45 08	 add	 eax, DWORD PTR _nDataLength$[ebp]
  00036	03 45 b8	 add	 eax, DWORD PTR tv68[ebp]
  00039	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax

; 37   : 	if (len % 4) len += 4-len%4;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  0003f	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00044	79 05		 jns	 SHORT $LN6@GetCodeLen
  00046	48		 dec	 eax
  00047	83 c8 fc	 or	 eax, -4			; fffffffcH
  0004a	40		 inc	 eax
$LN6@GetCodeLen:
  0004b	85 c0		 test	 eax, eax
  0004d	74 1c		 je	 SHORT $LN2@GetCodeLen
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
  00052	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00057	79 05		 jns	 SHORT $LN7@GetCodeLen
  00059	48		 dec	 eax
  0005a	83 c8 fc	 or	 eax, -4			; fffffffcH
  0005d	40		 inc	 eax
$LN7@GetCodeLen:
  0005e	b9 04 00 00 00	 mov	 ecx, 4
  00063	2b c8		 sub	 ecx, eax
  00065	03 4d fc	 add	 ecx, DWORD PTR _len$[ebp]
  00068	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx
$LN2@GetCodeLen:

; 38   : 	return len;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]

; 39   : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?GetCodeLength@@YAHH@Z ENDP				; GetCodeLength
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHBase64@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHBase64@@UAEPAXI@Z PROC				; CWHBase64::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHBase64@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHBase64@@UAE@XZ ; CWHBase64::~CWHBase64
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 04		 push	 4
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CWHBase64@@UAE@XZ	; CWHBase64::~CWHBase64
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 04		 push	 4
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHBase64@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHBase64@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHBase64@@UAEPAXI@Z ENDP				; CWHBase64::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHBase64@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHBase64@@UAEPAXI@Z PROC				; CWHBase64::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHBase64@@UAE@XZ	; CWHBase64::~CWHBase64
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHBase64@@UAEPAXI@Z ENDP				; CWHBase64::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHBase64@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHBase64@@QAEAAV0@ABV0@@Z PROC			; CWHBase64::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??4CWHBase64@@QAEAAV0@ABV0@@Z ENDP			; CWHBase64::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHBase64@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHBase64@@QAE@ABV0@@Z PROC				; CWHBase64::CWHBase64, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHBase64@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0CWHBase64@@QAE@ABV0@@Z ENDP				; CWHBase64::CWHBase64
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whbase64.cpp
;	COMDAT ?Decode@CWHBase64@@SAHPBDHQADH@Z
_TEXT	SEGMENT
$T2 = -516						; size = 4
$T3 = -512						; size = 4
$T4 = -508						; size = 4
_pszBuffer$ = -440					; size = 132
_x$5 = -308						; size = 2
_m$6 = -304						; size = 4
_val$7 = -300						; size = 4
_i$8 = -296						; size = 4
_j$ = -292						; size = 4
_pOutData$ = -288					; size = 4
_pinCode$ = -284					; size = 260
_buffer$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pszCode$ = 8						; size = 4
_nCodeLength$ = 12					; size = 4
_szOutBuffer$ = 16					; size = 4
_nBufferLen$ = 20					; size = 4
?Decode@CWHBase64@@SAHPBDHQADH@Z PROC			; CWHBase64::Decode, COMDAT

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Decode@CWHBase64@@SAHPBDHQADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec f4 01 00
	00		 sub	 esp, 500		; 000001f4H
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 112  : 	unBuffer buffer;
; 113  : 	buffer.block = 0;

  00032	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _buffer$[ebp], 0

; 114  : 
; 115  : 	//类型转换
; 116  : 	CT2CW pinCode(pszCode);

  00039	8b 45 08	 mov	 eax, DWORD PTR _pszCode$[ebp]
  0003c	50		 push	 eax
  0003d	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _pinCode$[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z ; ATL::CA2WEX<128>::CA2WEX<128>
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 117  : 	
; 118  : 	//分配内存
; 119  : 	wchar_t * pOutData = new wchar_t[nBufferLen];

  0004f	33 c9		 xor	 ecx, ecx
  00051	8b 45 14	 mov	 eax, DWORD PTR _nBufferLen$[ebp]
  00054	ba 02 00 00 00	 mov	 edx, 2
  00059	f7 e2		 mul	 edx
  0005b	0f 90 c1	 seto	 cl
  0005e	f7 d9		 neg	 ecx
  00060	0b c8		 or	 ecx, eax
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00068	83 c4 04	 add	 esp, 4
  0006b	89 85 04 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00071	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00077	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _pOutData$[ebp], eax

; 120  : 
; 121  : 	int j = 0;

  0007d	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0

; 122  : 	for (int i = 0; i < nCodeLength; i++)

  00087	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$8[ebp], 0
  00091	eb 0f		 jmp	 SHORT $LN4@Decode
$LN2@Decode:
  00093	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$8[ebp]
  00099	83 c0 01	 add	 eax, 1
  0009c	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _i$8[ebp], eax
$LN4@Decode:
  000a2	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$8[ebp]
  000a8	3b 45 0c	 cmp	 eax, DWORD PTR _nCodeLength$[ebp]
  000ab	0f 8d 16 02 00
	00		 jge	 $LN3@Decode

; 123  : 	{
; 124  : 		int val = 0;

  000b1	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _val$7[ebp], 0

; 125  : 		int m = i % 4;

  000bb	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _i$8[ebp]
  000c1	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000c6	79 05		 jns	 SHORT $LN34@Decode
  000c8	48		 dec	 eax
  000c9	83 c8 fc	 or	 eax, -4			; fffffffcH
  000cc	40		 inc	 eax
$LN34@Decode:
  000cd	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _m$6[ebp], eax

; 126  : 		wchar_t x = pinCode[i];		

  000d3	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _pinCode$[ebp]
  000d9	e8 00 00 00 00	 call	 ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ; ATL::CA2WEX<128>::operator wchar_t *
  000de	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _i$8[ebp]
  000e4	66 8b 14 48	 mov	 dx, WORD PTR [eax+ecx*2]
  000e8	66 89 95 cc fe
	ff ff		 mov	 WORD PTR _x$5[ebp], dx

; 127  : 
; 128  : 		if( x >= 'A' && x <= 'Z' )

  000ef	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  000f6	83 f8 41	 cmp	 eax, 65			; 00000041H
  000f9	7c 21		 jl	 SHORT $LN5@Decode
  000fb	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  00102	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  00105	7f 15		 jg	 SHORT $LN5@Decode

; 129  : 			val = x - 'A';

  00107	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  0010e	83 e8 41	 sub	 eax, 65			; 00000041H
  00111	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _val$7[ebp], eax
  00117	e9 82 00 00 00	 jmp	 $LN6@Decode
$LN5@Decode:

; 130  : 		else if( x >= 'a' && x <= 'z' )

  0011c	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  00123	83 f8 61	 cmp	 eax, 97			; 00000061H
  00126	7c 1e		 jl	 SHORT $LN7@Decode
  00128	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  0012f	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00132	7f 12		 jg	 SHORT $LN7@Decode

; 131  : 			val = x - 'a' + 'Z' - 'A' + 1;

  00134	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  0013b	83 e8 47	 sub	 eax, 71			; 00000047H
  0013e	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _val$7[ebp], eax
  00144	eb 58		 jmp	 SHORT $LN6@Decode
$LN7@Decode:

; 132  : 		else if( x >= '0' && x <= '9' )

  00146	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  0014d	83 f8 30	 cmp	 eax, 48			; 00000030H
  00150	7c 1e		 jl	 SHORT $LN9@Decode
  00152	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  00159	83 f8 39	 cmp	 eax, 57			; 00000039H
  0015c	7f 12		 jg	 SHORT $LN9@Decode

; 133  : 			val = x - '0' + ( 'Z' - 'A' + 1 ) * 2;

  0015e	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  00165	83 c0 04	 add	 eax, 4
  00168	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _val$7[ebp], eax
  0016e	eb 2e		 jmp	 SHORT $LN6@Decode
$LN9@Decode:

; 134  : 		else if( x == CHAR_63 )

  00170	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  00177	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0017a	75 0c		 jne	 SHORT $LN11@Decode

; 135  : 			val = 62;

  0017c	c7 85 d4 fe ff
	ff 3e 00 00 00	 mov	 DWORD PTR _val$7[ebp], 62 ; 0000003eH
  00186	eb 16		 jmp	 SHORT $LN6@Decode
$LN11@Decode:

; 136  : 		else if( x == CHAR_64 )

  00188	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  0018f	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00192	75 0a		 jne	 SHORT $LN6@Decode

; 137  : 			val = 63;

  00194	c7 85 d4 fe ff
	ff 3f 00 00 00	 mov	 DWORD PTR _val$7[ebp], 63 ; 0000003fH
$LN6@Decode:

; 138  : 
; 139  : 		if( x != CHAR_PAD )

  0019e	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  001a5	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  001a8	74 1e		 je	 SHORT $LN14@Decode

; 140  : 			buffer.block |= val << ( 3 - m ) * 6;

  001aa	b8 03 00 00 00	 mov	 eax, 3
  001af	2b 85 d0 fe ff
	ff		 sub	 eax, DWORD PTR _m$6[ebp]
  001b5	6b c8 06	 imul	 ecx, eax, 6
  001b8	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _val$7[ebp]
  001be	d3 e2		 shl	 edx, cl
  001c0	0b 55 e8	 or	 edx, DWORD PTR _buffer$[ebp]
  001c3	89 55 e8	 mov	 DWORD PTR _buffer$[ebp], edx

; 141  : 		else

  001c6	eb 0f		 jmp	 SHORT $LN15@Decode
$LN14@Decode:

; 142  : 			m--;

  001c8	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _m$6[ebp]
  001ce	83 e8 01	 sub	 eax, 1
  001d1	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _m$6[ebp], eax
$LN15@Decode:

; 143  : 
; 144  : 		if (m == 3 || x == CHAR_PAD)

  001d7	83 bd d0 fe ff
	ff 03		 cmp	 DWORD PTR _m$6[ebp], 3
  001de	74 10		 je	 SHORT $LN17@Decode
  001e0	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  001e7	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  001ea	0f 85 b7 00 00
	00		 jne	 $LN16@Decode
$LN17@Decode:

; 145  : 		{
; 146  : 			pOutData[ j++ ] = buffer.bytes[2];

  001f0	b8 01 00 00 00	 mov	 eax, 1
  001f5	d1 e0		 shl	 eax, 1
  001f7	66 0f b6 4c 05
	e8		 movzx	 cx, BYTE PTR _buffer$[ebp+eax]
  001fd	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00203	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _pOutData$[ebp]
  00209	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  0020d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00213	83 c1 01	 add	 ecx, 1
  00216	89 8d dc fe ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx

; 147  : 			if ( x != CHAR_PAD || m > 1 )

  0021c	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  00223	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00226	75 09		 jne	 SHORT $LN19@Decode
  00228	83 bd d0 fe ff
	ff 01		 cmp	 DWORD PTR _m$6[ebp], 1
  0022f	7e 6f		 jle	 SHORT $LN18@Decode
$LN19@Decode:

; 148  : 			{
; 149  : 				pOutData[ j++ ] = buffer.bytes[ 1 ];

  00231	b8 01 00 00 00	 mov	 eax, 1
  00236	c1 e0 00	 shl	 eax, 0
  00239	66 0f b6 4c 05
	e8		 movzx	 cx, BYTE PTR _buffer$[ebp+eax]
  0023f	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00245	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _pOutData$[ebp]
  0024b	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  0024f	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00255	83 c1 01	 add	 ecx, 1
  00258	89 8d dc fe ff
	ff		 mov	 DWORD PTR _j$[ebp], ecx

; 150  : 				if( x != CHAR_PAD || m > 2 ) pOutData[ j++ ] = buffer.bytes[ 0 ];

  0025e	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  00265	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00268	75 09		 jne	 SHORT $LN21@Decode
  0026a	83 bd d0 fe ff
	ff 02		 cmp	 DWORD PTR _m$6[ebp], 2
  00271	7e 2d		 jle	 SHORT $LN18@Decode
$LN21@Decode:
  00273	b8 01 00 00 00	 mov	 eax, 1
  00278	6b c8 00	 imul	 ecx, eax, 0
  0027b	66 0f b6 54 0d
	e8		 movzx	 dx, BYTE PTR _buffer$[ebp+ecx]
  00281	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00287	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _pOutData$[ebp]
  0028d	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00291	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00297	83 c2 01	 add	 edx, 1
  0029a	89 95 dc fe ff
	ff		 mov	 DWORD PTR _j$[ebp], edx
$LN18@Decode:

; 151  : 			}
; 152  : 
; 153  : 			buffer.block = 0;

  002a0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _buffer$[ebp], 0
$LN16@Decode:

; 154  : 		}
; 155  : 
; 156  : 		if (x == CHAR_PAD) break;

  002a7	0f b7 85 cc fe
	ff ff		 movzx	 eax, WORD PTR _x$5[ebp]
  002ae	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  002b1	75 02		 jne	 SHORT $LN22@Decode
  002b3	eb 12		 jmp	 SHORT $LN3@Decode
$LN22@Decode:

; 157  : 		if (j == nBufferLen) break;

  002b5	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  002bb	3b 45 14	 cmp	 eax, DWORD PTR _nBufferLen$[ebp]
  002be	75 02		 jne	 SHORT $LN23@Decode
  002c0	eb 05		 jmp	 SHORT $LN3@Decode
$LN23@Decode:

; 158  : 	}

  002c2	e9 cc fd ff ff	 jmp	 $LN2@Decode
$LN3@Decode:

; 159  : 
; 160  : 	//设置结束符
; 161  : 	pOutData[j]=0;

  002c7	33 c0		 xor	 eax, eax
  002c9	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  002cf	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _pOutData$[ebp]
  002d5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 162  : 
; 163  : 	//编码转换
; 164  : 	CW2CT pszBuffer(pOutData);	

  002d9	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _pOutData$[ebp]
  002df	50		 push	 eax
  002e0	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _pszBuffer$[ebp]
  002e6	e8 00 00 00 00	 call	 ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ; ATL::CW2AEX<128>::CW2AEX<128>
  002eb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 165  : 	CopyMemory(szOutBuffer, pszBuffer, nBufferLen*sizeof(TCHAR));	

  002ef	8b 45 14	 mov	 eax, DWORD PTR _nBufferLen$[ebp]
  002f2	50		 push	 eax
  002f3	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _pszBuffer$[ebp]
  002f9	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  002fe	50		 push	 eax
  002ff	8b 4d 10	 mov	 ecx, DWORD PTR _szOutBuffer$[ebp]
  00302	51		 push	 ecx
  00303	e8 00 00 00 00	 call	 _memcpy
  00308	83 c4 0c	 add	 esp, 12			; 0000000cH

; 166  : 
; 167  : 	//释放资源
; 168  : 	SafeDeleteArray(pOutData);

  0030b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0030f	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _pOutData$[ebp]
  00315	89 85 00 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0031b	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00321	51		 push	 ecx
  00322	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00327	83 c4 04	 add	 esp, 4
  0032a	eb 23		 jmp	 SHORT $LN27@Decode
__catch$?Decode@CWHBase64@@SAHPBDHQADH@Z$0:
  0032c	33 c0		 xor	 eax, eax
  0032e	75 19		 jne	 SHORT $LN26@Decode
  00330	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??Decode@CWHBase64@@SAHPBDHQADH@Z@4JA
  00336	83 c1 39	 add	 ecx, 57			; 00000039H
  00339	51		 push	 ecx
  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@MDAPINED@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0033f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00344	85 c0		 test	 eax, eax
  00346	74 01		 je	 SHORT $LN26@Decode
  00348	cc		 int	 3
$LN26@Decode:
  00349	b8 00 00 00 00	 mov	 eax, $LN32@Decode
  0034e	c3		 ret	 0
$LN27@Decode:
  0034f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00356	eb 07		 jmp	 SHORT __tryend$?Decode@CWHBase64@@SAHPBDHQADH@Z$1
$LN32@Decode:
  00358	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?Decode@CWHBase64@@SAHPBDHQADH@Z$1:
  0035f	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pOutData$[ebp], 0

; 169  : 
; 170  : 	return j;

  00369	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0036f	89 85 fc fd ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00375	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00379	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _pszBuffer$[ebp]
  0037f	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  00384	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0038b	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _pinCode$[ebp]
  00391	e8 00 00 00 00	 call	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
  00396	8b 85 fc fd ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 171  : }

  0039c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0039f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003a6	59		 pop	 ecx
  003a7	5f		 pop	 edi
  003a8	5e		 pop	 esi
  003a9	5b		 pop	 ebx
  003aa	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ad	33 cd		 xor	 ecx, ebp
  003af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b4	8b e5		 mov	 esp, ebp
  003b6	5d		 pop	 ebp
  003b7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Decode@CWHBase64@@SAHPBDHQADH@Z$2:
  00000	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _pinCode$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
__unwindfunclet$?Decode@CWHBase64@@SAHPBDHQADH@Z$3:
  0000b	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _pszBuffer$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
__ehhandler$?Decode@CWHBase64@@SAHPBDHQADH@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a f8 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-520]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Decode@CWHBase64@@SAHPBDHQADH@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Decode@CWHBase64@@SAHPBDHQADH@Z ENDP			; CWHBase64::Decode
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whbase64.cpp
;	COMDAT ?Encode@CWHBase64@@SAHPBDHQADH@Z
_TEXT	SEGMENT
$T2 = -256						; size = 4
$T3 = -252						; size = 4
$T4 = -248						; size = 4
_szOutResult$ = -180					; size = 132
_left$5 = -48						; size = 4
_j$6 = -44						; size = 4
_i$7 = -40						; size = 4
_mask$ = -36						; size = 4
_buffer$ = -32						; size = 4
_out$ = -28						; size = 4
_len$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pData$ = 8						; size = 4
_nDataLen$ = 12						; size = 4
_szOutBuffer$ = 16					; size = 4
_nBufferLen$ = 20					; size = 4
?Encode@CWHBase64@@SAHPBDHQADH@Z PROC			; CWHBase64::Encode, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Encode@CWHBase64@@SAHPBDHQADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 55   : 	int len = GetCodeLength(nDataLen);

  00032	8b 45 0c	 mov	 eax, DWORD PTR _nDataLen$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?GetCodeLength@@YAHH@Z	; GetCodeLength
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 e8	 mov	 DWORD PTR _len$[ebp], eax

; 56   : 	wchar_t* out = new wchar_t[len];	

  00041	33 c9		 xor	 ecx, ecx
  00043	8b 45 e8	 mov	 eax, DWORD PTR _len$[ebp]
  00046	ba 02 00 00 00	 mov	 edx, 2
  0004b	f7 e2		 mul	 edx
  0004d	0f 90 c1	 seto	 cl
  00050	f7 d9		 neg	 ecx
  00052	0b c8		 or	 ecx, eax
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00063	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00069	89 45 e4	 mov	 DWORD PTR _out$[ebp], eax

; 57   : 
; 58   : 	unBuffer buffer;
; 59   : 	const int mask = 0x3F;	

  0006c	c7 45 dc 3f 00
	00 00		 mov	 DWORD PTR _mask$[ebp], 63 ; 0000003fH

; 60   : 
; 61   : 	for (int i = 0, j = 0, left = nDataLen; i < nDataLen; i += 3, j += 4, left -= 3)

  00073	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  0007a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _j$6[ebp], 0
  00081	8b 45 0c	 mov	 eax, DWORD PTR _nDataLen$[ebp]
  00084	89 45 d0	 mov	 DWORD PTR _left$5[ebp], eax
  00087	eb 1b		 jmp	 SHORT $LN4@Encode
$LN2@Encode:
  00089	8b 45 d8	 mov	 eax, DWORD PTR _i$7[ebp]
  0008c	83 c0 03	 add	 eax, 3
  0008f	89 45 d8	 mov	 DWORD PTR _i$7[ebp], eax
  00092	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  00095	83 c1 04	 add	 ecx, 4
  00098	89 4d d4	 mov	 DWORD PTR _j$6[ebp], ecx
  0009b	8b 55 d0	 mov	 edx, DWORD PTR _left$5[ebp]
  0009e	83 ea 03	 sub	 edx, 3
  000a1	89 55 d0	 mov	 DWORD PTR _left$5[ebp], edx
$LN4@Encode:
  000a4	8b 45 d8	 mov	 eax, DWORD PTR _i$7[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nDataLen$[ebp]
  000aa	0f 8d 25 01 00
	00		 jge	 $LN3@Encode

; 62   : 	{
; 63   : 		buffer.bytes[2]=pData[i];

  000b0	b8 01 00 00 00	 mov	 eax, 1
  000b5	d1 e0		 shl	 eax, 1
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  000ba	03 4d d8	 add	 ecx, DWORD PTR _i$7[ebp]
  000bd	8a 11		 mov	 dl, BYTE PTR [ecx]
  000bf	88 54 05 e0	 mov	 BYTE PTR _buffer$[ebp+eax], dl

; 64   : 
; 65   : 		if (left > 1)

  000c3	83 7d d0 01	 cmp	 DWORD PTR _left$5[ebp], 1
  000c7	7e 41		 jle	 SHORT $LN5@Encode

; 66   : 		{
; 67   : 			buffer.bytes[ 1 ] = pData[ i + 1 ];

  000c9	b8 01 00 00 00	 mov	 eax, 1
  000ce	c1 e0 00	 shl	 eax, 0
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  000d4	03 4d d8	 add	 ecx, DWORD PTR _i$7[ebp]
  000d7	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000da	88 54 05 e0	 mov	 BYTE PTR _buffer$[ebp+eax], dl

; 68   : 			if( left > 2 )

  000de	83 7d d0 02	 cmp	 DWORD PTR _left$5[ebp], 2
  000e2	7e 17		 jle	 SHORT $LN7@Encode

; 69   : 				buffer.bytes[ 0 ] = pData[ i + 2 ];

  000e4	b8 01 00 00 00	 mov	 eax, 1
  000e9	6b c8 00	 imul	 ecx, eax, 0
  000ec	8b 55 08	 mov	 edx, DWORD PTR _pData$[ebp]
  000ef	03 55 d8	 add	 edx, DWORD PTR _i$7[ebp]
  000f2	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  000f5	88 44 0d e0	 mov	 BYTE PTR _buffer$[ebp+ecx], al

; 70   : 			else

  000f9	eb 0d		 jmp	 SHORT $LN8@Encode
$LN7@Encode:

; 71   : 				buffer.bytes[ 0 ] = 0;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	6b c8 00	 imul	 ecx, eax, 0
  00103	c6 44 0d e0 00	 mov	 BYTE PTR _buffer$[ebp+ecx], 0
$LN8@Encode:

; 72   : 		}
; 73   : 		else

  00108	eb 1a		 jmp	 SHORT $LN6@Encode
$LN5@Encode:

; 74   : 		{
; 75   : 			buffer.bytes[ 1 ] = 0;

  0010a	b8 01 00 00 00	 mov	 eax, 1
  0010f	c1 e0 00	 shl	 eax, 0
  00112	c6 44 05 e0 00	 mov	 BYTE PTR _buffer$[ebp+eax], 0

; 76   : 			buffer.bytes[ 0 ] = 0;

  00117	b8 01 00 00 00	 mov	 eax, 1
  0011c	6b c8 00	 imul	 ecx, eax, 0
  0011f	c6 44 0d e0 00	 mov	 BYTE PTR _buffer$[ebp+ecx], 0
$LN6@Encode:

; 77   : 		}
; 78   : 
; 79   : 		out[ j ] = alph[ ( buffer.block >> 18 ) & mask ];

  00124	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00127	c1 e8 12	 shr	 eax, 18			; 00000012H
  0012a	83 e0 3f	 and	 eax, 63			; 0000003fH
  0012d	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  00130	8b 55 e4	 mov	 edx, DWORD PTR _out$[ebp]
  00133	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?alph@@3QB_WB[eax*2]
  0013b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 80   : 		out[ j + 1 ] = alph[ ( buffer.block >> 12 ) & mask ];

  0013f	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00142	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00145	83 e0 3f	 and	 eax, 63			; 0000003fH
  00148	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  0014b	8b 55 e4	 mov	 edx, DWORD PTR _out$[ebp]
  0014e	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?alph@@3QB_WB[eax*2]
  00156	66 89 44 4a 02	 mov	 WORD PTR [edx+ecx*2+2], ax

; 81   : 		if( left > 1 )

  0015b	83 7d d0 01	 cmp	 DWORD PTR _left$5[ebp], 1
  0015f	7e 4f		 jle	 SHORT $LN9@Encode

; 82   : 		{
; 83   : 			out[ j + 2 ] = alph[ ( buffer.block >> 6 ) & mask ];

  00161	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00164	c1 e8 06	 shr	 eax, 6
  00167	83 e0 3f	 and	 eax, 63			; 0000003fH
  0016a	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  0016d	8b 55 e4	 mov	 edx, DWORD PTR _out$[ebp]
  00170	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?alph@@3QB_WB[eax*2]
  00178	66 89 44 4a 04	 mov	 WORD PTR [edx+ecx*2+4], ax

; 84   : 			if ( left > 2 )

  0017d	83 7d d0 02	 cmp	 DWORD PTR _left$5[ebp], 2
  00181	7e 1b		 jle	 SHORT $LN11@Encode

; 85   : 				out[ j + 3 ] = alph[ buffer.block & mask ];

  00183	8b 45 e0	 mov	 eax, DWORD PTR _buffer$[ebp]
  00186	83 e0 3f	 and	 eax, 63			; 0000003fH
  00189	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  0018c	8b 55 e4	 mov	 edx, DWORD PTR _out$[ebp]
  0018f	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?alph@@3QB_WB[eax*2]
  00197	66 89 44 4a 06	 mov	 WORD PTR [edx+ecx*2+6], ax

; 86   : 			else

  0019c	eb 10		 jmp	 SHORT $LN12@Encode
$LN11@Encode:

; 87   : 				out[ j + 3 ] = CHAR_PAD;

  0019e	b8 3d 00 00 00	 mov	 eax, 61			; 0000003dH
  001a3	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  001a6	8b 55 e4	 mov	 edx, DWORD PTR _out$[ebp]
  001a9	66 89 44 4a 06	 mov	 WORD PTR [edx+ecx*2+6], ax
$LN12@Encode:

; 88   : 		}
; 89   : 		else

  001ae	eb 20		 jmp	 SHORT $LN10@Encode
$LN9@Encode:

; 90   : 		{
; 91   : 			out[ j + 2 ] = CHAR_PAD;

  001b0	b8 3d 00 00 00	 mov	 eax, 61			; 0000003dH
  001b5	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  001b8	8b 55 e4	 mov	 edx, DWORD PTR _out$[ebp]
  001bb	66 89 44 4a 04	 mov	 WORD PTR [edx+ecx*2+4], ax

; 92   : 			out[ j + 3 ] = CHAR_PAD;

  001c0	b8 3d 00 00 00	 mov	 eax, 61			; 0000003dH
  001c5	8b 4d d4	 mov	 ecx, DWORD PTR _j$6[ebp]
  001c8	8b 55 e4	 mov	 edx, DWORD PTR _out$[ebp]
  001cb	66 89 44 4a 06	 mov	 WORD PTR [edx+ecx*2+6], ax
$LN10@Encode:

; 93   : 		}
; 94   : 	}

  001d0	e9 b4 fe ff ff	 jmp	 $LN2@Encode
$LN3@Encode:

; 95   : 
; 96   : 	//编码转换
; 97   : 	CW2CT szOutResult(out);

  001d5	8b 45 e4	 mov	 eax, DWORD PTR _out$[ebp]
  001d8	50		 push	 eax
  001d9	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _szOutResult$[ebp]
  001df	e8 00 00 00 00	 call	 ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ; ATL::CW2AEX<128>::CW2AEX<128>
  001e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 98   : 	CopyMemory(szOutBuffer, szOutResult,len*sizeof(TCHAR));	

  001eb	8b 45 e8	 mov	 eax, DWORD PTR _len$[ebp]
  001ee	50		 push	 eax
  001ef	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _szOutResult$[ebp]
  001f5	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  001fa	50		 push	 eax
  001fb	8b 4d 10	 mov	 ecx, DWORD PTR _szOutBuffer$[ebp]
  001fe	51		 push	 ecx
  001ff	e8 00 00 00 00	 call	 _memcpy
  00204	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : 
; 100  : 	//设置结束符
; 101  : 	szOutBuffer[len] = 0;	

  00207	8b 45 10	 mov	 eax, DWORD PTR _szOutBuffer$[ebp]
  0020a	03 45 e8	 add	 eax, DWORD PTR _len$[ebp]
  0020d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 102  : 
; 103  : 	//释放资源
; 104  : 	SafeDeleteArray(out);

  00210	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00214	8b 45 e4	 mov	 eax, DWORD PTR _out$[ebp]
  00217	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0021d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00223	51		 push	 ecx
  00224	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00229	83 c4 04	 add	 esp, 4
  0022c	eb 23		 jmp	 SHORT $LN16@Encode
__catch$?Encode@CWHBase64@@SAHPBDHQADH@Z$0:
  0022e	33 c0		 xor	 eax, eax
  00230	75 19		 jne	 SHORT $LN15@Encode
  00232	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??Encode@CWHBase64@@SAHPBDHQADH@Z@4JA
  00238	83 c1 32	 add	 ecx, 50			; 00000032H
  0023b	51		 push	 ecx
  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@MDAPINED@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00241	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00246	85 c0		 test	 eax, eax
  00248	74 01		 je	 SHORT $LN15@Encode
  0024a	cc		 int	 3
$LN15@Encode:
  0024b	b8 00 00 00 00	 mov	 eax, $LN20@Encode
  00250	c3		 ret	 0
$LN16@Encode:
  00251	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00258	eb 07		 jmp	 SHORT __tryend$?Encode@CWHBase64@@SAHPBDHQADH@Z$1
$LN20@Encode:
  0025a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?Encode@CWHBase64@@SAHPBDHQADH@Z$1:
  00261	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _out$[ebp], 0

; 105  : 
; 106  : 	return len;

  00268	8b 45 e8	 mov	 eax, DWORD PTR _len$[ebp]
  0026b	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00271	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00278	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _szOutResult$[ebp]
  0027e	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  00283	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 107  : }

  00289	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0028c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00293	59		 pop	 ecx
  00294	5f		 pop	 edi
  00295	5e		 pop	 esi
  00296	5b		 pop	 ebx
  00297	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029a	33 cd		 xor	 ecx, ebp
  0029c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a1	8b e5		 mov	 esp, ebp
  002a3	5d		 pop	 ebp
  002a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Encode@CWHBase64@@SAHPBDHQADH@Z$2:
  00000	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _szOutResult$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
__ehhandler$?Encode@CWHBase64@@SAHPBDHQADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Encode@CWHBase64@@SAHPBDHQADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Encode@CWHBase64@@SAHPBDHQADH@Z ENDP			; CWHBase64::Encode
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whbase64.cpp
;	COMDAT ??1CWHBase64@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWHBase64@@UAE@XZ PROC				; CWHBase64::~CWHBase64, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHBase64@@6B@

; 50   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CWHBase64@@UAE@XZ ENDP				; CWHBase64::~CWHBase64
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whbase64.cpp
;	COMDAT ??0CWHBase64@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWHBase64@@QAE@XZ PROC				; CWHBase64::CWHBase64, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHBase64@@6B@

; 45   : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CWHBase64@@QAE@XZ ENDP				; CWHBase64::CWHBase64
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z
_TEXT	SEGMENT
tv129 = -84						; size = 4
tv81 = -84						; size = 4
tv65 = -84						; size = 4
_ppReallocBuf$1 = -16					; size = 4
___atl_condVal$2 = -12					; size = 4
___atl_condVal$3 = -8					; size = 4
___atl_condVal$4 = -4					; size = 4
_ppBuff$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pszFixedBuffer$ = 16					; size = 4
_nFixedBufferLength$ = 20				; size = 4
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z PROC	; ATL::AtlConvAllocMemory<char>, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@AtlConvAll:

; 113  : 	ATLENSURE_THROW(ppBuff != NULL, E_INVALIDARG);

  00009	83 7d 08 00	 cmp	 DWORD PTR _ppBuff$[ebp], 0
  0000d	74 09		 je	 SHORT $LN32@AtlConvAll
  0000f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00016	eb 07		 jmp	 SHORT $LN33@AtlConvAll
$LN32@AtlConvAll:
  00018	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN33@AtlConvAll:
  0001f	8b 45 ac	 mov	 eax, DWORD PTR tv65[ebp]
  00022	89 45 fc	 mov	 DWORD PTR ___atl_condVal$4[ebp], eax
$LN7@AtlConvAll:
  00025	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00029	75 24		 jne	 SHORT $LN5@AtlConvAll
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00035	6a 00		 push	 0
  00037	6a 71		 push	 113			; 00000071H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0003e	6a 02		 push	 2
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	83 f8 01	 cmp	 eax, 1
  0004c	75 01		 jne	 SHORT $LN5@AtlConvAll
  0004e	cc		 int	 3
$LN5@AtlConvAll:
  0004f	33 c0		 xor	 eax, eax
  00051	75 d2		 jne	 SHORT $LN7@AtlConvAll
  00053	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00057	75 0a		 jne	 SHORT $LN2@AtlConvAll
  00059	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0005e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@AtlConvAll:
  00063	33 c0		 xor	 eax, eax
  00065	75 a2		 jne	 SHORT $LN4@AtlConvAll
$LN10@AtlConvAll:

; 114  : 	ATLENSURE_THROW(nLength >= 0, E_INVALIDARG);

  00067	83 7d 0c 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0006b	7c 09		 jl	 SHORT $LN35@AtlConvAll
  0006d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN36@AtlConvAll
$LN35@AtlConvAll:
  00076	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN36@AtlConvAll:
  0007d	8b 45 ac	 mov	 eax, DWORD PTR tv81[ebp]
  00080	89 45 f8	 mov	 DWORD PTR ___atl_condVal$3[ebp], eax
$LN13@AtlConvAll:
  00083	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  00087	75 24		 jne	 SHORT $LN11@AtlConvAll
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00093	6a 00		 push	 0
  00095	6a 72		 push	 114			; 00000072H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0009c	6a 02		 push	 2
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000a4	83 c4 18	 add	 esp, 24			; 00000018H
  000a7	83 f8 01	 cmp	 eax, 1
  000aa	75 01		 jne	 SHORT $LN11@AtlConvAll
  000ac	cc		 int	 3
$LN11@AtlConvAll:
  000ad	33 c0		 xor	 eax, eax
  000af	75 d2		 jne	 SHORT $LN13@AtlConvAll
  000b1	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  000b5	75 0a		 jne	 SHORT $LN8@AtlConvAll
  000b7	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000bc	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@AtlConvAll:
  000c1	33 c0		 xor	 eax, eax
  000c3	75 a2		 jne	 SHORT $LN10@AtlConvAll
$LN16@AtlConvAll:

; 115  : 	ATLENSURE_THROW(pszFixedBuffer != NULL, E_INVALIDARG);

  000c5	83 7d 10 00	 cmp	 DWORD PTR _pszFixedBuffer$[ebp], 0
  000c9	74 09		 je	 SHORT $LN38@AtlConvAll
  000cb	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv129[ebp], 1
  000d2	eb 07		 jmp	 SHORT $LN39@AtlConvAll
$LN38@AtlConvAll:
  000d4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN39@AtlConvAll:
  000db	8b 45 ac	 mov	 eax, DWORD PTR tv129[ebp]
  000de	89 45 f4	 mov	 DWORD PTR ___atl_condVal$2[ebp], eax
$LN19@AtlConvAll:
  000e1	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  000e5	75 24		 jne	 SHORT $LN17@AtlConvAll
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  000f1	6a 00		 push	 0
  000f3	6a 73		 push	 115			; 00000073H
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000fa	6a 02		 push	 2
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00102	83 c4 18	 add	 esp, 24			; 00000018H
  00105	83 f8 01	 cmp	 eax, 1
  00108	75 01		 jne	 SHORT $LN17@AtlConvAll
  0010a	cc		 int	 3
$LN17@AtlConvAll:
  0010b	33 c0		 xor	 eax, eax
  0010d	75 d2		 jne	 SHORT $LN19@AtlConvAll
  0010f	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  00113	75 0a		 jne	 SHORT $LN14@AtlConvAll
  00115	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0011a	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN14@AtlConvAll:
  0011f	33 c0		 xor	 eax, eax
  00121	75 a2		 jne	 SHORT $LN16@AtlConvAll

; 116  : 
; 117  : 	//if buffer malloced, try to realloc.
; 118  : 	if (*ppBuff != pszFixedBuffer)

  00123	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00126	8b 08		 mov	 ecx, DWORD PTR [eax]
  00128	3b 4d 10	 cmp	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0012b	74 53		 je	 SHORT $LN23@AtlConvAll

; 119  : 	{
; 120  : 		if( nLength > nFixedBufferLength )

  0012d	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00130	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00133	7e 32		 jle	 SHORT $LN25@AtlConvAll

; 121  : 		{
; 122  : 			_CharType* ppReallocBuf = static_cast< _CharType* >( _recalloc(*ppBuff, nLength,sizeof( _CharType ) ) );

  00135	6a 01		 push	 1
  00137	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0013e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00140	52		 push	 edx
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___recalloc
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014a	89 45 f0	 mov	 DWORD PTR _ppReallocBuf$1[ebp], eax

; 123  : 			if (ppReallocBuf == NULL)

  0014d	83 7d f0 00	 cmp	 DWORD PTR _ppReallocBuf$1[ebp], 0
  00151	75 0a		 jne	 SHORT $LN27@AtlConvAll

; 124  : 			{
; 125  : 				AtlThrow( E_OUTOFMEMORY );

  00153	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00158	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN27@AtlConvAll:

; 126  : 			}
; 127  : 			*ppBuff = ppReallocBuf;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00160	8b 4d f0	 mov	 ecx, DWORD PTR _ppReallocBuf$1[ebp]
  00163	89 08		 mov	 DWORD PTR [eax], ecx

; 128  : 		} else

  00165	eb 17		 jmp	 SHORT $LN26@AtlConvAll
$LN25@AtlConvAll:

; 129  : 		{
; 130  : 			free(*ppBuff);

  00167	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	51		 push	 ecx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00173	83 c4 04	 add	 esp, 4

; 131  : 			*ppBuff=pszFixedBuffer;

  00176	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00179	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0017c	89 08		 mov	 DWORD PTR [eax], ecx
$LN26@AtlConvAll:

; 132  : 		}
; 133  : 
; 134  : 	} else //Buffer is not currently malloced.

  0017e	eb 26		 jmp	 SHORT $LN24@AtlConvAll
$LN23@AtlConvAll:

; 135  : 	{
; 136  : 		if( nLength > nFixedBufferLength )

  00180	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00183	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00186	7e 16		 jle	 SHORT $LN28@AtlConvAll

; 137  : 		{
; 138  : 			*ppBuff = static_cast< _CharType* >( calloc(nLength,sizeof( _CharType ) ) );

  00188	6a 01		 push	 1
  0018a	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0018d	50		 push	 eax
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00194	83 c4 08	 add	 esp, 8
  00197	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0019a	89 01		 mov	 DWORD PTR [ecx], eax

; 139  : 		} else

  0019c	eb 08		 jmp	 SHORT $LN24@AtlConvAll
$LN28@AtlConvAll:

; 140  : 		{
; 141  : 			*ppBuff=pszFixedBuffer;

  0019e	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a1	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  001a4	89 08		 mov	 DWORD PTR [eax], ecx
$LN24@AtlConvAll:

; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	if (*ppBuff == NULL)

  001a6	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a9	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ac	75 0a		 jne	 SHORT $LN31@AtlConvAll

; 146  : 	{
; 147  : 		AtlThrow( E_OUTOFMEMORY );

  001ae	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  001b3	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN31@AtlConvAll:

; 148  : 	}
; 149  : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ENDP	; ATL::AtlConvAllocMemory<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z
_TEXT	SEGMENT
_pBuff$ = 8						; size = 4
_pszFixedBuffer$ = 12					; size = 4
_nFixedBufferLength$ = 16				; size = 4
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z PROC		; ATL::AtlConvFreeMemory<char>, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 	(nFixedBufferLength);
; 158  : 	if( pBuff != pszFixedBuffer )

  00009	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR _pszFixedBuffer$[ebp]
  0000f	74 0f		 je	 SHORT $LN2@AtlConvFre

; 159  : 	{
; 160  : 		free( pBuff );

  00011	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001b	83 c4 04	 add	 esp, 4

; 161  : 	}
; 162  : #ifdef _DEBUG
; 163  : 	else

  0001e	eb 15		 jmp	 SHORT $LN1@AtlConvFre
$LN2@AtlConvFre:

; 164  : 	{
; 165  : 		memset(pszFixedBuffer,ATLCONV_DEADLAND_FILL,nFixedBufferLength*sizeof(_CharType));

  00020	8b 45 10	 mov	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00023	50		 push	 eax
  00024	68 fe 00 00 00	 push	 254			; 000000feH
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@AtlConvFre:

; 166  : 	}
; 167  : #endif
; 168  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ENDP		; ATL::AtlConvFreeMemory<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT
tv149 = -84						; size = 4
tv87 = -84						; size = 4
_bFailed$ = -16						; size = 4
_nLengthA$ = -12					; size = 4
_nLengthW$ = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
_nConvertCodePage$ = 12					; size = 4
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z PROC		; ATL::CW2AEX<128>::Init, COMDAT
; _this$ = ecx

; 439  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 440  : 		if (psz == NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00010	75 0e		 jne	 SHORT $LN2@Init

; 441  : 		{
; 442  : 			m_psz = NULL;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 443  : 			return;

  0001b	e9 25 01 00 00	 jmp	 $LN6@Init
$LN2@Init:

; 444  : 		}
; 445  : 		int nLengthW = static_cast<int>(wcslen( psz ))+1;

  00020	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0002a	83 c4 04	 add	 esp, 4
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 f8	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 446  : 		int nLengthA = nLengthW*4;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  00036	c1 e0 02	 shl	 eax, 2
  00039	89 45 f4	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 447  : 
; 448  : 		AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  0003c	68 80 00 00 00	 push	 128			; 00000080H
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 c0 04	 add	 eax, 4
  00047	50		 push	 eax
  00048	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthA$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 449  : 
; 450  : 		BOOL bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	52		 push	 edx
  00066	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0006d	51		 push	 ecx
  0006e	6a 00		 push	 0
  00070	8b 55 0c	 mov	 edx, DWORD PTR _nConvertCodePage$[ebp]
  00073	52		 push	 edx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0007a	85 c0		 test	 eax, eax
  0007c	75 09		 jne	 SHORT $LN7@Init
  0007e	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  00085	eb 07		 jmp	 SHORT $LN8@Init
$LN7@Init:
  00087	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN8@Init:
  0008e	8b 45 ac	 mov	 eax, DWORD PTR tv87[ebp]
  00091	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax

; 451  : 		if (bFailed)

  00094	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00098	0f 84 82 00 00
	00		 je	 $LN3@Init

; 452  : 		{
; 453  : 			if (GetLastError()==ERROR_INSUFFICIENT_BUFFER)

  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000a4	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  000a7	75 77		 jne	 SHORT $LN3@Init

; 454  : 			{
; 455  : 				nLengthA = ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, NULL, 0, NULL, NULL );

  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	6a 00		 push	 0
  000af	6a 00		 push	 0
  000b1	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000b8	51		 push	 ecx
  000b9	6a 00		 push	 0
  000bb	8b 55 0c	 mov	 edx, DWORD PTR _nConvertCodePage$[ebp]
  000be	52		 push	 edx
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000c5	89 45 f4	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 456  : ATLPREFAST_SUPPRESS(6102)
; 457  :                 AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  000c8	68 80 00 00 00	 push	 128			; 00000080H
  000cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	83 c0 04	 add	 eax, 4
  000d3	50		 push	 eax
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthA$[ebp]
  000d7	51		 push	 ecx
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>
  000e1	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : ATLPREFAST_UNSUPPRESS()
; 459  : 				bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  000e4	6a 00		 push	 0
  000e6	6a 00		 push	 0
  000e8	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f1	52		 push	 edx
  000f2	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000f9	51		 push	 ecx
  000fa	6a 00		 push	 0
  000fc	8b 55 0c	 mov	 edx, DWORD PTR _nConvertCodePage$[ebp]
  000ff	52		 push	 edx
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  00106	85 c0		 test	 eax, eax
  00108	75 09		 jne	 SHORT $LN9@Init
  0010a	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv149[ebp], 1
  00111	eb 07		 jmp	 SHORT $LN10@Init
$LN9@Init:
  00113	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN10@Init:
  0011a	8b 45 ac	 mov	 eax, DWORD PTR tv149[ebp]
  0011d	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax
$LN3@Init:

; 460  : 			}
; 461  : 		}
; 462  : 		if (bFailed)

  00120	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00124	74 1f		 je	 SHORT $LN6@Init

; 463  : 		{
; 464  : 			AtlConvFreeMemory(m_psz, m_szBuffer, t_nBufferLength);

  00126	68 80 00 00 00	 push	 128			; 00000080H
  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	83 c0 04	 add	 eax, 4
  00131	50		 push	 eax
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	8b 11		 mov	 edx, DWORD PTR [ecx]
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ; ATL::AtlConvFreeMemory<char>
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  : 			AtlThrowLastWin32();

  00140	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$LN6@Init:

; 466  : 		}
; 467  : 	}

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ENDP		; ATL::CW2AEX<128>::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ PROC			; ATL::CW2AEX<128>::operator char *, COMDAT
; _this$ = ecx

; 431  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 432  : 		return( m_psz );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 433  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ENDP			; ATL::CW2AEX<128>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CW2AEX<128>::~CW2AEX<128>, COMDAT
; _this$ = ecx

; 426  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 427  : 		AtlConvFreeMemory(m_psz,m_szBuffer,t_nBufferLength);

  0000c	68 80 00 00 00	 push	 128			; 00000080H
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ; ATL::AtlConvFreeMemory<char>
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 428  : 	}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CW2AEX<128>::~CW2AEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z PROC			; ATL::CW2AEX<128>::CW2AEX<128>, COMDAT
; _this$ = ecx

; 415  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 		m_psz( m_szBuffer )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 416  : 		Init( psz, _AtlGetConversionACP() );

  00017	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  0001c	50		 push	 eax
  0001d	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init

; 417  : 	}

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ENDP			; ATL::CW2AEX<128>::CW2AEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
_TEXT	SEGMENT
_ptr$ = -20						; size = 4
_ple$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 421  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 422  : 		CPreserveLastError ple;

  00028	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::CPreserveLastError
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 423  : 		va_list ptr; va_start(ptr, pszFmt);

  00037	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0003a	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax

; 424  : 		ATL::CTrace::TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  0003d	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 14	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 10	 mov	 edx, DWORD PTR _nLevel$[ebp]
  00048	52		 push	 edx
  00049	8b 45 0c	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ; ATL::CTrace::TraceV
  0005f	83 c4 18	 add	 esp, 24			; 00000018H

; 425  : 		va_end(ptr);

  00062	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 426  : 	}

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00073	e8 00 00 00 00	 call	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
__ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 411  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 		: m_pszFileName(pszFileName), m_nLineNo(nLineNo)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _nLineNo$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 412  : 	}

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??1CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::~CPreserveLastError, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 		SetLastError(m_dwLastError);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 398  : 	}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??1CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::~CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::CPreserveLastError, COMDAT
; _this$ = ecx

; 390  : 	CPreserveLastError()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	{
; 392  : 		m_dwLastError = GetLastError();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 01		 push	 1
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 02		 push	 2
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 330  : 		if (pszCategory == nullptr)

  00016	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0001c	e9 a9 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00021	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00028	72 2d		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0002a	33 c0		 xor	 eax, eax
  0002c	75 27		 jne	 SHORT $LN5@RegisterCa
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 51 01 00 00	 push	 337			; 00000151H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 01		 jne	 SHORT $LN5@RegisterCa
  00054	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  00055	eb 73		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00057	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  00064	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	6a 00		 push	 0
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  00080	8b 45 08	 mov	 eax, DWORD PTR _pszCategory$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  00089	6a 7f		 push	 127			; 0000007fH
  0008b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _swprintf_s
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 7f		 push	 127			; 0000007fH
  000a3	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000ad	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000b3	51		 push	 ecx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000c2	83 c0 01	 add	 eax, 1
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
_TEXT	SEGMENT
_wszBuf$ = -24						; size = 4
_szBuf$ = -20						; size = 4
_cchNeeded$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pszFmt$ = 24						; size = 4
_args$ = 28						; size = 4
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 239  : 		int cchNeeded = _vscprintf(pszFmt, args);

  00028	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 __vscprintf
  00035	83 c4 08	 add	 esp, 8
  00038	89 45 f0	 mov	 DWORD PTR _cchNeeded$[ebp], eax

; 240  : 		if (cchNeeded < 0)

  0003b	83 7d f0 00	 cmp	 DWORD PTR _cchNeeded$[ebp], 0
  0003f	7d 05		 jge	 SHORT $LN2@TraceV

; 241  : 		{
; 242  : 			return;

  00041	e9 64 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 243  : 		}
; 244  : 
; 245  : 		CHeapPtr<char> szBuf;

  00046	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00049	e8 00 00 00 00	 call	 ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 246  : 		if (!szBuf.Allocate(cchNeeded + 1))

  00055	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	50		 push	 eax
  0005c	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0005f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	75 14		 jne	 SHORT $LN3@TraceV

; 247  : 		{
; 248  : 			return;

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00075	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0007a	e9 2b 01 00 00	 jmp	 $LN1@TraceV
$LN3@TraceV:

; 249  : 		}
; 250  : 
; 251  : 		szBuf[0] = '\0';

  0007f	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00082	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	6b d1 00	 imul	 edx, ecx, 0
  0008f	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 252  : 
; 253  : 		if (_vsnprintf_s(szBuf, cchNeeded + 1, cchNeeded, pszFmt, args) == -1)

  00093	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 f0	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	50		 push	 eax
  000a6	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000a9	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 __vsnprintf_s
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
  000b7	83 f8 ff	 cmp	 eax, -1
  000ba	75 14		 jne	 SHORT $LN4@TraceV

; 254  : 		{
; 255  : 			return;

  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000cb	e9 da 00 00 00	 jmp	 $LN1@TraceV
$LN4@TraceV:

; 256  : 		}
; 257  : 
; 258  : 		CHeapPtr<wchar_t> wszBuf;

  000d0	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000d3	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 259  : 		if (!wszBuf.Allocate(cchNeeded + 1))

  000dc	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000df	83 c0 01	 add	 eax, 1
  000e2	50		 push	 eax
  000e3	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000e6	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  000eb	0f b6 c8	 movzx	 ecx, al
  000ee	85 c9		 test	 ecx, ecx
  000f0	75 20		 jne	 SHORT $LN5@TraceV

; 260  : 		{
; 261  : 			return;

  000f2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f6	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000f9	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00105	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00108	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0010d	e9 98 00 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 262  : 		}
; 263  : 
; 264  : 		wszBuf[0] = '\0';

  00112	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00115	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  0011a	b9 02 00 00 00	 mov	 ecx, 2
  0011f	6b d1 00	 imul	 edx, ecx, 0
  00122	33 c9		 xor	 ecx, ecx
  00124	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 265  : 
; 266  : 		if (::MultiByteToWideChar(CP_ACP, 0, szBuf, -1, wszBuf, cchNeeded + 1) == 0)

  00128	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  0012b	83 c0 01	 add	 eax, 1
  0012e	50		 push	 eax
  0012f	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00132	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00137	50		 push	 eax
  00138	6a ff		 push	 -1
  0013a	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0013d	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00142	50		 push	 eax
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0014d	85 c0		 test	 eax, eax
  0014f	75 1d		 jne	 SHORT $LN6@TraceV

; 267  : 		{
; 268  : 			return;

  00151	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00155	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00158	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0015d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00164	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00167	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0016c	eb 3c		 jmp	 SHORT $LN1@TraceV
$LN6@TraceV:

; 269  : 		}
; 270  : 
; 271  : 		TraceV(pszFileName, nLine, dwCategory, nLevel, wszBuf);

  0016e	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00171	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00176	50		 push	 eax
  00177	8b 45 14	 mov	 eax, DWORD PTR _nLevel$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d 10	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  0017e	51		 push	 ecx
  0017f	8b 55 0c	 mov	 edx, DWORD PTR _nLine$[ebp]
  00182	52		 push	 edx
  00183	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ; ATL::CTrace::TraceV
  0018c	83 c4 14	 add	 esp, 20			; 00000014H

; 272  : 	}

  0018f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00193	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00196	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0019b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a2	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  001a5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b4	59		 pop	 ecx
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	5b		 pop	 ebx
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z
_TEXT	SEGMENT
_fileName$ = -2588					; size = 520
_wszBuf$ = -2068					; size = 4
_chCount$ = -2064					; size = 4
_pwszCategoryName$ = -2060				; size = 4
_categoryLength$ = -2056				; size = 4
_wszCategory$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszMessage$ = 24					; size = 4
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 150  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 0b 00
	00		 sub	 esp, 2972		; 00000b9cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 151  : 		if (CTrace::m_nLevel == CTrace::DisableTracing || CTrace::m_nLevel < nLevel || (CTrace::m_nCategory & dwCategory) == 0)

  00016	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_nLevel@CTrace@ATL@@1IA, -1 ; ATL::CTrace::m_nLevel
  0001d	74 14		 je	 SHORT $LN3@TraceV
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLevel@CTrace@ATL@@1IA ; ATL::CTrace::m_nLevel
  00024	3b 45 14	 cmp	 eax, DWORD PTR _nLevel$[ebp]
  00027	72 0a		 jb	 SHORT $LN3@TraceV
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nCategory
  0002e	23 45 10	 and	 eax, DWORD PTR _dwCategory$[ebp]
  00031	75 05		 jne	 SHORT $LN2@TraceV
$LN3@TraceV:

; 152  : 		{
; 153  : 			return;

  00033	e9 c2 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 154  : 		}
; 155  : 
; 156  : 		wchar_t wszCategory[TraceBufferSize] = {'\0'};

  00038	68 00 08 00 00	 push	 2048			; 00000800H
  0003d	6a 00		 push	 0
  0003f	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		int categoryLength = 0;

  0004e	c7 85 f8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _categoryLength$[ebp], 0

; 158  : 		const wchar_t *const pwszCategoryName = GetCategoryName(dwCategory);

  00058	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ; ATL::CTrace::GetCategoryName
  00061	83 c4 04	 add	 esp, 4
  00064	89 85 f4 f7 ff
	ff		 mov	 DWORD PTR _pwszCategoryName$[ebp], eax

; 159  : 		if (pwszCategoryName != nullptr)

  0006a	83 bd f4 f7 ff
	ff 00		 cmp	 DWORD PTR _pwszCategoryName$[ebp], 0
  00071	74 36		 je	 SHORT $LN4@TraceV

; 160  : 		{
; 161  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%ls - ", pwszCategoryName)) == -1)

  00073	8b 85 f4 f7 ff
	ff		 mov	 eax, DWORD PTR _pwszCategoryName$[ebp]
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
  0007f	68 00 04 00 00	 push	 1024			; 00000400H
  00084	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _swprintf_s
  00090	83 c4 10	 add	 esp, 16			; 00000010H
  00093	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  00099	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000a0	75 05		 jne	 SHORT $LN6@TraceV

; 162  : 			{
; 163  : 				return;

  000a2	e9 53 01 00 00	 jmp	 $LN1@TraceV
$LN6@TraceV:

; 164  : 			}
; 165  : 		}
; 166  : 		else

  000a7	eb 31		 jmp	 SHORT $LN5@TraceV
$LN4@TraceV:

; 167  : 		{
; 168  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%u - ", dwCategory)) == -1)

  000a9	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
  000b2	68 00 04 00 00	 push	 1024			; 00000400H
  000b7	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _swprintf_s
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000cc	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000d3	75 05		 jne	 SHORT $LN5@TraceV

; 169  : 			{
; 170  : 				return;

  000d5	e9 20 01 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 171  : 			}
; 172  : 		}
; 173  : 
; 174  : 		int chCount = (int)wcslen(pwszMessage) + categoryLength + 1;

  000da	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  000dd	50		 push	 eax
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  000e4	83 c4 04	 add	 esp, 4
  000e7	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _categoryLength$[ebp]
  000ed	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  000f1	89 95 f0 f7 ff
	ff		 mov	 DWORD PTR _chCount$[ebp], edx

; 175  : 		CHeapPtr<wchar_t> wszBuf;

  000f7	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000fd	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 176  : 		if (!wszBuf.Allocate(chCount))

  00102	8b 85 f0 f7 ff
	ff		 mov	 eax, DWORD PTR _chCount$[ebp]
  00108	50		 push	 eax
  00109	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0010f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00114	0f b6 c8	 movzx	 ecx, al
  00117	85 c9		 test	 ecx, ecx
  00119	75 10		 jne	 SHORT $LN8@TraceV

; 177  : 		{
; 178  : 			return;

  0011b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00121	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00126	e9 cf 00 00 00	 jmp	 $LN1@TraceV
$LN8@TraceV:

; 179  : 		}
; 180  : 
; 181  : 		wszBuf[0] = '\0';

  0012b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00131	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00136	b9 02 00 00 00	 mov	 ecx, 2
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	33 c9		 xor	 ecx, ecx
  00140	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 182  : 
; 183  : 		if (swprintf_s(wszBuf, chCount, L"%ls%ls", wszCategory, pwszMessage) == -1)

  00144	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  00147	50		 push	 eax
  00148	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0014e	51		 push	 ecx
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
  00154	8b 95 f0 f7 ff
	ff		 mov	 edx, DWORD PTR _chCount$[ebp]
  0015a	52		 push	 edx
  0015b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00161	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _swprintf_s
  0016c	83 c4 14	 add	 esp, 20			; 00000014H
  0016f	83 f8 ff	 cmp	 eax, -1
  00172	75 0d		 jne	 SHORT $LN9@TraceV

; 184  : 		{
; 185  : 			return;

  00174	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0017a	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0017f	eb 79		 jmp	 SHORT $LN1@TraceV
$LN9@TraceV:

; 186  : 		}
; 187  : 
; 188  : 		wchar_t fileName[_MAX_PATH] = {'\0'};	

  00181	68 08 02 00 00	 push	 520			; 00000208H
  00186	6a 00		 push	 0
  00188	8d 85 e4 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _memset
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : #if _MSC_VER < 1900
; 190  : 		if (swprintf_s(fileName, _MAX_PATH, L"%S", pszFileName) == -1)
; 191  : #else
; 192  : 		if (swprintf_s(fileName, _MAX_PATH, L"%hs", pszFileName) == -1)

  00197	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  001a0	68 04 01 00 00	 push	 260			; 00000104H
  001a5	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _swprintf_s
  001b1	83 c4 10	 add	 esp, 16			; 00000010H
  001b4	83 f8 ff	 cmp	 eax, -1
  001b7	75 0d		 jne	 SHORT $LN10@TraceV

; 193  : #endif
; 194  : 		{
; 195  : 			return;

  001b9	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001bf	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001c4	eb 34		 jmp	 SHORT $LN1@TraceV
$LN10@TraceV:

; 196  : 		}
; 197  : 
; 198  : 		_CrtDbgReportW(_CRT_WARN, fileName, nLine, nullptr, L"%ls", static_cast<const wchar_t*>(wszBuf));

  001c6	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001cc	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  001d1	50		 push	 eax
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001d7	6a 00		 push	 0
  001d9	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  001dc	50		 push	 eax
  001dd	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001e3	51		 push	 ecx
  001e4	6a 00		 push	 0
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  001ec	83 c4 18	 add	 esp, 24			; 00000018H

; 199  : 	}

  001ef	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001f5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001fa	5f		 pop	 edi
  001fb	5e		 pop	 esi
  001fc	5b		 pop	 ebx
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_nCategory$ = 8						; size = 4
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z PROC		; ATL::CTrace::GetCategoryName, COMDAT

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 133  : 		for(unsigned int i = 0; i < m_nLastCategory; i++) 

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@GetCategor
$LN2@GetCategor:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetCategor:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00024	73 22		 jae	 SHORT $LN3@GetCategor

; 134  : 		{
; 135  : 			if (m_nMap[i].nCategory == nCategory)

  00026	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0002d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax]
  00033	3b 4d 08	 cmp	 ecx, DWORD PTR _nCategory$[ebp]
  00036	75 0e		 jne	 SHORT $LN5@GetCategor

; 136  : 			{
; 137  : 				return m_nMap[i].categryName;

  00038	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0003f	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00044	eb 04		 jmp	 SHORT $LN1@GetCategor
$LN5@GetCategor:

; 138  : 			}
; 139  : 		}

  00046	eb ca		 jmp	 SHORT $LN2@GetCategor
$LN3@GetCategor:

; 140  : 
; 141  : 		return nullptr;

  00048	33 c0		 xor	 eax, eax
$LN1@GetCategor:

; 142  : 	}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ENDP		; ATL::CTrace::GetCategoryName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMFNIFA@atlTraceException@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000c	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 20 00 00	 push	 8192			; 00002000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC			; ATL::_AtlGetConversionACP, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 99   : #ifdef _CONVERSION_DONT_USE_THREAD_LOCALE
; 100  : 	return CP_ACP;
; 101  : #else
; 102  : 	return CP_THREAD_ACP;

  00009	b8 03 00 00 00	 mov	 eax, 3

; 103  : #endif
; 104  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 		free(p);

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00013	83 c4 04	 add	 esp, 4

; 268  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 261  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 262  : 		return malloc(nBytes);

  00009	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00013	83 c4 04	 add	 esp, 4

; 263  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_i64Result$ = -8					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  0000c	f7 65 10	 mul	 DWORD PTR _iRight$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _i64Result$[ebp], eax
  00012	89 55 fc	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 137  : 	if(i64Result>UINT_MAX)

  00015	83 7d fc 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00019	77 06		 ja	 SHORT $LN4@AtlMultipl
  0001b	83 7d f8 ff	 cmp	 DWORD PTR _i64Result$[ebp], -1
  0001f	76 0f		 jbe	 SHORT $LN2@AtlMultipl
$LN4@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  00021	68 16 02 00 00	 push	 534			; 00000216H
  00026	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  0002b	83 c4 04	 add	 esp, 4
  0002e	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _i64Result$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _piResult$[ebp]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 142  : 	return S_OK;

  00038	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 143  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT
_dwError$ = -4						; size = 4
?AtlThrowLastWin32@ATL@@YGXXZ PROC			; ATL::AtlThrowLastWin32, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 	DWORD dwError = ::GetLastError();

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0000f	89 45 fc	 mov	 DWORD PTR _dwError$[ebp], eax

; 86   : 	AtlThrow( HRESULT_FROM_WIN32( dwError ) );

  00012	8b 45 fc	 mov	 eax, DWORD PTR _dwError$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@AtlThrowLa:

; 87   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?AtlThrowLastWin32@ATL@@YGXXZ ENDP			; ATL::AtlThrowLastWin32
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T1 = -72						; size = 8
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00009	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
  00012	6a 00		 push	 0
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00019	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
  0001e	50		 push	 eax
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
  00025	83 c1 01	 add	 ecx, 1
  00028	51		 push	 ecx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002e	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  00031	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  0003c	83 c4 14	 add	 esp, 20			; 00000014H

; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  0003f	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00046	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00048	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  0004d	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1675 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 __vscprintf_l
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1658 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1659 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	83 c9 02	 or	 ecx, 2
  00023	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00026	52		 push	 edx
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0002e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00031	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;

  00034	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00038	7d 09		 jge	 SHORT $LN3@vscprintf_
  0003a	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00041	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00043	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00046	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  00049	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1664 :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1605 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __vsnprintf_s_l
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 1607 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1584 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1585 :         int const _Result = __stdio_common_vsnprintf_s(

  00009	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00033	83 c4 20	 add	 esp, 32			; 00000020H
  00036	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;

  00039	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003d	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003f	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00046	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00048	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004b	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004e	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1590 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1538 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1539 :             int _Result;
; 1540 :             va_list _ArgList;
; 1541 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1542 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vswprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1543 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1544 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1545 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = -68						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 28640: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	7f 08		 jg	 SHORT $LN3@HRESULT_FR
  0000f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00012	89 45 bc	 mov	 DWORD PTR tv68[ebp], eax
  00015	eb 18		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00020	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00026	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0002c	89 4d bc	 mov	 DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv68[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whbase64.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whbase64.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
