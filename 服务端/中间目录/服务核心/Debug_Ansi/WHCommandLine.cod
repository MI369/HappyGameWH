; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHCommandLine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	__tcschr
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0CWHCommandLine@@QAE@XZ			; CWHCommandLine::CWHCommandLine
PUBLIC	??1CWHCommandLine@@UAE@XZ			; CWHCommandLine::~CWHCommandLine
PUBLIC	?SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z ; CWHCommandLine::SearchCommandItem
PUBLIC	??0CWHCommandLine@@QAE@ABV0@@Z			; CWHCommandLine::CWHCommandLine
PUBLIC	??4CWHCommandLine@@QAEAAV0@ABV0@@Z		; CWHCommandLine::operator=
PUBLIC	??_GCWHCommandLine@@UAEPAXI@Z			; CWHCommandLine::`scalar deleting destructor'
PUBLIC	??_ECWHCommandLine@@UAEPAXI@Z			; CWHCommandLine::`vector deleting destructor'
PUBLIC	??_7CWHCommandLine@@6B@				; CWHCommandLine::`vftable'
PUBLIC	?__LINE__Var@?0??SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z@4JA ; `CWHCommandLine::SearchCommandItem'::`1'::__LINE__Var
PUBLIC	??_C@_0EI@PLIJFJGF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_R4CWHCommandLine@@6B@			; CWHCommandLine::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHCommandLine@@@8			; CWHCommandLine `RTTI Type Descriptor'
PUBLIC	??_R3CWHCommandLine@@8				; CWHCommandLine::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHCommandLine@@8				; CWHCommandLine::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHCommandLine@@8			; CWHCommandLine::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp___mbschr:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CWHCommandLine@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHCommandLine@@8 DD FLAT:??_R0?AVCWHCommandLine@@@8 ; CWHCommandLine::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHCommandLine@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHCommandLine@@8
rdata$r	SEGMENT
??_R2CWHCommandLine@@8 DD FLAT:??_R1A@?0A@EA@CWHCommandLine@@8 ; CWHCommandLine::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHCommandLine@@8
rdata$r	SEGMENT
??_R3CWHCommandLine@@8 DD 00H				; CWHCommandLine::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHCommandLine@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHCommandLine@@@8
data$r	SEGMENT
??_R0?AVCWHCommandLine@@@8 DD FLAT:??_7type_info@@6B@	; CWHCommandLine `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHCommandLine@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHCommandLine@@6B@
rdata$r	SEGMENT
??_R4CWHCommandLine@@6B@ DD 00H				; CWHCommandLine::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHCommandLine@@@8
	DD	FLAT:??_R3CWHCommandLine@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EI@PLIJFJGF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EI@PLIJFJGF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0baH, 0cbH, 0d0H, 0c4H, '\whcommandline.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z@4JA DD 012H ; `CWHCommandLine::SearchCommandItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CWHCommandLine@@6B@
CONST	SEGMENT
??_7CWHCommandLine@@6B@ DD FLAT:??_R4CWHCommandLine@@6B@ ; CWHCommandLine::`vftable'
	DD	FLAT:??_ECWHCommandLine@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHCommandLine@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHCommandLine@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHCommandLine@@UAEPAXI@Z PROC			; CWHCommandLine::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHCommandLine@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHCommandLine@@UAE@XZ ; CWHCommandLine::~CWHCommandLine
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 04		 push	 4
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CWHCommandLine@@UAE@XZ ; CWHCommandLine::~CWHCommandLine
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 04		 push	 4
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHCommandLine@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHCommandLine@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHCommandLine@@UAEPAXI@Z ENDP			; CWHCommandLine::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHCommandLine@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHCommandLine@@UAEPAXI@Z PROC			; CWHCommandLine::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHCommandLine@@UAE@XZ ; CWHCommandLine::~CWHCommandLine
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHCommandLine@@UAEPAXI@Z ENDP			; CWHCommandLine::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHCommandLine@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHCommandLine@@QAEAAV0@ABV0@@Z PROC			; CWHCommandLine::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??4CWHCommandLine@@QAEAAV0@ABV0@@Z ENDP			; CWHCommandLine::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHCommandLine@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHCommandLine@@QAE@ABV0@@Z PROC			; CWHCommandLine::CWHCommandLine, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHCommandLine@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0CWHCommandLine@@QAE@ABV0@@Z ENDP			; CWHCommandLine::CWHCommandLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whcommandline.cpp
;	COMDAT ?SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z
_TEXT	SEGMENT
tv88 = -88						; size = 4
_nStringLength$1 = -20					; size = 4
_lpszEndString$2 = -16					; size = 4
_lpszBeginString$3 = -12				; size = 4
_nCommandLen$4 = -8					; size = 4
_this$ = -4						; size = 4
_pszCommandLine$ = 8					; size = 4
_pszCommand$ = 12					; size = 4
_szParameter$ = 16					; size = 4
_wParameterLen$ = 20					; size = 2
?SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z PROC	; CWHCommandLine::SearchCommandItem, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	//效验参数
; 20   : 	ASSERT((pszCommandLine!=NULL)&&(pszCommand!=NULL));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pszCommandLine$[ebp], 0
  00010	74 06		 je	 SHORT $LN11@SearchComm
  00012	83 7d 0c 00	 cmp	 DWORD PTR _pszCommand$[ebp], 0
  00016	75 18		 jne	 SHORT $LN12@SearchComm
$LN11@SearchComm:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z@4JA
  0001d	83 c0 02	 add	 eax, 2
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PLIJFJGF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00026	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002b	85 c0		 test	 eax, eax
  0002d	74 01		 je	 SHORT $LN12@SearchComm
  0002f	cc		 int	 3
$LN12@SearchComm:

; 21   : 	if ((pszCommandLine==NULL)||(pszCommand==NULL)) return false;

  00030	83 7d 08 00	 cmp	 DWORD PTR _pszCommandLine$[ebp], 0
  00034	74 06		 je	 SHORT $LN5@SearchComm
  00036	83 7d 0c 00	 cmp	 DWORD PTR _pszCommand$[ebp], 0
  0003a	75 07		 jne	 SHORT $LN4@SearchComm
$LN5@SearchComm:
  0003c	32 c0		 xor	 al, al
  0003e	e9 08 01 00 00	 jmp	 $LN1@SearchComm
$LN4@SearchComm:

; 22   : 
; 23   : 	//参数处理
; 24   : 	if (pszCommandLine[0]!=0)

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	6b c8 00	 imul	 ecx, eax, 0
  0004b	8b 55 08	 mov	 edx, DWORD PTR _pszCommandLine$[ebp]
  0004e	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00052	85 c0		 test	 eax, eax
  00054	0f 84 ef 00 00
	00		 je	 $LN6@SearchComm

; 25   : 	{
; 26   : 		//变量定义
; 27   : 		UINT nCommandLen=lstrlen(pszCommand);

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _pszCommand$[ebp]
  0005d	50		 push	 eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00064	89 45 f8	 mov	 DWORD PTR _nCommandLen$4[ebp], eax

; 28   : 		LPCTSTR lpszBeginString=pszCommandLine;

  00067	8b 45 08	 mov	 eax, DWORD PTR _pszCommandLine$[ebp]
  0006a	89 45 f4	 mov	 DWORD PTR _lpszBeginString$3[ebp], eax
$LN2@SearchComm:

; 29   : 
; 30   : 		//提取参数
; 31   : 		while (true)

  0006d	b8 01 00 00 00	 mov	 eax, 1
  00072	85 c0		 test	 eax, eax
  00074	0f 84 cf 00 00
	00		 je	 $LN6@SearchComm

; 32   : 		{
; 33   : 			//参数分析
; 34   : 			LPCTSTR lpszEndString=_tcschr(lpszBeginString,TEXT(' '));

  0007a	6a 20		 push	 32			; 00000020H
  0007c	8b 45 f4	 mov	 eax, DWORD PTR _lpszBeginString$3[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 __tcschr
  00085	83 c4 08	 add	 esp, 8
  00088	89 45 f0	 mov	 DWORD PTR _lpszEndString$2[ebp], eax

; 35   : 			UINT nStringLength=(lpszEndString==NULL)?lstrlen(lpszBeginString):(UINT)(lpszEndString-lpszBeginString);

  0008b	83 7d f0 00	 cmp	 DWORD PTR _lpszEndString$2[ebp], 0
  0008f	75 0f		 jne	 SHORT $LN13@SearchComm
  00091	8b 45 f4	 mov	 eax, DWORD PTR _lpszBeginString$3[ebp]
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0009b	89 45 a8	 mov	 DWORD PTR tv88[ebp], eax
  0009e	eb 09		 jmp	 SHORT $LN14@SearchComm
$LN13@SearchComm:
  000a0	8b 4d f0	 mov	 ecx, DWORD PTR _lpszEndString$2[ebp]
  000a3	2b 4d f4	 sub	 ecx, DWORD PTR _lpszBeginString$3[ebp]
  000a6	89 4d a8	 mov	 DWORD PTR tv88[ebp], ecx
$LN14@SearchComm:
  000a9	8b 55 a8	 mov	 edx, DWORD PTR tv88[ebp]
  000ac	89 55 ec	 mov	 DWORD PTR _nStringLength$1[ebp], edx

; 36   : 
; 37   : 			//命令分析
; 38   : 			if ((nStringLength>=nCommandLen)&&(memcmp(lpszBeginString,pszCommand,nCommandLen*sizeof(TCHAR))==0))

  000af	8b 45 ec	 mov	 eax, DWORD PTR _nStringLength$1[ebp]
  000b2	3b 45 f8	 cmp	 eax, DWORD PTR _nCommandLen$4[ebp]
  000b5	72 7c		 jb	 SHORT $LN7@SearchComm
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _nCommandLen$4[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d 0c	 mov	 ecx, DWORD PTR _pszCommand$[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 f4	 mov	 edx, DWORD PTR _lpszBeginString$3[ebp]
  000c2	52		 push	 edx
  000c3	e8 00 00 00 00	 call	 _memcmp
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cb	85 c0		 test	 eax, eax
  000cd	75 64		 jne	 SHORT $LN7@SearchComm

; 39   : 			{
; 40   : 				//长度效验
; 41   : 				ASSERT(wParameterLen>(nStringLength-nCommandLen));

  000cf	0f b7 45 14	 movzx	 eax, WORD PTR _wParameterLen$[ebp]
  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _nStringLength$1[ebp]
  000d6	2b 4d f8	 sub	 ecx, DWORD PTR _nCommandLen$4[ebp]
  000d9	3b c1		 cmp	 eax, ecx
  000db	77 19		 ja	 SHORT $LN15@SearchComm
  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z@4JA
  000e3	83 c2 17	 add	 edx, 23			; 00000017H
  000e6	52		 push	 edx
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@PLIJFJGF@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000ec	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000f1	85 c0		 test	 eax, eax
  000f3	74 01		 je	 SHORT $LN15@SearchComm
  000f5	cc		 int	 3
$LN15@SearchComm:

; 42   : 				if ((wParameterLen<=(nStringLength-nCommandLen))) return false;

  000f6	0f b7 45 14	 movzx	 eax, WORD PTR _wParameterLen$[ebp]
  000fa	8b 4d ec	 mov	 ecx, DWORD PTR _nStringLength$1[ebp]
  000fd	2b 4d f8	 sub	 ecx, DWORD PTR _nCommandLen$4[ebp]
  00100	3b c1		 cmp	 eax, ecx
  00102	77 04		 ja	 SHORT $LN8@SearchComm
  00104	32 c0		 xor	 al, al
  00106	eb 43		 jmp	 SHORT $LN1@SearchComm
$LN8@SearchComm:

; 43   : 
; 44   : 				//提取参数
; 45   : 				szParameter[nStringLength-nCommandLen]=0;

  00108	8b 45 ec	 mov	 eax, DWORD PTR _nStringLength$1[ebp]
  0010b	2b 45 f8	 sub	 eax, DWORD PTR _nCommandLen$4[ebp]
  0010e	8b 4d 10	 mov	 ecx, DWORD PTR _szParameter$[ebp]
  00111	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 46   : 				CopyMemory(szParameter,lpszBeginString+nCommandLen,(nStringLength-nCommandLen)*sizeof(TCHAR));

  00115	8b 45 ec	 mov	 eax, DWORD PTR _nStringLength$1[ebp]
  00118	2b 45 f8	 sub	 eax, DWORD PTR _nCommandLen$4[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d f4	 mov	 ecx, DWORD PTR _lpszBeginString$3[ebp]
  0011f	03 4d f8	 add	 ecx, DWORD PTR _nCommandLen$4[ebp]
  00122	51		 push	 ecx
  00123	8b 55 10	 mov	 edx, DWORD PTR _szParameter$[ebp]
  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 _memcpy
  0012c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   : 
; 48   : 				return true;

  0012f	b0 01		 mov	 al, 1
  00131	eb 18		 jmp	 SHORT $LN1@SearchComm
$LN7@SearchComm:

; 49   : 			}
; 50   : 
; 51   : 			//设置变量
; 52   : 			if (lpszEndString==NULL) break;

  00133	83 7d f0 00	 cmp	 DWORD PTR _lpszEndString$2[ebp], 0
  00137	75 02		 jne	 SHORT $LN9@SearchComm
  00139	eb 0e		 jmp	 SHORT $LN6@SearchComm
$LN9@SearchComm:

; 53   : 			lpszBeginString=(lpszEndString+1);

  0013b	8b 45 f0	 mov	 eax, DWORD PTR _lpszEndString$2[ebp]
  0013e	83 c0 01	 add	 eax, 1
  00141	89 45 f4	 mov	 DWORD PTR _lpszBeginString$3[ebp], eax

; 54   : 		}

  00144	e9 24 ff ff ff	 jmp	 $LN2@SearchComm
$LN6@SearchComm:

; 55   : 	}
; 56   : 
; 57   : 	return false;

  00149	32 c0		 xor	 al, al
$LN1@SearchComm:

; 58   : }

  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 10 00	 ret	 16			; 00000010H
?SearchCommandItem@CWHCommandLine@@QAE_NPBD0QADG@Z ENDP	; CWHCommandLine::SearchCommandItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whcommandline.cpp
;	COMDAT ??1CWHCommandLine@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWHCommandLine@@UAE@XZ PROC				; CWHCommandLine::~CWHCommandLine, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHCommandLine@@6B@

; 14   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CWHCommandLine@@UAE@XZ ENDP				; CWHCommandLine::~CWHCommandLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whcommandline.cpp
;	COMDAT ??0CWHCommandLine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWHCommandLine@@QAE@XZ PROC				; CWHCommandLine::CWHCommandLine, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHCommandLine@@6B@

; 9    : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CWHCommandLine@@QAE@XZ ENDP				; CWHCommandLine::CWHCommandLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\tchar.h
;	COMDAT __tcschr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcschr PROC						; COMDAT

; 1506 : __inline _CRPC _tcschr(_In_z_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbschr((_CPUC)_s1,_c);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR __c$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  00010	51		 push	 ecx
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbschr
  00017	83 c4 08	 add	 esp, 8
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
__tcschr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whcommandline.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whcommandline.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
