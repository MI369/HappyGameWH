; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHThread.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0CWHThread@@IAE@XZ				; CWHThread::CWHThread
PUBLIC	??1CWHThread@@MAE@XZ				; CWHThread::~CWHThread
PUBLIC	?IsRuning@CWHThread@@UAE_NXZ			; CWHThread::IsRuning
PUBLIC	?StartThread@CWHThread@@UAE_NXZ			; CWHThread::StartThread
PUBLIC	?ConcludeThread@CWHThread@@UAE_NK@Z		; CWHThread::ConcludeThread
PUBLIC	?GetThreadID@CWHThread@@QAEIXZ			; CWHThread::GetThreadID
PUBLIC	?GetThreadHandle@CWHThread@@QAEPAXXZ		; CWHThread::GetThreadHandle
PUBLIC	?PostThreadMessageA@CWHThread@@QAEJIIJ@Z	; CWHThread::PostThreadMessageA
PUBLIC	?OnEventThreadRun@CWHThread@@MAE_NXZ		; CWHThread::OnEventThreadRun
PUBLIC	?OnEventThreadStrat@CWHThread@@MAE_NXZ		; CWHThread::OnEventThreadStrat
PUBLIC	?OnEventThreadConclude@CWHThread@@MAE_NXZ	; CWHThread::OnEventThreadConclude
PUBLIC	?ThreadFunction@CWHThread@@CGIPAX@Z		; CWHThread::ThreadFunction
PUBLIC	??0CWHThread@@QAE@ABV0@@Z			; CWHThread::CWHThread
PUBLIC	??4CWHThread@@QAEAAV0@ABV0@@Z			; CWHThread::operator=
PUBLIC	??_GCWHThread@@MAEPAXI@Z			; CWHThread::`scalar deleting destructor'
PUBLIC	??_ECWHThread@@MAEPAXI@Z			; CWHThread::`vector deleting destructor'
PUBLIC	??_7CWHThread@@6B@				; CWHThread::`vftable'
PUBLIC	?__LINE__Var@?0??StartThread@CWHThread@@UAE_NXZ@4JA ; `CWHThread::StartThread'::`1'::__LINE__Var
PUBLIC	??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??PostThreadMessageA@CWHThread@@QAEJIIJ@Z@4JA ; `CWHThread::PostThreadMessageA'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ThreadFunction@CWHThread@@CGIPAX@Z@4JA ; `CWHThread::ThreadFunction'::`1'::__LINE__Var
PUBLIC	??_R4CWHThread@@6B@				; CWHThread::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHThread@@@8				; CWHThread `RTTI Type Descriptor'
PUBLIC	??_R3CWHThread@@8				; CWHThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHThread@@8				; CWHThread::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHThread@@8			; CWHThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memset:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetEvent@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__CreateEventA@16:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostThreadMessageA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__srand:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___beginthreadex:PROC
EXTRN	__imp___endthreadex:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CWHThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHThread@@8 DD FLAT:??_R0?AVCWHThread@@@8 ; CWHThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHThread@@8
rdata$r	SEGMENT
??_R2CWHThread@@8 DD FLAT:??_R1A@?0A@EA@CWHThread@@8	; CWHThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHThread@@8
rdata$r	SEGMENT
??_R3CWHThread@@8 DD 00H				; CWHThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHThread@@@8
data$r	SEGMENT
??_R0?AVCWHThread@@@8 DD FLAT:??_7type_info@@6B@	; CWHThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHThread@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHThread@@6B@
rdata$r	SEGMENT
??_R4CWHThread@@6B@ DD 00H				; CWHThread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHThread@@@8
	DD	FLAT:??_R3CWHThread@@8
rdata$r	ENDS
;	COMDAT ?__LINE__Var@?0??ThreadFunction@CWHThread@@CGIPAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ThreadFunction@CWHThread@@CGIPAX@Z@4JA DD 098H ; `CWHThread::ThreadFunction'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??PostThreadMessageA@CWHThread@@QAEJIIJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??PostThreadMessageA@CWHThread@@QAEJIIJ@Z@4JA DD 087H ; `CWHThread::PostThreadMessageA'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0baH, 0cbH, 0d0H, 0c4H, '\whthread.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??StartThread@CWHThread@@UAE_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??StartThread@CWHThread@@UAE_NXZ@4JA DD 031H ; `CWHThread::StartThread'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CWHThread@@6B@
CONST	SEGMENT
??_7CWHThread@@6B@ DD FLAT:??_R4CWHThread@@6B@		; CWHThread::`vftable'
	DD	FLAT:??_ECWHThread@@MAEPAXI@Z
	DD	FLAT:?IsRuning@CWHThread@@UAE_NXZ
	DD	FLAT:?StartThread@CWHThread@@UAE_NXZ
	DD	FLAT:?ConcludeThread@CWHThread@@UAE_NK@Z
	DD	FLAT:?OnEventThreadRun@CWHThread@@MAE_NXZ
	DD	FLAT:?OnEventThreadStrat@CWHThread@@MAE_NXZ
	DD	FLAT:?OnEventThreadConclude@CWHThread@@MAE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHThread@@MAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ThreadFunction@CWHThread@@CGIPAX@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ThreadFunction@CWHThread@@CGIPAX@Z$4
__catchsym$?ThreadFunction@CWHThread@@CGIPAX@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ThreadFunction@CWHThread@@CGIPAX@Z$2
__catchsym$?ThreadFunction@CWHThread@@CGIPAX@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ThreadFunction@CWHThread@@CGIPAX@Z$0
__ehfuncinfo$?ThreadFunction@CWHThread@@CGIPAX@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ThreadFunction@CWHThread@@CGIPAX@Z
	DD	03H
	DD	FLAT:__tryblocktable$?ThreadFunction@CWHThread@@CGIPAX@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ThreadFunction@CWHThread@@CGIPAX@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ThreadFunction@CWHThread@@CGIPAX@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ThreadFunction@CWHThread@@CGIPAX@Z$6
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?ThreadFunction@CWHThread@@CGIPAX@Z$7
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?ThreadFunction@CWHThread@@CGIPAX@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CWHThread@@MAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHThread@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHThread@@MAEPAXI@Z PROC				; CWHThread::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHThread@@MAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 43		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHThread@@MAE@XZ ; CWHThread::~CWHThread
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 10		 push	 16			; 00000010H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1c		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	c1 e1 04	 shl	 ecx, 4
  0005b	83 c1 04	 add	 ecx, 4
  0005e	51		 push	 ecx
  0005f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00062	83 ea 04	 sub	 edx, 4
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006b	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 e8 04	 sub	 eax, 4
  00074	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00076	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ??1CWHThread@@MAE@XZ	; CWHThread::~CWHThread
  0007e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00081	83 e0 01	 and	 eax, 1
  00084	74 0e		 je	 SHORT $LN4@vector
  00086	6a 10		 push	 16			; 00000010H
  00088	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00091	83 c4 08	 add	 esp, 8
$LN4@vector:
  00094	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00097	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHThread@@MAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHThread@@MAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHThread@@MAEPAXI@Z ENDP				; CWHThread::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHThread@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHThread@@MAEPAXI@Z PROC				; CWHThread::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHThread@@MAE@XZ	; CWHThread::~CWHThread
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 10		 push	 16			; 00000010H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHThread@@MAEPAXI@Z ENDP				; CWHThread::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHThread@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHThread@@QAEAAV0@ABV0@@Z PROC			; CWHThread::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	88 4a 04	 mov	 BYTE PTR [edx+4], cl
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0002a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??4CWHThread@@QAEAAV0@ABV0@@Z ENDP			; CWHThread::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHThread@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHThread@@QAE@ABV0@@Z PROC				; CWHThread::CWHThread, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHThread@@6B@
  00015	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00018	8a 48 04	 mov	 cl, BYTE PTR [eax+4]
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	88 4a 04	 mov	 BYTE PTR [edx+4], cl
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00027	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00033	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00036	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??0CWHThread@@QAE@ABV0@@Z ENDP				; CWHThread::CWHThread
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ?ThreadFunction@CWHThread@@CGIPAX@Z
_TEXT	SEGMENT
tv154 = -90						; size = 1
tv153 = -90						; size = 1
_bSuccess$ = -25					; size = 1
_pServiceThread$ = -24					; size = 4
_pThreadParameter$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
_pThreadData$ = 8					; size = 4
?ThreadFunction@CWHThread@@CGIPAX@Z PROC		; CWHThread::ThreadFunction, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ThreadFunction@CWHThread@@CGIPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 153  : 	//随机种子
; 154  : 	srand((DWORD)time(NULL));

  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 _time
  00033	83 c4 04	 add	 esp, 4
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  0003d	83 c4 04	 add	 esp, 4

; 155  : 
; 156  : 	//变量定义
; 157  : 	tagThreadParameter * pThreadParameter=(tagThreadParameter *)pThreadData;

  00040	8b 45 08	 mov	 eax, DWORD PTR _pThreadData$[ebp]
  00043	89 45 ec	 mov	 DWORD PTR _pThreadParameter$[ebp], eax

; 158  : 	CWHThread * pServiceThread=pThreadParameter->pServiceThread;

  00046	8b 45 ec	 mov	 eax, DWORD PTR _pThreadParameter$[ebp]
  00049	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004c	89 4d e8	 mov	 DWORD PTR _pServiceThread$[ebp], ecx

; 159  : 
; 160  : 	//启动通知
; 161  : 	try

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 162  : 	{
; 163  : 		pThreadParameter->bSuccess=pServiceThread->OnEventThreadStrat(); 

  00056	8b 45 e8	 mov	 eax, DWORD PTR _pServiceThread$[ebp]
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	8b 4d e8	 mov	 ecx, DWORD PTR _pServiceThread$[ebp]
  0005e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00061	ff d0		 call	 eax
  00063	88 45 a6	 mov	 BYTE PTR tv153[ebp], al
  00066	8b 4d ec	 mov	 ecx, DWORD PTR _pThreadParameter$[ebp]
  00069	8a 55 a6	 mov	 dl, BYTE PTR tv153[ebp]
  0006c	88 11		 mov	 BYTE PTR [ecx], dl

; 164  : 	} 

  0006e	eb 29		 jmp	 SHORT $LN14@ThreadFunc
__catch$?ThreadFunction@CWHThread@@CGIPAX@Z$0:

; 165  : 	catch (...)
; 166  : 	{
; 167  : 		//设置变量
; 168  : 		ASSERT(FALSE);

  00070	33 c0		 xor	 eax, eax
  00072	75 19		 jne	 SHORT $LN11@ThreadFunc
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ThreadFunction@CWHThread@@CGIPAX@Z@4JA
  0007a	83 c1 10	 add	 ecx, 16			; 00000010H
  0007d	51		 push	 ecx
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00083	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00088	85 c0		 test	 eax, eax
  0008a	74 01		 je	 SHORT $LN11@ThreadFunc
  0008c	cc		 int	 3
$LN11@ThreadFunc:

; 169  : 		pThreadParameter->bSuccess=false;

  0008d	8b 45 ec	 mov	 eax, DWORD PTR _pThreadParameter$[ebp]
  00090	c6 00 00	 mov	 BYTE PTR [eax], 0

; 170  : 	}

  00093	b8 00 00 00 00	 mov	 eax, $LN21@ThreadFunc
  00098	c3		 ret	 0
$LN14@ThreadFunc:
  00099	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a0	eb 07		 jmp	 SHORT __tryend$?ThreadFunction@CWHThread@@CGIPAX@Z$1
$LN21@ThreadFunc:
  000a2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?ThreadFunction@CWHThread@@CGIPAX@Z$1:

; 171  : 
; 172  : 	//设置事件
; 173  : 	bool bSuccess=pThreadParameter->bSuccess;

  000a9	8b 45 ec	 mov	 eax, DWORD PTR _pThreadParameter$[ebp]
  000ac	8a 08		 mov	 cl, BYTE PTR [eax]
  000ae	88 4d e7	 mov	 BYTE PTR _bSuccess$[ebp], cl

; 174  : 	ASSERT(pThreadParameter->hEventFinish!=NULL);

  000b1	8b 45 ec	 mov	 eax, DWORD PTR _pThreadParameter$[ebp]
  000b4	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000b8	75 19		 jne	 SHORT $LN12@ThreadFunc
  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ThreadFunction@CWHThread@@CGIPAX@Z@4JA
  000c0	83 c1 16	 add	 ecx, 22			; 00000016H
  000c3	51		 push	 ecx
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000c9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ce	85 c0		 test	 eax, eax
  000d0	74 01		 je	 SHORT $LN12@ThreadFunc
  000d2	cc		 int	 3
$LN12@ThreadFunc:

; 175  : 	if (pThreadParameter->hEventFinish!=NULL) SetEvent(pThreadParameter->hEventFinish);

  000d3	8b 45 ec	 mov	 eax, DWORD PTR _pThreadParameter$[ebp]
  000d6	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000da	74 0d		 je	 SHORT $LN5@ThreadFunc
  000dc	8b 45 ec	 mov	 eax, DWORD PTR _pThreadParameter$[ebp]
  000df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e2	51		 push	 ecx
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4
$LN5@ThreadFunc:

; 176  : 
; 177  : 	//线程处理
; 178  : 	if (bSuccess==true)

  000e9	0f b6 45 e7	 movzx	 eax, BYTE PTR _bSuccess$[ebp]
  000ed	83 f8 01	 cmp	 eax, 1
  000f0	0f 85 96 00 00
	00		 jne	 $LN6@ThreadFunc
$LN2@ThreadFunc:

; 179  : 	{
; 180  : 		//线程运行
; 181  : 		while (pServiceThread->m_bRun)

  000f6	8b 45 e8	 mov	 eax, DWORD PTR _pServiceThread$[ebp]
  000f9	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  000fd	85 c9		 test	 ecx, ecx
  000ff	74 42		 je	 SHORT $LN3@ThreadFunc

; 182  : 		{
; 183  : #ifndef _DEBUG
; 184  : 			//运行版本
; 185  : 			try
; 186  : 			{
; 187  : 				if (pServiceThread->OnEventThreadRun()==false)
; 188  : 				{
; 189  : 					break;
; 190  : 				}
; 191  : 			}
; 192  : 			catch (...)	{ }
; 193  : #else
; 194  : 			//调试版本
; 195  : 			try

  00101	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2

; 196  : 			{
; 197  : 				if (pServiceThread->OnEventThreadRun() == false)

  00108	8b 45 e8	 mov	 eax, DWORD PTR _pServiceThread$[ebp]
  0010b	8b 10		 mov	 edx, DWORD PTR [eax]
  0010d	8b 4d e8	 mov	 ecx, DWORD PTR _pServiceThread$[ebp]
  00110	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00113	ff d0		 call	 eax
  00115	88 45 a6	 mov	 BYTE PTR tv154[ebp], al
  00118	0f b6 4d a6	 movzx	 ecx, BYTE PTR tv154[ebp]
  0011c	85 c9		 test	 ecx, ecx
  0011e	75 09		 jne	 SHORT $LN8@ThreadFunc
  00120	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 198  : 				{
; 199  : 					break;

  00127	eb 1a		 jmp	 SHORT $LN3@ThreadFunc
$LN8@ThreadFunc:

; 200  : 				}
; 201  : 			}

  00129	eb 06		 jmp	 SHORT $LN16@ThreadFunc
__catch$?ThreadFunction@CWHThread@@CGIPAX@Z$2:

; 202  : 			catch (...) {}

  0012b	b8 00 00 00 00	 mov	 eax, $LN23@ThreadFunc
  00130	c3		 ret	 0
$LN16@ThreadFunc:
  00131	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00138	eb 07		 jmp	 SHORT __tryend$?ThreadFunction@CWHThread@@CGIPAX@Z$3
$LN23@ThreadFunc:
  0013a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?ThreadFunction@CWHThread@@CGIPAX@Z$3:

; 203  : #endif
; 204  : 		}

  00141	eb b3		 jmp	 SHORT $LN2@ThreadFunc
$LN3@ThreadFunc:

; 205  : 
; 206  : 		//停止通知
; 207  : 		try

  00143	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 208  : 		{ 
; 209  : 			pServiceThread->OnEventThreadConclude();

  0014a	8b 45 e8	 mov	 eax, DWORD PTR _pServiceThread$[ebp]
  0014d	8b 10		 mov	 edx, DWORD PTR [eax]
  0014f	8b 4d e8	 mov	 ecx, DWORD PTR _pServiceThread$[ebp]
  00152	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00155	ff d0		 call	 eax

; 210  : 		} 

  00157	eb 23		 jmp	 SHORT $LN18@ThreadFunc
__catch$?ThreadFunction@CWHThread@@CGIPAX@Z$4:

; 211  : 		catch (...)	{ ASSERT(FALSE); }

  00159	33 c0		 xor	 eax, eax
  0015b	75 19		 jne	 SHORT $LN13@ThreadFunc
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ThreadFunction@CWHThread@@CGIPAX@Z@4JA
  00163	83 c1 3b	 add	 ecx, 59			; 0000003bH
  00166	51		 push	 ecx
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0016c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00171	85 c0		 test	 eax, eax
  00173	74 01		 je	 SHORT $LN13@ThreadFunc
  00175	cc		 int	 3
$LN13@ThreadFunc:
  00176	b8 00 00 00 00	 mov	 eax, $LN25@ThreadFunc
  0017b	c3		 ret	 0
$LN18@ThreadFunc:
  0017c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00183	eb 07		 jmp	 SHORT $LN6@ThreadFunc
$LN25@ThreadFunc:
  00185	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN6@ThreadFunc:

; 212  : 	}
; 213  : 
; 214  : 	//中止线程
; 215  : 	_endthreadex(0L);

  0018c	6a 00		 push	 0
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___endthreadex
  00194	83 c4 04	 add	 esp, 4

; 216  : 
; 217  : 	return 0L;

  00197	33 c0		 xor	 eax, eax

; 218  : }

  00199	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0019c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a3	59		 pop	 ecx
  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ThreadFunction@CWHThread@@CGIPAX@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ThreadFunction@CWHThread@@CGIPAX@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ThreadFunction@CWHThread@@CGIPAX@Z ENDP		; CWHThread::ThreadFunction
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.h
;	COMDAT ?OnEventThreadConclude@CWHThread@@MAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEventThreadConclude@CWHThread@@MAE_NXZ PROC		; CWHThread::OnEventThreadConclude, COMDAT
; _this$ = ecx

; 54   : 	virtual bool OnEventThreadConclude() { return true; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	b0 01		 mov	 al, 1
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?OnEventThreadConclude@CWHThread@@MAE_NXZ ENDP		; CWHThread::OnEventThreadConclude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.h
;	COMDAT ?OnEventThreadStrat@CWHThread@@MAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEventThreadStrat@CWHThread@@MAE_NXZ PROC		; CWHThread::OnEventThreadStrat, COMDAT
; _this$ = ecx

; 52   : 	virtual bool OnEventThreadStrat() { return true; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	b0 01		 mov	 al, 1
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?OnEventThreadStrat@CWHThread@@MAE_NXZ ENDP		; CWHThread::OnEventThreadStrat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.h
;	COMDAT ?OnEventThreadRun@CWHThread@@MAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEventThreadRun@CWHThread@@MAE_NXZ PROC		; CWHThread::OnEventThreadRun, COMDAT
; _this$ = ecx

; 50   : 	virtual bool OnEventThreadRun() { return true; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	b0 01		 mov	 al, 1
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?OnEventThreadRun@CWHThread@@MAE_NXZ ENDP		; CWHThread::OnEventThreadRun
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ?PostThreadMessageA@CWHThread@@QAEJIIJ@Z
_TEXT	SEGMENT
_dwLastError$1 = -8					; size = 4
_this$ = -4						; size = 4
_uMessage$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?PostThreadMessageA@CWHThread@@QAEJIIJ@Z PROC		; CWHThread::PostThreadMessageA, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 136  : 	//状态效验
; 137  : 	ASSERT((m_uThreadID!=0)&&(m_hThreadHandle!=NULL));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	74 09		 je	 SHORT $LN6@PostThread
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0001c	75 19		 jne	 SHORT $LN7@PostThread
$LN6@PostThread:
  0001e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??PostThreadMessageA@CWHThread@@QAEJIIJ@Z@4JA
  00024	83 c2 02	 add	 edx, 2
  00027	52		 push	 edx
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN7@PostThread
  00036	cc		 int	 3
$LN7@PostThread:

; 138  : 	if ((m_uThreadID==0)||(m_hThreadHandle==NULL)) return false;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003e	74 09		 je	 SHORT $LN3@PostThread
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00047	75 04		 jne	 SHORT $LN2@PostThread
$LN3@PostThread:
  00049	33 c0		 xor	 eax, eax
  0004b	eb 2d		 jmp	 SHORT $LN1@PostThread
$LN2@PostThread:

; 139  : 
; 140  : 	//投递消息
; 141  : 	if (::PostThreadMessage(m_uThreadID,uMessage,wParam,lParam)==FALSE)

  0004d	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 08	 mov	 edx, DWORD PTR _uMessage$[ebp]
  00058	52		 push	 edx
  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005f	51		 push	 ecx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostThreadMessageA@16
  00066	85 c0		 test	 eax, eax
  00068	75 0e		 jne	 SHORT $LN4@PostThread

; 142  : 	{
; 143  : 		DWORD dwLastError=GetLastError();

  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00070	89 45 f8	 mov	 DWORD PTR _dwLastError$1[ebp], eax

; 144  : 		return dwLastError;

  00073	8b 45 f8	 mov	 eax, DWORD PTR _dwLastError$1[ebp]
  00076	eb 02		 jmp	 SHORT $LN1@PostThread
$LN4@PostThread:

; 145  : 	}
; 146  : 
; 147  : 	return 0L;

  00078	33 c0		 xor	 eax, eax
$LN1@PostThread:

; 148  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 0c 00	 ret	 12			; 0000000cH
?PostThreadMessageA@CWHThread@@QAEJIIJ@Z ENDP		; CWHThread::PostThreadMessageA
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.h
;	COMDAT ?GetThreadHandle@CWHThread@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetThreadHandle@CWHThread@@QAEPAXXZ PROC		; CWHThread::GetThreadHandle, COMDAT
; _this$ = ecx

; 43   : 	HANDLE GetThreadHandle() { return m_hThreadHandle; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetThreadHandle@CWHThread@@QAEPAXXZ ENDP		; CWHThread::GetThreadHandle
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.h
;	COMDAT ?GetThreadID@CWHThread@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetThreadID@CWHThread@@QAEIXZ PROC			; CWHThread::GetThreadID, COMDAT
; _this$ = ecx

; 41   : 	UINT GetThreadID() { return m_uThreadID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetThreadID@CWHThread@@QAEIXZ ENDP			; CWHThread::GetThreadID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ?ConcludeThread@CWHThread@@UAE_NK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwMillSeconds$ = 8					; size = 4
?ConcludeThread@CWHThread@@UAE_NK@Z PROC		; CWHThread::ConcludeThread, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	//停止线程
; 107  : 	if (IsRuning()==true)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00017	ff d0		 call	 eax
  00019	0f b6 c8	 movzx	 ecx, al
  0001c	83 f9 01	 cmp	 ecx, 1
  0001f	75 23		 jne	 SHORT $LN2@ConcludeTh

; 108  : 	{
; 109  : 		//设置变量
; 110  : 		m_bRun=false;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 111  : 
; 112  : 		//停止等待
; 113  : 		if (WaitForSingleObject(m_hThreadHandle,dwMillSeconds)==WAIT_TIMEOUT)

  00028	8b 45 08	 mov	 eax, DWORD PTR _dwMillSeconds$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00032	52		 push	 edx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
  00039	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  0003e	75 04		 jne	 SHORT $LN2@ConcludeTh

; 114  : 		{
; 115  : 			return false;

  00040	32 c0		 xor	 al, al
  00042	eb 2c		 jmp	 SHORT $LN1@ConcludeTh
$LN2@ConcludeTh:

; 116  : 		}
; 117  : 	}
; 118  : 
; 119  : 	//设置变量
; 120  : 	if (m_hThreadHandle!=NULL)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0004b	74 21		 je	 SHORT $LN4@ConcludeTh

; 121  : 	{
; 122  : 		//关闭句柄
; 123  : 		CloseHandle(m_hThreadHandle);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00053	51		 push	 ecx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 124  : 
; 125  : 		//设置变量
; 126  : 		m_uThreadID=0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 127  : 		m_hThreadHandle=NULL;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN4@ConcludeTh:

; 128  : 	}
; 129  : 
; 130  : 	return true;

  0006e	b0 01		 mov	 al, 1
$LN1@ConcludeTh:

; 131  : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?ConcludeThread@CWHThread@@UAE_NK@Z ENDP		; CWHThread::ConcludeThread
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ?StartThread@CWHThread@@UAE_NXZ
_TEXT	SEGMENT
_ThreadParameter$ = -16					; size = 12
_this$ = -4						; size = 4
?StartThread@CWHThread@@UAE_NXZ PROC			; CWHThread::StartThread, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	//效验状态
; 51   : 	ASSERT(IsRuning()==false);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00017	ff d0		 call	 eax
  00019	0f b6 c8	 movzx	 ecx, al
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 19		 je	 SHORT $LN8@StartThrea
  00020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??StartThread@CWHThread@@UAE_NXZ@4JA
  00026	83 c2 02	 add	 edx, 2
  00029	52		 push	 edx
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00034	85 c0		 test	 eax, eax
  00036	74 01		 je	 SHORT $LN8@StartThrea
  00038	cc		 int	 3
$LN8@StartThrea:

; 52   : 	if (IsRuning()==true) return false;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	ff d0		 call	 eax
  00046	0f b6 c8	 movzx	 ecx, al
  00049	83 f9 01	 cmp	 ecx, 1
  0004c	75 07		 jne	 SHORT $LN2@StartThrea
  0004e	32 c0		 xor	 al, al
  00050	e9 f3 00 00 00	 jmp	 $LN1@StartThrea
$LN2@StartThrea:

; 53   : 
; 54   : 	//清理变量
; 55   : 	if (m_hThreadHandle!=NULL) 

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0005c	74 21		 je	 SHORT $LN3@StartThrea

; 56   : 	{
; 57   : 		//关闭句柄
; 58   : 		CloseHandle(m_hThreadHandle);

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00064	51		 push	 ecx
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 59   : 
; 60   : 		//设置变量
; 61   : 		m_uThreadID=0;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 62   : 		m_hThreadHandle=NULL;

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN3@StartThrea:

; 63   : 	}
; 64   : 
; 65   : 	//变量定义
; 66   : 	tagThreadParameter ThreadParameter;
; 67   : 	ZeroMemory(&ThreadParameter,sizeof(ThreadParameter));

  0007f	6a 0c		 push	 12			; 0000000cH
  00081	6a 00		 push	 0
  00083	8d 45 f0	 lea	 eax, DWORD PTR _ThreadParameter$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _memset
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 68   : 
; 69   : 	//设置变量
; 70   : 	ThreadParameter.bSuccess=false;

  0008f	c6 45 f0 00	 mov	 BYTE PTR _ThreadParameter$[ebp], 0

; 71   : 	ThreadParameter.pServiceThread=this;

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	89 45 f8	 mov	 DWORD PTR _ThreadParameter$[ebp+8], eax

; 72   : 	ThreadParameter.hEventFinish=CreateEvent(NULL,FALSE,FALSE,NULL);

  00099	6a 00		 push	 0
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventA@16
  000a7	89 45 f4	 mov	 DWORD PTR _ThreadParameter$[ebp+4], eax

; 73   : 
; 74   : 	//效验状态
; 75   : 	ASSERT(ThreadParameter.hEventFinish!=NULL);

  000aa	83 7d f4 00	 cmp	 DWORD PTR _ThreadParameter$[ebp+4], 0
  000ae	75 18		 jne	 SHORT $LN9@StartThrea
  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??StartThread@CWHThread@@UAE_NXZ@4JA
  000b5	83 c0 1a	 add	 eax, 26			; 0000001aH
  000b8	50		 push	 eax
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@IENOGDIM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000be	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000c3	85 c0		 test	 eax, eax
  000c5	74 01		 je	 SHORT $LN9@StartThrea
  000c7	cc		 int	 3
$LN9@StartThrea:

; 76   : 	if (ThreadParameter.hEventFinish==NULL) return false;

  000c8	83 7d f4 00	 cmp	 DWORD PTR _ThreadParameter$[ebp+4], 0
  000cc	75 04		 jne	 SHORT $LN4@StartThrea
  000ce	32 c0		 xor	 al, al
  000d0	eb 76		 jmp	 SHORT $LN1@StartThrea
$LN4@StartThrea:

; 77   : 
; 78   : 	//启动线程
; 79   : 	m_bRun=true;

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 80   : 	m_hThreadHandle=(HANDLE)::_beginthreadex(NULL,0,ThreadFunction,&ThreadParameter,0,&m_uThreadID);

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	83 c0 08	 add	 eax, 8
  000df	50		 push	 eax
  000e0	6a 00		 push	 0
  000e2	8d 4d f0	 lea	 ecx, DWORD PTR _ThreadParameter$[ebp]
  000e5	51		 push	 ecx
  000e6	68 00 00 00 00	 push	 OFFSET ?ThreadFunction@CWHThread@@CGIPAX@Z ; CWHThread::ThreadFunction
  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___beginthreadex
  000f5	83 c4 18	 add	 esp, 24			; 00000018H
  000f8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000fb	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 81   : 
; 82   : 	//错误判断
; 83   : 	if (m_hThreadHandle==INVALID_HANDLE_VALUE)

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00101	83 78 0c ff	 cmp	 DWORD PTR [eax+12], -1
  00105	75 0e		 jne	 SHORT $LN5@StartThrea

; 84   : 	{
; 85   : 		CloseHandle(ThreadParameter.hEventFinish);

  00107	8b 45 f4	 mov	 eax, DWORD PTR _ThreadParameter$[ebp+4]
  0010a	50		 push	 eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 86   : 		return false;

  00111	32 c0		 xor	 al, al
  00113	eb 33		 jmp	 SHORT $LN1@StartThrea
$LN5@StartThrea:

; 87   : 	}
; 88   : 
; 89   : 	//等待事件
; 90   : 	WaitForSingleObject(ThreadParameter.hEventFinish,INFINITE);

  00115	6a ff		 push	 -1
  00117	8b 45 f4	 mov	 eax, DWORD PTR _ThreadParameter$[ebp+4]
  0011a	50		 push	 eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 91   : 	CloseHandle(ThreadParameter.hEventFinish);

  00121	8b 45 f4	 mov	 eax, DWORD PTR _ThreadParameter$[ebp+4]
  00124	50		 push	 eax
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 92   : 
; 93   : 	//判断错误
; 94   : 	if (ThreadParameter.bSuccess==false)

  0012b	0f b6 45 f0	 movzx	 eax, BYTE PTR _ThreadParameter$[ebp]
  0012f	85 c0		 test	 eax, eax
  00131	75 13		 jne	 SHORT $LN6@StartThrea

; 95   : 	{
; 96   : 		ConcludeThread(INFINITE);

  00133	6a ff		 push	 -1
  00135	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00138	8b 10		 mov	 edx, DWORD PTR [eax]
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00140	ff d0		 call	 eax

; 97   : 		return false;

  00142	32 c0		 xor	 al, al
  00144	eb 02		 jmp	 SHORT $LN1@StartThrea
$LN6@StartThrea:

; 98   : 	}
; 99   : 
; 100  : 	return true;

  00146	b0 01		 mov	 al, 1
$LN1@StartThrea:

; 101  : }

  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
?StartThread@CWHThread@@UAE_NXZ ENDP			; CWHThread::StartThread
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ?IsRuning@CWHThread@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRuning@CWHThread@@UAE_NXZ PROC			; CWHThread::IsRuning, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 	//运行检测
; 41   : 	if (m_hThreadHandle==NULL) return false;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	75 04		 jne	 SHORT $LN2@IsRuning
  00015	32 c0		 xor	 al, al
  00017	eb 1c		 jmp	 SHORT $LN1@IsRuning
$LN2@IsRuning:

; 42   : 	if (WaitForSingleObject(m_hThreadHandle,0)!=WAIT_TIMEOUT) return false;

  00019	6a 00		 push	 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00021	51		 push	 ecx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
  00028	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  0002d	74 04		 je	 SHORT $LN3@IsRuning
  0002f	32 c0		 xor	 al, al
  00031	eb 02		 jmp	 SHORT $LN1@IsRuning
$LN3@IsRuning:

; 43   : 
; 44   : 	return true;

  00033	b0 01		 mov	 al, 1
$LN1@IsRuning:

; 45   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?IsRuning@CWHThread@@UAE_NXZ ENDP			; CWHThread::IsRuning
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ??1CWHThread@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CWHThread@@MAE@XZ PROC				; CWHThread::~CWHThread, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CWHThread@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHThread@@6B@

; 31   : 	//停止线程
; 32   : 	ConcludeThread(INFINITE);

  00034	6a ff		 push	 -1
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?ConcludeThread@CWHThread@@UAE_NK@Z ; CWHThread::ConcludeThread

; 33   : 
; 34   : 	return;
; 35   : }

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CWHThread@@MAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CWHThread@@MAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CWHThread@@MAE@XZ ENDP				; CWHThread::~CWHThread
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ??0CWHThread@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWHThread@@IAE@XZ PROC				; CWHThread::CWHThread, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHThread@@6B@

; 20   : 	//设置变量
; 21   : 	m_bRun=false;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 22   : 	m_uThreadID=0;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 23   : 	m_hThreadHandle=NULL;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 24   : 
; 25   : 	return;
; 26   : }

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??0CWHThread@@IAE@XZ ENDP				; CWHThread::CWHThread
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  :             return _time64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00013	83 c4 04	 add	 esp, 4

; 537  :         }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whthread.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
