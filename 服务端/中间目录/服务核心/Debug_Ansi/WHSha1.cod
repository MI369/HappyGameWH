; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHSha1.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0WHSha1@@QAE@XZ				; WHSha1::WHSha1
PUBLIC	??1WHSha1@@UAE@XZ				; WHSha1::~WHSha1
PUBLIC	?Reset@WHSha1@@QAEXXZ				; WHSha1::Reset
PUBLIC	?Result@WHSha1@@QAE_NPAI@Z			; WHSha1::Result
PUBLIC	?Input@WHSha1@@QAEXPBEI@Z			; WHSha1::Input
PUBLIC	?Input@WHSha1@@QAEXPBDI@Z			; WHSha1::Input
PUBLIC	?Input@WHSha1@@QAEXE@Z				; WHSha1::Input
PUBLIC	?Input@WHSha1@@QAEXD@Z				; WHSha1::Input
PUBLIC	??6WHSha1@@QAEAAV0@PBD@Z			; WHSha1::operator<<
PUBLIC	??6WHSha1@@QAEAAV0@PBE@Z			; WHSha1::operator<<
PUBLIC	??6WHSha1@@QAEAAV0@D@Z				; WHSha1::operator<<
PUBLIC	??6WHSha1@@QAEAAV0@E@Z				; WHSha1::operator<<
PUBLIC	?ProcessMessageBlock@WHSha1@@AAEXXZ		; WHSha1::ProcessMessageBlock
PUBLIC	?PadMessage@WHSha1@@AAEXXZ			; WHSha1::PadMessage
PUBLIC	?CircularShift@WHSha1@@AAEIHI@Z			; WHSha1::CircularShift
PUBLIC	??0WHSha1@@QAE@ABV0@@Z				; WHSha1::WHSha1
PUBLIC	??4WHSha1@@QAEAAV0@ABV0@@Z			; WHSha1::operator=
PUBLIC	??_GWHSha1@@UAEPAXI@Z				; WHSha1::`scalar deleting destructor'
PUBLIC	??_EWHSha1@@UAEPAXI@Z				; WHSha1::`vector deleting destructor'
PUBLIC	??_7WHSha1@@6B@					; WHSha1::`vftable'
PUBLIC	??_R4WHSha1@@6B@				; WHSha1::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVWHSha1@@@8				; WHSha1 `RTTI Type Descriptor'
PUBLIC	??_R3WHSha1@@8					; WHSha1::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2WHSha1@@8					; WHSha1::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@WHSha1@@8				; WHSha1::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@WHSha1@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@WHSha1@@8 DD FLAT:??_R0?AVWHSha1@@@8	; WHSha1::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3WHSha1@@8
rdata$r	ENDS
;	COMDAT ??_R2WHSha1@@8
rdata$r	SEGMENT
??_R2WHSha1@@8 DD FLAT:??_R1A@?0A@EA@WHSha1@@8		; WHSha1::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3WHSha1@@8
rdata$r	SEGMENT
??_R3WHSha1@@8 DD 00H					; WHSha1::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2WHSha1@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWHSha1@@@8
data$r	SEGMENT
??_R0?AVWHSha1@@@8 DD FLAT:??_7type_info@@6B@		; WHSha1 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWHSha1@@', 00H
data$r	ENDS
;	COMDAT ??_R4WHSha1@@6B@
rdata$r	SEGMENT
??_R4WHSha1@@6B@ DD 00H					; WHSha1::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVWHSha1@@@8
	DD	FLAT:??_R3WHSha1@@8
rdata$r	ENDS
;	COMDAT ??_7WHSha1@@6B@
CONST	SEGMENT
??_7WHSha1@@6B@ DD FLAT:??_R4WHSha1@@6B@		; WHSha1::`vftable'
	DD	FLAT:??_EWHSha1@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EWHSha1@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EWHSha1@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EWHSha1@@UAEPAXI@Z PROC				; WHSha1::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EWHSha1@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 41		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1WHSha1@@UAE@XZ ; WHSha1::~WHSha1
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 68		 push	 104			; 00000068H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1a		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	6b 48 fc 68	 imul	 ecx, DWORD PTR [eax-4], 104
  00059	83 c1 04	 add	 ecx, 4
  0005c	51		 push	 ecx
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 ea 04	 sub	 edx, 4
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00069	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 e8 04	 sub	 eax, 4
  00072	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1WHSha1@@UAE@XZ	; WHSha1::~WHSha1
  0007c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007f	83 e0 01	 and	 eax, 1
  00082	74 0e		 je	 SHORT $LN4@vector
  00084	6a 68		 push	 104			; 00000068H
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
$LN4@vector:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EWHSha1@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EWHSha1@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EWHSha1@@UAEPAXI@Z ENDP				; WHSha1::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GWHSha1@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWHSha1@@UAEPAXI@Z PROC				; WHSha1::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1WHSha1@@UAE@XZ	; WHSha1::~WHSha1
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 68		 push	 104			; 00000068H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GWHSha1@@UAEPAXI@Z ENDP				; WHSha1::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4WHSha1@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_$S14$1 = -12						; size = 4
_$S13$2 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4WHSha1@@QAEAAV0@ABV0@@Z PROC				; WHSha1::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _$S13$2[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _$S13$2[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _$S13$2[ebp], eax
$LN4@operator:
  0001e	83 7d f8 05	 cmp	 DWORD PTR _$S13$2[ebp], 5
  00022	73 16		 jae	 SHORT $LN3@operator
  00024	8b 45 f8	 mov	 eax, DWORD PTR _$S13$2[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _$S13$2[ebp]
  0002d	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00030	8b 54 96 04	 mov	 edx, DWORD PTR [esi+edx*4+4]
  00034	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx
  00038	eb db		 jmp	 SHORT $LN2@operator
$LN3@operator:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00040	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00043	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0004c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0004f	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00052	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _$S14$1[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0005b	8b 45 f4	 mov	 eax, DWORD PTR _$S14$1[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f4	 mov	 DWORD PTR _$S14$1[ebp], eax
$LN7@operator:
  00064	83 7d f4 40	 cmp	 DWORD PTR _$S14$1[ebp], 64 ; 00000040H
  00068	73 14		 jae	 SHORT $LN6@operator
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	03 45 f4	 add	 eax, DWORD PTR _$S14$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00073	03 4d f4	 add	 ecx, DWORD PTR _$S14$1[ebp]
  00076	8a 51 20	 mov	 dl, BYTE PTR [ecx+32]
  00079	88 50 20	 mov	 BYTE PTR [eax+32], dl
  0007c	eb dd		 jmp	 SHORT $LN5@operator
$LN6@operator:
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00084	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00087	89 50 60	 mov	 DWORD PTR [eax+96], edx
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00090	8a 51 64	 mov	 dl, BYTE PTR [ecx+100]
  00093	88 50 64	 mov	 BYTE PTR [eax+100], dl
  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0009c	8a 51 65	 mov	 dl, BYTE PTR [ecx+101]
  0009f	88 50 65	 mov	 BYTE PTR [eax+101], dl
  000a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
??4WHSha1@@QAEAAV0@ABV0@@Z ENDP				; WHSha1::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0WHSha1@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0WHSha1@@QAE@ABV0@@Z PROC				; WHSha1::WHSha1, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7WHSha1@@6B@
  00015	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 04	 add	 ecx, 4
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	89 11		 mov	 DWORD PTR [ecx], edx
  00025	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00028	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0002b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002e	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00031	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00034	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00037	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0003a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00043	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00046	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0004f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00052	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00055	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00058	83 c6 20	 add	 esi, 32			; 00000020H
  0005b	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  0005e	83 c7 20	 add	 edi, 32			; 00000020H
  00061	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00066	f3 a5		 rep movsd
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0006e	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00071	89 50 60	 mov	 DWORD PTR [eax+96], edx
  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0007a	8a 51 64	 mov	 dl, BYTE PTR [ecx+100]
  0007d	88 50 64	 mov	 BYTE PTR [eax+100], dl
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00086	8a 51 65	 mov	 dl, BYTE PTR [ecx+101]
  00089	88 50 65	 mov	 BYTE PTR [eax+101], dl
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
??0WHSha1@@QAE@ABV0@@Z ENDP				; WHSha1::WHSha1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?CircularShift@WHSha1@@AAEIHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
_word$ = 12						; size = 4
?CircularShift@WHSha1@@AAEIHI@Z PROC			; WHSha1::CircularShift, COMDAT
; _this$ = ecx

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 588  : 	return ((word << bits) & 0xFFFFFFFF) | ((word & 0xFFFFFFFF) >> (32 - bits));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _word$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _bits$[ebp]
  00012	d3 e0		 shl	 eax, cl
  00014	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00019	2b 4d 08	 sub	 ecx, DWORD PTR _bits$[ebp]
  0001c	8b 55 0c	 mov	 edx, DWORD PTR _word$[ebp]
  0001f	d3 ea		 shr	 edx, cl
  00021	0b c2		 or	 eax, edx

; 589  : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?CircularShift@WHSha1@@AAEIHI@Z ENDP			; WHSha1::CircularShift
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?PadMessage@WHSha1@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PadMessage@WHSha1@@AAEXXZ PROC				; WHSha1::PadMessage, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 522  : 	/*
; 523  : 	 *  Check to see if the current message block is too small to hold
; 524  : 	 *  the initial padding bits and length.  If so, we will pad the
; 525  : 	 *  block, process it, and then continue padding into a second block.
; 526  : 	 */
; 527  : 	if (Message_Block_Index > 55)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 60 37	 cmp	 DWORD PTR [eax+96], 55	; 00000037H
  00013	7e 77		 jle	 SHORT $LN8@PadMessage

; 528  : 	{
; 529  : 		Message_Block[Message_Block_Index++] = 0x80;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c6 44 0a 20 80	 mov	 BYTE PTR [edx+ecx+32], 128 ; 00000080H
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00029	83 c1 01	 add	 ecx, 1
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN2@PadMessage:

; 530  : 		while (Message_Block_Index < 64)

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 78 60 40	 cmp	 DWORD PTR [eax+96], 64	; 00000040H
  00039	7d 1f		 jge	 SHORT $LN3@PadMessage

; 531  : 		{
; 532  : 			Message_Block[Message_Block_Index++] = 0;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	c6 44 0a 20 00	 mov	 BYTE PTR [edx+ecx+32], 0
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0004f	83 c1 01	 add	 ecx, 1
  00052	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00055	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 533  : 		}

  00058	eb d8		 jmp	 SHORT $LN2@PadMessage
$LN3@PadMessage:

; 534  : 
; 535  : 		ProcessMessageBlock();

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?ProcessMessageBlock@WHSha1@@AAEXXZ ; WHSha1::ProcessMessageBlock
$LN4@PadMessage:

; 536  : 
; 537  : 		while (Message_Block_Index < 56)

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	83 78 60 38	 cmp	 DWORD PTR [eax+96], 56	; 00000038H
  00069	7d 1f		 jge	 SHORT $LN5@PadMessage

; 538  : 		{
; 539  : 			Message_Block[Message_Block_Index++] = 0;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00071	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00074	c6 44 0a 20 00	 mov	 BYTE PTR [edx+ecx+32], 0
  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0007f	83 c1 01	 add	 ecx, 1
  00082	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00085	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 540  : 		}

  00088	eb d8		 jmp	 SHORT $LN4@PadMessage
$LN5@PadMessage:

; 541  : 	}
; 542  : 	else

  0008a	eb 45		 jmp	 SHORT $LN9@PadMessage
$LN8@PadMessage:

; 543  : 	{
; 544  : 		Message_Block[Message_Block_Index++] = 0x80;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	c6 44 0a 20 80	 mov	 BYTE PTR [edx+ecx+32], 128 ; 00000080H
  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000a0	83 c1 01	 add	 ecx, 1
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN6@PadMessage:

; 545  : 		while (Message_Block_Index < 56)

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	83 78 60 38	 cmp	 DWORD PTR [eax+96], 56	; 00000038H
  000b0	7d 1f		 jge	 SHORT $LN9@PadMessage

; 546  : 		{
; 547  : 			Message_Block[Message_Block_Index++] = 0;

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000b8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bb	c6 44 0a 20 00	 mov	 BYTE PTR [edx+ecx+32], 0
  000c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000c6	83 c1 01	 add	 ecx, 1
  000c9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cc	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 548  : 		}

  000cf	eb d8		 jmp	 SHORT $LN6@PadMessage
$LN9@PadMessage:

; 549  : 
; 550  : 	}
; 551  : 
; 552  : 	/*
; 553  : 	 *  Store the message length as the last 8 octets
; 554  : 	 */
; 555  : 	Message_Block[56] = (Length_High >> 24) & 0xFF;

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000d7	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000da	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000e0	ba 01 00 00 00	 mov	 edx, 1
  000e5	6b c2 38	 imul	 eax, edx, 56
  000e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000eb	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 556  : 	Message_Block[57] = (Length_High >> 16) & 0xFF;

  000ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000f5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000f8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000fe	ba 01 00 00 00	 mov	 edx, 1
  00103	6b c2 39	 imul	 eax, edx, 57
  00106	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00109	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 557  : 	Message_Block[58] = (Length_High >> 8) & 0xFF;

  0010d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00110	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00113	c1 e9 08	 shr	 ecx, 8
  00116	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0011c	ba 01 00 00 00	 mov	 edx, 1
  00121	6b c2 3a	 imul	 eax, edx, 58
  00124	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00127	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 558  : 	Message_Block[59] = (Length_High) & 0xFF;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00131	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00137	ba 01 00 00 00	 mov	 edx, 1
  0013c	6b c2 3b	 imul	 eax, edx, 59
  0013f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00142	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 559  : 	Message_Block[60] = (Length_Low >> 24) & 0xFF;

  00146	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00149	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0014c	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0014f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00155	ba 01 00 00 00	 mov	 edx, 1
  0015a	6b c2 3c	 imul	 eax, edx, 60
  0015d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00160	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 560  : 	Message_Block[61] = (Length_Low >> 16) & 0xFF;

  00164	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00167	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0016a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0016d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00173	ba 01 00 00 00	 mov	 edx, 1
  00178	6b c2 3d	 imul	 eax, edx, 61
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0017e	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 561  : 	Message_Block[62] = (Length_Low >> 8) & 0xFF;

  00182	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00188	c1 e9 08	 shr	 ecx, 8
  0018b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00191	ba 01 00 00 00	 mov	 edx, 1
  00196	6b c2 3e	 imul	 eax, edx, 62
  00199	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0019c	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 562  : 	Message_Block[63] = (Length_Low) & 0xFF;

  001a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  001a6	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001ac	ba 01 00 00 00	 mov	 edx, 1
  001b1	6b c2 3f	 imul	 eax, edx, 63
  001b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001b7	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl

; 563  : 
; 564  : 	ProcessMessageBlock();

  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001be	e8 00 00 00 00	 call	 ?ProcessMessageBlock@WHSha1@@AAEXXZ ; WHSha1::ProcessMessageBlock

; 565  : }

  001c3	5f		 pop	 edi
  001c4	5e		 pop	 esi
  001c5	5b		 pop	 ebx
  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c3		 ret	 0
?PadMessage@WHSha1@@AAEXXZ ENDP				; WHSha1::PadMessage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?ProcessMessageBlock@WHSha1@@AAEXXZ
_TEXT	SEGMENT
_E$ = -372						; size = 4
_D$ = -368						; size = 4
_C$ = -364						; size = 4
_B$ = -360						; size = 4
_A$ = -356						; size = 4
_W$ = -352						; size = 320
_temp$ = -32						; size = 4
_t$ = -28						; size = 4
_K$ = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcessMessageBlock@WHSha1@@AAEXXZ PROC		; WHSha1::ProcessMessageBlock, COMDAT
; _this$ = ecx

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 01 00
	00		 sub	 esp, 436		; 000001b4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 412  : 	const unsigned K[] = {               // Constants defined for SHA-1
; 413  : 								0x5A827999,

  00019	c7 45 e8 99 79
	82 5a		 mov	 DWORD PTR _K$[ebp], 1518500249 ; 5a827999H

; 414  : 								0x6ED9EBA1,

  00020	c7 45 ec a1 eb
	d9 6e		 mov	 DWORD PTR _K$[ebp+4], 1859775393 ; 6ed9eba1H

; 415  : 								0x8F1BBCDC,

  00027	c7 45 f0 dc bc
	1b 8f		 mov	 DWORD PTR _K$[ebp+8], -1894007588 ; 8f1bbcdcH

; 416  : 								0xCA62C1D6

  0002e	c7 45 f4 d6 c1
	62 ca		 mov	 DWORD PTR _K$[ebp+12], -899497514 ; ca62c1d6H

; 417  : 	};
; 418  : 	int         t;                          // Loop counter
; 419  : 	unsigned    temp;                       // Temporary word value
; 420  : 	unsigned    W[80];                      // Word sequence
; 421  : 	unsigned    A, B, C, D, E;              // Word buffers
; 422  : 
; 423  : 	/*
; 424  : 	 *  Initialize the first 16 words in the array W
; 425  : 	 */
; 426  : 	for (t = 0; t < 16; t++)

  00035	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0
  0003c	eb 09		 jmp	 SHORT $LN4@ProcessMes
$LN2@ProcessMes:
  0003e	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 e4	 mov	 DWORD PTR _t$[ebp], eax
$LN4@ProcessMes:
  00047	83 7d e4 10	 cmp	 DWORD PTR _t$[ebp], 16	; 00000010H
  0004b	0f 8d 80 00 00
	00		 jge	 $LN3@ProcessMes

; 427  : 	{
; 428  : 		W[t] = ((unsigned)Message_Block[t * 4]) << 24;

  00051	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	0f b6 54 81 20	 movzx	 edx, BYTE PTR [ecx+eax*4+32]
  0005c	c1 e2 18	 shl	 edx, 24			; 00000018H
  0005f	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  00062	89 94 85 a0 fe
	ff ff		 mov	 DWORD PTR _W$[ebp+eax*4], edx

; 429  : 		W[t] |= ((unsigned)Message_Block[t * 4 + 1]) << 16;

  00069	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	0f b6 54 81 21	 movzx	 edx, BYTE PTR [ecx+eax*4+33]
  00074	c1 e2 10	 shl	 edx, 16			; 00000010H
  00077	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  0007a	0b 94 85 a0 fe
	ff ff		 or	 edx, DWORD PTR _W$[ebp+eax*4]
  00081	8b 4d e4	 mov	 ecx, DWORD PTR _t$[ebp]
  00084	89 94 8d a0 fe
	ff ff		 mov	 DWORD PTR _W$[ebp+ecx*4], edx

; 430  : 		W[t] |= ((unsigned)Message_Block[t * 4 + 2]) << 8;

  0008b	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	0f b6 54 81 22	 movzx	 edx, BYTE PTR [ecx+eax*4+34]
  00096	c1 e2 08	 shl	 edx, 8
  00099	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  0009c	0b 94 85 a0 fe
	ff ff		 or	 edx, DWORD PTR _W$[ebp+eax*4]
  000a3	8b 4d e4	 mov	 ecx, DWORD PTR _t$[ebp]
  000a6	89 94 8d a0 fe
	ff ff		 mov	 DWORD PTR _W$[ebp+ecx*4], edx

; 431  : 		W[t] |= ((unsigned)Message_Block[t * 4 + 3]);

  000ad	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	0f b6 54 81 23	 movzx	 edx, BYTE PTR [ecx+eax*4+35]
  000b8	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  000bb	0b 94 85 a0 fe
	ff ff		 or	 edx, DWORD PTR _W$[ebp+eax*4]
  000c2	8b 4d e4	 mov	 ecx, DWORD PTR _t$[ebp]
  000c5	89 94 8d a0 fe
	ff ff		 mov	 DWORD PTR _W$[ebp+ecx*4], edx

; 432  : 	}

  000cc	e9 6d ff ff ff	 jmp	 $LN2@ProcessMes
$LN3@ProcessMes:

; 433  : 
; 434  : 	for (t = 16; t < 80; t++)

  000d1	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _t$[ebp], 16	; 00000010H
  000d8	eb 09		 jmp	 SHORT $LN7@ProcessMes
$LN5@ProcessMes:
  000da	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 e4	 mov	 DWORD PTR _t$[ebp], eax
$LN7@ProcessMes:
  000e3	83 7d e4 50	 cmp	 DWORD PTR _t$[ebp], 80	; 00000050H
  000e7	7d 3f		 jge	 SHORT $LN6@ProcessMes

; 435  : 	{
; 436  : 		W[t] = CircularShift(1, W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16]);

  000e9	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  000ec	8b 4d e4	 mov	 ecx, DWORD PTR _t$[ebp]
  000ef	8b 94 85 94 fe
	ff ff		 mov	 edx, DWORD PTR _W$[ebp+eax*4-12]
  000f6	33 94 8d 80 fe
	ff ff		 xor	 edx, DWORD PTR _W$[ebp+ecx*4-32]
  000fd	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  00100	33 94 85 68 fe
	ff ff		 xor	 edx, DWORD PTR _W$[ebp+eax*4-56]
  00107	8b 4d e4	 mov	 ecx, DWORD PTR _t$[ebp]
  0010a	33 94 8d 60 fe
	ff ff		 xor	 edx, DWORD PTR _W$[ebp+ecx*4-64]
  00111	52		 push	 edx
  00112	6a 01		 push	 1
  00114	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  0011c	8b 55 e4	 mov	 edx, DWORD PTR _t$[ebp]
  0011f	89 84 95 a0 fe
	ff ff		 mov	 DWORD PTR _W$[ebp+edx*4], eax

; 437  : 	}

  00126	eb b2		 jmp	 SHORT $LN5@ProcessMes
$LN6@ProcessMes:

; 438  : 
; 439  : 	A = H[0];

  00128	b8 04 00 00 00	 mov	 eax, 4
  0012d	6b c8 00	 imul	 ecx, eax, 0
  00130	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00133	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00137	89 85 9c fe ff
	ff		 mov	 DWORD PTR _A$[ebp], eax

; 440  : 	B = H[1];

  0013d	b8 04 00 00 00	 mov	 eax, 4
  00142	c1 e0 00	 shl	 eax, 0
  00145	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0014c	89 95 98 fe ff
	ff		 mov	 DWORD PTR _B$[ebp], edx

; 441  : 	C = H[2];

  00152	b8 04 00 00 00	 mov	 eax, 4
  00157	d1 e0		 shl	 eax, 1
  00159	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00160	89 95 94 fe ff
	ff		 mov	 DWORD PTR _C$[ebp], edx

; 442  : 	D = H[3];

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 03	 imul	 ecx, eax, 3
  0016e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00171	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00175	89 85 90 fe ff
	ff		 mov	 DWORD PTR _D$[ebp], eax

; 443  : 	E = H[4];

  0017b	b8 04 00 00 00	 mov	 eax, 4
  00180	c1 e0 02	 shl	 eax, 2
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0018a	89 95 8c fe ff
	ff		 mov	 DWORD PTR _E$[ebp], edx

; 444  : 
; 445  : 	for (t = 0; t < 20; t++)

  00190	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _t$[ebp], 0
  00197	eb 09		 jmp	 SHORT $LN10@ProcessMes
$LN8@ProcessMes:
  00199	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  0019c	83 c0 01	 add	 eax, 1
  0019f	89 45 e4	 mov	 DWORD PTR _t$[ebp], eax
$LN10@ProcessMes:
  001a2	83 7d e4 14	 cmp	 DWORD PTR _t$[ebp], 20	; 00000014H
  001a6	0f 8d 9d 00 00
	00		 jge	 $LN9@ProcessMes

; 446  : 	{
; 447  : 		temp = CircularShift(5, A) + ((B & C) | ((~B) & D)) + E + W[t] + K[0];

  001ac	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  001b2	50		 push	 eax
  001b3	6a 05		 push	 5
  001b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  001bd	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _B$[ebp]
  001c3	23 8d 94 fe ff
	ff		 and	 ecx, DWORD PTR _C$[ebp]
  001c9	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _B$[ebp]
  001cf	f7 d2		 not	 edx
  001d1	23 95 90 fe ff
	ff		 and	 edx, DWORD PTR _D$[ebp]
  001d7	0b ca		 or	 ecx, edx
  001d9	03 85 8c fe ff
	ff		 add	 eax, DWORD PTR _E$[ebp]
  001df	03 c8		 add	 ecx, eax
  001e1	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  001e4	03 8c 85 a0 fe
	ff ff		 add	 ecx, DWORD PTR _W$[ebp+eax*4]
  001eb	ba 04 00 00 00	 mov	 edx, 4
  001f0	6b c2 00	 imul	 eax, edx, 0
  001f3	03 4c 05 e8	 add	 ecx, DWORD PTR _K$[ebp+eax]
  001f7	89 4d e0	 mov	 DWORD PTR _temp$[ebp], ecx

; 448  : 		temp &= 0xFFFFFFFF;

  001fa	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  001fd	89 45 e0	 mov	 DWORD PTR _temp$[ebp], eax

; 449  : 		E = D;

  00200	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _D$[ebp]
  00206	89 85 8c fe ff
	ff		 mov	 DWORD PTR _E$[ebp], eax

; 450  : 		D = C;

  0020c	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _C$[ebp]
  00212	89 85 90 fe ff
	ff		 mov	 DWORD PTR _D$[ebp], eax

; 451  : 		C = CircularShift(30, B);

  00218	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _B$[ebp]
  0021e	50		 push	 eax
  0021f	6a 1e		 push	 30			; 0000001eH
  00221	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00224	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  00229	89 85 94 fe ff
	ff		 mov	 DWORD PTR _C$[ebp], eax

; 452  : 		B = A;

  0022f	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  00235	89 85 98 fe ff
	ff		 mov	 DWORD PTR _B$[ebp], eax

; 453  : 		A = temp;

  0023b	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  0023e	89 85 9c fe ff
	ff		 mov	 DWORD PTR _A$[ebp], eax

; 454  : 	}

  00244	e9 50 ff ff ff	 jmp	 $LN8@ProcessMes
$LN9@ProcessMes:

; 455  : 
; 456  : 	for (t = 20; t < 40; t++)

  00249	c7 45 e4 14 00
	00 00		 mov	 DWORD PTR _t$[ebp], 20	; 00000014H
  00250	eb 09		 jmp	 SHORT $LN13@ProcessMes
$LN11@ProcessMes:
  00252	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  00255	83 c0 01	 add	 eax, 1
  00258	89 45 e4	 mov	 DWORD PTR _t$[ebp], eax
$LN13@ProcessMes:
  0025b	83 7d e4 28	 cmp	 DWORD PTR _t$[ebp], 40	; 00000028H
  0025f	0f 8d 93 00 00
	00		 jge	 $LN12@ProcessMes

; 457  : 	{
; 458  : 		temp = CircularShift(5, A) + (B ^ C ^ D) + E + W[t] + K[1];

  00265	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  0026b	50		 push	 eax
  0026c	6a 05		 push	 5
  0026e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00271	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  00276	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _B$[ebp]
  0027c	33 8d 94 fe ff
	ff		 xor	 ecx, DWORD PTR _C$[ebp]
  00282	33 8d 90 fe ff
	ff		 xor	 ecx, DWORD PTR _D$[ebp]
  00288	03 85 8c fe ff
	ff		 add	 eax, DWORD PTR _E$[ebp]
  0028e	03 c8		 add	 ecx, eax
  00290	8b 55 e4	 mov	 edx, DWORD PTR _t$[ebp]
  00293	03 8c 95 a0 fe
	ff ff		 add	 ecx, DWORD PTR _W$[ebp+edx*4]
  0029a	b8 04 00 00 00	 mov	 eax, 4
  0029f	c1 e0 00	 shl	 eax, 0
  002a2	03 4c 05 e8	 add	 ecx, DWORD PTR _K$[ebp+eax]
  002a6	89 4d e0	 mov	 DWORD PTR _temp$[ebp], ecx

; 459  : 		temp &= 0xFFFFFFFF;

  002a9	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  002ac	89 45 e0	 mov	 DWORD PTR _temp$[ebp], eax

; 460  : 		E = D;

  002af	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _D$[ebp]
  002b5	89 85 8c fe ff
	ff		 mov	 DWORD PTR _E$[ebp], eax

; 461  : 		D = C;

  002bb	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _C$[ebp]
  002c1	89 85 90 fe ff
	ff		 mov	 DWORD PTR _D$[ebp], eax

; 462  : 		C = CircularShift(30, B);

  002c7	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _B$[ebp]
  002cd	50		 push	 eax
  002ce	6a 1e		 push	 30			; 0000001eH
  002d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002d3	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  002d8	89 85 94 fe ff
	ff		 mov	 DWORD PTR _C$[ebp], eax

; 463  : 		B = A;

  002de	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  002e4	89 85 98 fe ff
	ff		 mov	 DWORD PTR _B$[ebp], eax

; 464  : 		A = temp;

  002ea	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  002ed	89 85 9c fe ff
	ff		 mov	 DWORD PTR _A$[ebp], eax

; 465  : 	}

  002f3	e9 5a ff ff ff	 jmp	 $LN11@ProcessMes
$LN12@ProcessMes:

; 466  : 
; 467  : 	for (t = 40; t < 60; t++)

  002f8	c7 45 e4 28 00
	00 00		 mov	 DWORD PTR _t$[ebp], 40	; 00000028H
  002ff	eb 09		 jmp	 SHORT $LN16@ProcessMes
$LN14@ProcessMes:
  00301	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  00304	83 c0 01	 add	 eax, 1
  00307	89 45 e4	 mov	 DWORD PTR _t$[ebp], eax
$LN16@ProcessMes:
  0030a	83 7d e4 3c	 cmp	 DWORD PTR _t$[ebp], 60	; 0000003cH
  0030e	0f 8d a8 00 00
	00		 jge	 $LN15@ProcessMes

; 468  : 	{
; 469  : 		temp = CircularShift(5, A) +

  00314	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  0031a	50		 push	 eax
  0031b	6a 05		 push	 5
  0031d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00320	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  00325	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _B$[ebp]
  0032b	23 8d 94 fe ff
	ff		 and	 ecx, DWORD PTR _C$[ebp]
  00331	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _B$[ebp]
  00337	23 95 90 fe ff
	ff		 and	 edx, DWORD PTR _D$[ebp]
  0033d	0b ca		 or	 ecx, edx
  0033f	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR _C$[ebp]
  00345	23 95 90 fe ff
	ff		 and	 edx, DWORD PTR _D$[ebp]
  0034b	0b ca		 or	 ecx, edx
  0034d	03 85 8c fe ff
	ff		 add	 eax, DWORD PTR _E$[ebp]
  00353	03 c8		 add	 ecx, eax
  00355	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  00358	03 8c 85 a0 fe
	ff ff		 add	 ecx, DWORD PTR _W$[ebp+eax*4]
  0035f	ba 04 00 00 00	 mov	 edx, 4
  00364	d1 e2		 shl	 edx, 1
  00366	03 4c 15 e8	 add	 ecx, DWORD PTR _K$[ebp+edx]
  0036a	89 4d e0	 mov	 DWORD PTR _temp$[ebp], ecx

; 470  : 			((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];
; 471  : 		temp &= 0xFFFFFFFF;

  0036d	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  00370	89 45 e0	 mov	 DWORD PTR _temp$[ebp], eax

; 472  : 		E = D;

  00373	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _D$[ebp]
  00379	89 85 8c fe ff
	ff		 mov	 DWORD PTR _E$[ebp], eax

; 473  : 		D = C;

  0037f	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _C$[ebp]
  00385	89 85 90 fe ff
	ff		 mov	 DWORD PTR _D$[ebp], eax

; 474  : 		C = CircularShift(30, B);

  0038b	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _B$[ebp]
  00391	50		 push	 eax
  00392	6a 1e		 push	 30			; 0000001eH
  00394	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00397	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  0039c	89 85 94 fe ff
	ff		 mov	 DWORD PTR _C$[ebp], eax

; 475  : 		B = A;

  003a2	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  003a8	89 85 98 fe ff
	ff		 mov	 DWORD PTR _B$[ebp], eax

; 476  : 		A = temp;

  003ae	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  003b1	89 85 9c fe ff
	ff		 mov	 DWORD PTR _A$[ebp], eax

; 477  : 	}

  003b7	e9 45 ff ff ff	 jmp	 $LN14@ProcessMes
$LN15@ProcessMes:

; 478  : 
; 479  : 	for (t = 60; t < 80; t++)

  003bc	c7 45 e4 3c 00
	00 00		 mov	 DWORD PTR _t$[ebp], 60	; 0000003cH
  003c3	eb 09		 jmp	 SHORT $LN19@ProcessMes
$LN17@ProcessMes:
  003c5	8b 45 e4	 mov	 eax, DWORD PTR _t$[ebp]
  003c8	83 c0 01	 add	 eax, 1
  003cb	89 45 e4	 mov	 DWORD PTR _t$[ebp], eax
$LN19@ProcessMes:
  003ce	83 7d e4 50	 cmp	 DWORD PTR _t$[ebp], 80	; 00000050H
  003d2	0f 8d 93 00 00
	00		 jge	 $LN18@ProcessMes

; 480  : 	{
; 481  : 		temp = CircularShift(5, A) + (B ^ C ^ D) + E + W[t] + K[3];

  003d8	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  003de	50		 push	 eax
  003df	6a 05		 push	 5
  003e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003e4	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  003e9	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _B$[ebp]
  003ef	33 8d 94 fe ff
	ff		 xor	 ecx, DWORD PTR _C$[ebp]
  003f5	33 8d 90 fe ff
	ff		 xor	 ecx, DWORD PTR _D$[ebp]
  003fb	03 85 8c fe ff
	ff		 add	 eax, DWORD PTR _E$[ebp]
  00401	03 c8		 add	 ecx, eax
  00403	8b 55 e4	 mov	 edx, DWORD PTR _t$[ebp]
  00406	03 8c 95 a0 fe
	ff ff		 add	 ecx, DWORD PTR _W$[ebp+edx*4]
  0040d	b8 04 00 00 00	 mov	 eax, 4
  00412	6b d0 03	 imul	 edx, eax, 3
  00415	03 4c 15 e8	 add	 ecx, DWORD PTR _K$[ebp+edx]
  00419	89 4d e0	 mov	 DWORD PTR _temp$[ebp], ecx

; 482  : 		temp &= 0xFFFFFFFF;

  0041c	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  0041f	89 45 e0	 mov	 DWORD PTR _temp$[ebp], eax

; 483  : 		E = D;

  00422	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _D$[ebp]
  00428	89 85 8c fe ff
	ff		 mov	 DWORD PTR _E$[ebp], eax

; 484  : 		D = C;

  0042e	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _C$[ebp]
  00434	89 85 90 fe ff
	ff		 mov	 DWORD PTR _D$[ebp], eax

; 485  : 		C = CircularShift(30, B);

  0043a	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _B$[ebp]
  00440	50		 push	 eax
  00441	6a 1e		 push	 30			; 0000001eH
  00443	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00446	e8 00 00 00 00	 call	 ?CircularShift@WHSha1@@AAEIHI@Z ; WHSha1::CircularShift
  0044b	89 85 94 fe ff
	ff		 mov	 DWORD PTR _C$[ebp], eax

; 486  : 		B = A;

  00451	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _A$[ebp]
  00457	89 85 98 fe ff
	ff		 mov	 DWORD PTR _B$[ebp], eax

; 487  : 		A = temp;

  0045d	8b 45 e0	 mov	 eax, DWORD PTR _temp$[ebp]
  00460	89 85 9c fe ff
	ff		 mov	 DWORD PTR _A$[ebp], eax

; 488  : 	}

  00466	e9 5a ff ff ff	 jmp	 $LN17@ProcessMes
$LN18@ProcessMes:

; 489  : 
; 490  : 	H[0] = (H[0] + A) & 0xFFFFFFFF;

  0046b	b8 04 00 00 00	 mov	 eax, 4
  00470	6b c8 00	 imul	 ecx, eax, 0
  00473	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00476	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0047a	03 85 9c fe ff
	ff		 add	 eax, DWORD PTR _A$[ebp]
  00480	b9 04 00 00 00	 mov	 ecx, 4
  00485	6b d1 00	 imul	 edx, ecx, 0
  00488	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0048b	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 491  : 	H[1] = (H[1] + B) & 0xFFFFFFFF;

  0048f	b8 04 00 00 00	 mov	 eax, 4
  00494	c1 e0 00	 shl	 eax, 0
  00497	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0049e	03 95 98 fe ff
	ff		 add	 edx, DWORD PTR _B$[ebp]
  004a4	b8 04 00 00 00	 mov	 eax, 4
  004a9	c1 e0 00	 shl	 eax, 0
  004ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004af	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 492  : 	H[2] = (H[2] + C) & 0xFFFFFFFF;

  004b3	b8 04 00 00 00	 mov	 eax, 4
  004b8	d1 e0		 shl	 eax, 1
  004ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004bd	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  004c1	03 95 94 fe ff
	ff		 add	 edx, DWORD PTR _C$[ebp]
  004c7	b8 04 00 00 00	 mov	 eax, 4
  004cc	d1 e0		 shl	 eax, 1
  004ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004d1	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 493  : 	H[3] = (H[3] + D) & 0xFFFFFFFF;

  004d5	b8 04 00 00 00	 mov	 eax, 4
  004da	6b c8 03	 imul	 ecx, eax, 3
  004dd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004e0	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  004e4	03 85 90 fe ff
	ff		 add	 eax, DWORD PTR _D$[ebp]
  004ea	b9 04 00 00 00	 mov	 ecx, 4
  004ef	6b d1 03	 imul	 edx, ecx, 3
  004f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004f5	89 44 11 04	 mov	 DWORD PTR [ecx+edx+4], eax

; 494  : 	H[4] = (H[4] + E) & 0xFFFFFFFF;

  004f9	b8 04 00 00 00	 mov	 eax, 4
  004fe	c1 e0 02	 shl	 eax, 2
  00501	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00504	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00508	03 95 8c fe ff
	ff		 add	 edx, DWORD PTR _E$[ebp]
  0050e	b8 04 00 00 00	 mov	 eax, 4
  00513	c1 e0 02	 shl	 eax, 2
  00516	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00519	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 495  : 
; 496  : 	Message_Block_Index = 0;

  0051d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00520	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 497  : }

  00527	5f		 pop	 edi
  00528	5e		 pop	 esi
  00529	5b		 pop	 ebx
  0052a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0052d	33 cd		 xor	 ecx, ebp
  0052f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00534	8b e5		 mov	 esp, ebp
  00536	5d		 pop	 ebp
  00537	c3		 ret	 0
?ProcessMessageBlock@WHSha1@@AAEXXZ ENDP		; WHSha1::ProcessMessageBlock
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ??6WHSha1@@QAEAAV0@E@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message_element$ = 8					; size = 1
??6WHSha1@@QAEAAV0@E@Z PROC				; WHSha1::operator<<, COMDAT
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 386  : 	Input(&message_element, 1);

  0000c	6a 01		 push	 1
  0000e	8d 45 08	 lea	 eax, DWORD PTR _message_element$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Input@WHSha1@@QAEXPBEI@Z ; WHSha1::Input

; 387  : 
; 388  : 	return *this;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 389  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??6WHSha1@@QAEAAV0@E@Z ENDP				; WHSha1::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ??6WHSha1@@QAEAAV0@D@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message_element$ = 8					; size = 1
??6WHSha1@@QAEAAV0@D@Z PROC				; WHSha1::operator<<, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 362  : 	Input((unsigned char *)&message_element, 1);

  0000c	6a 01		 push	 1
  0000e	8d 45 08	 lea	 eax, DWORD PTR _message_element$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Input@WHSha1@@QAEXPBEI@Z ; WHSha1::Input

; 363  : 
; 364  : 	return *this;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 365  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??6WHSha1@@QAEAAV0@D@Z ENDP				; WHSha1::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ??6WHSha1@@QAEAAV0@PBE@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_message_array$ = 8					; size = 4
??6WHSha1@@QAEAAV0@PBE@Z PROC				; WHSha1::operator<<, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 	const unsigned char *p = message_array;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _message_array$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
$LN2@operator:

; 333  : 
; 334  : 	while (*p)

  00012	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00015	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00018	85 c9		 test	 ecx, ecx
  0001a	74 1a		 je	 SHORT $LN3@operator

; 335  : 	{
; 336  : 		Input(*p);

  0001c	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0001f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00022	51		 push	 ecx
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Input@WHSha1@@QAEXE@Z	; WHSha1::Input

; 337  : 		p++;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0002e	83 c0 01	 add	 eax, 1
  00031	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 338  : 	}

  00034	eb dc		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 339  : 
; 340  : 	return *this;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 341  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??6WHSha1@@QAEAAV0@PBE@Z ENDP				; WHSha1::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ??6WHSha1@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_message_array$ = 8					; size = 4
??6WHSha1@@QAEAAV0@PBD@Z PROC				; WHSha1::operator<<, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 301  : 	const char *p = message_array;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _message_array$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax
$LN2@operator:

; 302  : 
; 303  : 	while (*p)

  00012	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00015	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00018	85 c9		 test	 ecx, ecx
  0001a	74 1a		 je	 SHORT $LN3@operator

; 304  : 	{
; 305  : 		Input(*p);

  0001c	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0001f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00022	51		 push	 ecx
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Input@WHSha1@@QAEXD@Z	; WHSha1::Input

; 306  : 		p++;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0002e	83 c0 01	 add	 eax, 1
  00031	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 307  : 	}

  00034	eb dc		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 308  : 
; 309  : 	return *this;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 310  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??6WHSha1@@QAEAAV0@PBD@Z ENDP				; WHSha1::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?Input@WHSha1@@QAEXD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message_element$ = 8					; size = 1
?Input@WHSha1@@QAEXD@Z PROC				; WHSha1::Input, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 278  : 	Input((unsigned char *)&message_element, 1);

  0000c	6a 01		 push	 1
  0000e	8d 45 08	 lea	 eax, DWORD PTR _message_element$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Input@WHSha1@@QAEXPBEI@Z ; WHSha1::Input

; 279  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?Input@WHSha1@@QAEXD@Z ENDP				; WHSha1::Input
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?Input@WHSha1@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message_element$ = 8					; size = 1
?Input@WHSha1@@QAEXE@Z PROC				; WHSha1::Input, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 257  : 	Input(&message_element, 1);

  0000c	6a 01		 push	 1
  0000e	8d 45 08	 lea	 eax, DWORD PTR _message_element$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Input@WHSha1@@QAEXPBEI@Z ; WHSha1::Input

; 258  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?Input@WHSha1@@QAEXE@Z ENDP				; WHSha1::Input
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?Input@WHSha1@@QAEXPBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message_array$ = 8					; size = 4
_length$ = 12						; size = 4
?Input@WHSha1@@QAEXPBDI@Z PROC				; WHSha1::Input, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  : 	Input((unsigned char *)message_array, length);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _message_array$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?Input@WHSha1@@QAEXPBEI@Z ; WHSha1::Input

; 237  : }

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?Input@WHSha1@@QAEXPBDI@Z ENDP				; WHSha1::Input
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?Input@WHSha1@@QAEXPBEI@Z
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_message_array$ = 8					; size = 4
_length$ = 12						; size = 4
?Input@WHSha1@@QAEXPBEI@Z PROC				; WHSha1::Input, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 	if (!length)

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _length$[ebp], 0
  00010	75 05		 jne	 SHORT $LN4@Input

; 178  : 	{
; 179  : 		return;

  00012	e9 e0 00 00 00	 jmp	 $LN1@Input
$LN4@Input:

; 180  : 	}
; 181  : 
; 182  : 	if (Computed || Corrupted)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  0001e	85 c9		 test	 ecx, ecx
  00020	75 0b		 jne	 SHORT $LN6@Input
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	0f b6 48 65	 movzx	 ecx, BYTE PTR [eax+101]
  00029	85 c9		 test	 ecx, ecx
  0002b	74 0c		 je	 SHORT $LN2@Input
$LN6@Input:

; 183  : 	{
; 184  : 		Corrupted = true;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c6 40 65 01	 mov	 BYTE PTR [eax+101], 1

; 185  : 		return;

  00034	e9 be 00 00 00	 jmp	 $LN1@Input
$LN2@Input:

; 186  : 	}
; 187  : 
; 188  : 	while (length-- && !Corrupted)

  00039	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  0003c	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _length$[ebp]
  00042	83 e9 01	 sub	 ecx, 1
  00045	89 4d 0c	 mov	 DWORD PTR _length$[ebp], ecx
  00048	83 7d b8 00	 cmp	 DWORD PTR tv74[ebp], 0
  0004c	0f 84 a5 00 00
	00		 je	 $LN1@Input
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	0f b6 48 65	 movzx	 ecx, BYTE PTR [eax+101]
  00059	85 c9		 test	 ecx, ecx
  0005b	0f 85 96 00 00
	00		 jne	 $LN1@Input

; 189  : 	{
; 190  : 		Message_Block[Message_Block_Index++] = (*message_array & 0xFF);

  00061	8b 45 08	 mov	 eax, DWORD PTR _message_array$[ebp]
  00064	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00067	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00070	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00073	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00076	88 4c 02 20	 mov	 BYTE PTR [edx+eax+32], cl
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00080	83 c1 01	 add	 ecx, 1
  00083	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00086	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 191  : 
; 192  : 		Length_Low += 8;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0008f	83 c1 08	 add	 ecx, 8
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 193  : 		Length_Low &= 0xFFFFFFFF;               // Force it to 32 bits

  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000a1	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 194  : 		if (Length_Low == 0)

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000ab	75 2b		 jne	 SHORT $LN7@Input

; 195  : 		{
; 196  : 			Length_High++;

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000b3	83 c1 01	 add	 ecx, 1
  000b6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b9	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 197  : 			Length_High &= 0xFFFFFFFF;          // Force it to 32 bits

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c5	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 198  : 			if (Length_High == 0)

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  000cf	75 07		 jne	 SHORT $LN7@Input

; 199  : 			{
; 200  : 				Corrupted = true;               // Message is too long

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	c6 40 65 01	 mov	 BYTE PTR [eax+101], 1
$LN7@Input:

; 201  : 			}
; 202  : 		}
; 203  : 
; 204  : 		if (Message_Block_Index == 64)

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000db	83 78 60 40	 cmp	 DWORD PTR [eax+96], 64	; 00000040H
  000df	75 08		 jne	 SHORT $LN9@Input

; 205  : 		{
; 206  : 			ProcessMessageBlock();

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	e8 00 00 00 00	 call	 ?ProcessMessageBlock@WHSha1@@AAEXXZ ; WHSha1::ProcessMessageBlock
$LN9@Input:

; 207  : 		}
; 208  : 
; 209  : 		message_array++;

  000e9	8b 45 08	 mov	 eax, DWORD PTR _message_array$[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 08	 mov	 DWORD PTR _message_array$[ebp], eax

; 210  : 	}

  000f2	e9 42 ff ff ff	 jmp	 $LN2@Input
$LN1@Input:

; 211  : }

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 08 00	 ret	 8
?Input@WHSha1@@QAEXPBEI@Z ENDP				; WHSha1::Input
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?Result@WHSha1@@QAE_NPAI@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_message_digest_array$ = 8				; size = 4
?Result@WHSha1@@QAE_NPAI@Z PROC				; WHSha1::Result, COMDAT
; _this$ = ecx

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 135  : 	int i;                                  // Counter
; 136  : 
; 137  : 	if (Corrupted)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 65	 movzx	 ecx, BYTE PTR [eax+101]
  00013	85 c9		 test	 ecx, ecx
  00015	74 04		 je	 SHORT $LN5@Result

; 138  : 	{
; 139  : 		return false;

  00017	32 c0		 xor	 al, al
  00019	eb 49		 jmp	 SHORT $LN1@Result
$LN5@Result:

; 140  : 	}
; 141  : 
; 142  : 	if (!Computed)

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00022	85 c9		 test	 ecx, ecx
  00024	75 0f		 jne	 SHORT $LN6@Result

; 143  : 	{
; 144  : 		PadMessage();

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?PadMessage@WHSha1@@AAEXXZ ; WHSha1::PadMessage

; 145  : 		Computed = true;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 40 64 01	 mov	 BYTE PTR [eax+100], 1
$LN6@Result:

; 146  : 	}
; 147  : 
; 148  : 	for (i = 0; i < 5; i++)

  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003c	eb 09		 jmp	 SHORT $LN4@Result
$LN2@Result:
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Result:
  00047	83 7d f8 05	 cmp	 DWORD PTR _i$[ebp], 5
  0004b	7d 15		 jge	 SHORT $LN3@Result

; 149  : 	{
; 150  : 		message_digest_array[i] = H[i];

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _message_digest_array$[ebp]
  00053	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00056	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00059	8b 54 96 04	 mov	 edx, DWORD PTR [esi+edx*4+4]
  0005d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 151  : 	}

  00060	eb dc		 jmp	 SHORT $LN2@Result
$LN3@Result:

; 152  : 
; 153  : 	return true;

  00062	b0 01		 mov	 al, 1
$LN1@Result:

; 154  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?Result@WHSha1@@QAE_NPAI@Z ENDP				; WHSha1::Result
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?Reset@WHSha1@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@WHSha1@@QAEXXZ PROC				; WHSha1::Reset, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  : 	Length_Low = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 102  : 	Length_High = 0;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 103  : 	Message_Block_Index = 0;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 104  : 
; 105  : 	H[0] = 0x67452301;

  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	6b c8 00	 imul	 ecx, eax, 0
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	c7 44 0a 04 01
	23 45 67	 mov	 DWORD PTR [edx+ecx+4], 1732584193 ; 67452301H

; 106  : 	H[1] = 0xEFCDAB89;

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	c7 44 01 04 89
	ab cd ef	 mov	 DWORD PTR [ecx+eax+4], -271733879 ; efcdab89H

; 107  : 	H[2] = 0x98BADCFE;

  00050	b8 04 00 00 00	 mov	 eax, 4
  00055	d1 e0		 shl	 eax, 1
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	c7 44 01 04 fe
	dc ba 98	 mov	 DWORD PTR [ecx+eax+4], -1732584194 ; 98badcfeH

; 108  : 	H[3] = 0x10325476;

  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	6b c8 03	 imul	 ecx, eax, 3
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	c7 44 0a 04 76
	54 32 10	 mov	 DWORD PTR [edx+ecx+4], 271733878 ; 10325476H

; 109  : 	H[4] = 0xC3D2E1F0;

  00075	b8 04 00 00 00	 mov	 eax, 4
  0007a	c1 e0 02	 shl	 eax, 2
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	c7 44 01 04 f0
	e1 d2 c3	 mov	 DWORD PTR [ecx+eax+4], -1009589776 ; c3d2e1f0H

; 110  : 
; 111  : 	Computed = false;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c6 40 64 00	 mov	 BYTE PTR [eax+100], 0

; 112  : 	Corrupted = false;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	c6 40 65 00	 mov	 BYTE PTR [eax+101], 0

; 113  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?Reset@WHSha1@@QAEXXZ ENDP				; WHSha1::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ??1WHSha1@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1WHSha1@@UAE@XZ PROC					; WHSha1::~WHSha1, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7WHSha1@@6B@

; 80   : 	// The destructor does nothing
; 81   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1WHSha1@@UAE@XZ ENDP					; WHSha1::~WHSha1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ??0WHSha1@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0WHSha1@@QAE@XZ PROC					; WHSha1::WHSha1, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7WHSha1@@6B@

; 60   : 	Reset();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Reset@WHSha1@@QAEXXZ	; WHSha1::Reset

; 61   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0WHSha1@@QAE@XZ ENDP					; WHSha1::WHSha1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whsha1.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
