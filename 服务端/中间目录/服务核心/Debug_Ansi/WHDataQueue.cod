; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHDataQueue.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0CWHDataQueue@@QAE@XZ				; CWHDataQueue::CWHDataQueue
PUBLIC	??1CWHDataQueue@@UAE@XZ				; CWHDataQueue::~CWHDataQueue
PUBLIC	?GetBurthenInfo@CWHDataQueue@@QAEXAAUtagBurthenInfo@@@Z ; CWHDataQueue::GetBurthenInfo
PUBLIC	?GetDataPacketCount@CWHDataQueue@@QAEKXZ	; CWHDataQueue::GetDataPacketCount
PUBLIC	?InsertData@CWHDataQueue@@QAE_NGPAXG@Z		; CWHDataQueue::InsertData
PUBLIC	?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z ; CWHDataQueue::InsertData
PUBLIC	?RemoveData@CWHDataQueue@@QAEX_N@Z		; CWHDataQueue::RemoveData
PUBLIC	?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z ; CWHDataQueue::DistillData
PUBLIC	?RectifyBuffer@CWHDataQueue@@AAE_NK@Z		; CWHDataQueue::RectifyBuffer
PUBLIC	??0CWHDataQueue@@QAE@ABV0@@Z			; CWHDataQueue::CWHDataQueue
PUBLIC	??4CWHDataQueue@@QAEAAV0@ABV0@@Z		; CWHDataQueue::operator=
PUBLIC	??_GCWHDataQueue@@UAEPAXI@Z			; CWHDataQueue::`scalar deleting destructor'
PUBLIC	??_ECWHDataQueue@@UAEPAXI@Z			; CWHDataQueue::`vector deleting destructor'
PUBLIC	??_7CWHDataQueue@@6B@				; CWHDataQueue::`vftable'
PUBLIC	?__LINE__Var@?0???1CWHDataQueue@@UAE@XZ@4JA	; `CWHDataQueue::~CWHDataQueue'::`1'::__LINE__Var
PUBLIC	??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGPAXG@Z@4JA ; `CWHDataQueue::InsertData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z@4JA ; `CWHDataQueue::InsertData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA ; `CWHDataQueue::DistillData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??RemoveData@CWHDataQueue@@QAEX_N@Z@4JA ; `CWHDataQueue::RemoveData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??RectifyBuffer@CWHDataQueue@@AAE_NK@Z@4JA ; `CWHDataQueue::RectifyBuffer'::`1'::__LINE__Var
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	__CT??_R0H@84
PUBLIC	??_R4CWHDataQueue@@6B@				; CWHDataQueue::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHDataQueue@@@8			; CWHDataQueue `RTTI Type Descriptor'
PUBLIC	??_R3CWHDataQueue@@8				; CWHDataQueue::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHDataQueue@@8				; CWHDataQueue::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHDataQueue@@8			; CWHDataQueue::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CWHDataQueue@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHDataQueue@@8 DD FLAT:??_R0?AVCWHDataQueue@@@8 ; CWHDataQueue::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHDataQueue@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHDataQueue@@8
rdata$r	SEGMENT
??_R2CWHDataQueue@@8 DD FLAT:??_R1A@?0A@EA@CWHDataQueue@@8 ; CWHDataQueue::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHDataQueue@@8
rdata$r	SEGMENT
??_R3CWHDataQueue@@8 DD 00H				; CWHDataQueue::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHDataQueue@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHDataQueue@@@8
data$r	SEGMENT
??_R0?AVCWHDataQueue@@@8 DD FLAT:??_7type_info@@6B@	; CWHDataQueue `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHDataQueue@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHDataQueue@@6B@
rdata$r	SEGMENT
??_R4CWHDataQueue@@6B@ DD 00H				; CWHDataQueue::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHDataQueue@@@8
	DD	FLAT:??_R3CWHDataQueue@@8
rdata$r	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?0??RectifyBuffer@CWHDataQueue@@AAE_NK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RectifyBuffer@CWHDataQueue@@AAE_NK@Z@4JA DD 0efH ; `CWHDataQueue::RectifyBuffer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??RemoveData@CWHDataQueue@@QAEX_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RemoveData@CWHDataQueue@@QAEX_N@Z@4JA DD 0dbH ; `CWHDataQueue::RemoveData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA DD 0a6H ; `CWHDataQueue::DistillData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z@4JA DD 05dH ; `CWHDataQueue::InsertData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGPAXG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGPAXG@Z@4JA DD 02dH ; `CWHDataQueue::InsertData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0baH, 0cbH, 0d0H, 0c4H, '\whdataqueue.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???1CWHDataQueue@@UAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1CWHDataQueue@@UAE@XZ@4JA DD 01bH	; `CWHDataQueue::~CWHDataQueue'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CWHDataQueue@@6B@
CONST	SEGMENT
??_7CWHDataQueue@@6B@ DD FLAT:??_R4CWHDataQueue@@6B@	; CWHDataQueue::`vftable'
	DD	FLAT:??_ECWHDataQueue@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHDataQueue@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$0
__catchsym$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$3
__catchsym$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$1
__ehfuncinfo$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z
	DD	03H
	DD	FLAT:__tryblocktable$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	00H
__tryblocktable$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$6
	DD	02H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$7
	DD	00H
	DD	00H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?RemoveData@CWHDataQueue@@QAEX_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?RemoveData@CWHDataQueue@@QAEX_N@Z$0
__unwindtable$?RemoveData@CWHDataQueue@@QAEX_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?RemoveData@CWHDataQueue@@QAEX_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?RemoveData@CWHDataQueue@@QAEX_N@Z$2
__ehfuncinfo$?RemoveData@CWHDataQueue@@QAEX_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RemoveData@CWHDataQueue@@QAEX_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?RemoveData@CWHDataQueue@@QAEX_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z$0
__unwindtable$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z$2
__ehfuncinfo$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z$0
__unwindtable$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z$2
__ehfuncinfo$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CWHDataQueue@@UAE@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CWHDataQueue@@UAE@XZ$0
__unwindtable$??1CWHDataQueue@@UAE@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??1CWHDataQueue@@UAE@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??1CWHDataQueue@@UAE@XZ$2
__ehfuncinfo$??1CWHDataQueue@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CWHDataQueue@@UAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CWHDataQueue@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHDataQueue@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHDataQueue@@UAEPAXI@Z PROC			; CWHDataQueue::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHDataQueue@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 43		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHDataQueue@@UAE@XZ ; CWHDataQueue::~CWHDataQueue
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 20		 push	 32			; 00000020H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1c		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	c1 e1 05	 shl	 ecx, 5
  0005b	83 c1 04	 add	 ecx, 4
  0005e	51		 push	 ecx
  0005f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00062	83 ea 04	 sub	 edx, 4
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006b	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 e8 04	 sub	 eax, 4
  00074	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00076	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ??1CWHDataQueue@@UAE@XZ	; CWHDataQueue::~CWHDataQueue
  0007e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00081	83 e0 01	 and	 eax, 1
  00084	74 0e		 je	 SHORT $LN4@vector
  00086	6a 20		 push	 32			; 00000020H
  00088	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00091	83 c4 08	 add	 esp, 8
$LN4@vector:
  00094	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00097	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHDataQueue@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHDataQueue@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHDataQueue@@UAEPAXI@Z ENDP			; CWHDataQueue::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHDataQueue@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHDataQueue@@UAEPAXI@Z PROC			; CWHDataQueue::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHDataQueue@@UAE@XZ	; CWHDataQueue::~CWHDataQueue
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 20		 push	 32			; 00000020H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHDataQueue@@UAEPAXI@Z ENDP			; CWHDataQueue::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHDataQueue@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHDataQueue@@QAEAAV0@ABV0@@Z PROC			; CWHDataQueue::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0002a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00036	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00039	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00042	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00045	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0004e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00051	89 50 18	 mov	 DWORD PTR [eax+24], edx
  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0005a	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0005d	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
??4CWHDataQueue@@QAEAAV0@ABV0@@Z ENDP			; CWHDataQueue::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHDataQueue@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHDataQueue@@QAE@ABV0@@Z PROC			; CWHDataQueue::CWHDataQueue, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHDataQueue@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00027	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00033	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00036	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0003f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00042	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0004b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0004e	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00057	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0005a	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00063	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00066	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??0CWHDataQueue@@QAE@ABV0@@Z ENDP			; CWHDataQueue::CWHDataQueue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?RectifyBuffer@CWHDataQueue@@AAE_NK@Z
_TEXT	SEGMENT
tv212 = -128						; size = 4
tv211 = -128						; size = 4
tv210 = -128						; size = 4
tv209 = -128						; size = 4
tv208 = -128						; size = 4
tv130 = -128						; size = 4
$T2 = -121						; size = 1
$T3 = -120						; size = 4
$T4 = -113						; size = 1
$T5 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
$T8 = -100						; size = 4
_dwPartOneSize$9 = -32					; size = 4
_pNewQueueServiceBuffer$10 = -28			; size = 4
_dwRiseSize$11 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_dwNeedSize$ = 8					; size = 4
?RectifyBuffer@CWHDataQueue@@AAE_NK@Z PROC		; CWHDataQueue::RectifyBuffer, COMDAT
; _this$ = ecx

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 70	 sub	 esp, 112		; 00000070H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 240  : 	try

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 241  : 	{
; 242  : 		//缓冲判断
; 243  : 		if ((m_dwDataSize+dwNeedSize)>m_dwBufferSize) throw 0;

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003c	03 4d 08	 add	 ecx, DWORD PTR _dwNeedSize$[ebp]
  0003f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00042	3b 4a 18	 cmp	 ecx, DWORD PTR [edx+24]
  00045	76 15		 jbe	 SHORT $LN3@RectifyBuf
  00047	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T8[ebp], 0
  0004e	68 00 00 00 00	 push	 OFFSET __TI1H
  00053	8d 45 9c	 lea	 eax, DWORD PTR $T8[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@RectifyBuf:

; 244  : 
; 245  : 		//重新开始
; 246  : 		if ((m_dwInsertPos==m_dwTerminalPos)&&((m_dwInsertPos+dwNeedSize)>m_dwBufferSize)) 

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00065	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00068	75 3d		 jne	 SHORT $LN4@RectifyBuf
  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00070	03 4d 08	 add	 ecx, DWORD PTR _dwNeedSize$[ebp]
  00073	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00076	3b 4a 18	 cmp	 ecx, DWORD PTR [edx+24]
  00079	76 2c		 jbe	 SHORT $LN4@RectifyBuf

; 247  : 		{
; 248  : 			if (m_dwDataQueryPos>=dwNeedSize) m_dwInsertPos=0;

  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00081	3b 4d 08	 cmp	 ecx, DWORD PTR _dwNeedSize$[ebp]
  00084	72 0c		 jb	 SHORT $LN5@RectifyBuf
  00086	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00089	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00090	eb 15		 jmp	 SHORT $LN4@RectifyBuf
$LN5@RectifyBuf:

; 249  : 			else throw 0;

  00092	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  00099	68 00 00 00 00	 push	 OFFSET __TI1H
  0009e	8d 45 98	 lea	 eax, DWORD PTR $T7[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@RectifyBuf:

; 250  : 		}
; 251  : 
; 252  : 		//缓冲判断
; 253  : 		if ((m_dwInsertPos<m_dwTerminalPos)&&((m_dwInsertPos+dwNeedSize)>m_dwDataQueryPos)) throw 0;

  000a7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000b0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000b3	73 26		 jae	 SHORT $LN7@RectifyBuf
  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000bb	03 4d 08	 add	 ecx, DWORD PTR _dwNeedSize$[ebp]
  000be	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000c1	3b 4a 0c	 cmp	 ecx, DWORD PTR [edx+12]
  000c4	76 15		 jbe	 SHORT $LN7@RectifyBuf
  000c6	c7 45 94 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0
  000cd	68 00 00 00 00	 push	 OFFSET __TI1H
  000d2	8d 45 94	 lea	 eax, DWORD PTR $T6[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@RectifyBuf:

; 254  : 	}

  000db	e9 03 02 00 00	 jmp	 $LN21@RectifyBuf
__catch$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$0:

; 255  : 	catch (...)
; 256  : 	{

  000e0	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 257  : 		try

  000e3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 258  : 		{
; 259  : 			//申请内存
; 260  : 			DWORD dwRiseSize=__max(m_dwBufferSize/2L,dwNeedSize*10L);

  000e7	6b 45 08 0a	 imul	 eax, DWORD PTR _dwNeedSize$[ebp], 10
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000f1	d1 ea		 shr	 edx, 1
  000f3	3b d0		 cmp	 edx, eax
  000f5	76 0d		 jbe	 SHORT $LN15@RectifyBuf
  000f7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fa	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000fd	d1 e9		 shr	 ecx, 1
  000ff	89 4d 80	 mov	 DWORD PTR tv130[ebp], ecx
  00102	eb 07		 jmp	 SHORT $LN16@RectifyBuf
$LN15@RectifyBuf:
  00104	6b 55 08 0a	 imul	 edx, DWORD PTR _dwNeedSize$[ebp], 10
  00108	89 55 80	 mov	 DWORD PTR tv130[ebp], edx
$LN16@RectifyBuf:
  0010b	8b 45 80	 mov	 eax, DWORD PTR tv130[ebp]
  0010e	89 45 e8	 mov	 DWORD PTR _dwRiseSize$11[ebp], eax

; 261  : 			LPBYTE pNewQueueServiceBuffer=new BYTE [m_dwBufferSize+dwRiseSize];

  00111	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00114	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00117	03 4d e8	 add	 ecx, DWORD PTR _dwRiseSize$11[ebp]
  0011a	51		 push	 ecx
  0011b	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00120	83 c4 04	 add	 esp, 4
  00123	89 45 80	 mov	 DWORD PTR tv208[ebp], eax
  00126	8b 55 80	 mov	 edx, DWORD PTR tv208[ebp]
  00129	89 55 90	 mov	 DWORD PTR $T5[ebp], edx
  0012c	8b 45 90	 mov	 eax, DWORD PTR $T5[ebp]
  0012f	89 45 e4	 mov	 DWORD PTR _pNewQueueServiceBuffer$10[ebp], eax

; 262  : 
; 263  : 			//错误判断
; 264  : 			ASSERT(pNewQueueServiceBuffer!=NULL);

  00132	83 7d e4 00	 cmp	 DWORD PTR _pNewQueueServiceBuffer$10[ebp], 0
  00136	75 1d		 jne	 SHORT $LN17@RectifyBuf
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??RectifyBuffer@CWHDataQueue@@AAE_NK@Z@4JA
  0013d	83 c0 19	 add	 eax, 25			; 00000019H
  00140	50		 push	 eax
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00146	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0014b	89 45 80	 mov	 DWORD PTR tv209[ebp], eax
  0014e	83 7d 80 00	 cmp	 DWORD PTR tv209[ebp], 0
  00152	74 01		 je	 SHORT $LN17@RectifyBuf
  00154	cc		 int	 3
$LN17@RectifyBuf:

; 265  : 			if (pNewQueueServiceBuffer==NULL) return false;

  00155	83 7d e4 00	 cmp	 DWORD PTR _pNewQueueServiceBuffer$10[ebp], 0
  00159	75 0a		 jne	 SHORT $LN9@RectifyBuf
  0015b	c6 45 8f 00	 mov	 BYTE PTR $T4[ebp], 0
  0015f	b8 00 00 00 00	 mov	 eax, $LN28@RectifyBuf
  00164	c3		 ret	 0
$LN9@RectifyBuf:

; 266  : 
; 267  : 			//拷贝数据
; 268  : 			if (m_pDataQueueBuffer!=NULL) 

  00165	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00168	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0016c	0f 84 ac 00 00
	00		 je	 $LN10@RectifyBuf

; 269  : 			{
; 270  : 				//效验状态
; 271  : 				ASSERT(m_dwTerminalPos>=m_dwDataSize);

  00172	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00175	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00178	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0017b	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0017e	73 1d		 jae	 SHORT $LN18@RectifyBuf
  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??RectifyBuffer@CWHDataQueue@@AAE_NK@Z@4JA
  00185	83 c0 20	 add	 eax, 32			; 00000020H
  00188	50		 push	 eax
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0018e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00193	89 45 80	 mov	 DWORD PTR tv210[ebp], eax
  00196	83 7d 80 00	 cmp	 DWORD PTR tv210[ebp], 0
  0019a	74 01		 je	 SHORT $LN18@RectifyBuf
  0019c	cc		 int	 3
$LN18@RectifyBuf:

; 272  : 				ASSERT(m_dwTerminalPos>=m_dwDataQueryPos);

  0019d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001a6	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  001a9	73 1d		 jae	 SHORT $LN19@RectifyBuf
  001ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??RectifyBuffer@CWHDataQueue@@AAE_NK@Z@4JA
  001b0	83 c0 21	 add	 eax, 33			; 00000021H
  001b3	50		 push	 eax
  001b4	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  001b9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001be	89 45 80	 mov	 DWORD PTR tv211[ebp], eax
  001c1	83 7d 80 00	 cmp	 DWORD PTR tv211[ebp], 0
  001c5	74 01		 je	 SHORT $LN19@RectifyBuf
  001c7	cc		 int	 3
$LN19@RectifyBuf:

; 273  : 
; 274  : 				//拷贝数据
; 275  : 				DWORD dwPartOneSize=m_dwTerminalPos-m_dwDataQueryPos;

  001c8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001d1	2b 51 0c	 sub	 edx, DWORD PTR [ecx+12]
  001d4	89 55 e0	 mov	 DWORD PTR _dwPartOneSize$9[ebp], edx

; 276  : 				if (dwPartOneSize>0L) CopyMemory(pNewQueueServiceBuffer,m_pDataQueueBuffer+m_dwDataQueryPos,dwPartOneSize);

  001d7	74 1d		 je	 SHORT $LN11@RectifyBuf
  001d9	8b 45 e0	 mov	 eax, DWORD PTR _dwPartOneSize$9[ebp]
  001dc	50		 push	 eax
  001dd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001e0	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001e3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001e6	03 50 0c	 add	 edx, DWORD PTR [eax+12]
  001e9	52		 push	 edx
  001ea	8b 4d e4	 mov	 ecx, DWORD PTR _pNewQueueServiceBuffer$10[ebp]
  001ed	51		 push	 ecx
  001ee	e8 00 00 00 00	 call	 _memcpy
  001f3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@RectifyBuf:

; 277  : 				if (m_dwDataSize>dwPartOneSize)

  001f6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001fc	3b 4d e0	 cmp	 ecx, DWORD PTR _dwPartOneSize$9[ebp]
  001ff	76 1d		 jbe	 SHORT $LN10@RectifyBuf

; 278  : 				{
; 279  : 					//ASSERT((m_dwInsertPos+dwPartOneSize)==m_dwDataSize);
; 280  : 					CopyMemory(pNewQueueServiceBuffer+dwPartOneSize,m_pDataQueueBuffer,m_dwInsertPos);

  00201	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00204	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00207	51		 push	 ecx
  00208	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0020e	50		 push	 eax
  0020f	8b 4d e4	 mov	 ecx, DWORD PTR _pNewQueueServiceBuffer$10[ebp]
  00212	03 4d e0	 add	 ecx, DWORD PTR _dwPartOneSize$9[ebp]
  00215	51		 push	 ecx
  00216	e8 00 00 00 00	 call	 _memcpy
  0021b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@RectifyBuf:

; 281  : 				}
; 282  : 			}
; 283  : 
; 284  : 			//设置变量
; 285  : 			m_dwDataQueryPos=0L;

  0021e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00221	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 286  : 			m_dwInsertPos=m_dwDataSize;

  00228	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0022b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00231	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 287  : 			m_dwTerminalPos=m_dwDataSize;

  00234	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00237	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0023a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0023d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 288  : 			m_dwBufferSize=m_dwBufferSize+dwRiseSize;

  00240	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00243	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00246	03 4d e8	 add	 ecx, DWORD PTR _dwRiseSize$11[ebp]
  00249	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0024c	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 289  : 
; 290  : 			//设置缓冲
; 291  : 			SafeDeleteArray(m_pDataQueueBuffer);

  0024f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00253	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00256	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00259	89 4d 88	 mov	 DWORD PTR $T3[ebp], ecx
  0025c	8b 55 88	 mov	 edx, DWORD PTR $T3[ebp]
  0025f	52		 push	 edx
  00260	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00265	83 c4 04	 add	 esp, 4
  00268	eb 28		 jmp	 SHORT $LN24@RectifyBuf
__catch$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$1:
  0026a	33 c0		 xor	 eax, eax
  0026c	75 1e		 jne	 SHORT $LN20@RectifyBuf
  0026e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??RectifyBuffer@CWHDataQueue@@AAE_NK@Z@4JA
  00274	83 c1 34	 add	 ecx, 52			; 00000034H
  00277	51		 push	 ecx
  00278	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0027d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00282	89 45 80	 mov	 DWORD PTR tv212[ebp], eax
  00285	83 7d 80 00	 cmp	 DWORD PTR tv212[ebp], 0
  00289	74 01		 je	 SHORT $LN20@RectifyBuf
  0028b	cc		 int	 3
$LN20@RectifyBuf:
  0028c	b8 00 00 00 00	 mov	 eax, $LN30@RectifyBuf
  00291	c3		 ret	 0
$LN24@RectifyBuf:
  00292	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00299	eb 07		 jmp	 SHORT __tryend$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$2
$LN30@RectifyBuf:
  0029b	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
__tryend$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$2:
  002a2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002a5	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 292  : 			m_pDataQueueBuffer=pNewQueueServiceBuffer;

  002ac	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002af	8b 4d e4	 mov	 ecx, DWORD PTR _pNewQueueServiceBuffer$10[ebp]
  002b2	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 293  : 		}

  002b5	eb 10		 jmp	 SHORT $LN23@RectifyBuf
__catch$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$3:

; 294  : 		catch (...) { return false; }

  002b7	c6 45 87 00	 mov	 BYTE PTR $T2[ebp], 0
  002bb	b8 00 00 00 00	 mov	 eax, $LN32@RectifyBuf
  002c0	c3		 ret	 0
  002c1	b8 00 00 00 00	 mov	 eax, $LN23@RectifyBuf
  002c6	c3		 ret	 0
$LN23@RectifyBuf:
  002c7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  002ce	eb 0d		 jmp	 SHORT $LN31@RectifyBuf
$LN32@RectifyBuf:
  002d0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  002d7	b8 00 00 00 00	 mov	 eax, $LN34@RectifyBuf
  002dc	c3		 ret	 0
$LN31@RectifyBuf:

; 295  : 	}

  002dd	b8 00 00 00 00	 mov	 eax, $LN36@RectifyBuf
  002e2	c3		 ret	 0
$LN21@RectifyBuf:
  002e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002ea	eb 07		 jmp	 SHORT __tryend$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$5
$LN36@RectifyBuf:
  002ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z$5:
  002f3	eb 0c		 jmp	 SHORT $LN33@RectifyBuf
$LN34@RectifyBuf:
  002f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 294  : 		catch (...) { return false; }

  002fc	8a 45 87	 mov	 al, BYTE PTR $T2[ebp]
  002ff	eb 10		 jmp	 SHORT $LN14@RectifyBuf
$LN33@RectifyBuf:
  00301	eb 0c		 jmp	 SHORT $LN27@RectifyBuf
$LN28@RectifyBuf:
  00303	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 265  : 			if (pNewQueueServiceBuffer==NULL) return false;

  0030a	8a 45 8f	 mov	 al, BYTE PTR $T4[ebp]
  0030d	eb 02		 jmp	 SHORT $LN14@RectifyBuf
$LN27@RectifyBuf:

; 296  : 
; 297  : 	return true;

  0030f	b0 01		 mov	 al, 1
$LN14@RectifyBuf:

; 298  : }

  00311	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00314	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0031b	59		 pop	 ecx
  0031c	5f		 pop	 edi
  0031d	5e		 pop	 esi
  0031e	5b		 pop	 ebx
  0031f	8b e5		 mov	 esp, ebp
  00321	5d		 pop	 ebp
  00322	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RectifyBuffer@CWHDataQueue@@AAE_NK@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RectifyBuffer@CWHDataQueue@@AAE_NK@Z ENDP		; CWHDataQueue::RectifyBuffer
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z
_TEXT	SEGMENT
_wCopySize$ = -16					; size = 2
_wPacketSize$ = -12					; size = 2
_pDataHead$ = -8					; size = 4
_this$ = -4						; size = 4
_DataHead$ = 8						; size = 4
_pBuffer$ = 12						; size = 4
_wBufferSize$ = 16					; size = 2
?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z PROC ; CWHDataQueue::DistillData, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 167  : 	//效验变量
; 168  : 	ASSERT(m_dwDataSize>0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	77 19		 ja	 SHORT $LN10@DistillDat
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN10@DistillDat
  0002d	cc		 int	 3
$LN10@DistillDat:

; 169  : 	ASSERT(m_dwDataPacketCount>0);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00035	77 19		 ja	 SHORT $LN11@DistillDat
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  0003d	83 c1 03	 add	 ecx, 3
  00040	51		 push	 ecx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00046	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0004b	85 c0		 test	 eax, eax
  0004d	74 01		 je	 SHORT $LN11@DistillDat
  0004f	cc		 int	 3
$LN11@DistillDat:

; 170  : 	ASSERT(m_pDataQueueBuffer!=NULL);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00057	75 19		 jne	 SHORT $LN12@DistillDat
  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  0005f	83 c1 04	 add	 ecx, 4
  00062	51		 push	 ecx
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00068	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0006d	85 c0		 test	 eax, eax
  0006f	74 01		 je	 SHORT $LN12@DistillDat
  00071	cc		 int	 3
$LN12@DistillDat:

; 171  : 
; 172  : 	//效验变量
; 173  : 	if (m_dwDataSize==0L) return false;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00079	75 07		 jne	 SHORT $LN2@DistillDat
  0007b	32 c0		 xor	 al, al
  0007d	e9 d5 01 00 00	 jmp	 $LN1@DistillDat
$LN2@DistillDat:

; 174  : 	if (m_dwDataPacketCount==0L) return false;

  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00089	75 07		 jne	 SHORT $LN3@DistillDat
  0008b	32 c0		 xor	 al, al
  0008d	e9 c5 01 00 00	 jmp	 $LN1@DistillDat
$LN3@DistillDat:

; 175  : 
; 176  : 	//调整参数
; 177  : 	if (m_dwDataQueryPos==m_dwTerminalPos)

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0009b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0009e	75 16		 jne	 SHORT $LN4@DistillDat

; 178  : 	{
; 179  : 		m_dwDataQueryPos=0L;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 180  : 		m_dwTerminalPos=m_dwInsertPos;

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b3	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN4@DistillDat:

; 181  : 	}
; 182  : 
; 183  : 	//获取指针
; 184  : 	ASSERT(m_dwBufferSize>=(m_dwDataQueryPos+sizeof(tagDataHead)));

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000bc	83 c1 04	 add	 ecx, 4
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  000c5	73 18		 jae	 SHORT $LN13@DistillDat
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  000cc	83 c0 12	 add	 eax, 18			; 00000012H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000d5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000da	85 c0		 test	 eax, eax
  000dc	74 01		 je	 SHORT $LN13@DistillDat
  000de	cc		 int	 3
$LN13@DistillDat:

; 185  : 	tagDataHead * pDataHead=(tagDataHead *)(m_pDataQueueBuffer+m_dwDataQueryPos);

  000df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000e5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e8	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  000eb	89 4d f8	 mov	 DWORD PTR _pDataHead$[ebp], ecx

; 186  : 	ASSERT(wBufferSize>=pDataHead->wDataSize);

  000ee	0f b7 45 10	 movzx	 eax, WORD PTR _wBufferSize$[ebp]
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _pDataHead$[ebp]
  000f5	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000f8	3b c2		 cmp	 eax, edx
  000fa	7d 18		 jge	 SHORT $LN14@DistillDat
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  00101	83 c0 14	 add	 eax, 20			; 00000014H
  00104	50		 push	 eax
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0010a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0010f	85 c0		 test	 eax, eax
  00111	74 01		 je	 SHORT $LN14@DistillDat
  00113	cc		 int	 3
$LN14@DistillDat:

; 187  : 
; 188  : 	//获取大小
; 189  : 	WORD wPacketSize=sizeof(DataHead)+pDataHead->wDataSize;

  00114	8b 45 f8	 mov	 eax, DWORD PTR _pDataHead$[ebp]
  00117	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0011a	83 c1 04	 add	 ecx, 4
  0011d	66 89 4d f4	 mov	 WORD PTR _wPacketSize$[ebp], cx

; 190  : 	ASSERT(m_dwBufferSize>=(m_dwDataQueryPos+wPacketSize));

  00121	0f b7 45 f4	 movzx	 eax, WORD PTR _wPacketSize$[ebp]
  00125	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  0012b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0012e	39 42 18	 cmp	 DWORD PTR [edx+24], eax
  00131	73 18		 jae	 SHORT $LN15@DistillDat
  00133	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  00138	83 c0 18	 add	 eax, 24			; 00000018H
  0013b	50		 push	 eax
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00141	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00146	85 c0		 test	 eax, eax
  00148	74 01		 je	 SHORT $LN15@DistillDat
  0014a	cc		 int	 3
$LN15@DistillDat:

; 191  : 
; 192  : 	//判断缓冲
; 193  : 	WORD wCopySize=0;

  0014b	33 c0		 xor	 eax, eax
  0014d	66 89 45 f0	 mov	 WORD PTR _wCopySize$[ebp], ax

; 194  : 	ASSERT(wBufferSize>=pDataHead->wDataSize);

  00151	0f b7 45 10	 movzx	 eax, WORD PTR _wBufferSize$[ebp]
  00155	8b 4d f8	 mov	 ecx, DWORD PTR _pDataHead$[ebp]
  00158	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0015b	3b c2		 cmp	 eax, edx
  0015d	7d 18		 jge	 SHORT $LN16@DistillDat
  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  00164	83 c0 1c	 add	 eax, 28			; 0000001cH
  00167	50		 push	 eax
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0016d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00172	85 c0		 test	 eax, eax
  00174	74 01		 je	 SHORT $LN16@DistillDat
  00176	cc		 int	 3
$LN16@DistillDat:

; 195  : 	if (wBufferSize>=pDataHead->wDataSize) wCopySize=pDataHead->wDataSize;

  00177	0f b7 45 10	 movzx	 eax, WORD PTR _wBufferSize$[ebp]
  0017b	8b 4d f8	 mov	 ecx, DWORD PTR _pDataHead$[ebp]
  0017e	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00181	3b c2		 cmp	 eax, edx
  00183	7c 0a		 jl	 SHORT $LN5@DistillDat
  00185	8b 45 f8	 mov	 eax, DWORD PTR _pDataHead$[ebp]
  00188	66 8b 08	 mov	 cx, WORD PTR [eax]
  0018b	66 89 4d f0	 mov	 WORD PTR _wCopySize$[ebp], cx
$LN5@DistillDat:

; 196  : 
; 197  : 	//拷贝数据
; 198  : 	DataHead=*pDataHead;

  0018f	8b 45 f8	 mov	 eax, DWORD PTR _pDataHead$[ebp]
  00192	8b 08		 mov	 ecx, DWORD PTR [eax]
  00194	8b 55 08	 mov	 edx, DWORD PTR _DataHead$[ebp]
  00197	89 0a		 mov	 DWORD PTR [edx], ecx

; 199  : 	if (DataHead.wDataSize>0)

  00199	8b 45 08	 mov	 eax, DWORD PTR _DataHead$[ebp]
  0019c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0019f	85 c9		 test	 ecx, ecx
  001a1	7e 32		 jle	 SHORT $LN6@DistillDat

; 200  : 	{
; 201  : 		if (wBufferSize<pDataHead->wDataSize) DataHead.wDataSize=0;

  001a3	0f b7 45 10	 movzx	 eax, WORD PTR _wBufferSize$[ebp]
  001a7	8b 4d f8	 mov	 ecx, DWORD PTR _pDataHead$[ebp]
  001aa	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  001ad	3b c2		 cmp	 eax, edx
  001af	7d 0a		 jge	 SHORT $LN7@DistillDat
  001b1	33 c0		 xor	 eax, eax
  001b3	8b 4d 08	 mov	 ecx, DWORD PTR _DataHead$[ebp]
  001b6	66 89 01	 mov	 WORD PTR [ecx], ax
  001b9	eb 1a		 jmp	 SHORT $LN6@DistillDat
$LN7@DistillDat:

; 202  : 		else CopyMemory(pBuffer,pDataHead+1,DataHead.wDataSize);

  001bb	8b 45 08	 mov	 eax, DWORD PTR _DataHead$[ebp]
  001be	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001c1	51		 push	 ecx
  001c2	8b 55 f8	 mov	 edx, DWORD PTR _pDataHead$[ebp]
  001c5	83 c2 04	 add	 edx, 4
  001c8	52		 push	 edx
  001c9	8b 45 0c	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _memcpy
  001d2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@DistillDat:

; 203  : 	}
; 204  : 
; 205  : 	//效验参数
; 206  : 	ASSERT(wPacketSize<=m_dwDataSize);

  001d5	0f b7 45 f4	 movzx	 eax, WORD PTR _wPacketSize$[ebp]
  001d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001dc	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  001df	76 19		 jbe	 SHORT $LN17@DistillDat
  001e1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  001e7	83 c2 28	 add	 edx, 40			; 00000028H
  001ea	52		 push	 edx
  001eb	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  001f0	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001f5	85 c0		 test	 eax, eax
  001f7	74 01		 je	 SHORT $LN17@DistillDat
  001f9	cc		 int	 3
$LN17@DistillDat:

; 207  : 	ASSERT(m_dwBufferSize>=(m_dwDataQueryPos+wPacketSize));

  001fa	0f b7 45 f4	 movzx	 eax, WORD PTR _wPacketSize$[ebp]
  001fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00201	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  00204	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00207	39 42 18	 cmp	 DWORD PTR [edx+24], eax
  0020a	73 18		 jae	 SHORT $LN18@DistillDat
  0020c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z@4JA
  00211	83 c0 29	 add	 eax, 41			; 00000029H
  00214	50		 push	 eax
  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0021a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0021f	85 c0		 test	 eax, eax
  00221	74 01		 je	 SHORT $LN18@DistillDat
  00223	cc		 int	 3
$LN18@DistillDat:

; 208  : 
; 209  : 	//设置变量
; 210  : 	m_dwDataPacketCount--;

  00224	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00227	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0022a	83 e9 01	 sub	 ecx, 1
  0022d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00230	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 211  : 	m_dwDataSize-=wPacketSize;

  00233	0f b7 45 f4	 movzx	 eax, WORD PTR _wPacketSize$[ebp]
  00237	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0023a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0023d	2b d0		 sub	 edx, eax
  0023f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00242	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 212  : 	m_dwDataQueryPos+=wPacketSize;

  00245	0f b7 45 f4	 movzx	 eax, WORD PTR _wPacketSize$[ebp]
  00249	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024c	03 41 0c	 add	 eax, DWORD PTR [ecx+12]
  0024f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00252	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 213  : 
; 214  : 	return true;

  00255	b0 01		 mov	 al, 1
$LN1@DistillDat:

; 215  : }

  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	5b		 pop	 ebx
  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c2 0c 00	 ret	 12			; 0000000cH
?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z ENDP ; CWHDataQueue::DistillData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?RemoveData@CWHDataQueue@@QAEX_N@Z
_TEXT	SEGMENT
$T2 = -88						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_bFreeMemroy$ = 8					; size = 1
?RemoveData@CWHDataQueue@@QAEX_N@Z PROC			; CWHDataQueue::RemoveData, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RemoveData@CWHDataQueue@@QAEX_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 48	 sub	 esp, 72			; 00000048H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 	//设置变量
; 221  : 	m_dwDataSize=0L;

  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 222  : 	m_dwInsertPos=0L;

  00039	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 223  : 	m_dwTerminalPos=0L;

  00043	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00046	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 224  : 	m_dwDataQueryPos=0L;

  0004d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00050	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 225  : 	m_dwDataPacketCount=0L;

  00057	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 226  : 
; 227  : 	//删除内存
; 228  : 	if (bFreeMemroy==true) 

  00061	0f b6 45 08	 movzx	 eax, BYTE PTR _bFreeMemroy$[ebp]
  00065	83 f8 01	 cmp	 eax, 1
  00068	75 65		 jne	 SHORT $LN1@RemoveData

; 229  : 	{
; 230  : 		m_dwBufferSize=0;

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 231  : 		SafeDeleteArray(m_pDataQueueBuffer);

  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00081	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  00084	8b 55 a8	 mov	 edx, DWORD PTR $T2[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0008d	83 c4 04	 add	 esp, 4
  00090	eb 23		 jmp	 SHORT $LN6@RemoveData
__catch$?RemoveData@CWHDataQueue@@QAEX_N@Z$0:
  00092	33 c0		 xor	 eax, eax
  00094	75 19		 jne	 SHORT $LN5@RemoveData
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??RemoveData@CWHDataQueue@@QAEX_N@Z@4JA
  0009c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009f	51		 push	 ecx
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000a5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000aa	85 c0		 test	 eax, eax
  000ac	74 01		 je	 SHORT $LN5@RemoveData
  000ae	cc		 int	 3
$LN5@RemoveData:
  000af	b8 00 00 00 00	 mov	 eax, $LN9@RemoveData
  000b4	c3		 ret	 0
$LN6@RemoveData:
  000b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000bc	eb 07		 jmp	 SHORT __tryend$?RemoveData@CWHDataQueue@@QAEX_N@Z$1
$LN9@RemoveData:
  000be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?RemoveData@CWHDataQueue@@QAEX_N@Z$1:
  000c5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c8	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
$LN1@RemoveData:

; 232  : 	}
; 233  : 
; 234  : 	return;
; 235  : }

  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?RemoveData@CWHDataQueue@@QAEX_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RemoveData@CWHDataQueue@@QAEX_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RemoveData@CWHDataQueue@@QAEX_N@Z ENDP			; CWHDataQueue::RemoveData
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z
_TEXT	SEGMENT
tv214 = -108						; size = 4
tv205 = -108						; size = 4
$T2 = -101						; size = 1
_i$3 = -36						; size = 2
_wExcursion$4 = -32					; size = 2
_i$5 = -28						; size = 2
_DataHead$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_wIdentifier$ = 8					; size = 2
_DataBuffer$ = 12					; size = 4
_wDataCount$ = 16					; size = 2
?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z PROC ; CWHDataQueue::InsertData, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	//变量定义
; 95   : 	tagDataHead DataHead;
; 96   : 	ZeroMemory(&DataHead,sizeof(DataHead));

  0002f	6a 04		 push	 4
  00031	6a 00		 push	 0
  00033	8d 45 e8	 lea	 eax, DWORD PTR _DataHead$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memset
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 97   : 
; 98   : 	//设置变量
; 99   : 	DataHead.wDataSize=0;

  0003f	33 c0		 xor	 eax, eax
  00041	66 89 45 e8	 mov	 WORD PTR _DataHead$[ebp], ax

; 100  : 	DataHead.wIdentifier=wIdentifier;

  00045	66 8b 45 08	 mov	 ax, WORD PTR _wIdentifier$[ebp]
  00049	66 89 45 ea	 mov	 WORD PTR _DataHead$[ebp+2], ax

; 101  : 
; 102  : 	//累计大小
; 103  : 	for (WORD i=0;i<wDataCount;i++)

  0004d	33 c0		 xor	 eax, eax
  0004f	66 89 45 e4	 mov	 WORD PTR _i$5[ebp], ax
  00053	eb 0c		 jmp	 SHORT $LN4@InsertData
$LN2@InsertData:
  00055	66 8b 45 e4	 mov	 ax, WORD PTR _i$5[ebp]
  00059	66 83 c0 01	 add	 ax, 1
  0005d	66 89 45 e4	 mov	 WORD PTR _i$5[ebp], ax
$LN4@InsertData:
  00061	0f b7 45 10	 movzx	 eax, WORD PTR _wDataCount$[ebp]
  00065	0f b7 4d e4	 movzx	 ecx, WORD PTR _i$5[ebp]
  00069	3b c8		 cmp	 ecx, eax
  0006b	7d 26		 jge	 SHORT $LN3@InsertData

; 104  : 	{
; 105  : 		if (DataBuffer[i].wDataSize>0)

  0006d	0f b7 45 e4	 movzx	 eax, WORD PTR _i$5[ebp]
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _DataBuffer$[ebp]
  00074	0f b7 14 c1	 movzx	 edx, WORD PTR [ecx+eax*8]
  00078	85 d2		 test	 edx, edx
  0007a	7e 15		 jle	 SHORT $LN8@InsertData

; 106  : 		{
; 107  : 			DataHead.wDataSize+=DataBuffer[i].wDataSize;

  0007c	0f b7 45 e4	 movzx	 eax, WORD PTR _i$5[ebp]
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _DataBuffer$[ebp]
  00083	0f b7 14 c1	 movzx	 edx, WORD PTR [ecx+eax*8]
  00087	0f b7 45 e8	 movzx	 eax, WORD PTR _DataHead$[ebp]
  0008b	03 c2		 add	 eax, edx
  0008d	66 89 45 e8	 mov	 WORD PTR _DataHead$[ebp], ax
$LN8@InsertData:

; 108  : 		}
; 109  : 	}

  00091	eb c2		 jmp	 SHORT $LN2@InsertData
$LN3@InsertData:

; 110  : 
; 111  : 	//调整存储
; 112  : 	if (RectifyBuffer(sizeof(DataHead)+DataHead.wDataSize)==false)

  00093	0f b7 45 e8	 movzx	 eax, WORD PTR _DataHead$[ebp]
  00097	83 c0 04	 add	 eax, 4
  0009a	50		 push	 eax
  0009b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ?RectifyBuffer@CWHDataQueue@@AAE_NK@Z ; CWHDataQueue::RectifyBuffer
  000a3	0f b6 c8	 movzx	 ecx, al
  000a6	85 c9		 test	 ecx, ecx
  000a8	75 24		 jne	 SHORT $LN9@InsertData

; 113  : 	{
; 114  : 		ASSERT(FALSE);

  000aa	33 c0		 xor	 eax, eax
  000ac	75 19		 jne	 SHORT $LN14@InsertData
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z@4JA
  000b4	83 c1 15	 add	 ecx, 21			; 00000015H
  000b7	51		 push	 ecx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000bd	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000c2	85 c0		 test	 eax, eax
  000c4	74 01		 je	 SHORT $LN14@InsertData
  000c6	cc		 int	 3
$LN14@InsertData:

; 115  : 		return false;

  000c7	32 c0		 xor	 al, al
  000c9	e9 8d 01 00 00	 jmp	 $LN1@InsertData
$LN9@InsertData:

; 116  : 	}
; 117  : 
; 118  : 	//插入数据
; 119  : 	try

  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 120  : 	{
; 121  : 		//拷贝数据
; 122  : 		CopyMemory(m_pDataQueueBuffer+m_dwInsertPos,&DataHead,sizeof(DataHead));

  000d5	6a 04		 push	 4
  000d7	8d 45 e8	 lea	 eax, DWORD PTR _DataHead$[ebp]
  000da	50		 push	 eax
  000db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000e1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	03 50 04	 add	 edx, DWORD PTR [eax+4]
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 _memcpy
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : 
; 124  : 		//附加数据
; 125  : 		if (DataHead.wDataSize>0)

  000f0	0f b7 45 e8	 movzx	 eax, WORD PTR _DataHead$[ebp]
  000f4	85 c0		 test	 eax, eax
  000f6	0f 8e b5 00 00
	00		 jle	 $LN11@InsertData

; 126  : 		{
; 127  : 			//变量定义
; 128  : 			WORD wExcursion=sizeof(DataHead);

  000fc	b8 04 00 00 00	 mov	 eax, 4
  00101	66 89 45 e0	 mov	 WORD PTR _wExcursion$4[ebp], ax

; 129  : 
; 130  : 			//插入数据
; 131  : 			for (WORD i=0;i<wDataCount;i++)

  00105	33 c0		 xor	 eax, eax
  00107	66 89 45 dc	 mov	 WORD PTR _i$3[ebp], ax
  0010b	eb 0c		 jmp	 SHORT $LN7@InsertData
$LN5@InsertData:
  0010d	66 8b 45 dc	 mov	 ax, WORD PTR _i$3[ebp]
  00111	66 83 c0 01	 add	 ax, 1
  00115	66 89 45 dc	 mov	 WORD PTR _i$3[ebp], ax
$LN7@InsertData:
  00119	0f b7 45 10	 movzx	 eax, WORD PTR _wDataCount$[ebp]
  0011d	0f b7 4d dc	 movzx	 ecx, WORD PTR _i$3[ebp]
  00121	3b c8		 cmp	 ecx, eax
  00123	0f 8d 88 00 00
	00		 jge	 $LN11@InsertData

; 132  : 			{
; 133  : 				if (DataBuffer[i].wDataSize>0)

  00129	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  0012d	8b 4d 0c	 mov	 ecx, DWORD PTR _DataBuffer$[ebp]
  00130	0f b7 14 c1	 movzx	 edx, WORD PTR [ecx+eax*8]
  00134	85 d2		 test	 edx, edx
  00136	7e 74		 jle	 SHORT $LN12@InsertData

; 134  : 				{
; 135  : 					//效验状态
; 136  : 					ASSERT(DataBuffer[i].pDataBuffer!=NULL);

  00138	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  0013c	8b 4d 0c	 mov	 ecx, DWORD PTR _DataBuffer$[ebp]
  0013f	83 7c c1 04 00	 cmp	 DWORD PTR [ecx+eax*8+4], 0
  00144	75 1e		 jne	 SHORT $LN15@InsertData
  00146	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z@4JA
  0014c	83 c2 2b	 add	 edx, 43			; 0000002bH
  0014f	52		 push	 edx
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00155	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0015a	89 45 94	 mov	 DWORD PTR tv214[ebp], eax
  0015d	83 7d 94 00	 cmp	 DWORD PTR tv214[ebp], 0
  00161	74 01		 je	 SHORT $LN15@InsertData
  00163	cc		 int	 3
$LN15@InsertData:

; 137  : 
; 138  : 					//拷贝数据
; 139  : 					CopyMemory(m_pDataQueueBuffer+m_dwInsertPos+wExcursion,DataBuffer[i].pDataBuffer,DataBuffer[i].wDataSize);

  00164	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  00168	8b 4d 0c	 mov	 ecx, DWORD PTR _DataBuffer$[ebp]
  0016b	0f b7 14 c1	 movzx	 edx, WORD PTR [ecx+eax*8]
  0016f	52		 push	 edx
  00170	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  00174	8b 4d 0c	 mov	 ecx, DWORD PTR _DataBuffer$[ebp]
  00177	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  0017b	52		 push	 edx
  0017c	0f b7 45 e0	 movzx	 eax, WORD PTR _wExcursion$4[ebp]
  00180	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00186	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0018c	03 d0		 add	 edx, eax
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 _memcpy
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  : 
; 141  : 					//设置变量
; 142  : 					wExcursion+=DataBuffer[i].wDataSize;

  00197	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  0019b	8b 4d 0c	 mov	 ecx, DWORD PTR _DataBuffer$[ebp]
  0019e	0f b7 14 c1	 movzx	 edx, WORD PTR [ecx+eax*8]
  001a2	0f b7 45 e0	 movzx	 eax, WORD PTR _wExcursion$4[ebp]
  001a6	03 c2		 add	 eax, edx
  001a8	66 89 45 e0	 mov	 WORD PTR _wExcursion$4[ebp], ax
$LN12@InsertData:

; 143  : 				}
; 144  : 			}

  001ac	e9 5c ff ff ff	 jmp	 $LN5@InsertData
$LN11@InsertData:

; 145  : 		}
; 146  : 
; 147  : 		//调整数据
; 148  : 		m_dwDataPacketCount++;

  001b1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001b7	83 c1 01	 add	 ecx, 1
  001ba	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001bd	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 149  : 		m_dwDataSize+=sizeof(DataHead)+DataHead.wDataSize;

  001c0	0f b7 45 e8	 movzx	 eax, WORD PTR _DataHead$[ebp]
  001c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001ca	8d 44 10 04	 lea	 eax, DWORD PTR [eax+edx+4]
  001ce	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001d1	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 150  : 		m_dwInsertPos+=sizeof(DataHead)+DataHead.wDataSize;

  001d4	0f b7 45 e8	 movzx	 eax, WORD PTR _DataHead$[ebp]
  001d8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001db	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001de	8d 44 10 04	 lea	 eax, DWORD PTR [eax+edx+4]
  001e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 151  : 		m_dwTerminalPos=__max(m_dwTerminalPos,m_dwInsertPos);

  001e8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001eb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ee	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001f1	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001f4	76 0b		 jbe	 SHORT $LN16@InsertData
  001f6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001fc	89 4d 94	 mov	 DWORD PTR tv205[ebp], ecx
  001ff	eb 09		 jmp	 SHORT $LN17@InsertData
$LN16@InsertData:
  00201	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00204	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00207	89 45 94	 mov	 DWORD PTR tv205[ebp], eax
$LN17@InsertData:
  0020a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	8b 55 94	 mov	 edx, DWORD PTR tv205[ebp]
  00210	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 152  : 
; 153  : 		return true;

  00213	b0 01		 mov	 al, 1
  00215	eb 44		 jmp	 SHORT $LN1@InsertData
__catch$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z$0:

; 154  : 	}
; 155  : 	catch (...)
; 156  : 	{
; 157  : 		ASSERT(FALSE);

  00217	33 c0		 xor	 eax, eax
  00219	75 19		 jne	 SHORT $LN18@InsertData
  0021b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z@4JA
  00221	83 c1 40	 add	 ecx, 64			; 00000040H
  00224	51		 push	 ecx
  00225	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0022a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0022f	85 c0		 test	 eax, eax
  00231	74 01		 je	 SHORT $LN18@InsertData
  00233	cc		 int	 3
$LN18@InsertData:

; 158  : 		return false;

  00234	c6 45 9b 00	 mov	 BYTE PTR $T2[ebp], 0
  00238	b8 00 00 00 00	 mov	 eax, $LN22@InsertData
  0023d	c3		 ret	 0

; 159  : 	}

  0023e	b8 00 00 00 00	 mov	 eax, __tryend$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z$1
  00243	c3		 ret	 0
__tryend$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z$1:
  00244	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0024b	eb 0c		 jmp	 SHORT $LN21@InsertData
$LN22@InsertData:
  0024d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 158  : 		return false;

  00254	8a 45 9b	 mov	 al, BYTE PTR $T2[ebp]
  00257	eb 02		 jmp	 SHORT $LN1@InsertData
$LN21@InsertData:

; 160  : 
; 161  : 	return false;

  00259	32 c0		 xor	 al, al
$LN1@InsertData:

; 162  : }

  0025b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0025e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00265	59		 pop	 ecx
  00266	5f		 pop	 edi
  00267	5e		 pop	 esi
  00268	5b		 pop	 ebx
  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z ENDP ; CWHDataQueue::InsertData
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?InsertData@CWHDataQueue@@QAE_NGPAXG@Z
_TEXT	SEGMENT
tv165 = -96						; size = 4
tv156 = -96						; size = 4
$T2 = -89						; size = 1
_DataHead$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_wIdentifier$ = 8					; size = 2
_pBuffer$ = 12						; size = 4
_wDataSize$ = 16					; size = 2
?InsertData@CWHDataQueue@@QAE_NGPAXG@Z PROC		; CWHDataQueue::InsertData, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 50	 sub	 esp, 80			; 00000050H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	//变量定义
; 47   : 	tagDataHead DataHead;
; 48   : 	ZeroMemory(&DataHead,sizeof(DataHead));

  0002f	6a 04		 push	 4
  00031	6a 00		 push	 0
  00033	8d 45 e8	 lea	 eax, DWORD PTR _DataHead$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memset
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 49   : 
; 50   : 	//设置变量
; 51   : 	DataHead.wDataSize=wDataSize;

  0003f	66 8b 45 10	 mov	 ax, WORD PTR _wDataSize$[ebp]
  00043	66 89 45 e8	 mov	 WORD PTR _DataHead$[ebp], ax

; 52   : 	DataHead.wIdentifier=wIdentifier;

  00047	66 8b 45 08	 mov	 ax, WORD PTR _wIdentifier$[ebp]
  0004b	66 89 45 ea	 mov	 WORD PTR _DataHead$[ebp+2], ax

; 53   : 
; 54   : 	//调整存储
; 55   : 	if (RectifyBuffer(sizeof(DataHead)+DataHead.wDataSize)==false)

  0004f	0f b7 45 e8	 movzx	 eax, WORD PTR _DataHead$[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	50		 push	 eax
  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?RectifyBuffer@CWHDataQueue@@AAE_NK@Z ; CWHDataQueue::RectifyBuffer
  0005f	0f b6 c8	 movzx	 ecx, al
  00062	85 c9		 test	 ecx, ecx
  00064	75 24		 jne	 SHORT $LN2@InsertData

; 56   : 	{
; 57   : 		ASSERT(FALSE);

  00066	33 c0		 xor	 eax, eax
  00068	75 19		 jne	 SHORT $LN6@InsertData
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGPAXG@Z@4JA
  00070	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00079	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007e	85 c0		 test	 eax, eax
  00080	74 01		 je	 SHORT $LN6@InsertData
  00082	cc		 int	 3
$LN6@InsertData:

; 58   : 		return false;

  00083	32 c0		 xor	 al, al
  00085	e9 19 01 00 00	 jmp	 $LN1@InsertData
$LN2@InsertData:

; 59   : 	}
; 60   : 
; 61   : 	//插入数据
; 62   : 	try

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 63   : 	{
; 64   : 		//拷贝数据
; 65   : 		CopyMemory(m_pDataQueueBuffer+m_dwInsertPos,&DataHead,sizeof(DataHead));

  00091	6a 04		 push	 4
  00093	8d 45 e8	 lea	 eax, DWORD PTR _DataHead$[ebp]
  00096	50		 push	 eax
  00097	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0009d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	03 50 04	 add	 edx, DWORD PTR [eax+4]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 _memcpy
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 
; 67   : 		//附加数据
; 68   : 		if (wDataSize>0) 

  000ac	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000b0	85 c0		 test	 eax, eax
  000b2	7e 45		 jle	 SHORT $LN4@InsertData

; 69   : 		{
; 70   : 			ASSERT(pBuffer!=NULL);

  000b4	83 7d 0c 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  000b8	75 1d		 jne	 SHORT $LN7@InsertData
  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGPAXG@Z@4JA
  000bf	83 c0 19	 add	 eax, 25			; 00000019H
  000c2	50		 push	 eax
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000c8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000cd	89 45 a0	 mov	 DWORD PTR tv165[ebp], eax
  000d0	83 7d a0 00	 cmp	 DWORD PTR tv165[ebp], 0
  000d4	74 01		 je	 SHORT $LN7@InsertData
  000d6	cc		 int	 3
$LN7@InsertData:

; 71   : 			CopyMemory(m_pDataQueueBuffer+m_dwInsertPos+sizeof(DataHead),pBuffer,wDataSize);

  000d7	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 0c	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000e3	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000e6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ec	8d 44 10 04	 lea	 eax, DWORD PTR [eax+edx+4]
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 _memcpy
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@InsertData:

; 72   : 		}
; 73   : 
; 74   : 		//调整数据
; 75   : 		m_dwDataPacketCount++;

  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ff	83 c1 01	 add	 ecx, 1
  00102	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00105	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 76   : 		m_dwDataSize+=sizeof(DataHead)+wDataSize;

  00108	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0010c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00112	8d 44 10 04	 lea	 eax, DWORD PTR [eax+edx+4]
  00116	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 77   : 		m_dwInsertPos+=sizeof(DataHead)+wDataSize;

  0011c	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00120	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00126	8d 44 10 04	 lea	 eax, DWORD PTR [eax+edx+4]
  0012a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 78   : 		m_dwTerminalPos=__max(m_dwTerminalPos,m_dwInsertPos);

  00130	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00133	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00139	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0013c	76 0b		 jbe	 SHORT $LN8@InsertData
  0013e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00141	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00144	89 4d a0	 mov	 DWORD PTR tv156[ebp], ecx
  00147	eb 09		 jmp	 SHORT $LN9@InsertData
$LN8@InsertData:
  00149	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0014f	89 45 a0	 mov	 DWORD PTR tv156[ebp], eax
$LN9@InsertData:
  00152	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	8b 55 a0	 mov	 edx, DWORD PTR tv156[ebp]
  00158	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 79   : 
; 80   : 		return true;

  0015b	b0 01		 mov	 al, 1
  0015d	eb 44		 jmp	 SHORT $LN1@InsertData
__catch$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z$0:

; 81   : 	}
; 82   : 	catch (...)
; 83   : 	{
; 84   : 		ASSERT(FALSE);

  0015f	33 c0		 xor	 eax, eax
  00161	75 19		 jne	 SHORT $LN10@InsertData
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InsertData@CWHDataQueue@@QAE_NGPAXG@Z@4JA
  00169	83 c1 27	 add	 ecx, 39			; 00000027H
  0016c	51		 push	 ecx
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00172	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00177	85 c0		 test	 eax, eax
  00179	74 01		 je	 SHORT $LN10@InsertData
  0017b	cc		 int	 3
$LN10@InsertData:

; 85   : 		return false;

  0017c	c6 45 a7 00	 mov	 BYTE PTR $T2[ebp], 0
  00180	b8 00 00 00 00	 mov	 eax, $LN14@InsertData
  00185	c3		 ret	 0

; 86   : 	}

  00186	b8 00 00 00 00	 mov	 eax, __tryend$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z$1
  0018b	c3		 ret	 0
__tryend$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z$1:
  0018c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00193	eb 0c		 jmp	 SHORT $LN13@InsertData
$LN14@InsertData:
  00195	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 85   : 		return false;

  0019c	8a 45 a7	 mov	 al, BYTE PTR $T2[ebp]
  0019f	eb 02		 jmp	 SHORT $LN1@InsertData
$LN13@InsertData:

; 87   : 
; 88   : 	return false;

  001a1	32 c0		 xor	 al, al
$LN1@InsertData:

; 89   : }

  001a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ad	59		 pop	 ecx
  001ae	5f		 pop	 edi
  001af	5e		 pop	 esi
  001b0	5b		 pop	 ebx
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InsertData@CWHDataQueue@@QAE_NGPAXG@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InsertData@CWHDataQueue@@QAE_NGPAXG@Z ENDP		; CWHDataQueue::InsertData
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.h
;	COMDAT ?GetDataPacketCount@CWHDataQueue@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataPacketCount@CWHDataQueue@@QAEKXZ PROC		; CWHDataQueue::GetDataPacketCount, COMDAT
; _this$ = ecx

; 66   : 	DWORD GetDataPacketCount() { return m_dwDataPacketCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetDataPacketCount@CWHDataQueue@@QAEKXZ ENDP		; CWHDataQueue::GetDataPacketCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?GetBurthenInfo@CWHDataQueue@@QAEXAAUtagBurthenInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_BurthenInfo$ = 8					; size = 4
?GetBurthenInfo@CWHDataQueue@@QAEXAAUtagBurthenInfo@@@Z PROC ; CWHDataQueue::GetBurthenInfo, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	//设置变量
; 36   : 	BurthenInfo.dwDataSize=m_dwDataSize;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _BurthenInfo$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 37   : 	BurthenInfo.dwBufferSize=m_dwBufferSize;

  00017	8b 45 08	 mov	 eax, DWORD PTR _BurthenInfo$[ebp]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00020	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 38   : 	BurthenInfo.dwDataPacketCount=m_dwDataPacketCount;

  00023	8b 45 08	 mov	 eax, DWORD PTR _BurthenInfo$[ebp]
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 39   : 
; 40   : 	return;
; 41   : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?GetBurthenInfo@CWHDataQueue@@QAEXAAUtagBurthenInfo@@@Z ENDP ; CWHDataQueue::GetBurthenInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ??1CWHDataQueue@@UAE@XZ
_TEXT	SEGMENT
$T2 = -88						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CWHDataQueue@@UAE@XZ PROC				; CWHDataQueue::~CWHDataQueue, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CWHDataQueue@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 48	 sub	 esp, 72			; 00000048H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHDataQueue@@6B@

; 28   : 	SafeDeleteArray(m_pDataQueueBuffer);

  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00045	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  00048	8b 55 a8	 mov	 edx, DWORD PTR $T2[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00051	83 c4 04	 add	 esp, 4
  00054	eb 23		 jmp	 SHORT $LN5@CWHDataQue
__catch$??1CWHDataQueue@@UAE@XZ$0:
  00056	33 c0		 xor	 eax, eax
  00058	75 19		 jne	 SHORT $LN4@CWHDataQue
  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CWHDataQueue@@UAE@XZ@4JA
  00060	83 c1 01	 add	 ecx, 1
  00063	51		 push	 ecx
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BDNOMOGN@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00069	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0006e	85 c0		 test	 eax, eax
  00070	74 01		 je	 SHORT $LN4@CWHDataQue
  00072	cc		 int	 3
$LN4@CWHDataQue:
  00073	b8 00 00 00 00	 mov	 eax, $LN8@CWHDataQue
  00078	c3		 ret	 0
$LN5@CWHDataQue:
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00080	eb 07		 jmp	 SHORT __tryend$??1CWHDataQueue@@UAE@XZ$1
$LN8@CWHDataQue:
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??1CWHDataQueue@@UAE@XZ$1:
  00089	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 29   : 	return;
; 30   : }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CWHDataQueue@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CWHDataQueue@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CWHDataQueue@@UAE@XZ ENDP				; CWHDataQueue::~CWHDataQueue
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ??0CWHDataQueue@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWHDataQueue@@QAE@XZ PROC				; CWHDataQueue::CWHDataQueue, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHDataQueue@@6B@

; 9    : 	//查询变量
; 10   : 	m_dwInsertPos=0L;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 11   : 	m_dwTerminalPos=0L;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 12   : 	m_dwDataQueryPos=0L;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 13   : 
; 14   : 	//数据变量
; 15   : 	m_dwDataSize=0L;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 16   : 	m_dwDataPacketCount=0L;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 17   : 
; 18   : 	//缓冲变量
; 19   : 	m_dwBufferSize=0L;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 20   : 	m_pDataQueueBuffer=NULL;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 21   : 
; 22   : 	return;
; 23   : }

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
??0CWHDataQueue@@QAE@XZ ENDP				; CWHDataQueue::CWHDataQueue
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whdataqueue.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
