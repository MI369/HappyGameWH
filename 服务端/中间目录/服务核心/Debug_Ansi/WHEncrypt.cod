; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\服务核心\WHEncrypt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?g_cbEncryptMap@@3QBEB DB 070H				; g_cbEncryptMap
	DB	02fH
	DB	040H
	DB	05fH
	DB	044H
	DB	08eH
	DB	06eH
	DB	045H
	DB	07eH
	DB	0abH
	DB	02cH
	DB	01fH
	DB	0b4H
	DB	0acH
	DB	09dH
	DB	091H
	DB	0dH
	DB	036H
	DB	09bH
	DB	0bH
	DB	0d4H
	DB	0c4H
	DB	039H
	DB	074H
	DB	0bfH
	DB	023H
	DB	016H
	DB	014H
	DB	06H
	DB	0ebH
	DB	04H
	DB	03eH
	DB	012H
	DB	05cH
	DB	08bH
	DB	0bcH
	DB	061H
	DB	063H
	DB	0f6H
	DB	0a5H
	DB	0e1H
	DB	065H
	DB	0d8H
	DB	0f5H
	DB	05aH
	DB	07H
	DB	0f0H
	DB	013H
	DB	0f2H
	DB	020H
	DB	06bH
	DB	04aH
	DB	024H
	DB	059H
	DB	089H
	DB	064H
	DB	0d7H
	DB	042H
	DB	06aH
	DB	05eH
	DB	03dH
	DB	0aH
	DB	077H
	DB	0e0H
	DB	080H
	DB	027H
	DB	0b8H
	DB	0c5H
	DB	08cH
	DB	0eH
	DB	0faH
	DB	08aH
	DB	0d5H
	DB	029H
	DB	056H
	DB	057H
	DB	06cH
	DB	053H
	DB	067H
	DB	041H
	DB	0e8H
	DB	00H
	DB	01aH
	DB	0ceH
	DB	086H
	DB	083H
	DB	0b0H
	DB	022H
	DB	028H
	DB	04dH
	DB	03fH
	DB	026H
	DB	046H
	DB	04fH
	DB	06fH
	DB	02bH
	DB	072H
	DB	03aH
	DB	0f1H
	DB	08dH
	DB	097H
	DB	095H
	DB	049H
	DB	084H
	DB	0e5H
	DB	0e3H
	DB	079H
	DB	08fH
	DB	051H
	DB	010H
	DB	0a8H
	DB	082H
	DB	0c6H
	DB	0ddH
	DB	0ffH
	DB	0fcH
	DB	0e4H
	DB	0cfH
	DB	0b3H
	DB	09H
	DB	05dH
	DB	0eaH
	DB	09cH
	DB	034H
	DB	0f9H
	DB	017H
	DB	09fH
	DB	0daH
	DB	087H
	DB	0f8H
	DB	015H
	DB	05H
	DB	03cH
	DB	0d3H
	DB	0a4H
	DB	085H
	DB	02eH
	DB	0fbH
	DB	0eeH
	DB	047H
	DB	03bH
	DB	0efH
	DB	037H
	DB	07fH
	DB	093H
	DB	0afH
	DB	069H
	DB	0cH
	DB	071H
	DB	031H
	DB	0deH
	DB	021H
	DB	075H
	DB	0a0H
	DB	0aaH
	DB	0baH
	DB	07cH
	DB	038H
	DB	02H
	DB	0b7H
	DB	081H
	DB	01H
	DB	0fdH
	DB	0e7H
	DB	01dH
	DB	0ccH
	DB	0cdH
	DB	0bdH
	DB	01bH
	DB	07aH
	DB	02aH
	DB	0adH
	DB	066H
	DB	0beH
	DB	055H
	DB	033H
	DB	03H
	DB	0dbH
	DB	088H
	DB	0b2H
	DB	01eH
	DB	04eH
	DB	0b9H
	DB	0e6H
	DB	0c2H
	DB	0f7H
	DB	0cbH
	DB	07dH
	DB	0c9H
	DB	062H
	DB	0c3H
	DB	0a6H
	DB	0dcH
	DB	0a7H
	DB	050H
	DB	0b5H
	DB	04bH
	DB	094H
	DB	0c0H
	DB	092H
	DB	04cH
	DB	011H
	DB	05bH
	DB	078H
	DB	0d9H
	DB	0b1H
	DB	0edH
	DB	019H
	DB	0e9H
	DB	0a1H
	DB	01cH
	DB	0b6H
	DB	032H
	DB	099H
	DB	0a3H
	DB	076H
	DB	09eH
	DB	07bH
	DB	06dH
	DB	09aH
	DB	030H
	DB	0d6H
	DB	0a9H
	DB	025H
	DB	0c7H
	DB	0aeH
	DB	096H
	DB	035H
	DB	0d0H
	DB	0bbH
	DB	0d2H
	DB	0c8H
	DB	0a2H
	DB	08H
	DB	0f3H
	DB	0d1H
	DB	073H
	DB	0f4H
	DB	048H
	DB	02dH
	DB	090H
	DB	0caH
	DB	0e2H
	DB	058H
	DB	0c1H
	DB	018H
	DB	052H
	DB	0feH
	DB	0dfH
	DB	068H
	DB	098H
	DB	054H
	DB	0ecH
	DB	060H
	DB	043H
	DB	0fH
?g_cbCrevasseMap@@3QBEB DB 051H				; g_cbCrevasseMap
	DB	0a1H
	DB	09eH
	DB	0b0H
	DB	01eH
	DB	083H
	DB	01cH
	DB	02dH
	DB	0e9H
	DB	077H
	DB	03dH
	DB	013H
	DB	093H
	DB	010H
	DB	045H
	DB	0ffH
	DB	06dH
	DB	0c9H
	DB	020H
	DB	02fH
	DB	01bH
	DB	082H
	DB	01aH
	DB	07dH
	DB	0f5H
	DB	0cfH
	DB	052H
	DB	0a8H
	DB	0d2H
	DB	0a4H
	DB	0b4H
	DB	0bH
	DB	031H
	DB	097H
	DB	057H
	DB	019H
	DB	034H
	DB	0dfH
	DB	05bH
	DB	041H
	DB	058H
	DB	049H
	DB	0aaH
	DB	05fH
	DB	0aH
	DB	0efH
	DB	088H
	DB	01H
	DB	0dcH
	DB	095H
	DB	0d4H
	DB	0afH
	DB	07bH
	DB	0e3H
	DB	011H
	DB	08eH
	DB	09dH
	DB	016H
	DB	061H
	DB	08cH
	DB	084H
	DB	03cH
	DB	01fH
	DB	05aH
	DB	02H
	DB	04fH
	DB	039H
	DB	0feH
	DB	04H
	DB	07H
	DB	05cH
	DB	08bH
	DB	0eeH
	DB	066H
	DB	033H
	DB	0c4H
	DB	0c8H
	DB	059H
	DB	0b5H
	DB	05dH
	DB	0c2H
	DB	06cH
	DB	0f6H
	DB	04dH
	DB	0fbH
	DB	0aeH
	DB	04aH
	DB	04bH
	DB	0f3H
	DB	035H
	DB	02cH
	DB	0caH
	DB	021H
	DB	078H
	DB	03bH
	DB	03H
	DB	0fdH
	DB	024H
	DB	0bdH
	DB	025H
	DB	037H
	DB	029H
	DB	0acH
	DB	04eH
	DB	0f9H
	DB	092H
	DB	03aH
	DB	032H
	DB	04cH
	DB	0daH
	DB	06H
	DB	05eH
	DB	00H
	DB	094H
	DB	060H
	DB	0ecH
	DB	017H
	DB	098H
	DB	0d7H
	DB	03eH
	DB	0cbH
	DB	06aH
	DB	0a9H
	DB	0d9H
	DB	09cH
	DB	0bbH
	DB	08H
	DB	08fH
	DB	040H
	DB	0a0H
	DB	06fH
	DB	055H
	DB	067H
	DB	087H
	DB	054H
	DB	080H
	DB	0b2H
	DB	036H
	DB	047H
	DB	022H
	DB	044H
	DB	063H
	DB	05H
	DB	06bH
	DB	0f0H
	DB	0fH
	DB	0c7H
	DB	090H
	DB	0c5H
	DB	065H
	DB	0e2H
	DB	064H
	DB	0faH
	DB	0d5H
	DB	0dbH
	DB	012H
	DB	07aH
	DB	0eH
	DB	0d8H
	DB	07eH
	DB	099H
	DB	0d1H
	DB	0e8H
	DB	0d6H
	DB	086H
	DB	027H
	DB	0bfH
	DB	0c1H
	DB	06eH
	DB	0deH
	DB	09aH
	DB	09H
	DB	0dH
	DB	0abH
	DB	0e1H
	DB	091H
	DB	056H
	DB	0cdH
	DB	0b3H
	DB	076H
	DB	0cH
	DB	0c3H
	DB	0d3H
	DB	09fH
	DB	042H
	DB	0b6H
	DB	09bH
	DB	0e5H
	DB	023H
	DB	0a7H
	DB	0adH
	DB	018H
	DB	0c6H
	DB	0f4H
	DB	0b8H
	DB	0beH
	DB	015H
	DB	043H
	DB	070H
	DB	0e0H
	DB	0e7H
	DB	0bcH
	DB	0f1H
	DB	0baH
	DB	0a5H
	DB	0a6H
	DB	053H
	DB	075H
	DB	0e4H
	DB	0ebH
	DB	0e6H
	DB	085H
	DB	014H
	DB	048H
	DB	0ddH
	DB	038H
	DB	02aH
	DB	0ccH
	DB	07fH
	DB	0b1H
	DB	0c0H
	DB	071H
	DB	096H
	DB	0f8H
	DB	03fH
	DB	028H
	DB	0f2H
	DB	069H
	DB	074H
	DB	068H
	DB	0b7H
	DB	0a3H
	DB	050H
	DB	0d0H
	DB	079H
	DB	01dH
	DB	0fcH
	DB	0ceH
	DB	08aH
	DB	08dH
	DB	02eH
	DB	062H
	DB	030H
	DB	0eaH
	DB	0edH
	DB	02bH
	DB	026H
	DB	0b9H
	DB	081H
	DB	07cH
	DB	046H
	DB	089H
	DB	073H
	DB	0a2H
	DB	0f7H
	DB	072H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_c_l
PUBLIC	_vswprintf
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	?swprintf@@YAHQA_WQB_WZZ			; swprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	__vscprintf_l
PUBLIC	__vscprintf
PUBLIC	_sprintf
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	?AtlThrowLastWin32@ATL@@YGXXZ			; ATL::AtlThrowLastWin32
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
PUBLIC	?GetCategoryName@CTrace@ATL@@CAPA_WI@Z		; ATL::CTrace::GetCategoryName
PUBLIC	?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z		; ATL::CTrace::TraceV
PUBLIC	?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z		; ATL::CTrace::TraceV
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	??0CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::CPreserveLastError
PUBLIC	??1CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::~CPreserveLastError
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z		; ATL::CW2AEX<128>::CW2AEX<128>
PUBLIC	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ			; ATL::CW2AEX<128>::~CW2AEX<128>
PUBLIC	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ			; ATL::CW2AEX<128>::operator char *
PUBLIC	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z		; ATL::CW2AEX<128>::Init
PUBLIC	??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z		; ATL::AtlConvFreeMemory<char>
PUBLIC	??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z	; ATL::AtlConvAllocMemory<char>
PUBLIC	??0CWHEncrypt@@QAE@XZ				; CWHEncrypt::CWHEncrypt
PUBLIC	??1CWHEncrypt@@UAE@XZ				; CWHEncrypt::~CWHEncrypt
PUBLIC	?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z		; CWHEncrypt::MD5Encrypt
PUBLIC	?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z		; CWHEncrypt::XorEncrypt
PUBLIC	?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z		; CWHEncrypt::XorCrevasse
PUBLIC	?MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z		; CWHEncrypt::MapEncrypt
PUBLIC	?MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z		; CWHEncrypt::MapCrevasse
PUBLIC	??0CWHEncrypt@@QAE@ABV0@@Z			; CWHEncrypt::CWHEncrypt
PUBLIC	??4CWHEncrypt@@QAEAAV0@ABV0@@Z			; CWHEncrypt::operator=
PUBLIC	??_GCWHEncrypt@@UAEPAXI@Z			; CWHEncrypt::`scalar deleting destructor'
PUBLIC	??_ECWHEncrypt@@UAEPAXI@Z			; CWHEncrypt::`vector deleting destructor'
PUBLIC	??0CMD5Aide@@QAE@XZ				; CMD5Aide::CMD5Aide
PUBLIC	?MD5Final@CMD5Aide@@QAEXQAE@Z			; CMD5Aide::MD5Final
PUBLIC	?MD5Update@CMD5Aide@@QAEXPAEI@Z			; CMD5Aide::MD5Update
PUBLIC	?MD5Init@CMD5Aide@@AAEXXZ			; CMD5Aide::MD5Init
PUBLIC	?MD5Memset@CMD5Aide@@AAEXPAEHI@Z		; CMD5Aide::MD5Memset
PUBLIC	?MD5Memcpy@CMD5Aide@@AAEXPAE0I@Z		; CMD5Aide::MD5Memcpy
PUBLIC	?MD5Transform@CMD5Aide@@AAEXQAKQAE@Z		; CMD5Aide::MD5Transform
PUBLIC	?Encode@CMD5Aide@@AAEXPAEPAKI@Z			; CMD5Aide::Encode
PUBLIC	?Decode@CMD5Aide@@AAEXPAKPAEI@Z			; CMD5Aide::Decode
PUBLIC	??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z		; ATL::CA2CAEX<128>::CA2CAEX<128>
PUBLIC	??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ			; ATL::CA2CAEX<128>::~CA2CAEX<128>
PUBLIC	??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ		; ATL::CA2CAEX<128>::operator char const *
PUBLIC	??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z		; ATL::CA2WEX<128>::CA2WEX<128>
PUBLIC	??1?$CA2WEX@$0IA@@ATL@@QAE@XZ			; ATL::CA2WEX<128>::~CA2WEX<128>
PUBLIC	??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ		; ATL::CA2WEX<128>::operator wchar_t *
PUBLIC	?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z		; ATL::CA2WEX<128>::Init
PUBLIC	??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z	; ATL::AtlConvFreeMemory<wchar_t>
PUBLIC	??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z	; ATL::AtlConvAllocMemory<wchar_t>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException@		; `string'
PUBLIC	?m_nLevel@CTrace@ATL@@1IA			; ATL::CTrace::m_nLevel
PUBLIC	?m_nCategory@CTrace@ATL@@1IA			; ATL::CTrace::m_nCategory
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ ; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
PUBLIC	??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_7CWHEncrypt@@6B@				; CWHEncrypt::`vftable'
PUBLIC	??_C@_04JFFKLGJF@?$CF02X@			; `string'
PUBLIC	?__LINE__Var@?0??XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA ; `CWHEncrypt::XorEncrypt'::`1'::__LINE__Var
PUBLIC	??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_1BC@OFKGLCME@?$AA?$CF?$AA0?$AA4?$AAX?$AA?$CF?$AA0?$AA4?$AAX@ ; `string'
PUBLIC	?__LINE__Var@?0??XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA ; `CWHEncrypt::XorCrevasse'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA ; `CWHEncrypt::MapEncrypt'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA ; `CWHEncrypt::MapCrevasse'::`1'::__LINE__Var
PUBLIC	??_R4CWHEncrypt@@6B@				; CWHEncrypt::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWHEncrypt@@@8				; CWHEncrypt `RTTI Type Descriptor'
PUBLIC	??_R3CWHEncrypt@@8				; CWHEncrypt::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHEncrypt@@8				; CWHEncrypt::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWHEncrypt@@8			; CWHEncrypt::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp____stdio_common_vswprintf:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___recalloc:PROC
EXTRN	__imp__wcstol:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLevel@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLevel@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLevel
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHEncrypt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHEncrypt@@8 DD FLAT:??_R0?AVCWHEncrypt@@@8 ; CWHEncrypt::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHEncrypt@@8
rdata$r	SEGMENT
??_R2CWHEncrypt@@8 DD FLAT:??_R1A@?0A@EA@CWHEncrypt@@8	; CWHEncrypt::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHEncrypt@@8
rdata$r	SEGMENT
??_R3CWHEncrypt@@8 DD 00H				; CWHEncrypt::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHEncrypt@@@8
data$r	SEGMENT
??_R0?AVCWHEncrypt@@@8 DD FLAT:??_7type_info@@6B@	; CWHEncrypt `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHEncrypt@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWHEncrypt@@6B@
rdata$r	SEGMENT
??_R4CWHEncrypt@@6B@ DD 00H				; CWHEncrypt::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWHEncrypt@@@8
	DD	FLAT:??_R3CWHEncrypt@@8
rdata$r	ENDS
;	COMDAT ?__LINE__Var@?0??MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA DD 01e5H ; `CWHEncrypt::MapCrevasse'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA DD 01ccH ; `CWHEncrypt::MapEncrypt'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA DD 0191H ; `CWHEncrypt::XorCrevasse'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@OFKGLCME@?$AA?$CF?$AA0?$AA4?$AAX?$AA?$CF?$AA0?$AA4?$AAX@
CONST	SEGMENT
??_C@_1BC@OFKGLCME@?$AA?$CF?$AA0?$AA4?$AAX?$AA?$CF?$AA0?$AA4?$AAX@ DB '%', 00H
	DB	'0', 00H, '4', 00H, 'X', 00H, '%', 00H, '0', 00H, '4', 00H, 'X'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0baH, 0cbH, 0d0H, 0c4H, '\whencrypt.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA DD 016eH ; `CWHEncrypt::XorEncrypt'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04JFFKLGJF@?$CF02X@
CONST	SEGMENT
??_C@_04JFFKLGJF@?$CF02X@ DB '%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CWHEncrypt@@6B@
CONST	SEGMENT
??_7CWHEncrypt@@6B@ DD FLAT:??_R4CWHEncrypt@@6B@	; CWHEncrypt::`vftable'
	DD	FLAT:??_ECWHEncrypt@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ DB '_'
	DB	00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
CONST	SEGMENT
??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ DB 'AtlThrow: hr = 0x'
	DB	'%x', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\atlexcept.h', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA DD 041H	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H
	DB	's', 00H, '%', 00H, 'l', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'u', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '-', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?m_nCategory@CTrace@ATL@@1IA
_DATA	SEGMENT
?m_nCategory@CTrace@ATL@@1IA DD 0ffffffffH		; ATL::CTrace::m_nCategory
_DATA	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'v', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECWHEncrypt@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z$0
__ehfuncinfo$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z$0
__ehfuncinfo$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z$0
__ehfuncinfo$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0
__ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1
__ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z
_TEXT	SEGMENT
tv129 = -84						; size = 4
tv81 = -84						; size = 4
tv65 = -84						; size = 4
_ppReallocBuf$1 = -16					; size = 4
___atl_condVal$2 = -12					; size = 4
___atl_condVal$3 = -8					; size = 4
___atl_condVal$4 = -4					; size = 4
_ppBuff$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pszFixedBuffer$ = 16					; size = 4
_nFixedBufferLength$ = 20				; size = 4
??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z PROC	; ATL::AtlConvAllocMemory<wchar_t>, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@AtlConvAll:

; 113  : 	ATLENSURE_THROW(ppBuff != NULL, E_INVALIDARG);

  00009	83 7d 08 00	 cmp	 DWORD PTR _ppBuff$[ebp], 0
  0000d	74 09		 je	 SHORT $LN32@AtlConvAll
  0000f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00016	eb 07		 jmp	 SHORT $LN33@AtlConvAll
$LN32@AtlConvAll:
  00018	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN33@AtlConvAll:
  0001f	8b 45 ac	 mov	 eax, DWORD PTR tv65[ebp]
  00022	89 45 fc	 mov	 DWORD PTR ___atl_condVal$4[ebp], eax
$LN7@AtlConvAll:
  00025	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00029	75 24		 jne	 SHORT $LN5@AtlConvAll
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00035	6a 00		 push	 0
  00037	6a 71		 push	 113			; 00000071H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0003e	6a 02		 push	 2
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	83 f8 01	 cmp	 eax, 1
  0004c	75 01		 jne	 SHORT $LN5@AtlConvAll
  0004e	cc		 int	 3
$LN5@AtlConvAll:
  0004f	33 c0		 xor	 eax, eax
  00051	75 d2		 jne	 SHORT $LN7@AtlConvAll
  00053	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00057	75 0a		 jne	 SHORT $LN2@AtlConvAll
  00059	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0005e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@AtlConvAll:
  00063	33 c0		 xor	 eax, eax
  00065	75 a2		 jne	 SHORT $LN4@AtlConvAll
$LN10@AtlConvAll:

; 114  : 	ATLENSURE_THROW(nLength >= 0, E_INVALIDARG);

  00067	83 7d 0c 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0006b	7c 09		 jl	 SHORT $LN35@AtlConvAll
  0006d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN36@AtlConvAll
$LN35@AtlConvAll:
  00076	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN36@AtlConvAll:
  0007d	8b 45 ac	 mov	 eax, DWORD PTR tv81[ebp]
  00080	89 45 f8	 mov	 DWORD PTR ___atl_condVal$3[ebp], eax
$LN13@AtlConvAll:
  00083	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  00087	75 24		 jne	 SHORT $LN11@AtlConvAll
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00093	6a 00		 push	 0
  00095	6a 72		 push	 114			; 00000072H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0009c	6a 02		 push	 2
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000a4	83 c4 18	 add	 esp, 24			; 00000018H
  000a7	83 f8 01	 cmp	 eax, 1
  000aa	75 01		 jne	 SHORT $LN11@AtlConvAll
  000ac	cc		 int	 3
$LN11@AtlConvAll:
  000ad	33 c0		 xor	 eax, eax
  000af	75 d2		 jne	 SHORT $LN13@AtlConvAll
  000b1	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  000b5	75 0a		 jne	 SHORT $LN8@AtlConvAll
  000b7	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000bc	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@AtlConvAll:
  000c1	33 c0		 xor	 eax, eax
  000c3	75 a2		 jne	 SHORT $LN10@AtlConvAll
$LN16@AtlConvAll:

; 115  : 	ATLENSURE_THROW(pszFixedBuffer != NULL, E_INVALIDARG);

  000c5	83 7d 10 00	 cmp	 DWORD PTR _pszFixedBuffer$[ebp], 0
  000c9	74 09		 je	 SHORT $LN38@AtlConvAll
  000cb	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv129[ebp], 1
  000d2	eb 07		 jmp	 SHORT $LN39@AtlConvAll
$LN38@AtlConvAll:
  000d4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN39@AtlConvAll:
  000db	8b 45 ac	 mov	 eax, DWORD PTR tv129[ebp]
  000de	89 45 f4	 mov	 DWORD PTR ___atl_condVal$2[ebp], eax
$LN19@AtlConvAll:
  000e1	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  000e5	75 24		 jne	 SHORT $LN17@AtlConvAll
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  000f1	6a 00		 push	 0
  000f3	6a 73		 push	 115			; 00000073H
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000fa	6a 02		 push	 2
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00102	83 c4 18	 add	 esp, 24			; 00000018H
  00105	83 f8 01	 cmp	 eax, 1
  00108	75 01		 jne	 SHORT $LN17@AtlConvAll
  0010a	cc		 int	 3
$LN17@AtlConvAll:
  0010b	33 c0		 xor	 eax, eax
  0010d	75 d2		 jne	 SHORT $LN19@AtlConvAll
  0010f	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  00113	75 0a		 jne	 SHORT $LN14@AtlConvAll
  00115	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0011a	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN14@AtlConvAll:
  0011f	33 c0		 xor	 eax, eax
  00121	75 a2		 jne	 SHORT $LN16@AtlConvAll

; 116  : 
; 117  : 	//if buffer malloced, try to realloc.
; 118  : 	if (*ppBuff != pszFixedBuffer)

  00123	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00126	8b 08		 mov	 ecx, DWORD PTR [eax]
  00128	3b 4d 10	 cmp	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0012b	74 53		 je	 SHORT $LN23@AtlConvAll

; 119  : 	{
; 120  : 		if( nLength > nFixedBufferLength )

  0012d	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00130	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00133	7e 32		 jle	 SHORT $LN25@AtlConvAll

; 121  : 		{
; 122  : 			_CharType* ppReallocBuf = static_cast< _CharType* >( _recalloc(*ppBuff, nLength,sizeof( _CharType ) ) );

  00135	6a 02		 push	 2
  00137	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0013e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00140	52		 push	 edx
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___recalloc
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014a	89 45 f0	 mov	 DWORD PTR _ppReallocBuf$1[ebp], eax

; 123  : 			if (ppReallocBuf == NULL)

  0014d	83 7d f0 00	 cmp	 DWORD PTR _ppReallocBuf$1[ebp], 0
  00151	75 0a		 jne	 SHORT $LN27@AtlConvAll

; 124  : 			{
; 125  : 				AtlThrow( E_OUTOFMEMORY );

  00153	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00158	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN27@AtlConvAll:

; 126  : 			}
; 127  : 			*ppBuff = ppReallocBuf;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00160	8b 4d f0	 mov	 ecx, DWORD PTR _ppReallocBuf$1[ebp]
  00163	89 08		 mov	 DWORD PTR [eax], ecx

; 128  : 		} else

  00165	eb 17		 jmp	 SHORT $LN26@AtlConvAll
$LN25@AtlConvAll:

; 129  : 		{
; 130  : 			free(*ppBuff);

  00167	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	51		 push	 ecx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00173	83 c4 04	 add	 esp, 4

; 131  : 			*ppBuff=pszFixedBuffer;

  00176	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00179	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0017c	89 08		 mov	 DWORD PTR [eax], ecx
$LN26@AtlConvAll:

; 132  : 		}
; 133  : 
; 134  : 	} else //Buffer is not currently malloced.

  0017e	eb 26		 jmp	 SHORT $LN24@AtlConvAll
$LN23@AtlConvAll:

; 135  : 	{
; 136  : 		if( nLength > nFixedBufferLength )

  00180	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00183	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00186	7e 16		 jle	 SHORT $LN28@AtlConvAll

; 137  : 		{
; 138  : 			*ppBuff = static_cast< _CharType* >( calloc(nLength,sizeof( _CharType ) ) );

  00188	6a 02		 push	 2
  0018a	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0018d	50		 push	 eax
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00194	83 c4 08	 add	 esp, 8
  00197	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0019a	89 01		 mov	 DWORD PTR [ecx], eax

; 139  : 		} else

  0019c	eb 08		 jmp	 SHORT $LN24@AtlConvAll
$LN28@AtlConvAll:

; 140  : 		{
; 141  : 			*ppBuff=pszFixedBuffer;

  0019e	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a1	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  001a4	89 08		 mov	 DWORD PTR [eax], ecx
$LN24@AtlConvAll:

; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	if (*ppBuff == NULL)

  001a6	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a9	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ac	75 0a		 jne	 SHORT $LN31@AtlConvAll

; 146  : 	{
; 147  : 		AtlThrow( E_OUTOFMEMORY );

  001ae	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  001b3	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN31@AtlConvAll:

; 148  : 	}
; 149  : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z ENDP	; ATL::AtlConvAllocMemory<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z
_TEXT	SEGMENT
_pBuff$ = 8						; size = 4
_pszFixedBuffer$ = 12					; size = 4
_nFixedBufferLength$ = 16				; size = 4
??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z PROC		; ATL::AtlConvFreeMemory<wchar_t>, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 	(nFixedBufferLength);
; 158  : 	if( pBuff != pszFixedBuffer )

  00009	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR _pszFixedBuffer$[ebp]
  0000f	74 0f		 je	 SHORT $LN2@AtlConvFre

; 159  : 	{
; 160  : 		free( pBuff );

  00011	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001b	83 c4 04	 add	 esp, 4

; 161  : 	}
; 162  : #ifdef _DEBUG
; 163  : 	else

  0001e	eb 17		 jmp	 SHORT $LN1@AtlConvFre
$LN2@AtlConvFre:

; 164  : 	{
; 165  : 		memset(pszFixedBuffer,ATLCONV_DEADLAND_FILL,nFixedBufferLength*sizeof(_CharType));

  00020	8b 45 10	 mov	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00023	d1 e0		 shl	 eax, 1
  00025	50		 push	 eax
  00026	68 fe 00 00 00	 push	 254			; 000000feH
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@AtlConvFre:

; 166  : 	}
; 167  : #endif
; 168  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z ENDP		; ATL::AtlConvFreeMemory<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z
_TEXT	SEGMENT
tv142 = -84						; size = 4
tv84 = -84						; size = 4
_bFailed$ = -16						; size = 4
_nLengthW$ = -12					; size = 4
_nLengthA$ = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
_nCodePage$ = 12					; size = 4
?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z PROC		; ATL::CA2WEX<128>::Init, COMDAT
; _this$ = ecx

; 369  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 		if (psz == NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00010	75 0e		 jne	 SHORT $LN2@Init

; 371  : 		{
; 372  : 			m_psz = NULL;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 373  : 			return;

  0001b	e9 11 01 00 00	 jmp	 $LN6@Init
$LN2@Init:

; 374  : 		}
; 375  : 		int nLengthA = static_cast<int>(strlen( psz ))+1;

  00020	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _strlen
  00029	83 c4 04	 add	 esp, 4
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 45 f8	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 376  : 		int nLengthW = nLengthA;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00035	89 45 f4	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 377  : 
; 378  : 		AtlConvAllocMemory(&m_psz,nLengthW,m_szBuffer,t_nBufferLength);

  00038	68 80 00 00 00	 push	 128			; 00000080H
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 c0 04	 add	 eax, 4
  00043	50		 push	 eax
  00044	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthW$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z ; ATL::AtlConvAllocMemory<wchar_t>
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 379  : 
; 380  : 		BOOL bFailed=(0 == ::MultiByteToWideChar( nCodePage, 0, psz, nLengthA, m_psz, nLengthW ) );

  00054	8b 45 f4	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  00057	50		 push	 eax
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	52		 push	 edx
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00065	51		 push	 ecx
  00066	6a 00		 push	 0
  00068	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  0006b	52		 push	 edx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00072	85 c0		 test	 eax, eax
  00074	75 09		 jne	 SHORT $LN7@Init
  00076	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  0007d	eb 07		 jmp	 SHORT $LN8@Init
$LN7@Init:
  0007f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN8@Init:
  00086	8b 45 ac	 mov	 eax, DWORD PTR tv84[ebp]
  00089	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax

; 381  : 		if (bFailed)

  0008c	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00090	74 7a		 je	 SHORT $LN3@Init

; 382  : 		{
; 383  : 			if (GetLastError()==ERROR_INSUFFICIENT_BUFFER)

  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00098	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0009b	75 6f		 jne	 SHORT $LN3@Init

; 384  : 			{
; 385  : 				nLengthW = ::MultiByteToWideChar( nCodePage, 0, psz, nLengthA, NULL, 0);

  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000a8	51		 push	 ecx
  000a9	6a 00		 push	 0
  000ab	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  000ae	52		 push	 edx
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  000b5	89 45 f4	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 386  : ATLPREFAST_SUPPRESS(6102)
; 387  : 				AtlConvAllocMemory(&m_psz,nLengthW,m_szBuffer,t_nBufferLength);

  000b8	68 80 00 00 00	 push	 128			; 00000080H
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	83 c0 04	 add	 eax, 4
  000c3	50		 push	 eax
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthW$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	52		 push	 edx
  000cc	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@_W@ATL@@YAXPAPA_WHPA_WH@Z ; ATL::AtlConvAllocMemory<wchar_t>
  000d1	83 c4 10	 add	 esp, 16			; 00000010H

; 388  : ATLPREFAST_UNSUPPRESS()
; 389  : 				bFailed=(0 == ::MultiByteToWideChar( nCodePage, 0, psz, nLengthA, m_psz, nLengthW ) );

  000d4	8b 45 f4	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dd	52		 push	 edx
  000de	8b 45 f8	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000e5	51		 push	 ecx
  000e6	6a 00		 push	 0
  000e8	8b 55 0c	 mov	 edx, DWORD PTR _nCodePage$[ebp]
  000eb	52		 push	 edx
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  000f2	85 c0		 test	 eax, eax
  000f4	75 09		 jne	 SHORT $LN9@Init
  000f6	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv142[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN10@Init
$LN9@Init:
  000ff	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv142[ebp], 0
$LN10@Init:
  00106	8b 45 ac	 mov	 eax, DWORD PTR tv142[ebp]
  00109	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax
$LN3@Init:

; 390  : 			}
; 391  : 		}
; 392  : 		if (bFailed)

  0010c	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00110	74 1f		 je	 SHORT $LN6@Init

; 393  : 		{
; 394  : 			AtlConvFreeMemory(m_psz, m_szBuffer, t_nBufferLength);

  00112	68 80 00 00 00	 push	 128			; 00000080H
  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	83 c0 04	 add	 eax, 4
  0011d	50		 push	 eax
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	8b 11		 mov	 edx, DWORD PTR [ecx]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z ; ATL::AtlConvFreeMemory<wchar_t>
  00129	83 c4 0c	 add	 esp, 12			; 0000000cH

; 395  : 			AtlThrowLastWin32();

  0012c	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$LN6@Init:

; 396  : 		}
; 397  : 	}

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z ENDP		; ATL::CA2WEX<128>::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ PROC			; ATL::CA2WEX<128>::operator wchar_t *, COMDAT
; _this$ = ecx

; 361  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 362  : 		return( m_psz );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 363  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ENDP			; ATL::CA2WEX<128>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CA2WEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CA2WEX<128>::~CA2WEX<128>, COMDAT
; _this$ = ecx

; 356  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 		AtlConvFreeMemory(m_psz,m_szBuffer,t_nBufferLength);

  0000c	68 80 00 00 00	 push	 128			; 00000080H
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@_W@ATL@@YAXPA_W0H@Z ; ATL::AtlConvFreeMemory<wchar_t>
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 358  : 	}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CA2WEX<128>::~CA2WEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z PROC			; ATL::CA2WEX<128>::CA2WEX<128>, COMDAT
; _this$ = ecx

; 345  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  : 		m_psz( m_szBuffer )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 346  : 		Init( psz, _AtlGetConversionACP() );

  00017	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  0001c	50		 push	 eax
  0001d	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Init@?$CA2WEX@$0IA@@ATL@@AAEXPBDI@Z ; ATL::CA2WEX<128>::Init

; 347  : 	}

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z ENDP			; ATL::CA2WEX<128>::CA2WEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ PROC			; ATL::CA2CAEX<128>::operator char const *, COMDAT
; _this$ = ecx

; 293  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 294  : 		return( m_psz );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 295  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ ENDP			; ATL::CA2CAEX<128>::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CA2CAEX<128>::~CA2CAEX<128>, COMDAT
; _this$ = ecx

; 289  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 290  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CA2CAEX<128>::~CA2CAEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z PROC			; ATL::CA2CAEX<128>::CA2CAEX<128>, COMDAT
; _this$ = ecx

; 279  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 278  : 		m_psz( psz )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 280  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z ENDP			; ATL::CA2CAEX<128>::CA2CAEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?Decode@CMD5Aide@@AAEXPAKPAEI@Z
_TEXT	SEGMENT
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_pcbOutput$ = 8						; size = 4
_pcbInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
?Decode@CMD5Aide@@AAEXPAKPAEI@Z PROC			; CMD5Aide::Decode, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 312  : 	UINT i,j;
; 313  : 	for (i=0,j=0;j<nLen;i++,j+=4)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0001a	eb 12		 jmp	 SHORT $LN4@Decode
$LN2@Decode:
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00025	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00028	83 c1 04	 add	 ecx, 4
  0002b	89 4d f4	 mov	 DWORD PTR _j$[ebp], ecx
$LN4@Decode:
  0002e	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00031	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00034	73 41		 jae	 SHORT $LN1@Decode

; 314  : 	{
; 315  : 		pcbOutput[i]=((ULONG)pcbInput[j])|(((ULONG)pcbInput[j+1])<<8)|

  00036	8b 45 0c	 mov	 eax, DWORD PTR _pcbInput$[ebp]
  00039	03 45 f4	 add	 eax, DWORD PTR _j$[ebp]
  0003c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0003f	8b 55 0c	 mov	 edx, DWORD PTR _pcbInput$[ebp]
  00042	03 55 f4	 add	 edx, DWORD PTR _j$[ebp]
  00045	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00049	c1 e0 08	 shl	 eax, 8
  0004c	0b c8		 or	 ecx, eax
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _pcbInput$[ebp]
  00051	03 55 f4	 add	 edx, DWORD PTR _j$[ebp]
  00054	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00058	c1 e0 10	 shl	 eax, 16			; 00000010H
  0005b	0b c8		 or	 ecx, eax
  0005d	8b 55 0c	 mov	 edx, DWORD PTR _pcbInput$[ebp]
  00060	03 55 f4	 add	 edx, DWORD PTR _j$[ebp]
  00063	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00067	c1 e0 18	 shl	 eax, 24			; 00000018H
  0006a	0b c8		 or	 ecx, eax
  0006c	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0006f	8b 45 08	 mov	 eax, DWORD PTR _pcbOutput$[ebp]
  00072	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 316  : 			(((ULONG)pcbInput[j+2])<<16)|(((ULONG)pcbInput[j+3])<< 24);
; 317  : 	}

  00075	eb a5		 jmp	 SHORT $LN2@Decode
$LN1@Decode:

; 318  : 	return;
; 319  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
?Decode@CMD5Aide@@AAEXPAKPAEI@Z ENDP			; CMD5Aide::Decode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?Encode@CMD5Aide@@AAEXPAEPAKI@Z
_TEXT	SEGMENT
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_pcbOutput$ = 8						; size = 4
_pcbInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
?Encode@CMD5Aide@@AAEXPAEPAKI@Z PROC			; CMD5Aide::Encode, COMDAT
; _this$ = ecx

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 298  : 	UINT i, j;
; 299  : 	for (i=0,j=0;j<nLen;i++,j+=4)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0001a	eb 12		 jmp	 SHORT $LN4@Encode
$LN2@Encode:
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00025	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00028	83 c1 04	 add	 ecx, 4
  0002b	89 4d f4	 mov	 DWORD PTR _j$[ebp], ecx
$LN4@Encode:
  0002e	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00031	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00034	73 6d		 jae	 SHORT $LN1@Encode

; 300  : 	{
; 301  : 		pcbOutput[j]=(BYTE)(pcbInput[i]&0xff);

  00036	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbInput$[ebp]
  0003c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0003f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00045	8b 45 08	 mov	 eax, DWORD PTR _pcbOutput$[ebp]
  00048	03 45 f4	 add	 eax, DWORD PTR _j$[ebp]
  0004b	88 10		 mov	 BYTE PTR [eax], dl

; 302  : 		pcbOutput[j+1]=(BYTE)((pcbInput[i]>>8)&0xff);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbInput$[ebp]
  00053	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00056	c1 ea 08	 shr	 edx, 8
  00059	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0005f	8b 45 08	 mov	 eax, DWORD PTR _pcbOutput$[ebp]
  00062	03 45 f4	 add	 eax, DWORD PTR _j$[ebp]
  00065	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 303  : 		pcbOutput[j+2]=(BYTE)((pcbInput[i]>>16)&0xff);

  00068	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbInput$[ebp]
  0006e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00071	c1 ea 10	 shr	 edx, 16			; 00000010H
  00074	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0007a	8b 45 08	 mov	 eax, DWORD PTR _pcbOutput$[ebp]
  0007d	03 45 f4	 add	 eax, DWORD PTR _j$[ebp]
  00080	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 304  : 		pcbOutput[j+3]=(BYTE)((pcbInput[i]>>24)&0xff);

  00083	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00086	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbInput$[ebp]
  00089	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0008c	c1 ea 18	 shr	 edx, 24			; 00000018H
  0008f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00095	8b 45 08	 mov	 eax, DWORD PTR _pcbOutput$[ebp]
  00098	03 45 f4	 add	 eax, DWORD PTR _j$[ebp]
  0009b	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 305  : 	}

  0009e	e9 79 ff ff ff	 jmp	 $LN2@Encode
$LN1@Encode:

; 306  : 	return;
; 307  : }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH
?Encode@CMD5Aide@@AAEXPAEPAKI@Z ENDP			; CMD5Aide::Encode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MD5Transform@CMD5Aide@@AAEXQAKQAE@Z
_TEXT	SEGMENT
_x$ = -88						; size = 64
_d$ = -24						; size = 4
_c$ = -20						; size = 4
_b$ = -16						; size = 4
_a$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lState$ = 8						; size = 4
_cbBlock$ = 12						; size = 4
?MD5Transform@CMD5Aide@@AAEXQAKQAE@Z PROC		; CMD5Aide::MD5Transform, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 214  : 	ULONG a=lState[0],b=lState[1],c=lState[2],d=lState[3],x[16];

  00019	b8 04 00 00 00	 mov	 eax, 4
  0001e	6b c8 00	 imul	 ecx, eax, 0
  00021	8b 55 08	 mov	 edx, DWORD PTR _lState$[ebp]
  00024	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00027	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  0002a	b8 04 00 00 00	 mov	 eax, 4
  0002f	c1 e0 00	 shl	 eax, 0
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  00035	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00038	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  0003b	b8 04 00 00 00	 mov	 eax, 4
  00040	d1 e0		 shl	 eax, 1
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  00045	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00048	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 03	 imul	 ecx, eax, 3
  00053	8b 55 08	 mov	 edx, DWORD PTR _lState$[ebp]
  00056	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00059	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 215  : 	Decode(x,cbBlock,64);

  0005c	6a 40		 push	 64			; 00000040H
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _cbBlock$[ebp]
  00061	50		 push	 eax
  00062	8d 4d a8	 lea	 ecx, DWORD PTR _x$[ebp]
  00065	51		 push	 ecx
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?Decode@CMD5Aide@@AAEXPAKPAEI@Z ; CMD5Aide::Decode

; 216  : 
; 217  : 	FF(a,b,c,d,x[ 0],S11,0xd76aa478); /* 1 */

  0006e	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00071	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00077	f7 d1		 not	 ecx
  00079	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  0007c	0b c1		 or	 eax, ecx
  0007e	ba 04 00 00 00	 mov	 edx, 4
  00083	6b ca 00	 imul	 ecx, edx, 0
  00086	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0008a	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  0008d	8d 84 02 78 a4
	6a d7		 lea	 eax, DWORD PTR [edx+eax-680876936]
  00094	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00097	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0009a	c1 e0 07	 shl	 eax, 7
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  000a0	c1 e9 19	 shr	 ecx, 25			; 00000019H
  000a3	0b c1		 or	 eax, ecx
  000a5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  000a8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  000ab	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  000ae	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 218  : 	FF(d,a,b,c,x[ 1],S12,0xe8c7b756); /* 2 */

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  000b4	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  000b7	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  000ba	f7 d1		 not	 ecx
  000bc	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  000bf	0b c1		 or	 eax, ecx
  000c1	ba 04 00 00 00	 mov	 edx, 4
  000c6	c1 e2 00	 shl	 edx, 0
  000c9	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  000d0	8d 94 01 56 b7
	c7 e8		 lea	 edx, DWORD PTR [ecx+eax-389564586]
  000d7	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  000da	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  000dd	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  000e0	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  000e3	c1 e9 14	 shr	 ecx, 20			; 00000014H
  000e6	0b c1		 or	 eax, ecx
  000e8	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  000eb	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  000ee	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  000f1	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 219  : 	FF(c,d,a,b,x[ 2],S13,0x242070db); /* 3 */

  000f4	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  000f7	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  000fa	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  000fd	f7 d1		 not	 ecx
  000ff	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  00102	0b c1		 or	 eax, ecx
  00104	ba 04 00 00 00	 mov	 edx, 4
  00109	d1 e2		 shl	 edx, 1
  0010b	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  0010f	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00112	8d 94 01 db 70
	20 24		 lea	 edx, DWORD PTR [ecx+eax+606105819]
  00119	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  0011c	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0011f	c1 e0 11	 shl	 eax, 17			; 00000011H
  00122	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00125	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  00128	0b c1		 or	 eax, ecx
  0012a	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  0012d	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00130	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00133	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 220  : 	FF(b,c,d,a,x[ 3],S14,0xc1bdceee); /* 4 */

  00136	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00139	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  0013c	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0013f	f7 d1		 not	 ecx
  00141	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00144	0b c1		 or	 eax, ecx
  00146	ba 04 00 00 00	 mov	 edx, 4
  0014b	6b ca 03	 imul	 ecx, edx, 3
  0014e	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00152	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  00155	8d 84 02 ee ce
	bd c1		 lea	 eax, DWORD PTR [edx+eax-1044525330]
  0015c	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  0015f	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00162	c1 e0 16	 shl	 eax, 22			; 00000016H
  00165	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00168	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0016b	0b c1		 or	 eax, ecx
  0016d	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00170	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00173	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00176	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 221  : 	FF(a,b,c,d,x[ 4],S11,0xf57c0faf); /* 5 */

  00179	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0017c	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  0017f	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00182	f7 d1		 not	 ecx
  00184	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  00187	0b c1		 or	 eax, ecx
  00189	ba 04 00 00 00	 mov	 edx, 4
  0018e	c1 e2 02	 shl	 edx, 2
  00191	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00195	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00198	8d 94 01 af 0f
	7c f5		 lea	 edx, DWORD PTR [ecx+eax-176418897]
  0019f	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  001a2	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  001a5	c1 e0 07	 shl	 eax, 7
  001a8	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  001ab	c1 e9 19	 shr	 ecx, 25			; 00000019H
  001ae	0b c1		 or	 eax, ecx
  001b0	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  001b3	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  001b6	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  001b9	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 222  : 	FF(d,a,b,c,x[ 5],S12,0x4787c62a); /* 6 */

  001bc	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  001bf	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  001c2	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  001c5	f7 d1		 not	 ecx
  001c7	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  001ca	0b c1		 or	 eax, ecx
  001cc	ba 04 00 00 00	 mov	 edx, 4
  001d1	6b ca 05	 imul	 ecx, edx, 5
  001d4	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  001d8	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  001db	8d 84 02 2a c6
	87 47		 lea	 eax, DWORD PTR [edx+eax+1200080426]
  001e2	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  001e5	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  001e8	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  001eb	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  001ee	c1 e9 14	 shr	 ecx, 20			; 00000014H
  001f1	0b c1		 or	 eax, ecx
  001f3	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  001f6	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  001f9	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  001fc	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 223  : 	FF(c,d,a,b,x[ 6],S13,0xa8304613); /* 7 */

  001ff	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00202	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00205	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00208	f7 d1		 not	 ecx
  0020a	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  0020d	0b c1		 or	 eax, ecx
  0020f	ba 04 00 00 00	 mov	 edx, 4
  00214	6b ca 06	 imul	 ecx, edx, 6
  00217	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0021b	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  0021e	8d 84 02 13 46
	30 a8		 lea	 eax, DWORD PTR [edx+eax-1473231341]
  00225	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00228	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0022b	c1 e0 11	 shl	 eax, 17			; 00000011H
  0022e	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00231	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  00234	0b c1		 or	 eax, ecx
  00236	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00239	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0023c	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  0023f	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 224  : 	FF(b,c,d,a,x[ 7],S14,0xfd469501); /* 8 */

  00242	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00245	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  00248	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0024b	f7 d1		 not	 ecx
  0024d	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00250	0b c1		 or	 eax, ecx
  00252	ba 04 00 00 00	 mov	 edx, 4
  00257	6b ca 07	 imul	 ecx, edx, 7
  0025a	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0025e	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  00261	8d 84 02 01 95
	46 fd		 lea	 eax, DWORD PTR [edx+eax-45705983]
  00268	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  0026b	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0026e	c1 e0 16	 shl	 eax, 22			; 00000016H
  00271	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00274	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00277	0b c1		 or	 eax, ecx
  00279	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  0027c	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0027f	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00282	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 225  : 	FF(a,b,c,d,x[ 8],S11,0x698098d8); /* 9 */

  00285	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00288	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  0028b	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  0028e	f7 d1		 not	 ecx
  00290	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  00293	0b c1		 or	 eax, ecx
  00295	ba 04 00 00 00	 mov	 edx, 4
  0029a	c1 e2 03	 shl	 edx, 3
  0029d	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  002a1	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  002a4	8d 94 01 d8 98
	80 69		 lea	 edx, DWORD PTR [ecx+eax+1770035416]
  002ab	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  002ae	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  002b1	c1 e0 07	 shl	 eax, 7
  002b4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  002b7	c1 e9 19	 shr	 ecx, 25			; 00000019H
  002ba	0b c1		 or	 eax, ecx
  002bc	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  002bf	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  002c2	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  002c5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 226  : 	FF(d,a,b,c,x[ 9],S12,0x8b44f7af); /* 10 */

  002c8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  002cb	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  002ce	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  002d1	f7 d1		 not	 ecx
  002d3	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  002d6	0b c1		 or	 eax, ecx
  002d8	ba 04 00 00 00	 mov	 edx, 4
  002dd	6b ca 09	 imul	 ecx, edx, 9
  002e0	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  002e4	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  002e7	8d 84 02 af f7
	44 8b		 lea	 eax, DWORD PTR [edx+eax-1958414417]
  002ee	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  002f1	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  002f4	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  002f7	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  002fa	c1 e9 14	 shr	 ecx, 20			; 00000014H
  002fd	0b c1		 or	 eax, ecx
  002ff	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00302	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00305	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00308	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 227  : 	FF(c,d,a,b,x[10],S13,0xffff5bb1); /* 11 */

  0030b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0030e	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00311	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00314	f7 d1		 not	 ecx
  00316	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  00319	0b c1		 or	 eax, ecx
  0031b	ba 04 00 00 00	 mov	 edx, 4
  00320	6b ca 0a	 imul	 ecx, edx, 10
  00323	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00327	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  0032a	8d 84 02 b1 5b
	ff ff		 lea	 eax, DWORD PTR [edx+eax-42063]
  00331	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00334	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00337	c1 e0 11	 shl	 eax, 17			; 00000011H
  0033a	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0033d	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  00340	0b c1		 or	 eax, ecx
  00342	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00345	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00348	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  0034b	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 228  : 	FF(b,c,d,a,x[11],S14,0x895cd7be); /* 12 */

  0034e	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00351	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  00354	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00357	f7 d1		 not	 ecx
  00359	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  0035c	0b c1		 or	 eax, ecx
  0035e	ba 04 00 00 00	 mov	 edx, 4
  00363	6b ca 0b	 imul	 ecx, edx, 11
  00366	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0036a	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  0036d	8d 84 02 be d7
	5c 89		 lea	 eax, DWORD PTR [edx+eax-1990404162]
  00374	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00377	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0037a	c1 e0 16	 shl	 eax, 22			; 00000016H
  0037d	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00380	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00383	0b c1		 or	 eax, ecx
  00385	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00388	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0038b	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  0038e	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 229  : 	FF(a,b,c,d,x[12],S11,0x6b901122); /* 13 */

  00391	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00394	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  00397	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  0039a	f7 d1		 not	 ecx
  0039c	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  0039f	0b c1		 or	 eax, ecx
  003a1	ba 04 00 00 00	 mov	 edx, 4
  003a6	6b ca 0c	 imul	 ecx, edx, 12
  003a9	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  003ad	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  003b0	8d 84 02 22 11
	90 6b		 lea	 eax, DWORD PTR [edx+eax+1804603682]
  003b7	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  003ba	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  003bd	c1 e0 07	 shl	 eax, 7
  003c0	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  003c3	c1 e9 19	 shr	 ecx, 25			; 00000019H
  003c6	0b c1		 or	 eax, ecx
  003c8	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  003cb	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  003ce	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  003d1	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 230  : 	FF(d,a,b,c,x[13],S12,0xfd987193); /* 14 */

  003d4	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  003d7	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  003da	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  003dd	f7 d1		 not	 ecx
  003df	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  003e2	0b c1		 or	 eax, ecx
  003e4	ba 04 00 00 00	 mov	 edx, 4
  003e9	6b ca 0d	 imul	 ecx, edx, 13
  003ec	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  003f0	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  003f3	8d 84 02 93 71
	98 fd		 lea	 eax, DWORD PTR [edx+eax-40341101]
  003fa	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  003fd	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00400	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  00403	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00406	c1 e9 14	 shr	 ecx, 20			; 00000014H
  00409	0b c1		 or	 eax, ecx
  0040b	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  0040e	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00411	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00414	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 231  : 	FF(c,d,a,b,x[14],S13,0xa679438e); /* 15 */

  00417	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0041a	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  0041d	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00420	f7 d1		 not	 ecx
  00422	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  00425	0b c1		 or	 eax, ecx
  00427	ba 04 00 00 00	 mov	 edx, 4
  0042c	6b ca 0e	 imul	 ecx, edx, 14
  0042f	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00433	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  00436	8d 84 02 8e 43
	79 a6		 lea	 eax, DWORD PTR [edx+eax-1502002290]
  0043d	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00440	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00443	c1 e0 11	 shl	 eax, 17			; 00000011H
  00446	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00449	c1 e9 0f	 shr	 ecx, 15			; 0000000fH
  0044c	0b c1		 or	 eax, ecx
  0044e	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00451	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00454	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00457	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 232  : 	FF(b,c,d,a,x[15],S14,0x49b40821); /* 16 */

  0045a	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0045d	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  00460	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00463	f7 d1		 not	 ecx
  00465	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00468	0b c1		 or	 eax, ecx
  0046a	ba 04 00 00 00	 mov	 edx, 4
  0046f	6b ca 0f	 imul	 ecx, edx, 15
  00472	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00476	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  00479	8d 84 02 21 08
	b4 49		 lea	 eax, DWORD PTR [edx+eax+1236535329]
  00480	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00483	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00486	c1 e0 16	 shl	 eax, 22			; 00000016H
  00489	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  0048c	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0048f	0b c1		 or	 eax, ecx
  00491	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00494	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00497	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  0049a	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 233  : 
; 234  : 	GG(a,b,c,d,x[ 1],S21,0xf61e2562); /* 17 */

  0049d	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  004a0	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  004a3	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  004a6	f7 d1		 not	 ecx
  004a8	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  004ab	0b c1		 or	 eax, ecx
  004ad	ba 04 00 00 00	 mov	 edx, 4
  004b2	c1 e2 00	 shl	 edx, 0
  004b5	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  004b9	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  004bc	8d 94 01 62 25
	1e f6		 lea	 edx, DWORD PTR [ecx+eax-165796510]
  004c3	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  004c6	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  004c9	c1 e0 05	 shl	 eax, 5
  004cc	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  004cf	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  004d2	0b c1		 or	 eax, ecx
  004d4	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  004d7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  004da	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  004dd	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 235  : 	GG(d,a,b,c,x[ 6],S22,0xc040b340); /* 18 */

  004e0	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  004e3	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  004e6	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  004e9	f7 d1		 not	 ecx
  004eb	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  004ee	0b c1		 or	 eax, ecx
  004f0	ba 04 00 00 00	 mov	 edx, 4
  004f5	6b ca 06	 imul	 ecx, edx, 6
  004f8	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  004fc	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  004ff	8d 84 02 40 b3
	40 c0		 lea	 eax, DWORD PTR [edx+eax-1069501632]
  00506	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00509	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0050c	c1 e0 09	 shl	 eax, 9
  0050f	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00512	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00515	0b c1		 or	 eax, ecx
  00517	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  0051a	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0051d	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00520	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 236  : 	GG(c,d,a,b,x[11],S23,0x265e5a51); /* 19 */

  00523	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00526	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  00529	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  0052c	f7 d1		 not	 ecx
  0052e	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00531	0b c1		 or	 eax, ecx
  00533	ba 04 00 00 00	 mov	 edx, 4
  00538	6b ca 0b	 imul	 ecx, edx, 11
  0053b	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0053f	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  00542	8d 84 02 51 5a
	5e 26		 lea	 eax, DWORD PTR [edx+eax+643717713]
  00549	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  0054c	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0054f	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00552	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00555	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00558	0b c1		 or	 eax, ecx
  0055a	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  0055d	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00560	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00563	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 237  : 	GG(b,c,d,a,x[ 0],S24,0xe9b6c7aa); /* 20 */

  00566	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00569	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  0056c	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0056f	f7 d1		 not	 ecx
  00571	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  00574	0b c1		 or	 eax, ecx
  00576	ba 04 00 00 00	 mov	 edx, 4
  0057b	6b ca 00	 imul	 ecx, edx, 0
  0057e	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00582	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  00585	8d 84 02 aa c7
	b6 e9		 lea	 eax, DWORD PTR [edx+eax-373897302]
  0058c	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  0058f	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00592	c1 e0 14	 shl	 eax, 20			; 00000014H
  00595	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00598	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  0059b	0b c1		 or	 eax, ecx
  0059d	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  005a0	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  005a3	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  005a6	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 238  : 	GG(a,b,c,d,x[ 5],S21,0xd62f105d); /* 21 */

  005a9	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  005ac	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  005af	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  005b2	f7 d1		 not	 ecx
  005b4	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  005b7	0b c1		 or	 eax, ecx
  005b9	ba 04 00 00 00	 mov	 edx, 4
  005be	6b ca 05	 imul	 ecx, edx, 5
  005c1	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  005c5	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  005c8	8d 84 02 5d 10
	2f d6		 lea	 eax, DWORD PTR [edx+eax-701558691]
  005cf	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  005d2	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  005d5	c1 e0 05	 shl	 eax, 5
  005d8	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  005db	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  005de	0b c1		 or	 eax, ecx
  005e0	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  005e3	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  005e6	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  005e9	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 239  : 	GG(d,a,b,c,x[10],S22,0x2441453);  /* 22 */

  005ec	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  005ef	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  005f2	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  005f5	f7 d1		 not	 ecx
  005f7	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  005fa	0b c1		 or	 eax, ecx
  005fc	ba 04 00 00 00	 mov	 edx, 4
  00601	6b ca 0a	 imul	 ecx, edx, 10
  00604	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00608	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  0060b	8d 84 02 53 14
	44 02		 lea	 eax, DWORD PTR [edx+eax+38016083]
  00612	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00615	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00618	c1 e0 09	 shl	 eax, 9
  0061b	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  0061e	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00621	0b c1		 or	 eax, ecx
  00623	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00626	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00629	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0062c	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 240  : 	GG(c,d,a,b,x[15],S23,0xd8a1e681); /* 23 */

  0062f	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00632	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  00635	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00638	f7 d1		 not	 ecx
  0063a	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  0063d	0b c1		 or	 eax, ecx
  0063f	ba 04 00 00 00	 mov	 edx, 4
  00644	6b ca 0f	 imul	 ecx, edx, 15
  00647	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0064b	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  0064e	8d 84 02 81 e6
	a1 d8		 lea	 eax, DWORD PTR [edx+eax-660478335]
  00655	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00658	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0065b	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0065e	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00661	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00664	0b c1		 or	 eax, ecx
  00666	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00669	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0066c	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  0066f	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 241  : 	GG(b,c,d,a,x[ 4],S24,0xe7d3fbc8); /* 24 */

  00672	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00675	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00678	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  0067b	f7 d1		 not	 ecx
  0067d	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  00680	0b c1		 or	 eax, ecx
  00682	ba 04 00 00 00	 mov	 edx, 4
  00687	c1 e2 02	 shl	 edx, 2
  0068a	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  0068e	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00691	8d 94 01 c8 fb
	d3 e7		 lea	 edx, DWORD PTR [ecx+eax-405537848]
  00698	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  0069b	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  0069e	c1 e0 14	 shl	 eax, 20			; 00000014H
  006a1	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  006a4	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  006a7	0b c1		 or	 eax, ecx
  006a9	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  006ac	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  006af	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  006b2	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 242  : 	GG(a,b,c,d,x[ 9],S21,0x21e1cde6); /* 25 */

  006b5	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  006b8	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  006bb	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  006be	f7 d1		 not	 ecx
  006c0	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  006c3	0b c1		 or	 eax, ecx
  006c5	ba 04 00 00 00	 mov	 edx, 4
  006ca	6b ca 09	 imul	 ecx, edx, 9
  006cd	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  006d1	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  006d4	8d 84 02 e6 cd
	e1 21		 lea	 eax, DWORD PTR [edx+eax+568446438]
  006db	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  006de	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  006e1	c1 e0 05	 shl	 eax, 5
  006e4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  006e7	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  006ea	0b c1		 or	 eax, ecx
  006ec	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  006ef	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  006f2	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  006f5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 243  : 	GG(d,a,b,c,x[14],S22,0xc33707d6); /* 26 */

  006f8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  006fb	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  006fe	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00701	f7 d1		 not	 ecx
  00703	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  00706	0b c1		 or	 eax, ecx
  00708	ba 04 00 00 00	 mov	 edx, 4
  0070d	6b ca 0e	 imul	 ecx, edx, 14
  00710	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00714	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  00717	8d 84 02 d6 07
	37 c3		 lea	 eax, DWORD PTR [edx+eax-1019803690]
  0071e	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00721	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00724	c1 e0 09	 shl	 eax, 9
  00727	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  0072a	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0072d	0b c1		 or	 eax, ecx
  0072f	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00732	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00735	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00738	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 244  : 	GG(c,d,a,b,x[ 3],S23,0xf4d50d87); /* 27 */

  0073b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0073e	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  00741	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00744	f7 d1		 not	 ecx
  00746	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00749	0b c1		 or	 eax, ecx
  0074b	ba 04 00 00 00	 mov	 edx, 4
  00750	6b ca 03	 imul	 ecx, edx, 3
  00753	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00757	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  0075a	8d 84 02 87 0d
	d5 f4		 lea	 eax, DWORD PTR [edx+eax-187363961]
  00761	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00764	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00767	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  0076a	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0076d	c1 e9 12	 shr	 ecx, 18			; 00000012H
  00770	0b c1		 or	 eax, ecx
  00772	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00775	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00778	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  0077b	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 245  : 	GG(b,c,d,a,x[ 8],S24,0x455a14ed); /* 28 */

  0077e	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00781	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  00784	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00787	f7 d1		 not	 ecx
  00789	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  0078c	0b c1		 or	 eax, ecx
  0078e	ba 04 00 00 00	 mov	 edx, 4
  00793	c1 e2 03	 shl	 edx, 3
  00796	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  0079a	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  0079d	8d 94 01 ed 14
	5a 45		 lea	 edx, DWORD PTR [ecx+eax+1163531501]
  007a4	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  007a7	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  007aa	c1 e0 14	 shl	 eax, 20			; 00000014H
  007ad	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  007b0	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  007b3	0b c1		 or	 eax, ecx
  007b5	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  007b8	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  007bb	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  007be	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 246  : 	GG(a,b,c,d,x[13],S21,0xa9e3e905); /* 29 */

  007c1	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  007c4	23 45 e8	 and	 eax, DWORD PTR _d$[ebp]
  007c7	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  007ca	f7 d1		 not	 ecx
  007cc	23 4d ec	 and	 ecx, DWORD PTR _c$[ebp]
  007cf	0b c1		 or	 eax, ecx
  007d1	ba 04 00 00 00	 mov	 edx, 4
  007d6	6b ca 0d	 imul	 ecx, edx, 13
  007d9	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  007dd	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  007e0	8d 84 02 05 e9
	e3 a9		 lea	 eax, DWORD PTR [edx+eax-1444681467]
  007e7	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  007ea	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  007ed	c1 e0 05	 shl	 eax, 5
  007f0	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  007f3	c1 e9 1b	 shr	 ecx, 27			; 0000001bH
  007f6	0b c1		 or	 eax, ecx
  007f8	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  007fb	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  007fe	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00801	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 247  : 	GG(d,a,b,c,x[ 2],S22,0xfcefa3f8); /* 30 */

  00804	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00807	23 45 ec	 and	 eax, DWORD PTR _c$[ebp]
  0080a	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0080d	f7 d1		 not	 ecx
  0080f	23 4d f0	 and	 ecx, DWORD PTR _b$[ebp]
  00812	0b c1		 or	 eax, ecx
  00814	ba 04 00 00 00	 mov	 edx, 4
  00819	d1 e2		 shl	 edx, 1
  0081b	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  0081f	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00822	8d 94 01 f8 a3
	ef fc		 lea	 edx, DWORD PTR [ecx+eax-51403784]
  00829	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  0082c	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0082f	c1 e0 09	 shl	 eax, 9
  00832	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00835	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00838	0b c1		 or	 eax, ecx
  0083a	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  0083d	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00840	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00843	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 248  : 	GG(c,d,a,b,x[ 7],S23,0x676f02d9); /* 31 */

  00846	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00849	23 45 f0	 and	 eax, DWORD PTR _b$[ebp]
  0084c	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  0084f	f7 d1		 not	 ecx
  00851	23 4d f4	 and	 ecx, DWORD PTR _a$[ebp]
  00854	0b c1		 or	 eax, ecx
  00856	ba 04 00 00 00	 mov	 edx, 4
  0085b	6b ca 07	 imul	 ecx, edx, 7
  0085e	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00862	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  00865	8d 84 02 d9 02
	6f 67		 lea	 eax, DWORD PTR [edx+eax+1735328473]
  0086c	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  0086f	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00872	c1 e0 0e	 shl	 eax, 14			; 0000000eH
  00875	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00878	c1 e9 12	 shr	 ecx, 18			; 00000012H
  0087b	0b c1		 or	 eax, ecx
  0087d	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00880	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00883	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00886	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 249  : 	GG(b,c,d,a,x[12],S24,0x8d2a4c8a); /* 32 */

  00889	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0088c	23 45 f4	 and	 eax, DWORD PTR _a$[ebp]
  0088f	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00892	f7 d1		 not	 ecx
  00894	23 4d e8	 and	 ecx, DWORD PTR _d$[ebp]
  00897	0b c1		 or	 eax, ecx
  00899	ba 04 00 00 00	 mov	 edx, 4
  0089e	6b ca 0c	 imul	 ecx, edx, 12
  008a1	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  008a5	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  008a8	8d 84 02 8a 4c
	2a 8d		 lea	 eax, DWORD PTR [edx+eax-1926607734]
  008af	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  008b2	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  008b5	c1 e0 14	 shl	 eax, 20			; 00000014H
  008b8	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  008bb	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  008be	0b c1		 or	 eax, ecx
  008c0	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  008c3	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  008c6	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  008c9	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 250  : 
; 251  : 	HH(a,b,c,d,x[ 5],S31,0xfffa3942); /* 33 */

  008cc	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  008cf	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  008d2	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  008d5	b9 04 00 00 00	 mov	 ecx, 4
  008da	6b d1 05	 imul	 edx, ecx, 5
  008dd	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  008e1	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  008e4	8d 94 01 42 39
	fa ff		 lea	 edx, DWORD PTR [ecx+eax-378558]
  008eb	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  008ee	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  008f1	c1 e0 04	 shl	 eax, 4
  008f4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  008f7	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  008fa	0b c1		 or	 eax, ecx
  008fc	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  008ff	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00902	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00905	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 252  : 	HH(d,a,b,c,x[ 8],S32,0x8771f681); /* 34 */

  00908	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0090b	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  0090e	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00911	b9 04 00 00 00	 mov	 ecx, 4
  00916	c1 e1 03	 shl	 ecx, 3
  00919	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  0091d	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  00920	8d 84 02 81 f6
	71 87		 lea	 eax, DWORD PTR [edx+eax-2022574463]
  00927	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  0092a	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0092d	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00930	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00933	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00936	0b c1		 or	 eax, ecx
  00938	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  0093b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  0093e	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00941	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 253  : 	HH(c,d,a,b,x[11],S33,0x6d9d6122); /* 35 */

  00944	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00947	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  0094a	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  0094d	b9 04 00 00 00	 mov	 ecx, 4
  00952	6b d1 0b	 imul	 edx, ecx, 11
  00955	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00959	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0095c	8d 94 01 22 61
	9d 6d		 lea	 edx, DWORD PTR [ecx+eax+1839030562]
  00963	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  00966	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00969	c1 e0 10	 shl	 eax, 16			; 00000010H
  0096c	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0096f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00972	0b c1		 or	 eax, ecx
  00974	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00977	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  0097a	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  0097d	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 254  : 	HH(b,c,d,a,x[14],S34,0xfde5380c); /* 36 */

  00980	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00983	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00986	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00989	b9 04 00 00 00	 mov	 ecx, 4
  0098e	6b d1 0e	 imul	 edx, ecx, 14
  00991	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00995	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00998	8d 94 01 0c 38
	e5 fd		 lea	 edx, DWORD PTR [ecx+eax-35309556]
  0099f	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  009a2	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  009a5	c1 e0 17	 shl	 eax, 23			; 00000017H
  009a8	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  009ab	c1 e9 09	 shr	 ecx, 9
  009ae	0b c1		 or	 eax, ecx
  009b0	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  009b3	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  009b6	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  009b9	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 255  : 	HH(a,b,c,d,x[ 1],S31,0xa4beea44); /* 37 */

  009bc	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  009bf	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  009c2	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  009c5	b9 04 00 00 00	 mov	 ecx, 4
  009ca	c1 e1 00	 shl	 ecx, 0
  009cd	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  009d1	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  009d4	8d 84 02 44 ea
	be a4		 lea	 eax, DWORD PTR [edx+eax-1530992060]
  009db	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  009de	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  009e1	c1 e0 04	 shl	 eax, 4
  009e4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  009e7	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  009ea	0b c1		 or	 eax, ecx
  009ec	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  009ef	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  009f2	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  009f5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 256  : 	HH(d,a,b,c,x[ 4],S32,0x4bdecfa9); /* 38 */

  009f8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  009fb	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  009fe	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00a01	b9 04 00 00 00	 mov	 ecx, 4
  00a06	c1 e1 02	 shl	 ecx, 2
  00a09	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00a0d	8b 55 e8	 mov	 edx, DWORD PTR _d$[ebp]
  00a10	8d 84 02 a9 cf
	de 4b		 lea	 eax, DWORD PTR [edx+eax+1272893353]
  00a17	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00a1a	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00a1d	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00a20	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00a23	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00a26	0b c1		 or	 eax, ecx
  00a28	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00a2b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00a2e	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00a31	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 257  : 	HH(c,d,a,b,x[ 7],S33,0xf6bb4b60); /* 39 */

  00a34	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00a37	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00a3a	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00a3d	b9 04 00 00 00	 mov	 ecx, 4
  00a42	6b d1 07	 imul	 edx, ecx, 7
  00a45	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00a49	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00a4c	8d 94 01 60 4b
	bb f6		 lea	 edx, DWORD PTR [ecx+eax-155497632]
  00a53	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  00a56	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00a59	c1 e0 10	 shl	 eax, 16			; 00000010H
  00a5c	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00a5f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00a62	0b c1		 or	 eax, ecx
  00a64	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00a67	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00a6a	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00a6d	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 258  : 	HH(b,c,d,a,x[10],S34,0xbebfbc70); /* 40 */

  00a70	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00a73	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00a76	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00a79	b9 04 00 00 00	 mov	 ecx, 4
  00a7e	6b d1 0a	 imul	 edx, ecx, 10
  00a81	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00a85	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00a88	8d 94 01 70 bc
	bf be		 lea	 edx, DWORD PTR [ecx+eax-1094730640]
  00a8f	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  00a92	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00a95	c1 e0 17	 shl	 eax, 23			; 00000017H
  00a98	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00a9b	c1 e9 09	 shr	 ecx, 9
  00a9e	0b c1		 or	 eax, ecx
  00aa0	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00aa3	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00aa6	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00aa9	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 259  : 	HH(a,b,c,d,x[13],S31,0x289b7ec6); /* 41 */

  00aac	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00aaf	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00ab2	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00ab5	b9 04 00 00 00	 mov	 ecx, 4
  00aba	6b d1 0d	 imul	 edx, ecx, 13
  00abd	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00ac1	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00ac4	8d 94 01 c6 7e
	9b 28		 lea	 edx, DWORD PTR [ecx+eax+681279174]
  00acb	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00ace	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00ad1	c1 e0 04	 shl	 eax, 4
  00ad4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00ad7	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00ada	0b c1		 or	 eax, ecx
  00adc	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00adf	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00ae2	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00ae5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 260  : 	HH(d,a,b,c,x[ 0],S32,0xeaa127fa); /* 42 */

  00ae8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00aeb	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00aee	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00af1	b9 04 00 00 00	 mov	 ecx, 4
  00af6	6b d1 00	 imul	 edx, ecx, 0
  00af9	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00afd	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00b00	8d 94 01 fa 27
	a1 ea		 lea	 edx, DWORD PTR [ecx+eax-358537222]
  00b07	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  00b0a	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00b0d	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00b10	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00b13	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00b16	0b c1		 or	 eax, ecx
  00b18	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00b1b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00b1e	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00b21	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 261  : 	HH(c,d,a,b,x[ 3],S33,0xd4ef3085); /* 43 */

  00b24	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00b27	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00b2a	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00b2d	b9 04 00 00 00	 mov	 ecx, 4
  00b32	6b d1 03	 imul	 edx, ecx, 3
  00b35	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00b39	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00b3c	8d 94 01 85 30
	ef d4		 lea	 edx, DWORD PTR [ecx+eax-722521979]
  00b43	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  00b46	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00b49	c1 e0 10	 shl	 eax, 16			; 00000010H
  00b4c	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00b4f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b52	0b c1		 or	 eax, ecx
  00b54	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00b57	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00b5a	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00b5d	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 262  : 	HH(b,c,d,a,x[ 6],S34,0x4881d05);  /* 44 */

  00b60	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00b63	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00b66	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00b69	b9 04 00 00 00	 mov	 ecx, 4
  00b6e	6b d1 06	 imul	 edx, ecx, 6
  00b71	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00b75	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00b78	8d 94 01 05 1d
	88 04		 lea	 edx, DWORD PTR [ecx+eax+76029189]
  00b7f	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  00b82	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00b85	c1 e0 17	 shl	 eax, 23			; 00000017H
  00b88	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00b8b	c1 e9 09	 shr	 ecx, 9
  00b8e	0b c1		 or	 eax, ecx
  00b90	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00b93	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00b96	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00b99	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 263  : 	HH(a,b,c,d,x[ 9],S31,0xd9d4d039); /* 45 */

  00b9c	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00b9f	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00ba2	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00ba5	b9 04 00 00 00	 mov	 ecx, 4
  00baa	6b d1 09	 imul	 edx, ecx, 9
  00bad	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00bb1	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00bb4	8d 94 01 39 d0
	d4 d9		 lea	 edx, DWORD PTR [ecx+eax-640364487]
  00bbb	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00bbe	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00bc1	c1 e0 04	 shl	 eax, 4
  00bc4	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00bc7	c1 e9 1c	 shr	 ecx, 28			; 0000001cH
  00bca	0b c1		 or	 eax, ecx
  00bcc	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00bcf	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00bd2	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00bd5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 264  : 	HH(d,a,b,c,x[12],S32,0xe6db99e5); /* 46 */

  00bd8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00bdb	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00bde	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00be1	b9 04 00 00 00	 mov	 ecx, 4
  00be6	6b d1 0c	 imul	 edx, ecx, 12
  00be9	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00bed	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00bf0	8d 94 01 e5 99
	db e6		 lea	 edx, DWORD PTR [ecx+eax-421815835]
  00bf7	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  00bfa	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00bfd	c1 e0 0b	 shl	 eax, 11			; 0000000bH
  00c00	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00c03	c1 e9 15	 shr	 ecx, 21			; 00000015H
  00c06	0b c1		 or	 eax, ecx
  00c08	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00c0b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00c0e	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00c11	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 265  : 	HH(c,d,a,b,x[15],S33,0x1fa27cf8); /* 47 */

  00c14	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00c17	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00c1a	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00c1d	b9 04 00 00 00	 mov	 ecx, 4
  00c22	6b d1 0f	 imul	 edx, ecx, 15
  00c25	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00c29	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00c2c	8d 94 01 f8 7c
	a2 1f		 lea	 edx, DWORD PTR [ecx+eax+530742520]
  00c33	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  00c36	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00c39	c1 e0 10	 shl	 eax, 16			; 00000010H
  00c3c	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00c3f	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00c42	0b c1		 or	 eax, ecx
  00c44	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00c47	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00c4a	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00c4d	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 266  : 	HH(b,c,d,a,x[ 2],S34,0xc4ac5665); /* 48 */

  00c50	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00c53	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00c56	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00c59	b9 04 00 00 00	 mov	 ecx, 4
  00c5e	d1 e1		 shl	 ecx, 1
  00c60	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00c64	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  00c67	8d 84 02 65 56
	ac c4		 lea	 eax, DWORD PTR [edx+eax-995338651]
  00c6e	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00c71	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00c74	c1 e0 17	 shl	 eax, 23			; 00000017H
  00c77	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00c7a	c1 e9 09	 shr	 ecx, 9
  00c7d	0b c1		 or	 eax, ecx
  00c7f	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00c82	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00c85	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00c88	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 267  : 
; 268  : 	II(a,b,c,d,x[ 0],S41,0xf4292244); /* 49 */

  00c8b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00c8e	f7 d0		 not	 eax
  00c90	0b 45 f0	 or	 eax, DWORD PTR _b$[ebp]
  00c93	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00c96	b9 04 00 00 00	 mov	 ecx, 4
  00c9b	6b d1 00	 imul	 edx, ecx, 0
  00c9e	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00ca2	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00ca5	8d 94 01 44 22
	29 f4		 lea	 edx, DWORD PTR [ecx+eax-198630844]
  00cac	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00caf	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00cb2	c1 e0 06	 shl	 eax, 6
  00cb5	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00cb8	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00cbb	0b c1		 or	 eax, ecx
  00cbd	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00cc0	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00cc3	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00cc6	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 269  : 	II(d,a,b,c,x[ 7],S42,0x432aff97); /* 50 */

  00cc9	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00ccc	f7 d0		 not	 eax
  00cce	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00cd1	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00cd4	b9 04 00 00 00	 mov	 ecx, 4
  00cd9	6b d1 07	 imul	 edx, ecx, 7
  00cdc	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00ce0	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00ce3	8d 94 01 97 ff
	2a 43		 lea	 edx, DWORD PTR [ecx+eax+1126891415]
  00cea	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  00ced	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00cf0	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00cf3	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00cf6	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00cf9	0b c1		 or	 eax, ecx
  00cfb	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00cfe	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00d01	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00d04	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 270  : 	II(c,d,a,b,x[14],S43,0xab9423a7); /* 51 */

  00d07	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00d0a	f7 d0		 not	 eax
  00d0c	0b 45 e8	 or	 eax, DWORD PTR _d$[ebp]
  00d0f	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00d12	b9 04 00 00 00	 mov	 ecx, 4
  00d17	6b d1 0e	 imul	 edx, ecx, 14
  00d1a	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00d1e	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00d21	8d 94 01 a7 23
	94 ab		 lea	 edx, DWORD PTR [ecx+eax-1416354905]
  00d28	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  00d2b	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00d2e	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00d31	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00d34	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00d37	0b c1		 or	 eax, ecx
  00d39	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00d3c	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00d3f	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00d42	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 271  : 	II(b,c,d,a,x[ 5],S44,0xfc93a039); /* 52 */

  00d45	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00d48	f7 d0		 not	 eax
  00d4a	0b 45 ec	 or	 eax, DWORD PTR _c$[ebp]
  00d4d	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00d50	b9 04 00 00 00	 mov	 ecx, 4
  00d55	6b d1 05	 imul	 edx, ecx, 5
  00d58	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00d5c	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00d5f	8d 94 01 39 a0
	93 fc		 lea	 edx, DWORD PTR [ecx+eax-57434055]
  00d66	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  00d69	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00d6c	c1 e0 15	 shl	 eax, 21			; 00000015H
  00d6f	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00d72	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00d75	0b c1		 or	 eax, ecx
  00d77	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00d7a	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00d7d	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00d80	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 272  : 	II(a,b,c,d,x[12],S41,0x655b59c3); /* 53 */

  00d83	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00d86	f7 d0		 not	 eax
  00d88	0b 45 f0	 or	 eax, DWORD PTR _b$[ebp]
  00d8b	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00d8e	b9 04 00 00 00	 mov	 ecx, 4
  00d93	6b d1 0c	 imul	 edx, ecx, 12
  00d96	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00d9a	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00d9d	8d 94 01 c3 59
	5b 65		 lea	 edx, DWORD PTR [ecx+eax+1700485571]
  00da4	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  00da7	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00daa	c1 e0 06	 shl	 eax, 6
  00dad	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00db0	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00db3	0b c1		 or	 eax, ecx
  00db5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00db8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00dbb	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00dbe	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 273  : 	II(d,a,b,c,x[ 3],S42,0x8f0ccc92); /* 54 */

  00dc1	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00dc4	f7 d0		 not	 eax
  00dc6	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00dc9	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00dcc	b9 04 00 00 00	 mov	 ecx, 4
  00dd1	6b d1 03	 imul	 edx, ecx, 3
  00dd4	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00dd8	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00ddb	8d 94 01 92 cc
	0c 8f		 lea	 edx, DWORD PTR [ecx+eax-1894986606]
  00de2	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  00de5	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00de8	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00deb	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00dee	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00df1	0b c1		 or	 eax, ecx
  00df3	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00df6	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00df9	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00dfc	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 274  : 	II(c,d,a,b,x[10],S43,0xffeff47d); /* 55 */

  00dff	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00e02	f7 d0		 not	 eax
  00e04	0b 45 e8	 or	 eax, DWORD PTR _d$[ebp]
  00e07	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00e0a	b9 04 00 00 00	 mov	 ecx, 4
  00e0f	6b d1 0a	 imul	 edx, ecx, 10
  00e12	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00e16	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00e19	8d 94 01 7d f4
	ef ff		 lea	 edx, DWORD PTR [ecx+eax-1051523]
  00e20	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  00e23	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00e26	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00e29	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00e2c	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00e2f	0b c1		 or	 eax, ecx
  00e31	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00e34	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00e37	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00e3a	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 275  : 	II(b,c,d,a,x[ 1],S44,0x85845dd1); /* 56 */

  00e3d	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00e40	f7 d0		 not	 eax
  00e42	0b 45 ec	 or	 eax, DWORD PTR _c$[ebp]
  00e45	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00e48	b9 04 00 00 00	 mov	 ecx, 4
  00e4d	c1 e1 00	 shl	 ecx, 0
  00e50	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00e54	8b 55 f0	 mov	 edx, DWORD PTR _b$[ebp]
  00e57	8d 84 02 d1 5d
	84 85		 lea	 eax, DWORD PTR [edx+eax-2054922799]
  00e5e	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00e61	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00e64	c1 e0 15	 shl	 eax, 21			; 00000015H
  00e67	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00e6a	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00e6d	0b c1		 or	 eax, ecx
  00e6f	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00e72	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00e75	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00e78	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 276  : 	II(a,b,c,d,x[ 8],S41,0x6fa87e4f); /* 57 */

  00e7b	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00e7e	f7 d0		 not	 eax
  00e80	0b 45 f0	 or	 eax, DWORD PTR _b$[ebp]
  00e83	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00e86	b9 04 00 00 00	 mov	 ecx, 4
  00e8b	c1 e1 03	 shl	 ecx, 3
  00e8e	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00e92	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00e95	8d 84 02 4f 7e
	a8 6f		 lea	 eax, DWORD PTR [edx+eax+1873313359]
  00e9c	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00e9f	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00ea2	c1 e0 06	 shl	 eax, 6
  00ea5	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00ea8	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00eab	0b c1		 or	 eax, ecx
  00ead	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00eb0	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00eb3	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00eb6	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 277  : 	II(d,a,b,c,x[15],S42,0xfe2ce6e0); /* 58 */

  00eb9	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00ebc	f7 d0		 not	 eax
  00ebe	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00ec1	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00ec4	b9 04 00 00 00	 mov	 ecx, 4
  00ec9	6b d1 0f	 imul	 edx, ecx, 15
  00ecc	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00ed0	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00ed3	8d 94 01 e0 e6
	2c fe		 lea	 edx, DWORD PTR [ecx+eax-30611744]
  00eda	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  00edd	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00ee0	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00ee3	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00ee6	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00ee9	0b c1		 or	 eax, ecx
  00eeb	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00eee	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00ef1	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00ef4	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 278  : 	II(c,d,a,b,x[ 6],S43,0xa3014314); /* 59 */

  00ef7	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00efa	f7 d0		 not	 eax
  00efc	0b 45 e8	 or	 eax, DWORD PTR _d$[ebp]
  00eff	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00f02	b9 04 00 00 00	 mov	 ecx, 4
  00f07	6b d1 06	 imul	 edx, ecx, 6
  00f0a	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00f0e	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00f11	8d 94 01 14 43
	01 a3		 lea	 edx, DWORD PTR [ecx+eax-1560198380]
  00f18	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  00f1b	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00f1e	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  00f21	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  00f24	c1 e9 11	 shr	 ecx, 17			; 00000011H
  00f27	0b c1		 or	 eax, ecx
  00f29	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  00f2c	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00f2f	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  00f32	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 279  : 	II(b,c,d,a,x[13],S44,0x4e0811a1); /* 60 */

  00f35	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00f38	f7 d0		 not	 eax
  00f3a	0b 45 ec	 or	 eax, DWORD PTR _c$[ebp]
  00f3d	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  00f40	b9 04 00 00 00	 mov	 ecx, 4
  00f45	6b d1 0d	 imul	 edx, ecx, 13
  00f48	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00f4c	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00f4f	8d 94 01 a1 11
	08 4e		 lea	 edx, DWORD PTR [ecx+eax+1309151649]
  00f56	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  00f59	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00f5c	c1 e0 15	 shl	 eax, 21			; 00000015H
  00f5f	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00f62	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00f65	0b c1		 or	 eax, ecx
  00f67	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  00f6a	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00f6d	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  00f70	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 280  : 	II(a,b,c,d,x[ 4],S41,0xf7537e82); /* 61 */

  00f73	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00f76	f7 d0		 not	 eax
  00f78	0b 45 f0	 or	 eax, DWORD PTR _b$[ebp]
  00f7b	33 45 ec	 xor	 eax, DWORD PTR _c$[ebp]
  00f7e	b9 04 00 00 00	 mov	 ecx, 4
  00f83	c1 e1 02	 shl	 ecx, 2
  00f86	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  00f8a	8b 55 f4	 mov	 edx, DWORD PTR _a$[ebp]
  00f8d	8d 84 02 82 7e
	53 f7		 lea	 eax, DWORD PTR [edx+eax-145523070]
  00f94	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00f97	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00f9a	c1 e0 06	 shl	 eax, 6
  00f9d	8b 4d f4	 mov	 ecx, DWORD PTR _a$[ebp]
  00fa0	c1 e9 1a	 shr	 ecx, 26			; 0000001aH
  00fa3	0b c1		 or	 eax, ecx
  00fa5	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax
  00fa8	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00fab	03 45 f0	 add	 eax, DWORD PTR _b$[ebp]
  00fae	89 45 f4	 mov	 DWORD PTR _a$[ebp], eax

; 281  : 	II(d,a,b,c,x[11],S42,0xbd3af235); /* 62 */

  00fb1	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  00fb4	f7 d0		 not	 eax
  00fb6	0b 45 f4	 or	 eax, DWORD PTR _a$[ebp]
  00fb9	33 45 f0	 xor	 eax, DWORD PTR _b$[ebp]
  00fbc	b9 04 00 00 00	 mov	 ecx, 4
  00fc1	6b d1 0b	 imul	 edx, ecx, 11
  00fc4	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  00fc8	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00fcb	8d 94 01 35 f2
	3a bd		 lea	 edx, DWORD PTR [ecx+eax-1120210379]
  00fd2	89 55 e8	 mov	 DWORD PTR _d$[ebp], edx
  00fd5	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00fd8	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00fdb	8b 4d e8	 mov	 ecx, DWORD PTR _d$[ebp]
  00fde	c1 e9 16	 shr	 ecx, 22			; 00000016H
  00fe1	0b c1		 or	 eax, ecx
  00fe3	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax
  00fe6	8b 45 e8	 mov	 eax, DWORD PTR _d$[ebp]
  00fe9	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  00fec	89 45 e8	 mov	 DWORD PTR _d$[ebp], eax

; 282  : 	II(c,d,a,b,x[ 2],S43,0x2ad7d2bb); /* 63 */

  00fef	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  00ff2	f7 d0		 not	 eax
  00ff4	0b 45 e8	 or	 eax, DWORD PTR _d$[ebp]
  00ff7	33 45 f4	 xor	 eax, DWORD PTR _a$[ebp]
  00ffa	b9 04 00 00 00	 mov	 ecx, 4
  00fff	d1 e1		 shl	 ecx, 1
  01001	03 44 0d a8	 add	 eax, DWORD PTR _x$[ebp+ecx]
  01005	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  01008	8d 84 02 bb d2
	d7 2a		 lea	 eax, DWORD PTR [edx+eax+718787259]
  0100f	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  01012	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  01015	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  01018	8b 4d ec	 mov	 ecx, DWORD PTR _c$[ebp]
  0101b	c1 e9 11	 shr	 ecx, 17			; 00000011H
  0101e	0b c1		 or	 eax, ecx
  01020	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax
  01023	8b 45 ec	 mov	 eax, DWORD PTR _c$[ebp]
  01026	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  01029	89 45 ec	 mov	 DWORD PTR _c$[ebp], eax

; 283  : 	II(b,c,d,a,x[ 9],S44,0xeb86d391); /* 64 */

  0102c	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  0102f	f7 d0		 not	 eax
  01031	0b 45 ec	 or	 eax, DWORD PTR _c$[ebp]
  01034	33 45 e8	 xor	 eax, DWORD PTR _d$[ebp]
  01037	b9 04 00 00 00	 mov	 ecx, 4
  0103c	6b d1 09	 imul	 edx, ecx, 9
  0103f	03 44 15 a8	 add	 eax, DWORD PTR _x$[ebp+edx]
  01043	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  01046	8d 94 01 91 d3
	86 eb		 lea	 edx, DWORD PTR [ecx+eax-343485551]
  0104d	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  01050	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  01053	c1 e0 15	 shl	 eax, 21			; 00000015H
  01056	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  01059	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0105c	0b c1		 or	 eax, ecx
  0105e	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
  01061	8b 45 f0	 mov	 eax, DWORD PTR _b$[ebp]
  01064	03 45 ec	 add	 eax, DWORD PTR _c$[ebp]
  01067	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax

; 284  : 
; 285  : 	lState[0]+=a;

  0106a	b8 04 00 00 00	 mov	 eax, 4
  0106f	6b c8 00	 imul	 ecx, eax, 0
  01072	8b 55 08	 mov	 edx, DWORD PTR _lState$[ebp]
  01075	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  01078	03 45 f4	 add	 eax, DWORD PTR _a$[ebp]
  0107b	b9 04 00 00 00	 mov	 ecx, 4
  01080	6b d1 00	 imul	 edx, ecx, 0
  01083	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  01086	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 286  : 	lState[1]+=b;

  01089	b8 04 00 00 00	 mov	 eax, 4
  0108e	c1 e0 00	 shl	 eax, 0
  01091	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  01094	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  01097	03 55 f0	 add	 edx, DWORD PTR _b$[ebp]
  0109a	b8 04 00 00 00	 mov	 eax, 4
  0109f	c1 e0 00	 shl	 eax, 0
  010a2	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  010a5	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 287  : 	lState[2]+=c;

  010a8	b8 04 00 00 00	 mov	 eax, 4
  010ad	d1 e0		 shl	 eax, 1
  010af	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  010b2	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  010b5	03 55 ec	 add	 edx, DWORD PTR _c$[ebp]
  010b8	b8 04 00 00 00	 mov	 eax, 4
  010bd	d1 e0		 shl	 eax, 1
  010bf	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  010c2	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 288  : 	lState[3]+=d;

  010c5	b8 04 00 00 00	 mov	 eax, 4
  010ca	6b c8 03	 imul	 ecx, eax, 3
  010cd	8b 55 08	 mov	 edx, DWORD PTR _lState$[ebp]
  010d0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  010d3	03 45 e8	 add	 eax, DWORD PTR _d$[ebp]
  010d6	b9 04 00 00 00	 mov	 ecx, 4
  010db	6b d1 03	 imul	 edx, ecx, 3
  010de	8b 4d 08	 mov	 ecx, DWORD PTR _lState$[ebp]
  010e1	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 289  : 
; 290  : 	MD5Memset((BYTE *)x,0,sizeof(x));

  010e4	6a 40		 push	 64			; 00000040H
  010e6	6a 00		 push	 0
  010e8	8d 45 a8	 lea	 eax, DWORD PTR _x$[ebp]
  010eb	50		 push	 eax
  010ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  010ef	e8 00 00 00 00	 call	 ?MD5Memset@CMD5Aide@@AAEXPAEHI@Z ; CMD5Aide::MD5Memset

; 291  : 
; 292  : 	return;
; 293  : }

  010f4	5f		 pop	 edi
  010f5	5e		 pop	 esi
  010f6	5b		 pop	 ebx
  010f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  010fa	33 cd		 xor	 ecx, ebp
  010fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01101	8b e5		 mov	 esp, ebp
  01103	5d		 pop	 ebp
  01104	c2 08 00	 ret	 8
?MD5Transform@CMD5Aide@@AAEXQAKQAE@Z ENDP		; CMD5Aide::MD5Transform
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MD5Memcpy@CMD5Aide@@AAEXPAE0I@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_pcbOutput$ = 8						; size = 4
_pcbInput$ = 12						; size = 4
_nLen$ = 16						; size = 4
?MD5Memcpy@CMD5Aide@@AAEXPAE0I@Z PROC			; CMD5Aide::MD5Memcpy, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  : 	for (UINT i=0;i<nLen;i++) pcbOutput[i]=pcbInput[i];

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@MD5Memcpy
$LN2@MD5Memcpy:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@MD5Memcpy:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00024	73 12		 jae	 SHORT $LN1@MD5Memcpy
  00026	8b 45 08	 mov	 eax, DWORD PTR _pcbOutput$[ebp]
  00029	03 45 f8	 add	 eax, DWORD PTR _i$1[ebp]
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbInput$[ebp]
  0002f	03 4d f8	 add	 ecx, DWORD PTR _i$1[ebp]
  00032	8a 11		 mov	 dl, BYTE PTR [ecx]
  00034	88 10		 mov	 BYTE PTR [eax], dl
  00036	eb dd		 jmp	 SHORT $LN2@MD5Memcpy
$LN1@MD5Memcpy:

; 325  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
?MD5Memcpy@CMD5Aide@@AAEXPAE0I@Z ENDP			; CMD5Aide::MD5Memcpy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MD5Memset@CMD5Aide@@AAEXPAEHI@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_pcbOutput$ = 8						; size = 4
_nValue$ = 12						; size = 4
_nLen$ = 16						; size = 4
?MD5Memset@CMD5Aide@@AAEXPAEHI@Z PROC			; CMD5Aide::MD5Memset, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 330  : 	for (UINT i=0;i<nLen;i++) ((char *)pcbOutput)[i]=(char)nValue;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@MD5Memset
$LN2@MD5Memset:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@MD5Memset:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	3b 45 10	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00024	73 0d		 jae	 SHORT $LN1@MD5Memset
  00026	8b 45 08	 mov	 eax, DWORD PTR _pcbOutput$[ebp]
  00029	03 45 f8	 add	 eax, DWORD PTR _i$1[ebp]
  0002c	8a 4d 0c	 mov	 cl, BYTE PTR _nValue$[ebp]
  0002f	88 08		 mov	 BYTE PTR [eax], cl
  00031	eb e2		 jmp	 SHORT $LN2@MD5Memset
$LN1@MD5Memset:

; 331  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?MD5Memset@CMD5Aide@@AAEXPAEHI@Z ENDP			; CMD5Aide::MD5Memset
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MD5Init@CMD5Aide@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MD5Init@CMD5Aide@@AAEXXZ PROC				; CMD5Aide::MD5Init, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 	m_lCount[0]=0;

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], 0

; 162  : 	m_lCount[1]=0;

  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	c1 e0 00	 shl	 eax, 0
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 163  : 	m_lState[0]=0x67452301;

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	6b c8 00	 imul	 ecx, eax, 0
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 44 0a 08 01
	23 45 67	 mov	 DWORD PTR [edx+ecx+8], 1732584193 ; 67452301H

; 164  : 	m_lState[1]=0xefcdab89;

  00043	b8 04 00 00 00	 mov	 eax, 4
  00048	c1 e0 00	 shl	 eax, 0
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	c7 44 01 08 89
	ab cd ef	 mov	 DWORD PTR [ecx+eax+8], -271733879 ; efcdab89H

; 165  : 	m_lState[2]=0x98badcfe;

  00056	b8 04 00 00 00	 mov	 eax, 4
  0005b	d1 e0		 shl	 eax, 1
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	c7 44 01 08 fe
	dc ba 98	 mov	 DWORD PTR [ecx+eax+8], -1732584194 ; 98badcfeH

; 166  : 	m_lState[3]=0x10325476;

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	6b c8 03	 imul	 ecx, eax, 3
  00070	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00073	c7 44 0a 08 76
	54 32 10	 mov	 DWORD PTR [edx+ecx+8], 271733878 ; 10325476H

; 167  : 	MD5Memset(m_cbPadding,0,sizeof(m_cbPadding));

  0007b	6a 40		 push	 64			; 00000040H
  0007d	6a 00		 push	 0
  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 58	 add	 eax, 88			; 00000058H
  00085	50		 push	 eax
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?MD5Memset@CMD5Aide@@AAEXPAEHI@Z ; CMD5Aide::MD5Memset

; 168  : 	*m_cbPadding=0x80;

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00099	c6 44 0a 58 80	 mov	 BYTE PTR [edx+ecx+88], 128 ; 00000080H

; 169  : 
; 170  : 	return;
; 171  : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?MD5Init@CMD5Aide@@AAEXXZ ENDP				; CMD5Aide::MD5Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MD5Update@CMD5Aide@@QAEXPAEI@Z
_TEXT	SEGMENT
tv76 = -84						; size = 4
_nPartLen$ = -16					; size = 4
_nIndex$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_pcbInput$ = 8						; size = 4
_inputLen$ = 12						; size = 4
?MD5Update@CMD5Aide@@QAEXPAEI@Z PROC			; CMD5Aide::MD5Update, COMDAT
; _this$ = ecx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 176  : 	UINT i,nIndex,nPartLen;
; 177  : 	nIndex=(UINT)((this->m_lCount[0]>>3)&0x3F);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0001a	c1 e8 03	 shr	 eax, 3
  0001d	83 e0 3f	 and	 eax, 63			; 0000003fH
  00020	89 45 f4	 mov	 DWORD PTR _nIndex$[ebp], eax

; 178  : 	if ((m_lCount[0]+=((ULONG)inputLen<<3))<((ULONG)inputLen<<3)) m_lCount[1]++;

  00023	b8 04 00 00 00	 mov	 eax, 4
  00028	6b c8 00	 imul	 ecx, eax, 0
  0002b	8b 55 0c	 mov	 edx, DWORD PTR _inputLen$[ebp]
  0002e	c1 e2 03	 shl	 edx, 3
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00037	03 ca		 add	 ecx, edx
  00039	89 4d ac	 mov	 DWORD PTR tv76[ebp], ecx
  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	6b c2 00	 imul	 eax, edx, 0
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 55 ac	 mov	 edx, DWORD PTR tv76[ebp]
  0004a	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _inputLen$[ebp]
  00050	c1 e0 03	 shl	 eax, 3
  00053	39 45 ac	 cmp	 DWORD PTR tv76[ebp], eax
  00056	73 1f		 jae	 SHORT $LN5@MD5Update
  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00066	83 c2 01	 add	 edx, 1
  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	c1 e0 00	 shl	 eax, 0
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
$LN5@MD5Update:

; 179  : 	m_lCount[1]+=((ULONG)inputLen>>29);

  00077	b8 04 00 00 00	 mov	 eax, 4
  0007c	c1 e0 00	 shl	 eax, 0
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _inputLen$[ebp]
  00082	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00085	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00088	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00096	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 180  : 	nPartLen=64-nIndex;

  00099	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0009e	2b 45 f4	 sub	 eax, DWORD PTR _nIndex$[ebp]
  000a1	89 45 f0	 mov	 DWORD PTR _nPartLen$[ebp], eax

; 181  : 	if (inputLen>=nPartLen) 

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _inputLen$[ebp]
  000a7	3b 45 f0	 cmp	 eax, DWORD PTR _nPartLen$[ebp]
  000aa	72 6e		 jb	 SHORT $LN6@MD5Update

; 182  : 	{
; 183  : 		MD5Memcpy((BYTE*)&m_cbBuffer[nIndex],(BYTE *)pcbInput,nPartLen);

  000ac	8b 45 f0	 mov	 eax, DWORD PTR _nPartLen$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _pcbInput$[ebp]
  000b3	51		 push	 ecx
  000b4	8b 55 f4	 mov	 edx, DWORD PTR _nIndex$[ebp]
  000b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	8d 4c 10 18	 lea	 ecx, DWORD PTR [eax+edx+24]
  000be	51		 push	 ecx
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ?MD5Memcpy@CMD5Aide@@AAEXPAE0I@Z ; CMD5Aide::MD5Memcpy

; 184  : 		MD5Transform(m_lState,m_cbBuffer);

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	83 c0 18	 add	 eax, 24			; 00000018H
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	83 c1 08	 add	 ecx, 8
  000d4	51		 push	 ecx
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	e8 00 00 00 00	 call	 ?MD5Transform@CMD5Aide@@AAEXQAKQAE@Z ; CMD5Aide::MD5Transform

; 185  : 		for (i=nPartLen;i+63<inputLen;i+=64) MD5Transform(m_lState,&pcbInput[i]);

  000dd	8b 45 f0	 mov	 eax, DWORD PTR _nPartLen$[ebp]
  000e0	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  000e3	eb 09		 jmp	 SHORT $LN4@MD5Update
$LN2@MD5Update:
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000e8	83 c0 40	 add	 eax, 64			; 00000040H
  000eb	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@MD5Update:
  000ee	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000f1	83 c0 3f	 add	 eax, 63			; 0000003fH
  000f4	3b 45 0c	 cmp	 eax, DWORD PTR _inputLen$[ebp]
  000f7	73 18		 jae	 SHORT $LN3@MD5Update
  000f9	8b 45 08	 mov	 eax, DWORD PTR _pcbInput$[ebp]
  000fc	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  000ff	50		 push	 eax
  00100	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 08	 add	 ecx, 8
  00106	51		 push	 ecx
  00107	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	e8 00 00 00 00	 call	 ?MD5Transform@CMD5Aide@@AAEXQAKQAE@Z ; CMD5Aide::MD5Transform
  0010f	eb d4		 jmp	 SHORT $LN2@MD5Update
$LN3@MD5Update:

; 186  : 		nIndex=0;

  00111	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nIndex$[ebp], 0
  00118	eb 07		 jmp	 SHORT $LN7@MD5Update
$LN6@MD5Update:

; 187  : 	}
; 188  : 	else i=0;

  0011a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN7@MD5Update:

; 189  : 	MD5Memcpy((BYTE*)&m_cbBuffer[nIndex],(BYTE *)&pcbInput[i],inputLen-i);

  00121	8b 45 0c	 mov	 eax, DWORD PTR _inputLen$[ebp]
  00124	2b 45 f8	 sub	 eax, DWORD PTR _i$[ebp]
  00127	50		 push	 eax
  00128	8b 4d 08	 mov	 ecx, DWORD PTR _pcbInput$[ebp]
  0012b	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  0012e	51		 push	 ecx
  0012f	8b 55 f4	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00132	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00135	8d 4c 10 18	 lea	 ecx, DWORD PTR [eax+edx+24]
  00139	51		 push	 ecx
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	e8 00 00 00 00	 call	 ?MD5Memcpy@CMD5Aide@@AAEXPAE0I@Z ; CMD5Aide::MD5Memcpy

; 190  : 
; 191  : 	return;
; 192  : }

  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 08 00	 ret	 8
?MD5Update@CMD5Aide@@QAEXPAEI@Z ENDP			; CMD5Aide::MD5Update
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MD5Final@CMD5Aide@@QAEXQAE@Z
_TEXT	SEGMENT
tv77 = -92						; size = 4
_nPartLen$ = -24					; size = 4
_nIndex$ = -20						; size = 4
_cbBits$ = -16						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_digest$ = 8						; size = 4
?MD5Final@CMD5Aide@@QAEXQAE@Z PROC			; CMD5Aide::MD5Final, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 	BYTE cbBits[8];
; 198  : 	UINT nIndex,nPartLen;
; 199  : 	Encode(cbBits,m_lCount,8);

  00016	6a 08		 push	 8
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	50		 push	 eax
  0001c	8d 4d f0	 lea	 ecx, DWORD PTR _cbBits$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?Encode@CMD5Aide@@AAEXPAEPAKI@Z ; CMD5Aide::Encode

; 200  : 	nIndex=(UINT)((m_lCount[0]>>3)&0x3f);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	c1 e8 03	 shr	 eax, 3
  00039	83 e0 3f	 and	 eax, 63			; 0000003fH
  0003c	89 45 ec	 mov	 DWORD PTR _nIndex$[ebp], eax

; 201  : 	nPartLen=(nIndex<56)?(56-nIndex):(120-nIndex);

  0003f	83 7d ec 38	 cmp	 DWORD PTR _nIndex$[ebp], 56 ; 00000038H
  00043	73 0d		 jae	 SHORT $LN3@MD5Final
  00045	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0004a	2b 45 ec	 sub	 eax, DWORD PTR _nIndex$[ebp]
  0004d	89 45 a4	 mov	 DWORD PTR tv77[ebp], eax
  00050	eb 0b		 jmp	 SHORT $LN4@MD5Final
$LN3@MD5Final:
  00052	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00057	2b 4d ec	 sub	 ecx, DWORD PTR _nIndex$[ebp]
  0005a	89 4d a4	 mov	 DWORD PTR tv77[ebp], ecx
$LN4@MD5Final:
  0005d	8b 55 a4	 mov	 edx, DWORD PTR tv77[ebp]
  00060	89 55 e8	 mov	 DWORD PTR _nPartLen$[ebp], edx

; 202  : 	MD5Update( m_cbPadding,nPartLen);

  00063	8b 45 e8	 mov	 eax, DWORD PTR _nPartLen$[ebp]
  00066	50		 push	 eax
  00067	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 58	 add	 ecx, 88			; 00000058H
  0006d	51		 push	 ecx
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?MD5Update@CMD5Aide@@QAEXPAEI@Z ; CMD5Aide::MD5Update

; 203  : 	MD5Update(cbBits,8);

  00076	6a 08		 push	 8
  00078	8d 45 f0	 lea	 eax, DWORD PTR _cbBits$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?MD5Update@CMD5Aide@@QAEXPAEI@Z ; CMD5Aide::MD5Update

; 204  : 	Encode(digest,m_lState,16);

  00084	6a 10		 push	 16			; 00000010H
  00086	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00089	83 c0 08	 add	 eax, 8
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _digest$[ebp]
  00090	51		 push	 ecx
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?Encode@CMD5Aide@@AAEXPAEPAKI@Z ; CMD5Aide::Encode

; 205  : 	MD5Memset((BYTE*)this,0,sizeof (*this));

  00099	68 98 00 00 00	 push	 152			; 00000098H
  0009e	6a 00		 push	 0
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	e8 00 00 00 00	 call	 ?MD5Memset@CMD5Aide@@AAEXPAEHI@Z ; CMD5Aide::MD5Memset

; 206  : 	MD5Init();

  000ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?MD5Init@CMD5Aide@@AAEXXZ ; CMD5Aide::MD5Init

; 207  : 
; 208  : 	return;
; 209  : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
?MD5Final@CMD5Aide@@QAEXQAE@Z ENDP			; CMD5Aide::MD5Final
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ??0CMD5Aide@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMD5Aide@@QAE@XZ PROC				; CMD5Aide::CMD5Aide, COMDAT
; _this$ = ecx

; 128  : 	CMD5Aide() { MD5Init(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?MD5Init@CMD5Aide@@AAEXXZ ; CMD5Aide::MD5Init
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CMD5Aide@@QAE@XZ ENDP				; CMD5Aide::CMD5Aide
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECWHEncrypt@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECWHEncrypt@@UAEPAXI@Z PROC				; CWHEncrypt::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECWHEncrypt@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CWHEncrypt@@UAE@XZ ; CWHEncrypt::~CWHEncrypt
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 04		 push	 4
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 04		 push	 4
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECWHEncrypt@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECWHEncrypt@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECWHEncrypt@@UAEPAXI@Z ENDP				; CWHEncrypt::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCWHEncrypt@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWHEncrypt@@UAEPAXI@Z PROC				; CWHEncrypt::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CWHEncrypt@@UAE@XZ	; CWHEncrypt::~CWHEncrypt
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 04		 push	 4
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCWHEncrypt@@UAEPAXI@Z ENDP				; CWHEncrypt::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CWHEncrypt@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CWHEncrypt@@QAEAAV0@ABV0@@Z PROC			; CWHEncrypt::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??4CWHEncrypt@@QAEAAV0@ABV0@@Z ENDP			; CWHEncrypt::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CWHEncrypt@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CWHEncrypt@@QAE@ABV0@@Z PROC				; CWHEncrypt::CWHEncrypt, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHEncrypt@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0CWHEncrypt@@QAE@ABV0@@Z ENDP				; CWHEncrypt::CWHEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z
_TEXT	SEGMENT
_cbIndex$1 = -17					; size = 1
_i$2 = -16						; size = 4
_pcbSourceData$ = -12					; size = 4
_pcbEncrypData$ = -8					; size = 4
_nLength$ = -4						; size = 4
_pszEncrypData$ = 8					; size = 4
_pszSourceData$ = 12					; size = 4
_wMaxCount$ = 16					; size = 2
?MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z PROC		; CWHEncrypt::MapCrevasse, COMDAT

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 486  : 	//效验参数
; 487  : 	ASSERT(wMaxCount>lstrlen(pszEncrypData));

  00009	0f b7 75 10	 movzx	 esi, WORD PTR _wMaxCount$[ebp]
  0000d	8b 45 08	 mov	 eax, DWORD PTR _pszEncrypData$[ebp]
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00017	3b f0		 cmp	 esi, eax
  00019	7f 19		 jg	 SHORT $LN6@MapCrevass
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA
  00021	83 c1 02	 add	 ecx, 2
  00024	51		 push	 ecx
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002f	85 c0		 test	 eax, eax
  00031	74 01		 je	 SHORT $LN6@MapCrevass
  00033	cc		 int	 3
$LN6@MapCrevass:

; 488  : 	ASSERT((pszEncrypData!=NULL)&&(pszSourceData!=NULL));

  00034	83 7d 08 00	 cmp	 DWORD PTR _pszEncrypData$[ebp], 0
  00038	74 06		 je	 SHORT $LN7@MapCrevass
  0003a	83 7d 0c 00	 cmp	 DWORD PTR _pszSourceData$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN8@MapCrevass
$LN7@MapCrevass:
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA
  00045	83 c0 03	 add	 eax, 3
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN8@MapCrevass
  00057	cc		 int	 3
$LN8@MapCrevass:

; 489  : 
; 490  : 	//变量定义
; 491  : 	INT nLength=lstrlen(pszEncrypData);

  00058	8b 45 08	 mov	 eax, DWORD PTR _pszEncrypData$[ebp]
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00062	89 45 fc	 mov	 DWORD PTR _nLength$[ebp], eax

; 492  : 	BYTE * pcbEncrypData=(BYTE *)pszEncrypData;

  00065	8b 45 08	 mov	 eax, DWORD PTR _pszEncrypData$[ebp]
  00068	89 45 f8	 mov	 DWORD PTR _pcbEncrypData$[ebp], eax

; 493  : 	BYTE * pcbSourceData=(BYTE *)pszSourceData;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _pszSourceData$[ebp]
  0006e	89 45 f4	 mov	 DWORD PTR _pcbSourceData$[ebp], eax

; 494  : 
; 495  : 	//解密数据
; 496  : 	for (UINT i=0;i<nLength*sizeof(TCHAR);i++)

  00071	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN4@MapCrevass
$LN2@MapCrevass:
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _i$2[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 f0	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@MapCrevass:
  00083	8b 45 f0	 mov	 eax, DWORD PTR _i$2[ebp]
  00086	3b 45 fc	 cmp	 eax, DWORD PTR _nLength$[ebp]
  00089	73 1f		 jae	 SHORT $LN3@MapCrevass

; 497  : 	{
; 498  : 		BYTE cbIndex=pcbEncrypData[i];

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _pcbEncrypData$[ebp]
  0008e	03 45 f0	 add	 eax, DWORD PTR _i$2[ebp]
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	88 4d ef	 mov	 BYTE PTR _cbIndex$1[ebp], cl

; 499  : 		pcbSourceData[i]=g_cbCrevasseMap[cbIndex];

  00096	0f b6 45 ef	 movzx	 eax, BYTE PTR _cbIndex$1[ebp]
  0009a	8b 4d f4	 mov	 ecx, DWORD PTR _pcbSourceData$[ebp]
  0009d	03 4d f0	 add	 ecx, DWORD PTR _i$2[ebp]
  000a0	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR ?g_cbCrevasseMap@@3QBEB[eax]
  000a6	88 11		 mov	 BYTE PTR [ecx], dl

; 500  : 	}

  000a8	eb d0		 jmp	 SHORT $LN2@MapCrevass
$LN3@MapCrevass:

; 501  : 
; 502  : 	//设置结果
; 503  : 	pszSourceData[nLength]=0;

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _pszSourceData$[ebp]
  000ad	03 45 fc	 add	 eax, DWORD PTR _nLength$[ebp]
  000b0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 504  : 
; 505  : 	return true;

  000b3	b0 01		 mov	 al, 1

; 506  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
?MapCrevasse@CWHEncrypt@@SA_NPBDPADG@Z ENDP		; CWHEncrypt::MapCrevasse
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z
_TEXT	SEGMENT
_cbIndex$1 = -17					; size = 1
_i$2 = -16						; size = 4
_pcbSourceData$ = -12					; size = 4
_pcbEncrypData$ = -8					; size = 4
_nLength$ = -4						; size = 4
_pszSourceData$ = 8					; size = 4
_pszEncrypData$ = 12					; size = 4
_wMaxCount$ = 16					; size = 2
?MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z PROC		; CWHEncrypt::MapEncrypt, COMDAT

; 460  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 461  : 	//效验参数
; 462  : 	ASSERT(wMaxCount>lstrlen(pszEncrypData));

  00009	0f b7 75 10	 movzx	 esi, WORD PTR _wMaxCount$[ebp]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _pszEncrypData$[ebp]
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00017	3b f0		 cmp	 esi, eax
  00019	7f 19		 jg	 SHORT $LN6@MapEncrypt
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA
  00021	83 c1 02	 add	 ecx, 2
  00024	51		 push	 ecx
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002f	85 c0		 test	 eax, eax
  00031	74 01		 je	 SHORT $LN6@MapEncrypt
  00033	cc		 int	 3
$LN6@MapEncrypt:

; 463  : 	ASSERT((pszEncrypData!=NULL)&&(pszSourceData!=NULL));

  00034	83 7d 0c 00	 cmp	 DWORD PTR _pszEncrypData$[ebp], 0
  00038	74 06		 je	 SHORT $LN7@MapEncrypt
  0003a	83 7d 08 00	 cmp	 DWORD PTR _pszSourceData$[ebp], 0
  0003e	75 18		 jne	 SHORT $LN8@MapEncrypt
$LN7@MapEncrypt:
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA
  00045	83 c0 03	 add	 eax, 3
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN8@MapEncrypt
  00057	cc		 int	 3
$LN8@MapEncrypt:

; 464  : 
; 465  : 	//变量定义
; 466  : 	INT nLength=lstrlen(pszSourceData);

  00058	8b 45 08	 mov	 eax, DWORD PTR _pszSourceData$[ebp]
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00062	89 45 fc	 mov	 DWORD PTR _nLength$[ebp], eax

; 467  : 	BYTE * pcbEncrypData=(BYTE *)pszEncrypData;

  00065	8b 45 0c	 mov	 eax, DWORD PTR _pszEncrypData$[ebp]
  00068	89 45 f8	 mov	 DWORD PTR _pcbEncrypData$[ebp], eax

; 468  : 	BYTE * pcbSourceData=(BYTE *)pszSourceData;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _pszSourceData$[ebp]
  0006e	89 45 f4	 mov	 DWORD PTR _pcbSourceData$[ebp], eax

; 469  : 
; 470  : 	//解密数据
; 471  : 	for (UINT i=0;i<nLength*sizeof(TCHAR);i++)

  00071	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN4@MapEncrypt
$LN2@MapEncrypt:
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _i$2[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 f0	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@MapEncrypt:
  00083	8b 45 f0	 mov	 eax, DWORD PTR _i$2[ebp]
  00086	3b 45 fc	 cmp	 eax, DWORD PTR _nLength$[ebp]
  00089	73 1f		 jae	 SHORT $LN3@MapEncrypt

; 472  : 	{
; 473  : 		BYTE cbIndex=pcbSourceData[i];

  0008b	8b 45 f4	 mov	 eax, DWORD PTR _pcbSourceData$[ebp]
  0008e	03 45 f0	 add	 eax, DWORD PTR _i$2[ebp]
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	88 4d ef	 mov	 BYTE PTR _cbIndex$1[ebp], cl

; 474  : 		pcbEncrypData[i]=g_cbEncryptMap[cbIndex];

  00096	0f b6 45 ef	 movzx	 eax, BYTE PTR _cbIndex$1[ebp]
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _pcbEncrypData$[ebp]
  0009d	03 4d f0	 add	 ecx, DWORD PTR _i$2[ebp]
  000a0	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR ?g_cbEncryptMap@@3QBEB[eax]
  000a6	88 11		 mov	 BYTE PTR [ecx], dl

; 475  : 	}

  000a8	eb d0		 jmp	 SHORT $LN2@MapEncrypt
$LN3@MapEncrypt:

; 476  : 
; 477  : 	//设置结果
; 478  : 	pszEncrypData[nLength]=0;

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _pszEncrypData$[ebp]
  000ad	03 45 fc	 add	 eax, DWORD PTR _nLength$[ebp]
  000b0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 479  : 
; 480  : 	return true;

  000b3	b0 01		 mov	 al, 1

; 481  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
?MapEncrypt@CWHEncrypt@@SA_NPBDPADG@Z ENDP		; CWHEncrypt::MapEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z
_TEXT	SEGMENT
$T2 = -737						; size = 1
$T3 = -736						; size = 4
$T4 = -732						; size = 4
$T5 = -728						; size = 4
$T6 = -722						; size = 1
$T7 = -721						; size = 1
$T8 = -720						; size = 4
$T9 = -713						; size = 1
_strSrcData$ = -584					; size = 132
_wEncrypt$10 = -452					; size = 2
_wKey$11 = -448						; size = 2
_szKeyBuffer$12 = -444					; size = 10
_i$13 = -432						; size = 4
_wSoureLength$ = -428					; size = 2
_pEnd$ = -424						; size = 4
_szTempBuffer$ = -420					; size = 10
_wEncrypPassLen$ = -408					; size = 2
_szSrcData$ = -404					; size = 128
_strEncrypData$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszEncrypData$ = 8					; size = 4
_pszSourceData$ = 12					; size = 4
_wMaxCount$ = 16					; size = 2
?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z PROC		; CWHEncrypt::XorCrevasse, COMDAT

; 401  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 02 00
	00		 sub	 esp, 728		; 000002d8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 402  : 	//设置结果
; 403  : 	pszSourceData[0]=0;

  0002e	b8 01 00 00 00	 mov	 eax, 1
  00033	6b c8 00	 imul	 ecx, eax, 0
  00036	8b 55 0c	 mov	 edx, DWORD PTR _pszSourceData$[ebp]
  00039	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 404  : 
; 405  : 	//变量定义
; 406  : 	CT2CW strEncrypData(pszEncrypData);

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pszEncrypData$[ebp]
  00040	50		 push	 eax
  00041	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z ; ATL::CA2WEX<128>::CA2WEX<128>
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 407  : 	WCHAR szSrcData[MAX_SOURCE_LEN]=L"";

  00053	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_11LOCGONAA@@
  00059	66 89 85 6c fe
	ff ff		 mov	 WORD PTR _szSrcData$[ebp], ax
  00060	6a 7e		 push	 126			; 0000007eH
  00062	6a 00		 push	 0
  00064	8d 85 6e fe ff
	ff		 lea	 eax, DWORD PTR _szSrcData$[ebp+2]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _memset
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 408  : 
; 409  : 	//效验长度
; 410  : 	WORD wEncrypPassLen=lstrlenW(strEncrypData);

  00073	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  00079	e8 00 00 00 00	 call	 ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ; ATL::CA2WEX<128>::operator wchar_t *
  0007e	50		 push	 eax
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00085	66 89 85 68 fe
	ff ff		 mov	 WORD PTR _wEncrypPassLen$[ebp], ax

; 411  : 	if (wEncrypPassLen<ENCRYPT_KEY_LEN*8) return false;

  0008c	0f b7 85 68 fe
	ff ff		 movzx	 eax, WORD PTR _wEncrypPassLen$[ebp]
  00093	83 f8 40	 cmp	 eax, 64			; 00000040H
  00096	7d 24		 jge	 SHORT $LN5@XorCrevass
  00098	c6 85 37 fd ff
	ff 00		 mov	 BYTE PTR $T9[ebp], 0
  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a6	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  000ac	e8 00 00 00 00	 call	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
  000b1	8a 85 37 fd ff
	ff		 mov	 al, BYTE PTR $T9[ebp]
  000b7	e9 3f 03 00 00	 jmp	 $LN8@XorCrevass
$LN5@XorCrevass:

; 412  : 
; 413  : 	//提取长度
; 414  : 	WCHAR szTempBuffer[5]=L"";

  000bc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_11LOCGONAA@@
  000c2	66 89 85 5c fe
	ff ff		 mov	 WORD PTR _szTempBuffer$[ebp], ax
  000c9	33 c0		 xor	 eax, eax
  000cb	89 85 5e fe ff
	ff		 mov	 DWORD PTR _szTempBuffer$[ebp+2], eax
  000d1	89 85 62 fe ff
	ff		 mov	 DWORD PTR _szTempBuffer$[ebp+6], eax

; 415  : 	szTempBuffer[CountArray(szTempBuffer)-1]=0;

  000d7	b8 02 00 00 00	 mov	 eax, 2
  000dc	c1 e0 02	 shl	 eax, 2
  000df	89 85 30 fd ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  000e5	83 bd 30 fd ff
	ff 0a		 cmp	 DWORD PTR $T8[ebp], 10	; 0000000aH
  000ec	73 02		 jae	 SHORT $LN9@XorCrevass
  000ee	eb 05		 jmp	 SHORT $LN10@XorCrevass
$LN9@XorCrevass:
  000f0	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN10@XorCrevass:
  000f5	33 c9		 xor	 ecx, ecx
  000f7	8b 95 30 fd ff
	ff		 mov	 edx, DWORD PTR $T8[ebp]
  000fd	66 89 8c 15 5c
	fe ff ff	 mov	 WORD PTR _szTempBuffer$[ebp+edx], cx

; 416  : 	CopyMemory(szTempBuffer,(LPCWSTR)strEncrypData,sizeof(WCHAR)*4);

  00105	6a 08		 push	 8
  00107	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  0010d	e8 00 00 00 00	 call	 ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ; ATL::CA2WEX<128>::operator wchar_t *
  00112	50		 push	 eax
  00113	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _szTempBuffer$[ebp]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 _memcpy
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 417  : 
; 418  : 	//获取长度
; 419  : 	WCHAR * pEnd=NULL;

  00122	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pEnd$[ebp], 0

; 420  : 	WORD wSoureLength=(WORD)wcstol(szTempBuffer,&pEnd,16);

  0012c	6a 10		 push	 16			; 00000010H
  0012e	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _pEnd$[ebp]
  00134	50		 push	 eax
  00135	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _szTempBuffer$[ebp]
  0013b	51		 push	 ecx
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstol
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH
  00145	66 89 85 54 fe
	ff ff		 mov	 WORD PTR _wSoureLength$[ebp], ax

; 421  : 
; 422  : 	//长度效验
; 423  : 	ASSERT(wEncrypPassLen==(((wSoureLength+ENCRYPT_KEY_LEN-1)/ENCRYPT_KEY_LEN)*ENCRYPT_KEY_LEN*8));

  0014c	0f b7 8d 68 fe
	ff ff		 movzx	 ecx, WORD PTR _wEncrypPassLen$[ebp]
  00153	0f b7 85 54 fe
	ff ff		 movzx	 eax, WORD PTR _wSoureLength$[ebp]
  0015a	83 c0 07	 add	 eax, 7
  0015d	99		 cdq
  0015e	83 e2 07	 and	 edx, 7
  00161	03 c2		 add	 eax, edx
  00163	c1 f8 03	 sar	 eax, 3
  00166	c1 e0 03	 shl	 eax, 3
  00169	c1 e0 03	 shl	 eax, 3
  0016c	3b c8		 cmp	 ecx, eax
  0016e	74 19		 je	 SHORT $LN11@XorCrevass
  00170	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA
  00176	83 c2 16	 add	 edx, 22			; 00000016H
  00179	52		 push	 edx
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0017f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00184	85 c0		 test	 eax, eax
  00186	74 01		 je	 SHORT $LN11@XorCrevass
  00188	cc		 int	 3
$LN11@XorCrevass:

; 424  : 	if (wEncrypPassLen!=(((wSoureLength+ENCRYPT_KEY_LEN-1)/ENCRYPT_KEY_LEN)*ENCRYPT_KEY_LEN*8)) return false;

  00189	0f b7 8d 68 fe
	ff ff		 movzx	 ecx, WORD PTR _wEncrypPassLen$[ebp]
  00190	0f b7 85 54 fe
	ff ff		 movzx	 eax, WORD PTR _wSoureLength$[ebp]
  00197	83 c0 07	 add	 eax, 7
  0019a	99		 cdq
  0019b	83 e2 07	 and	 edx, 7
  0019e	03 c2		 add	 eax, edx
  001a0	c1 f8 03	 sar	 eax, 3
  001a3	c1 e0 03	 shl	 eax, 3
  001a6	c1 e0 03	 shl	 eax, 3
  001a9	3b c8		 cmp	 ecx, eax
  001ab	74 24		 je	 SHORT $LN6@XorCrevass
  001ad	c6 85 2f fd ff
	ff 00		 mov	 BYTE PTR $T7[ebp], 0
  001b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001bb	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  001c1	e8 00 00 00 00	 call	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
  001c6	8a 85 2f fd ff
	ff		 mov	 al, BYTE PTR $T7[ebp]
  001cc	e9 2a 02 00 00	 jmp	 $LN8@XorCrevass
$LN6@XorCrevass:

; 425  : 
; 426  : 	//长度效验
; 427  : 	ASSERT((wSoureLength+1)<=wMaxCount);

  001d1	0f b7 85 54 fe
	ff ff		 movzx	 eax, WORD PTR _wSoureLength$[ebp]
  001d8	83 c0 01	 add	 eax, 1
  001db	0f b7 4d 10	 movzx	 ecx, WORD PTR _wMaxCount$[ebp]
  001df	3b c1		 cmp	 eax, ecx
  001e1	7e 19		 jle	 SHORT $LN12@XorCrevass
  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z@4JA
  001e9	83 c2 1a	 add	 edx, 26			; 0000001aH
  001ec	52		 push	 edx
  001ed	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  001f2	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001f7	85 c0		 test	 eax, eax
  001f9	74 01		 je	 SHORT $LN12@XorCrevass
  001fb	cc		 int	 3
$LN12@XorCrevass:

; 428  : 	if ((wSoureLength+1)>wMaxCount) return false;

  001fc	0f b7 85 54 fe
	ff ff		 movzx	 eax, WORD PTR _wSoureLength$[ebp]
  00203	83 c0 01	 add	 eax, 1
  00206	0f b7 4d 10	 movzx	 ecx, WORD PTR _wMaxCount$[ebp]
  0020a	3b c1		 cmp	 eax, ecx
  0020c	7e 24		 jle	 SHORT $LN7@XorCrevass
  0020e	c6 85 2e fd ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0
  00215	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0021c	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  00222	e8 00 00 00 00	 call	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
  00227	8a 85 2e fd ff
	ff		 mov	 al, BYTE PTR $T6[ebp]
  0022d	e9 c9 01 00 00	 jmp	 $LN8@XorCrevass
$LN7@XorCrevass:

; 429  : 
; 430  : 	//解开密码
; 431  : 	for (INT i=0;i<wSoureLength;i++)

  00232	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$13[ebp], 0
  0023c	eb 0f		 jmp	 SHORT $LN4@XorCrevass
$LN2@XorCrevass:
  0023e	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  00244	83 c0 01	 add	 eax, 1
  00247	89 85 50 fe ff
	ff		 mov	 DWORD PTR _i$13[ebp], eax
$LN4@XorCrevass:
  0024d	0f b7 85 54 fe
	ff ff		 movzx	 eax, WORD PTR _wSoureLength$[ebp]
  00254	39 85 50 fe ff
	ff		 cmp	 DWORD PTR _i$13[ebp], eax
  0025a	0f 8d 12 01 00
	00		 jge	 $LN3@XorCrevass

; 432  : 	{
; 433  : 		//获取密钥
; 434  : 		WCHAR szKeyBuffer[5];
; 435  : 		szKeyBuffer[CountArray(szKeyBuffer)-1]=0;

  00260	b8 02 00 00 00	 mov	 eax, 2
  00265	c1 e0 02	 shl	 eax, 2
  00268	89 85 28 fd ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0026e	83 bd 28 fd ff
	ff 0a		 cmp	 DWORD PTR $T5[ebp], 10	; 0000000aH
  00275	73 02		 jae	 SHORT $LN13@XorCrevass
  00277	eb 05		 jmp	 SHORT $LN14@XorCrevass
$LN13@XorCrevass:
  00279	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN14@XorCrevass:
  0027e	33 c9		 xor	 ecx, ecx
  00280	8b 95 28 fd ff
	ff		 mov	 edx, DWORD PTR $T5[ebp]
  00286	66 89 8c 15 44
	fe ff ff	 mov	 WORD PTR _szKeyBuffer$12[ebp+edx], cx

; 436  : 		szTempBuffer[CountArray(szTempBuffer)-1]=0;

  0028e	b8 02 00 00 00	 mov	 eax, 2
  00293	c1 e0 02	 shl	 eax, 2
  00296	89 85 24 fd ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  0029c	83 bd 24 fd ff
	ff 0a		 cmp	 DWORD PTR $T4[ebp], 10	; 0000000aH
  002a3	73 02		 jae	 SHORT $LN15@XorCrevass
  002a5	eb 05		 jmp	 SHORT $LN16@XorCrevass
$LN15@XorCrevass:
  002a7	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN16@XorCrevass:
  002ac	33 c9		 xor	 ecx, ecx
  002ae	8b 95 24 fd ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
  002b4	66 89 8c 15 5c
	fe ff ff	 mov	 WORD PTR _szTempBuffer$[ebp+edx], cx

; 437  : 		CopyMemory(szKeyBuffer,(LPCWSTR)(strEncrypData+i*8),sizeof(WCHAR)*4);

  002bc	6a 08		 push	 8
  002be	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  002c4	e8 00 00 00 00	 call	 ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ; ATL::CA2WEX<128>::operator wchar_t *
  002c9	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _i$13[ebp]
  002cf	c1 e1 03	 shl	 ecx, 3
  002d2	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  002d5	52		 push	 edx
  002d6	8d 85 44 fe ff
	ff		 lea	 eax, DWORD PTR _szKeyBuffer$12[ebp]
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 _memcpy
  002e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 438  : 		CopyMemory(szTempBuffer,(LPCWSTR)strEncrypData+i*8+4,sizeof(WCHAR)*4);

  002e5	6a 08		 push	 8
  002e7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  002ed	e8 00 00 00 00	 call	 ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ; ATL::CA2WEX<128>::operator wchar_t *
  002f2	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _i$13[ebp]
  002f8	c1 e1 03	 shl	 ecx, 3
  002fb	8d 54 48 08	 lea	 edx, DWORD PTR [eax+ecx*2+8]
  002ff	52		 push	 edx
  00300	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _szTempBuffer$[ebp]
  00306	50		 push	 eax
  00307	e8 00 00 00 00	 call	 _memcpy
  0030c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 439  : 
; 440  : 		//提取密钥
; 441  : 		WCHAR wKey=(WCHAR)wcstol(szKeyBuffer,&pEnd,16);

  0030f	6a 10		 push	 16			; 00000010H
  00311	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _pEnd$[ebp]
  00317	50		 push	 eax
  00318	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _szKeyBuffer$12[ebp]
  0031e	51		 push	 ecx
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstol
  00325	83 c4 0c	 add	 esp, 12			; 0000000cH
  00328	66 89 85 40 fe
	ff ff		 mov	 WORD PTR _wKey$11[ebp], ax

; 442  : 		WCHAR wEncrypt=(WCHAR)wcstol(szTempBuffer,&pEnd,16);

  0032f	6a 10		 push	 16			; 00000010H
  00331	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _pEnd$[ebp]
  00337	50		 push	 eax
  00338	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _szTempBuffer$[ebp]
  0033e	51		 push	 ecx
  0033f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcstol
  00345	83 c4 0c	 add	 esp, 12			; 0000000cH
  00348	66 89 85 3c fe
	ff ff		 mov	 WORD PTR _wEncrypt$10[ebp], ax

; 443  : 
; 444  : 		//生成原文
; 445  : 		szSrcData[i]=(WCHAR)((WCHAR)wKey^(WCHAR)wEncrypt);

  0034f	0f b7 85 40 fe
	ff ff		 movzx	 eax, WORD PTR _wKey$11[ebp]
  00356	0f b7 8d 3c fe
	ff ff		 movzx	 ecx, WORD PTR _wEncrypt$10[ebp]
  0035d	33 c1		 xor	 eax, ecx
  0035f	8b 95 50 fe ff
	ff		 mov	 edx, DWORD PTR _i$13[ebp]
  00365	66 89 84 55 6c
	fe ff ff	 mov	 WORD PTR _szSrcData$[ebp+edx*2], ax

; 446  : 	}

  0036d	e9 cc fe ff ff	 jmp	 $LN2@XorCrevass
$LN3@XorCrevass:

; 447  : 
; 448  : 	//终止字符
; 449  : 	szSrcData[wSoureLength]=0;

  00372	0f b7 85 54 fe
	ff ff		 movzx	 eax, WORD PTR _wSoureLength$[ebp]
  00379	d1 e0		 shl	 eax, 1
  0037b	89 85 20 fd ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00381	81 bd 20 fd ff
	ff 80 00 00 00	 cmp	 DWORD PTR $T3[ebp], 128	; 00000080H
  0038b	73 02		 jae	 SHORT $LN17@XorCrevass
  0038d	eb 05		 jmp	 SHORT $LN18@XorCrevass
$LN17@XorCrevass:
  0038f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN18@XorCrevass:
  00394	33 c9		 xor	 ecx, ecx
  00396	8b 95 20 fd ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  0039c	66 89 8c 15 6c
	fe ff ff	 mov	 WORD PTR _szSrcData$[ebp+edx], cx

; 450  : 
; 451  : 	//字符转换
; 452  : 	CW2CT strSrcData(szSrcData);

  003a4	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _szSrcData$[ebp]
  003aa	50		 push	 eax
  003ab	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  003b1	e8 00 00 00 00	 call	 ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ; ATL::CW2AEX<128>::CW2AEX<128>

; 453  : 	lstrcpyn(pszSourceData,strSrcData,wMaxCount);

  003b6	0f b7 45 10	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  003ba	50		 push	 eax
  003bb	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  003c1	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  003c6	50		 push	 eax
  003c7	8b 4d 0c	 mov	 ecx, DWORD PTR _pszSourceData$[ebp]
  003ca	51		 push	 ecx
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 454  : 
; 455  : 	return true;

  003d1	c6 85 1f fd ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  003d8	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  003de	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  003e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003ea	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  003f0	e8 00 00 00 00	 call	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
  003f5	8a 85 1f fd ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN8@XorCrevass:

; 456  : }

  003fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00405	59		 pop	 ecx
  00406	5f		 pop	 edi
  00407	5e		 pop	 esi
  00408	5b		 pop	 ebx
  00409	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0040c	33 cd		 xor	 ecx, ebp
  0040e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00413	8b e5		 mov	 esp, ebp
  00415	5d		 pop	 ebp
  00416	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
__ehhandler$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 18 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-744]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?XorCrevasse@CWHEncrypt@@SA_NPBDPADG@Z ENDP		; CWHEncrypt::XorCrevasse
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z
_TEXT	SEGMENT
$T2 = -1662						; size = 1
$T3 = -1661						; size = 1
_strEncrypData$ = -1468					; size = 132
_i$4 = -1336						; size = 2
_wTimes$ = -1332					; size = 2
_wTempCode$ = -1328					; size = 2
_i$5 = -1324						; size = 2
_wRandKey$ = -1320					; size = 16
_szEncrypData$ = -1304					; size = 1026
_strSrcData$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszSourceData$ = 8					; size = 4
_pszEncrypData$ = 12					; size = 4
_wMaxCount$ = 16					; size = 2
?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z PROC		; CWHEncrypt::XorEncrypt, COMDAT

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 74 06 00
	00		 sub	 esp, 1652		; 00000674H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 367  : 	//变量定义
; 368  : 	CT2CW strSrcData(pszSourceData);

  0002e	8b 45 08	 mov	 eax, DWORD PTR _pszSourceData$[ebp]
  00031	50		 push	 eax
  00032	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$CA2WEX@$0IA@@ATL@@QAE@PBD@Z ; ATL::CA2WEX<128>::CA2WEX<128>
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 369  : 	WCHAR szEncrypData[MAX_ENCRYPT_LEN+1]=L"";

  00044	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_11LOCGONAA@@
  0004a	66 89 85 e8 fa
	ff ff		 mov	 WORD PTR _szEncrypData$[ebp], ax
  00051	68 00 04 00 00	 push	 1024			; 00000400H
  00056	6a 00		 push	 0
  00058	8d 85 ea fa ff
	ff		 lea	 eax, DWORD PTR _szEncrypData$[ebp+2]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _memset
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 370  : 
; 371  : 	//生成密钥
; 372  : 	WORD wRandKey[ENCRYPT_KEY_LEN];
; 373  : 	wRandKey[0]=lstrlenW(strSrcData);

  00067	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  0006d	e8 00 00 00 00	 call	 ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ; ATL::CA2WEX<128>::operator wchar_t *
  00072	50		 push	 eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00079	b9 02 00 00 00	 mov	 ecx, 2
  0007e	6b d1 00	 imul	 edx, ecx, 0
  00081	66 89 84 15 d8
	fa ff ff	 mov	 WORD PTR _wRandKey$[ebp+edx], ax

; 374  : 	for (WORD i=1;i<CountArray(wRandKey);i++) wRandKey[i]=rand()%0xFFFF;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	66 89 85 d4 fa
	ff ff		 mov	 WORD PTR _i$5[ebp], ax
  00095	eb 12		 jmp	 SHORT $LN4@XorEncrypt
$LN2@XorEncrypt:
  00097	66 8b 85 d4 fa
	ff ff		 mov	 ax, WORD PTR _i$5[ebp]
  0009e	66 83 c0 01	 add	 ax, 1
  000a2	66 89 85 d4 fa
	ff ff		 mov	 WORD PTR _i$5[ebp], ax
$LN4@XorEncrypt:
  000a9	0f b7 85 d4 fa
	ff ff		 movzx	 eax, WORD PTR _i$5[ebp]
  000b0	83 f8 08	 cmp	 eax, 8
  000b3	73 1f		 jae	 SHORT $LN3@XorEncrypt
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  000bb	99		 cdq
  000bc	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000c1	f7 f9		 idiv	 ecx
  000c3	0f b7 85 d4 fa
	ff ff		 movzx	 eax, WORD PTR _i$5[ebp]
  000ca	66 89 94 45 d8
	fa ff ff	 mov	 WORD PTR _wRandKey$[ebp+eax*2], dx
  000d2	eb c3		 jmp	 SHORT $LN2@XorEncrypt
$LN3@XorEncrypt:

; 375  : 
; 376  : 	//步骤准备
; 377  : 	WORD wTempCode=0;

  000d4	33 c0		 xor	 eax, eax
  000d6	66 89 85 d0 fa
	ff ff		 mov	 WORD PTR _wTempCode$[ebp], ax

; 378  : 	WORD wTimes=((wRandKey[0]+ENCRYPT_KEY_LEN-1)/ENCRYPT_KEY_LEN)*ENCRYPT_KEY_LEN;

  000dd	b8 02 00 00 00	 mov	 eax, 2
  000e2	6b c8 00	 imul	 ecx, eax, 0
  000e5	0f b7 84 0d d8
	fa ff ff	 movzx	 eax, WORD PTR _wRandKey$[ebp+ecx]
  000ed	83 c0 07	 add	 eax, 7
  000f0	99		 cdq
  000f1	83 e2 07	 and	 edx, 7
  000f4	03 c2		 add	 eax, edx
  000f6	c1 f8 03	 sar	 eax, 3
  000f9	c1 e0 03	 shl	 eax, 3
  000fc	66 89 85 cc fa
	ff ff		 mov	 WORD PTR _wTimes$[ebp], ax

; 379  : 
; 380  : 	//参数效验
; 381  : 	ASSERT((wTimes*8+1)<=wMaxCount);

  00103	0f b7 85 cc fa
	ff ff		 movzx	 eax, WORD PTR _wTimes$[ebp]
  0010a	8d 0c c5 01 00
	00 00		 lea	 ecx, DWORD PTR [eax*8+1]
  00111	0f b7 55 10	 movzx	 edx, WORD PTR _wMaxCount$[ebp]
  00115	3b ca		 cmp	 ecx, edx
  00117	7e 18		 jle	 SHORT $LN12@XorEncrypt
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z@4JA
  0011e	83 c0 0f	 add	 eax, 15			; 0000000fH
  00121	50		 push	 eax
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MHGFBLHL@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00127	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0012c	85 c0		 test	 eax, eax
  0012e	74 01		 je	 SHORT $LN12@XorEncrypt
  00130	cc		 int	 3
$LN12@XorEncrypt:

; 382  : 	if ((wTimes*8+1)>wMaxCount) return false;

  00131	0f b7 85 cc fa
	ff ff		 movzx	 eax, WORD PTR _wTimes$[ebp]
  00138	8d 0c c5 01 00
	00 00		 lea	 ecx, DWORD PTR [eax*8+1]
  0013f	0f b7 55 10	 movzx	 edx, WORD PTR _wMaxCount$[ebp]
  00143	3b ca		 cmp	 ecx, edx
  00145	7e 24		 jle	 SHORT $LN8@XorEncrypt
  00147	c6 85 83 f9 ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  0014e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00155	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  0015b	e8 00 00 00 00	 call	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
  00160	8a 85 83 f9 ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  00166	e9 5f 01 00 00	 jmp	 $LN1@XorEncrypt
$LN8@XorEncrypt:

; 383  : 
; 384  : 	//生成密文
; 385  : 	for (WORD i=0;i<wTimes;i++)

  0016b	33 c0		 xor	 eax, eax
  0016d	66 89 85 c8 fa
	ff ff		 mov	 WORD PTR _i$4[ebp], ax
  00174	eb 12		 jmp	 SHORT $LN7@XorEncrypt
$LN5@XorEncrypt:
  00176	66 8b 85 c8 fa
	ff ff		 mov	 ax, WORD PTR _i$4[ebp]
  0017d	66 83 c0 01	 add	 ax, 1
  00181	66 89 85 c8 fa
	ff ff		 mov	 WORD PTR _i$4[ebp], ax
$LN7@XorEncrypt:
  00188	0f b7 85 c8 fa
	ff ff		 movzx	 eax, WORD PTR _i$4[ebp]
  0018f	0f b7 8d cc fa
	ff ff		 movzx	 ecx, WORD PTR _wTimes$[ebp]
  00196	3b c1		 cmp	 eax, ecx
  00198	0f 8d d5 00 00
	00		 jge	 $LN6@XorEncrypt

; 386  : 	{
; 387  : 		if (i<wRandKey[0]) wTempCode=strSrcData[i]^wRandKey[i%ENCRYPT_KEY_LEN];

  0019e	0f b7 85 c8 fa
	ff ff		 movzx	 eax, WORD PTR _i$4[ebp]
  001a5	b9 02 00 00 00	 mov	 ecx, 2
  001aa	6b d1 00	 imul	 edx, ecx, 0
  001ad	0f b7 8c 15 d8
	fa ff ff	 movzx	 ecx, WORD PTR _wRandKey$[ebp+edx]
  001b5	3b c1		 cmp	 eax, ecx
  001b7	7d 3c		 jge	 SHORT $LN9@XorEncrypt
  001b9	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  001bf	e8 00 00 00 00	 call	 ??B?$CA2WEX@$0IA@@ATL@@QBEPA_WXZ ; ATL::CA2WEX<128>::operator wchar_t *
  001c4	0f b7 8d c8 fa
	ff ff		 movzx	 ecx, WORD PTR _i$4[ebp]
  001cb	0f b7 14 48	 movzx	 edx, WORD PTR [eax+ecx*2]
  001cf	0f b7 85 c8 fa
	ff ff		 movzx	 eax, WORD PTR _i$4[ebp]
  001d6	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  001db	79 05		 jns	 SHORT $LN16@XorEncrypt
  001dd	48		 dec	 eax
  001de	83 c8 f8	 or	 eax, -8			; fffffff8H
  001e1	40		 inc	 eax
$LN16@XorEncrypt:
  001e2	0f b7 8c 45 d8
	fa ff ff	 movzx	 ecx, WORD PTR _wRandKey$[ebp+eax*2]
  001ea	33 d1		 xor	 edx, ecx
  001ec	66 89 95 d0 fa
	ff ff		 mov	 WORD PTR _wTempCode$[ebp], dx
  001f3	eb 35		 jmp	 SHORT $LN10@XorEncrypt
$LN9@XorEncrypt:

; 388  : 		else wTempCode=wRandKey[i%ENCRYPT_KEY_LEN]^(WORD)(rand()%0xFFFF);

  001f5	0f b7 85 c8 fa
	ff ff		 movzx	 eax, WORD PTR _i$4[ebp]
  001fc	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00201	79 05		 jns	 SHORT $LN17@XorEncrypt
  00203	48		 dec	 eax
  00204	83 c8 f8	 or	 eax, -8			; fffffff8H
  00207	40		 inc	 eax
$LN17@XorEncrypt:
  00208	0f b7 b4 45 d8
	fa ff ff	 movzx	 esi, WORD PTR _wRandKey$[ebp+eax*2]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00216	99		 cdq
  00217	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0021c	f7 f9		 idiv	 ecx
  0021e	0f b7 d2	 movzx	 edx, dx
  00221	33 f2		 xor	 esi, edx
  00223	66 89 b5 d0 fa
	ff ff		 mov	 WORD PTR _wTempCode$[ebp], si
$LN10@XorEncrypt:

; 389  : 		swprintf(szEncrypData+i*8,L"%04X%04X",wRandKey[i%ENCRYPT_KEY_LEN],wTempCode);

  0022a	0f b7 85 d0 fa
	ff ff		 movzx	 eax, WORD PTR _wTempCode$[ebp]
  00231	50		 push	 eax
  00232	0f b7 8d c8 fa
	ff ff		 movzx	 ecx, WORD PTR _i$4[ebp]
  00239	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  0023f	79 05		 jns	 SHORT $LN18@XorEncrypt
  00241	49		 dec	 ecx
  00242	83 c9 f8	 or	 ecx, -8			; fffffff8H
  00245	41		 inc	 ecx
$LN18@XorEncrypt:
  00246	0f b7 94 4d d8
	fa ff ff	 movzx	 edx, WORD PTR _wRandKey$[ebp+ecx*2]
  0024e	52		 push	 edx
  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@OFKGLCME@?$AA?$CF?$AA0?$AA4?$AAX?$AA?$CF?$AA0?$AA4?$AAX@
  00254	0f b7 85 c8 fa
	ff ff		 movzx	 eax, WORD PTR _i$4[ebp]
  0025b	c1 e0 03	 shl	 eax, 3
  0025e	8d 8c 45 e8 fa
	ff ff		 lea	 ecx, DWORD PTR _szEncrypData$[ebp+eax*2]
  00265	51		 push	 ecx
  00266	e8 00 00 00 00	 call	 ?swprintf@@YAHQA_WQB_WZZ ; swprintf
  0026b	83 c4 10	 add	 esp, 16			; 00000010H

; 390  : 	}

  0026e	e9 03 ff ff ff	 jmp	 $LN5@XorEncrypt
$LN6@XorEncrypt:

; 391  : 
; 392  : 	//字符转换
; 393  : 	CW2CT strEncrypData(szEncrypData);

  00273	8d 85 e8 fa ff
	ff		 lea	 eax, DWORD PTR _szEncrypData$[ebp]
  00279	50		 push	 eax
  0027a	8d 8d 44 fa ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  00280	e8 00 00 00 00	 call	 ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ; ATL::CW2AEX<128>::CW2AEX<128>

; 394  : 	lstrcpyn(pszEncrypData,strEncrypData,wMaxCount);

  00285	0f b7 45 10	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  00289	50		 push	 eax
  0028a	8d 8d 44 fa ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  00290	e8 00 00 00 00	 call	 ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CW2AEX<128>::operator char *
  00295	50		 push	 eax
  00296	8b 4d 0c	 mov	 ecx, DWORD PTR _pszEncrypData$[ebp]
  00299	51		 push	 ecx
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 395  : 
; 396  : 	return true;

  002a0	c6 85 82 f9 ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  002a7	8d 8d 44 fa ff
	ff		 lea	 ecx, DWORD PTR _strEncrypData$[ebp]
  002ad	e8 00 00 00 00	 call	 ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CW2AEX<128>::~CW2AEX<128>
  002b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b9	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  002bf	e8 00 00 00 00	 call	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
  002c4	8a 85 82 f9 ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@XorEncrypt:

; 397  : }

  002ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d4	59		 pop	 ecx
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	5b		 pop	 ebx
  002d8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002db	33 cd		 xor	 ecx, ebp
  002dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CA2WEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2WEX<128>::~CA2WEX<128>
__ehhandler$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 7c f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1668]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?XorEncrypt@CWHEncrypt@@SA_NPBDPADG@Z ENDP		; CWHEncrypt::XorEncrypt
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z
_TEXT	SEGMENT
$T2 = -257						; size = 1
_i$3 = -192						; size = 4
_strSrcData$ = -188					; size = 4
_szResult$ = -184					; size = 16
_MD5Aide$ = -168					; size = 152
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszSourceData$ = 8					; size = 4
_szMD5Result$ = 12					; size = 4
?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z PROC		; CWHEncrypt::MD5Encrypt, COMDAT

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 348  : 	//变量定义
; 349  : 	CMD5Aide MD5Aide;

  0002e	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _MD5Aide$[ebp]
  00034	e8 00 00 00 00	 call	 ??0CMD5Aide@@QAE@XZ	; CMD5Aide::CMD5Aide

; 350  : 	UCHAR szResult[16];
; 351  : 	CT2CA strSrcData(pszSourceData);

  00039	8b 45 08	 mov	 eax, DWORD PTR _pszSourceData$[ebp]
  0003c	50		 push	 eax
  0003d	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z ; ATL::CA2CAEX<128>::CA2CAEX<128>
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 352  : 
; 353  : 	//加密密文
; 354  : 	MD5Aide.MD5Update((BYTE *)((LPCSTR)strSrcData),lstrlenA(strSrcData)*sizeof(CHAR));

  0004f	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  00055	e8 00 00 00 00	 call	 ??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ ; ATL::CA2CAEX<128>::operator char const *
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00061	50		 push	 eax
  00062	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  00068	e8 00 00 00 00	 call	 ??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ ; ATL::CA2CAEX<128>::operator char const *
  0006d	50		 push	 eax
  0006e	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _MD5Aide$[ebp]
  00074	e8 00 00 00 00	 call	 ?MD5Update@CMD5Aide@@QAEXPAEI@Z ; CMD5Aide::MD5Update

; 355  : 	MD5Aide.MD5Final(szResult);

  00079	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _szResult$[ebp]
  0007f	50		 push	 eax
  00080	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _MD5Aide$[ebp]
  00086	e8 00 00 00 00	 call	 ?MD5Final@CMD5Aide@@QAEXQAE@Z ; CMD5Aide::MD5Final

; 356  : 
; 357  : 	//输出结果
; 358  : 	szMD5Result[0]=0;

  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	6b c8 00	 imul	 ecx, eax, 0
  00093	8b 55 0c	 mov	 edx, DWORD PTR _szMD5Result$[ebp]
  00096	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0

; 359  : 	for (INT i=0;i<16;i++) _stprintf(&szMD5Result[i*2],TEXT("%02X"),szResult[i]);

  0009a	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$3[ebp], 0
  000a4	eb 0f		 jmp	 SHORT $LN4@MD5Encrypt
$LN2@MD5Encrypt:
  000a6	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$3[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	89 85 40 ff ff
	ff		 mov	 DWORD PTR _i$3[ebp], eax
$LN4@MD5Encrypt:
  000b5	83 bd 40 ff ff
	ff 10		 cmp	 DWORD PTR _i$3[ebp], 16	; 00000010H
  000bc	7d 2b		 jge	 SHORT $LN3@MD5Encrypt
  000be	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$3[ebp]
  000c4	0f b6 8c 05 48
	ff ff ff	 movzx	 ecx, BYTE PTR _szResult$[ebp+eax]
  000cc	51		 push	 ecx
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_04JFFKLGJF@?$CF02X@
  000d2	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _i$3[ebp]
  000d8	8b 45 0c	 mov	 eax, DWORD PTR _szMD5Result$[ebp]
  000db	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 _sprintf
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e7	eb bd		 jmp	 SHORT $LN2@MD5Encrypt
$LN3@MD5Encrypt:

; 360  : 
; 361  : 	return true;

  000e9	c6 85 ff fe ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f7	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  000fd	e8 00 00 00 00	 call	 ??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2CAEX<128>::~CA2CAEX<128>
  00102	8a 85 ff fe ff
	ff		 mov	 al, BYTE PTR $T2[ebp]

; 362  : }

  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00119	33 cd		 xor	 ecx, ebp
  0011b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z$0:
  00000	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _strSrcData$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2CAEX<128>::~CA2CAEX<128>
__ehhandler$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MD5Encrypt@CWHEncrypt@@SA_NPBDQAD@Z ENDP		; CWHEncrypt::MD5Encrypt
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ??1CWHEncrypt@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWHEncrypt@@UAE@XZ PROC				; CWHEncrypt::~CWHEncrypt, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHEncrypt@@6B@

; 343  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CWHEncrypt@@UAE@XZ ENDP				; CWHEncrypt::~CWHEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ??0CWHEncrypt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWHEncrypt@@QAE@XZ PROC				; CWHEncrypt::CWHEncrypt, COMDAT
; _this$ = ecx

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CWHEncrypt@@6B@

; 338  : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CWHEncrypt@@QAE@XZ ENDP				; CWHEncrypt::CWHEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z
_TEXT	SEGMENT
tv129 = -84						; size = 4
tv81 = -84						; size = 4
tv65 = -84						; size = 4
_ppReallocBuf$1 = -16					; size = 4
___atl_condVal$2 = -12					; size = 4
___atl_condVal$3 = -8					; size = 4
___atl_condVal$4 = -4					; size = 4
_ppBuff$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pszFixedBuffer$ = 16					; size = 4
_nFixedBufferLength$ = 20				; size = 4
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z PROC	; ATL::AtlConvAllocMemory<char>, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@AtlConvAll:

; 113  : 	ATLENSURE_THROW(ppBuff != NULL, E_INVALIDARG);

  00009	83 7d 08 00	 cmp	 DWORD PTR _ppBuff$[ebp], 0
  0000d	74 09		 je	 SHORT $LN32@AtlConvAll
  0000f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00016	eb 07		 jmp	 SHORT $LN33@AtlConvAll
$LN32@AtlConvAll:
  00018	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN33@AtlConvAll:
  0001f	8b 45 ac	 mov	 eax, DWORD PTR tv65[ebp]
  00022	89 45 fc	 mov	 DWORD PTR ___atl_condVal$4[ebp], eax
$LN7@AtlConvAll:
  00025	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00029	75 24		 jne	 SHORT $LN5@AtlConvAll
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00035	6a 00		 push	 0
  00037	6a 71		 push	 113			; 00000071H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0003e	6a 02		 push	 2
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	83 f8 01	 cmp	 eax, 1
  0004c	75 01		 jne	 SHORT $LN5@AtlConvAll
  0004e	cc		 int	 3
$LN5@AtlConvAll:
  0004f	33 c0		 xor	 eax, eax
  00051	75 d2		 jne	 SHORT $LN7@AtlConvAll
  00053	83 7d fc 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00057	75 0a		 jne	 SHORT $LN2@AtlConvAll
  00059	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0005e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@AtlConvAll:
  00063	33 c0		 xor	 eax, eax
  00065	75 a2		 jne	 SHORT $LN4@AtlConvAll
$LN10@AtlConvAll:

; 114  : 	ATLENSURE_THROW(nLength >= 0, E_INVALIDARG);

  00067	83 7d 0c 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0006b	7c 09		 jl	 SHORT $LN35@AtlConvAll
  0006d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN36@AtlConvAll
$LN35@AtlConvAll:
  00076	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN36@AtlConvAll:
  0007d	8b 45 ac	 mov	 eax, DWORD PTR tv81[ebp]
  00080	89 45 f8	 mov	 DWORD PTR ___atl_condVal$3[ebp], eax
$LN13@AtlConvAll:
  00083	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  00087	75 24		 jne	 SHORT $LN11@AtlConvAll
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00093	6a 00		 push	 0
  00095	6a 72		 push	 114			; 00000072H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0009c	6a 02		 push	 2
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000a4	83 c4 18	 add	 esp, 24			; 00000018H
  000a7	83 f8 01	 cmp	 eax, 1
  000aa	75 01		 jne	 SHORT $LN11@AtlConvAll
  000ac	cc		 int	 3
$LN11@AtlConvAll:
  000ad	33 c0		 xor	 eax, eax
  000af	75 d2		 jne	 SHORT $LN13@AtlConvAll
  000b1	83 7d f8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  000b5	75 0a		 jne	 SHORT $LN8@AtlConvAll
  000b7	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000bc	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@AtlConvAll:
  000c1	33 c0		 xor	 eax, eax
  000c3	75 a2		 jne	 SHORT $LN10@AtlConvAll
$LN16@AtlConvAll:

; 115  : 	ATLENSURE_THROW(pszFixedBuffer != NULL, E_INVALIDARG);

  000c5	83 7d 10 00	 cmp	 DWORD PTR _pszFixedBuffer$[ebp], 0
  000c9	74 09		 je	 SHORT $LN38@AtlConvAll
  000cb	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv129[ebp], 1
  000d2	eb 07		 jmp	 SHORT $LN39@AtlConvAll
$LN38@AtlConvAll:
  000d4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN39@AtlConvAll:
  000db	8b 45 ac	 mov	 eax, DWORD PTR tv129[ebp]
  000de	89 45 f4	 mov	 DWORD PTR ___atl_condVal$2[ebp], eax
$LN19@AtlConvAll:
  000e1	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  000e5	75 24		 jne	 SHORT $LN17@AtlConvAll
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  000f1	6a 00		 push	 0
  000f3	6a 73		 push	 115			; 00000073H
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@PNEKCFJL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000fa	6a 02		 push	 2
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00102	83 c4 18	 add	 esp, 24			; 00000018H
  00105	83 f8 01	 cmp	 eax, 1
  00108	75 01		 jne	 SHORT $LN17@AtlConvAll
  0010a	cc		 int	 3
$LN17@AtlConvAll:
  0010b	33 c0		 xor	 eax, eax
  0010d	75 d2		 jne	 SHORT $LN19@AtlConvAll
  0010f	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  00113	75 0a		 jne	 SHORT $LN14@AtlConvAll
  00115	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0011a	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN14@AtlConvAll:
  0011f	33 c0		 xor	 eax, eax
  00121	75 a2		 jne	 SHORT $LN16@AtlConvAll

; 116  : 
; 117  : 	//if buffer malloced, try to realloc.
; 118  : 	if (*ppBuff != pszFixedBuffer)

  00123	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00126	8b 08		 mov	 ecx, DWORD PTR [eax]
  00128	3b 4d 10	 cmp	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0012b	74 53		 je	 SHORT $LN23@AtlConvAll

; 119  : 	{
; 120  : 		if( nLength > nFixedBufferLength )

  0012d	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00130	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00133	7e 32		 jle	 SHORT $LN25@AtlConvAll

; 121  : 		{
; 122  : 			_CharType* ppReallocBuf = static_cast< _CharType* >( _recalloc(*ppBuff, nLength,sizeof( _CharType ) ) );

  00135	6a 01		 push	 1
  00137	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0013e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00140	52		 push	 edx
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___recalloc
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014a	89 45 f0	 mov	 DWORD PTR _ppReallocBuf$1[ebp], eax

; 123  : 			if (ppReallocBuf == NULL)

  0014d	83 7d f0 00	 cmp	 DWORD PTR _ppReallocBuf$1[ebp], 0
  00151	75 0a		 jne	 SHORT $LN27@AtlConvAll

; 124  : 			{
; 125  : 				AtlThrow( E_OUTOFMEMORY );

  00153	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00158	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN27@AtlConvAll:

; 126  : 			}
; 127  : 			*ppBuff = ppReallocBuf;

  0015d	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00160	8b 4d f0	 mov	 ecx, DWORD PTR _ppReallocBuf$1[ebp]
  00163	89 08		 mov	 DWORD PTR [eax], ecx

; 128  : 		} else

  00165	eb 17		 jmp	 SHORT $LN26@AtlConvAll
$LN25@AtlConvAll:

; 129  : 		{
; 130  : 			free(*ppBuff);

  00167	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	51		 push	 ecx
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00173	83 c4 04	 add	 esp, 4

; 131  : 			*ppBuff=pszFixedBuffer;

  00176	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  00179	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0017c	89 08		 mov	 DWORD PTR [eax], ecx
$LN26@AtlConvAll:

; 132  : 		}
; 133  : 
; 134  : 	} else //Buffer is not currently malloced.

  0017e	eb 26		 jmp	 SHORT $LN24@AtlConvAll
$LN23@AtlConvAll:

; 135  : 	{
; 136  : 		if( nLength > nFixedBufferLength )

  00180	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00183	3b 45 14	 cmp	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00186	7e 16		 jle	 SHORT $LN28@AtlConvAll

; 137  : 		{
; 138  : 			*ppBuff = static_cast< _CharType* >( calloc(nLength,sizeof( _CharType ) ) );

  00188	6a 01		 push	 1
  0018a	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  0018d	50		 push	 eax
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00194	83 c4 08	 add	 esp, 8
  00197	8b 4d 08	 mov	 ecx, DWORD PTR _ppBuff$[ebp]
  0019a	89 01		 mov	 DWORD PTR [ecx], eax

; 139  : 		} else

  0019c	eb 08		 jmp	 SHORT $LN24@AtlConvAll
$LN28@AtlConvAll:

; 140  : 		{
; 141  : 			*ppBuff=pszFixedBuffer;

  0019e	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a1	8b 4d 10	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  001a4	89 08		 mov	 DWORD PTR [eax], ecx
$LN24@AtlConvAll:

; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	if (*ppBuff == NULL)

  001a6	8b 45 08	 mov	 eax, DWORD PTR _ppBuff$[ebp]
  001a9	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ac	75 0a		 jne	 SHORT $LN31@AtlConvAll

; 146  : 	{
; 147  : 		AtlThrow( E_OUTOFMEMORY );

  001ae	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  001b3	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN31@AtlConvAll:

; 148  : 	}
; 149  : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ENDP	; ATL::AtlConvAllocMemory<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z
_TEXT	SEGMENT
_pBuff$ = 8						; size = 4
_pszFixedBuffer$ = 12					; size = 4
_nFixedBufferLength$ = 16				; size = 4
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z PROC		; ATL::AtlConvFreeMemory<char>, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 157  : 	(nFixedBufferLength);
; 158  : 	if( pBuff != pszFixedBuffer )

  00009	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR _pszFixedBuffer$[ebp]
  0000f	74 0f		 je	 SHORT $LN2@AtlConvFre

; 159  : 	{
; 160  : 		free( pBuff );

  00011	8b 45 08	 mov	 eax, DWORD PTR _pBuff$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001b	83 c4 04	 add	 esp, 4

; 161  : 	}
; 162  : #ifdef _DEBUG
; 163  : 	else

  0001e	eb 15		 jmp	 SHORT $LN1@AtlConvFre
$LN2@AtlConvFre:

; 164  : 	{
; 165  : 		memset(pszFixedBuffer,ATLCONV_DEADLAND_FILL,nFixedBufferLength*sizeof(_CharType));

  00020	8b 45 10	 mov	 eax, DWORD PTR _nFixedBufferLength$[ebp]
  00023	50		 push	 eax
  00024	68 fe 00 00 00	 push	 254			; 000000feH
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFixedBuffer$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@AtlConvFre:

; 166  : 	}
; 167  : #endif
; 168  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ENDP		; ATL::AtlConvFreeMemory<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z
_TEXT	SEGMENT
tv149 = -84						; size = 4
tv87 = -84						; size = 4
_bFailed$ = -16						; size = 4
_nLengthA$ = -12					; size = 4
_nLengthW$ = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
_nConvertCodePage$ = 12					; size = 4
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z PROC		; ATL::CW2AEX<128>::Init, COMDAT
; _this$ = ecx

; 439  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 440  : 		if (psz == NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00010	75 0e		 jne	 SHORT $LN2@Init

; 441  : 		{
; 442  : 			m_psz = NULL;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 443  : 			return;

  0001b	e9 25 01 00 00	 jmp	 $LN6@Init
$LN2@Init:

; 444  : 		}
; 445  : 		int nLengthW = static_cast<int>(wcslen( psz ))+1;

  00020	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0002a	83 c4 04	 add	 esp, 4
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 f8	 mov	 DWORD PTR _nLengthW$[ebp], eax

; 446  : 		int nLengthA = nLengthW*4;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  00036	c1 e0 02	 shl	 eax, 2
  00039	89 45 f4	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 447  : 
; 448  : 		AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  0003c	68 80 00 00 00	 push	 128			; 00000080H
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 c0 04	 add	 eax, 4
  00047	50		 push	 eax
  00048	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthA$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 449  : 
; 450  : 		BOOL bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	52		 push	 edx
  00066	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0006d	51		 push	 ecx
  0006e	6a 00		 push	 0
  00070	8b 55 0c	 mov	 edx, DWORD PTR _nConvertCodePage$[ebp]
  00073	52		 push	 edx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0007a	85 c0		 test	 eax, eax
  0007c	75 09		 jne	 SHORT $LN7@Init
  0007e	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  00085	eb 07		 jmp	 SHORT $LN8@Init
$LN7@Init:
  00087	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN8@Init:
  0008e	8b 45 ac	 mov	 eax, DWORD PTR tv87[ebp]
  00091	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax

; 451  : 		if (bFailed)

  00094	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00098	0f 84 82 00 00
	00		 je	 $LN3@Init

; 452  : 		{
; 453  : 			if (GetLastError()==ERROR_INSUFFICIENT_BUFFER)

  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000a4	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  000a7	75 77		 jne	 SHORT $LN3@Init

; 454  : 			{
; 455  : 				nLengthA = ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, NULL, 0, NULL, NULL );

  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	6a 00		 push	 0
  000af	6a 00		 push	 0
  000b1	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000b8	51		 push	 ecx
  000b9	6a 00		 push	 0
  000bb	8b 55 0c	 mov	 edx, DWORD PTR _nConvertCodePage$[ebp]
  000be	52		 push	 edx
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000c5	89 45 f4	 mov	 DWORD PTR _nLengthA$[ebp], eax

; 456  : ATLPREFAST_SUPPRESS(6102)
; 457  :                 AtlConvAllocMemory(&m_psz,nLengthA,m_szBuffer,t_nBufferLength);

  000c8	68 80 00 00 00	 push	 128			; 00000080H
  000cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	83 c0 04	 add	 eax, 4
  000d3	50		 push	 eax
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR _nLengthA$[ebp]
  000d7	51		 push	 ecx
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 ??$AtlConvAllocMemory@D@ATL@@YAXPAPADHPADH@Z ; ATL::AtlConvAllocMemory<char>
  000e1	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : ATLPREFAST_UNSUPPRESS()
; 459  : 				bFailed=(0 == ::WideCharToMultiByte( nConvertCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ));

  000e4	6a 00		 push	 0
  000e6	6a 00		 push	 0
  000e8	8b 45 f4	 mov	 eax, DWORD PTR _nLengthA$[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f1	52		 push	 edx
  000f2	8b 45 f8	 mov	 eax, DWORD PTR _nLengthW$[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000f9	51		 push	 ecx
  000fa	6a 00		 push	 0
  000fc	8b 55 0c	 mov	 edx, DWORD PTR _nConvertCodePage$[ebp]
  000ff	52		 push	 edx
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  00106	85 c0		 test	 eax, eax
  00108	75 09		 jne	 SHORT $LN9@Init
  0010a	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv149[ebp], 1
  00111	eb 07		 jmp	 SHORT $LN10@Init
$LN9@Init:
  00113	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN10@Init:
  0011a	8b 45 ac	 mov	 eax, DWORD PTR tv149[ebp]
  0011d	89 45 f0	 mov	 DWORD PTR _bFailed$[ebp], eax
$LN3@Init:

; 460  : 			}
; 461  : 		}
; 462  : 		if (bFailed)

  00120	83 7d f0 00	 cmp	 DWORD PTR _bFailed$[ebp], 0
  00124	74 1f		 je	 SHORT $LN6@Init

; 463  : 		{
; 464  : 			AtlConvFreeMemory(m_psz, m_szBuffer, t_nBufferLength);

  00126	68 80 00 00 00	 push	 128			; 00000080H
  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	83 c0 04	 add	 eax, 4
  00131	50		 push	 eax
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	8b 11		 mov	 edx, DWORD PTR [ecx]
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ; ATL::AtlConvFreeMemory<char>
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  : 			AtlThrowLastWin32();

  00140	e8 00 00 00 00	 call	 ?AtlThrowLastWin32@ATL@@YGXXZ ; ATL::AtlThrowLastWin32
$LN6@Init:

; 466  : 		}
; 467  : 	}

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ENDP		; ATL::CW2AEX<128>::Init
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ PROC			; ATL::CW2AEX<128>::operator char *, COMDAT
; _this$ = ecx

; 431  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 432  : 		return( m_psz );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 433  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ENDP			; ATL::CW2AEX<128>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CW2AEX<128>::~CW2AEX<128>, COMDAT
; _this$ = ecx

; 426  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 427  : 		AtlConvFreeMemory(m_psz,m_szBuffer,t_nBufferLength);

  0000c	68 80 00 00 00	 push	 128			; 00000080H
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$AtlConvFreeMemory@D@ATL@@YAXPAD0H@Z ; ATL::AtlConvFreeMemory<char>
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 428  : 	}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CW2AEX<128>::~CW2AEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z PROC			; ATL::CW2AEX<128>::CW2AEX<128>, COMDAT
; _this$ = ecx

; 415  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 		m_psz( m_szBuffer )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 416  : 		Init( psz, _AtlGetConversionACP() );

  00017	e8 00 00 00 00	 call	 ?_AtlGetConversionACP@ATL@@YGIXZ ; ATL::_AtlGetConversionACP
  0001c	50		 push	 eax
  0001d	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPB_WI@Z ; ATL::CW2AEX<128>::Init

; 417  : 	}

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PB_W@Z ENDP			; ATL::CW2AEX<128>::CW2AEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
_TEXT	SEGMENT
_ptr$ = -20						; size = 4
_ple$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 421  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 422  : 		CPreserveLastError ple;

  00028	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::CPreserveLastError
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 423  : 		va_list ptr; va_start(ptr, pszFmt);

  00037	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0003a	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax

; 424  : 		ATL::CTrace::TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  0003d	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 14	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 10	 mov	 edx, DWORD PTR _nLevel$[ebp]
  00048	52		 push	 edx
  00049	8b 45 0c	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ; ATL::CTrace::TraceV
  0005f	83 c4 18	 add	 esp, 24			; 00000018H

; 425  : 		va_end(ptr);

  00062	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 426  : 	}

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00073	e8 00 00 00 00	 call	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
__ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 411  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 		: m_pszFileName(pszFileName), m_nLineNo(nLineNo)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _nLineNo$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 412  : 	}

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??1CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::~CPreserveLastError, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 		SetLastError(m_dwLastError);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 398  : 	}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??1CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::~CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::CPreserveLastError, COMDAT
; _this$ = ecx

; 390  : 	CPreserveLastError()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	{
; 392  : 		m_dwLastError = GetLastError();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 01		 push	 1
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 02		 push	 2
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 330  : 		if (pszCategory == nullptr)

  00016	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0001c	e9 a9 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00021	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00028	72 2d		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0002a	33 c0		 xor	 eax, eax
  0002c	75 27		 jne	 SHORT $LN5@RegisterCa
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 51 01 00 00	 push	 337			; 00000151H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 01		 jne	 SHORT $LN5@RegisterCa
  00054	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  00055	eb 73		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00057	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  00064	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	6a 00		 push	 0
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  00080	8b 45 08	 mov	 eax, DWORD PTR _pszCategory$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  00089	6a 7f		 push	 127			; 0000007fH
  0008b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _swprintf_s
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 7f		 push	 127			; 0000007fH
  000a3	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000ad	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000b3	51		 push	 ecx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000c2	83 c0 01	 add	 eax, 1
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
_TEXT	SEGMENT
_wszBuf$ = -24						; size = 4
_szBuf$ = -20						; size = 4
_cchNeeded$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pszFmt$ = 24						; size = 4
_args$ = 28						; size = 4
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 239  : 		int cchNeeded = _vscprintf(pszFmt, args);

  00028	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 __vscprintf
  00035	83 c4 08	 add	 esp, 8
  00038	89 45 f0	 mov	 DWORD PTR _cchNeeded$[ebp], eax

; 240  : 		if (cchNeeded < 0)

  0003b	83 7d f0 00	 cmp	 DWORD PTR _cchNeeded$[ebp], 0
  0003f	7d 05		 jge	 SHORT $LN2@TraceV

; 241  : 		{
; 242  : 			return;

  00041	e9 64 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 243  : 		}
; 244  : 
; 245  : 		CHeapPtr<char> szBuf;

  00046	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00049	e8 00 00 00 00	 call	 ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 246  : 		if (!szBuf.Allocate(cchNeeded + 1))

  00055	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	50		 push	 eax
  0005c	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0005f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	75 14		 jne	 SHORT $LN3@TraceV

; 247  : 		{
; 248  : 			return;

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00075	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0007a	e9 2b 01 00 00	 jmp	 $LN1@TraceV
$LN3@TraceV:

; 249  : 		}
; 250  : 
; 251  : 		szBuf[0] = '\0';

  0007f	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00082	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	6b d1 00	 imul	 edx, ecx, 0
  0008f	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 252  : 
; 253  : 		if (_vsnprintf_s(szBuf, cchNeeded + 1, cchNeeded, pszFmt, args) == -1)

  00093	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 f0	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	50		 push	 eax
  000a6	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000a9	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 __vsnprintf_s
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
  000b7	83 f8 ff	 cmp	 eax, -1
  000ba	75 14		 jne	 SHORT $LN4@TraceV

; 254  : 		{
; 255  : 			return;

  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000cb	e9 da 00 00 00	 jmp	 $LN1@TraceV
$LN4@TraceV:

; 256  : 		}
; 257  : 
; 258  : 		CHeapPtr<wchar_t> wszBuf;

  000d0	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000d3	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 259  : 		if (!wszBuf.Allocate(cchNeeded + 1))

  000dc	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000df	83 c0 01	 add	 eax, 1
  000e2	50		 push	 eax
  000e3	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000e6	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  000eb	0f b6 c8	 movzx	 ecx, al
  000ee	85 c9		 test	 ecx, ecx
  000f0	75 20		 jne	 SHORT $LN5@TraceV

; 260  : 		{
; 261  : 			return;

  000f2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f6	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000f9	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00105	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00108	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0010d	e9 98 00 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 262  : 		}
; 263  : 
; 264  : 		wszBuf[0] = '\0';

  00112	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00115	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  0011a	b9 02 00 00 00	 mov	 ecx, 2
  0011f	6b d1 00	 imul	 edx, ecx, 0
  00122	33 c9		 xor	 ecx, ecx
  00124	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 265  : 
; 266  : 		if (::MultiByteToWideChar(CP_ACP, 0, szBuf, -1, wszBuf, cchNeeded + 1) == 0)

  00128	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  0012b	83 c0 01	 add	 eax, 1
  0012e	50		 push	 eax
  0012f	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00132	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00137	50		 push	 eax
  00138	6a ff		 push	 -1
  0013a	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0013d	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00142	50		 push	 eax
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0014d	85 c0		 test	 eax, eax
  0014f	75 1d		 jne	 SHORT $LN6@TraceV

; 267  : 		{
; 268  : 			return;

  00151	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00155	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00158	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0015d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00164	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00167	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0016c	eb 3c		 jmp	 SHORT $LN1@TraceV
$LN6@TraceV:

; 269  : 		}
; 270  : 
; 271  : 		TraceV(pszFileName, nLine, dwCategory, nLevel, wszBuf);

  0016e	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00171	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00176	50		 push	 eax
  00177	8b 45 14	 mov	 eax, DWORD PTR _nLevel$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d 10	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  0017e	51		 push	 ecx
  0017f	8b 55 0c	 mov	 edx, DWORD PTR _nLine$[ebp]
  00182	52		 push	 edx
  00183	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ; ATL::CTrace::TraceV
  0018c	83 c4 14	 add	 esp, 20			; 00000014H

; 272  : 	}

  0018f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00193	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00196	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0019b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a2	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  001a5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b4	59		 pop	 ecx
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	5b		 pop	 ebx
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z
_TEXT	SEGMENT
_fileName$ = -2588					; size = 520
_wszBuf$ = -2068					; size = 4
_chCount$ = -2064					; size = 4
_pwszCategoryName$ = -2060				; size = 4
_categoryLength$ = -2056				; size = 4
_wszCategory$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszMessage$ = 24					; size = 4
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 150  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 0b 00
	00		 sub	 esp, 2972		; 00000b9cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 151  : 		if (CTrace::m_nLevel == CTrace::DisableTracing || CTrace::m_nLevel < nLevel || (CTrace::m_nCategory & dwCategory) == 0)

  00016	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_nLevel@CTrace@ATL@@1IA, -1 ; ATL::CTrace::m_nLevel
  0001d	74 14		 je	 SHORT $LN3@TraceV
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLevel@CTrace@ATL@@1IA ; ATL::CTrace::m_nLevel
  00024	3b 45 14	 cmp	 eax, DWORD PTR _nLevel$[ebp]
  00027	72 0a		 jb	 SHORT $LN3@TraceV
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nCategory
  0002e	23 45 10	 and	 eax, DWORD PTR _dwCategory$[ebp]
  00031	75 05		 jne	 SHORT $LN2@TraceV
$LN3@TraceV:

; 152  : 		{
; 153  : 			return;

  00033	e9 c2 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 154  : 		}
; 155  : 
; 156  : 		wchar_t wszCategory[TraceBufferSize] = {'\0'};

  00038	68 00 08 00 00	 push	 2048			; 00000800H
  0003d	6a 00		 push	 0
  0003f	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		int categoryLength = 0;

  0004e	c7 85 f8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _categoryLength$[ebp], 0

; 158  : 		const wchar_t *const pwszCategoryName = GetCategoryName(dwCategory);

  00058	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ; ATL::CTrace::GetCategoryName
  00061	83 c4 04	 add	 esp, 4
  00064	89 85 f4 f7 ff
	ff		 mov	 DWORD PTR _pwszCategoryName$[ebp], eax

; 159  : 		if (pwszCategoryName != nullptr)

  0006a	83 bd f4 f7 ff
	ff 00		 cmp	 DWORD PTR _pwszCategoryName$[ebp], 0
  00071	74 36		 je	 SHORT $LN4@TraceV

; 160  : 		{
; 161  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%ls - ", pwszCategoryName)) == -1)

  00073	8b 85 f4 f7 ff
	ff		 mov	 eax, DWORD PTR _pwszCategoryName$[ebp]
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
  0007f	68 00 04 00 00	 push	 1024			; 00000400H
  00084	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _swprintf_s
  00090	83 c4 10	 add	 esp, 16			; 00000010H
  00093	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  00099	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000a0	75 05		 jne	 SHORT $LN6@TraceV

; 162  : 			{
; 163  : 				return;

  000a2	e9 53 01 00 00	 jmp	 $LN1@TraceV
$LN6@TraceV:

; 164  : 			}
; 165  : 		}
; 166  : 		else

  000a7	eb 31		 jmp	 SHORT $LN5@TraceV
$LN4@TraceV:

; 167  : 		{
; 168  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%u - ", dwCategory)) == -1)

  000a9	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
  000b2	68 00 04 00 00	 push	 1024			; 00000400H
  000b7	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _swprintf_s
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000cc	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000d3	75 05		 jne	 SHORT $LN5@TraceV

; 169  : 			{
; 170  : 				return;

  000d5	e9 20 01 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 171  : 			}
; 172  : 		}
; 173  : 
; 174  : 		int chCount = (int)wcslen(pwszMessage) + categoryLength + 1;

  000da	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  000dd	50		 push	 eax
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  000e4	83 c4 04	 add	 esp, 4
  000e7	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _categoryLength$[ebp]
  000ed	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  000f1	89 95 f0 f7 ff
	ff		 mov	 DWORD PTR _chCount$[ebp], edx

; 175  : 		CHeapPtr<wchar_t> wszBuf;

  000f7	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000fd	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 176  : 		if (!wszBuf.Allocate(chCount))

  00102	8b 85 f0 f7 ff
	ff		 mov	 eax, DWORD PTR _chCount$[ebp]
  00108	50		 push	 eax
  00109	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0010f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00114	0f b6 c8	 movzx	 ecx, al
  00117	85 c9		 test	 ecx, ecx
  00119	75 10		 jne	 SHORT $LN8@TraceV

; 177  : 		{
; 178  : 			return;

  0011b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00121	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00126	e9 cf 00 00 00	 jmp	 $LN1@TraceV
$LN8@TraceV:

; 179  : 		}
; 180  : 
; 181  : 		wszBuf[0] = '\0';

  0012b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00131	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00136	b9 02 00 00 00	 mov	 ecx, 2
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	33 c9		 xor	 ecx, ecx
  00140	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 182  : 
; 183  : 		if (swprintf_s(wszBuf, chCount, L"%ls%ls", wszCategory, pwszMessage) == -1)

  00144	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  00147	50		 push	 eax
  00148	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0014e	51		 push	 ecx
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
  00154	8b 95 f0 f7 ff
	ff		 mov	 edx, DWORD PTR _chCount$[ebp]
  0015a	52		 push	 edx
  0015b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00161	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _swprintf_s
  0016c	83 c4 14	 add	 esp, 20			; 00000014H
  0016f	83 f8 ff	 cmp	 eax, -1
  00172	75 0d		 jne	 SHORT $LN9@TraceV

; 184  : 		{
; 185  : 			return;

  00174	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0017a	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0017f	eb 79		 jmp	 SHORT $LN1@TraceV
$LN9@TraceV:

; 186  : 		}
; 187  : 
; 188  : 		wchar_t fileName[_MAX_PATH] = {'\0'};	

  00181	68 08 02 00 00	 push	 520			; 00000208H
  00186	6a 00		 push	 0
  00188	8d 85 e4 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _memset
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : #if _MSC_VER < 1900
; 190  : 		if (swprintf_s(fileName, _MAX_PATH, L"%S", pszFileName) == -1)
; 191  : #else
; 192  : 		if (swprintf_s(fileName, _MAX_PATH, L"%hs", pszFileName) == -1)

  00197	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  001a0	68 04 01 00 00	 push	 260			; 00000104H
  001a5	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _swprintf_s
  001b1	83 c4 10	 add	 esp, 16			; 00000010H
  001b4	83 f8 ff	 cmp	 eax, -1
  001b7	75 0d		 jne	 SHORT $LN10@TraceV

; 193  : #endif
; 194  : 		{
; 195  : 			return;

  001b9	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001bf	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001c4	eb 34		 jmp	 SHORT $LN1@TraceV
$LN10@TraceV:

; 196  : 		}
; 197  : 
; 198  : 		_CrtDbgReportW(_CRT_WARN, fileName, nLine, nullptr, L"%ls", static_cast<const wchar_t*>(wszBuf));

  001c6	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001cc	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  001d1	50		 push	 eax
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001d7	6a 00		 push	 0
  001d9	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  001dc	50		 push	 eax
  001dd	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001e3	51		 push	 ecx
  001e4	6a 00		 push	 0
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  001ec	83 c4 18	 add	 esp, 24			; 00000018H

; 199  : 	}

  001ef	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001f5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001fa	5f		 pop	 edi
  001fb	5e		 pop	 esi
  001fc	5b		 pop	 ebx
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_nCategory$ = 8						; size = 4
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z PROC		; ATL::CTrace::GetCategoryName, COMDAT

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 133  : 		for(unsigned int i = 0; i < m_nLastCategory; i++) 

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@GetCategor
$LN2@GetCategor:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetCategor:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00024	73 22		 jae	 SHORT $LN3@GetCategor

; 134  : 		{
; 135  : 			if (m_nMap[i].nCategory == nCategory)

  00026	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0002d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax]
  00033	3b 4d 08	 cmp	 ecx, DWORD PTR _nCategory$[ebp]
  00036	75 0e		 jne	 SHORT $LN5@GetCategor

; 136  : 			{
; 137  : 				return m_nMap[i].categryName;

  00038	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0003f	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00044	eb 04		 jmp	 SHORT $LN1@GetCategor
$LN5@GetCategor:

; 138  : 			}
; 139  : 		}

  00046	eb ca		 jmp	 SHORT $LN2@GetCategor
$LN3@GetCategor:

; 140  : 
; 141  : 		return nullptr;

  00048	33 c0		 xor	 eax, eax
$LN1@GetCategor:

; 142  : 	}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ENDP		; ATL::CTrace::GetCategoryName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMFNIFA@atlTraceException@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000c	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 20 00 00	 push	 8192			; 00002000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC			; ATL::_AtlGetConversionACP, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 99   : #ifdef _CONVERSION_DONT_USE_THREAD_LOCALE
; 100  : 	return CP_ACP;
; 101  : #else
; 102  : 	return CP_THREAD_ACP;

  00009	b8 03 00 00 00	 mov	 eax, 3

; 103  : #endif
; 104  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 		free(p);

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00013	83 c4 04	 add	 esp, 4

; 268  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 261  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 262  : 		return malloc(nBytes);

  00009	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00013	83 c4 04	 add	 esp, 4

; 263  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_i64Result$ = -8					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  0000c	f7 65 10	 mul	 DWORD PTR _iRight$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _i64Result$[ebp], eax
  00012	89 55 fc	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 137  : 	if(i64Result>UINT_MAX)

  00015	83 7d fc 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00019	77 06		 ja	 SHORT $LN4@AtlMultipl
  0001b	83 7d f8 ff	 cmp	 DWORD PTR _i64Result$[ebp], -1
  0001f	76 0f		 jbe	 SHORT $LN2@AtlMultipl
$LN4@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  00021	68 16 02 00 00	 push	 534			; 00000216H
  00026	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  0002b	83 c4 04	 add	 esp, 4
  0002e	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _i64Result$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _piResult$[ebp]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 142  : 	return S_OK;

  00038	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 143  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT
_dwError$ = -4						; size = 4
?AtlThrowLastWin32@ATL@@YGXXZ PROC			; ATL::AtlThrowLastWin32, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 85   : 	DWORD dwError = ::GetLastError();

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0000f	89 45 fc	 mov	 DWORD PTR _dwError$[ebp], eax

; 86   : 	AtlThrow( HRESULT_FROM_WIN32( dwError ) );

  00012	8b 45 fc	 mov	 eax, DWORD PTR _dwError$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@AtlThrowLa:

; 87   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?AtlThrowLastWin32@ATL@@YGXXZ ENDP			; ATL::AtlThrowLastWin32
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T1 = -72						; size = 8
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00009	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
  00012	6a 00		 push	 0
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00019	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
  0001e	50		 push	 eax
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
  00025	83 c1 01	 add	 ecx, 1
  00028	51		 push	 ecx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002e	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  00031	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  0003c	83 c4 14	 add	 esp, 20			; 00000014H

; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  0003f	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00046	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00048	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  0004d	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1675 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 __vscprintf_l
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1658 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1659 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	83 c9 02	 or	 ecx, 2
  00023	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00026	52		 push	 edx
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0002e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00031	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;

  00034	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00038	7d 09		 jge	 SHORT $LN3@vscprintf_
  0003a	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00041	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00043	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00046	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  00049	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1664 :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1605 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __vsnprintf_s_l
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 1607 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1584 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1585 :         int const _Result = __stdio_common_vsnprintf_s(

  00009	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00033	83 c4 20	 add	 esp, 32			; 00000020H
  00036	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;

  00039	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003d	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003f	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00046	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00048	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004b	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004e	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1590 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT ?swprintf@@YAHQA_WQB_WZZ
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
?swprintf@@YAHQA_WQB_WZZ PROC				; swprintf, COMDAT

; 1826 :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1827 :                 int _Result;
; 1828 :                 va_list _ArgList;
; 1829 :                 __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1830 :                 #pragma warning(suppress: 28719)
; 1831 :                 _Result = vswprintf(_Buffer, _CRT_INT_MAX, _Format, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0001c	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 _vswprintf
  00025	83 c4 10	 add	 esp, 16			; 00000010H
  00028	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1832 :                 __crt_va_end(_ArgList);

  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1833 :                 return _Result;

  00032	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1834 :             }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?swprintf@@YAHQA_WQB_WZZ ENDP				; swprintf
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1538 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1539 :             int _Result;
; 1540 :             va_list _ArgList;
; 1541 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1542 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vswprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1543 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1544 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1545 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _vswprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vswprintf PROC						; COMDAT

; 1247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1248 :         return _vswprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vswprintf_c_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1249 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_vswprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_c_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_c_l PROC					; COMDAT

; 1160 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1161 :         int const _Result = __stdio_common_vswprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1162 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1163 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1164 : 
; 1165 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1166 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_c_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = -68						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 28640: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	7f 08		 jg	 SHORT $LN3@HRESULT_FR
  0000f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00012	89 45 bc	 mov	 DWORD PTR tv68[ebp], eax
  00015	eb 18		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00020	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00026	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0002c	89 4d bc	 mov	 DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv68[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\服务核心\whencrypt.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
