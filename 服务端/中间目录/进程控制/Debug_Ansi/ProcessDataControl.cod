; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\进程控制\ProcessDataControl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_IIPCRecvDataSink@@3U_GUID@@B DD 0e1b2bbd0H		; IID_IIPCRecvDataSink
	DW	0f92eH
	DW	04898H
	DB	089H
	DB	0dbH
	DB	072H
	DB	0ddH
	DB	0c2H
	DB	08cH
	DB	070H
	DB	070H
?IID_IProcessControl@@3U_GUID@@B DD 071733503H		; IID_IProcessControl
	DW	09d41H
	DW	0429eH
	DB	08aH
	DB	0f0H
	DB	078H
	DB	040H
	DB	061H
	DB	086H
	DB	01H
	DB	0beH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	_wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?Release@CProcessControl@@UAEXXZ		; CProcessControl::Release
PUBLIC	??0CProcessSendData@@QAE@PAUHWND__@@0@Z		; CProcessSendData::CProcessSendData
PUBLIC	??1CProcessSendData@@UAE@XZ			; CProcessSendData::~CProcessSendData
PUBLIC	?IsConnect@CProcessSendData@@QAE_NXZ		; CProcessSendData::IsConnect
PUBLIC	?GetClientHwnd@CProcessSendData@@QAEPAUHWND__@@XZ ; CProcessSendData::GetClientHwnd
PUBLIC	?GetServerHwnd@CProcessSendData@@QAEPAUHWND__@@XZ ; CProcessSendData::GetServerHwnd
PUBLIC	?SetClientHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z ; CProcessSendData::SetClientHwnd
PUBLIC	?SetServerHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z ; CProcessSendData::SetServerHwnd
PUBLIC	?SetServerHwnd@CProcessSendData@@QAE_NPBD@Z	; CProcessSendData::SetServerHwnd
PUBLIC	?SendData@CProcessSendData@@QAE_NGG@Z		; CProcessSendData::SendData
PUBLIC	?SendData@CProcessSendData@@QAE_NGGPAXG@Z	; CProcessSendData::SendData
PUBLIC	?TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z ; CProcessSendData::TransferCommand
PUBLIC	??0CProcessSendData@@QAE@ABV0@@Z		; CProcessSendData::CProcessSendData
PUBLIC	??4CProcessSendData@@QAEAAV0@ABV0@@Z		; CProcessSendData::operator=
PUBLIC	??_FCProcessSendData@@QAEXXZ			; CProcessSendData::`default constructor closure'
PUBLIC	??_GCProcessSendData@@UAEPAXI@Z			; CProcessSendData::`scalar deleting destructor'
PUBLIC	??_ECProcessSendData@@UAEPAXI@Z			; CProcessSendData::`vector deleting destructor'
PUBLIC	??0CProcessRecvData@@QAE@XZ			; CProcessRecvData::CProcessRecvData
PUBLIC	??1CProcessRecvData@@UAE@XZ			; CProcessRecvData::~CProcessRecvData
PUBLIC	?SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z ; CProcessRecvData::SetProcessTradeSink
PUBLIC	?OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z ; CProcessRecvData::OnCopyData
PUBLIC	??0CProcessRecvData@@QAE@ABV0@@Z		; CProcessRecvData::CProcessRecvData
PUBLIC	??4CProcessRecvData@@QAEAAV0@ABV0@@Z		; CProcessRecvData::operator=
PUBLIC	??_GCProcessRecvData@@UAEPAXI@Z			; CProcessRecvData::`scalar deleting destructor'
PUBLIC	??_ECProcessRecvData@@UAEPAXI@Z			; CProcessRecvData::`vector deleting destructor'
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7CProcessSendData@@6B@			; CProcessSendData::`vftable'
PUBLIC	??_7CProcessRecvData@@6B@			; CProcessRecvData::`vftable'
PUBLIC	?__LINE__Var@?0??SetServerHwnd@CProcessSendData@@QAE_NPBD@Z@4JA ; `CProcessSendData::SetServerHwnd'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGG@Z@4JA ; `CProcessSendData::SendData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGGPAXG@Z@4JA ; `CProcessSendData::SendData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z@4JA ; `CProcessSendData::TransferCommand'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z@4JA ; `CProcessRecvData::SetProcessTradeSink'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z@4JA ; `CProcessRecvData::OnCopyData'::`1'::__LINE__Var
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4CProcessSendData@@6B@			; CProcessSendData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProcessSendData@@@8			; CProcessSendData `RTTI Type Descriptor'
PUBLIC	??_R3CProcessSendData@@8			; CProcessSendData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProcessSendData@@8			; CProcessSendData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProcessSendData@@8		; CProcessSendData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CProcessRecvData@@6B@			; CProcessRecvData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProcessRecvData@@@8			; CProcessRecvData `RTTI Type Descriptor'
PUBLIC	??_R3CProcessRecvData@@8			; CProcessRecvData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProcessRecvData@@8			; CProcessRecvData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProcessRecvData@@8		; CProcessRecvData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	__imp__FindWindowA@8:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CProcessRecvData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProcessRecvData@@8 DD FLAT:??_R0?AVCProcessRecvData@@@8 ; CProcessRecvData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProcessRecvData@@8
rdata$r	ENDS
;	COMDAT ??_R2CProcessRecvData@@8
rdata$r	SEGMENT
??_R2CProcessRecvData@@8 DD FLAT:??_R1A@?0A@EA@CProcessRecvData@@8 ; CProcessRecvData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CProcessRecvData@@8
rdata$r	SEGMENT
??_R3CProcessRecvData@@8 DD 00H				; CProcessRecvData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CProcessRecvData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProcessRecvData@@@8
data$r	SEGMENT
??_R0?AVCProcessRecvData@@@8 DD FLAT:??_7type_info@@6B@	; CProcessRecvData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProcessRecvData@@', 00H
data$r	ENDS
;	COMDAT ??_R4CProcessRecvData@@6B@
rdata$r	SEGMENT
??_R4CProcessRecvData@@6B@ DD 00H			; CProcessRecvData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProcessRecvData@@@8
	DD	FLAT:??_R3CProcessRecvData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CProcessSendData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProcessSendData@@8 DD FLAT:??_R0?AVCProcessSendData@@@8 ; CProcessSendData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProcessSendData@@8
rdata$r	ENDS
;	COMDAT ??_R2CProcessSendData@@8
rdata$r	SEGMENT
??_R2CProcessSendData@@8 DD FLAT:??_R1A@?0A@EA@CProcessSendData@@8 ; CProcessSendData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CProcessSendData@@8
rdata$r	SEGMENT
??_R3CProcessSendData@@8 DD 00H				; CProcessSendData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CProcessSendData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProcessSendData@@@8
data$r	SEGMENT
??_R0?AVCProcessSendData@@@8 DD FLAT:??_7type_info@@6B@	; CProcessSendData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProcessSendData@@', 00H
data$r	ENDS
;	COMDAT ??_R4CProcessSendData@@6B@
rdata$r	SEGMENT
??_R4CProcessSendData@@6B@ DD 00H			; CProcessSendData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProcessSendData@@@8
	DD	FLAT:??_R3CProcessSendData@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z@4JA DD 0deH ; `CProcessRecvData::OnCopyData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z@4JA DD 0ccH ; `CProcessRecvData::SetProcessTradeSink'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z@4JA DD 098H ; `CProcessSendData::TransferCommand'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGGPAXG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGGPAXG@Z@4JA DD 074H ; `CProcessSendData::SendData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGG@Z@4JA DD 05cH ; `CProcessSendData::SendData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0bdH
	DB	0f8H, 0b3H, 0ccH, 0bfH, 0d8H, 0d6H, 0c6H, '\processdatacontrol'
	DB	'.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetServerHwnd@CProcessSendData@@QAE_NPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetServerHwnd@CProcessSendData@@QAE_NPBD@Z@4JA DD 04fH ; `CProcessSendData::SetServerHwnd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CProcessRecvData@@6B@
CONST	SEGMENT
??_7CProcessRecvData@@6B@ DD FLAT:??_R4CProcessRecvData@@6B@ ; CProcessRecvData::`vftable'
	DD	FLAT:??_ECProcessRecvData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CProcessSendData@@6B@
CONST	SEGMENT
??_7CProcessSendData@@6B@ DD FLAT:??_R4CProcessSendData@@6B@ ; CProcessSendData::`vftable'
	DD	FLAT:??_ECProcessSendData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 061H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECProcessRecvData@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECProcessSendData@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001b	68 9c 02 00 00	 push	 668			; 0000029cH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00039	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0003d	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0003f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0004a	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  00067	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006b	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00073	8a 11		 mov	 dl, BYTE PTR [ecx]
  00075	88 10		 mov	 BYTE PTR [eax], dl
  00077	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECProcessRecvData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECProcessRecvData@@UAEPAXI@Z PROC			; CProcessRecvData::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECProcessRecvData@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CProcessRecvData@@UAE@XZ ; CProcessRecvData::~CProcessRecvData
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 08		 push	 8
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 cd 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*8+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CProcessRecvData@@UAE@XZ ; CProcessRecvData::~CProcessRecvData
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 08		 push	 8
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECProcessRecvData@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECProcessRecvData@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECProcessRecvData@@UAEPAXI@Z ENDP			; CProcessRecvData::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCProcessRecvData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProcessRecvData@@UAEPAXI@Z PROC			; CProcessRecvData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CProcessRecvData@@UAE@XZ ; CProcessRecvData::~CProcessRecvData
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCProcessRecvData@@UAEPAXI@Z ENDP			; CProcessRecvData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CProcessRecvData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProcessRecvData@@QAEAAV0@ABV0@@Z PROC		; CProcessRecvData::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4CProcessRecvData@@QAEAAV0@ABV0@@Z ENDP		; CProcessRecvData::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CProcessRecvData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProcessRecvData@@QAE@ABV0@@Z PROC			; CProcessRecvData::CProcessRecvData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessRecvData@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0CProcessRecvData@@QAE@ABV0@@Z ENDP			; CProcessRecvData::CProcessRecvData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z
_TEXT	SEGMENT
tv138 = -84						; size = 4
_wDataSize$1 = -16					; size = 2
_wDataSize$2 = -12					; size = 2
_pHead$ = -8						; size = 4
_this$ = -4						; size = 4
_hWndSend$ = 8						; size = 4
_pCopyDataStruct$ = 12					; size = 4
?OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z PROC ; CProcessRecvData::OnCopyData, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 223  : 	//效验接口
; 224  : 	ASSERT(m_pIIPCRecvDataSink!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	75 19		 jne	 SHORT $LN11@OnCopyData
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN11@OnCopyData
  0002d	cc		 int	 3
$LN11@OnCopyData:

; 225  : 	if (m_pIIPCRecvDataSink==NULL) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00035	75 07		 jne	 SHORT $LN4@OnCopyData
  00037	32 c0		 xor	 al, al
  00039	e9 3a 01 00 00	 jmp	 $LN1@OnCopyData
$LN4@OnCopyData:

; 226  : 
; 227  : 	//效验参数
; 228  : 	ASSERT(pCopyDataStruct->cbData>=sizeof(IPC_Head));

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  00041	83 78 04 08	 cmp	 DWORD PTR [eax+4], 8
  00045	73 19		 jae	 SHORT $LN12@OnCopyData
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z@4JA
  0004d	83 c1 06	 add	 ecx, 6
  00050	51		 push	 ecx
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00056	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005b	85 c0		 test	 eax, eax
  0005d	74 01		 je	 SHORT $LN12@OnCopyData
  0005f	cc		 int	 3
$LN12@OnCopyData:

; 229  : 	if (pCopyDataStruct->cbData<sizeof(IPC_Head)) return false;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  00063	83 78 04 08	 cmp	 DWORD PTR [eax+4], 8
  00067	73 07		 jae	 SHORT $LN5@OnCopyData
  00069	32 c0		 xor	 al, al
  0006b	e9 08 01 00 00	 jmp	 $LN1@OnCopyData
$LN5@OnCopyData:

; 230  : 
; 231  : 	//效验数据
; 232  : 	IPC_Head * pHead=(IPC_Head *)pCopyDataStruct->lpData;

  00070	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  00073	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00076	89 4d f8	 mov	 DWORD PTR _pHead$[ebp], ecx

; 233  : 	ASSERT((pHead->wVersion==IPC_VER)&&(pHead->wPacketSize==pCopyDataStruct->cbData));

  00079	8b 45 f8	 mov	 eax, DWORD PTR _pHead$[ebp]
  0007c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0007f	83 f9 01	 cmp	 ecx, 1
  00082	75 0f		 jne	 SHORT $LN13@OnCopyData
  00084	8b 55 f8	 mov	 edx, DWORD PTR _pHead$[ebp]
  00087	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _pCopyDataStruct$[ebp]
  0008e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00091	74 19		 je	 SHORT $LN14@OnCopyData
$LN13@OnCopyData:
  00093	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z@4JA
  00099	83 c2 0b	 add	 edx, 11			; 0000000bH
  0009c	52		 push	 edx
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000a2	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a7	85 c0		 test	 eax, eax
  000a9	74 01		 je	 SHORT $LN14@OnCopyData
  000ab	cc		 int	 3
$LN14@OnCopyData:

; 234  : 	if ((pHead->wVersion!=IPC_VER)||(pHead->wPacketSize!=pCopyDataStruct->cbData)) return false;

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _pHead$[ebp]
  000af	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000b2	83 f9 01	 cmp	 ecx, 1
  000b5	75 0f		 jne	 SHORT $LN7@OnCopyData
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _pHead$[ebp]
  000ba	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000be	8b 55 0c	 mov	 edx, DWORD PTR _pCopyDataStruct$[ebp]
  000c1	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  000c4	74 07		 je	 SHORT $LN6@OnCopyData
$LN7@OnCopyData:
  000c6	32 c0		 xor	 al, al
  000c8	e9 ab 00 00 00	 jmp	 $LN1@OnCopyData
$LN6@OnCopyData:

; 235  : 
; 236  : 	//数据处理
; 237  : 	switch (pCopyDataStruct->dwData)

  000cd	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d2	89 4d ac	 mov	 DWORD PTR tv138[ebp], ecx
  000d5	81 7d ac 01 01
	00 00		 cmp	 DWORD PTR tv138[ebp], 257 ; 00000101H
  000dc	74 0e		 je	 SHORT $LN8@OnCopyData
  000de	81 7d ac 01 02
	00 00		 cmp	 DWORD PTR tv138[ebp], 513 ; 00000201H
  000e5	74 4a		 je	 SHORT $LN9@OnCopyData
  000e7	e9 8a 00 00 00	 jmp	 $LN2@OnCopyData
$LN8@OnCopyData:

; 238  : 	{
; 239  : 	case IDT_IMMEDIATE:			//同步数据
; 240  : 		{
; 241  : 			//数据处理
; 242  : 			WORD wDataSize=pHead->wPacketSize-sizeof(IPC_Head);

  000ec	8b 45 f8	 mov	 eax, DWORD PTR _pHead$[ebp]
  000ef	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000f3	83 e9 08	 sub	 ecx, 8
  000f6	66 89 4d f4	 mov	 WORD PTR _wDataSize$2[ebp], cx

; 243  : 			m_pIIPCRecvDataSink->OnImmediateData(pHead->wMainCmdID,pHead->wSubCmdID,pHead+1,wDataSize,hWndSend);

  000fa	8b 45 08	 mov	 eax, DWORD PTR _hWndSend$[ebp]
  000fd	50		 push	 eax
  000fe	0f b7 4d f4	 movzx	 ecx, WORD PTR _wDataSize$2[ebp]
  00102	51		 push	 ecx
  00103	8b 55 f8	 mov	 edx, DWORD PTR _pHead$[ebp]
  00106	83 c2 08	 add	 edx, 8
  00109	52		 push	 edx
  0010a	8b 45 f8	 mov	 eax, DWORD PTR _pHead$[ebp]
  0010d	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00111	51		 push	 ecx
  00112	8b 55 f8	 mov	 edx, DWORD PTR _pHead$[ebp]
  00115	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  00119	50		 push	 eax
  0011a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00123	8b 12		 mov	 edx, DWORD PTR [edx]
  00125	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00128	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0012b	ff d0		 call	 eax

; 244  : 
; 245  : 			return true;

  0012d	b0 01		 mov	 al, 1
  0012f	eb 47		 jmp	 SHORT $LN1@OnCopyData
$LN9@OnCopyData:

; 246  : 		}
; 247  : 	case IDT_ASYNCHRONISM:		//异步数据
; 248  : 		{
; 249  : 			//数据处理
; 250  : 			WORD wDataSize=pHead->wPacketSize-sizeof(IPC_Head);

  00131	8b 45 f8	 mov	 eax, DWORD PTR _pHead$[ebp]
  00134	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00138	83 e9 08	 sub	 ecx, 8
  0013b	66 89 4d f0	 mov	 WORD PTR _wDataSize$1[ebp], cx

; 251  : 			m_pIIPCRecvDataSink->OnAsynchronismData(pHead->wMainCmdID,pHead->wSubCmdID,pHead+1,wDataSize,hWndSend);

  0013f	8b 45 08	 mov	 eax, DWORD PTR _hWndSend$[ebp]
  00142	50		 push	 eax
  00143	0f b7 4d f0	 movzx	 ecx, WORD PTR _wDataSize$1[ebp]
  00147	51		 push	 ecx
  00148	8b 55 f8	 mov	 edx, DWORD PTR _pHead$[ebp]
  0014b	83 c2 08	 add	 edx, 8
  0014e	52		 push	 edx
  0014f	8b 45 f8	 mov	 eax, DWORD PTR _pHead$[ebp]
  00152	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00156	51		 push	 ecx
  00157	8b 55 f8	 mov	 edx, DWORD PTR _pHead$[ebp]
  0015a	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  0015e	50		 push	 eax
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00165	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00168	8b 12		 mov	 edx, DWORD PTR [edx]
  0016a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00170	ff d0		 call	 eax

; 252  : 
; 253  : 			return true;

  00172	b0 01		 mov	 al, 1
  00174	eb 02		 jmp	 SHORT $LN1@OnCopyData
$LN2@OnCopyData:

; 254  : 		}
; 255  : 	}
; 256  : 
; 257  : 	return false;

  00176	32 c0		 xor	 al, al
$LN1@OnCopyData:

; 258  : }

  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	5b		 pop	 ebx
  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c2 08 00	 ret	 8
?OnCopyData@CProcessRecvData@@QAE_NPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z ENDP ; CProcessRecvData::OnCopyData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z
_TEXT	SEGMENT
tv88 = -72						; size = 4
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_pIUnknownEx$ = 8					; size = 4
?SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z PROC ; CProcessRecvData::SetProcessTradeSink, COMDAT
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 205  : 	//设置接口
; 206  : 	if (pIUnknownEx!=NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00010	0f 84 89 00 00
	00		 je	 $LN2@SetProcess

; 207  : 	{
; 208  : 		//查询接口
; 209  : 		ASSERT(QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IIPCRecvDataSink)!=NULL);

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  0001a	75 09		 jne	 SHORT $LN6@SetProcess
  0001c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  00023	eb 1a		 jmp	 SHORT $LN7@SetProcess
$LN6@SetProcess:
  00025	68 00 01 01 06	 push	 100729088		; 06010100H
  0002a	68 00 00 00 00	 push	 OFFSET ?IID_IIPCRecvDataSink@@3U_GUID@@B
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  00037	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003a	ff d0		 call	 eax
  0003c	89 45 b8	 mov	 DWORD PTR tv72[ebp], eax
$LN7@SetProcess:
  0003f	83 7d b8 00	 cmp	 DWORD PTR tv72[ebp], 0
  00043	75 19		 jne	 SHORT $LN8@SetProcess
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z@4JA
  0004b	83 c1 05	 add	 ecx, 5
  0004e	51		 push	 ecx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00054	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00059	85 c0		 test	 eax, eax
  0005b	74 01		 je	 SHORT $LN8@SetProcess
  0005d	cc		 int	 3
$LN8@SetProcess:

; 210  : 		m_pIIPCRecvDataSink=QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IIPCRecvDataSink);

  0005e	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00062	75 09		 jne	 SHORT $LN9@SetProcess
  00064	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
  0006b	eb 1a		 jmp	 SHORT $LN10@SetProcess
$LN9@SetProcess:
  0006d	68 00 01 01 06	 push	 100729088		; 06010100H
  00072	68 00 00 00 00	 push	 OFFSET ?IID_IIPCRecvDataSink@@3U_GUID@@B
  00077	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  0007a	8b 10		 mov	 edx, DWORD PTR [eax]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	ff d0		 call	 eax
  00084	89 45 b8	 mov	 DWORD PTR tv88[ebp], eax
$LN10@SetProcess:
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 55 b8	 mov	 edx, DWORD PTR tv88[ebp]
  0008d	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 211  : 
; 212  : 		//成功判断
; 213  : 		if (m_pIIPCRecvDataSink==NULL) return false;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00097	75 04		 jne	 SHORT $LN4@SetProcess
  00099	32 c0		 xor	 al, al
  0009b	eb 0e		 jmp	 SHORT $LN1@SetProcess
$LN4@SetProcess:

; 214  : 	}

  0009d	eb 0a		 jmp	 SHORT $LN3@SetProcess
$LN2@SetProcess:

; 215  : 	else m_pIIPCRecvDataSink=NULL;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN3@SetProcess:

; 216  : 
; 217  : 	return true;

  000a9	b0 01		 mov	 al, 1
$LN1@SetProcess:

; 218  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?SetProcessTradeSink@CProcessRecvData@@QAE_NPAUIUnknownEx@@@Z ENDP ; CProcessRecvData::SetProcessTradeSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ??1CProcessRecvData@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProcessRecvData@@UAE@XZ PROC			; CProcessRecvData::~CProcessRecvData, COMDAT
; _this$ = ecx

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessRecvData@@6B@

; 200  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CProcessRecvData@@UAE@XZ ENDP			; CProcessRecvData::~CProcessRecvData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ??0CProcessRecvData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProcessRecvData@@QAE@XZ PROC			; CProcessRecvData::CProcessRecvData, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessRecvData@@6B@

; 191  : 	//设置变量
; 192  : 	m_pIIPCRecvDataSink=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 193  : 
; 194  : 	return;
; 195  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CProcessRecvData@@QAE@XZ ENDP			; CProcessRecvData::CProcessRecvData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECProcessSendData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECProcessSendData@@UAEPAXI@Z PROC			; CProcessSendData::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECProcessSendData@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 41		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CProcessSendData@@UAE@XZ ; CProcessSendData::~CProcessSendData
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 0c		 push	 12			; 0000000cH
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1a		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	6b 48 fc 0c	 imul	 ecx, DWORD PTR [eax-4], 12
  00059	83 c1 04	 add	 ecx, 4
  0005c	51		 push	 ecx
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 ea 04	 sub	 edx, 4
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00069	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 e8 04	 sub	 eax, 4
  00072	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1CProcessSendData@@UAE@XZ ; CProcessSendData::~CProcessSendData
  0007c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007f	83 e0 01	 and	 eax, 1
  00082	74 0e		 je	 SHORT $LN4@vector
  00084	6a 0c		 push	 12			; 0000000cH
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
$LN4@vector:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECProcessSendData@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECProcessSendData@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECProcessSendData@@UAEPAXI@Z ENDP			; CProcessSendData::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCProcessSendData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProcessSendData@@UAEPAXI@Z PROC			; CProcessSendData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CProcessSendData@@UAE@XZ ; CProcessSendData::~CProcessSendData
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCProcessSendData@@UAEPAXI@Z ENDP			; CProcessSendData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_FCProcessSendData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FCProcessSendData@@QAEXXZ PROC			; CProcessSendData::`default constructor closure', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CProcessSendData@@QAE@PAUHWND__@@0@Z ; CProcessSendData::CProcessSendData
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??_FCProcessSendData@@QAEXXZ ENDP			; CProcessSendData::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CProcessSendData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProcessSendData@@QAEAAV0@ABV0@@Z PROC		; CProcessSendData::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??4CProcessSendData@@QAEAAV0@ABV0@@Z ENDP		; CProcessSendData::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CProcessSendData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProcessSendData@@QAE@ABV0@@Z PROC			; CProcessSendData::CProcessSendData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessSendData@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00027	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??0CProcessSendData@@QAE@ABV0@@Z ENDP			; CProcessSendData::CProcessSendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z
_TEXT	SEGMENT
_CopyDataStruct$ = -10260				; size = 12
_IPCBuffer$ = -10248					; size = 10240
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
_pData$ = 16						; size = 4
_wDataSize$ = 20					; size = 2
?TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z PROC	; CProcessSendData::TransferCommand, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 14 2a 00 00	 mov	 eax, 10772		; 00002a14H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 153  : 	//效验参数
; 154  : 	ASSERT(IsWindow(m_hWndServer));

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0002a	85 c0		 test	 eax, eax
  0002c	75 19		 jne	 SHORT $LN6@TransferCo
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z@4JA
  00034	83 c2 02	 add	 edx, 2
  00037	52		 push	 edx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00042	85 c0		 test	 eax, eax
  00044	74 01		 je	 SHORT $LN6@TransferCo
  00046	cc		 int	 3
$LN6@TransferCo:

; 155  : 	if (IsWindow(m_hWndServer)==FALSE) return false;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	51		 push	 ecx
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00054	85 c0		 test	 eax, eax
  00056	75 07		 jne	 SHORT $LN2@TransferCo
  00058	32 c0		 xor	 al, al
  0005a	e9 d5 00 00 00	 jmp	 $LN1@TransferCo
$LN2@TransferCo:

; 156  : 
; 157  : 	//构造数据
; 158  : 	IPC_Buffer IPCBuffer;
; 159  : 	IPCBuffer.Head.wVersion=IPC_VER;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	66 89 85 f8 d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp], ax

; 160  : 	IPCBuffer.Head.wSubCmdID=wSubCmdID;

  0006b	66 8b 45 0c	 mov	 ax, WORD PTR _wSubCmdID$[ebp]
  0006f	66 89 85 fe d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+6], ax

; 161  : 	IPCBuffer.Head.wMainCmdID=wMainCmdID;

  00076	66 8b 45 08	 mov	 ax, WORD PTR _wMainCmdID$[ebp]
  0007a	66 89 85 fc d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+4], ax

; 162  : 	IPCBuffer.Head.wPacketSize=sizeof(IPCBuffer.Head);

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	66 89 85 fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], ax

; 163  : 
; 164  : 	//附加数据
; 165  : 	if (pData!=NULL)

  0008d	83 7d 10 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00091	74 5f		 je	 SHORT $LN3@TransferCo

; 166  : 	{
; 167  : 		//效验长度
; 168  : 		ASSERT(wDataSize<=sizeof(IPCBuffer.cbBuffer));

  00093	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00097	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  0009c	76 19		 jbe	 SHORT $LN7@TransferCo
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z@4JA
  000a4	83 c1 10	 add	 ecx, 16			; 00000010H
  000a7	51		 push	 ecx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000ad	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b2	85 c0		 test	 eax, eax
  000b4	74 01		 je	 SHORT $LN7@TransferCo
  000b6	cc		 int	 3
$LN7@TransferCo:

; 169  : 		if (wDataSize>sizeof(IPCBuffer.cbBuffer)) return false;

  000b7	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000bb	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  000c0	76 04		 jbe	 SHORT $LN4@TransferCo
  000c2	32 c0		 xor	 al, al
  000c4	eb 6e		 jmp	 SHORT $LN1@TransferCo
$LN4@TransferCo:

; 170  : 
; 171  : 		//拷贝数据
; 172  : 		IPCBuffer.Head.wPacketSize+=wDataSize;

  000c6	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000ca	0f b7 8d fa d7
	ff ff		 movzx	 ecx, WORD PTR _IPCBuffer$[ebp+2]
  000d1	03 c8		 add	 ecx, eax
  000d3	66 89 8d fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], cx

; 173  : 		CopyMemory(IPCBuffer.cbBuffer,pData,wDataSize);

  000da	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000de	50		 push	 eax
  000df	8b 4d 10	 mov	 ecx, DWORD PTR _pData$[ebp]
  000e2	51		 push	 ecx
  000e3	8d 95 00 d8 ff
	ff		 lea	 edx, DWORD PTR _IPCBuffer$[ebp+8]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 _memcpy
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@TransferCo:

; 174  : 	}
; 175  : 
; 176  : 	//发送数据
; 177  : 	COPYDATASTRUCT CopyDataStruct;
; 178  : 	CopyDataStruct.lpData=&IPCBuffer;

  000f2	8d 85 f8 d7 ff
	ff		 lea	 eax, DWORD PTR _IPCBuffer$[ebp]
  000f8	89 85 f4 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+8], eax

; 179  : 	CopyDataStruct.dwData=IDT_IMMEDIATE;

  000fe	c7 85 ec d7 ff
	ff 01 01 00 00	 mov	 DWORD PTR _CopyDataStruct$[ebp], 257 ; 00000101H

; 180  : 	CopyDataStruct.cbData=IPCBuffer.Head.wPacketSize;

  00108	0f b7 85 fa d7
	ff ff		 movzx	 eax, WORD PTR _IPCBuffer$[ebp+2]
  0010f	89 85 f0 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+4], eax

; 181  : 	::SendMessage(m_hWndServer,WM_COPYDATA,(LPARAM)m_hWndClient,(WPARAM)&CopyDataStruct);

  00115	8d 85 ec d7 ff
	ff		 lea	 eax, DWORD PTR _CopyDataStruct$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00122	52		 push	 edx
  00123	6a 4a		 push	 74			; 0000004aH
  00125	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	51		 push	 ecx
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 182  : 
; 183  : 	return true;

  00132	b0 01		 mov	 al, 1
$LN1@TransferCo:

; 184  : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013a	33 cd		 xor	 ecx, ebp
  0013c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 10 00	 ret	 16			; 00000010H
?TransferCommand@CProcessSendData@@QAE_NGGPAXG@Z ENDP	; CProcessSendData::TransferCommand
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?SendData@CProcessSendData@@QAE_NGGPAXG@Z
_TEXT	SEGMENT
_CopyDataStruct$ = -10260				; size = 12
_IPCBuffer$ = -10248					; size = 10240
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
_pData$ = 16						; size = 4
_wDataSize$ = 20					; size = 2
?SendData@CProcessSendData@@QAE_NGGPAXG@Z PROC		; CProcessSendData::SendData, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 14 2a 00 00	 mov	 eax, 10772		; 00002a14H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 	//效验参数
; 118  : 	ASSERT(IsWindow(m_hWndServer));

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	51		 push	 ecx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0002a	85 c0		 test	 eax, eax
  0002c	75 19		 jne	 SHORT $LN6@SendData
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGGPAXG@Z@4JA
  00034	83 c2 02	 add	 edx, 2
  00037	52		 push	 edx
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00042	85 c0		 test	 eax, eax
  00044	74 01		 je	 SHORT $LN6@SendData
  00046	cc		 int	 3
$LN6@SendData:

; 119  : 	if (IsWindow(m_hWndServer)==FALSE) return false;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	51		 push	 ecx
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00054	85 c0		 test	 eax, eax
  00056	75 07		 jne	 SHORT $LN2@SendData
  00058	32 c0		 xor	 al, al
  0005a	e9 d5 00 00 00	 jmp	 $LN1@SendData
$LN2@SendData:

; 120  : 
; 121  : 	//构造数据
; 122  : 	IPC_Buffer IPCBuffer;
; 123  : 	IPCBuffer.Head.wVersion=IPC_VER;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	66 89 85 f8 d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp], ax

; 124  : 	IPCBuffer.Head.wSubCmdID=wSubCmdID;

  0006b	66 8b 45 0c	 mov	 ax, WORD PTR _wSubCmdID$[ebp]
  0006f	66 89 85 fe d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+6], ax

; 125  : 	IPCBuffer.Head.wMainCmdID=wMainCmdID;

  00076	66 8b 45 08	 mov	 ax, WORD PTR _wMainCmdID$[ebp]
  0007a	66 89 85 fc d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+4], ax

; 126  : 	IPCBuffer.Head.wPacketSize=sizeof(IPCBuffer.Head);

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	66 89 85 fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], ax

; 127  : 
; 128  : 	//附加数据
; 129  : 	if (pData!=NULL)

  0008d	83 7d 10 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00091	74 5f		 je	 SHORT $LN3@SendData

; 130  : 	{
; 131  : 		//效验长度
; 132  : 		ASSERT(wDataSize<=sizeof(IPCBuffer.cbBuffer));

  00093	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00097	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  0009c	76 19		 jbe	 SHORT $LN7@SendData
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGGPAXG@Z@4JA
  000a4	83 c1 10	 add	 ecx, 16			; 00000010H
  000a7	51		 push	 ecx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000ad	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b2	85 c0		 test	 eax, eax
  000b4	74 01		 je	 SHORT $LN7@SendData
  000b6	cc		 int	 3
$LN7@SendData:

; 133  : 		if (wDataSize>sizeof(IPCBuffer.cbBuffer)) return false;

  000b7	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000bb	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  000c0	76 04		 jbe	 SHORT $LN4@SendData
  000c2	32 c0		 xor	 al, al
  000c4	eb 6e		 jmp	 SHORT $LN1@SendData
$LN4@SendData:

; 134  : 
; 135  : 		//拷贝数据
; 136  : 		IPCBuffer.Head.wPacketSize+=wDataSize;

  000c6	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000ca	0f b7 8d fa d7
	ff ff		 movzx	 ecx, WORD PTR _IPCBuffer$[ebp+2]
  000d1	03 c8		 add	 ecx, eax
  000d3	66 89 8d fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], cx

; 137  : 		CopyMemory(IPCBuffer.cbBuffer,pData,wDataSize);

  000da	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000de	50		 push	 eax
  000df	8b 4d 10	 mov	 ecx, DWORD PTR _pData$[ebp]
  000e2	51		 push	 ecx
  000e3	8d 95 00 d8 ff
	ff		 lea	 edx, DWORD PTR _IPCBuffer$[ebp+8]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 _memcpy
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendData:

; 138  : 	}
; 139  : 
; 140  : 	//发送数据
; 141  : 	COPYDATASTRUCT CopyDataStruct;
; 142  : 	CopyDataStruct.lpData=&IPCBuffer;

  000f2	8d 85 f8 d7 ff
	ff		 lea	 eax, DWORD PTR _IPCBuffer$[ebp]
  000f8	89 85 f4 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+8], eax

; 143  : 	CopyDataStruct.dwData=IDT_ASYNCHRONISM;

  000fe	c7 85 ec d7 ff
	ff 01 02 00 00	 mov	 DWORD PTR _CopyDataStruct$[ebp], 513 ; 00000201H

; 144  : 	CopyDataStruct.cbData=IPCBuffer.Head.wPacketSize;

  00108	0f b7 85 fa d7
	ff ff		 movzx	 eax, WORD PTR _IPCBuffer$[ebp+2]
  0010f	89 85 f0 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+4], eax

; 145  : 	::SendMessage(m_hWndServer,WM_COPYDATA,(LPARAM)m_hWndClient,(WPARAM)&CopyDataStruct);

  00115	8d 85 ec d7 ff
	ff		 lea	 eax, DWORD PTR _CopyDataStruct$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00122	52		 push	 edx
  00123	6a 4a		 push	 74			; 0000004aH
  00125	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	51		 push	 ecx
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 146  : 
; 147  : 	return true;

  00132	b0 01		 mov	 al, 1
$LN1@SendData:

; 148  : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013a	33 cd		 xor	 ecx, ebp
  0013c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 10 00	 ret	 16			; 00000010H
?SendData@CProcessSendData@@QAE_NGGPAXG@Z ENDP		; CProcessSendData::SendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?SendData@CProcessSendData@@QAE_NGG@Z
_TEXT	SEGMENT
_CopyDataStruct$ = -24					; size = 12
_IPCHead$ = -12						; size = 8
_this$ = -4						; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
?SendData@CProcessSendData@@QAE_NGG@Z PROC		; CProcessSendData::SendData, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	//效验参数
; 94   : 	ASSERT(IsWindow(m_hWndServer));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	51		 push	 ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00019	85 c0		 test	 eax, eax
  0001b	75 19		 jne	 SHORT $LN4@SendData
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??SendData@CProcessSendData@@QAE_NGG@Z@4JA
  00023	83 c2 02	 add	 edx, 2
  00026	52		 push	 edx
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00031	85 c0		 test	 eax, eax
  00033	74 01		 je	 SHORT $LN4@SendData
  00035	cc		 int	 3
$LN4@SendData:

; 95   : 	if (IsWindow(m_hWndServer)==FALSE) return false;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00043	85 c0		 test	 eax, eax
  00045	75 04		 jne	 SHORT $LN2@SendData
  00047	32 c0		 xor	 al, al
  00049	eb 52		 jmp	 SHORT $LN1@SendData
$LN2@SendData:

; 96   : 
; 97   : 	//构造数据
; 98   : 	IPC_Head IPCHead;
; 99   : 	IPCHead.wVersion=IPC_VER;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	66 89 45 f4	 mov	 WORD PTR _IPCHead$[ebp], ax

; 100  : 	IPCHead.wSubCmdID=wSubCmdID;

  00054	66 8b 45 0c	 mov	 ax, WORD PTR _wSubCmdID$[ebp]
  00058	66 89 45 fa	 mov	 WORD PTR _IPCHead$[ebp+6], ax

; 101  : 	IPCHead.wMainCmdID=wMainCmdID;

  0005c	66 8b 45 08	 mov	 ax, WORD PTR _wMainCmdID$[ebp]
  00060	66 89 45 f8	 mov	 WORD PTR _IPCHead$[ebp+4], ax

; 102  : 	IPCHead.wPacketSize=sizeof(IPC_Head);

  00064	b8 08 00 00 00	 mov	 eax, 8
  00069	66 89 45 f6	 mov	 WORD PTR _IPCHead$[ebp+2], ax

; 103  : 
; 104  : 	//发送数据
; 105  : 	COPYDATASTRUCT CopyDataStruct;
; 106  : 	CopyDataStruct.lpData=&IPCHead;

  0006d	8d 45 f4	 lea	 eax, DWORD PTR _IPCHead$[ebp]
  00070	89 45 f0	 mov	 DWORD PTR _CopyDataStruct$[ebp+8], eax

; 107  : 	CopyDataStruct.dwData=IDT_ASYNCHRONISM;

  00073	c7 45 e8 01 02
	00 00		 mov	 DWORD PTR _CopyDataStruct$[ebp], 513 ; 00000201H

; 108  : 	CopyDataStruct.cbData=IPCHead.wPacketSize;

  0007a	0f b7 45 f6	 movzx	 eax, WORD PTR _IPCHead$[ebp+2]
  0007e	89 45 ec	 mov	 DWORD PTR _CopyDataStruct$[ebp+4], eax

; 109  : 	::SendMessage(m_hWndServer,WM_COPYDATA,(LPARAM)m_hWndClient,(WPARAM)&CopyDataStruct);

  00081	8d 45 e8	 lea	 eax, DWORD PTR _CopyDataStruct$[ebp]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0008b	52		 push	 edx
  0008c	6a 4a		 push	 74			; 0000004aH
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00091	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00094	51		 push	 ecx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 110  : 
; 111  : 	return true;

  0009b	b0 01		 mov	 al, 1
$LN1@SendData:

; 112  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
?SendData@CProcessSendData@@QAE_NGG@Z ENDP		; CProcessSendData::SendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?SetServerHwnd@CProcessSendData@@QAE_NPBD@Z
_TEXT	SEGMENT
tv78 = -72						; size = 4
_this$ = -4						; size = 4
_pszClassName$ = 8					; size = 4
?SetServerHwnd@CProcessSendData@@QAE_NPBD@Z PROC	; CProcessSendData::SetServerHwnd, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	//效验参数
; 81   : 	ASSERT(pszClassName!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pszClassName$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@SetServerH
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SetServerHwnd@CProcessSendData@@QAE_NPBD@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@MDPBJMPH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN4@SetServerH
  00029	cc		 int	 3
$LN4@SetServerH:

; 82   : 	if (pszClassName==NULL) return false;

  0002a	83 7d 08 00	 cmp	 DWORD PTR _pszClassName$[ebp], 0
  0002e	75 04		 jne	 SHORT $LN2@SetServerH
  00030	32 c0		 xor	 al, al
  00032	eb 2e		 jmp	 SHORT $LN1@SetServerH
$LN2@SetServerH:

; 83   : 
; 84   : 	//设置变量
; 85   : 	m_hWndServer=FindWindow(pszClassName,NULL);

  00034	6a 00		 push	 0
  00036	8b 45 08	 mov	 eax, DWORD PTR _pszClassName$[ebp]
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindWindowA@8
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 86   : 
; 87   : 	return (m_hWndServer!=NULL);

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0004d	74 09		 je	 SHORT $LN5@SetServerH
  0004f	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  00056	eb 07		 jmp	 SHORT $LN6@SetServerH
$LN5@SetServerH:
  00058	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@SetServerH:
  0005f	8a 45 b8	 mov	 al, BYTE PTR tv78[ebp]
$LN1@SetServerH:

; 88   : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?SetServerHwnd@CProcessSendData@@QAE_NPBD@Z ENDP	; CProcessSendData::SetServerHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?SetServerHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hWndServer$ = 8					; size = 4
?SetServerHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z PROC ; CProcessSendData::SetServerHwnd, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	//设置变量
; 65   : 	m_hWndServer=NULL;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 66   : 
; 67   : 	//窗口效验
; 68   : 	if ((hWndServer!=NULL)&&(IsWindow(hWndServer)))

  00016	83 7d 08 00	 cmp	 DWORD PTR _hWndServer$[ebp], 0
  0001a	74 1b		 je	 SHORT $LN2@SetServerH
  0001c	8b 45 08	 mov	 eax, DWORD PTR _hWndServer$[ebp]
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00026	85 c0		 test	 eax, eax
  00028	74 0d		 je	 SHORT $LN2@SetServerH

; 69   : 	{
; 70   : 		m_hWndServer=hWndServer;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _hWndServer$[ebp]
  00030	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 71   : 		return true;

  00033	b0 01		 mov	 al, 1
  00035	eb 02		 jmp	 SHORT $LN1@SetServerH
$LN2@SetServerH:

; 72   : 	}
; 73   : 
; 74   : 	return false;

  00037	32 c0		 xor	 al, al
$LN1@SetServerH:

; 75   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?SetServerHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z ENDP ; CProcessSendData::SetServerHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?SetClientHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hWndClient$ = 8					; size = 4
?SetClientHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z PROC ; CProcessSendData::SetClientHwnd, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	//设置变量
; 49   : 	m_hWndClient=NULL;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 50   : 
; 51   : 	//窗口效验
; 52   : 	if ((hWndClient!=NULL)&&(IsWindow(hWndClient)))

  00016	83 7d 08 00	 cmp	 DWORD PTR _hWndClient$[ebp], 0
  0001a	74 1b		 je	 SHORT $LN2@SetClientH
  0001c	8b 45 08	 mov	 eax, DWORD PTR _hWndClient$[ebp]
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00026	85 c0		 test	 eax, eax
  00028	74 0d		 je	 SHORT $LN2@SetClientH

; 53   : 	{
; 54   : 		m_hWndClient=hWndClient;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _hWndClient$[ebp]
  00030	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 55   : 		return true;

  00033	b0 01		 mov	 al, 1
  00035	eb 02		 jmp	 SHORT $LN1@SetClientH
$LN2@SetClientH:

; 56   : 	}
; 57   : 
; 58   : 	return false;

  00037	32 c0		 xor	 al, al
$LN1@SetClientH:

; 59   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?SetClientHwnd@CProcessSendData@@QAE_NPAUHWND__@@@Z ENDP ; CProcessSendData::SetClientHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?GetServerHwnd@CProcessSendData@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetServerHwnd@CProcessSendData@@QAEPAUHWND__@@XZ PROC	; CProcessSendData::GetServerHwnd, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	return m_hWndServer;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 43   : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetServerHwnd@CProcessSendData@@QAEPAUHWND__@@XZ ENDP	; CProcessSendData::GetServerHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?GetClientHwnd@CProcessSendData@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClientHwnd@CProcessSendData@@QAEPAUHWND__@@XZ PROC	; CProcessSendData::GetClientHwnd, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	return m_hWndClient;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 37   : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetClientHwnd@CProcessSendData@@QAEPAUHWND__@@XZ ENDP	; CProcessSendData::GetClientHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?IsConnect@CProcessSendData@@QAE_NXZ
_TEXT	SEGMENT
tv68 = -69						; size = 1
_this$ = -4						; size = 4
?IsConnect@CProcessSendData@@QAE_NXZ PROC		; CProcessSendData::IsConnect, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	return IsWindow(m_hWndServer)?true:false;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	51		 push	 ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00019	85 c0		 test	 eax, eax
  0001b	74 06		 je	 SHORT $LN3@IsConnect
  0001d	c6 45 bb 01	 mov	 BYTE PTR tv68[ebp], 1
  00021	eb 04		 jmp	 SHORT $LN4@IsConnect
$LN3@IsConnect:
  00023	c6 45 bb 00	 mov	 BYTE PTR tv68[ebp], 0
$LN4@IsConnect:
  00027	8a 45 bb	 mov	 al, BYTE PTR tv68[ebp]

; 31   : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?IsConnect@CProcessSendData@@QAE_NXZ ENDP		; CProcessSendData::IsConnect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ??1CProcessSendData@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProcessSendData@@UAE@XZ PROC			; CProcessSendData::~CProcessSendData, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessSendData@@6B@

; 25   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CProcessSendData@@UAE@XZ ENDP			; CProcessSendData::~CProcessSendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ??0CProcessSendData@@QAE@PAUHWND__@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hWndServer$ = 8					; size = 4
_hWndClient$ = 12					; size = 4
??0CProcessSendData@@QAE@PAUHWND__@@0@Z PROC		; CProcessSendData::CProcessSendData, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessSendData@@6B@

; 15   : 	//设置变量
; 16   : 	m_hWndServer=hWndServer;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _hWndServer$[ebp]
  0001b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 17   : 	m_hWndClient=hWndClient;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _hWndClient$[ebp]
  00024	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 18   : 
; 19   : 	return;
; 20   : }

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??0CProcessSendData@@QAE@PAUHWND__@@0@Z ENDP		; CProcessSendData::CProcessSendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.h
;	COMDAT ?Release@CProcessControl@@UAEXXZ
_TEXT	SEGMENT
tv75 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Release@CProcessControl@@UAEXXZ PROC			; CProcessControl::Release, COMDAT
; _this$ = ecx

; 28   : 	virtual VOID Release() { delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00014	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00017	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001a	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  0001d	83 7d b8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00021	74 14		 je	 SHORT $LN3@Release
  00023	6a 01		 push	 1
  00025	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]
  0002a	8b 4d b8	 mov	 ecx, DWORD PTR $T2[ebp]
  0002d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00030	ff d2		 call	 edx
  00032	89 45 b0	 mov	 DWORD PTR tv75[ebp], eax
  00035	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  00037	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN1@Release:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?Release@CProcessControl@@UAEXXZ ENDP			; CProcessControl::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00013	83 c4 04	 add	 esp, 4
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002a	6a 02		 push	 2
  0002c	6a 02		 push	 2
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  0003e	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00042	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  00044	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 105  : 	_CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _wmemcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	return (_Ptrdest);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -48						; size = 8
__Ptrnext$ = -40					; size = 4
__Ptrdest$ = -36					; size = 4
__Mbst1$ = -32						; size = 8
__Wc$ = -24						; size = 2
__Bytes$ = -20						; size = 4
__Ptr1$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Count1$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 e0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000e	89 45 e4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00033	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00036	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00044	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00047	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00053	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00057	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00059	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 45 f0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 __Mbrtowc
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  00078	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0007c	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0007e	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  00080	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  00082	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR __Wchars$[ebp], eax

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  0008b	68 ba 02 00 00	 push	 698			; 000002baH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	6a 02		 push	 2
  00099	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000a9	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000ad	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000af	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000b4	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000b7	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 703  : 	mbstate_t _Mbst2 = {};

  000ba	33 c0		 xor	 eax, eax
  000bc	89 45 d0	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000bf	89 45 d4	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000c2	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  000c7	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d0	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000d3	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000d6	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000d9	83 ea 01	 sub	 edx, 1
  000dc	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000df	8b 45 d8	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  000e2	83 c0 02	 add	 eax, 2
  000e5	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e8	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  000ec	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  000ee	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d d0	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __Count1$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 __Mbrtowc
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  0010d	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00111	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00113	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00115	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00117	33 c0		 xor	 eax, eax
  00119	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0011c	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0011f	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00009	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processdatacontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
