; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\公共组件\进程控制\ProcessControl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z ; CProcessControl::OnCopyData
PUBLIC	?OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z ; CProcessControl::OnMessageAsynchronismData
EXTRN	?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ:PROC ; CWnd::GetThisMessageMap
CONST	SEGMENT
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
?IID_IProcessControl@@3U_GUID@@B DD 071733503H		; IID_IProcessControl
	DW	09d41H
	DW	0429eH
	DB	08aH
	DB	0f0H
	DB	078H
	DB	040H
	DB	061H
	DB	086H
	DB	01H
	DB	0beH
?IID_IProcessControlSink@@3U_GUID@@B DD 0c770827bH	; IID_IProcessControlSink
	DW	0deb5H
	DW	0471cH
	DB	08eH
	DB	0f5H
	DB	042H
	DB	034H
	DB	063H
	DB	0e8H
	DB	072H
	DB	02eH
?_messageEntries@?1??GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 04aH ; `CProcessControl::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	06H
	DD	FLAT:?OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z
	DD	0464H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?messageMap@?1??GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ ; `CProcessControl::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__global_delete@@YAXPAX@Z			; __global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__global_delete@@YAXPAXI@Z			; __global_delete
PUBLIC	?__global_array_delete@@YAXPAX@Z		; __global_array_delete
PUBLIC	?__global_array_delete@@YAXPAXI@Z		; __global_array_delete
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	_wmemcpy
PUBLIC	??0CRect@@QAE@HHHH@Z				; CRect::CRect
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??0IUnknownEx@@QAE@XZ				; IUnknownEx::IUnknownEx
PUBLIC	?GetProductVer@@YAEK@Z				; GetProductVer
PUBLIC	?GetMainVer@@YAEK@Z				; GetMainVer
PUBLIC	?GetSubVer@@YAEK@Z				; GetSubVer
PUBLIC	?GetBuildVer@@YAEK@Z				; GetBuildVer
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0IProcessControl@@QAE@XZ			; IProcessControl::IProcessControl
PUBLIC	??0CProcessSendData@@QAE@ABV0@@Z		; CProcessSendData::CProcessSendData
PUBLIC	??4CProcessSendData@@QAEAAV0@ABV0@@Z		; CProcessSendData::operator=
PUBLIC	??_FCProcessSendData@@QAEXXZ			; CProcessSendData::`default constructor closure'
PUBLIC	??_GCProcessSendData@@UAEPAXI@Z			; CProcessSendData::`scalar deleting destructor'
PUBLIC	??_ECProcessSendData@@UAEPAXI@Z			; CProcessSendData::`vector deleting destructor'
PUBLIC	??0CProcessRecvData@@QAE@ABV0@@Z		; CProcessRecvData::CProcessRecvData
PUBLIC	??4CProcessRecvData@@QAEAAV0@ABV0@@Z		; CProcessRecvData::operator=
PUBLIC	??_GCProcessRecvData@@UAEPAXI@Z			; CProcessRecvData::`scalar deleting destructor'
PUBLIC	??_ECProcessRecvData@@UAEPAXI@Z			; CProcessRecvData::`vector deleting destructor'
PUBLIC	??0CProcessControl@@QAE@XZ			; CProcessControl::CProcessControl
PUBLIC	??1CProcessControl@@UAE@XZ			; CProcessControl::~CProcessControl
PUBLIC	?Release@CProcessControl@@UAEXXZ		; CProcessControl::Release
PUBLIC	?QueryInterface@CProcessControl@@UAEPAXABU_GUID@@K@Z ; CProcessControl::QueryInterface
PUBLIC	?GetProcessControlWnd@CProcessControl@@UAEPAUHWND__@@XZ ; CProcessControl::GetProcessControlWnd
PUBLIC	?SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z ; CProcessControl::SetProcessControlSink
PUBLIC	?InitializeLink@CProcessControl@@UAE_NXZ	; CProcessControl::InitializeLink
PUBLIC	?UnInitializeLink@CProcessControl@@UAE_NXZ	; CProcessControl::UnInitializeLink
PUBLIC	?SendData@CProcessControl@@UAE_NPAUHWND__@@GG@Z	; CProcessControl::SendData
PUBLIC	?SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z ; CProcessControl::SendData
PUBLIC	?SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z ; CProcessControl::SendCommand
PUBLIC	?GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ ; CProcessControl::GetThisMessageMap
PUBLIC	?GetMessageMap@CProcessControl@@MBEPBUAFX_MSGMAP@@XZ ; CProcessControl::GetMessageMap
PUBLIC	??_GCProcessControl@@UAEPAXI@Z			; CProcessControl::`scalar deleting destructor'
PUBLIC	??_ECProcessControl@@UAEPAXI@Z			; CProcessControl::`vector deleting destructor'
PUBLIC	_CreateProcessControl
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R3CWnd@@8					; CWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWnd@@8					; CWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R3CCmdTarget@@8				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCmdTarget@@8				; CCmdTarget::`RTTI Base Class Array'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IProcessControl@@6B@			; IProcessControl::`vftable'
PUBLIC	??_7CProcessSendData@@6B@			; CProcessSendData::`vftable'
PUBLIC	??_7CProcessRecvData@@6B@			; CProcessRecvData::`vftable'
PUBLIC	??_7CProcessControl@@6BCWnd@@@			; CProcessControl::`vftable'
PUBLIC	??_7CProcessControl@@6BIProcessControl@@@	; CProcessControl::`vftable'
PUBLIC	?__LINE__Var@?0??SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z@4JA ; `CProcessControl::SetProcessControlSink'::`1'::__LINE__Var
PUBLIC	??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??InitializeLink@CProcessControl@@UAE_NXZ@4JA ; `CProcessControl::InitializeLink'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA ; `CProcessControl::SendData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA ; `CProcessControl::SendCommand'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z@4JA ; `CProcessControl::OnCopyData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z@4JA ; `CProcessControl::OnMessageAsynchronismData'::`1'::__LINE__Var
PUBLIC	__TI2PAD
PUBLIC	__CTA2PAD
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IProcessControl@@6B@			; IProcessControl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIProcessControl@@@8			; IProcessControl `RTTI Type Descriptor'
PUBLIC	??_R3IProcessControl@@8				; IProcessControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IProcessControl@@8				; IProcessControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IProcessControl@@8		; IProcessControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CProcessSendData@@6B@			; CProcessSendData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProcessSendData@@@8			; CProcessSendData `RTTI Type Descriptor'
PUBLIC	??_R3CProcessSendData@@8			; CProcessSendData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProcessSendData@@8			; CProcessSendData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProcessSendData@@8		; CProcessSendData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CProcessRecvData@@6B@			; CProcessRecvData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProcessRecvData@@@8			; CProcessRecvData `RTTI Type Descriptor'
PUBLIC	??_R3CProcessRecvData@@8			; CProcessRecvData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProcessRecvData@@8			; CProcessRecvData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProcessRecvData@@8		; CProcessRecvData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CProcessControl@@6BCWnd@@@			; CProcessControl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProcessControl@@@8			; CProcessControl `RTTI Type Descriptor'
PUBLIC	??_R3CProcessControl@@8				; CProcessControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProcessControl@@8				; CProcessControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProcessControl@@8		; CProcessControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1IA@?0A@EA@IProcessControl@@8		; IProcessControl::`RTTI Base Class Descriptor at (128,-1,0,64)'
PUBLIC	??_R1IA@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (128,-1,0,64)'
PUBLIC	??_R4CProcessControl@@6BIProcessControl@@@	; CProcessControl::`RTTI Complete Object Locator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	??2CObject@@SGPAXI@Z:PROC			; CObject::operator new
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:PROC ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:PROC	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:PROC ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:PROC	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:PROC ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:PROC ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:PROC ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:PROC ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:PROC ; CCmdTarget::GetConnectionMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:PROC ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:PROC	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:PROC ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:PROC ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:PROC ; CCmdTarget::GetConnectionHook
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:PROC ; CWnd::GetRuntimeClass
EXTRN	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ:PROC	; CWnd::GetSafeHwnd
EXTRN	??0CWnd@@QAE@XZ:PROC				; CWnd::CWnd
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:PROC		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:PROC ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:PROC ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:PROC ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:PROC		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:PROC ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:PROC	; CWnd::CalcWindowRect
EXTRN	?PostMessageA@CWnd@@QAEHIIJ@Z:PROC		; CWnd::PostMessageA
EXTRN	?GetMenu@CWnd@@UBEPAVCMenu@@XZ:PROC		; CWnd::GetMenu
EXTRN	?SetMenu@CWnd@@UAEHPAVCMenu@@@Z:PROC		; CWnd::SetMenu
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:PROC ; CWnd::OnToolHitTest
EXTRN	?GetDesktopWindow@CWnd@@SGPAV1@XZ:PROC		; CWnd::GetDesktopWindow
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:PROC ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:PROC		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:PROC		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:PROC		; CWnd::EndModalLoop
EXTRN	?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z:PROC ; CWnd::OnDrawIconicThumbnailOrLivePreview
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:PROC ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:PROC			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:PROC ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:PROC		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:PROC ; CWnd::get_accChild
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDescription
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accRole
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:PROC ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDefaultAction
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:PROC	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:PROC ; CWnd::accLocation
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:PROC	; CWnd::accHitTest
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:PROC ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:PROC ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:PROC	; CWnd::CreateAccessibleProxy
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:PROC			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:PROC		; CWnd::OnNotify
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:PROC ; CWnd::GetSuperWndProcAddr
EXTRN	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z:PROC ; CWnd::DoDataExchange
EXTRN	?BeginModalState@CWnd@@UAEXXZ:PROC		; CWnd::BeginModalState
EXTRN	?EndModalState@CWnd@@UAEXXZ:PROC		; CWnd::EndModalState
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:PROC ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:PROC ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:PROC		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:PROC		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:PROC		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnChildNotify
EXTRN	?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInputs
EXTRN	?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInput
EXTRN	?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z:PROC	; CWnd::GetGestureStatus
EXTRN	?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z:PROC	; CWnd::OnGestureZoom
EXTRN	?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z:PROC	; CWnd::OnGesturePan
EXTRN	?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z:PROC	; CWnd::OnGestureRotate
EXTRN	?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z:PROC ; CWnd::OnGestureTwoFingerTap
EXTRN	?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z:PROC ; CWnd::OnGesturePressAndTap
EXTRN	?ResizeDynamicLayout@CWnd@@MAEXXZ:PROC		; CWnd::ResizeDynamicLayout
EXTRN	??1CWnd@@UAE@XZ:PROC				; CWnd::~CWnd
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:PROC		; CWnd::CheckAutoCenter
EXTRN	?AssertValid@CWnd@@UBEXXZ:PROC			; CWnd::AssertValid
EXTRN	?Dump@CWnd@@UBEXAAVCDumpContext@@@Z:PROC	; CWnd::Dump
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:PROC			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:PROC		; CWnd::OnFinalRelease
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:PROC ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:PROC ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:PROC ; CWnd::SetOccDialogInfo
EXTRN	?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ:PROC ; CWnd::GetOccDialogInfo
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_??0CWHDataQueue@@QAE@XZ:PROC
EXTRN	__imp_??1CWHDataQueue@@UAE@XZ:PROC
EXTRN	__imp_?InsertData@CWHDataQueue@@QAE_NGPAXG@Z:PROC
EXTRN	__imp_?RemoveData@CWHDataQueue@@QAEX_N@Z:PROC
EXTRN	__imp_?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z:PROC
EXTRN	??0CProcessSendData@@QAE@PAUHWND__@@0@Z:PROC	; CProcessSendData::CProcessSendData
EXTRN	??1CProcessSendData@@UAE@XZ:PROC		; CProcessSendData::~CProcessSendData
EXTRN	??1CProcessRecvData@@UAE@XZ:PROC		; CProcessRecvData::~CProcessRecvData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R4CProcessControl@@6BIProcessControl@@@
rdata$r	SEGMENT
??_R4CProcessControl@@6BIProcessControl@@@ DD 00H	; CProcessControl::`RTTI Complete Object Locator'
	DD	080H
	DD	00H
	DD	FLAT:??_R0?AVCProcessControl@@@8
	DD	FLAT:??_R3CProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R1IA@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1IA@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (128,-1,0,64)'
	DD	00H
	DD	080H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R1IA@?0A@EA@IProcessControl@@8
rdata$r	SEGMENT
??_R1IA@?0A@EA@IProcessControl@@8 DD FLAT:??_R0?AUIProcessControl@@@8 ; IProcessControl::`RTTI Base Class Descriptor at (128,-1,0,64)'
	DD	01H
	DD	080H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CProcessControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProcessControl@@8 DD FLAT:??_R0?AVCProcessControl@@@8 ; CProcessControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R2CProcessControl@@8
rdata$r	SEGMENT
??_R2CProcessControl@@8 DD FLAT:??_R1A@?0A@EA@CProcessControl@@8 ; CProcessControl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
	DD	FLAT:??_R1IA@?0A@EA@IProcessControl@@8
	DD	FLAT:??_R1IA@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CProcessControl@@8
rdata$r	SEGMENT
??_R3CProcessControl@@8 DD 00H				; CProcessControl::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProcessControl@@@8
data$r	SEGMENT
??_R0?AVCProcessControl@@@8 DD FLAT:??_7type_info@@6B@	; CProcessControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProcessControl@@', 00H
data$r	ENDS
;	COMDAT ??_R4CProcessControl@@6BCWnd@@@
rdata$r	SEGMENT
??_R4CProcessControl@@6BCWnd@@@ DD 00H			; CProcessControl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProcessControl@@@8
	DD	FLAT:??_R3CProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CProcessRecvData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProcessRecvData@@8 DD FLAT:??_R0?AVCProcessRecvData@@@8 ; CProcessRecvData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProcessRecvData@@8
rdata$r	ENDS
;	COMDAT ??_R2CProcessRecvData@@8
rdata$r	SEGMENT
??_R2CProcessRecvData@@8 DD FLAT:??_R1A@?0A@EA@CProcessRecvData@@8 ; CProcessRecvData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CProcessRecvData@@8
rdata$r	SEGMENT
??_R3CProcessRecvData@@8 DD 00H				; CProcessRecvData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CProcessRecvData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProcessRecvData@@@8
data$r	SEGMENT
??_R0?AVCProcessRecvData@@@8 DD FLAT:??_7type_info@@6B@	; CProcessRecvData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProcessRecvData@@', 00H
data$r	ENDS
;	COMDAT ??_R4CProcessRecvData@@6B@
rdata$r	SEGMENT
??_R4CProcessRecvData@@6B@ DD 00H			; CProcessRecvData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProcessRecvData@@@8
	DD	FLAT:??_R3CProcessRecvData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CProcessSendData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProcessSendData@@8 DD FLAT:??_R0?AVCProcessSendData@@@8 ; CProcessSendData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProcessSendData@@8
rdata$r	ENDS
;	COMDAT ??_R2CProcessSendData@@8
rdata$r	SEGMENT
??_R2CProcessSendData@@8 DD FLAT:??_R1A@?0A@EA@CProcessSendData@@8 ; CProcessSendData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CProcessSendData@@8
rdata$r	SEGMENT
??_R3CProcessSendData@@8 DD 00H				; CProcessSendData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CProcessSendData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProcessSendData@@@8
data$r	SEGMENT
??_R0?AVCProcessSendData@@@8 DD FLAT:??_7type_info@@6B@	; CProcessSendData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProcessSendData@@', 00H
data$r	ENDS
;	COMDAT ??_R4CProcessSendData@@6B@
rdata$r	SEGMENT
??_R4CProcessSendData@@6B@ DD 00H			; CProcessSendData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProcessSendData@@@8
	DD	FLAT:??_R3CProcessSendData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IProcessControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IProcessControl@@8 DD FLAT:??_R0?AUIProcessControl@@@8 ; IProcessControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R2IProcessControl@@8
rdata$r	SEGMENT
??_R2IProcessControl@@8 DD FLAT:??_R1A@?0A@EA@IProcessControl@@8 ; IProcessControl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IProcessControl@@8
rdata$r	SEGMENT
??_R3IProcessControl@@8 DD 00H				; IProcessControl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIProcessControl@@@8
data$r	SEGMENT
??_R0?AUIProcessControl@@@8 DD FLAT:??_7type_info@@6B@	; IProcessControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIProcessControl@@', 00H
data$r	ENDS
;	COMDAT ??_R4IProcessControl@@6B@
rdata$r	SEGMENT
??_R4IProcessControl@@6B@ DD 00H			; IProcessControl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIProcessControl@@@8
	DD	FLAT:??_R3IProcessControl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@ DB 0bdH, 0d3H, 0bfH
	DB	0daH, 0b2H, 0e9H, 0d1H, 0afH, 0caH, 0a7H, 0b0H, 0dcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@ DB 0b4H, 0b4H, 0bdH, 0a8H
	DB	0caH, 0a7H, 0b0H, 0dcH, 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?0??OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z@4JA DD 0103H ; `CProcessControl::OnMessageAsynchronismData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z@4JA DD 0cfH ; `CProcessControl::OnCopyData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA DD 0abH ; `CProcessControl::SendCommand'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA DD 087H ; `CProcessControl::SendData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??InitializeLink@CProcessControl@@UAE_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InitializeLink@CProcessControl@@UAE_NXZ@4JA DD 052H ; `CProcessControl::InitializeLink'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b9H, 0abH, 0b9H, 0b2H, 0d7H, 0e9H, 0bcH, 0feH, '\', 0bdH
	DB	0f8H, 0b3H, 0ccH, 0bfH, 0d8H, 0d6H, 0c6H, '\processcontrol.cpp'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z@4JA DD 040H ; `CProcessControl::SetProcessControlSink'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CProcessControl@@6BIProcessControl@@@
CONST	SEGMENT
??_7CProcessControl@@6BIProcessControl@@@ DD FLAT:??_R4CProcessControl@@6BIProcessControl@@@ ; CProcessControl::`vftable'
	DD	FLAT:?Release@CProcessControl@@UAEXXZ
	DD	FLAT:?QueryInterface@CProcessControl@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?GetProcessControlWnd@CProcessControl@@UAEPAUHWND__@@XZ
	DD	FLAT:?SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z
	DD	FLAT:?InitializeLink@CProcessControl@@UAE_NXZ
	DD	FLAT:?UnInitializeLink@CProcessControl@@UAE_NXZ
	DD	FLAT:?SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z
	DD	FLAT:?SendData@CProcessControl@@UAE_NPAUHWND__@@GG@Z
	DD	FLAT:?SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z
CONST	ENDS
;	COMDAT ??_7CProcessControl@@6BCWnd@@@
CONST	SEGMENT
??_7CProcessControl@@6BCWnd@@@ DD FLAT:??_R4CProcessControl@@6BCWnd@@@ ; CProcessControl::`vftable'
	DD	FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECProcessControl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CWnd@@UBEXXZ
	DD	FLAT:?Dump@CWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CProcessControl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?ResizeDynamicLayout@CWnd@@MAEXXZ
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
CONST	ENDS
;	COMDAT ??_7CProcessRecvData@@6B@
CONST	SEGMENT
??_7CProcessRecvData@@6B@ DD FLAT:??_R4CProcessRecvData@@6B@ ; CProcessRecvData::`vftable'
	DD	FLAT:??_ECProcessRecvData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CProcessSendData@@6B@
CONST	SEGMENT
??_7CProcessSendData@@6B@ DD FLAT:??_R4CProcessSendData@@6B@ ; CProcessSendData::`vftable'
	DD	FLAT:??_ECProcessSendData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7IProcessControl@@6B@
CONST	SEGMENT
??_7IProcessControl@@6B@ DD FLAT:??_R4IProcessControl@@6B@ ; IProcessControl::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 061H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_R2CCmdTarget@@8
rdata$r	SEGMENT
??_R2CCmdTarget@@8 DD FLAT:??_R1A@?0A@EA@CCmdTarget@@8	; CCmdTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCmdTarget@@8
rdata$r	SEGMENT
??_R3CCmdTarget@@8 DD 00H				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
data$r	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CWnd@@8
rdata$r	SEGMENT
??_R2CWnd@@8 DD	FLAT:??_R1A@?0A@EA@CWnd@@8		; CWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CWnd@@8
rdata$r	SEGMENT
??_R3CWnd@@8 DD	00H					; CWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
data$r	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_CreateProcessControl$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_CreateProcessControl$2
__catchsym$_CreateProcessControl$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_CreateProcessControl$0
__ehfuncinfo$_CreateProcessControl DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$_CreateProcessControl
	DD	02H
	DD	FLAT:__tryblocktable$_CreateProcessControl
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_CreateProcessControl DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_CreateProcessControl$5
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$_CreateProcessControl$6
__unwindtable$_CreateProcessControl DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_CreateProcessControl$4
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECProcessControl@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CProcessControl@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CProcessControl@@QAE@XZ$0
__ehfuncinfo$??0CProcessControl@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CProcessControl@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECProcessRecvData@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECProcessSendData@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001b	68 9c 02 00 00	 push	 668			; 0000029cH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00039	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0003d	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0003f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0004a	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  00067	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006b	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00073	8a 11		 mov	 dl, BYTE PTR [ecx]
  00075	88 10		 mov	 BYTE PTR [eax], dl
  00077	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT _CreateProcessControl
_TEXT	SEGMENT
tv74 = -124						; size = 4
tv146 = -120						; size = 4
tv147 = -116						; size = 4
tv143 = -116						; size = 4
tv133 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 4
$T4 = -104						; size = 4
$T5 = -100						; size = 4
$T6 = -96						; size = 4
$T7 = -92						; size = 4
_pObject$8 = -24					; size = 4
_pProcessControl$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_Guid$ = 8						; size = 4
_dwInterfaceVer$ = 12					; size = 4
_CreateProcessControl PROC				; COMDAT

; 285  : DECLARE_CREATE_MODULE(ProcessControl);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_CreateProcessControl
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pProcessControl$[ebp], 0
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	68 a8 00 00 00	 push	 168			; 000000a8H
  0003f	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  00044	89 45 8c	 mov	 DWORD PTR tv143[ebp], eax
  00047	8b 45 8c	 mov	 eax, DWORD PTR tv143[ebp]
  0004a	89 45 a0	 mov	 DWORD PTR $T6[ebp], eax
  0004d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00051	83 7d a0 00	 cmp	 DWORD PTR $T6[ebp], 0
  00055	74 13		 je	 SHORT $LN7@CreateProc
  00057	8b 4d a0	 mov	 ecx, DWORD PTR $T6[ebp]
  0005a	e8 00 00 00 00	 call	 ??0CProcessControl@@QAE@XZ ; CProcessControl::CProcessControl
  0005f	89 45 88	 mov	 DWORD PTR tv146[ebp], eax
  00062	8b 4d 88	 mov	 ecx, DWORD PTR tv146[ebp]
  00065	89 4d 84	 mov	 DWORD PTR tv74[ebp], ecx
  00068	eb 07		 jmp	 SHORT $LN8@CreateProc
$LN7@CreateProc:
  0006a	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN8@CreateProc:
  00071	8b 55 84	 mov	 edx, DWORD PTR tv74[ebp]
  00074	89 55 a4	 mov	 DWORD PTR $T7[ebp], edx
  00077	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0007b	8b 45 a4	 mov	 eax, DWORD PTR $T7[ebp]
  0007e	89 45 ec	 mov	 DWORD PTR _pProcessControl$[ebp], eax
  00081	83 7d ec 00	 cmp	 DWORD PTR _pProcessControl$[ebp], 0
  00085	75 15		 jne	 SHORT $LN3@CreateProc
  00087	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], OFFSET ??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@
  0008e	68 00 00 00 00	 push	 OFFSET __TI2PAD
  00093	8d 45 9c	 lea	 eax, DWORD PTR $T5[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@CreateProc:
  0009c	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _Guid$[ebp]
  000a3	51		 push	 ecx
  000a4	8b 4d ec	 mov	 ecx, DWORD PTR _pProcessControl$[ebp]
  000a7	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  000ad	8b 55 ec	 mov	 edx, DWORD PTR _pProcessControl$[ebp]
  000b0	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  000b6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000b9	ff d2		 call	 edx
  000bb	89 45 8c	 mov	 DWORD PTR tv147[ebp], eax
  000be	8b 45 8c	 mov	 eax, DWORD PTR tv147[ebp]
  000c1	89 45 e8	 mov	 DWORD PTR _pObject$8[ebp], eax
  000c4	83 7d e8 00	 cmp	 DWORD PTR _pObject$8[ebp], 0
  000c8	75 15		 jne	 SHORT $LN4@CreateProc
  000ca	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@
  000d1	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000d6	8d 45 98	 lea	 eax, DWORD PTR $T4[ebp]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@CreateProc:
  000df	8b 45 e8	 mov	 eax, DWORD PTR _pObject$8[ebp]
  000e2	e9 83 00 00 00	 jmp	 $LN6@CreateProc
__catch$_CreateProcessControl$0:
  000e7	b8 00 00 00 00	 mov	 eax, $LN18@CreateProc
  000ec	c3		 ret	 0
  000ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000f4	eb 07		 jmp	 SHORT __tryend$_CreateProcessControl$1
$LN18@CreateProc:
  000f6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_CreateProcessControl$1:
  000fd	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  00104	8b 45 ec	 mov	 eax, DWORD PTR _pProcessControl$[ebp]
  00107	89 45 90	 mov	 DWORD PTR $T2[ebp], eax
  0010a	8b 4d 90	 mov	 ecx, DWORD PTR $T2[ebp]
  0010d	89 4d 94	 mov	 DWORD PTR $T3[ebp], ecx
  00110	83 7d 94 00	 cmp	 DWORD PTR $T3[ebp], 0
  00114	74 14		 je	 SHORT $LN9@CreateProc
  00116	6a 01		 push	 1
  00118	8b 55 94	 mov	 edx, DWORD PTR $T3[ebp]
  0011b	8b 02		 mov	 eax, DWORD PTR [edx]
  0011d	8b 4d 94	 mov	 ecx, DWORD PTR $T3[ebp]
  00120	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00123	ff d2		 call	 edx
  00125	89 45 8c	 mov	 DWORD PTR tv133[ebp], eax
  00128	eb 07		 jmp	 SHORT $LN10@CreateProc
$LN9@CreateProc:
  0012a	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN10@CreateProc:
  00131	eb 1e		 jmp	 SHORT $LN14@CreateProc
__catch$_CreateProcessControl$2:
  00133	33 c0		 xor	 eax, eax
  00135	75 14		 jne	 SHORT $LN11@CreateProc
  00137	68 1d 01 00 00	 push	 285			; 0000011dH
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00141	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00146	85 c0		 test	 eax, eax
  00148	74 01		 je	 SHORT $LN11@CreateProc
  0014a	cc		 int	 3
$LN11@CreateProc:
  0014b	b8 00 00 00 00	 mov	 eax, $LN20@CreateProc
  00150	c3		 ret	 0
$LN14@CreateProc:
  00151	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00158	eb 07		 jmp	 SHORT __tryend$_CreateProcessControl$3
$LN20@CreateProc:
  0015a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_CreateProcessControl$3:
  00161	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pProcessControl$[ebp], 0
  00168	33 c0		 xor	 eax, eax
$LN6@CreateProc:
  0016a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0016d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00174	59		 pop	 ecx
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_CreateProcessControl$4:
  00000	8b 45 a0	 mov	 eax, DWORD PTR $T6[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  00009	c3		 ret	 0
__ehhandler$_CreateProcessControl:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_CreateProcessControl
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_CreateProcessControl ENDP
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECProcessControl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECProcessControl@@UAEPAXI@Z PROC			; CProcessControl::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECProcessControl@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 47		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CProcessControl@@UAE@XZ ; CProcessControl::~CProcessControl
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	68 a8 00 00 00	 push	 168			; 000000a8H
  00044	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00050	83 e0 01	 and	 eax, 1
  00053	74 1d		 je	 SHORT $LN3@vector
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	69 48 fc a8 00
	00 00		 imul	 ecx, DWORD PTR [eax-4], 168
  0005f	83 c1 04	 add	 ecx, 4
  00062	51		 push	 ecx
  00063	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 ea 04	 sub	 edx, 4
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006f	83 c4 08	 add	 esp, 8
$LN3@vector:
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 e8 04	 sub	 eax, 4
  00078	eb 37		 jmp	 SHORT $LN8@vector
$LN2@vector:
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1CProcessControl@@UAE@XZ ; CProcessControl::~CProcessControl
  00082	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00085	83 e0 01	 and	 eax, 1
  00088	74 24		 je	 SHORT $LN4@vector
  0008a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0008d	83 e0 04	 and	 eax, 4
  00090	75 0b		 jne	 SHORT $LN5@vector
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0009b	eb 11		 jmp	 SHORT $LN4@vector
$LN5@vector:
  0009d	68 a8 00 00 00	 push	 168			; 000000a8H
  000a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  000ab	83 c4 08	 add	 esp, 8
$LN4@vector:
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN8@vector:
  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECProcessControl@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECProcessControl@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECProcessControl@@UAEPAXI@Z ENDP			; CProcessControl::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCProcessControl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProcessControl@@UAEPAXI@Z PROC			; CProcessControl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CProcessControl@@UAE@XZ ; CProcessControl::~CProcessControl
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 24		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 11		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	68 a8 00 00 00	 push	 168			; 000000a8H
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003d	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??_GCProcessControl@@UAEPAXI@Z ENDP			; CProcessControl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?GetMessageMap@CProcessControl@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMessageMap@CProcessControl@@MBEPBUAFX_MSGMAP@@XZ PROC ; CProcessControl::GetMessageMap, COMDAT
; _this$ = ecx

; 27   : BEGIN_MESSAGE_MAP(CProcessControl, CWnd)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	e8 00 00 00 00	 call	 ?GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ ; CProcessControl::GetThisMessageMap
  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetMessageMap@CProcessControl@@MBEPBUAFX_MSGMAP@@XZ ENDP ; CProcessControl::GetMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ PROC ; CProcessControl::GetThisMessageMap, COMDAT

; 27   : BEGIN_MESSAGE_MAP(CProcessControl, CWnd)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 28   : 	ON_WM_COPYDATA()
; 29   : 	ON_MESSAGE(WM_ASYNCHRONISM_DATA,OnMessageAsynchronismData)
; 30   : END_MESSAGE_MAP()

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetThisMessageMap@CProcessControl@@KGPBUAFX_MSGMAP@@XZ ENDP ; CProcessControl::GetThisMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z
_TEXT	SEGMENT
_wMainCmdID$ = -10268					; size = 2
_wSubCmdID$ = -10264					; size = 2
_hWndClient$ = -10260					; size = 4
_AsynchronismData$ = -10256				; size = 10244
_DataHead$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z PROC ; CProcessControl::OnMessageAsynchronismData, COMDAT
; _this$ = ecx

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 1c 2a 00 00	 mov	 eax, 10780		; 00002a1cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 260  : 	//提取数据
; 261  : 	tagDataHead DataHead;
; 262  : 	tagAsynchronismData AsynchronismData;
; 263  : 	if (m_DataQueue.DistillData(DataHead,&AsynchronismData,sizeof(AsynchronismData))==false)

  0001d	68 04 28 00 00	 push	 10244			; 00002804H
  00022	8d 85 f0 d7 ff
	ff		 lea	 eax, DWORD PTR _AsynchronismData$[ebp]
  00028	50		 push	 eax
  00029	8d 4d f4	 lea	 ecx, DWORD PTR _DataHead$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z
  0003c	0f b6 d0	 movzx	 edx, al
  0003f	85 d2		 test	 edx, edx
  00041	75 24		 jne	 SHORT $LN2@OnMessageA

; 264  : 	{
; 265  : 		ASSERT(FALSE);

  00043	33 c0		 xor	 eax, eax
  00045	75 19		 jne	 SHORT $LN5@OnMessageA
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z@4JA
  0004d	83 c1 06	 add	 ecx, 6
  00050	51		 push	 ecx
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00056	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005b	85 c0		 test	 eax, eax
  0005d	74 01		 je	 SHORT $LN5@OnMessageA
  0005f	cc		 int	 3
$LN5@OnMessageA:

; 266  : 		return 0;

  00060	33 c0		 xor	 eax, eax
  00062	e9 9e 00 00 00	 jmp	 $LN1@OnMessageA
$LN2@OnMessageA:

; 267  : 	}
; 268  : 
; 269  : 	//状态效验
; 270  : 	ASSERT(m_pIProcessControlSink!=NULL);

  00067	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00071	75 19		 jne	 SHORT $LN6@OnMessageA
  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z@4JA
  00079	83 c1 0b	 add	 ecx, 11			; 0000000bH
  0007c	51		 push	 ecx
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00082	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00087	85 c0		 test	 eax, eax
  00089	74 01		 je	 SHORT $LN6@OnMessageA
  0008b	cc		 int	 3
$LN6@OnMessageA:

; 271  : 	if (m_pIProcessControlSink==NULL) return 0;

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00096	75 04		 jne	 SHORT $LN3@OnMessageA
  00098	33 c0		 xor	 eax, eax
  0009a	eb 69		 jmp	 SHORT $LN1@OnMessageA
$LN3@OnMessageA:

; 272  : 
; 273  : 	//数据处理
; 274  : 	HWND hWndClient=AsynchronismData.hWndSend;

  0009c	8b 85 f0 d7 ff
	ff		 mov	 eax, DWORD PTR _AsynchronismData$[ebp]
  000a2	89 85 ec d7 ff
	ff		 mov	 DWORD PTR _hWndClient$[ebp], eax

; 275  : 	WORD wSubCmdID=AsynchronismData.wSubCmdID;

  000a8	66 8b 85 f6 d7
	ff ff		 mov	 ax, WORD PTR _AsynchronismData$[ebp+6]
  000af	66 89 85 e8 d7
	ff ff		 mov	 WORD PTR _wSubCmdID$[ebp], ax

; 276  : 	WORD wMainCmdID=AsynchronismData.wMainCmdID;

  000b6	66 8b 85 f8 d7
	ff ff		 mov	 ax, WORD PTR _AsynchronismData$[ebp+8]
  000bd	66 89 85 e4 d7
	ff ff		 mov	 WORD PTR _wMainCmdID$[ebp], ax

; 277  : 	m_pIProcessControlSink->OnProcessControlData(wMainCmdID,wSubCmdID,AsynchronismData.cbBuffer,AsynchronismData.wDataSize,hWndClient);

  000c4	8b 85 ec d7 ff
	ff		 mov	 eax, DWORD PTR _hWndClient$[ebp]
  000ca	50		 push	 eax
  000cb	0f b7 8d f4 d7
	ff ff		 movzx	 ecx, WORD PTR _AsynchronismData$[ebp+4]
  000d2	51		 push	 ecx
  000d3	8d 95 fa d7 ff
	ff		 lea	 edx, DWORD PTR _AsynchronismData$[ebp+10]
  000d9	52		 push	 edx
  000da	0f b7 85 e8 d7
	ff ff		 movzx	 eax, WORD PTR _wSubCmdID$[ebp]
  000e1	50		 push	 eax
  000e2	0f b7 8d e4 d7
	ff ff		 movzx	 ecx, WORD PTR _wMainCmdID$[ebp]
  000e9	51		 push	 ecx
  000ea	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ed	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  000f3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	8b 10		 mov	 edx, DWORD PTR [eax]
  000f8	8b 89 a4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+164]
  000fe	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00101	ff d0		 call	 eax

; 278  : 
; 279  : 	return 0;

  00103	33 c0		 xor	 eax, eax
$LN1@OnMessageA:

; 280  : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	33 cd		 xor	 ecx, ebp
  0010d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
?OnMessageAsynchronismData@CProcessControl@@IAEJIJ@Z ENDP ; CProcessControl::OnMessageAsynchronismData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z
_TEXT	SEGMENT
tv138 = -10780						; size = 4
_wHeadSize$1 = -10264					; size = 2
_AsynchronismData$2 = -10260				; size = 10244
_wDataSize$3 = -16					; size = 2
_pHead$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pWnd$ = 8						; size = 4
_pCopyDataStruct$ = 12					; size = 4
?OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z PROC ; CProcessControl::OnCopyData, COMDAT
; _this$ = ecx

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 1c 2a 00 00	 mov	 eax, 10780		; 00002a1cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 	//效验接口
; 209  : 	ASSERT(m_pIProcessControlSink!=NULL);

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  00027	75 19		 jne	 SHORT $LN12@OnCopyData
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z@4JA
  0002f	83 c1 02	 add	 ecx, 2
  00032	51		 push	 ecx
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN12@OnCopyData
  00041	cc		 int	 3
$LN12@OnCopyData:

; 210  : 	if (m_pIProcessControlSink==NULL) return FALSE;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [eax+164], 0
  0004c	75 07		 jne	 SHORT $LN4@OnCopyData
  0004e	33 c0		 xor	 eax, eax
  00050	e9 eb 01 00 00	 jmp	 $LN1@OnCopyData
$LN4@OnCopyData:

; 211  : 
; 212  : 	//效验参数
; 213  : 	ASSERT(pCopyDataStruct->cbData>=sizeof(IPC_Head));

  00055	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  00058	83 78 04 08	 cmp	 DWORD PTR [eax+4], 8
  0005c	73 19		 jae	 SHORT $LN13@OnCopyData
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z@4JA
  00064	83 c1 06	 add	 ecx, 6
  00067	51		 push	 ecx
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00072	85 c0		 test	 eax, eax
  00074	74 01		 je	 SHORT $LN13@OnCopyData
  00076	cc		 int	 3
$LN13@OnCopyData:

; 214  : 	if (pCopyDataStruct->cbData<sizeof(IPC_Head)) return FALSE;

  00077	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  0007a	83 78 04 08	 cmp	 DWORD PTR [eax+4], 8
  0007e	73 07		 jae	 SHORT $LN5@OnCopyData
  00080	33 c0		 xor	 eax, eax
  00082	e9 b9 01 00 00	 jmp	 $LN1@OnCopyData
$LN5@OnCopyData:

; 215  : 
; 216  : 	//效验数据
; 217  : 	IPC_Head * pHead=(IPC_Head *)pCopyDataStruct->lpData;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  0008a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008d	89 4d f4	 mov	 DWORD PTR _pHead$[ebp], ecx

; 218  : 	ASSERT((pHead->wVersion==IPC_VER)&&(pHead->wPacketSize==pCopyDataStruct->cbData));

  00090	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  00093	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00096	83 f9 01	 cmp	 ecx, 1
  00099	75 0f		 jne	 SHORT $LN14@OnCopyData
  0009b	8b 55 f4	 mov	 edx, DWORD PTR _pHead$[ebp]
  0009e	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR _pCopyDataStruct$[ebp]
  000a5	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a8	74 19		 je	 SHORT $LN15@OnCopyData
$LN14@OnCopyData:
  000aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z@4JA
  000b0	83 c2 0b	 add	 edx, 11			; 0000000bH
  000b3	52		 push	 edx
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000b9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000be	85 c0		 test	 eax, eax
  000c0	74 01		 je	 SHORT $LN15@OnCopyData
  000c2	cc		 int	 3
$LN15@OnCopyData:

; 219  : 	if ((pHead->wVersion!=IPC_VER)||(pHead->wPacketSize!=pCopyDataStruct->cbData)) return FALSE;

  000c3	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  000c6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000c9	83 f9 01	 cmp	 ecx, 1
  000cc	75 0f		 jne	 SHORT $LN7@OnCopyData
  000ce	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  000d1	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000d5	8b 55 0c	 mov	 edx, DWORD PTR _pCopyDataStruct$[ebp]
  000d8	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  000db	74 07		 je	 SHORT $LN6@OnCopyData
$LN7@OnCopyData:
  000dd	33 c0		 xor	 eax, eax
  000df	e9 5c 01 00 00	 jmp	 $LN1@OnCopyData
$LN6@OnCopyData:

; 220  : 
; 221  : 	//数据处理
; 222  : 	switch (pCopyDataStruct->dwData)

  000e4	8b 45 0c	 mov	 eax, DWORD PTR _pCopyDataStruct$[ebp]
  000e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e9	89 8d e4 d5 ff
	ff		 mov	 DWORD PTR tv138[ebp], ecx
  000ef	81 bd e4 d5 ff
	ff 01 01 00 00	 cmp	 DWORD PTR tv138[ebp], 257 ; 00000101H
  000f9	74 11		 je	 SHORT $LN8@OnCopyData
  000fb	81 bd e4 d5 ff
	ff 01 02 00 00	 cmp	 DWORD PTR tv138[ebp], 513 ; 00000201H
  00105	74 59		 je	 SHORT $LN9@OnCopyData
  00107	e9 2f 01 00 00	 jmp	 $LN2@OnCopyData
$LN8@OnCopyData:

; 223  : 	{
; 224  : 	case IDT_IMMEDIATE:			//同步数据
; 225  : 		{
; 226  : 			//数据处理
; 227  : 			WORD wDataSize=pHead->wPacketSize-sizeof(IPC_Head);

  0010c	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  0010f	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00113	83 e9 08	 sub	 ecx, 8
  00116	66 89 4d f0	 mov	 WORD PTR _wDataSize$3[ebp], cx

; 228  : 			m_pIProcessControlSink->OnProcessControlData(pHead->wMainCmdID,pHead->wSubCmdID,pHead+1,wDataSize,pWnd->m_hWnd);

  0011a	8b 45 08	 mov	 eax, DWORD PTR _pWnd$[ebp]
  0011d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00120	51		 push	 ecx
  00121	0f b7 55 f0	 movzx	 edx, WORD PTR _wDataSize$3[ebp]
  00125	52		 push	 edx
  00126	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  00129	83 c0 08	 add	 eax, 8
  0012c	50		 push	 eax
  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _pHead$[ebp]
  00130	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  00134	52		 push	 edx
  00135	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  00138	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  0013c	51		 push	 ecx
  0013d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00140	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00146	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	8b 10		 mov	 edx, DWORD PTR [eax]
  0014b	8b 89 a4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+164]
  00151	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00154	ff d0		 call	 eax

; 229  : 
; 230  : 			return true;

  00156	b8 01 00 00 00	 mov	 eax, 1
  0015b	e9 e0 00 00 00	 jmp	 $LN1@OnCopyData
$LN9@OnCopyData:

; 231  : 		}
; 232  : 	case IDT_ASYNCHRONISM:		//异步数据
; 233  : 		{
; 234  : 			//构造数据
; 235  : 			tagAsynchronismData AsynchronismData;
; 236  : 			AsynchronismData.wSubCmdID=pHead->wSubCmdID;

  00160	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  00163	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  00167	66 89 8d f2 d7
	ff ff		 mov	 WORD PTR _AsynchronismData$2[ebp+6], cx

; 237  : 			AsynchronismData.wMainCmdID=pHead->wMainCmdID;

  0016e	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  00171	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00175	66 89 8d f4 d7
	ff ff		 mov	 WORD PTR _AsynchronismData$2[ebp+8], cx

; 238  : 			AsynchronismData.hWndSend=pWnd->GetSafeHwnd();

  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  0017f	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00184	89 85 ec d7 ff
	ff		 mov	 DWORD PTR _AsynchronismData$2[ebp], eax

; 239  : 			AsynchronismData.wDataSize=pHead->wPacketSize-sizeof(IPC_Head);

  0018a	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  0018d	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00191	83 e9 08	 sub	 ecx, 8
  00194	66 89 8d f0 d7
	ff ff		 mov	 WORD PTR _AsynchronismData$2[ebp+4], cx

; 240  : 			CopyMemory(&AsynchronismData.cbBuffer,pHead+1,pHead->wPacketSize-sizeof(IPC_Head));

  0019b	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  0019e	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  001a2	83 e9 08	 sub	 ecx, 8
  001a5	51		 push	 ecx
  001a6	8b 55 f4	 mov	 edx, DWORD PTR _pHead$[ebp]
  001a9	83 c2 08	 add	 edx, 8
  001ac	52		 push	 edx
  001ad	8d 85 f6 d7 ff
	ff		 lea	 eax, DWORD PTR _AsynchronismData$2[ebp+10]
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 _memcpy
  001b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 241  : 
; 242  : 			//插入数据
; 243  : 			WORD wHeadSize=sizeof(AsynchronismData)-sizeof(AsynchronismData.cbBuffer);

  001bc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001c1	66 89 85 e8 d7
	ff ff		 mov	 WORD PTR _wHeadSize$1[ebp], ax

; 244  : 			m_DataQueue.InsertData(IDT_ASYNCHRONISM,&AsynchronismData,wHeadSize+AsynchronismData.wDataSize);

  001c8	0f b7 85 e8 d7
	ff ff		 movzx	 eax, WORD PTR _wHeadSize$1[ebp]
  001cf	0f b7 8d f0 d7
	ff ff		 movzx	 ecx, WORD PTR _AsynchronismData$2[ebp+4]
  001d6	03 c1		 add	 eax, ecx
  001d8	50		 push	 eax
  001d9	8d 95 ec d7 ff
	ff		 lea	 edx, DWORD PTR _AsynchronismData$2[ebp]
  001df	52		 push	 edx
  001e0	68 01 02 00 00	 push	 513			; 00000201H
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?InsertData@CWHDataQueue@@QAE_NGPAXG@Z

; 245  : 
; 246  : 			//投递消息
; 247  : 			ASSERT(pWnd!=NULL);

  001f4	83 7d 08 00	 cmp	 DWORD PTR _pWnd$[ebp], 0
  001f8	75 18		 jne	 SHORT $LN16@OnCopyData
  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z@4JA
  001ff	83 c0 28	 add	 eax, 40			; 00000028H
  00202	50		 push	 eax
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00208	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0020d	85 c0		 test	 eax, eax
  0020f	74 01		 je	 SHORT $LN16@OnCopyData
  00211	cc		 int	 3
$LN16@OnCopyData:

; 248  : 			if (pWnd!=NULL) PostMessage(WM_ASYNCHRONISM_DATA,(WPARAM)(pWnd->m_hWnd),(LPARAM)(pHead->wPacketSize));

  00212	83 7d 08 00	 cmp	 DWORD PTR _pWnd$[ebp], 0
  00216	74 1c		 je	 SHORT $LN10@OnCopyData
  00218	8b 45 f4	 mov	 eax, DWORD PTR _pHead$[ebp]
  0021b	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0021f	51		 push	 ecx
  00220	8b 55 08	 mov	 edx, DWORD PTR _pWnd$[ebp]
  00223	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00226	50		 push	 eax
  00227	68 64 04 00 00	 push	 1124			; 00000464H
  0022c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0022f	e8 00 00 00 00	 call	 ?PostMessageA@CWnd@@QAEHIIJ@Z ; CWnd::PostMessageA
$LN10@OnCopyData:

; 249  : 
; 250  : 			return true;

  00234	b8 01 00 00 00	 mov	 eax, 1
  00239	eb 05		 jmp	 SHORT $LN1@OnCopyData
$LN2@OnCopyData:

; 251  : 		}
; 252  : 	}
; 253  : 
; 254  : 	return TRUE;

  0023b	b8 01 00 00 00	 mov	 eax, 1
$LN1@OnCopyData:

; 255  : }

  00240	5f		 pop	 edi
  00241	5e		 pop	 esi
  00242	5b		 pop	 ebx
  00243	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00246	33 cd		 xor	 ecx, ebp
  00248	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024d	8b e5		 mov	 esp, ebp
  0024f	5d		 pop	 ebp
  00250	c2 08 00	 ret	 8
?OnCopyData@CProcessControl@@IAEHPAVCWnd@@PAUtagCOPYDATASTRUCT@@@Z ENDP ; CProcessControl::OnCopyData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z
_TEXT	SEGMENT
_CopyDataStruct$ = -10260				; size = 12
_IPCBuffer$ = -10248					; size = 10240
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWndServer$ = 8					; size = 4
_wMainCmdID$ = 12					; size = 2
_wSubCmdID$ = 16					; size = 2
_pData$ = 20						; size = 4
_wDataSize$ = 24					; size = 2
?SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z PROC ; CProcessControl::SendCommand, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 14 2a 00 00	 mov	 eax, 10772		; 00002a14H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 	//效验参数
; 173  : 	if (IsWindow(m_hWnd)==FALSE) return false;

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 a0	 mov	 ecx, DWORD PTR [eax-96]
  00023	51		 push	 ecx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN2@SendComman
  0002e	32 c0		 xor	 al, al
  00030	e9 e7 00 00 00	 jmp	 $LN1@SendComman
$LN2@SendComman:

; 174  : 	if (IsWindow(hWndServer)==FALSE) return false;

  00035	8b 45 08	 mov	 eax, DWORD PTR _hWndServer$[ebp]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0003f	85 c0		 test	 eax, eax
  00041	75 07		 jne	 SHORT $LN3@SendComman
  00043	32 c0		 xor	 al, al
  00045	e9 d2 00 00 00	 jmp	 $LN1@SendComman
$LN3@SendComman:

; 175  : 
; 176  : 	//构造数据
; 177  : 	IPC_Buffer IPCBuffer;
; 178  : 	IPCBuffer.Head.wVersion=IPC_VER;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	66 89 85 f8 d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp], ax

; 179  : 	IPCBuffer.Head.wSubCmdID=wSubCmdID;

  00056	66 8b 45 10	 mov	 ax, WORD PTR _wSubCmdID$[ebp]
  0005a	66 89 85 fe d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+6], ax

; 180  : 	IPCBuffer.Head.wMainCmdID=wMainCmdID;

  00061	66 8b 45 0c	 mov	 ax, WORD PTR _wMainCmdID$[ebp]
  00065	66 89 85 fc d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+4], ax

; 181  : 	IPCBuffer.Head.wPacketSize=sizeof(IPCBuffer.Head);

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	66 89 85 fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], ax

; 182  : 
; 183  : 	//附加数据
; 184  : 	if (pData!=NULL)

  00078	83 7d 14 00	 cmp	 DWORD PTR _pData$[ebp], 0
  0007c	74 5f		 je	 SHORT $LN4@SendComman

; 185  : 	{
; 186  : 		//效验长度
; 187  : 		ASSERT(wDataSize<=sizeof(IPCBuffer.cbBuffer));

  0007e	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00082	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  00087	76 19		 jbe	 SHORT $LN7@SendComman
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA
  0008f	83 c1 10	 add	 ecx, 16			; 00000010H
  00092	51		 push	 ecx
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00098	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0009d	85 c0		 test	 eax, eax
  0009f	74 01		 je	 SHORT $LN7@SendComman
  000a1	cc		 int	 3
$LN7@SendComman:

; 188  : 		if (wDataSize>sizeof(IPCBuffer.cbBuffer)) return false;

  000a2	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000a6	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  000ab	76 04		 jbe	 SHORT $LN5@SendComman
  000ad	32 c0		 xor	 al, al
  000af	eb 6b		 jmp	 SHORT $LN1@SendComman
$LN5@SendComman:

; 189  : 
; 190  : 		//拷贝数据
; 191  : 		IPCBuffer.Head.wPacketSize+=wDataSize;

  000b1	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000b5	0f b7 8d fa d7
	ff ff		 movzx	 ecx, WORD PTR _IPCBuffer$[ebp+2]
  000bc	03 c8		 add	 ecx, eax
  000be	66 89 8d fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], cx

; 192  : 		CopyMemory(IPCBuffer.cbBuffer,pData,wDataSize);

  000c5	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000c9	50		 push	 eax
  000ca	8b 4d 14	 mov	 ecx, DWORD PTR _pData$[ebp]
  000cd	51		 push	 ecx
  000ce	8d 95 00 d8 ff
	ff		 lea	 edx, DWORD PTR _IPCBuffer$[ebp+8]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 _memcpy
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SendComman:

; 193  : 	}
; 194  : 
; 195  : 	//发送数据
; 196  : 	COPYDATASTRUCT CopyDataStruct;
; 197  : 	CopyDataStruct.lpData=&IPCBuffer;

  000dd	8d 85 f8 d7 ff
	ff		 lea	 eax, DWORD PTR _IPCBuffer$[ebp]
  000e3	89 85 f4 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+8], eax

; 198  : 	CopyDataStruct.dwData=IDT_IMMEDIATE;

  000e9	c7 85 ec d7 ff
	ff 01 01 00 00	 mov	 DWORD PTR _CopyDataStruct$[ebp], 257 ; 00000101H

; 199  : 	CopyDataStruct.cbData=IPCBuffer.Head.wPacketSize;

  000f3	0f b7 85 fa d7
	ff ff		 movzx	 eax, WORD PTR _IPCBuffer$[ebp+2]
  000fa	89 85 f0 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+4], eax

; 200  : 	::SendMessage(hWndServer,WM_COPYDATA,(LPARAM)m_hWnd,(WPARAM)&CopyDataStruct);

  00100	8d 85 ec d7 ff
	ff		 lea	 eax, DWORD PTR _CopyDataStruct$[ebp]
  00106	50		 push	 eax
  00107	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 51 a0	 mov	 edx, DWORD PTR [ecx-96]
  0010d	52		 push	 edx
  0010e	6a 4a		 push	 74			; 0000004aH
  00110	8b 45 08	 mov	 eax, DWORD PTR _hWndServer$[ebp]
  00113	50		 push	 eax
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 201  : 
; 202  : 	return true;

  0011a	b0 01		 mov	 al, 1
$LN1@SendComman:

; 203  : }

  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 14 00	 ret	 20			; 00000014H
?SendCommand@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z ENDP ; CProcessControl::SendCommand
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z
_TEXT	SEGMENT
_CopyDataStruct$ = -10260				; size = 12
_IPCBuffer$ = -10248					; size = 10240
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWndServer$ = 8					; size = 4
_wMainCmdID$ = 12					; size = 2
_wSubCmdID$ = 16					; size = 2
_pData$ = 20						; size = 4
_wDataSize$ = 24					; size = 2
?SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z PROC ; CProcessControl::SendData, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 14 2a 00 00	 mov	 eax, 10772		; 00002a14H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 136  : 	//效验参数
; 137  : 	if (IsWindow(m_hWnd)==FALSE) return false;

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 a0	 mov	 ecx, DWORD PTR [eax-96]
  00023	51		 push	 ecx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN2@SendData
  0002e	32 c0		 xor	 al, al
  00030	e9 e7 00 00 00	 jmp	 $LN1@SendData
$LN2@SendData:

; 138  : 	if (IsWindow(hWndServer)==FALSE) return false;

  00035	8b 45 08	 mov	 eax, DWORD PTR _hWndServer$[ebp]
  00038	50		 push	 eax
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0003f	85 c0		 test	 eax, eax
  00041	75 07		 jne	 SHORT $LN3@SendData
  00043	32 c0		 xor	 al, al
  00045	e9 d2 00 00 00	 jmp	 $LN1@SendData
$LN3@SendData:

; 139  : 
; 140  : 	//构造数据
; 141  : 	IPC_Buffer IPCBuffer;
; 142  : 	IPCBuffer.Head.wVersion=IPC_VER;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	66 89 85 f8 d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp], ax

; 143  : 	IPCBuffer.Head.wSubCmdID=wSubCmdID;

  00056	66 8b 45 10	 mov	 ax, WORD PTR _wSubCmdID$[ebp]
  0005a	66 89 85 fe d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+6], ax

; 144  : 	IPCBuffer.Head.wMainCmdID=wMainCmdID;

  00061	66 8b 45 0c	 mov	 ax, WORD PTR _wMainCmdID$[ebp]
  00065	66 89 85 fc d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+4], ax

; 145  : 	IPCBuffer.Head.wPacketSize=sizeof(IPCBuffer.Head);

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	66 89 85 fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], ax

; 146  : 
; 147  : 	//附加数据
; 148  : 	if (pData!=NULL)

  00078	83 7d 14 00	 cmp	 DWORD PTR _pData$[ebp], 0
  0007c	74 5f		 je	 SHORT $LN4@SendData

; 149  : 	{
; 150  : 		//效验长度
; 151  : 		ASSERT(wDataSize<=sizeof(IPCBuffer.cbBuffer));

  0007e	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00082	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  00087	76 19		 jbe	 SHORT $LN7@SendData
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z@4JA
  0008f	83 c1 10	 add	 ecx, 16			; 00000010H
  00092	51		 push	 ecx
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00098	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0009d	85 c0		 test	 eax, eax
  0009f	74 01		 je	 SHORT $LN7@SendData
  000a1	cc		 int	 3
$LN7@SendData:

; 152  : 		if (wDataSize>sizeof(IPCBuffer.cbBuffer)) return false;

  000a2	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000a6	3d f8 27 00 00	 cmp	 eax, 10232		; 000027f8H
  000ab	76 04		 jbe	 SHORT $LN5@SendData
  000ad	32 c0		 xor	 al, al
  000af	eb 6b		 jmp	 SHORT $LN1@SendData
$LN5@SendData:

; 153  : 
; 154  : 		//拷贝数据
; 155  : 		IPCBuffer.Head.wPacketSize+=wDataSize;

  000b1	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000b5	0f b7 8d fa d7
	ff ff		 movzx	 ecx, WORD PTR _IPCBuffer$[ebp+2]
  000bc	03 c8		 add	 ecx, eax
  000be	66 89 8d fa d7
	ff ff		 mov	 WORD PTR _IPCBuffer$[ebp+2], cx

; 156  : 		CopyMemory(IPCBuffer.cbBuffer,pData,wDataSize);

  000c5	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000c9	50		 push	 eax
  000ca	8b 4d 14	 mov	 ecx, DWORD PTR _pData$[ebp]
  000cd	51		 push	 ecx
  000ce	8d 95 00 d8 ff
	ff		 lea	 edx, DWORD PTR _IPCBuffer$[ebp+8]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 _memcpy
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@SendData:

; 157  : 	}
; 158  : 
; 159  : 	//发送数据
; 160  : 	COPYDATASTRUCT CopyDataStruct;
; 161  : 	CopyDataStruct.lpData=&IPCBuffer;

  000dd	8d 85 f8 d7 ff
	ff		 lea	 eax, DWORD PTR _IPCBuffer$[ebp]
  000e3	89 85 f4 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+8], eax

; 162  : 	CopyDataStruct.dwData=IDT_ASYNCHRONISM;

  000e9	c7 85 ec d7 ff
	ff 01 02 00 00	 mov	 DWORD PTR _CopyDataStruct$[ebp], 513 ; 00000201H

; 163  : 	CopyDataStruct.cbData=IPCBuffer.Head.wPacketSize;

  000f3	0f b7 85 fa d7
	ff ff		 movzx	 eax, WORD PTR _IPCBuffer$[ebp+2]
  000fa	89 85 f0 d7 ff
	ff		 mov	 DWORD PTR _CopyDataStruct$[ebp+4], eax

; 164  : 	::SendMessage(hWndServer,WM_COPYDATA,(LPARAM)m_hWnd,(WPARAM)&CopyDataStruct);

  00100	8d 85 ec d7 ff
	ff		 lea	 eax, DWORD PTR _CopyDataStruct$[ebp]
  00106	50		 push	 eax
  00107	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 51 a0	 mov	 edx, DWORD PTR [ecx-96]
  0010d	52		 push	 edx
  0010e	6a 4a		 push	 74			; 0000004aH
  00110	8b 45 08	 mov	 eax, DWORD PTR _hWndServer$[ebp]
  00113	50		 push	 eax
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 165  : 
; 166  : 	return true;

  0011a	b0 01		 mov	 al, 1
$LN1@SendData:

; 167  : }

  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 14 00	 ret	 20			; 00000014H
?SendData@CProcessControl@@UAE_NPAUHWND__@@GGQAXG@Z ENDP ; CProcessControl::SendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?SendData@CProcessControl@@UAE_NPAUHWND__@@GG@Z
_TEXT	SEGMENT
_CopyDataStruct$ = -24					; size = 12
_IPCHead$ = -12						; size = 8
_this$ = -4						; size = 4
_hWndServer$ = 8					; size = 4
_wMainCmdID$ = 12					; size = 2
_wSubCmdID$ = 16					; size = 2
?SendData@CProcessControl@@UAE_NPAUHWND__@@GG@Z PROC	; CProcessControl::SendData, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	//效验参数
; 113  : 	if (IsWindow(m_hWnd)==FALSE) return false;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 a0	 mov	 ecx, DWORD PTR [eax-96]
  00012	51		 push	 ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00019	85 c0		 test	 eax, eax
  0001b	75 04		 jne	 SHORT $LN2@SendData
  0001d	32 c0		 xor	 al, al
  0001f	eb 61		 jmp	 SHORT $LN1@SendData
$LN2@SendData:

; 114  : 	if (IsWindow(hWndServer)==FALSE) return false;

  00021	8b 45 08	 mov	 eax, DWORD PTR _hWndServer$[ebp]
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  0002b	85 c0		 test	 eax, eax
  0002d	75 04		 jne	 SHORT $LN3@SendData
  0002f	32 c0		 xor	 al, al
  00031	eb 4f		 jmp	 SHORT $LN1@SendData
$LN3@SendData:

; 115  : 
; 116  : 	//构造数据
; 117  : 	IPC_Head IPCHead;
; 118  : 	IPCHead.wVersion=IPC_VER;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	66 89 45 f4	 mov	 WORD PTR _IPCHead$[ebp], ax

; 119  : 	IPCHead.wSubCmdID=wSubCmdID;

  0003c	66 8b 45 10	 mov	 ax, WORD PTR _wSubCmdID$[ebp]
  00040	66 89 45 fa	 mov	 WORD PTR _IPCHead$[ebp+6], ax

; 120  : 	IPCHead.wMainCmdID=wMainCmdID;

  00044	66 8b 45 0c	 mov	 ax, WORD PTR _wMainCmdID$[ebp]
  00048	66 89 45 f8	 mov	 WORD PTR _IPCHead$[ebp+4], ax

; 121  : 	IPCHead.wPacketSize=sizeof(IPC_Head);

  0004c	b8 08 00 00 00	 mov	 eax, 8
  00051	66 89 45 f6	 mov	 WORD PTR _IPCHead$[ebp+2], ax

; 122  : 
; 123  : 	//发送数据
; 124  : 	COPYDATASTRUCT CopyDataStruct;
; 125  : 	CopyDataStruct.lpData=&IPCHead;

  00055	8d 45 f4	 lea	 eax, DWORD PTR _IPCHead$[ebp]
  00058	89 45 f0	 mov	 DWORD PTR _CopyDataStruct$[ebp+8], eax

; 126  : 	CopyDataStruct.dwData=IDT_ASYNCHRONISM;

  0005b	c7 45 e8 01 02
	00 00		 mov	 DWORD PTR _CopyDataStruct$[ebp], 513 ; 00000201H

; 127  : 	CopyDataStruct.cbData=IPCHead.wPacketSize;

  00062	0f b7 45 f6	 movzx	 eax, WORD PTR _IPCHead$[ebp+2]
  00066	89 45 ec	 mov	 DWORD PTR _CopyDataStruct$[ebp+4], eax

; 128  : 	::SendMessage(hWndServer,WM_COPYDATA,(LPARAM)m_hWnd,(WPARAM)&CopyDataStruct);

  00069	8d 45 e8	 lea	 eax, DWORD PTR _CopyDataStruct$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 51 a0	 mov	 edx, DWORD PTR [ecx-96]
  00073	52		 push	 edx
  00074	6a 4a		 push	 74			; 0000004aH
  00076	8b 45 08	 mov	 eax, DWORD PTR _hWndServer$[ebp]
  00079	50		 push	 eax
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 129  : 
; 130  : 	return true;

  00080	b0 01		 mov	 al, 1
$LN1@SendData:

; 131  : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?SendData@CProcessControl@@UAE_NPAUHWND__@@GG@Z ENDP	; CProcessControl::SendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?UnInitializeLink@CProcessControl@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnInitializeLink@CProcessControl@@UAE_NXZ PROC		; CProcessControl::UnInitializeLink, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 	//清理队列
; 101  : 	m_DataQueue.RemoveData(false);

  0000c	6a 00		 push	 0
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RemoveData@CWHDataQueue@@QAEX_N@Z

; 102  : 
; 103  : 	//关闭窗口
; 104  : 	if (m_hWnd!=NULL) DestroyWindow();

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 78 a0 00	 cmp	 DWORD PTR [eax-96], 0
  00021	74 14		 je	 SHORT $LN2@UnInitiali
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 e9 80 00 00
	00		 sub	 ecx, 128		; 00000080H
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 50 80	 mov	 edx, DWORD PTR [eax-128]
  00032	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00035	ff d0		 call	 eax
$LN2@UnInitiali:

; 105  : 
; 106  : 	return true;

  00037	b0 01		 mov	 al, 1

; 107  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?UnInitializeLink@CProcessControl@@UAE_NXZ ENDP		; CProcessControl::UnInitializeLink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?InitializeLink@CProcessControl@@UAE_NXZ
_TEXT	SEGMENT
_rcCreate$1 = -24					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?InitializeLink@CProcessControl@@UAE_NXZ PROC		; CProcessControl::InitializeLink, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	//效验参数
; 84   : 	ASSERT(m_pIProcessControlSink!=NULL);

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0001d	75 19		 jne	 SHORT $LN5@Initialize
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InitializeLink@CProcessControl@@UAE_NXZ@4JA
  00025	83 c1 02	 add	 ecx, 2
  00028	51		 push	 ecx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00033	85 c0		 test	 eax, eax
  00035	74 01		 je	 SHORT $LN5@Initialize
  00037	cc		 int	 3
$LN5@Initialize:

; 85   : 	if (m_pIProcessControlSink==NULL) return false;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0003f	75 04		 jne	 SHORT $LN2@Initialize
  00041	32 c0		 xor	 al, al
  00043	eb 46		 jmp	 SHORT $LN1@Initialize
$LN2@Initialize:

; 86   : 
; 87   : 	//创建窗口
; 88   : 	if (m_hWnd==NULL)

  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 78 a0 00	 cmp	 DWORD PTR [eax-96], 0
  0004c	75 3b		 jne	 SHORT $LN3@Initialize

; 89   : 	{
; 90   : 		CRect rcCreate(0,0,0,0);

  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	8d 4d e8	 lea	 ecx, DWORD PTR _rcCreate$1[ebp]
  00059	e8 00 00 00 00	 call	 ??0CRect@@QAE@HHHH@Z	; CRect::CRect

; 91   : 		Create(NULL,NULL,WS_CHILD,rcCreate,GetDesktopWindow(),IDC_PROCESS_CONTROL);

  0005e	6a 00		 push	 0
  00060	6a 64		 push	 100			; 00000064H
  00062	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  00067	50		 push	 eax
  00068	8d 45 e8	 lea	 eax, DWORD PTR _rcCreate$1[ebp]
  0006b	50		 push	 eax
  0006c	68 00 00 00 40	 push	 1073741824		; 40000000H
  00071	6a 00		 push	 0
  00073	6a 00		 push	 0
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	81 e9 80 00 00
	00		 sub	 ecx, 128		; 00000080H
  0007e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 42 80	 mov	 eax, DWORD PTR [edx-128]
  00084	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  00087	ff d2		 call	 edx
$LN3@Initialize:

; 92   : 	}
; 93   : 
; 94   : 	return true;

  00089	b0 01		 mov	 al, 1
$LN1@Initialize:

; 95   : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00091	33 cd		 xor	 ecx, ebp
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?InitializeLink@CProcessControl@@UAE_NXZ ENDP		; CProcessControl::InitializeLink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z
_TEXT	SEGMENT
tv89 = -72						; size = 4
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_pIUnknownEx$ = 8					; size = 4
?SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z PROC ; CProcessControl::SetProcessControlSink, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   : 	//设置接口
; 66   : 	if (pIUnknownEx!=NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00010	0f 84 89 00 00
	00		 je	 $LN2@SetProcess

; 67   : 	{
; 68   : 		//查询接口
; 69   : 		ASSERT(QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IProcessControlSink)!=NULL);

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  0001a	75 09		 jne	 SHORT $LN6@SetProcess
  0001c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  00023	eb 1a		 jmp	 SHORT $LN7@SetProcess
$LN6@SetProcess:
  00025	68 00 01 01 06	 push	 100729088		; 06010100H
  0002a	68 00 00 00 00	 push	 OFFSET ?IID_IProcessControlSink@@3U_GUID@@B
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  00037	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003a	ff d0		 call	 eax
  0003c	89 45 b8	 mov	 DWORD PTR tv72[ebp], eax
$LN7@SetProcess:
  0003f	83 7d b8 00	 cmp	 DWORD PTR tv72[ebp], 0
  00043	75 19		 jne	 SHORT $LN8@SetProcess
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z@4JA
  0004b	83 c1 05	 add	 ecx, 5
  0004e	51		 push	 ecx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@HDOPNMLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00054	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00059	85 c0		 test	 eax, eax
  0005b	74 01		 je	 SHORT $LN8@SetProcess
  0005d	cc		 int	 3
$LN8@SetProcess:

; 70   : 		m_pIProcessControlSink=QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IProcessControlSink);

  0005e	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00062	75 09		 jne	 SHORT $LN9@SetProcess
  00064	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
  0006b	eb 1a		 jmp	 SHORT $LN10@SetProcess
$LN9@SetProcess:
  0006d	68 00 01 01 06	 push	 100729088		; 06010100H
  00072	68 00 00 00 00	 push	 OFFSET ?IID_IProcessControlSink@@3U_GUID@@B
  00077	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  0007a	8b 10		 mov	 edx, DWORD PTR [eax]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	ff d0		 call	 eax
  00084	89 45 b8	 mov	 DWORD PTR tv89[ebp], eax
$LN10@SetProcess:
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 55 b8	 mov	 edx, DWORD PTR tv89[ebp]
  0008d	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 71   : 
; 72   : 		//成功判断
; 73   : 		if (m_pIProcessControlSink==NULL) return false;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00097	75 04		 jne	 SHORT $LN4@SetProcess
  00099	32 c0		 xor	 al, al
  0009b	eb 0e		 jmp	 SHORT $LN1@SetProcess
$LN4@SetProcess:

; 74   : 	}

  0009d	eb 0a		 jmp	 SHORT $LN3@SetProcess
$LN2@SetProcess:

; 75   : 	else m_pIProcessControlSink=NULL;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
$LN3@SetProcess:

; 76   : 
; 77   : 	return true;

  000a9	b0 01		 mov	 al, 1
$LN1@SetProcess:

; 78   : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?SetProcessControlSink@CProcessControl@@UAE_NPAUIUnknownEx@@@Z ENDP ; CProcessControl::SetProcessControlSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?GetProcessControlWnd@CProcessControl@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProcessControlWnd@CProcessControl@@UAEPAUHWND__@@XZ PROC ; CProcessControl::GetProcessControlWnd, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 	return m_hWnd;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 a0	 mov	 eax, DWORD PTR [eax-96]

; 60   : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetProcessControlWnd@CProcessControl@@UAEPAUHWND__@@XZ ENDP ; CProcessControl::GetProcessControlWnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?QueryInterface@CProcessControl@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
tv133 = -72						; size = 4
tv79 = -72						; size = 4
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CProcessControl@@UAEPAXABU_GUID@@K@Z PROC ; CProcessControl::QueryInterface, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 	QUERYINTERFACE(IProcessControl,Guid,dwQueryVer);

  0000c	68 00 00 00 00	 push	 OFFSET ?IID_IProcessControl@@3U_GUID@@B
  00011	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _==
  0001a	83 c4 08	 add	 esp, 8
  0001d	0f b6 c8	 movzx	 ecx, al
  00020	85 c9		 test	 ecx, ecx
  00022	74 36		 je	 SHORT $LN2@QueryInter
  00024	68 00 01 01 06	 push	 100729088		; 06010100H
  00029	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00032	83 c4 08	 add	 esp, 8
  00035	0f b6 c8	 movzx	 ecx, al
  00038	85 c9		 test	 ecx, ecx
  0003a	74 1e		 je	 SHORT $LN2@QueryInter
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00044	74 08		 je	 SHORT $LN5@QueryInter
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	89 4d b8	 mov	 DWORD PTR tv79[ebp], ecx
  0004c	eb 07		 jmp	 SHORT $LN6@QueryInter
$LN5@QueryInter:
  0004e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN6@QueryInter:
  00055	8b 45 b8	 mov	 eax, DWORD PTR tv79[ebp]
  00058	eb 50		 jmp	 SHORT $LN1@QueryInter
$LN2@QueryInter:

; 52   : 	QUERYINTERFACE_IUNKNOWNEX(IProcessControl,Guid,dwQueryVer);

  0005a	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _==
  00068	83 c4 08	 add	 esp, 8
  0006b	0f b6 c8	 movzx	 ecx, al
  0006e	85 c9		 test	 ecx, ecx
  00070	74 36		 je	 SHORT $LN3@QueryInter
  00072	68 00 01 01 06	 push	 100729088		; 06010100H
  00077	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00080	83 c4 08	 add	 esp, 8
  00083	0f b6 c8	 movzx	 ecx, al
  00086	85 c9		 test	 ecx, ecx
  00088	74 1e		 je	 SHORT $LN3@QueryInter
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00092	74 08		 je	 SHORT $LN7@QueryInter
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	89 4d b8	 mov	 DWORD PTR tv133[ebp], ecx
  0009a	eb 07		 jmp	 SHORT $LN8@QueryInter
$LN7@QueryInter:
  0009c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN8@QueryInter:
  000a3	8b 45 b8	 mov	 eax, DWORD PTR tv133[ebp]
  000a6	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:

; 53   : 	return NULL;

  000a8	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 54   : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
?QueryInterface@CProcessControl@@UAEPAXABU_GUID@@K@Z ENDP ; CProcessControl::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.h
;	COMDAT ?Release@CProcessControl@@UAEXXZ
_TEXT	SEGMENT
tv75 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Release@CProcessControl@@UAEXXZ PROC			; CProcessControl::Release, COMDAT
; _this$ = ecx

; 28   : 	virtual VOID Release() { delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00014	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00017	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001a	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  0001d	83 7d b8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00021	74 14		 je	 SHORT $LN3@Release
  00023	6a 01		 push	 1
  00025	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]
  0002a	8b 4d b8	 mov	 ecx, DWORD PTR $T2[ebp]
  0002d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00030	ff d2		 call	 edx
  00032	89 45 b0	 mov	 DWORD PTR tv75[ebp], eax
  00035	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  00037	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN1@Release:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?Release@CProcessControl@@UAEXXZ ENDP			; CProcessControl::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ??1CProcessControl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProcessControl@@UAE@XZ PROC				; CProcessControl::~CProcessControl, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessControl@@6BCWnd@@@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], OFFSET ??_7CProcessControl@@6BIProcessControl@@@

; 46   : }

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataQueue@@UAE@XZ
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??1CProcessControl@@UAE@XZ ENDP				; CProcessControl::~CProcessControl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ??0CProcessControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CProcessControl@@QAE@XZ PROC				; CProcessControl::CProcessControl, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CProcessControl@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CWnd@@QAE@XZ		; CWnd::CWnd
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00043	e8 00 00 00 00	 call	 ??0IProcessControl@@QAE@XZ
  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessControl@@6BCWnd@@@
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], OFFSET ??_7CProcessControl@@6BIProcessControl@@@
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataQueue@@QAE@XZ

; 37   : 	//设置变量
; 38   : 	m_pIProcessControlSink=NULL;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+164], 0

; 39   : 
; 40   : 	return;
; 41   : }

  0007a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00081	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CProcessControl@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CWnd@@UAE@XZ		; CWnd::~CWnd
__ehhandler$??0CProcessControl@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CProcessControl@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CProcessControl@@QAE@XZ ENDP				; CProcessControl::CProcessControl
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECProcessRecvData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECProcessRecvData@@UAEPAXI@Z PROC			; CProcessRecvData::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECProcessRecvData@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 44		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CProcessRecvData@@UAE@XZ ; CProcessRecvData::~CProcessRecvData
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 08		 push	 8
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1d		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	8d 14 cd 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*8+4]
  0005f	52		 push	 edx
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 e8 04	 sub	 eax, 4
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 e8 04	 sub	 eax, 4
  00075	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CProcessRecvData@@UAE@XZ ; CProcessRecvData::~CProcessRecvData
  0007f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@vector
  00087	6a 08		 push	 8
  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN4@vector:
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECProcessRecvData@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECProcessRecvData@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECProcessRecvData@@UAEPAXI@Z ENDP			; CProcessRecvData::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCProcessRecvData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProcessRecvData@@UAEPAXI@Z PROC			; CProcessRecvData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CProcessRecvData@@UAE@XZ ; CProcessRecvData::~CProcessRecvData
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 08		 push	 8
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCProcessRecvData@@UAEPAXI@Z ENDP			; CProcessRecvData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CProcessRecvData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProcessRecvData@@QAEAAV0@ABV0@@Z PROC		; CProcessRecvData::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4CProcessRecvData@@QAEAAV0@ABV0@@Z ENDP		; CProcessRecvData::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CProcessRecvData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProcessRecvData@@QAE@ABV0@@Z PROC			; CProcessRecvData::CProcessRecvData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessRecvData@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0CProcessRecvData@@QAE@ABV0@@Z ENDP			; CProcessRecvData::CProcessRecvData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECProcessSendData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECProcessSendData@@UAEPAXI@Z PROC			; CProcessSendData::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECProcessSendData@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 41		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CProcessSendData@@UAE@XZ ; CProcessSendData::~CProcessSendData
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 0c		 push	 12			; 0000000cH
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1a		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	6b 48 fc 0c	 imul	 ecx, DWORD PTR [eax-4], 12
  00059	83 c1 04	 add	 ecx, 4
  0005c	51		 push	 ecx
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 ea 04	 sub	 edx, 4
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00069	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 e8 04	 sub	 eax, 4
  00072	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1CProcessSendData@@UAE@XZ ; CProcessSendData::~CProcessSendData
  0007c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007f	83 e0 01	 and	 eax, 1
  00082	74 0e		 je	 SHORT $LN4@vector
  00084	6a 0c		 push	 12			; 0000000cH
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
$LN4@vector:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECProcessSendData@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECProcessSendData@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECProcessSendData@@UAEPAXI@Z ENDP			; CProcessSendData::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCProcessSendData@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProcessSendData@@UAEPAXI@Z PROC			; CProcessSendData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CProcessSendData@@UAE@XZ ; CProcessSendData::~CProcessSendData
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCProcessSendData@@UAEPAXI@Z ENDP			; CProcessSendData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_FCProcessSendData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_FCProcessSendData@@QAEXXZ PROC			; CProcessSendData::`default constructor closure', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CProcessSendData@@QAE@PAUHWND__@@0@Z ; CProcessSendData::CProcessSendData
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??_FCProcessSendData@@QAEXXZ ENDP			; CProcessSendData::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CProcessSendData@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProcessSendData@@QAEAAV0@ABV0@@Z PROC		; CProcessSendData::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??4CProcessSendData@@QAEAAV0@ABV0@@Z ENDP		; CProcessSendData::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CProcessSendData@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProcessSendData@@QAE@ABV0@@Z PROC			; CProcessSendData::CProcessSendData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CProcessSendData@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00027	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??0CProcessSendData@@QAE@ABV0@@Z ENDP			; CProcessSendData::CProcessSendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IProcessControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IProcessControl@@QAE@XZ PROC				; IProcessControl::IProcessControl, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IProcessControl@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IProcessControl@@QAE@XZ ENDP				; IProcessControl::IProcessControl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00012	83 c4 04	 add	 esp, 4
  00015	0f b6 f0	 movzx	 esi, al
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00021	83 c4 04	 add	 esp, 4
  00024	0f b6 d0	 movzx	 edx, al
  00027	3b f2		 cmp	 esi, edx
  00029	7e 04		 jle	 SHORT $LN2@InterfaceV
  0002b	32 c0		 xor	 al, al
  0002d	eb 74		 jmp	 SHORT $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00038	83 c4 04	 add	 esp, 4
  0003b	0f b6 f0	 movzx	 esi, al
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00047	83 c4 04	 add	 esp, 4
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	3b f2		 cmp	 esi, edx
  0004f	74 04		 je	 SHORT $LN3@InterfaceV
  00051	32 c0		 xor	 al, al
  00053	eb 4e		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00055	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0005e	83 c4 04	 add	 esp, 4
  00061	0f b6 f0	 movzx	 esi, al
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0006d	83 c4 04	 add	 esp, 4
  00070	0f b6 d0	 movzx	 edx, al
  00073	3b f2		 cmp	 esi, edx
  00075	74 04		 je	 SHORT $LN4@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 28		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00084	83 c4 04	 add	 esp, 4
  00087	0f b6 f0	 movzx	 esi, al
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00093	83 c4 04	 add	 esp, 4
  00096	0f b6 d0	 movzx	 edx, al
  00099	3b f2		 cmp	 esi, edx
  0009b	74 04		 je	 SHORT $LN5@InterfaceV
  0009d	32 c0		 xor	 al, al
  0009f	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000a1	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	d1 e0		 shl	 eax, 1
  00010	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00013	83 c4 04	 add	 esp, 4
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002a	6a 02		 push	 2
  0002c	6a 02		 push	 2
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  0003e	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00042	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  00044	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 105  : 	_CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _wmemcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	return (_Ptrdest);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -48						; size = 8
__Ptrnext$ = -40					; size = 4
__Ptrdest$ = -36					; size = 4
__Mbst1$ = -32						; size = 8
__Wc$ = -24						; size = 2
__Bytes$ = -20						; size = 4
__Ptr1$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Count1$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 e0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000e	89 45 e4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00033	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00036	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00044	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00047	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00053	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00057	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00059	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 45 f0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 __Mbrtowc
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  00078	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0007c	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0007e	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  00080	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  00082	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR __Wchars$[ebp], eax

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  0008b	68 ba 02 00 00	 push	 698			; 000002baH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	6a 02		 push	 2
  00099	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000a9	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000ad	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000af	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000b4	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000b7	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 703  : 	mbstate_t _Mbst2 = {};

  000ba	33 c0		 xor	 eax, eax
  000bc	89 45 d0	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000bf	89 45 d4	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000c2	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  000c7	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d0	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000d3	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000d6	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000d9	83 ea 01	 sub	 edx, 1
  000dc	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000df	8b 45 d8	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  000e2	83 c0 02	 add	 eax, 2
  000e5	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e8	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  000ec	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  000ee	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d d0	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __Count1$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 __Mbrtowc
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  0010d	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00111	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00113	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00115	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00117	33 c0		 xor	 eax, eax
  00119	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0011c	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0011f	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltypes.h
;	COMDAT ??0CRect@@QAE@HHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l$ = 8							; size = 4
_t$ = 12						; size = 4
_r$ = 16						; size = 4
_b$ = 20						; size = 4
??0CRect@@QAE@HHHH@Z PROC				; CRect::CRect, COMDAT
; _this$ = ecx

; 539  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 540  : 	left = l;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _l$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx

; 541  : 	top = t;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _t$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 542  : 	right = r;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 10	 mov	 ecx, DWORD PTR _r$[ebp]
  00023	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 543  : 	bottom = b;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  0002c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 544  : }

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
??0CRect@@QAE@HHHH@Z ENDP				; CRect::CRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00009	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -68						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _IsEqualGUID
  00016	83 c4 08	 add	 esp, 8
  00019	85 c0		 test	 eax, eax
  0001b	74 09		 je	 SHORT $LN3@
  0001d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00024	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00026	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  0002d	8a 45 bc	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -68						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memcmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN3@IsEqualGUI
  0001f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  00028	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]

; 162  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?__global_array_delete@@YAXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sz$ = 12						; size = 4
?__global_array_delete@@YAXPAXI@Z PROC			; __global_array_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?__global_array_delete@@YAXPAXI@Z ENDP			; __global_array_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?__global_array_delete@@YAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?__global_array_delete@@YAXPAX@Z PROC			; __global_array_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	83 c4 04	 add	 esp, 4
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?__global_array_delete@@YAXPAX@Z ENDP			; __global_array_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?__global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sz$ = 12						; size = 4
?__global_delete@@YAXPAXI@Z PROC			; __global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?__global_delete@@YAXPAXI@Z ENDP			; __global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?__global_delete@@YAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?__global_delete@@YAXPAX@Z PROC				; __global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?__global_delete@@YAXPAX@Z ENDP				; __global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\公共组件\进程控制\processcontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
