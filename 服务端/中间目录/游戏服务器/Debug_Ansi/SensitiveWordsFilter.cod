; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\游戏服务器\SensitiveWordsFilter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	?getToken@tokenArray@@QAEPAVCToken@@G@Z		; tokenArray::getToken
PUBLIC	?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z ; tokenArray::insertToken
PUBLIC	??0?$allocator@PAVCToken@@@std@@QAE@XZ		; std::allocator<CToken *>::allocator<CToken *>
PUBLIC	?deallocate@?$allocator@PAVCToken@@@std@@QAEXQAPAVCToken@@I@Z ; std::allocator<CToken *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCToken@@@std@@QAEPAPAVCToken@@I@Z ; std::allocator<CToken *>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAIABV?$allocator@PAVCToken@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CToken *> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Alloc_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CToken *> >::_Vector_val<std::_Simple_types<CToken *> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$allocator@PAVCToken@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second
PUBLIC	??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ ; std::vector<CToken *,std::allocator<CToken *> >::vector<CToken *,std::allocator<CToken *> >
PUBLIC	?push_back@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEXABQAVCToken@@@Z ; std::vector<CToken *,std::allocator<CToken *> >::push_back
PUBLIC	?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ; std::vector<CToken *,std::allocator<CToken *> >::begin
PUBLIC	?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ; std::vector<CToken *,std::allocator<CToken *> >::end
PUBLIC	?size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::size
PUBLIC	?max_size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::max_size
PUBLIC	?capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABE_NXZ ; std::vector<CToken *,std::allocator<CToken *> >::_Has_unused_capacity
PUBLIC	?_Umove@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEPAPAVCToken@@PAPAV3@00@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00U?$integral_constant@_N$00@2@@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@0@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEII@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXQAPAVCToken@@II@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@CAXXZ ; std::vector<CToken *,std::allocator<CToken *> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Orphan_range
PUBLIC	??0tokenArray@@QAE@XZ				; tokenArray::tokenArray
PUBLIC	??0CToken@@QAE@GAATcharacter@@@Z		; CToken::CToken
PUBLIC	?getCode@CToken@@QAEGXZ				; CToken::getCode
PUBLIC	?isChinese@CToken@@SAHPATcharacter@@@Z		; CToken::isChinese
PUBLIC	?isChinese@CToken@@SAHPBDHH@Z			; CToken::isChinese
PUBLIC	?getChild@CToken@@QAEPAVtokenArray@@AATcharacter@@@Z ; CToken::getChild
PUBLIC	?addChild@CToken@@QAEPAV1@GAATcharacter@@@Z	; CToken::addChild
PUBLIC	??1?$CWHArray@PBDABQBD@@UAE@XZ			; CWHArray<char const *,char const * const &>::~CWHArray<char const *,char const * const &>
PUBLIC	?GetCount@?$CWHArray@PBDABQBD@@QBEHXZ		; CWHArray<char const *,char const * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PBDABQBD@@QAEHABQBD@Z		; CWHArray<char const *,char const * const &>::Add
PUBLIC	?GetAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z		; CWHArray<char const *,char const * const &>::GetAt
PUBLIC	?ElementAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z	; CWHArray<char const *,char const * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PBDABQBD@@QAEXH@Z		; CWHArray<char const *,char const * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PBDABQBD@@QAEXHABQBD@Z	; CWHArray<char const *,char const * const &>::SetAtGrow
PUBLIC	?RemoveAll@?$CWHArray@PBDABQBD@@QAEXXZ		; CWHArray<char const *,char const * const &>::RemoveAll
PUBLIC	??A?$CWHArray@PBDABQBD@@QAEAAPBDH@Z		; CWHArray<char const *,char const * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PBDABQBD@@QAEXH@Z	; CWHArray<char const *,char const * const &>::AllocMemory
PUBLIC	??_G?$CWHArray@PBDABQBD@@UAEPAXI@Z		; CWHArray<char const *,char const * const &>::`scalar deleting destructor'
PUBLIC	??1CFilterTree@@QAE@XZ				; CFilterTree::~CFilterTree
PUBLIC	?BuildTree@CFilterTree@@QAEXXZ			; CFilterTree::BuildTree
PUBLIC	?BuildWord@CFilterTree@@QAEXPBD@Z		; CFilterTree::BuildWord
PUBLIC	?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z ; CFilterTree::Filtrate
PUBLIC	?Reset@CFilterTree@@QAEXXZ			; CFilterTree::Reset
PUBLIC	?ResetSensitiveWordArray@CSensitiveWordsFilter@@QAEXXZ ; CSensitiveWordsFilter::ResetSensitiveWordArray
PUBLIC	?AddSensitiveWords@CSensitiveWordsFilter@@QAE_NPBD@Z ; CSensitiveWordsFilter::AddSensitiveWords
PUBLIC	?FinishAdd@CSensitiveWordsFilter@@QAEXXZ	; CSensitiveWordsFilter::FinishAdd
PUBLIC	?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z ; CSensitiveWordsFilter::Filtrate
PUBLIC	?Filtrate@CSensitiveWordsFilter@@QAEXPBDPADH@Z	; CSensitiveWordsFilter::Filtrate
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEABQAVCToken@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CToken *> > >
PUBLIC	??$emplace_back@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@ABQAVCToken@@@Z ; std::vector<CToken *,std::allocator<CToken *> >::emplace_back<CToken * const &>
PUBLIC	??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z ; std::forward<CToken * const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAE@ABQAVCToken@@@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_back_with_unused_capacity<CToken * const &>
PUBLIC	??$_Unfancy@PAVCToken@@@std@@YAPAPAVCToken@@PAPAV1@@Z ; std::_Unfancy<CToken *>
PUBLIC	??$construct@PAVCToken@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAXAAV?$allocator@PAVCToken@@@1@QAPAVCToken@@ABQAV3@@Z ; std::_Default_allocator_traits<std::allocator<CToken *> >::construct<CToken *,CToken * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_reallocate<CToken * const &>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@@Z ; std::_Destroy_range<std::allocator<CToken *> >
PUBLIC	??$?0PAVCToken@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVCToken@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CToken *>
PUBLIC	??$_Destroy_range1@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<CToken *> >
PUBLIC	??$_Uninitialized_move@PAPAVCToken@@PAPAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCToken@@@0@@Z ; std::_Uninitialized_move<CToken * *,CToken * *,std::allocator<CToken *> >
PUBLIC	??$_Get_unwrapped@PAVCToken@@@std@@YAPAPAVCToken@@QAPAV1@@Z ; std::_Get_unwrapped<CToken *>
PUBLIC	??$_Idl_distance@PAPAVCToken@@PAPAV1@@std@@YA@ABQAPAVCToken@@0@Z ; std::_Idl_distance<CToken * *,CToken * *>
PUBLIC	??$_Idl_distance1@PAPAVCToken@@PAPAV1@@std@@YAHABQAPAVCToken@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<CToken * *,CToken * *>
PUBLIC	??$_Get_unwrapped_n@PAVCToken@@H$0A@@std@@YAPAPAVCToken@@QAPAV1@H@Z ; std::_Get_unwrapped_n<CToken *,int,0>
PUBLIC	??$_Ptr_move_cat@PAVCToken@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVCToken@@0@Z ; std::_Ptr_move_cat<CToken *,CToken *>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAVCToken@@PAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@00AAV?$allocator@PAVCToken@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<CToken *,CToken *,std::allocator<CToken *> >
PUBLIC	??$_Seek_wrapped@PAVCToken@@@std@@YAXAAPAPAVCToken@@QAPAV1@@Z ; std::_Seek_wrapped<CToken *>
PUBLIC	??$_Copy_memmove@PAPAVCToken@@PAPAV1@@std@@YAPAPAVCToken@@PAPAV1@00@Z ; std::_Copy_memmove<CToken * *,CToken * *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException@		; `string'
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	??_C@_0P@MBNHGHMI@atlTraceString@		; `string'
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK@				; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_7?$CWHArray@PBDABQBD@@6B@			; CWHArray<char const *,char const * const &>::`vftable'
PUBLIC	?__LINE__Var@?0??Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z@4JA ; `CFilterTree::Filtrate'::`1'::__LINE__Var
PUBLIC	??_C@_0FD@JOABLGFE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_04FPMFJAAG@25qp@				; `string'
PUBLIC	??_C@_06PKLBBPHI@25?$KD?Q?$KD?P@		; `string'
PUBLIC	??_C@_08JPCBNCAL@?$KD?$LC?$KD?$LF?$KD?Q?$KD?P@	; `string'
PUBLIC	??_C@_05OHMLCOND@25q?$KD?P@			; `string'
PUBLIC	??_C@_05JCOEFPBG@25?$KD?Qp@			; `string'
PUBLIC	??_C@_05DJJDEICL@foxuc@				; `string'
PUBLIC	?__LINE__Var@?0??Reset@CFilterTree@@QAEXXZ@4JA	; `CFilterTree::Reset'::`1'::__LINE__Var
PUBLIC	??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ ; `string'
PUBLIC	??_C@_1NM@OCBFIICG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ ; `string'
PUBLIC	??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_1NK@FLHGBFGG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1NE@EBMCICDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4?$CWHArray@PBDABQBD@@6B@			; CWHArray<char const *,char const * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PBDABQBD@@@8			; CWHArray<char const *,char const * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PBDABQBD@@8			; CWHArray<char const *,char const * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PBDABQBD@@8			; CWHArray<char const *,char const * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PBDABQBD@@8		; CWHArray<char const *,char const * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:PROC
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?Replace@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHPBD0@Z:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??_E?$CWHArray@PBDABQBD@@UAEPAXI@Z:PROC		; CWHArray<char const *,char const * const &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
_BSS	SEGMENT
?nNewCount@@3HA DD 01H DUP (?)				; nNewCount
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PBDABQBD@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PBDABQBD@@8 DD FLAT:??_R0?AV?$CWHArray@PBDABQBD@@@8 ; CWHArray<char const *,char const * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PBDABQBD@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PBDABQBD@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PBDABQBD@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PBDABQBD@@8 ; CWHArray<char const *,char const * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PBDABQBD@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PBDABQBD@@8 DD 00H			; CWHArray<char const *,char const * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PBDABQBD@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PBDABQBD@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PBDABQBD@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<char const *,char const * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PBDABQBD@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PBDABQBD@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PBDABQBD@@6B@ DD 00H			; CWHArray<char const *,char const * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PBDABQBD@@@8
	DD	FLAT:??_R3?$CWHArray@PBDABQBD@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@EBMCICDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NE@EBMCICDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'o', 00H, 'k', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '*', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ DB 'vector iterators '
	DB	'incompatible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@FLHGBFGG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NK@FLHGBFGG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'o', 00H, 'k', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '*', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
CONST	SEGMENT
??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ DB 'can''t increm'
	DB	'ent vector iterator past end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NM@OCBFIICG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NM@OCBFIICG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'C', 00H, 'T', 00H
	DB	'o', 00H, 'k', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '*', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
CONST	SEGMENT
??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ DB 'can''t increm'
	DB	'ent value-initialized vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Reset@CFilterTree@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Reset@CFilterTree@@QAEXXZ@4JA DD 0adH	; `CFilterTree::Reset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05DJJDEICL@foxuc@
CONST	SEGMENT
??_C@_05DJJDEICL@foxuc@ DB 'foxuc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JCOEFPBG@25?$KD?Qp@
CONST	SEGMENT
??_C@_05JCOEFPBG@25?$KD?Qp@ DB '25', 0a3H, 0d1H, 'p', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHMLCOND@25q?$KD?P@
CONST	SEGMENT
??_C@_05OHMLCOND@25q?$KD?P@ DB '25q', 0a3H, 0d0H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPCBNCAL@?$KD?$LC?$KD?$LF?$KD?Q?$KD?P@
CONST	SEGMENT
??_C@_08JPCBNCAL@?$KD?$LC?$KD?$LF?$KD?Q?$KD?P@ DB 0a3H, 0b2H, 0a3H, 0b5H, 0a3H
	DB	0d1H, 0a3H, 0d0H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKLBBPHI@25?$KD?Q?$KD?P@
CONST	SEGMENT
??_C@_06PKLBBPHI@25?$KD?Q?$KD?P@ DB '25', 0a3H, 0d1H, 0a3H, 0d0H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPMFJAAG@25qp@
CONST	SEGMENT
??_C@_04FPMFJAAG@25qp@ DB '25qp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@JOABLGFE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0FD@JOABLGFE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0d3H, 0ceH, 0cfH, 0b7H, 0b7H, 0feH, 0ceH, 0f1H, 0c6H
	DB	0f7H, '\sensitivewordsfilter.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z@4JA DD 054H ; `CFilterTree::Filtrate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7?$CWHArray@PBDABQBD@@6B@
CONST	SEGMENT
??_7?$CWHArray@PBDABQBD@@6B@ DD FLAT:??_R4?$CWHArray@PBDABQBD@@6B@ ; CWHArray<char const *,char const * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PBDABQBD@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA DD 072H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBNHGHMI@atlTraceString@
CONST	SEGMENT
??_C@_0P@MBNHGHMI@atlTraceString@ DB 'atlTraceString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z$0
__ehfuncinfo$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Reset@CFilterTree@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Reset@CFilterTree@@QAEXXZ$0
__unwindtable$?Reset@CFilterTree@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Reset@CFilterTree@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Reset@CFilterTree@@QAEXXZ$2
__ehfuncinfo$?Reset@CFilterTree@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Reset@CFilterTree@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Reset@CFilterTree@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z$0
__ehfuncinfo$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFilterTree@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$3
__ehfuncinfo$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?getToken@tokenArray@@QAEPAVCToken@@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getToken@tokenArray@@QAEPAVCToken@@G@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?getToken@tokenArray@@QAEPAVCToken@@G@Z$1
__ehfuncinfo$?getToken@tokenArray@@QAEPAVCToken@@G@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?getToken@tokenArray@@QAEPAVCToken@@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceString$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceString@ATL@@YAXXZ ; ATL::atlTraceString$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCToken@@PAPAV1@@std@@YAPAPAVCToken@@PAPAV1@00@Z
_TEXT	SEGMENT
__Count$ = -16						; size = 4
__Dest_ch$ = -12					; size = 4
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCToken@@PAPAV1@@std@@YAPAPAVCToken@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CToken * *,CToken * *>, COMDAT

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	89 45 f4	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0001b	8b 45 f8	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001e	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  00021	89 45 f0	 mov	 DWORD PTR __Count$[ebp], eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00024	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR __First_ch$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 f4	 mov	 edx, DWORD PTR __Dest_ch$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 _memmove
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00038	8b 45 f4	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0003b	03 45 f0	 add	 eax, DWORD PTR __Count$[ebp]

; 2405 : 	}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Copy_memmove@PAPAVCToken@@PAPAV1@@std@@YAPAPAVCToken@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CToken * *,CToken * *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@PAVCToken@@@std@@YAXAAPAPAVCToken@@QAPAV1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@PAVCToken@@@std@@YAXAAPAPAVCToken@@QAPAV1@@Z PROC ; std::_Seek_wrapped<CToken *>, COMDAT

; 871  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 872  : 	_It = _UIt;

  00009	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __UIt$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 873  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Seek_wrapped@PAVCToken@@@std@@YAXAAPAPAVCToken@@QAPAV1@@Z ENDP ; std::_Seek_wrapped<CToken *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAVCToken@@PAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@00AAV?$allocator@PAVCToken@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAVCToken@@PAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@00AAV?$allocator@PAVCToken@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<CToken *,CToken *,std::allocator<CToken *> >, COMDAT

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCToken@@PAPAV1@@std@@YAPAPAVCToken@@PAPAV1@00@Z ; std::_Copy_memmove<CToken * *,CToken * *>
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 245  : 	}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PAVCToken@@PAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@00AAV?$allocator@PAVCToken@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<CToken *,CToken *,std::allocator<CToken *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@PAVCToken@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVCToken@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@PAVCToken@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVCToken@@0@Z PROC ; std::_Ptr_move_cat<CToken *,CToken *>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1087 : 	return {};

  00009	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1088 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_move_cat@PAVCToken@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVCToken@@0@Z ENDP ; std::_Ptr_move_cat<CToken *,CToken *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@PAVCToken@@H$0A@@std@@YAPAPAVCToken@@QAPAV1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@PAVCToken@@H$0A@@std@@YAPAPAVCToken@@QAPAV1@H@Z PROC ; std::_Get_unwrapped_n<CToken *,int,0>, COMDAT

; 808  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 809  : 	return (_Src);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 810  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Get_unwrapped_n@PAVCToken@@H$0A@@std@@YAPAPAVCToken@@QAPAV1@H@Z ENDP ; std::_Get_unwrapped_n<CToken *,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAPAVCToken@@PAPAV1@@std@@YAHABQAPAVCToken@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAPAVCToken@@PAPAV1@@std@@YAHABQAPAVCToken@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<CToken * *,CToken * *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	2b 01		 sub	 eax, DWORD PTR [ecx]
  00013	c1 f8 02	 sar	 eax, 2

; 969  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Idl_distance1@PAPAVCToken@@PAPAV1@@std@@YAHABQAPAVCToken@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<CToken * *,CToken * *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAPAVCToken@@PAPAV1@@std@@YA@ABQAPAVCToken@@0@Z
_TEXT	SEGMENT
$T1 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAPAVCToken@@PAPAV1@@std@@YA@ABQAPAVCToken@@0@Z PROC ; std::_Idl_distance<CToken * *,CToken * *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

  00009	0f b6 45 bf	 movzx	 eax, BYTE PTR $T1[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Idl_distance1@PAPAVCToken@@PAPAV1@@std@@YAHABQAPAVCToken@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<CToken * *,CToken * *>
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 976  : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Idl_distance@PAPAVCToken@@PAPAV1@@std@@YA@ABQAPAVCToken@@0@Z ENDP ; std::_Idl_distance<CToken * *,CToken * *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@PAVCToken@@@std@@YAPAPAVCToken@@QAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@PAVCToken@@@std@@YAPAPAVCToken@@QAPAV1@@Z PROC ; std::_Get_unwrapped<CToken *>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 663  : 	return (_Ptr);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Get_unwrapped@PAVCToken@@@std@@YAPAPAVCToken@@QAPAV1@@Z ENDP ; std::_Get_unwrapped<CToken *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCToken@@PAPAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCToken@@@0@@Z
_TEXT	SEGMENT
$T1 = -78						; size = 1
$T2 = -77						; size = 1
__UDest$ = -12						; size = 4
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCToken@@PAPAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCToken@@@0@@Z PROC ; std::_Uninitialized_move<CToken * *,CToken * *,std::allocator<CToken *> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$_Get_unwrapped@PAVCToken@@@std@@YAPAPAVCToken@@QAPAV1@@Z ; std::_Get_unwrapped<CToken *>
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@PAVCToken@@@std@@YAPAPAVCToken@@QAPAV1@@Z ; std::_Get_unwrapped<CToken *>
  00021	83 c4 04	 add	 esp, 4
  00024	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00027	8d 45 f8	 lea	 eax, DWORD PTR __ULast$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d fc	 lea	 ecx, DWORD PTR __UFirst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$_Idl_distance@PAPAVCToken@@PAPAV1@@std@@YA@ABQAPAVCToken@@0@Z ; std::_Idl_distance<CToken * *,CToken * *>
  00034	83 c4 08	 add	 esp, 8
  00037	50		 push	 eax
  00038	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@PAVCToken@@H$0A@@std@@YAPAPAVCToken@@QAPAV1@H@Z ; std::_Get_unwrapped_n<CToken *,int,0>
  00041	83 c4 08	 add	 esp, 8
  00044	89 45 f4	 mov	 DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

  00047	0f b6 45 b3	 movzx	 eax, BYTE PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8d 4d f4	 lea	 ecx, DWORD PTR __UDest$[ebp]
  0004f	51		 push	 ecx
  00050	8d 55 fc	 lea	 edx, DWORD PTR __UFirst$[ebp]
  00053	52		 push	 edx
  00054	8d 45 b2	 lea	 eax, DWORD PTR $T1[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@PAVCToken@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVCToken@@0@Z ; std::_Ptr_move_cat<CToken *,CToken *>
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	0f b6 d1	 movzx	 edx, cl
  00065	52		 push	 edx
  00066	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __UDest$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  00071	52		 push	 edx
  00072	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@PAVCToken@@PAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@00AAV?$allocator@PAVCToken@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<CToken *,CToken *,std::allocator<CToken *> >
  0007b	83 c4 18	 add	 esp, 24			; 00000018H
  0007e	50		 push	 eax
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ??$_Seek_wrapped@PAVCToken@@@std@@YAXAAPAPAVCToken@@QAPAV1@@Z ; std::_Seek_wrapped<CToken *>
  00088	83 c4 08	 add	 esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

  0008b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
??$_Uninitialized_move@PAPAVCToken@@PAPAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCToken@@@0@@Z ENDP ; std::_Uninitialized_move<CToken * *,CToken * *,std::allocator<CToken *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<CToken *> >, COMDAT

; 1145 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1146 : 		// nothing to do
; 1147 : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy_range1@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<CToken *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0PAVCToken@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVCToken@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVCToken@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVCToken@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CToken *>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 987  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??$?0PAVCToken@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVCToken@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CToken *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@@Z
_TEXT	SEGMENT
$T1 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CToken *> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

  00009	33 c0		 xor	 eax, eax
  0000b	88 45 bf	 mov	 BYTE PTR $T1[ebp], al
  0000e	0f b6 4d bf	 movzx	 ecx, BYTE PTR $T1[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __Al$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<CToken *> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CToken *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$allocator@PAVCToken@@@std@@QAE@XZ ; std::allocator<CToken *>::allocator<CToken *>
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CToken *> >::_Vector_val<std::_Simple_types<CToken *> >

; 279  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv206 = -120						; size = 4
__Constructed_first$ = -52				; size = 4
__Constructed_last$ = -48				; size = 4
__Newvec$ = -44						; size = 4
__Newcapacity$ = -40					; size = 4
__Newsize$ = -36					; size = 4
__Oldsize$ = -32					; size = 4
__Al$ = -28						; size = 4
__Whereoff$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_reallocate<CToken * const &>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 68	 sub	 esp, 104		; 00000068H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0003a	2b 08		 sub	 ecx, DWORD PTR [eax]
  0003c	c1 f9 02	 sar	 ecx, 2
  0003f	89 4d e8	 mov	 DWORD PTR __Whereoff$[ebp], ecx

; 945  : 		_Alty& _Al = this->_Getal();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  0004a	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::size
  00055	89 45 e0	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

  00058	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?max_size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::max_size
  00060	39 45 e0	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  00063	75 05		 jne	 SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

  00065	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@CAXXZ ; std::vector<CToken *,std::allocator<CToken *> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  0006a	8b 45 e0	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  0006d	83 c0 01	 add	 eax, 1
  00070	89 45 dc	 mov	 DWORD PTR __Newsize$[ebp], eax

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

  00073	8b 45 dc	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEII@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Calculate_growth
  0007f	89 45 d8	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

  00082	8b 45 d8	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00085	50		 push	 eax
  00086	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00089	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAVCToken@@@std@@QAEPAPAVCToken@@I@Z ; std::allocator<CToken *>::allocate
  0008e	89 45 d4	 mov	 DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00091	8b 45 e8	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00094	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00097	8d 54 81 04	 lea	 edx, DWORD PTR [ecx+eax*4+4]
  0009b	89 55 d0	 mov	 DWORD PTR __Constructed_last$[ebp], edx

; 958  : 		pointer _Constructed_first = _Constructed_last;

  0009e	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  000a1	89 45 cc	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 959  : 
; 960  : 		_TRY_BEGIN

  000a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ab	8b 45 e8	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  000ae	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000b1	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 ??$_Unfancy@PAVCToken@@@std@@YAPAPAVCToken@@PAPAV1@@Z ; std::_Unfancy<CToken *>
  000ba	83 c4 04	 add	 esp, 4
  000bd	89 45 88	 mov	 DWORD PTR tv206[ebp], eax
  000c0	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z ; std::forward<CToken * const &>
  000c9	83 c4 04	 add	 esp, 4
  000cc	50		 push	 eax
  000cd	8b 4d 88	 mov	 ecx, DWORD PTR tv206[ebp]
  000d0	51		 push	 ecx
  000d1	8b 55 e4	 mov	 edx, DWORD PTR __Al$[ebp]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$construct@PAVCToken@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAXAAV?$allocator@PAVCToken@@@1@QAPAVCToken@@ABQAV3@@Z ; std::_Default_allocator_traits<std::allocator<CToken *> >::construct<CToken *,CToken * const &>
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

  000dd	8b 45 e8	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  000e0	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000e3	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e6	89 55 cc	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  000f4	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000f6	75 24		 jne	 SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

  000f8	8b 45 d4	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00104	8b 08		 mov	 ecx, DWORD PTR [eax]
  00106	51		 push	 ecx
  00107	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  0010f	8b 10		 mov	 edx, DWORD PTR [eax]
  00111	52		 push	 edx
  00112	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

  0011a	eb 43		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

  0011c	8b 45 d4	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0011f	50		 push	 eax
  00120	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00123	51		 push	 ecx
  00124	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  0012c	8b 10		 mov	 edx, DWORD PTR [eax]
  0012e	52		 push	 edx
  0012f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	e8 00 00 00 00	 call	 ?_Umove@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEPAPAVCToken@@PAPAV3@00@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

  00137	8b 45 d4	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0013a	89 45 cc	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  0013d	8b 45 e8	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00140	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00143	8d 54 81 04	 lea	 edx, DWORD PTR [ecx+eax*4+4]
  00147	52		 push	 edx
  00148	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00150	8b 00		 mov	 eax, DWORD PTR [eax]
  00152	50		 push	 eax
  00153	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00156	51		 push	 ecx
  00157	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Umove@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEPAPAVCToken@@PAPAV3@00@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Umove
$LN5@Emplace_re:
  0015f	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

  00161	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00164	50		 push	 eax
  00165	8b 4d cc	 mov	 ecx, DWORD PTR __Constructed_first$[ebp]
  00168	51		 push	 ecx
  00169	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@0@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

  00171	8b 45 d8	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00174	50		 push	 eax
  00175	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00178	51		 push	 ecx
  00179	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  0017c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCToken@@@std@@QAEXQAPAVCToken@@I@Z ; std::allocator<CToken *>::deallocate

; 977  : 		_RERAISE;

  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	e8 00 00 00 00	 call	 __CxxThrowException@8

; 978  : 		_CATCH_END

  0018a	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0018f	c3		 ret	 0
$LN7@Emplace_re:
  00190	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00197	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z$1
$LN10@Emplace_re:
  00199	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

  001a0	8b 45 d8	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  001a3	50		 push	 eax
  001a4	8b 4d dc	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  001a7	51		 push	 ecx
  001a8	8b 55 d4	 mov	 edx, DWORD PTR __Newvec$[ebp]
  001ab	52		 push	 edx
  001ac	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXQAPAVCToken@@II@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

  001b4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  001bc	8b 00		 mov	 eax, DWORD PTR [eax]
  001be	8b 4d e8	 mov	 ecx, DWORD PTR __Whereoff$[ebp]
  001c1	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
$LN6@Emplace_re:

; 982  : 		}

  001c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ce	59		 pop	 ecx
  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_reallocate<CToken * const &>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAVCToken@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAXAAV?$allocator@PAVCToken@@@1@QAPAVCToken@@ABQAV3@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCToken@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAXAAV?$allocator@PAVCToken@@@1@QAPAVCToken@@ABQAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<CToken *> >::construct<CToken *,CToken * const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 04		 push	 4
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z ; std::forward<CToken * const &>
  00023	83 c4 04	 add	 esp, 4
  00026	8b 55 bc	 mov	 edx, DWORD PTR $T1[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 02		 mov	 DWORD PTR [edx], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$construct@PAVCToken@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAXAAV?$allocator@PAVCToken@@@1@QAPAVCToken@@ABQAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CToken *> >::construct<CToken *,CToken * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@PAVCToken@@@std@@YAPAPAVCToken@@PAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PAVCToken@@@std@@YAPAPAVCToken@@PAPAV1@@Z PROC ; std::_Unfancy<CToken *>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 346  : 	return (_Ptr);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@PAVCToken@@@std@@YAPAPAVCToken@@PAPAV1@@Z ENDP ; std::_Unfancy<CToken *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAE@ABQAVCToken@@@Z
_TEXT	SEGMENT
tv142 = -76						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAE@ABQAVCToken@@@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_back_with_unused_capacity<CToken * const &>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z ; std::forward<CToken * const &>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Unfancy@PAVCToken@@@std@@YAPAPAVCToken@@PAPAV1@@Z ; std::_Unfancy<CToken *>
  00029	83 c4 04	 add	 esp, 4
  0002c	50		 push	 eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$construct@PAVCToken@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAXAAV?$allocator@PAVCToken@@@1@QAPAVCToken@@ABQAV3@@Z ; std::_Default_allocator_traits<std::allocator<CToken *> >::construct<CToken *,CToken * const &>
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	50		 push	 eax
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	51		 push	 ecx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00064	8b 00		 mov	 eax, DWORD PTR [eax]
  00066	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 905  : 		++this->_Mylast();

  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00071	89 45 b4	 mov	 DWORD PTR tv142[ebp], eax
  00074	8b 45 b4	 mov	 eax, DWORD PTR tv142[ebp]
  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	83 c1 04	 add	 ecx, 4
  0007c	8b 55 b4	 mov	 edx, DWORD PTR tv142[ebp]
  0007f	89 0a		 mov	 DWORD PTR [edx], ecx

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAE@ABQAVCToken@@@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_back_with_unused_capacity<CToken * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z PROC ; std::forward<CToken * const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z ENDP ; std::forward<CToken * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@ABQAVCToken@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@ABQAVCToken@@@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::emplace_back<CToken * const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Has_unused_capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABE_NXZ ; std::vector<CToken *,std::allocator<CToken *> >::_Has_unused_capacity
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	74 17		 je	 SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  0001b	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z ; std::forward<CToken * const &>
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAE@ABQAVCToken@@@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_back_with_unused_capacity<CToken * const &>
  00030	eb 23		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00032	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$forward@ABQAVCToken@@@std@@YAABQAVCToken@@ABQAV1@@Z ; std::forward<CToken * const &>
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	51		 push	 ecx
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEPAPAVCToken@@QAPAV2@ABQAV2@@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Emplace_reallocate<CToken * const &>
  00052	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
??$emplace_back@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@ABQAVCToken@@@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::emplace_back<CToken * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<CToken *> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 330  : 	return (__builtin_addressof(_Val));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<CToken *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++, COMDAT
; _this$ = ecx

; 267  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 268  : 		++*(_Mybase *)this;

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++

; 269  : 		return (*this);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 270  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*, COMDAT
; _this$ = ecx

; 257  : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEABQAVCToken@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*

; 259  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >, COMDAT
; _this$ = ecx

; 253  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 252  : 		: _Mybase(_Parg, _Pvector)

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >

; 254  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Compat, COMDAT
; _this$ = ecx

; 195  : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@Compat:

; 196  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 197  : 		(void)_Right;
; 198  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 199  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0001e	3b f0		 cmp	 esi, eax
  00020	75 02		 jne	 SHORT $LN7@Compat
  00022	eb 4a		 jmp	 SHORT $LN2@Compat
$LN7@Compat:
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002e	6a 00		 push	 0
  00030	68 c7 00 00 00	 push	 199			; 000000c7H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003a	6a 02		 push	 2
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	83 f8 01	 cmp	 eax, 1
  00048	75 01		 jne	 SHORT $LN11@Compat
  0004a	cc		 int	 3
$LN11@Compat:
  0004b	6a 00		 push	 0
  0004d	68 c7 00 00 00	 push	 199			; 000000c7H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@EBMCICDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00067	83 c4 14	 add	 esp, 20			; 00000014H
  0006a	33 c0		 xor	 eax, eax
  0006c	75 b6		 jne	 SHORT $LN7@Compat
$LN2@Compat:
  0006e	33 c0		 xor	 eax, eax
  00070	75 9a		 jne	 SHORT $LN4@Compat

; 200  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 201  : 		}

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator!=, COMDAT
; _this$ = ecx

; 169  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator==
  00018	0f b6 c8	 movzx	 ecx, al
  0001b	85 c9		 test	 ecx, ecx
  0001d	75 09		 jne	 SHORT $LN3@operator
  0001f	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00028	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  0002f	8a 45 b8	 mov	 al, BYTE PTR tv69[ebp]

; 171  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator==, COMDAT
; _this$ = ecx

; 163  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 		_Compat(_Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Compat

; 165  : 		return (_Ptr == _Right._Ptr);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00021	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00024	75 09		 jne	 SHORT $LN3@operator
  00026	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  0002d	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002f	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  00036	8a 45 b8	 mov	 al, BYTE PTR tv69[ebp]

; 166  : 		}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++, COMDAT
; _this$ = ecx

; 71   : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :  #if _ITERATOR_DEBUG_LEVEL != 0
; 73   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00014	89 45 f8	 mov	 DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 74   : 		_STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001e	74 02		 je	 SHORT $LN7@operator
  00020	eb 44		 jmp	 SHORT $LN2@operator
$LN7@operator:
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002c	6a 00		 push	 0
  0002e	6a 4a		 push	 74			; 0000004aH
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00035	6a 02		 push	 2
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	83 f8 01	 cmp	 eax, 1
  00043	75 01		 jne	 SHORT $LN19@operator
  00045	cc		 int	 3
$LN19@operator:
  00046	6a 00		 push	 0
  00048	6a 4a		 push	 74			; 0000004aH
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1NM@OCBFIICG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005f	83 c4 14	 add	 esp, 20			; 00000014H
  00062	33 c0		 xor	 eax, eax
  00064	75 bc		 jne	 SHORT $LN7@operator
$LN2@operator:
  00066	33 c0		 xor	 eax, eax
  00068	75 ad		 jne	 SHORT $LN4@operator
$LN10@operator:

; 75   : 		_STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  00070	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00073	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00076	73 02		 jae	 SHORT $LN13@operator
  00078	eb 44		 jmp	 SHORT $LN8@operator
$LN13@operator:
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00084	6a 00		 push	 0
  00086	6a 4b		 push	 75			; 0000004bH
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0008d	6a 02		 push	 2
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	83 f8 01	 cmp	 eax, 1
  0009b	75 01		 jne	 SHORT $LN20@operator
  0009d	cc		 int	 3
$LN20@operator:
  0009e	6a 00		 push	 0
  000a0	6a 4b		 push	 75			; 0000004bH
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_1NM@OCBFIICG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b7	83 c4 14	 add	 esp, 20			; 00000014H
  000ba	33 c0		 xor	 eax, eax
  000bc	75 bc		 jne	 SHORT $LN13@operator
$LN8@operator:
  000be	33 c0		 xor	 eax, eax
  000c0	75 a8		 jne	 SHORT $LN10@operator

; 76   :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 77   : 
; 78   : 		++_Ptr;

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c8	83 c1 04	 add	 ecx, 4
  000cb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ce	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 79   : 		return (*this);

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 80   : 		}

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEABQAVCToken@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEABQAVCToken@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*, COMDAT
; _this$ = ecx

; 47   : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   :  #if _ITERATOR_DEBUG_LEVEL != 0
; 49   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00014	89 45 f8	 mov	 DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 50   : 		_STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001e	74 02		 je	 SHORT $LN7@operator
  00020	eb 44		 jmp	 SHORT $LN2@operator
$LN7@operator:
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002c	6a 00		 push	 0
  0002e	6a 32		 push	 50			; 00000032H
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00035	6a 02		 push	 2
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	83 f8 01	 cmp	 eax, 1
  00043	75 01		 jne	 SHORT $LN19@operator
  00045	cc		 int	 3
$LN19@operator:
  00046	6a 00		 push	 0
  00048	6a 32		 push	 50			; 00000032H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1NK@FLHGBFGG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005f	83 c4 14	 add	 esp, 20			; 00000014H
  00062	33 c0		 xor	 eax, eax
  00064	75 bc		 jne	 SHORT $LN7@operator
$LN2@operator:
  00066	33 c0		 xor	 eax, eax
  00068	75 ad		 jne	 SHORT $LN4@operator
$LN10@operator:

; 51   : 		_STL_VERIFY(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast,

  0006a	8b 45 f8	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00073	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00076	77 10		 ja	 SHORT $LN13@operator
  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  0007e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00081	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00084	73 02		 jae	 SHORT $LN13@operator
  00086	eb 44		 jmp	 SHORT $LN8@operator
$LN13@operator:
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00092	6a 00		 push	 0
  00094	6a 34		 push	 52			; 00000034H
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009b	6a 02		 push	 2
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000a3	83 c4 18	 add	 esp, 24			; 00000018H
  000a6	83 f8 01	 cmp	 eax, 1
  000a9	75 01		 jne	 SHORT $LN20@operator
  000ab	cc		 int	 3
$LN20@operator:
  000ac	6a 00		 push	 0
  000ae	6a 34		 push	 52			; 00000034H
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_1NK@FLHGBFGG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000c5	83 c4 14	 add	 esp, 20			; 00000014H

; 52   : 			"can't dereference out of range vector iterator");

  000c8	33 c0		 xor	 eax, eax
  000ca	75 bc		 jne	 SHORT $LN13@operator
$LN8@operator:
  000cc	33 c0		 xor	 eax, eax
  000ce	75 9a		 jne	 SHORT $LN10@operator

; 53   :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 54   : 
; 55   : 		return (*_Ptr);

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 56   : 		}

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEABQAVCToken@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12

; 41   : 		: _Ptr(_Parg)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0001a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 43   : 		this->_Adopt(_Pvector);

  0001d	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 44   : 		}

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?Filtrate@CSensitiveWordsFilter@@QAEXPBDPADH@Z
_TEXT	SEGMENT
_lpOut$ = -12						; size = 4
_nLen$ = -8						; size = 4
_this$ = -4						; size = 4
_pMsg$ = 8						; size = 4
_pszFiltered$ = 12					; size = 4
_nMaxLen$ = 16						; size = 4
?Filtrate@CSensitiveWordsFilter@@QAEXPBDPADH@Z PROC	; CSensitiveWordsFilter::Filtrate, COMDAT
; _this$ = ecx

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 151  : 	int nLen=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 152  : 	CString lpOut=Filtrate(pMsg,nLen); 

  00013	8d 45 f8	 lea	 eax, DWORD PTR _nLen$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  0001a	51		 push	 ecx
  0001b	8d 55 f4	 lea	 edx, DWORD PTR _lpOut$[ebp]
  0001e	52		 push	 edx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z ; CSensitiveWordsFilter::Filtrate

; 153  : 	lstrcpyn(pszFiltered,lpOut,nMaxLen);

  00027	8b 45 10	 mov	 eax, DWORD PTR _nMaxLen$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d f4	 lea	 ecx, DWORD PTR _lpOut$[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00034	50		 push	 eax
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFiltered$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 154  : 
; 155  : 	return ;

  0003f	8d 4d f4	 lea	 ecx, DWORD PTR _lpOut$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 156  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?Filtrate@CSensitiveWordsFilter@@QAEXPBDPADH@Z ENDP	; CSensitiveWordsFilter::Filtrate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z
_TEXT	SEGMENT
$T2 = -88						; size = 4
_ret$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pMsg$ = 12						; size = 4
_nLenght$ = 16						; size = 4
?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z PROC ; CSensitiveWordsFilter::Filtrate, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 161  : 	CString ret= m_FilterTree.Filtrate(pMsg);

  00032	8b 45 0c	 mov	 eax, DWORD PTR _pMsg$[ebp]
  00035	50		 push	 eax
  00036	8d 4d ec	 lea	 ecx, DWORD PTR _ret$[ebp]
  00039	51		 push	 ecx
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 04	 add	 ecx, 4
  00040	e8 00 00 00 00	 call	 ?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z ; CFilterTree::Filtrate
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 162  : 	nLenght=(int)ret.GetLength();

  0004c	8d 4d ec	 lea	 ecx, DWORD PTR _ret$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00055	8b 4d 10	 mov	 ecx, DWORD PTR _nLenght$[ebp]
  00058	89 01		 mov	 DWORD PTR [ecx], eax

; 163  :     return ret;

  0005a	8d 45 ec	 lea	 eax, DWORD PTR _ret$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00067	8b 4d a8	 mov	 ecx, DWORD PTR $T2[ebp]
  0006a	83 c9 01	 or	 ecx, 1
  0006d	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8d 4d ec	 lea	 ecx, DWORD PTR _ret$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00080	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 164  : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _ret$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Filtrate@CSensitiveWordsFilter@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBDAAH@Z ENDP ; CSensitiveWordsFilter::Filtrate
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?FinishAdd@CSensitiveWordsFilter@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FinishAdd@CSensitiveWordsFilter@@QAEXXZ PROC		; CSensitiveWordsFilter::FinishAdd, COMDAT
; _this$ = ecx

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 145  : 	m_FilterTree.BuildTree();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 04	 add	 ecx, 4
  00012	e8 00 00 00 00	 call	 ?BuildTree@CFilterTree@@QAEXXZ ; CFilterTree::BuildTree

; 146  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?FinishAdd@CSensitiveWordsFilter@@QAEXXZ ENDP		; CSensitiveWordsFilter::FinishAdd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?AddSensitiveWords@CSensitiveWordsFilter@@QAE_NPBD@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_pWords$ = -12						; size = 4
_nlen$ = -8						; size = 4
_this$ = -4						; size = 4
_pSensitiveWords$ = 8					; size = 4
?AddSensitiveWords@CSensitiveWordsFilter@@QAE_NPBD@Z PROC ; CSensitiveWordsFilter::AddSensitiveWords, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 126  : 	//获取长度
; 127  : 	int nlen = lstrlen(pSensitiveWords);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pSensitiveWords$[ebp]
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00016	89 45 f8	 mov	 DWORD PTR _nlen$[ebp], eax

; 128  : 
; 129  : 	//分配空间
; 130  : 	LPTSTR pWords=new TCHAR[nlen+1];

  00019	8b 45 f8	 mov	 eax, DWORD PTR _nlen$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00025	83 c4 04	 add	 esp, 4
  00028	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0002b	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  0002e	89 4d f4	 mov	 DWORD PTR _pWords$[ebp], ecx

; 131  : 	ZeroMemory(pWords, sizeof(TCHAR)*(nlen+1));

  00031	8b 45 f8	 mov	 eax, DWORD PTR _nlen$[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	50		 push	 eax
  00038	6a 00		 push	 0
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR _pWords$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _memset
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 132  : 
; 133  : 	//拷贝数据
; 134  : 	lstrcpyn(pWords,pSensitiveWords,nlen+1);

  00046	8b 45 f8	 mov	 eax, DWORD PTR _nlen$[ebp]
  00049	83 c0 01	 add	 eax, 1
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _pSensitiveWords$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f4	 mov	 edx, DWORD PTR _pWords$[ebp]
  00054	52		 push	 edx
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 135  : 	
; 136  : 	//添加记录
; 137  : 	m_FilterTree.m_ForbidArray.Add(pWords);

  0005b	8d 45 f4	 lea	 eax, DWORD PTR _pWords$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 04	 add	 ecx, 4
  00065	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PBDABQBD@@QAEHABQBD@Z ; CWHArray<char const *,char const * const &>::Add

; 138  : 
; 139  : 	return true;

  0006a	b0 01		 mov	 al, 1

; 140  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
?AddSensitiveWords@CSensitiveWordsFilter@@QAE_NPBD@Z ENDP ; CSensitiveWordsFilter::AddSensitiveWords
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?ResetSensitiveWordArray@CSensitiveWordsFilter@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetSensitiveWordArray@CSensitiveWordsFilter@@QAEXXZ PROC ; CSensitiveWordsFilter::ResetSensitiveWordArray, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 184  : 	m_FilterTree.Reset();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 04	 add	 ecx, 4
  00012	e8 00 00 00 00	 call	 ?Reset@CFilterTree@@QAEXXZ ; CFilterTree::Reset

; 185  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?ResetSensitiveWordArray@CSensitiveWordsFilter@@QAEXXZ ENDP ; CSensitiveWordsFilter::ResetSensitiveWordArray
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?Reset@CFilterTree@@QAEXXZ
_TEXT	SEGMENT
tv88 = -96						; size = 4
$T2 = -92						; size = 4
_i$3 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?Reset@CFilterTree@@QAEXXZ PROC				; CFilterTree::Reset, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Reset@CFilterTree@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 50	 sub	 esp, 80			; 00000050H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 174  : 	for (int i=0; i<m_ForbidArray.GetCount(); i++)

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00036	eb 09		 jmp	 SHORT $LN4@Reset
$LN2@Reset:
  00038	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 e8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@Reset:
  00041	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PBDABQBD@@QBEHXZ ; CWHArray<char const *,char const * const &>::GetCount
  00049	39 45 e8	 cmp	 DWORD PTR _i$3[ebp], eax
  0004c	7d 76		 jge	 SHORT $LN3@Reset

; 175  : 	{
; 176  : 		SafeDeleteArray(m_ForbidArray.GetAt(i));

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00055	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  00058	50		 push	 eax
  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?GetAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ; CWHArray<char const *,char const * const &>::GetAt
  00061	89 45 a0	 mov	 DWORD PTR tv88[ebp], eax
  00064	8b 4d a0	 mov	 ecx, DWORD PTR tv88[ebp]
  00067	8b 11		 mov	 edx, DWORD PTR [ecx]
  00069	89 55 a4	 mov	 DWORD PTR $T2[ebp], edx
  0006c	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00075	83 c4 04	 add	 esp, 4
  00078	eb 23		 jmp	 SHORT $LN8@Reset
__catch$?Reset@CFilterTree@@QAEXXZ$0:
  0007a	33 c0		 xor	 eax, eax
  0007c	75 19		 jne	 SHORT $LN7@Reset
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??Reset@CFilterTree@@QAEXXZ@4JA
  00084	83 c1 03	 add	 ecx, 3
  00087	51		 push	 ecx
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@JOABLGFE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0008d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00092	85 c0		 test	 eax, eax
  00094	74 01		 je	 SHORT $LN7@Reset
  00096	cc		 int	 3
$LN7@Reset:
  00097	b8 00 00 00 00	 mov	 eax, $LN11@Reset
  0009c	c3		 ret	 0
$LN8@Reset:
  0009d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000a4	eb 07		 jmp	 SHORT __tryend$?Reset@CFilterTree@@QAEXXZ$1
$LN11@Reset:
  000a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?Reset@CFilterTree@@QAEXXZ$1:
  000ad	8b 45 e8	 mov	 eax, DWORD PTR _i$3[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	e8 00 00 00 00	 call	 ?GetAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ; CWHArray<char const *,char const * const &>::GetAt
  000b9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 177  : 	}

  000bf	e9 74 ff ff ff	 jmp	 $LN2@Reset
$LN3@Reset:

; 178  : 	m_ForbidArray.RemoveAll();

  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PBDABQBD@@QAEXXZ ; CWHArray<char const *,char const * const &>::RemoveAll

; 179  : }

  000cc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000cf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d6	59		 pop	 ecx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Reset@CFilterTree@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Reset@CFilterTree@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Reset@CFilterTree@@QAEXXZ ENDP				; CFilterTree::Reset
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
_TEXT	SEGMENT
$T2 = -124						; size = 4
_i$3 = -56						; size = 4
_pLimit$ = -52						; size = 20
_i$4 = -32						; size = 4
_size$ = -28						; size = 4
_strChat$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_msg$ = 12						; size = 4
?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z PROC ; CFilterTree::Filtrate, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 85   : 	//变量定义
; 86   : 	CString strChat=TEXT("");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0003a	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 87   : 
; 88   : 	//参数验证
; 89   : 	ASSERT(msg!=NULL);

  0004a	83 7d 0c 00	 cmp	 DWORD PTR _msg$[ebp], 0
  0004e	75 18		 jne	 SHORT $LN11@Filtrate
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z@4JA
  00055	83 c0 05	 add	 eax, 5
  00058	50		 push	 eax
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@JOABLGFE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0005e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00063	85 c0		 test	 eax, eax
  00065	74 01		 je	 SHORT $LN11@Filtrate
  00067	cc		 int	 3
$LN11@Filtrate:

; 90   : 	if(msg==NULL)return strChat; 

  00068	83 7d 0c 00	 cmp	 DWORD PTR _msg$[ebp], 0
  0006c	75 2e		 jne	 SHORT $LN8@Filtrate
  0006e	8d 45 e8	 lea	 eax, DWORD PTR _strChat$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0007b	8b 4d 84	 mov	 ecx, DWORD PTR $T2[ebp]
  0007e	83 c9 01	 or	 ecx, 1
  00081	89 4d 84	 mov	 DWORD PTR $T2[ebp], ecx
  00084	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008b	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00094	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00097	e9 08 01 00 00	 jmp	 $LN1@Filtrate
$LN8@Filtrate:

; 91   : 
; 92   : 	//获取长度
; 93   : 	int size = (int)lstrlen(msg);        

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  0009f	50		 push	 eax
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000a6	89 45 e4	 mov	 DWORD PTR _size$[ebp], eax

; 94   : 	if(size <= 0)return strChat;

  000a9	83 7d e4 00	 cmp	 DWORD PTR _size$[ebp], 0
  000ad	7f 2e		 jg	 SHORT $LN9@Filtrate
  000af	8d 45 e8	 lea	 eax, DWORD PTR _strChat$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000bc	8b 4d 84	 mov	 ecx, DWORD PTR $T2[ebp]
  000bf	83 c9 01	 or	 ecx, 1
  000c2	89 4d 84	 mov	 DWORD PTR $T2[ebp], ecx
  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000d8	e9 c7 00 00 00	 jmp	 $LN1@Filtrate
$LN9@Filtrate:

; 95   : 
; 96   : 	//过滤脏词
; 97   : 	strChat=msg;

  000dd	8b 45 0c	 mov	 eax, DWORD PTR _msg$[ebp]
  000e0	50		 push	 eax
  000e1	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 98   : 	for (INT_PTR i=0;i<m_ForbidArray.GetCount();i++)

  000ea	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  000f1	eb 09		 jmp	 SHORT $LN4@Filtrate
$LN2@Filtrate:
  000f3	8b 45 e0	 mov	 eax, DWORD PTR _i$4[ebp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	89 45 e0	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@Filtrate:
  000fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PBDABQBD@@QBEHXZ ; CWHArray<char const *,char const * const &>::GetCount
  00104	39 45 e0	 cmp	 DWORD PTR _i$4[ebp], eax
  00107	7d 1f		 jge	 SHORT $LN3@Filtrate

; 99   : 	{
; 100  : 		strChat.Replace(m_ForbidArray[i],TEXT("*"));

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_01NBENCBCI@?$CK@
  0010e	8b 45 e0	 mov	 eax, DWORD PTR _i$4[ebp]
  00111	50		 push	 eax
  00112	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	e8 00 00 00 00	 call	 ??A?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ; CWHArray<char const *,char const * const &>::operator[]
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	51		 push	 ecx
  0011d	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Replace@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHPBD0@Z

; 101  : 	}

  00126	eb cb		 jmp	 SHORT $LN2@Filtrate
$LN3@Filtrate:

; 102  : 
; 103  : 	//
; 104  : 	TCHAR *pLimit[] = { TEXT("25qp"),TEXT("25ＱＰ"),TEXT("２５ＱＰ"),TEXT("25qＰ"),TEXT("25Ｑp")};

  00128	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _pLimit$[ebp], OFFSET ??_C@_04FPMFJAAG@25qp@
  0012f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pLimit$[ebp+4], OFFSET ??_C@_06PKLBBPHI@25?$KD?Q?$KD?P@
  00136	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pLimit$[ebp+8], OFFSET ??_C@_08JPCBNCAL@?$KD?$LC?$KD?$LF?$KD?Q?$KD?P@
  0013d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pLimit$[ebp+12], OFFSET ??_C@_05OHMLCOND@25q?$KD?P@
  00144	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pLimit$[ebp+16], OFFSET ??_C@_05JCOEFPBG@25?$KD?Qp@

; 105  : 	for (INT_PTR i=0;i<CountArray(pLimit);i++)

  0014b	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00152	eb 09		 jmp	 SHORT $LN7@Filtrate
$LN5@Filtrate:
  00154	8b 45 c8	 mov	 eax, DWORD PTR _i$3[ebp]
  00157	83 c0 01	 add	 eax, 1
  0015a	89 45 c8	 mov	 DWORD PTR _i$3[ebp], eax
$LN7@Filtrate:
  0015d	83 7d c8 05	 cmp	 DWORD PTR _i$3[ebp], 5
  00161	73 18		 jae	 SHORT $LN6@Filtrate

; 106  : 	{
; 107  : 		strChat.Replace(pLimit[i],TEXT("foxuc"));

  00163	68 00 00 00 00	 push	 OFFSET ??_C@_05DJJDEICL@foxuc@
  00168	8b 45 c8	 mov	 eax, DWORD PTR _i$3[ebp]
  0016b	8b 4c 85 cc	 mov	 ecx, DWORD PTR _pLimit$[ebp+eax*4]
  0016f	51		 push	 ecx
  00170	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Replace@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHPBD0@Z

; 108  : 	}

  00179	eb d9		 jmp	 SHORT $LN5@Filtrate
$LN6@Filtrate:

; 109  : 	   
; 110  : 	return strChat;          

  0017b	8d 45 e8	 lea	 eax, DWORD PTR _strChat$[ebp]
  0017e	50		 push	 eax
  0017f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00188	8b 4d 84	 mov	 ecx, DWORD PTR $T2[ebp]
  0018b	83 c9 01	 or	 ecx, 1
  0018e	89 4d 84	 mov	 DWORD PTR $T2[ebp], ecx
  00191	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00198	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Filtrate:

; 111  : }

  001a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ae	59		 pop	 ecx
  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	5b		 pop	 ebx
  001b2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b5	33 cd		 xor	 ecx, ebp
  001b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _strChat$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Filtrate@CFilterTree@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@PBD@Z ENDP ; CFilterTree::Filtrate
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?BuildWord@CFilterTree@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
?BuildWord@CFilterTree@@QAEXPBD@Z PROC			; CFilterTree::BuildWord, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : }        

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?BuildWord@CFilterTree@@QAEXPBD@Z ENDP			; CFilterTree::BuildWord
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?BuildTree@CFilterTree@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nCount$ = -8						; size = 4
_this$ = -4						; size = 4
?BuildTree@CFilterTree@@QAEXXZ PROC			; CFilterTree::BuildTree, COMDAT
; _this$ = ecx

; 115  : {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 	INT_PTR nCount=m_ForbidArray.GetCount();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PBDABQBD@@QBEHXZ ; CWHArray<char const *,char const * const &>::GetCount
  00014	89 45 f8	 mov	 DWORD PTR _nCount$[ebp], eax

; 117  : 	for(INT_PTR i = 0; i < nCount; ++i)        

  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@BuildTree
$LN2@BuildTree:
  00020	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@BuildTree:
  00029	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0002c	3b 45 f8	 cmp	 eax, DWORD PTR _nCount$[ebp]
  0002f	7d 19		 jge	 SHORT $LN1@BuildTree

; 118  : 	{       
; 119  : 		BuildWord(m_ForbidArray[i]);           

  00031	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??A?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ; CWHArray<char const *,char const * const &>::operator[]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	51		 push	 ecx
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?BuildWord@CFilterTree@@QAEXPBD@Z ; CFilterTree::BuildWord

; 120  : 	}        

  00048	eb d6		 jmp	 SHORT $LN2@BuildTree
$LN1@BuildTree:

; 121  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?BuildTree@CFilterTree@@QAEXXZ ENDP			; CFilterTree::BuildTree
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ??1CFilterTree@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFilterTree@@QAE@XZ PROC				; CFilterTree::~CFilterTree, COMDAT
; _this$ = ecx

; 167  : {   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CFilterTree@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 168  : 	Reset();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?Reset@CFilterTree@@QAEXXZ ; CFilterTree::Reset

; 169  : }

  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??1?$CWHArray@PBDABQBD@@UAE@XZ ; CWHArray<char const *,char const * const &>::~CWHArray<char const *,char const * const &>
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00045	59		 pop	 ecx
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CFilterTree@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CFilterTree@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CFilterTree@@QAE@XZ ENDP				; CFilterTree::~CFilterTree
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PBDABQBD@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PBDABQBD@@UAEPAXI@Z PROC			; CWHArray<char const *,char const * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PBDABQBD@@UAE@XZ ; CWHArray<char const *,char const * const &>::~CWHArray<char const *,char const * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PBDABQBD@@UAEPAXI@Z ENDP			; CWHArray<char const *,char const * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PBDABQBD@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PBDABQBD@@QAEXH@Z PROC		; CWHArray<char const *,char const * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PBDABQBD@@QAEXH@Z ENDP		; CWHArray<char const *,char const * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PBDABQBD@@QAEAAPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PBDABQBD@@QAEAAPBDH@Z PROC		; CWHArray<char const *,char const * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ; CWHArray<char const *,char const * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ENDP		; CWHArray<char const *,char const * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@PBDABQBD@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@PBDABQBD@@QAEXXZ PROC		; CWHArray<char const *,char const * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 44		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	c1 e1 02	 shl	 ecx, 2
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?RemoveAll@?$CWHArray@PBDABQBD@@QAEXXZ ENDP		; CWHArray<char const *,char const * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PBDABQBD@@QAEXHABQBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PBDABQBD@@QAEXHABQBD@Z PROC	; CWHArray<char const *,char const * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PBDABQBD@@QAEXH@Z ; CWHArray<char const *,char const * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PBDABQBD@@QAEXHABQBD@Z ENDP	; CWHArray<char const *,char const * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PBDABQBD@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PBDABQBD@@QAEXH@Z PROC		; CWHArray<char const *,char const * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PBDABQBD@@QAEXH@Z ; CWHArray<char const *,char const * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PBDABQBD@@QAEXH@Z ENDP		; CWHArray<char const *,char const * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z PROC	; CWHArray<char const *,char const * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ENDP	; CWHArray<char const *,char const * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z PROC		; CWHArray<char const *,char const * const &>::GetAt, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN5@GetAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN6@GetAt
$LN5@GetAt:
  0001d	68 d5 00 00 00	 push	 213			; 000000d5H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN6@GetAt
  00030	cc		 int	 3
$LN6@GetAt:

; 214  : 	if ((nIndex<0)||(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7c 0b		 jl	 SHORT $LN3@GetAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@GetAt
$LN3@GetAt:
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetAt:

; 215  : 	
; 216  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN4@GetAt:

; 217  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?GetAt@?$CWHArray@PBDABQBD@@QAEAAPBDH@Z ENDP		; CWHArray<char const *,char const * const &>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PBDABQBD@@QAEHABQBD@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PBDABQBD@@QAEHABQBD@Z PROC		; CWHArray<char const *,char const * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PBDABQBD@@QAEXHABQBD@Z ; CWHArray<char const *,char const * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PBDABQBD@@QAEHABQBD@Z ENDP		; CWHArray<char const *,char const * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PBDABQBD@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PBDABQBD@@QBEHXZ PROC		; CWHArray<char const *,char const * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PBDABQBD@@QBEHXZ ENDP		; CWHArray<char const *,char const * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PBDABQBD@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PBDABQBD@@UAE@XZ PROC			; CWHArray<char const *,char const * const &>::~CWHArray<char const *,char const * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PBDABQBD@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PBDABQBD@@UAE@XZ ENDP			; CWHArray<char const *,char const * const &>::~CWHArray<char const *,char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?addChild@CToken@@QAEPAV1@GAATcharacter@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_code$ = 8						; size = 2
__char$ = 12						; size = 4
?addChild@CToken@@QAEPAV1@GAATcharacter@@@Z PROC	; CToken::addChild, COMDAT
; _this$ = ecx

; 69   : {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   : 	if(isChinese(&_char))        

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __char$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?isChinese@CToken@@SAHPATcharacter@@@Z ; CToken::isChinese
  00015	83 c4 04	 add	 esp, 4
  00018	85 c0		 test	 eax, eax
  0001a	74 18		 je	 SHORT $LN2@addChild

; 71   : 		return word_children.insertToken(code,_char);        

  0001c	8b 45 0c	 mov	 eax, DWORD PTR __char$[ebp]
  0001f	50		 push	 eax
  00020	0f b7 4d 08	 movzx	 ecx, WORD PTR _code$[ebp]
  00024	51		 push	 ecx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 14	 add	 ecx, 20			; 00000014H
  0002b	e8 00 00 00 00	 call	 ?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z ; tokenArray::insertToken
  00030	eb 16		 jmp	 SHORT $LN1@addChild

; 72   : 	else        

  00032	eb 14		 jmp	 SHORT $LN1@addChild
$LN2@addChild:

; 73   : 		return byte_children.insertToken(code,_char);        

  00034	8b 45 0c	 mov	 eax, DWORD PTR __char$[ebp]
  00037	50		 push	 eax
  00038	0f b7 4d 08	 movzx	 ecx, WORD PTR _code$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 04	 add	 ecx, 4
  00043	e8 00 00 00 00	 call	 ?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z ; tokenArray::insertToken
$LN1@addChild:

; 74   : }        

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?addChild@CToken@@QAEPAV1@GAATcharacter@@@Z ENDP	; CToken::addChild
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?getChild@CToken@@QAEPAVtokenArray@@AATcharacter@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__char$ = 8						; size = 4
?getChild@CToken@@QAEPAVtokenArray@@AATcharacter@@@Z PROC ; CToken::getChild, COMDAT
; _this$ = ecx

; 61   : {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	if(isChinese(&_char))        

  0000c	8b 45 08	 mov	 eax, DWORD PTR __char$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?isChinese@CToken@@SAHPATcharacter@@@Z ; CToken::isChinese
  00015	83 c4 04	 add	 esp, 4
  00018	85 c0		 test	 eax, eax
  0001a	74 0a		 je	 SHORT $LN2@getChild

; 63   : 		return &word_children;        

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c0 14	 add	 eax, 20			; 00000014H
  00022	eb 08		 jmp	 SHORT $LN1@getChild

; 64   : 	else        

  00024	eb 06		 jmp	 SHORT $LN1@getChild
$LN2@getChild:

; 65   : 		return &byte_children;        

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c0 04	 add	 eax, 4
$LN1@getChild:

; 66   : }           

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?getChild@CToken@@QAEPAVtokenArray@@AATcharacter@@@Z ENDP ; CToken::getChild
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?isChinese@CToken@@SAHPBDHH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_pos$ = 12						; size = 4
_size$ = 16						; size = 4
?isChinese@CToken@@SAHPBDHH@Z PROC			; CToken::isChinese, COMDAT

; 16   : {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 17   : 	if(pos+1 > size)        

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0000c	83 c0 01	 add	 eax, 1
  0000f	3b 45 10	 cmp	 eax, DWORD PTR _size$[ebp]
  00012	7e 04		 jle	 SHORT $LN2@isChinese

; 18   : 		return NULL;        

  00014	33 c0		 xor	 eax, eax
  00016	eb 4c		 jmp	 SHORT $LN1@isChinese
$LN2@isChinese:

; 19   : 	//  	if((unsigned int)buf[pos]>=MAX_CH)
; 20   : 	//  		return NULL;
; 21   : 	if((unsigned int)buf[pos] > 127 && (unsigned int)buf[pos+1] > 127)        

  00018	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0001b	03 45 0c	 add	 eax, DWORD PTR _pos$[ebp]
  0001e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00021	83 f9 7f	 cmp	 ecx, 127		; 0000007fH
  00024	76 16		 jbe	 SHORT $LN3@isChinese
  00026	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00029	03 45 0c	 add	 eax, DWORD PTR _pos$[ebp]
  0002c	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00030	83 f9 7f	 cmp	 ecx, 127		; 0000007fH
  00033	76 07		 jbe	 SHORT $LN3@isChinese

; 22   : 		return CH;  

  00035	b8 02 00 00 00	 mov	 eax, 2
  0003a	eb 28		 jmp	 SHORT $LN1@isChinese
$LN3@isChinese:

; 23   : 	if (buf[pos]<0 && (unsigned int)buf[pos+1] < 127)

  0003c	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0003f	03 45 0c	 add	 eax, DWORD PTR _pos$[ebp]
  00042	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00045	85 c9		 test	 ecx, ecx
  00047	7d 16		 jge	 SHORT $LN4@isChinese
  00049	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0004c	03 45 0c	 add	 eax, DWORD PTR _pos$[ebp]
  0004f	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00053	83 f9 7f	 cmp	 ecx, 127		; 0000007fH
  00056	73 07		 jae	 SHORT $LN4@isChinese

; 24   : 		return CH;

  00058	b8 02 00 00 00	 mov	 eax, 2
  0005d	eb 05		 jmp	 SHORT $LN1@isChinese
$LN4@isChinese:

; 25   : 	return EN;        

  0005f	b8 01 00 00 00	 mov	 eax, 1
$LN1@isChinese:

; 26   : }        

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?isChinese@CToken@@SAHPBDHH@Z ENDP			; CToken::isChinese
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?isChinese@CToken@@SAHPATcharacter@@@Z
_TEXT	SEGMENT
__char$ = 8						; size = 4
?isChinese@CToken@@SAHPATcharacter@@@Z PROC		; CToken::isChinese, COMDAT

; 8    : {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9    : 	if((unsigned short)_char->val_word.high > 127        
; 10   : 		&& (unsigned short)_char->val_word.low > 127)        

  00009	8b 45 08	 mov	 eax, DWORD PTR __char$[ebp]
  0000c	66 0f be 08	 movsx	 cx, BYTE PTR [eax]
  00010	0f b7 d1	 movzx	 edx, cx
  00013	83 fa 7f	 cmp	 edx, 127		; 0000007fH
  00016	7e 17		 jle	 SHORT $LN2@isChinese
  00018	8b 45 08	 mov	 eax, DWORD PTR __char$[ebp]
  0001b	66 0f be 48 01	 movsx	 cx, BYTE PTR [eax+1]
  00020	0f b7 d1	 movzx	 edx, cx
  00023	83 fa 7f	 cmp	 edx, 127		; 0000007fH
  00026	7e 07		 jle	 SHORT $LN2@isChinese

; 11   : 		return CH;        

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	eb 05		 jmp	 SHORT $LN1@isChinese
$LN2@isChinese:

; 12   : 	return EN;        

  0002f	b8 01 00 00 00	 mov	 eax, 1
$LN1@isChinese:

; 13   : }        

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?isChinese@CToken@@SAHPATcharacter@@@Z ENDP		; CToken::isChinese
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.h
;	COMDAT ?getCode@CToken@@QAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCode@CToken@@QAEGXZ PROC				; CToken::getCode, COMDAT
; _this$ = ecx

; 76   : 	{        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 77   : 		return code;        

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 00	 mov	 ax, WORD PTR [eax]

; 78   : 	}        

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?getCode@CToken@@QAEGXZ ENDP				; CToken::getCode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.h
;	COMDAT ??0CToken@@QAE@GAATcharacter@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_code$ = 8						; size = 2
__char$ = 12						; size = 4
??0CToken@@QAE@GAATcharacter@@@Z PROC			; CToken::CToken, COMDAT
; _this$ = ecx

; 52   : 	{}        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 		:code(code),_character(_char),isend(false)        

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 4d 08	 mov	 cx, WORD PTR _code$[ebp]
  00013	66 89 08	 mov	 WORD PTR [eax], cx
  00016	8b 45 0c	 mov	 eax, DWORD PTR __char$[ebp]
  00019	66 8b 08	 mov	 cx, WORD PTR [eax]
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 52   : 	{}        

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	e8 00 00 00 00	 call	 ??0tokenArray@@QAE@XZ
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 14	 add	 ecx, 20			; 00000014H
  00034	e8 00 00 00 00	 call	 ??0tokenArray@@QAE@XZ

; 51   : 		:code(code),_character(_char),isend(false)        

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c6 40 24 00	 mov	 BYTE PTR [eax+36], 0

; 52   : 	{}        

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0CToken@@QAE@GAATcharacter@@@Z ENDP			; CToken::CToken
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0tokenArray@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0tokenArray@@QAE@XZ PROC				; tokenArray::tokenArray, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ ; std::vector<CToken *,std::allocator<CToken *> >::vector<CToken *,std::allocator<CToken *> >
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0tokenArray@@QAE@XZ ENDP				; tokenArray::tokenArray
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z
_TEXT	SEGMENT
__Pnext$ = -24						; size = 4
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

  0002b	6a 03		 push	 3
  0002d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getpfirst
  00045	89 45 e8	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

  00048	83 7d e8 00	 cmp	 DWORD PTR __Pnext$[ebp], 0
  0004c	74 4e		 je	 SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00051	83 38 00	 cmp	 DWORD PTR [eax], 0
  00054	74 46		 je	 SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

  00056	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005e	3b 55 08	 cmp	 edx, DWORD PTR __First$[ebp]
  00061	72 0d		 jb	 SHORT $LN7@Orphan_ran
  00063	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0006b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0006e	73 0f		 jae	 SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

  00070	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  0007a	89 45 e8	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

  0007d	eb 1b		 jmp	 SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

  0007f	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	e8 00 00 00 00	 call	 ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

  00089	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  00093	8b 4d e8	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  00096	8b 10		 mov	 edx, DWORD PTR [eax]
  00098	89 11		 mov	 DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

  0009a	eb b2		 jmp	 SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEXPAPAVCToken@@0@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Orphan_range
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@CAXXZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1926 : 		_Xlength_error("vector<T> too long");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  0000e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Xlength@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@CAXXZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXQAPAVCToken@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXQAPAVCToken@@II@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  0001c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001f	74 41		 je	 SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	51		 push	 ecx
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@0@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::capacity
  00047	50		 push	 eax
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	50		 push	 eax
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  0005b	8b c8		 mov	 ecx, eax
  0005d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCToken@@@std@@QAEXQAPAVCToken@@I@Z ; std::allocator<CToken *>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  0006f	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00072	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00075	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00080	89 30		 mov	 DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  00082	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00088	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend
  00093	89 30		 mov	 DWORD PTR [eax], esi

; 1907 : 		}

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXQAPAVCToken@@II@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEII@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ; std::vector<CToken *,std::allocator<CToken *> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  00029	76 05		 jbe	 SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0002e	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00033	d1 e8		 shr	 eax, 1
  00035	03 45 f8	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00038	89 45 f4	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  0003b	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0003e	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00041	73 05		 jae	 SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

  00043	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00046	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

  00048	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABEII@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@0@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCToken@@@std@@@std@@YAXPAPAVCToken@@0AAV?$allocator@PAVCToken@@@0@@Z ; std::_Destroy_range<std::allocator<CToken *> >
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1850 : 		}

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@0@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

  0000c	33 c0		 xor	 eax, eax
  0000e	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00011	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00015	51		 push	 ecx
  00016	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00021	51		 push	 ecx
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00U?$integral_constant@_N$00@2@@Z ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCToken@@PAPAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCToken@@@0@@Z ; std::_Uninitialized_move<CToken * *,CToken * *,std::allocator<CToken *> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1834 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEXPAPAVCToken@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEPAPAVCToken@@PAPAV3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEPAPAVCToken@@PAPAV3@00@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCToken@@PAPAV1@V?$allocator@PAVCToken@@@std@@@std@@YAPAPAVCToken@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCToken@@@0@@Z ; std::_Uninitialized_move<CToken * *,CToken * *,std::allocator<CToken *> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1829 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@AAEPAPAVCToken@@PAPAV3@00@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABE_NXZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00022	74 09		 je	 SHORT $LN3@Has_unused
  00024	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0002b	eb 07		 jmp	 SHORT $LN4@Has_unused
$LN3@Has_unused:
  0002d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
  00034	8a 45 b8	 mov	 al, BYTE PTR tv77[ebp]

; 1727 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?_Has_unused_capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@ABE_NXZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	2b 08		 sub	 ecx, DWORD PTR [eax]
  00022	c1 f9 02	 sar	 ecx, 2
  00025	8b c1		 mov	 eax, ecx

; 1716 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?capacity@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAIABV?$allocator@PAVCToken@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CToken *> >::max_size
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  00020	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00025	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00028	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  0002b	50		 push	 eax
  0002c	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00035	83 c4 08	 add	 esp, 8
  00038	8b 00		 mov	 eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?max_size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	2b 08		 sub	 ecx, DWORD PTR [eax]
  00022	c1 f9 02	 sar	 ecx, 2
  00025	8b c1		 mov	 eax, ecx

; 1705 : 		}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?size@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QBEIXZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::end, COMDAT
; _this$ = ecx

; 1628 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1629 : 		return (iterator(this->_Mylast(), _STD addressof(this->_Get_data())));

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CToken *> > >
  00039	83 c4 04	 add	 esp, 4
  0003c	50		 push	 eax
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
  00050	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1630 : 		}

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::end
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::begin, COMDAT
; _this$ = ecx

; 1618 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1619 : 		return (iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CToken *> > >
  00039	83 c4 04	 add	 esp, 4
  0003c	50		 push	 eax
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@PAPAVCToken@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >
  00050	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1620 : 		}

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::begin
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEXABQAVCToken@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEXABQAVCToken@@@Z PROC ; std::vector<CToken *,std::allocator<CToken *> >::push_back, COMDAT
; _this$ = ecx

; 931  : 		{	// insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 932  : 		emplace_back(_Val);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$emplace_back@ABQAVCToken@@@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@ABQAVCToken@@@Z ; std::vector<CToken *,std::allocator<CToken *> >::emplace_back<CToken * const &>

; 933  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?push_back@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEXABQAVCToken@@@Z ENDP ; std::vector<CToken *,std::allocator<CToken *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ PROC ; std::vector<CToken *,std::allocator<CToken *> >::vector<CToken *,std::allocator<CToken *> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >

; 652  : 		}

  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE@XZ ENDP ; std::vector<CToken *,std::allocator<CToken *> >::vector<CToken *,std::allocator<CToken *> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 308  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 303  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$allocator@PAVCToken@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$allocator@PAVCToken@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 298  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$allocator@PAVCToken@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CToken *> >::_Vector_val<std::_Simple_types<CToken *> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 391  : 		_Myend()

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 393  : 		}

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CToken *> >::_Vector_val<std::_Simple_types<CToken *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH

; 602  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH

; 597  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	83 c0 08	 add	 eax, 8

; 592  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	83 c0 08	 add	 eax, 8

; 587  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	83 c0 04	 add	 eax, 4

; 582  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABQAPAVCToken@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	83 c0 04	 add	 eax, 4

; 577  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAPAVCToken@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second

; 561  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_second

; 556  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$allocator@PAVCToken@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$allocator@PAVCToken@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QBEABV?$allocator@PAVCToken@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first

; 551  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$allocator@PAVCToken@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Get_first

; 546  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data

; 525  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 8
__Proxy_allocator$ = -5					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$allocator@PAVCToken@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Getal
  00014	50		 push	 eax
  00015	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00018	e8 00 00 00 00	 call	 ??$?0PAVCToken@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVCToken@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CToken *>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001d	6a 01		 push	 1
  0001f	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00022	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0002d	83 c4 04	 add	 esp, 4
  00030	8b f0		 mov	 esi, eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myproxy
  0003a	89 30		 mov	 DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0003c	8d 4d b0	 lea	 ecx, DWORD PTR $T1[ebp]
  0003f	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myproxy
  0004d	8b 00		 mov	 eax, DWORD PTR [eax]
  0004f	50		 push	 eax
  00050	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Get_data
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<CToken *> > >
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b f0		 mov	 esi, eax
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Myproxy
  00077	8b 00		 mov	 eax, DWORD PTR [eax]
  00079	89 30		 mov	 DWORD PTR [eax], esi

; 506  : 		}

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

  0000c	0f b6 45 bb	 movzx	 eax, BYTE PTR $T1[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCToken@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1>::_Compressed_pair<std::allocator<CToken *>,std::_Vector_val<std::_Simple_types<CToken *> >,1><>

; 447  : 		_Alloc_proxy();

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Alloc_proxy

; 448  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >::_Vector_alloc<std::_Vec_base_types<CToken *,std::allocator<CToken *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAIABV?$allocator@PAVCToken@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAIABV?$allocator@PAVCToken@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<CToken *> >::max_size, COMDAT

; 891  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00009	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 893  : 		}

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@PAVCToken@@@std@@@std@@SAIABV?$allocator@PAVCToken@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CToken *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCToken@@@std@@QAEPAPAVCToken@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCToken@@@std@@QAEPAPAVCToken@@I@Z PROC ; std::allocator<CToken *>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$03@std@@YAII@Z ; std::_Get_size_of_n<4>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 998  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@PAVCToken@@@std@@QAEPAPAVCToken@@I@Z ENDP ; std::allocator<CToken *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCToken@@@std@@QAEXQAPAVCToken@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVCToken@@@std@@QAEXQAPAVCToken@@I@Z PROC ; std::allocator<CToken *>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	c1 e0 02	 shl	 eax, 2
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001c	83 c4 08	 add	 esp, 8

; 993  : 		}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCToken@@@std@@QAEXQAPAVCToken@@I@Z ENDP ; std::allocator<CToken *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@PAVCToken@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCToken@@@std@@QAE@XZ PROC		; std::allocator<CToken *>::allocator<CToken *>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@PAVCToken@@@std@@QAE@XZ ENDP		; std::allocator<CToken *>::allocator<CToken *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z
_TEXT	SEGMENT
tv168 = -148						; size = 4
tv161 = -144						; size = 4
tv71 = -144						; size = 4
$T2 = -140						; size = 4
$T3 = -136						; size = 4
$T4 = -132						; size = 4
$T5 = -128						; size = 4
$T6 = -124						; size = 12
$T7 = -109						; size = 1
_tok$8 = -44						; size = 4
_end$ = -40						; size = 12
_it$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 2
__char$ = 12						; size = 4
?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z PROC ; tokenArray::insertToken, COMDAT
; _this$ = ecx

; 30   : {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	std::vector<CToken*>::iterator it = alltokens.begin();        

  0002e	8d 45 e4	 lea	 eax, DWORD PTR _it$[ebp]
  00031	50		 push	 eax
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ; std::vector<CToken *,std::allocator<CToken *> >::begin
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 32   : 	std::vector<CToken*>::iterator end = alltokens.end();        

  00041	8d 45 d8	 lea	 eax, DWORD PTR _end$[ebp]
  00044	50		 push	 eax
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ; std::vector<CToken *,std::allocator<CToken *> >::end
  0004d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 33   : 	for( ; it != end; ++it)        

  00051	eb 08		 jmp	 SHORT $LN4@insertToke
$LN2@insertToke:
  00053	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  00056	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++
$LN4@insertToke:
  0005b	8d 45 d8	 lea	 eax, DWORD PTR _end$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  00062	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator!=
  00067	0f b6 c8	 movzx	 ecx, al
  0006a	85 c9		 test	 ecx, ecx
  0006c	74 1e		 je	 SHORT $LN3@insertToke

; 34   : 		if( (*it)->getCode() == code)        

  0006e	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  00071	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	e8 00 00 00 00	 call	 ?getCode@CToken@@QAEGXZ	; CToken::getCode
  0007d	0f b7 c0	 movzx	 eax, ax
  00080	0f b7 4d 08	 movzx	 ecx, WORD PTR _code$[ebp]
  00084	3b c1		 cmp	 eax, ecx
  00086	75 02		 jne	 SHORT $LN5@insertToke

; 35   : 			break;        

  00088	eb 02		 jmp	 SHORT $LN3@insertToke
$LN5@insertToke:

; 36   : 	if(it != alltokens.end())        

  0008a	eb c7		 jmp	 SHORT $LN2@insertToke
$LN3@insertToke:
  0008c	8d 45 84	 lea	 eax, DWORD PTR $T6[ebp]
  0008f	50		 push	 eax
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ; std::vector<CToken *,std::allocator<CToken *> >::end
  00098	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  0009e	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv71[ebp]
  000a4	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv168[ebp], ecx
  000aa	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ae	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv168[ebp]
  000b4	52		 push	 edx
  000b5	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  000b8	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator!=
  000bd	88 45 93	 mov	 BYTE PTR $T7[ebp], al
  000c0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c4	8d 4d 84	 lea	 ecx, DWORD PTR $T6[ebp]
  000c7	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  000cc	0f b6 45 93	 movzx	 eax, BYTE PTR $T7[ebp]
  000d0	85 c0		 test	 eax, eax
  000d2	74 35		 je	 SHORT $LN6@insertToke

; 37   : 		return *it;        

  000d4	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  000d7	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
  000dc	8b 00		 mov	 eax, DWORD PTR [eax]
  000de	89 45 80	 mov	 DWORD PTR $T5[ebp], eax
  000e1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e5	8d 4d d8	 lea	 ecx, DWORD PTR _end$[ebp]
  000e8	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  000ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f4	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  000f7	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  000fc	8b 45 80	 mov	 eax, DWORD PTR $T5[ebp]
  000ff	e9 c1 00 00 00	 jmp	 $LN1@insertToke

; 38   : 	else        

  00104	e9 a1 00 00 00	 jmp	 $LN7@insertToke
$LN6@insertToke:

; 39   : 	{        
; 40   : 		CToken *tok = new CToken(code,_char);        

  00109	6a 28		 push	 40			; 00000028H
  0010b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00110	83 c4 04	 add	 esp, 4
  00113	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00119	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0011d	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR $T3[ebp], 0
  00124	74 1c		 je	 SHORT $LN9@insertToke
  00126	8b 45 0c	 mov	 eax, DWORD PTR __char$[ebp]
  00129	50		 push	 eax
  0012a	0f b7 4d 08	 movzx	 ecx, WORD PTR _code$[ebp]
  0012e	51		 push	 ecx
  0012f	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00135	e8 00 00 00 00	 call	 ??0CToken@@QAE@GAATcharacter@@@Z ; CToken::CToken
  0013a	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv161[ebp], eax
  00140	eb 0a		 jmp	 SHORT $LN10@insertToke
$LN9@insertToke:
  00142	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv161[ebp], 0
$LN10@insertToke:
  0014c	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv161[ebp]
  00152	89 95 7c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  00158	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0015c	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00162	89 45 d4	 mov	 DWORD PTR _tok$8[ebp], eax

; 41   : 		alltokens.push_back(tok);

  00165	8d 45 d4	 lea	 eax, DWORD PTR _tok$8[ebp]
  00168	50		 push	 eax
  00169	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAEXABQAVCToken@@@Z ; std::vector<CToken *,std::allocator<CToken *> >::push_back

; 42   : 		nNewCount++;

  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nNewCount@@3HA
  00176	83 c0 01	 add	 eax, 1
  00179	a3 00 00 00 00	 mov	 DWORD PTR ?nNewCount@@3HA, eax

; 43   : 		return tok;        

  0017e	8b 45 d4	 mov	 eax, DWORD PTR _tok$8[ebp]
  00181	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00187	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0018b	8d 4d d8	 lea	 ecx, DWORD PTR _end$[ebp]
  0018e	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  00193	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0019a	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  0019d	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  001a2	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  001a8	eb 1b		 jmp	 SHORT $LN1@insertToke
$LN7@insertToke:

; 44   : 	}   
; 45   : 
; 46   : 	//实际应用中，插入后要对数组排序    
; 47   : }        

  001aa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ae	8d 4d d8	 lea	 ecx, DWORD PTR _end$[ebp]
  001b1	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  001b6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001bd	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  001c0	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
$LN1@insertToke:
  001c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001cf	59		 pop	 ecx
  001d0	5f		 pop	 edi
  001d1	5e		 pop	 esi
  001d2	5b		 pop	 ebx
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _end$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$2:
  00010	8d 4d 84	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z$3:
  00018	6a 28		 push	 40			; 00000028H
  0001a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c3		 ret	 0
__ehhandler$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z:
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00031	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z
  00043	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?insertToken@tokenArray@@QAEPAVCToken@@GAATcharacter@@@Z ENDP ; tokenArray::insertToken
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?getToken@tokenArray@@QAEPAVCToken@@G@Z
_TEXT	SEGMENT
$T2 = -112						; size = 4
$T3 = -108						; size = 4
_end$ = -40						; size = 12
_it$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 2
?getToken@tokenArray@@QAEPAVCToken@@G@Z PROC		; tokenArray::getToken, COMDAT
; _this$ = ecx

; 50   : {      

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getToken@tokenArray@@QAEPAVCToken@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 	//实际应用中使用二分查找   
; 52   : 	std::vector<CToken*>::iterator it = alltokens.begin();        

  0002b	8d 45 e4	 lea	 eax, DWORD PTR _it$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?begin@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ; std::vector<CToken *,std::allocator<CToken *> >::begin
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 	std::vector<CToken*>::iterator end = alltokens.end();        

  0003e	8d 45 d8	 lea	 eax, DWORD PTR _end$[ebp]
  00041	50		 push	 eax
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?end@?$vector@PAVCToken@@V?$allocator@PAVCToken@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@2@XZ ; std::vector<CToken *,std::allocator<CToken *> >::end
  0004a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 54   : 	for( ; it != end; ++it)        

  0004e	eb 08		 jmp	 SHORT $LN4@getToken
$LN2@getToken:
  00050	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  00053	e8 00 00 00 00	 call	 ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator++
$LN4@getToken:
  00058	8d 45 d8	 lea	 eax, DWORD PTR _end$[ebp]
  0005b	50		 push	 eax
  0005c	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  0005f	e8 00 00 00 00	 call	 ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator!=
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	74 49		 je	 SHORT $LN3@getToken

; 55   : 		if( (*it)->getCode() == code)        

  0006b	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  0006e	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	e8 00 00 00 00	 call	 ?getCode@CToken@@QAEGXZ	; CToken::getCode
  0007a	0f b7 c0	 movzx	 eax, ax
  0007d	0f b7 4d 08	 movzx	 ecx, WORD PTR _code$[ebp]
  00081	3b c1		 cmp	 eax, ecx
  00083	75 2d		 jne	 SHORT $LN5@getToken

; 56   : 			return *it;        

  00085	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  00088	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QBEAAPAVCToken@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CToken *> > >::operator*
  0008d	8b 00		 mov	 eax, DWORD PTR [eax]
  0008f	89 45 94	 mov	 DWORD PTR $T3[ebp], eax
  00092	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00096	8d 4d d8	 lea	 ecx, DWORD PTR _end$[ebp]
  00099	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  0009e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a5	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  000a8	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  000ad	8b 45 94	 mov	 eax, DWORD PTR $T3[ebp]
  000b0	eb 27		 jmp	 SHORT $LN1@getToken
$LN5@getToken:

; 57   : 	return NULL;        

  000b2	eb 9c		 jmp	 SHORT $LN2@getToken
$LN3@getToken:
  000b4	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  000bb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000bf	8d 4d d8	 lea	 ecx, DWORD PTR _end$[ebp]
  000c2	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  000c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ce	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  000d1	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
  000d6	8b 45 90	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@getToken:

; 58   : }        

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getToken@tokenArray@@QAEPAVCToken@@G@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?getToken@tokenArray@@QAEPAVCToken@@G@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _end$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCToken@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?getToken@tokenArray@@QAEPAVCToken@@G@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getToken@tokenArray@@QAEPAVCToken@@G@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getToken@tokenArray@@QAEPAVCToken@@G@Z ENDP		; tokenArray::getToken
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00009	c7 45 fc ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$[ebp], 1073741823 ; 3fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

  00010	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00013	c1 e0 02	 shl	 eax, 2
  00016	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

  00019	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00020	76 07		 jbe	 SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00022	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

  00029	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 33   : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	83 c0 27	 add	 eax, 39			; 00000027H
  0000f	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 94   : 	if (_Block_size <= _Bytes)

  00012	8b 45 fc	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00015	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00018	77 07		 ja	 SHORT $LN8@Allocate_m

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);

  0001a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __Block_size$[ebp], -1
$LN8@Allocate_m:

; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00021	8b 45 fc	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00030	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00034	74 02		 je	 SHORT $LN7@Allocate_m
  00036	eb 44		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00042	6a 00		 push	 0
  00044	6a 65		 push	 101			; 00000065H
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004b	6a 02		 push	 2
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00053	83 c4 18	 add	 esp, 24			; 00000018H
  00056	83 f8 01	 cmp	 eax, 1
  00059	75 01		 jne	 SHORT $LN12@Allocate_m
  0005b	cc		 int	 3
$LN12@Allocate_m:
  0005c	6a 00		 push	 0
  0005e	6a 65		 push	 101			; 00000065H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	33 c0		 xor	 eax, eax
  0007a	75 bc		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0007c	33 c0		 xor	 eax, eax
  0007e	75 b0		 jne	 SHORT $LN4@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00080	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00083	83 c0 27	 add	 eax, 39			; 00000027H
  00086	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00089	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 ff	 imul	 ecx, eax, -1
  00094	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00097	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0009a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	6b c8 fe	 imul	 ecx, eax, -2
  000a5	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000a8	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);

  000af	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 110  : 	}

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00009	c7 45 fc ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

  00010	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00013	c1 e0 03	 shl	 eax, 3
  00016	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

  00019	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00020	76 07		 jbe	 SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00022	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

  00029	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 33   : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 08		 push	 8
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  00023	83 c4 04	 add	 esp, 4
  00026	8b 10		 mov	 edx, DWORD PTR [eax]
  00028	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002b	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002e	89 11		 mov	 DWORD PTR [ecx], edx
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 346  : 	return (_Ptr);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 998  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00009	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00010	72 10		 jb	 SHORT $LN2@Deallocate

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00012	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  00015	50		 push	 eax
  00016	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  0001f	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8

; 208  : 	}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00009	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00010	72 0e		 jb	 SHORT $LN2@Allocate

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00012	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0001b	83 c4 04	 add	 esp, 4
  0001e	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00020	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00024	74 0e		 je	 SHORT $LN3@Allocate

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));

  00026	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0002f	83 c4 04	 add	 esp, 4
  00032	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00034	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 194  : 	}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
$T1 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	73 08		 jae	 SHORT $LN3@Min_value
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  0001b	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00020	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  00023	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  00026	89 55 bc	 mov	 DWORD PTR $T1[ebp], edx
  00029	8b 45 bc	 mov	 eax, DWORD PTR $T1[ebp]

; 25   : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 115  : 	_Bytes += _Non_user_size;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	83 c1 27	 add	 ecx, 39			; 00000027H
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);

  00016	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	6b c8 ff	 imul	 ecx, eax, -1
  00026	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00029	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0002c	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Adjust_man:

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0002f	b8 04 00 00 00	 mov	 eax, 4
  00034	6b c8 fe	 imul	 ecx, eax, -2
  00037	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  0003a	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00041	75 02		 jne	 SHORT $LN7@Adjust_man
  00043	eb 52		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004f	6a 00		 push	 0
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00056	83 c0 08	 add	 eax, 8
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0005f	6a 02		 push	 2
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00067	83 c4 18	 add	 esp, 24			; 00000018H
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 01		 jne	 SHORT $LN19@Adjust_man
  0006f	cc		 int	 3
$LN19@Adjust_man:
  00070	6a 00		 push	 0
  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00077	83 c0 08	 add	 eax, 8
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	33 c0		 xor	 eax, eax
  00095	75 ae		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00097	33 c0		 xor	 eax, eax
  00099	75 94		 jne	 SHORT $LN4@Adjust_man

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);

  0009b	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000aa	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000b1	72 08		 jb	 SHORT $LN13@Adjust_man
  000b3	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000b7	77 02		 ja	 SHORT $LN13@Adjust_man
  000b9	eb 52		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c5	6a 00		 push	 0
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  000cc	83 c0 12	 add	 eax, 18			; 00000012H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000d5	6a 02		 push	 2
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000dd	83 c4 18	 add	 esp, 24			; 00000018H
  000e0	83 f8 01	 cmp	 eax, 1
  000e3	75 01		 jne	 SHORT $LN20@Adjust_man
  000e5	cc		 int	 3
$LN20@Adjust_man:
  000e6	6a 00		 push	 0
  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  000ed	83 c0 12	 add	 eax, 18			; 00000012H
  000f0	50		 push	 eax
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00106	83 c4 14	 add	 esp, 20			; 00000014H
  00109	33 c0		 xor	 eax, eax
  0010b	75 ae		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  0010d	33 c0		 xor	 eax, eax
  0010f	75 9c		 jne	 SHORT $LN10@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00111	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00114	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  00117	89 08		 mov	 DWORD PTR [eax], ecx

; 134  : 	}

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 52   : 		return (::operator new(_Bytes));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	83 c4 04	 add	 esp, 4

; 53   : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 191  : 		{	// cut ties with parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 192  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 193  : 		if (_Myproxy != nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	0f 84 96 00 00
	00		 je	 $LN13@Orphan_me

; 194  : 			{	// adopted, remove self from list
; 195  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 04	 add	 ecx, 4
  00020	89 4d f8	 mov	 DWORD PTR __Pnext$1[ebp], ecx
$LN2@Orphan_me:

; 196  : 			while (*_Pnext != nullptr && *_Pnext != this)

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	74 17		 je	 SHORT $LN6@Orphan_me
  0002b	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	3b 4d fc	 cmp	 ecx, DWORD PTR _this$[ebp]
  00033	74 0d		 je	 SHORT $LN6@Orphan_me

; 197  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d f8	 mov	 DWORD PTR __Pnext$1[ebp], ecx
  00040	eb e1		 jmp	 SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 198  : 
; 199  : 			_STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

  00042	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00045	83 38 00	 cmp	 DWORD PTR [eax], 0
  00048	74 02		 je	 SHORT $LN9@Orphan_me
  0004a	eb 4a		 jmp	 SHORT $LN4@Orphan_me
$LN9@Orphan_me:
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00056	6a 00		 push	 0
  00058	68 c7 00 00 00	 push	 199			; 000000c7H
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00062	6a 02		 push	 2
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 01		 jne	 SHORT $LN14@Orphan_me
  00072	cc		 int	 3
$LN14@Orphan_me:
  00073	6a 00		 push	 0
  00075	68 c7 00 00 00	 push	 199			; 000000c7H
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	33 c0		 xor	 eax, eax
  00094	75 b6		 jne	 SHORT $LN9@Orphan_me
$LN4@Orphan_me:
  00096	33 c0		 xor	 eax, eax
  00098	75 a8		 jne	 SHORT $LN6@Orphan_me

; 200  : 			*_Pnext = _Mynextiter;

  0009a	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a3	89 10		 mov	 DWORD PTR [eax], edx

; 201  : 			_Myproxy = nullptr;

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN13@Orphan_me:

; 202  : 			}
; 203  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 204  : 		}

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 186  : 		{	// get address of remaining iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (&_Mynextiter);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4

; 188  : 		}

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 181  : 		{	// get owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	75 09		 jne	 SHORT $LN3@Getcont
  00014	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  0001b	eb 0a		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	89 45 b8	 mov	 DWORD PTR tv68[ebp], eax
$LN4@Getcont:
  00027	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]

; 183  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 176  : 		{	// disown owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 		_Myproxy = nullptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 178  : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -28						; size = 4
__Parent_proxy$3 = -24					; size = 4
__Lock$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 147  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 148  : 		if (_Parent == nullptr)

  0002b	83 7d 08 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  0002f	75 1e		 jne	 SHORT $LN2@Adopt

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

  00031	6a 03		 push	 3
  00033	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 152  : 			_Orphan_me();

  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

  00044	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ

; 155  : 		else

  0004d	eb 4b		 jmp	 SHORT $LN5@Adopt
$LN2@Adopt:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  0004f	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	89 4d e8	 mov	 DWORD PTR __Parent_proxy$3[ebp], ecx

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	3b 4d e8	 cmp	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0005f	74 39		 je	 SHORT $LN5@Adopt

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

  00061	6a 03		 push	 3
  00063	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 163  : 				_Orphan_me();

  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  00074	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 4d e8	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 165  : 				_Parent_proxy->_Myfirstiter = this;

  00080	8b 45 e8	 mov	 eax, DWORD PTR __Parent_proxy$3[ebp]
  00083	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 166  : 				_Myproxy = _Parent_proxy;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0008f	89 08		 mov	 DWORD PTR [eax], ecx

; 167  : 				}

  00091	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN5@Adopt:

; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;
; 171  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 172  : 			}
; 173  : 		}

  0009a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 139  : 		{	// destroy the iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 140  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0002b	6a 03		 push	 3
  0002d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 109  : 		{	// construct orphaned iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 110  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -24						; size = 4
__Lock$3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != nullptr)

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00031	74 4f		 je	 SHORT $LN6@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

  00033	6a 03		 push	 3
  00035	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	83 c1 04	 add	 ecx, 4
  00046	89 4d e8	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  00049	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 221  : 			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)

  0004b	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 55 e8	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00053	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00056	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  00058	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0005b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005e	74 0d		 je	 SHORT $LN3@Orphan_all

; 222  : 			(*_Pnext)->_Myproxy = nullptr;

  00060	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0006b	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = nullptr;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 224  : 		}

  00079	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN6@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 95   : 		{	// get address of iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Myproxy == nullptr ? nullptr : &_Myproxy->_Myfirstiter);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	75 09		 jne	 SHORT $LN3@Getpfirst
  00014	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  0001b	eb 0b		 jmp	 SHORT $LN4@Getpfirst
$LN3@Getpfirst:
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	83 c2 04	 add	 edx, 4
  00025	89 55 b8	 mov	 DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
  00028	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]

; 97   : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 81   : 		{	// construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 		: _Myproxy(nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 82   : 		}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 69   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 		: _Mycont(nullptr), _Myfirstiter(nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 70   : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 616  : 		{	// return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 617  : 		return (INT_MAX);

  00009	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 618  : 		}

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 330  : 		if (pszCategory == nullptr)

  00016	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0001c	e9 a9 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00021	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00028	72 2d		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0002a	33 c0		 xor	 eax, eax
  0002c	75 27		 jne	 SHORT $LN5@RegisterCa
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 51 01 00 00	 push	 337			; 00000151H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 01		 jne	 SHORT $LN5@RegisterCa
  00054	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  00055	eb 73		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00057	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  00064	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	6a 00		 push	 0
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  00080	8b 45 08	 mov	 eax, DWORD PTR _pszCategory$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  00089	6a 7f		 push	 127			; 0000007fH
  0008b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _swprintf_s
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 7f		 push	 127			; 0000007fH
  000a3	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000ad	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000b3	51		 push	 ecx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000c2	83 c0 01	 add	 eax, 1
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceString@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceString@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceString'', COMDAT

; 114  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceString> atlTraceString(_T("atlTraceString"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MBNHGHMI@atlTraceString@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceString@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceString''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 00 02 00	 push	 131072			; 00020000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMFNIFA@atlTraceException@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 20 00 00	 push	 8192			; 00002000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1538 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1539 :             int _Result;
; 1540 :             va_list _ArgList;
; 1541 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1542 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vswprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1543 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1544 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1545 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\sensitivewordsfilter.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
