; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\游戏服务器\DBCorrespondManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
?IID_IDBCorrespondManager@@3U_GUID@@B DD 0ba43154dH	; IID_IDBCorrespondManager
	DW	0924bH
	DW	04018H
	DB	0b2H
	DB	06dH
	DB	0a6H
	DB	096H
	DB	0b6H
	DB	028H
	DB	026H
	DB	0b2H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?data@CPlex@@QAEPAXXZ				; CPlex::data
PUBLIC	??0IUnknownEx@@QAE@XZ				; IUnknownEx::IUnknownEx
PUBLIC	?GetProductVer@@YAEK@Z				; GetProductVer
PUBLIC	?GetMainVer@@YAEK@Z				; GetMainVer
PUBLIC	?GetSubVer@@YAEK@Z				; GetSubVer
PUBLIC	?GetBuildVer@@YAEK@Z				; GetBuildVer
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	??0IServiceModule@@QAE@XZ			; IServiceModule::IServiceModule
PUBLIC	??0IDBCorrespondManager@@QAE@XZ			; IDBCorrespondManager::IDBCorrespondManager
PUBLIC	??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::CList<tagDBRequestHead *,tagDBRequestHead * const &>
PUBLIC	?GetCount@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEHXZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetCount
PUBLIC	?RemoveHead@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAUtagDBRequestHead@@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveHead
PUBLIC	?AddTail@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAU__POSITION@@ABQAUtagDBRequestHead@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AddTail
PUBLIC	?RemoveAll@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXXZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAll
PUBLIC	?GetHeadPosition@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetHeadPosition
PUBLIC	?GetNext@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEAAPAUtagDBRequestHead@@AAPAU__POSITION@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetNext
PUBLIC	?RemoveAt@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXPAU__POSITION@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAt
PUBLIC	?NewNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::NewNode
PUBLIC	?FreeNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEXPAUCNode@1@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::FreeNode
PUBLIC	??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::~CList<tagDBRequestHead *,tagDBRequestHead * const &>
PUBLIC	?Serialize@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEXAAVCArchive@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::Serialize
PUBLIC	?Dump@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXAAVCDumpContext@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::Dump
PUBLIC	?AssertValid@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXXZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AssertValid
PUBLIC	??_G?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEPAXI@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`scalar deleting destructor'
PUBLIC	??0?$CWHArray@KABK@@QAE@XZ			; CWHArray<unsigned long,unsigned long const &>::CWHArray<unsigned long,unsigned long const &>
PUBLIC	??1?$CWHArray@KABK@@UAE@XZ			; CWHArray<unsigned long,unsigned long const &>::~CWHArray<unsigned long,unsigned long const &>
PUBLIC	?GetCount@?$CWHArray@KABK@@QBEHXZ		; CWHArray<unsigned long,unsigned long const &>::GetCount
PUBLIC	?Add@?$CWHArray@KABK@@QAEHABK@Z			; CWHArray<unsigned long,unsigned long const &>::Add
PUBLIC	?ElementAt@?$CWHArray@KABK@@QAEAAKH@Z		; CWHArray<unsigned long,unsigned long const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@KABK@@QAEXH@Z		; CWHArray<unsigned long,unsigned long const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@KABK@@QAEXHABK@Z		; CWHArray<unsigned long,unsigned long const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@KABK@@QAEXHH@Z		; CWHArray<unsigned long,unsigned long const &>::RemoveAt
PUBLIC	?RemoveAll@?$CWHArray@KABK@@QAEXXZ		; CWHArray<unsigned long,unsigned long const &>::RemoveAll
PUBLIC	??A?$CWHArray@KABK@@QAEAAKH@Z			; CWHArray<unsigned long,unsigned long const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@KABK@@QAEXH@Z		; CWHArray<unsigned long,unsigned long const &>::AllocMemory
PUBLIC	??_G?$CWHArray@KABK@@UAEPAXI@Z			; CWHArray<unsigned long,unsigned long const &>::`scalar deleting destructor'
PUBLIC	??0CDBCorrespondManager@@QAE@XZ			; CDBCorrespondManager::CDBCorrespondManager
PUBLIC	??1CDBCorrespondManager@@QAE@XZ			; CDBCorrespondManager::~CDBCorrespondManager
PUBLIC	?Release@CDBCorrespondManager@@UAEXXZ		; CDBCorrespondManager::Release
PUBLIC	?QueryInterface@CDBCorrespondManager@@UAEPAXABU_GUID@@K@Z ; CDBCorrespondManager::QueryInterface
PUBLIC	?StartService@CDBCorrespondManager@@UAE_NXZ	; CDBCorrespondManager::StartService
PUBLIC	?ConcludeService@CDBCorrespondManager@@UAE_NXZ	; CDBCorrespondManager::ConcludeService
PUBLIC	?InitDBCorrespondManager@CDBCorrespondManager@@UAA_NPAUIDataBaseEngine@@@Z ; CDBCorrespondManager::InitDBCorrespondManager
PUBLIC	?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z ; CDBCorrespondManager::PostDataBaseRequest
PUBLIC	?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z ; CDBCorrespondManager::OnPostRequestComplete
PUBLIC	?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ	; CDBCorrespondManager::OnTimerNotify
PUBLIC	?IsPostDBRequest@CDBCorrespondManager@@QAE_NK@Z	; CDBCorrespondManager::IsPostDBRequest
PUBLIC	?GetUserArrayIndex@CDBCorrespondManager@@QAEHK@Z ; CDBCorrespondManager::GetUserArrayIndex
PUBLIC	?AmortizeSyncData@CDBCorrespondManager@@QAE_NKGKPAXGE@Z ; CDBCorrespondManager::AmortizeSyncData
PUBLIC	?PerformAmortisation@CDBCorrespondManager@@QAEXXZ ; CDBCorrespondManager::PerformAmortisation
PUBLIC	?ClearAmortizeData@CDBCorrespondManager@@QAEXXZ	; CDBCorrespondManager::ClearAmortizeData
PUBLIC	??_GCDBCorrespondManager@@QAEPAXI@Z		; CDBCorrespondManager::`scalar deleting destructor'
PUBLIC	??$SerializeElements@PAUtagDBRequestHead@@@@YGXAAVCArchive@@PAPAUtagDBRequestHead@@H@Z ; SerializeElements<tagDBRequestHead *>
PUBLIC	??$DumpElements@PAUtagDBRequestHead@@@@YGXAAVCDumpContext@@PBQAUtagDBRequestHead@@H@Z ; DumpElements<tagDBRequestHead *>
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IServiceModule@@6B@				; IServiceModule::`vftable'
PUBLIC	??_7IDBCorrespondManager@@6B@			; IDBCorrespondManager::`vftable'
PUBLIC	??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_05PLCFPPOI@with?5@			; `string'
PUBLIC	??_C@_09HCLNAIDE@?5elements@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_7?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`vftable'
PUBLIC	??_7?$CWHArray@KABK@@6B@			; CWHArray<unsigned long,unsigned long const &>::`vftable'
PUBLIC	??_7CDBCorrespondManager@@6B@			; CDBCorrespondManager::`vftable'
PUBLIC	?__LINE__Var@?0??StartService@CDBCorrespondManager@@UAE_NXZ@4JA ; `CDBCorrespondManager::StartService'::`1'::__LINE__Var
PUBLIC	??_C@_0FC@HBFPLNLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServiceModule@@6B@			; IServiceModule::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServiceModule@@@8			; IServiceModule `RTTI Type Descriptor'
PUBLIC	??_R3IServiceModule@@8				; IServiceModule::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServiceModule@@8				; IServiceModule::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServiceModule@@8			; IServiceModule::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IDBCorrespondManager@@6B@			; IDBCorrespondManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIDBCorrespondManager@@@8		; IDBCorrespondManager `RTTI Type Descriptor'
PUBLIC	??_R3IDBCorrespondManager@@8			; IDBCorrespondManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IDBCorrespondManager@@8			; IDBCorrespondManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IDBCorrespondManager@@8		; IDBCorrespondManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CList@PAUtagDBRequestHead@@ABQAU1@@@@8 ; CList<tagDBRequestHead *,tagDBRequestHead * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CList@PAUtagDBRequestHead@@ABQAU1@@@8	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CList@PAUtagDBRequestHead@@ABQAU1@@@8	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CList@PAUtagDBRequestHead@@ABQAU1@@@8 ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@KABK@@6B@			; CWHArray<unsigned long,unsigned long const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@KABK@@@8			; CWHArray<unsigned long,unsigned long const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@KABK@@8				; CWHArray<unsigned long,unsigned long const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@KABK@@8				; CWHArray<unsigned long,unsigned long const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@KABK@@8		; CWHArray<unsigned long,unsigned long const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDBCorrespondManager@@6B@			; CDBCorrespondManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDBCorrespondManager@@@8		; CDBCorrespondManager `RTTI Type Descriptor'
PUBLIC	??_R3CDBCorrespondManager@@8			; CDBCorrespondManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDBCorrespondManager@@8			; CDBCorrespondManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDBCorrespondManager@@8		; CDBCorrespondManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:PROC ; AfxAssertValidObject
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	??1CObject@@UAE@XZ:PROC				; CObject::~CObject
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	??0CObject@@IAE@XZ:PROC				; CObject::CObject
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?AssertValid@CObject@@UBEXXZ:PROC		; CObject::AssertValid
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:PROC	; CObject::Dump
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:PROC		; AfxIsValidAddress
EXTRN	?IsStoring@CArchive@@QBEHXZ:PROC		; CArchive::IsStoring
EXTRN	?EnsureRead@CArchive@@QAEXPAXI@Z:PROC		; CArchive::EnsureRead
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?GetDepth@CDumpContext@@QBEHXZ:PROC		; CDumpContext::GetDepth
EXTRN	??6CDumpContext@@QAEAAV0@PBD@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@H@Z:PROC		; CDumpContext::operator<<
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??0CCriticalSection@@QAE@XZ:PROC		; CCriticalSection::CCriticalSection
EXTRN	??1CCriticalSection@@UAE@XZ:PROC		; CCriticalSection::~CCriticalSection
EXTRN	__imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z:PROC
EXTRN	__imp_??1CWHDataLocker@@UAE@XZ:PROC
EXTRN	??_E?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEPAXI@Z:PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`vector deleting destructor'
EXTRN	??_E?$CWHArray@KABK@@UAEPAXI@Z:PROC		; CWHArray<unsigned long,unsigned long const &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CDBCorrespondManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDBCorrespondManager@@8 DD FLAT:??_R0?AVCDBCorrespondManager@@@8 ; CDBCorrespondManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDBCorrespondManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CDBCorrespondManager@@8
rdata$r	SEGMENT
??_R2CDBCorrespondManager@@8 DD FLAT:??_R1A@?0A@EA@CDBCorrespondManager@@8 ; CDBCorrespondManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IDBCorrespondManager@@8
	DD	FLAT:??_R1A@?0A@EA@IServiceModule@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CDBCorrespondManager@@8
rdata$r	SEGMENT
??_R3CDBCorrespondManager@@8 DD 00H			; CDBCorrespondManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CDBCorrespondManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDBCorrespondManager@@@8
data$r	SEGMENT
??_R0?AVCDBCorrespondManager@@@8 DD FLAT:??_7type_info@@6B@ ; CDBCorrespondManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDBCorrespondManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDBCorrespondManager@@6B@
rdata$r	SEGMENT
??_R4CDBCorrespondManager@@6B@ DD 00H			; CDBCorrespondManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDBCorrespondManager@@@8
	DD	FLAT:??_R3CDBCorrespondManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@KABK@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@KABK@@8 DD FLAT:??_R0?AV?$CWHArray@KABK@@@8 ; CWHArray<unsigned long,unsigned long const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@KABK@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@KABK@@8
rdata$r	SEGMENT
??_R2?$CWHArray@KABK@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@KABK@@8 ; CWHArray<unsigned long,unsigned long const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@KABK@@8
rdata$r	SEGMENT
??_R3?$CWHArray@KABK@@8 DD 00H				; CWHArray<unsigned long,unsigned long const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@KABK@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@KABK@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@KABK@@@8 DD FLAT:??_7type_info@@6B@	; CWHArray<unsigned long,unsigned long const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@KABK@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@KABK@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@KABK@@6B@ DD 00H			; CWHArray<unsigned long,unsigned long const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@KABK@@@8
	DD	FLAT:??_R3?$CWHArray@KABK@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CList@PAUtagDBRequestHead@@ABQAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CList@PAUtagDBRequestHead@@ABQAU1@@@8 DD FLAT:??_R0?AV?$CList@PAUtagDBRequestHead@@ABQAU1@@@@8 ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CList@PAUtagDBRequestHead@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CList@PAUtagDBRequestHead@@ABQAU1@@@8
rdata$r	SEGMENT
??_R2?$CList@PAUtagDBRequestHead@@ABQAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CList@PAUtagDBRequestHead@@ABQAU1@@@8 ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CList@PAUtagDBRequestHead@@ABQAU1@@@8
rdata$r	SEGMENT
??_R3?$CList@PAUtagDBRequestHead@@ABQAU1@@@8 DD 00H	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CList@PAUtagDBRequestHead@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CList@PAUtagDBRequestHead@@ABQAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CList@PAUtagDBRequestHead@@ABQAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CList<tagDBRequestHead *,tagDBRequestHead * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CList@PAUtagDBRequestHead@@ABQAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@ DD 00H	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CList@PAUtagDBRequestHead@@ABQAU1@@@@8
	DD	FLAT:??_R3?$CList@PAUtagDBRequestHead@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IDBCorrespondManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IDBCorrespondManager@@8 DD FLAT:??_R0?AUIDBCorrespondManager@@@8 ; IDBCorrespondManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IDBCorrespondManager@@8
rdata$r	ENDS
;	COMDAT ??_R2IDBCorrespondManager@@8
rdata$r	SEGMENT
??_R2IDBCorrespondManager@@8 DD FLAT:??_R1A@?0A@EA@IDBCorrespondManager@@8 ; IDBCorrespondManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IServiceModule@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IDBCorrespondManager@@8
rdata$r	SEGMENT
??_R3IDBCorrespondManager@@8 DD 00H			; IDBCorrespondManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IDBCorrespondManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIDBCorrespondManager@@@8
data$r	SEGMENT
??_R0?AUIDBCorrespondManager@@@8 DD FLAT:??_7type_info@@6B@ ; IDBCorrespondManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIDBCorrespondManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4IDBCorrespondManager@@6B@
rdata$r	SEGMENT
??_R4IDBCorrespondManager@@6B@ DD 00H			; IDBCorrespondManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIDBCorrespondManager@@@8
	DD	FLAT:??_R3IDBCorrespondManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServiceModule@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServiceModule@@8 DD FLAT:??_R0?AUIServiceModule@@@8 ; IServiceModule::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R2IServiceModule@@8
rdata$r	SEGMENT
??_R2IServiceModule@@8 DD FLAT:??_R1A@?0A@EA@IServiceModule@@8 ; IServiceModule::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServiceModule@@8
rdata$r	SEGMENT
??_R3IServiceModule@@8 DD 00H				; IServiceModule::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServiceModule@@@8
data$r	SEGMENT
??_R0?AUIServiceModule@@@8 DD FLAT:??_7type_info@@6B@	; IServiceModule `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServiceModule@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServiceModule@@6B@
rdata$r	SEGMENT
??_R4IServiceModule@@6B@ DD 00H				; IServiceModule::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServiceModule@@@8
	DD	FLAT:??_R3IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@HBFPLNLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0FC@HBFPLNLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0d3H, 0ceH, 0cfH, 0b7H, 0b7H, 0feH, 0ceH, 0f1H, 0c6H
	DB	0f7H, '\dbcorrespondmanager.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??StartService@CDBCorrespondManager@@UAE_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??StartService@CDBCorrespondManager@@UAE_NXZ@4JA DD 020H ; `CDBCorrespondManager::StartService'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CDBCorrespondManager@@6B@
CONST	SEGMENT
??_7CDBCorrespondManager@@6B@ DD FLAT:??_R4CDBCorrespondManager@@6B@ ; CDBCorrespondManager::`vftable'
	DD	FLAT:?Release@CDBCorrespondManager@@UAEXXZ
	DD	FLAT:?QueryInterface@CDBCorrespondManager@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?StartService@CDBCorrespondManager@@UAE_NXZ
	DD	FLAT:?ConcludeService@CDBCorrespondManager@@UAE_NXZ
	DD	FLAT:?InitDBCorrespondManager@CDBCorrespondManager@@UAA_NPAUIDataBaseEngine@@@Z
	DD	FLAT:?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z
	DD	FLAT:?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z
	DD	FLAT:?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ
CONST	ENDS
;	COMDAT ??_7?$CWHArray@KABK@@6B@
CONST	SEGMENT
??_7?$CWHArray@KABK@@6B@ DD FLAT:??_R4?$CWHArray@KABK@@6B@ ; CWHArray<unsigned long,unsigned long const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@KABK@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@
CONST	SEGMENT
??_7?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@ DD FLAT:??_R4?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXXZ
	DD	FLAT:?Dump@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCLNAIDE@?5elements@
CONST	SEGMENT
??_C@_09HCLNAIDE@?5elements@ DB ' elements', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLCFPPOI@with?5@
CONST	SEGMENT
??_C@_05PLCFPPOI@with?5@ DB 'with ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\afxtempl.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7IDBCorrespondManager@@6B@
CONST	SEGMENT
??_7IDBCorrespondManager@@6B@ DD FLAT:??_R4IDBCorrespondManager@@6B@ ; IDBCorrespondManager::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IServiceModule@@6B@
CONST	SEGMENT
??_7IServiceModule@@6B@ DD FLAT:??_R4IServiceModule@@6B@ ; IServiceModule::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ$0
__ehfuncinfo$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z$0
__ehfuncinfo$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z$0
__ehfuncinfo$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConcludeService@CDBCorrespondManager@@UAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConcludeService@CDBCorrespondManager@@UAE_NXZ$0
__ehfuncinfo$?ConcludeService@CDBCorrespondManager@@UAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConcludeService@CDBCorrespondManager@@UAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CDBCorrespondManager@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDBCorrespondManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDBCorrespondManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDBCorrespondManager@@QAE@XZ$1
__ehfuncinfo$??0CDBCorrespondManager@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDBCorrespondManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z$0
__ehfuncinfo$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@PAUtagDBRequestHead@@@@YGXAAVCDumpContext@@PBQAUtagDBRequestHead@@H@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAUtagDBRequestHead@@@@YGXAAVCDumpContext@@PBQAUtagDBRequestHead@@H@Z PROC ; DumpElements<tagDBRequestHead *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAUtagDBRequestHead@@@@YGXAAVCDumpContext@@PBQAUtagDBRequestHead@@H@Z ENDP ; DumpElements<tagDBRequestHead *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAUtagDBRequestHead@@@@YGXAAVCArchive@@PAPAUtagDBRequestHead@@H@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAUtagDBRequestHead@@@@YGXAAVCArchive@@PAPAUtagDBRequestHead@@H@Z PROC ; SerializeElements<tagDBRequestHead *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAUtagDBRequestHead@@@@YGXAAVCArchive@@PAPAUtagDBRequestHead@@H@Z ENDP ; SerializeElements<tagDBRequestHead *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCDBCorrespondManager@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDBCorrespondManager@@QAEPAXI@Z PROC		; CDBCorrespondManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CDBCorrespondManager@@QAE@XZ ; CDBCorrespondManager::~CDBCorrespondManager
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 60		 push	 96			; 00000060H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCDBCorrespondManager@@QAEPAXI@Z ENDP		; CDBCorrespondManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?ClearAmortizeData@CDBCorrespondManager@@QAEXXZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_pRqHead$2 = -8						; size = 4
_this$ = -4						; size = 4
?ClearAmortizeData@CDBCorrespondManager@@QAEXXZ PROC	; CDBCorrespondManager::ClearAmortizeData, COMDAT
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@ClearAmort:

; 190  : 	while(m_DBRequestList.GetCount() > 0)

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	e8 00 00 00 00	 call	 ?GetCount@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEHXZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetCount
  00017	85 c0		 test	 eax, eax
  00019	7e 28		 jle	 SHORT $LN1@ClearAmort

; 191  : 	{
; 192  : 		tagDBRequestHead * pRqHead = m_DBRequestList.RemoveHead();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 30	 add	 ecx, 48			; 00000030H
  00021	e8 00 00 00 00	 call	 ?RemoveHead@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAUtagDBRequestHead@@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveHead
  00026	89 45 f8	 mov	 DWORD PTR _pRqHead$2[ebp], eax

; 193  : 		if(pRqHead)

  00029	83 7d f8 00	 cmp	 DWORD PTR _pRqHead$2[ebp], 0
  0002d	74 12		 je	 SHORT $LN4@ClearAmort

; 194  : 		{
; 195  : 			delete [] ((BYTE*)pRqHead);

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _pRqHead$2[ebp]
  00032	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00035	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003e	83 c4 04	 add	 esp, 4
$LN4@ClearAmort:

; 196  : 		}
; 197  : 	}

  00041	eb c9		 jmp	 SHORT $LN2@ClearAmort
$LN1@ClearAmort:

; 198  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?ClearAmortizeData@CDBCorrespondManager@@QAEXXZ ENDP	; CDBCorrespondManager::ClearAmortizeData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?PerformAmortisation@CDBCorrespondManager@@QAEXXZ
_TEXT	SEGMENT
_pDBRequestHead$1 = -12					; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
?PerformAmortisation@CDBCorrespondManager@@QAEXXZ PROC	; CDBCorrespondManager::PerformAmortisation, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 	//遍历数据
; 170  : 	POSITION pos = m_DBRequestList.GetHeadPosition();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetHeadPosition
  00017	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax
$LN2@PerformAmo:

; 171  : 	while(pos != NULL)

  0001a	83 7d f8 00	 cmp	 DWORD PTR _pos$[ebp], 0
  0001e	74 78		 je	 SHORT $LN1@PerformAmo

; 172  : 	{
; 173  : 		tagDBRequestHead *pDBRequestHead = m_DBRequestList.GetNext(pos);

  00020	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 30	 add	 ecx, 48			; 00000030H
  0002a	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEAAPAUtagDBRequestHead@@AAPAU__POSITION@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetNext
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	89 4d f4	 mov	 DWORD PTR _pDBRequestHead$1[ebp], ecx

; 174  : 
; 175  : 		//投递请求
; 176  : 		if(!IsPostDBRequest(pDBRequestHead->dwUserID))

  00034	8b 45 f4	 mov	 eax, DWORD PTR _pDBRequestHead$1[ebp]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	51		 push	 ecx
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?IsPostDBRequest@CDBCorrespondManager@@QAE_NK@Z ; CDBCorrespondManager::IsPostDBRequest
  00043	0f b6 d0	 movzx	 edx, al
  00046	85 d2		 test	 edx, edx
  00048	75 4c		 jne	 SHORT $LN4@PerformAmo

; 177  : 		{
; 178  : 			if(m_pIKernelDataBaseEngine)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00051	74 43		 je	 SHORT $LN4@PerformAmo

; 179  : 			{
; 180  : 				m_DBRequestUserArray.Add(pDBRequestHead->dwUserID);

  00053	8b 45 f4	 mov	 eax, DWORD PTR _pDBRequestHead$1[ebp]
  00056	83 c0 04	 add	 eax, 4
  00059	50		 push	 eax
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00060	e8 00 00 00 00	 call	 ?Add@?$CWHArray@KABK@@QAEHABK@Z ; CWHArray<unsigned long,unsigned long const &>::Add

; 181  : 				m_pIKernelDataBaseEngine->PostDataBaseRequest(pDBRequestHead->wRequestID, pDBRequestHead->dwContextID, (VOID*)(pDBRequestHead+1), pDBRequestHead->wDataSize);

  00065	8b 45 f4	 mov	 eax, DWORD PTR _pDBRequestHead$1[ebp]
  00068	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  0006c	51		 push	 ecx
  0006d	8b 55 f4	 mov	 edx, DWORD PTR _pDBRequestHead$1[ebp]
  00070	83 c2 10	 add	 edx, 16			; 00000010H
  00073	52		 push	 edx
  00074	8b 45 f4	 mov	 eax, DWORD PTR _pDBRequestHead$1[ebp]
  00077	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007a	51		 push	 ecx
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _pDBRequestHead$1[ebp]
  0007e	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00082	50		 push	 eax
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00089	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 12		 mov	 edx, DWORD PTR [edx]
  0008e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00091	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00094	ff d0		 call	 eax
$LN4@PerformAmo:

; 182  : 			}
; 183  : 		}
; 184  : 	}

  00096	eb 82		 jmp	 SHORT $LN2@PerformAmo
$LN1@PerformAmo:

; 185  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?PerformAmortisation@CDBCorrespondManager@@QAEXXZ ENDP	; CDBCorrespondManager::PerformAmortisation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?AmortizeSyncData@CDBCorrespondManager@@QAE_NKGKPAXGE@Z
_TEXT	SEGMENT
$T1 = -84						; size = 4
_pDBRequestHead$ = -16					; size = 4
_pBuff$ = -12						; size = 4
_wBuffSize$ = -8					; size = 2
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
_wRequestID$ = 12					; size = 2
_dwContextID$ = 16					; size = 4
_pData$ = 20						; size = 4
_wDataSize$ = 24					; size = 2
_cbCache$ = 28						; size = 1
?AmortizeSyncData@CDBCorrespondManager@@QAE_NKGKPAXGE@Z PROC ; CDBCorrespondManager::AmortizeSyncData, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  : 	//定义变量
; 147  : 	WORD wBuffSize = sizeof(tagDBRequestHead)+wDataSize;

  0000c	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00010	83 c0 10	 add	 eax, 16			; 00000010H
  00013	66 89 45 f8	 mov	 WORD PTR _wBuffSize$[ebp], ax

; 148  : 	BYTE *pBuff = new BYTE[wBuffSize];

  00017	0f b7 45 f8	 movzx	 eax, WORD PTR _wBuffSize$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00021	83 c4 04	 add	 esp, 4
  00024	89 45 ac	 mov	 DWORD PTR $T1[ebp], eax
  00027	8b 4d ac	 mov	 ecx, DWORD PTR $T1[ebp]
  0002a	89 4d f4	 mov	 DWORD PTR _pBuff$[ebp], ecx

; 149  : 	ZeroMemory(pBuff, wBuffSize);

  0002d	0f b7 45 f8	 movzx	 eax, WORD PTR _wBuffSize$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _pBuff$[ebp]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _memset
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 150  : 	tagDBRequestHead *pDBRequestHead = (tagDBRequestHead*)pBuff;

  00040	8b 45 f4	 mov	 eax, DWORD PTR _pBuff$[ebp]
  00043	89 45 f0	 mov	 DWORD PTR _pDBRequestHead$[ebp], eax

; 151  : 
; 152  : 	//填充数据
; 153  : 	pDBRequestHead->cbCache = cbCache;

  00046	8b 45 f0	 mov	 eax, DWORD PTR _pDBRequestHead$[ebp]
  00049	8a 4d 1c	 mov	 cl, BYTE PTR _cbCache$[ebp]
  0004c	88 08		 mov	 BYTE PTR [eax], cl

; 154  : 	pDBRequestHead->dwUserID = dwUserID;

  0004e	8b 45 f0	 mov	 eax, DWORD PTR _pDBRequestHead$[ebp]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  00054	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 155  : 	pDBRequestHead->dwContextID = dwContextID;

  00057	8b 45 f0	 mov	 eax, DWORD PTR _pDBRequestHead$[ebp]
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _dwContextID$[ebp]
  0005d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 156  : 	pDBRequestHead->wRequestID  = wRequestID;

  00060	8b 45 f0	 mov	 eax, DWORD PTR _pDBRequestHead$[ebp]
  00063	66 8b 4d 0c	 mov	 cx, WORD PTR _wRequestID$[ebp]
  00067	66 89 48 0c	 mov	 WORD PTR [eax+12], cx

; 157  : 	pDBRequestHead->wDataSize   = wDataSize;

  0006b	8b 45 f0	 mov	 eax, DWORD PTR _pDBRequestHead$[ebp]
  0006e	66 8b 4d 18	 mov	 cx, WORD PTR _wDataSize$[ebp]
  00072	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 158  : 	CopyMemory(((VOID*)(pDBRequestHead+1)), pData, wDataSize);

  00076	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d 14	 mov	 ecx, DWORD PTR _pData$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 f0	 mov	 edx, DWORD PTR _pDBRequestHead$[ebp]
  00082	83 c2 10	 add	 edx, 16			; 00000010H
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _memcpy
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  : 
; 160  : 	//加入链表
; 161  : 	m_DBRequestList.AddTail(pDBRequestHead);

  0008e	8d 45 f0	 lea	 eax, DWORD PTR _pDBRequestHead$[ebp]
  00091	50		 push	 eax
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	83 c1 30	 add	 ecx, 48			; 00000030H
  00098	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAU__POSITION@@ABQAUtagDBRequestHead@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AddTail

; 162  : 
; 163  : 	return true;

  0009d	b0 01		 mov	 al, 1

; 164  : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 18 00	 ret	 24			; 00000018H
?AmortizeSyncData@CDBCorrespondManager@@QAE_NKGKPAXGE@Z ENDP ; CDBCorrespondManager::AmortizeSyncData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?GetUserArrayIndex@CDBCorrespondManager@@QAEHK@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?GetUserArrayIndex@CDBCorrespondManager@@QAEHK@Z PROC	; CDBCorrespondManager::GetUserArrayIndex, COMDAT
; _this$ = ecx

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 135  : 	for(INT_PTR i=0; i<m_DBRequestUserArray.GetCount(); i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@GetUserArr
$LN2@GetUserArr:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetUserArr:
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00024	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@KABK@@QBEHXZ ; CWHArray<unsigned long,unsigned long const &>::GetCount
  00029	39 45 f8	 cmp	 DWORD PTR _i$1[ebp], eax
  0002c	7d 1d		 jge	 SHORT $LN3@GetUserArr

; 136  : 	{
; 137  : 		if(dwUserID == m_DBRequestUserArray[i]) return i;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00038	e8 00 00 00 00	 call	 ??A?$CWHArray@KABK@@QAEAAKH@Z ; CWHArray<unsigned long,unsigned long const &>::operator[]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  00040	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00042	75 05		 jne	 SHORT $LN5@GetUserArr
  00044	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00047	eb 05		 jmp	 SHORT $LN1@GetUserArr
$LN5@GetUserArr:

; 138  : 	}

  00049	eb ca		 jmp	 SHORT $LN2@GetUserArr
$LN3@GetUserArr:

; 139  : 
; 140  : 	return -1;

  0004b	83 c8 ff	 or	 eax, -1
$LN1@GetUserArr:

; 141  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?GetUserArrayIndex@CDBCorrespondManager@@QAEHK@Z ENDP	; CDBCorrespondManager::GetUserArrayIndex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?IsPostDBRequest@CDBCorrespondManager@@QAE_NK@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?IsPostDBRequest@CDBCorrespondManager@@QAE_NK@Z PROC	; CDBCorrespondManager::IsPostDBRequest, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 124  : 	for(INT_PTR i=0; i<m_DBRequestUserArray.GetCount(); i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@IsPostDBRe
$LN2@IsPostDBRe:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@IsPostDBRe:
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00024	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@KABK@@QBEHXZ ; CWHArray<unsigned long,unsigned long const &>::GetCount
  00029	39 45 f8	 cmp	 DWORD PTR _i$1[ebp], eax
  0002c	7d 1c		 jge	 SHORT $LN3@IsPostDBRe

; 125  : 	{
; 126  : 		if(dwUserID == m_DBRequestUserArray[i]) return true;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00038	e8 00 00 00 00	 call	 ??A?$CWHArray@KABK@@QAEAAKH@Z ; CWHArray<unsigned long,unsigned long const &>::operator[]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  00040	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00042	75 04		 jne	 SHORT $LN5@IsPostDBRe
  00044	b0 01		 mov	 al, 1
  00046	eb 04		 jmp	 SHORT $LN1@IsPostDBRe
$LN5@IsPostDBRe:

; 127  : 	}

  00048	eb cb		 jmp	 SHORT $LN2@IsPostDBRe
$LN3@IsPostDBRe:

; 128  : 
; 129  : 	return false;

  0004a	32 c0		 xor	 al, al
$LN1@IsPostDBRe:

; 130  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?IsPostDBRequest@CDBCorrespondManager@@QAE_NK@Z ENDP	; CDBCorrespondManager::IsPostDBRequest
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ
_TEXT	SEGMENT
$T2 = -89						; size = 1
_DataLocker$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ PROC	; CDBCorrespondManager::OnTimerNotify, COMDAT

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 112  : 	//设置映射
; 113  : 	CWHDataLocker DataLocker(m_AsyncCritical);

  00028	6a 01		 push	 1
  0002a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 08	 add	 eax, 8
  00030	50		 push	 eax
  00031	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 114  : 
; 115  : 	//执行缓冲
; 116  : 	PerformAmortisation();

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?PerformAmortisation@CDBCorrespondManager@@QAEXXZ ; CDBCorrespondManager::PerformAmortisation

; 117  : 
; 118  : 	return true;

  00049	c6 45 a7 01	 mov	 BYTE PTR $T2[ebp], 1
  0004d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00054	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  0005d	8a 45 a7	 mov	 al, BYTE PTR $T2[ebp]

; 119  : }

  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnTimerNotify@CDBCorrespondManager@@UAA_NXZ ENDP	; CDBCorrespondManager::OnTimerNotify
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z
_TEXT	SEGMENT
$T2 = -109						; size = 1
$T3 = -108						; size = 4
_pDBRequestHead$4 = -40					; size = 4
_tempPos$5 = -36					; size = 4
_pos$ = -32						; size = 4
_nIndex$ = -28						; size = 4
_DataLocker$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_dwUserID$ = 12						; size = 4
_bSucceed$ = 16						; size = 1
?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z PROC ; CDBCorrespondManager::OnPostRequestComplete, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 77   : 	//设置映射
; 78   : 	CWHDataLocker DataLocker(m_AsyncCritical);

  00028	6a 01		 push	 1
  0002a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 08	 add	 eax, 8
  00030	50		 push	 eax
  00031	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 79   : 
; 80   : 	//清除投递记录
; 81   : 	INT_PTR nIndex = GetUserArrayIndex(dwUserID);

  00041	8b 45 0c	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?GetUserArrayIndex@CDBCorrespondManager@@QAEHK@Z ; CDBCorrespondManager::GetUserArrayIndex
  0004d	89 45 e4	 mov	 DWORD PTR _nIndex$[ebp], eax

; 82   : 	if(nIndex != -1) m_DBRequestUserArray.RemoveAt(nIndex);

  00050	83 7d e4 ff	 cmp	 DWORD PTR _nIndex$[ebp], -1
  00054	74 11		 je	 SHORT $LN4@OnPostRequ
  00056	6a 01		 push	 1
  00058	8b 45 e4	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00062	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@KABK@@QAEXHH@Z ; CWHArray<unsigned long,unsigned long const &>::RemoveAt
$LN4@OnPostRequ:

; 83   : 
; 84   : 	//清除数据
; 85   : 	POSITION pos = m_DBRequestList.GetHeadPosition();

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 30	 add	 ecx, 48			; 00000030H
  0006d	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetHeadPosition
  00072	89 45 e0	 mov	 DWORD PTR _pos$[ebp], eax
$LN2@OnPostRequ:

; 86   : 	while(pos != NULL)

  00075	83 7d e0 00	 cmp	 DWORD PTR _pos$[ebp], 0
  00079	74 5c		 je	 SHORT $LN3@OnPostRequ

; 87   : 	{
; 88   : 		POSITION tempPos = pos;

  0007b	8b 45 e0	 mov	 eax, DWORD PTR _pos$[ebp]
  0007e	89 45 dc	 mov	 DWORD PTR _tempPos$5[ebp], eax

; 89   : 		tagDBRequestHead *pDBRequestHead = m_DBRequestList.GetNext(pos);

  00081	8d 45 e0	 lea	 eax, DWORD PTR _pos$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 30	 add	 ecx, 48			; 00000030H
  0008b	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEAAPAUtagDBRequestHead@@AAPAU__POSITION@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetNext
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	89 4d d8	 mov	 DWORD PTR _pDBRequestHead$4[ebp], ecx

; 90   : 		if(pDBRequestHead->dwUserID == dwUserID)

  00095	8b 45 d8	 mov	 eax, DWORD PTR _pDBRequestHead$4[ebp]
  00098	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009b	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwUserID$[ebp]
  0009e	75 35		 jne	 SHORT $LN5@OnPostRequ

; 91   : 		{
; 92   : 			//清除
; 93   : 			if(pDBRequestHead->cbCache == FALSE || bSucceed)

  000a0	8b 45 d8	 mov	 eax, DWORD PTR _pDBRequestHead$4[ebp]
  000a3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a6	85 c9		 test	 ecx, ecx
  000a8	74 08		 je	 SHORT $LN7@OnPostRequ
  000aa	0f b6 45 10	 movzx	 eax, BYTE PTR _bSucceed$[ebp]
  000ae	85 c0		 test	 eax, eax
  000b0	74 21		 je	 SHORT $LN6@OnPostRequ
$LN7@OnPostRequ:

; 94   : 			{
; 95   : 				m_DBRequestList.RemoveAt(tempPos);

  000b2	8b 45 dc	 mov	 eax, DWORD PTR _tempPos$5[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	83 c1 30	 add	 ecx, 48			; 00000030H
  000bc	e8 00 00 00 00	 call	 ?RemoveAt@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXPAU__POSITION@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAt

; 96   : 				delete [] ((BYTE*)pDBRequestHead);

  000c1	8b 45 d8	 mov	 eax, DWORD PTR _pDBRequestHead$4[ebp]
  000c4	89 45 94	 mov	 DWORD PTR $T3[ebp], eax
  000c7	8b 4d 94	 mov	 ecx, DWORD PTR $T3[ebp]
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000d0	83 c4 04	 add	 esp, 4
$LN6@OnPostRequ:

; 97   : 			}
; 98   : 
; 99   : 			break;

  000d3	eb 02		 jmp	 SHORT $LN3@OnPostRequ
$LN5@OnPostRequ:

; 100  : 		}
; 101  : 	}

  000d5	eb 9e		 jmp	 SHORT $LN2@OnPostRequ
$LN3@OnPostRequ:

; 102  : 
; 103  : 	//执行缓冲
; 104  : 	PerformAmortisation();

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	e8 00 00 00 00	 call	 ?PerformAmortisation@CDBCorrespondManager@@QAEXXZ ; CDBCorrespondManager::PerformAmortisation

; 105  : 
; 106  : 	return true;

  000df	c6 45 93 01	 mov	 BYTE PTR $T2[ebp], 1
  000e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ea	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  000f3	8a 45 93	 mov	 al, BYTE PTR $T2[ebp]

; 107  : }

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnPostRequestComplete@CDBCorrespondManager@@UAA_NK_N@Z ENDP ; CDBCorrespondManager::OnPostRequestComplete
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z
_TEXT	SEGMENT
$T2 = -89						; size = 1
_DataLocker$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_dwUserID$ = 12						; size = 4
_wRequestID$ = 16					; size = 2
_dwContextID$ = 20					; size = 4
_pData$ = 24						; size = 4
_wDataSize$ = 28					; size = 2
_cbCache$ = 32						; size = 1
?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z PROC ; CDBCorrespondManager::PostDataBaseRequest, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 62   : 	//设置映射
; 63   : 	CWHDataLocker DataLocker(m_AsyncCritical);

  00028	6a 01		 push	 1
  0002a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 08	 add	 eax, 8
  00030	50		 push	 eax
  00031	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 64   : 
; 65   : 	//缓存处理
; 66   : 	AmortizeSyncData(dwUserID, wRequestID,dwContextID,pData,wDataSize,cbCache);

  00041	0f b6 45 20	 movzx	 eax, BYTE PTR _cbCache$[ebp]
  00045	50		 push	 eax
  00046	0f b7 4d 1c	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 18	 mov	 edx, DWORD PTR _pData$[ebp]
  0004e	52		 push	 edx
  0004f	8b 45 14	 mov	 eax, DWORD PTR _dwContextID$[ebp]
  00052	50		 push	 eax
  00053	0f b7 4d 10	 movzx	 ecx, WORD PTR _wRequestID$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 0c	 mov	 edx, DWORD PTR _dwUserID$[ebp]
  0005b	52		 push	 edx
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?AmortizeSyncData@CDBCorrespondManager@@QAE_NKGKPAXGE@Z ; CDBCorrespondManager::AmortizeSyncData

; 67   : 
; 68   : 	//执行缓冲
; 69   : 	PerformAmortisation();

  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?PerformAmortisation@CDBCorrespondManager@@QAEXXZ ; CDBCorrespondManager::PerformAmortisation

; 70   : 
; 71   : 	return true;

  0006c	c6 45 a7 01	 mov	 BYTE PTR $T2[ebp], 1
  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  00080	8a 45 a7	 mov	 al, BYTE PTR $T2[ebp]

; 72   : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PostDataBaseRequest@CDBCorrespondManager@@UAA_NKGKPAXGE@Z ENDP ; CDBCorrespondManager::PostDataBaseRequest
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?InitDBCorrespondManager@CDBCorrespondManager@@UAA_NPAUIDataBaseEngine@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pIDataBaseEngine$ = 12					; size = 4
?InitDBCorrespondManager@CDBCorrespondManager@@UAA_NPAUIDataBaseEngine@@@Z PROC ; CDBCorrespondManager::InitDBCorrespondManager, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 55   : 	m_pIKernelDataBaseEngine = pIDataBaseEngine;

  00009	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pIDataBaseEngine$[ebp]
  0000f	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 56   : 	return true;

  00012	b0 01		 mov	 al, 1

; 57   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?InitDBCorrespondManager@CDBCorrespondManager@@UAA_NPAUIDataBaseEngine@@@Z ENDP ; CDBCorrespondManager::InitDBCorrespondManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?ConcludeService@CDBCorrespondManager@@UAE_NXZ
_TEXT	SEGMENT
$T2 = -93						; size = 1
_DataLocker$ = -28					; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ConcludeService@CDBCorrespondManager@@UAE_NXZ PROC	; CDBCorrespondManager::ConcludeService, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConcludeService@CDBCorrespondManager@@UAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 	CWHDataLocker DataLocker(m_AsyncCritical);

  0002b	6a 01		 push	 1
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c0 08	 add	 eax, 8
  00033	50		 push	 eax
  00034	8d 4d e4	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 42   : 
; 43   : 	m_bService=false;

  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 44   : 
; 45   : 	ClearAmortizeData();

  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?ClearAmortizeData@CDBCorrespondManager@@QAEXXZ ; CDBCorrespondManager::ClearAmortizeData

; 46   : 
; 47   : 	m_DBRequestUserArray.RemoveAll();

  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00059	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@KABK@@QAEXXZ ; CWHArray<unsigned long,unsigned long const &>::RemoveAll

; 48   : 
; 49   : 	return true;

  0005e	c6 45 a3 01	 mov	 BYTE PTR $T2[ebp], 1
  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8d 4d e4	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  00072	8a 45 a3	 mov	 al, BYTE PTR $T2[ebp]

; 50   : }

  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConcludeService@CDBCorrespondManager@@UAE_NXZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _DataLocker$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?ConcludeService@CDBCorrespondManager@@UAE_NXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConcludeService@CDBCorrespondManager@@UAE_NXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConcludeService@CDBCorrespondManager@@UAE_NXZ ENDP	; CDBCorrespondManager::ConcludeService
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?StartService@CDBCorrespondManager@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartService@CDBCorrespondManager@@UAE_NXZ PROC	; CDBCorrespondManager::StartService, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	ASSERT(!m_bService);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00013	85 c9		 test	 ecx, ecx
  00015	74 19		 je	 SHORT $LN3@StartServi
  00017	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??StartService@CDBCorrespondManager@@UAE_NXZ@4JA
  0001d	83 c2 01	 add	 edx, 1
  00020	52		 push	 edx
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@HBFPLNLM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00026	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002b	85 c0		 test	 eax, eax
  0002d	74 01		 je	 SHORT $LN3@StartServi
  0002f	cc		 int	 3
$LN3@StartServi:

; 34   : 	m_bService=true;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 35   : 	return true;

  00037	b0 01		 mov	 al, 1

; 36   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?StartService@CDBCorrespondManager@@UAE_NXZ ENDP	; CDBCorrespondManager::StartService
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?QueryInterface@CDBCorrespondManager@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CDBCorrespondManager@@UAEPAXABU_GUID@@K@Z PROC ; CDBCorrespondManager::QueryInterface, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   : 	QUERYINTERFACE(IDBCorrespondManager,Guid,dwQueryVer);

  0000c	68 00 00 00 00	 push	 OFFSET ?IID_IDBCorrespondManager@@3U_GUID@@B
  00011	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _==
  0001a	83 c4 08	 add	 esp, 8
  0001d	0f b6 c8	 movzx	 ecx, al
  00020	85 c9		 test	 ecx, ecx
  00022	74 1d		 je	 SHORT $LN2@QueryInter
  00024	68 00 01 01 06	 push	 100729088		; 06010100H
  00029	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00032	83 c4 08	 add	 esp, 8
  00035	0f b6 c8	 movzx	 ecx, al
  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN2@QueryInter
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	eb 37		 jmp	 SHORT $LN1@QueryInter
$LN2@QueryInter:

; 26   : 	QUERYINTERFACE_IUNKNOWNEX(IDBCorrespondManager,Guid,dwQueryVer);

  00041	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00046	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _==
  0004f	83 c4 08	 add	 esp, 8
  00052	0f b6 c8	 movzx	 ecx, al
  00055	85 c9		 test	 ecx, ecx
  00057	74 1d		 je	 SHORT $LN3@QueryInter
  00059	68 00 01 01 06	 push	 100729088		; 06010100H
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00067	83 c4 08	 add	 esp, 8
  0006a	0f b6 c8	 movzx	 ecx, al
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 05		 je	 SHORT $LN3@QueryInter
  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:

; 27   : 	return NULL;

  00076	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 28   : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?QueryInterface@CDBCorrespondManager@@UAEPAXABU_GUID@@K@Z ENDP ; CDBCorrespondManager::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.h
;	COMDAT ?Release@CDBCorrespondManager@@UAEXXZ
_TEXT	SEGMENT
tv68 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Release@CDBCorrespondManager@@UAEXXZ PROC		; CDBCorrespondManager::Release, COMDAT
; _this$ = ecx

; 47   : 	virtual VOID Release() { delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00012	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00015	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  00018	83 7d b8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0001c	74 0f		 je	 SHORT $LN3@Release
  0001e	6a 01		 push	 1
  00020	8b 4d b8	 mov	 ecx, DWORD PTR $T2[ebp]
  00023	e8 00 00 00 00	 call	 ??_GCDBCorrespondManager@@QAEPAXI@Z
  00028	89 45 b0	 mov	 DWORD PTR tv68[ebp], eax
  0002b	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  0002d	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN1@Release:
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?Release@CDBCorrespondManager@@UAEXXZ ENDP		; CDBCorrespondManager::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ??1CDBCorrespondManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDBCorrespondManager@@QAE@XZ PROC			; CDBCorrespondManager::~CDBCorrespondManager, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDBCorrespondManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDBCorrespondManager@@6B@

; 15   : 	m_pIKernelDataBaseEngine=NULL;

  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 16   : 
; 17   : 	ClearAmortizeData();

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?ClearAmortizeData@CDBCorrespondManager@@QAEXXZ ; CDBCorrespondManager::ClearAmortizeData

; 18   : 
; 19   : 	m_DBRequestUserArray.RemoveAll();

  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0004c	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@KABK@@QAEXXZ ; CWHArray<unsigned long,unsigned long const &>::RemoveAll

; 20   : }

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00057	e8 00 00 00 00	 call	 ??1?$CWHArray@KABK@@UAE@XZ ; CWHArray<unsigned long,unsigned long const &>::~CWHArray<unsigned long,unsigned long const &>
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 30	 add	 ecx, 48			; 00000030H
  00062	e8 00 00 00 00	 call	 ??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::~CList<tagDBRequestHead *,tagDBRequestHead * const &>
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 08	 add	 ecx, 8
  0006d	e8 00 00 00 00	 call	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
  00072	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00075	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007c	59		 pop	 ecx
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDBCorrespondManager@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDBCorrespondManager@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDBCorrespondManager@@QAE@XZ ENDP			; CDBCorrespondManager::~CDBCorrespondManager
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ??0CDBCorrespondManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDBCorrespondManager@@QAE@XZ PROC			; CDBCorrespondManager::CDBCorrespondManager, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDBCorrespondManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0IDBCorrespondManager@@QAE@XZ
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDBCorrespondManager@@6B@
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 08	 add	 ecx, 8
  00042	e8 00 00 00 00	 call	 ??0CCriticalSection@@QAE@XZ ; CCriticalSection::CCriticalSection
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	6a 0a		 push	 10			; 0000000aH
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 30	 add	 ecx, 48			; 00000030H
  00056	e8 00 00 00 00	 call	 ??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::CList<tagDBRequestHead *,tagDBRequestHead * const &>
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00065	e8 00 00 00 00	 call	 ??0?$CWHArray@KABK@@QAE@XZ ; CWHArray<unsigned long,unsigned long const &>::CWHArray<unsigned long,unsigned long const &>

; 8    : 	m_bService=false;

  0006a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 9    : 	m_pIKernelDataBaseEngine = NULL;

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 10   : }

  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00082	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDBCorrespondManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
__unwindfunclet$??0CDBCorrespondManager@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 30	 add	 ecx, 48			; 00000030H
  00011	e9 00 00 00 00	 jmp	 ??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::~CList<tagDBRequestHead *,tagDBRequestHead * const &>
__ehhandler$??0CDBCorrespondManager@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDBCorrespondManager@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDBCorrespondManager@@QAE@XZ ENDP			; CDBCorrespondManager::CDBCorrespondManager
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@KABK@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@KABK@@UAEPAXI@Z PROC			; CWHArray<unsigned long,unsigned long const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@KABK@@UAE@XZ ; CWHArray<unsigned long,unsigned long const &>::~CWHArray<unsigned long,unsigned long const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@KABK@@UAEPAXI@Z ENDP			; CWHArray<unsigned long,unsigned long const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@KABK@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@KABK@@QAEXH@Z PROC		; CWHArray<unsigned long,unsigned long const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@KABK@@QAEXH@Z ENDP		; CWHArray<unsigned long,unsigned long const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@KABK@@QAEAAKH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@KABK@@QAEAAKH@Z PROC			; CWHArray<unsigned long,unsigned long const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@KABK@@QAEAAKH@Z ; CWHArray<unsigned long,unsigned long const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@KABK@@QAEAAKH@Z ENDP			; CWHArray<unsigned long,unsigned long const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@KABK@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@KABK@@QAEXXZ PROC			; CWHArray<unsigned long,unsigned long const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 44		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	c1 e1 02	 shl	 ecx, 2
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?RemoveAll@?$CWHArray@KABK@@QAEXXZ ENDP			; CWHArray<unsigned long,unsigned long const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@KABK@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@KABK@@QAEXHH@Z PROC		; CWHArray<unsigned long,unsigned long const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@KABK@@QAEXHH@Z ENDP		; CWHArray<unsigned long,unsigned long const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@KABK@@QAEXHABK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@KABK@@QAEXHABK@Z PROC		; CWHArray<unsigned long,unsigned long const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@KABK@@QAEXH@Z ; CWHArray<unsigned long,unsigned long const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@KABK@@QAEXHABK@Z ENDP		; CWHArray<unsigned long,unsigned long const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@KABK@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@KABK@@QAEXH@Z PROC			; CWHArray<unsigned long,unsigned long const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@KABK@@QAEXH@Z ; CWHArray<unsigned long,unsigned long const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@KABK@@QAEXH@Z ENDP			; CWHArray<unsigned long,unsigned long const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@KABK@@QAEAAKH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@KABK@@QAEAAKH@Z PROC		; CWHArray<unsigned long,unsigned long const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@KABK@@QAEAAKH@Z ENDP		; CWHArray<unsigned long,unsigned long const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@KABK@@QAEHABK@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@KABK@@QAEHABK@Z PROC			; CWHArray<unsigned long,unsigned long const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@KABK@@QAEXHABK@Z ; CWHArray<unsigned long,unsigned long const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@KABK@@QAEHABK@Z ENDP			; CWHArray<unsigned long,unsigned long const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@KABK@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@KABK@@QBEHXZ PROC			; CWHArray<unsigned long,unsigned long const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@KABK@@QBEHXZ ENDP			; CWHArray<unsigned long,unsigned long const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@KABK@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@KABK@@UAE@XZ PROC				; CWHArray<unsigned long,unsigned long const &>::~CWHArray<unsigned long,unsigned long const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@KABK@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@KABK@@UAE@XZ ENDP				; CWHArray<unsigned long,unsigned long const &>::~CWHArray<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@KABK@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@KABK@@QAE@XZ PROC				; CWHArray<unsigned long,unsigned long const &>::CWHArray<unsigned long,unsigned long const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@KABK@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@KABK@@QAE@XZ ENDP				; CWHArray<unsigned long,unsigned long const &>::CWHArray<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEPAXI@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::~CList<tagDBRequestHead *,tagDBRequestHead * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 21		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 0e		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	6a 1c		 push	 28			; 0000001cH
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEPAXI@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AssertValid@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXXZ PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AssertValid, COMDAT
; _this$ = ecx

; 1225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1226 : 	CObject::AssertValid();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 1227 : 
; 1228 : 	if (m_nCount == 0)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001b	75 3c		 jne	 SHORT $LN2@AssertVali

; 1229 : 	{
; 1230 : 		// empty list
; 1231 : 		ASSERT(m_pNodeHead == NULL);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 14		 je	 SHORT $LN5@AssertVali
  00026	68 cf 04 00 00	 push	 1231			; 000004cfH
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00030	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00035	85 c0		 test	 eax, eax
  00037	74 01		 je	 SHORT $LN5@AssertVali
  00039	cc		 int	 3
$LN5@AssertVali:

; 1232 : 		ASSERT(m_pNodeTail == NULL);

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00041	74 14		 je	 SHORT $LN6@AssertVali
  00043	68 d0 04 00 00	 push	 1232			; 000004d0H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN6@AssertVali
  00056	cc		 int	 3
$LN6@AssertVali:

; 1233 : 	}
; 1234 : 	else

  00057	eb 50		 jmp	 SHORT $LN1@AssertVali
$LN2@AssertVali:

; 1235 : 	{
; 1236 : 		// non-empty list
; 1237 : 		ASSERT(AfxIsValidAddress(m_pNodeHead, sizeof(CNode)));

  00059	6a 01		 push	 1
  0005b	6a 0c		 push	 12			; 0000000cH
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 14		 jne	 SHORT $LN7@AssertVali
  0006d	68 d5 04 00 00	 push	 1237			; 000004d5H
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00077	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007c	85 c0		 test	 eax, eax
  0007e	74 01		 je	 SHORT $LN7@AssertVali
  00080	cc		 int	 3
$LN7@AssertVali:

; 1238 : 		ASSERT(AfxIsValidAddress(m_pNodeTail, sizeof(CNode)));

  00081	6a 01		 push	 1
  00083	6a 0c		 push	 12			; 0000000cH
  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00091	85 c0		 test	 eax, eax
  00093	75 14		 jne	 SHORT $LN1@AssertVali
  00095	68 d6 04 00 00	 push	 1238			; 000004d6H
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a4	85 c0		 test	 eax, eax
  000a6	74 01		 je	 SHORT $LN1@AssertVali
  000a8	cc		 int	 3
$LN1@AssertVali:

; 1239 : 	}
; 1240 : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?AssertValid@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXXZ ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Dump@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_temp$1 = -12						; size = 4
_pos$2 = -8						; size = 4
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXAAVCDumpContext@@@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::Dump, COMDAT
; _this$ = ecx

; 1204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1205 : 	CObject::Dump(dc);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 1206 : 
; 1207 : 	dc << "with " << m_nCount << " elements";

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_09HCLNAIDE@?5elements@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_05PLCFPPOI@with?5@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1208 : 	if (dc.GetDepth() > 0)

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00047	85 c0		 test	 eax, eax
  00049	7e 49		 jle	 SHORT $LN4@Dump

; 1209 : 	{
; 1210 : 		POSITION pos = GetHeadPosition();

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetHeadPosition@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEPAU__POSITION@@XZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetHeadPosition
  00053	89 45 f8	 mov	 DWORD PTR _pos$2[ebp], eax
$LN2@Dump:

; 1211 : 		while (pos != NULL)

  00056	83 7d f8 00	 cmp	 DWORD PTR _pos$2[ebp], 0
  0005a	74 38		 je	 SHORT $LN4@Dump

; 1212 : 		{
; 1213 : 			TYPE temp[1];
; 1214 : 			temp[0] = ((CList*)this)->GetNext(pos);

  0005c	8d 45 f8	 lea	 eax, DWORD PTR _pos$2[ebp]
  0005f	50		 push	 eax
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?GetNext@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEAAPAUtagDBRequestHead@@AAPAU__POSITION@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetNext
  00068	b9 04 00 00 00	 mov	 ecx, 4
  0006d	6b d1 00	 imul	 edx, ecx, 0
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	89 44 15 f4	 mov	 DWORD PTR _temp$1[ebp+edx], eax

; 1215 : 			dc << "\n";

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0007e	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1216 : 			DumpElements<TYPE>(dc, temp, 1);

  00083	6a 01		 push	 1
  00085	8d 45 f4	 lea	 eax, DWORD PTR _temp$1[ebp]
  00088	50		 push	 eax
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ??$DumpElements@PAUtagDBRequestHead@@@@YGXAAVCDumpContext@@PBQAUtagDBRequestHead@@H@Z ; DumpElements<tagDBRequestHead *>

; 1217 : 		}

  00092	eb c2		 jmp	 SHORT $LN2@Dump
$LN4@Dump:

; 1218 : 	}
; 1219 : 
; 1220 : 	dc << "\n";

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0009c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1221 : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
?Dump@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UBEXAAVCDumpContext@@@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
tv136 = -88						; size = 4
_newData$1 = -20					; size = 4
_nNewCount$2 = -16					; size = 4
_pData$3 = -12						; size = 4
_pNode$4 = -8						; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEXAAVCArchive@@@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::Serialize, COMDAT
; _this$ = ecx

; 1169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1170 : 	ASSERT_VALID(this);

  0000c	68 92 04 00 00	 push	 1170			; 00000492H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1171 : 
; 1172 : 	CObject::Serialize(ar);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 1173 : 
; 1174 : 	if (ar.IsStoring())

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00033	85 c0		 test	 eax, eax
  00035	74 69		 je	 SHORT $LN7@Serialize

; 1175 : 	{
; 1176 : 		ar.WriteCount(m_nCount);

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	51		 push	 ecx
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00041	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1177 : 		for (CNode* pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	89 4d f8	 mov	 DWORD PTR _pNode$4[ebp], ecx
  0004f	eb 08		 jmp	 SHORT $LN4@Serialize
$LN2@Serialize:
  00051	8b 45 f8	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d f8	 mov	 DWORD PTR _pNode$4[ebp], ecx
$LN4@Serialize:
  00059	83 7d f8 00	 cmp	 DWORD PTR _pNode$4[ebp], 0
  0005d	74 3f		 je	 SHORT $LN3@Serialize

; 1178 : 		{
; 1179 : 			ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));

  0005f	6a 01		 push	 1
  00061	6a 0c		 push	 12			; 0000000cH
  00063	8b 45 f8	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN10@Serialize
  00070	68 9b 04 00 00	 push	 1179			; 0000049bH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN10@Serialize
  00083	cc		 int	 3
$LN10@Serialize:

; 1180 : 			TYPE* pData;
; 1181 : 			/*
; 1182 : 			 * in some cases the & operator might be overloaded, and we cannot use it to obtain
; 1183 : 			 * the address of a given object.  We then use the following trick to get the address
; 1184 : 			 */
; 1185 : 			pData = reinterpret_cast< TYPE* >( &reinterpret_cast< int& >( static_cast< TYPE& >( pNode->data ) ) );

  00084	8b 45 f8	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00087	83 c0 08	 add	 eax, 8
  0008a	89 45 f4	 mov	 DWORD PTR _pData$3[ebp], eax

; 1186 : 			SerializeElements<TYPE>(ar, pData, 1);

  0008d	6a 01		 push	 1
  0008f	8b 45 f4	 mov	 eax, DWORD PTR _pData$3[ebp]
  00092	50		 push	 eax
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagDBRequestHead@@@@YGXAAVCArchive@@PAPAUtagDBRequestHead@@H@Z ; SerializeElements<tagDBRequestHead *>

; 1187 : 		}

  0009c	eb b3		 jmp	 SHORT $LN2@Serialize
$LN3@Serialize:

; 1188 : 	}
; 1189 : 	else

  0009e	eb 46		 jmp	 SHORT $LN1@Serialize
$LN7@Serialize:

; 1190 : 	{
; 1191 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000a3	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  000a8	89 45 f0	 mov	 DWORD PTR _nNewCount$2[ebp], eax
$LN5@Serialize:

; 1192 : 		while (nNewCount--)

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _nNewCount$2[ebp]
  000ae	89 45 a8	 mov	 DWORD PTR tv136[ebp], eax
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _nNewCount$2[ebp]
  000b4	83 e9 01	 sub	 ecx, 1
  000b7	89 4d f0	 mov	 DWORD PTR _nNewCount$2[ebp], ecx
  000ba	83 7d a8 00	 cmp	 DWORD PTR tv136[ebp], 0
  000be	74 26		 je	 SHORT $LN1@Serialize

; 1193 : 		{
; 1194 : 			TYPE newData[1];
; 1195 : 			SerializeElements<TYPE>(ar, newData, 1);

  000c0	6a 01		 push	 1
  000c2	8d 45 ec	 lea	 eax, DWORD PTR _newData$1[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagDBRequestHead@@@@YGXAAVCArchive@@PAPAUtagDBRequestHead@@H@Z ; SerializeElements<tagDBRequestHead *>

; 1196 : 			AddTail(newData[0]);

  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	6b c8 00	 imul	 ecx, eax, 0
  000d7	8d 54 0d ec	 lea	 edx, DWORD PTR _newData$1[ebp+ecx]
  000db	52		 push	 edx
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?AddTail@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAU__POSITION@@ABQAUtagDBRequestHead@@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AddTail

; 1197 : 		}

  000e4	eb c5		 jmp	 SHORT $LN5@Serialize
$LN1@Serialize:

; 1198 : 	}
; 1199 : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
?Serialize@?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAEXAAVCArchive@@@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ PROC	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::~CList<tagDBRequestHead *,tagDBRequestHead * const &>, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@

; 879  : 	RemoveAll();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXXZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAll

; 880  : 	ASSERT(m_nCount == 0);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $LN1@CList
  00045	68 70 03 00 00	 push	 880			; 00000370H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN1@CList
  00058	cc		 int	 3
$LN1@CList:

; 881  : }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CList@PAUtagDBRequestHead@@ABQAU1@@@UAE@XZ ENDP	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::~CList<tagDBRequestHead *,tagDBRequestHead * const &>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?FreeNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEXPAUCNode@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?FreeNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEXPAUCNode@1@@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::FreeNode, COMDAT
; _this$ = ecx

; 936  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 937  : 	pNode->data.~TYPE();
; 938  : 	pNode->pNext = m_pNodeFree;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pNode$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 939  : 	m_pNodeFree = pNode;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _pNode$[ebp]
  0001d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 940  : 	m_nCount--;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00026	83 e9 01	 sub	 ecx, 1
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 941  : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00036	7d 14		 jge	 SHORT $LN4@FreeNode
  00038	68 ad 03 00 00	 push	 941			; 000003adH
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN4@FreeNode
  0004b	cc		 int	 3
$LN4@FreeNode:

; 942  : 
; 943  : 	// if no more elements, cleanup completely
; 944  : 	if (m_nCount == 0)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00053	75 08		 jne	 SHORT $LN1@FreeNode

; 945  : 		RemoveAll();

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?RemoveAll@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXXZ ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAll
$LN1@FreeNode:

; 946  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?FreeNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEXPAUCNode@1@@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::FreeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?NewNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z
_TEXT	SEGMENT
tv88 = -96						; size = 4
$T1 = -92						; size = 4
_pNode$ = -24						; size = 4
___afx_condVal$2 = -20					; size = 4
_i$3 = -16						; size = 4
_pNode$4 = -12						; size = 4
_pNewBlock$5 = -8					; size = 4
_this$ = -4						; size = 4
_pPrev$ = 8						; size = 4
_pNext$ = 12						; size = 4
?NewNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::NewNode, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 902  : 	if (m_pNodeFree == NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	75 71		 jne	 SHORT $LN7@NewNode

; 903  : 	{
; 904  : 		// add another block
; 905  : 		CPlex* pNewBlock = CPlex::Create(m_pBlocks, m_nBlockSize,

  00015	6a 0c		 push	 12			; 0000000cH
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 14	 add	 edx, 20			; 00000014H
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create
  0002a	89 45 f8	 mov	 DWORD PTR _pNewBlock$5[ebp], eax

; 906  : 				 sizeof(CNode));
; 907  : 
; 908  : 		// chain them into free list
; 909  : 		CNode* pNode = (CNode*) pNewBlock->data();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _pNewBlock$5[ebp]
  00030	e8 00 00 00 00	 call	 ?data@CPlex@@QAEPAXXZ	; CPlex::data
  00035	89 45 f4	 mov	 DWORD PTR _pNode$4[ebp], eax

; 910  : 		// free in reverse order to make it easier to debug
; 911  : 		pNode += m_nBlockSize - 1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	6b d1 0c	 imul	 edx, ecx, 12
  00044	03 55 f4	 add	 edx, DWORD PTR _pNode$4[ebp]
  00047	89 55 f4	 mov	 DWORD PTR _pNode$4[ebp], edx

; 912  : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pNode--)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d f0	 mov	 DWORD PTR _i$3[ebp], ecx
  00056	eb 12		 jmp	 SHORT $LN4@NewNode
$LN2@NewNode:
  00058	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _pNode$4[ebp]
  00064	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  00067	89 4d f4	 mov	 DWORD PTR _pNode$4[ebp], ecx
$LN4@NewNode:
  0006a	83 7d f0 00	 cmp	 DWORD PTR _i$3[ebp], 0
  0006e	7c 16		 jl	 SHORT $LN7@NewNode

; 913  : 		{
; 914  : 			pNode->pNext = m_pNodeFree;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _pNode$4[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	89 10		 mov	 DWORD PTR [eax], edx

; 915  : 			m_pNodeFree = pNode;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR _pNode$4[ebp]
  00081	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 916  : 		}

  00084	eb d2		 jmp	 SHORT $LN2@NewNode
$LN7@NewNode:

; 917  : 	}
; 918  : 	ENSURE(m_pNodeFree != NULL);  // we must have something

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008d	74 09		 je	 SHORT $LN11@NewNode
  0008f	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00096	eb 07		 jmp	 SHORT $LN12@NewNode
$LN11@NewNode:
  00098	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN12@NewNode:
  0009f	8b 4d a0	 mov	 ecx, DWORD PTR tv88[ebp]
  000a2	89 4d ec	 mov	 DWORD PTR ___afx_condVal$2[ebp], ecx
  000a5	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000a9	75 14		 jne	 SHORT $LN13@NewNode
  000ab	68 96 03 00 00	 push	 918			; 00000396H
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ba	85 c0		 test	 eax, eax
  000bc	74 01		 je	 SHORT $LN13@NewNode
  000be	cc		 int	 3
$LN13@NewNode:
  000bf	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000c3	75 05		 jne	 SHORT $LN5@NewNode
  000c5	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@NewNode:
  000ca	33 c0		 xor	 eax, eax
  000cc	75 b8		 jne	 SHORT $LN7@NewNode

; 919  : 
; 920  : 	CList::CNode* pNode = m_pNodeFree;

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d4	89 4d e8	 mov	 DWORD PTR _pNode$[ebp], ecx

; 921  : 	m_pNodeFree = m_pNodeFree->pNext;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000dd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e2	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 922  : 	pNode->pPrev = pPrev;

  000e5	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  000eb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 923  : 	pNode->pNext = pNext;

  000ee	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR _pNext$[ebp]
  000f4	89 08		 mov	 DWORD PTR [eax], ecx

; 924  : 	m_nCount++;

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000fc	83 c1 01	 add	 ecx, 1
  000ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00102	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 925  : 	ASSERT(m_nCount > 0);  // make sure we don't overflow

  00105	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00108	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0010c	7f 14		 jg	 SHORT $LN14@NewNode
  0010e	68 9d 03 00 00	 push	 925			; 0000039dH
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00118	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0011d	85 c0		 test	 eax, eax
  0011f	74 01		 je	 SHORT $LN14@NewNode
  00121	cc		 int	 3
$LN14@NewNode:

; 926  : 
; 927  : #pragma push_macro("new")
; 928  : #undef new
; 929  : 	::new( (void*)( &pNode->data ) ) TYPE;

  00122	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00125	83 c0 08	 add	 eax, 8
  00128	50		 push	 eax
  00129	6a 04		 push	 4
  0012b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00130	83 c4 08	 add	 esp, 8
  00133	89 45 a4	 mov	 DWORD PTR $T1[ebp], eax

; 930  : #pragma pop_macro("new")
; 931  : 	return pNode;

  00136	8b 45 e8	 mov	 eax, DWORD PTR _pNode$[ebp]
$LN10@NewNode:

; 932  : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 08 00	 ret	 8
?NewNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::NewNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAt@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXPAU__POSITION@@@Z
_TEXT	SEGMENT
_pOldNode$ = -8						; size = 4
_this$ = -4						; size = 4
_position$ = 8						; size = 4
?RemoveAt@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXPAU__POSITION@@@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 1100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1101 : 	ASSERT_VALID(this);

  0000c	68 4d 04 00 00	 push	 1101			; 0000044dH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1102 : 
; 1103 : 	CNode* pOldNode = (CNode*) position;

  0001f	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00022	89 45 f8	 mov	 DWORD PTR _pOldNode$[ebp], eax

; 1104 : 	ASSERT(AfxIsValidAddress(pOldNode, sizeof(CNode)));

  00025	6a 01		 push	 1
  00027	6a 0c		 push	 12			; 0000000cH
  00029	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00032	85 c0		 test	 eax, eax
  00034	75 14		 jne	 SHORT $LN7@RemoveAt
  00036	68 50 04 00 00	 push	 1104			; 00000450H
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00040	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00045	85 c0		 test	 eax, eax
  00047	74 01		 je	 SHORT $LN7@RemoveAt
  00049	cc		 int	 3
$LN7@RemoveAt:

; 1105 : 
; 1106 : 	// remove pOldNode from list
; 1107 : 	if (pOldNode == m_pNodeHead)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  00050	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00053	75 0d		 jne	 SHORT $LN2@RemoveAt

; 1108 : 	{
; 1109 : 		m_pNodeHead = pOldNode->pNext;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1110 : 	}
; 1111 : 	else

  00060	eb 35		 jmp	 SHORT $LN3@RemoveAt
$LN2@RemoveAt:

; 1112 : 	{
; 1113 : 		ASSERT(AfxIsValidAddress(pOldNode->pPrev, sizeof(CNode)));

  00062	6a 01		 push	 1
  00064	6a 0c		 push	 12			; 0000000cH
  00066	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  00069	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00072	85 c0		 test	 eax, eax
  00074	75 14		 jne	 SHORT $LN8@RemoveAt
  00076	68 59 04 00 00	 push	 1113			; 00000459H
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00080	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00085	85 c0		 test	 eax, eax
  00087	74 01		 je	 SHORT $LN8@RemoveAt
  00089	cc		 int	 3
$LN8@RemoveAt:

; 1114 : 		pOldNode->pPrev->pNext = pOldNode->pNext;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  0008d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00090	8b 55 f8	 mov	 edx, DWORD PTR _pOldNode$[ebp]
  00093	8b 02		 mov	 eax, DWORD PTR [edx]
  00095	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@RemoveAt:

; 1115 : 	}
; 1116 : 	if (pOldNode == m_pNodeTail)

  00097	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  0009d	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000a0	75 0e		 jne	 SHORT $LN4@RemoveAt

; 1117 : 	{
; 1118 : 		m_pNodeTail = pOldNode->pPrev;

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1119 : 	}
; 1120 : 	else

  000ae	eb 35		 jmp	 SHORT $LN5@RemoveAt
$LN4@RemoveAt:

; 1121 : 	{
; 1122 : 		ASSERT(AfxIsValidAddress(pOldNode->pNext, sizeof(CNode)));

  000b0	6a 01		 push	 1
  000b2	6a 0c		 push	 12			; 0000000cH
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  000bf	85 c0		 test	 eax, eax
  000c1	75 14		 jne	 SHORT $LN9@RemoveAt
  000c3	68 62 04 00 00	 push	 1122			; 00000462H
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000cd	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000d2	85 c0		 test	 eax, eax
  000d4	74 01		 je	 SHORT $LN9@RemoveAt
  000d6	cc		 int	 3
$LN9@RemoveAt:

; 1123 : 		pOldNode->pNext->pPrev = pOldNode->pPrev;

  000d7	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000da	8b 08		 mov	 ecx, DWORD PTR [eax]
  000dc	8b 55 f8	 mov	 edx, DWORD PTR _pOldNode$[ebp]
  000df	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN5@RemoveAt:

; 1124 : 	}
; 1125 : 	FreeNode(pOldNode);

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?FreeNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEXPAUCNode@1@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::FreeNode

; 1126 : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
?RemoveAt@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXPAU__POSITION@@@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNext@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEAAPAUtagDBRequestHead@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
_rPosition$ = 8						; size = 4
?GetNext@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEAAPAUtagDBRequestHead@@AAPAU__POSITION@@@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetNext, COMDAT
; _this$ = ecx

; 811  : 	{ CNode* pNode = (CNode*) rPosition;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _rPosition$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx

; 812  : 		ASSERT(AfxIsValidAddress(pNode, sizeof(CNode)));

  00014	6a 01		 push	 1
  00016	6a 0c		 push	 12			; 0000000cH
  00018	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00021	85 c0		 test	 eax, eax
  00023	75 14		 jne	 SHORT $LN3@GetNext
  00025	68 2c 03 00 00	 push	 812			; 0000032cH
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00034	85 c0		 test	 eax, eax
  00036	74 01		 je	 SHORT $LN3@GetNext
  00038	cc		 int	 3
$LN3@GetNext:

; 813  : 		rPosition = (POSITION) pNode->pNext;

  00039	8b 45 08	 mov	 eax, DWORD PTR _rPosition$[ebp]
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _pNode$[ebp]
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	89 10		 mov	 DWORD PTR [eax], edx

; 814  : 		return pNode->data; }

  00043	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  00046	83 c0 08	 add	 eax, 8
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?GetNext@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEAAPAUtagDBRequestHead@@AAPAU__POSITION@@@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetHeadPosition@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeadPosition@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEPAU__POSITION@@XZ PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetHeadPosition, COMDAT
; _this$ = ecx

; 805  : 	{ return (POSITION) m_pNodeHead; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetHeadPosition@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEPAU__POSITION@@XZ ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetHeadPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXXZ
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXXZ PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 862  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 863  : 	ASSERT_VALID(this);

  0000c	68 5f 03 00 00	 push	 863			; 0000035fH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 864  : 
; 865  : 	// destroy elements
; 866  : 	CNode* pNode;
; 867  : 	for (pNode = m_pNodeHead; pNode != NULL; pNode = pNode->pNext)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00025	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx
  00028	eb 08		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _pNode$[ebp]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	89 4d f8	 mov	 DWORD PTR _pNode$[ebp], ecx
$LN4@RemoveAll:
  00032	83 7d f8 00	 cmp	 DWORD PTR _pNode$[ebp], 0
  00036	74 02		 je	 SHORT $LN3@RemoveAll

; 868  : 		pNode->data.~TYPE();

  00038	eb f0		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 869  : 
; 870  : 	m_nCount = 0;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 871  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 872  : 	m_pBlocks->FreeDataChain();

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00068	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 873  : 	m_pBlocks = NULL;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 874  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?RemoveAll@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEXXZ ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AddTail@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAU__POSITION@@ABQAUtagDBRequestHead@@@Z
_TEXT	SEGMENT
_pNewNode$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?AddTail@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAU__POSITION@@ABQAUtagDBRequestHead@@@Z PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AddTail, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 966  : 	ASSERT_VALID(this);

  0000c	68 c6 03 00 00	 push	 966			; 000003c6H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 967  : 
; 968  : 	CNode* pNewNode = NewNode(m_pNodeTail, NULL);

  0001f	6a 00		 push	 0
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?NewNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEPAUCNode@1@PAU21@0@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::NewNode
  00030	89 45 f8	 mov	 DWORD PTR _pNewNode$[ebp], eax

; 969  : 	pNewNode->data = newElement;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _pNewNode$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _newElement$[ebp]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 970  : 	if (m_pNodeTail != NULL)

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00045	74 0d		 je	 SHORT $LN2@AddTail

; 971  : 		m_pNodeTail->pNext = pNewNode;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004d	8b 55 f8	 mov	 edx, DWORD PTR _pNewNode$[ebp]
  00050	89 11		 mov	 DWORD PTR [ecx], edx

; 972  : 	else

  00052	eb 09		 jmp	 SHORT $LN3@AddTail
$LN2@AddTail:

; 973  : 		m_pNodeHead = pNewNode;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  0005a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@AddTail:

; 974  : 	m_pNodeTail = pNewNode;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  00063	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 975  : 	return (POSITION) pNewNode;

  00066	8b 45 f8	 mov	 eax, DWORD PTR _pNewNode$[ebp]

; 976  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?AddTail@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAU__POSITION@@ABQAUtagDBRequestHead@@@Z ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::AddTail
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveHead@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAUtagDBRequestHead@@XZ
_TEXT	SEGMENT
tv73 = -84						; size = 4
_returnValue$ = -16					; size = 4
_pOldNode$ = -12					; size = 4
___afx_condVal$1 = -8					; size = 4
_this$ = -4						; size = 4
?RemoveHead@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAUtagDBRequestHead@@XZ PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveHead, COMDAT
; _this$ = ecx

; 1007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1008 : 	ASSERT_VALID(this);

  0000c	68 f0 03 00 00	 push	 1008			; 000003f0H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@RemoveHead:

; 1009 : 	ENSURE(m_pNodeHead != NULL);  // don't call on empty list !!!

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN9@RemoveHead
  00028	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN10@RemoveHead
$LN9@RemoveHead:
  00031	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN10@RemoveHead:
  00038	8b 4d ac	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$1[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00042	75 14		 jne	 SHORT $LN11@RemoveHead
  00044	68 f1 03 00 00	 push	 1009			; 000003f1H
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN11@RemoveHead
  00057	cc		 int	 3
$LN11@RemoveHead:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@RemoveHead
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@RemoveHead:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@RemoveHead

; 1010 : 	ASSERT(AfxIsValidAddress(m_pNodeHead, sizeof(CNode)));

  00067	6a 01		 push	 1
  00069	6a 0c		 push	 12			; 0000000cH
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00077	85 c0		 test	 eax, eax
  00079	75 14		 jne	 SHORT $LN12@RemoveHead
  0007b	68 f2 03 00 00	 push	 1010			; 000003f2H
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00085	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008a	85 c0		 test	 eax, eax
  0008c	74 01		 je	 SHORT $LN12@RemoveHead
  0008e	cc		 int	 3
$LN12@RemoveHead:

; 1011 : 
; 1012 : 	CNode* pOldNode = m_pNodeHead;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00095	89 4d f4	 mov	 DWORD PTR _pOldNode$[ebp], ecx

; 1013 : 	TYPE returnValue = pOldNode->data;

  00098	8b 45 f4	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009e	89 4d f0	 mov	 DWORD PTR _returnValue$[ebp], ecx

; 1014 : 
; 1015 : 	m_pNodeHead = pOldNode->pNext;

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _pOldNode$[ebp]
  000a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a9	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1016 : 	if (m_pNodeHead != NULL)

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000af	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000b3	74 0f		 je	 SHORT $LN6@RemoveHead

; 1017 : 		m_pNodeHead->pPrev = NULL;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000bb	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1018 : 	else

  000c2	eb 0a		 jmp	 SHORT $LN7@RemoveHead
$LN6@RemoveHead:

; 1019 : 		m_pNodeTail = NULL;

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN7@RemoveHead:

; 1020 : 	FreeNode(pOldNode);

  000ce	8b 45 f4	 mov	 eax, DWORD PTR _pOldNode$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	e8 00 00 00 00	 call	 ?FreeNode@?$CList@PAUtagDBRequestHead@@ABQAU1@@@IAEXPAUCNode@1@@Z ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::FreeNode

; 1021 : 	return returnValue;

  000da	8b 45 f0	 mov	 eax, DWORD PTR _returnValue$[ebp]
$LN8@RemoveHead:

; 1022 : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
?RemoveHead@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAEPAUtagDBRequestHead@@XZ ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::RemoveHead
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetCount@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEHXZ PROC ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetCount, COMDAT
; _this$ = ecx

; 780  : 	{ return m_nCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CList@PAUtagDBRequestHead@@ABQAU1@@@QBEHXZ ENDP ; CList<tagDBRequestHead *,tagDBRequestHead * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nBlockSize$ = 8					; size = 4
??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z PROC	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::CList<tagDBRequestHead *,tagDBRequestHead * const &>, COMDAT
; _this$ = ecx

; 851  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CList@PAUtagDBRequestHead@@ABQAU1@@@6B@

; 852  : 	ASSERT(nBlockSize > 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nBlockSize$[ebp], 0
  00047	7f 14		 jg	 SHORT $LN3@CList
  00049	68 54 03 00 00	 push	 852			; 00000354H
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@CList
  0005c	cc		 int	 3
$LN3@CList:

; 853  : 
; 854  : 	m_nCount = 0;

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 855  : 	m_pNodeHead = m_pNodeTail = m_pNodeFree = NULL;

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0007b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 856  : 	m_pBlocks = NULL;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 857  : 	m_nBlockSize = nBlockSize;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _nBlockSize$[ebp]
  00095	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 858  : }

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CList@PAUtagDBRequestHead@@ABQAU1@@@QAE@H@Z ENDP	; CList<tagDBRequestHead *,tagDBRequestHead * const &>::CList<tagDBRequestHead *,tagDBRequestHead * const &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IDBCorrespondManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IDBCorrespondManager@@QAE@XZ PROC			; IDBCorrespondManager::IDBCorrespondManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IServiceModule@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IDBCorrespondManager@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IDBCorrespondManager@@QAE@XZ ENDP			; IDBCorrespondManager::IDBCorrespondManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IServiceModule@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServiceModule@@QAE@XZ PROC				; IServiceModule::IServiceModule, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IServiceModule@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IServiceModule@@QAE@XZ ENDP				; IServiceModule::IServiceModule
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00012	83 c4 04	 add	 esp, 4
  00015	0f b6 f0	 movzx	 esi, al
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00021	83 c4 04	 add	 esp, 4
  00024	0f b6 d0	 movzx	 edx, al
  00027	3b f2		 cmp	 esi, edx
  00029	7e 04		 jle	 SHORT $LN2@InterfaceV
  0002b	32 c0		 xor	 al, al
  0002d	eb 74		 jmp	 SHORT $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00038	83 c4 04	 add	 esp, 4
  0003b	0f b6 f0	 movzx	 esi, al
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00047	83 c4 04	 add	 esp, 4
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	3b f2		 cmp	 esi, edx
  0004f	74 04		 je	 SHORT $LN3@InterfaceV
  00051	32 c0		 xor	 al, al
  00053	eb 4e		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00055	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0005e	83 c4 04	 add	 esp, 4
  00061	0f b6 f0	 movzx	 esi, al
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0006d	83 c4 04	 add	 esp, 4
  00070	0f b6 d0	 movzx	 edx, al
  00073	3b f2		 cmp	 esi, edx
  00075	74 04		 je	 SHORT $LN4@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 28		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00084	83 c4 04	 add	 esp, 4
  00087	0f b6 f0	 movzx	 esi, al
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00093	83 c4 04	 add	 esp, 4
  00096	0f b6 d0	 movzx	 edx, al
  00099	3b f2		 cmp	 esi, edx
  0009b	74 04		 je	 SHORT $LN5@InterfaceV
  0009d	32 c0		 xor	 al, al
  0009f	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000a1	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	d1 e0		 shl	 eax, 1
  00010	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxplex_.h
;	COMDAT ?data@CPlex@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@CPlex@@QAEPAXXZ PROC				; CPlex::data, COMDAT
; _this$ = ecx

; 35   : 	void* data() { return this+1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?data@CPlex@@QAEPAXXZ ENDP				; CPlex::data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -68						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _IsEqualGUID
  00016	83 c4 08	 add	 esp, 8
  00019	85 c0		 test	 eax, eax
  0001b	74 09		 je	 SHORT $LN3@
  0001d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00024	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00026	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  0002d	8a 45 bc	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -68						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memcmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN3@IsEqualGUI
  0001f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  00028	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]

; 162  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务器\dbcorrespondmanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
