; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\HttpContext.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
PUBLIC	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z ; zl::net::HttpRequest::getHeader
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Freenode0
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::find
PUBLIC	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Destroy_if_node
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator++
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
PUBLIC	??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator=
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z ; zl::net::HttpContext::parseRequest
PUBLIC	?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z ; zl::net::HttpContext::processRequestLine
PUBLIC	?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z ; zl::net::HttpContext::processReqestHeader
PUBLIC	?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ		; zl::net::ByteBuffer::findCRLF
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_istringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$find@PBDD@std@@YAPBDPBDQBDABD@Z		; std::find<char const *,char>
PUBLIC	??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
PUBLIC	??$equal@PBD$$CBD$08@std@@YA_NQBD0AAY08$$CBD@Z	; std::equal<char const *,char const ,9>
PUBLIC	??$_Debug_lt_pred@ABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
PUBLIC	??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace<char const *,void>
PUBLIC	??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
PUBLIC	??_E?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_03HAPOJHBM@GET@				; `string'
PUBLIC	??_C@_04HCJEIHPL@POST@				; `string'
PUBLIC	??_C@_04BINJNOJD@HEAD@				; `string'
PUBLIC	??_C@_03KBBGFLEK@PUT@				; `string'
PUBLIC	??_C@_06FKDAMKFP@DELETE@			; `string'
PUBLIC	??_C@_08IJEMDJGI@HTTP?11?41@			; `string'
PUBLIC	??_C@_08JAFHAICJ@HTTP?11?40@			; `string'
PUBLIC	??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1CO@OMGMEOPK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAa?$AAb?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BM@CEEBIDBF@?$AAp?$AAe?$AAe?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AAn?$AAd@ ; `string'
PUBLIC	??_C@_1CI@BNKFDNDJ@?$AAe?$AAn?$AAd?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AAW?$AAr?$AAi@ ; `string'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_0P@HOJGPHBA@Content?9Length@		; `string'
PUBLIC	??_C@_1JC@OHPHNMOO@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1BO@GODENGIM@?$AA?$CB?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1FG@LPKPGOAL@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAh?$AAe?$AAr?$AAe?$AA?5?$AAi?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1MG@DDPKBOFO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CFG@PGGKMBNC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ ; `string'
PUBLIC	??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0DD@LAECODHC@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GK@MICKMFNF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0IA@BFMOHEDB@cannot?5increment?5string?5iterato@ ; `string'
PUBLIC	??_C@_1BAK@GBJMLMKM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CK@IKJHPFKC@cannot?5increment?5string?5iterato@ ; `string'
PUBLIC	??_C@_1FI@JCCODAAD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@ ; `string'
PUBLIC	??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@ ; `string'
PUBLIC	??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1CFG@FGJHCIBH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1CFE@PPLBLEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0EJ@NPIAEPMO@string?5iterators?5incompatible?5?$CI@ ; `string'
PUBLIC	??_C@_1MA@BDELDFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1JM@EIPCMFMM@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@	; `string'
PUBLIC	??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@ ; `string'
PUBLIC	??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@ ; `string'
PUBLIC	??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@ ; `string'
PUBLIC	??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@ ; `string'
PUBLIC	??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@ ; `string'
PUBLIC	??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@ ; `string'
PUBLIC	??_C@_1DNE@PACNGJBJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@ ; `string'
PUBLIC	??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@ ; `string'
PUBLIC	??_C@_1CFG@FFIHNBD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@ ; `string'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	__imp__isspace:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	__imp___wassert:PROC
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?kCRLF@ByteBuffer@net@zl@@0QBDB:BYTE		; zl::net::ByteBuffer::kCRLF
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	060H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@ DB 'map/set<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@ DB 'cannot decre'
	DB	'ment begin map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CFG@FFIHNBD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1CFG@FFIHNBD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H
	DB	'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '-', 00H, '-', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@
CONST	SEGMENT
??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@ DB 'cannot decreme'
	DB	'nt value-initialized map/set iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@
CONST	SEGMENT
??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, 's', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DNE@PACNGJBJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1DNE@PACNGJBJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, 'z', 00H, 'l', 00H, ':', 00H, ':'
	DB	00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, ':', 00H, ':', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_'
	DB	00H, 'c', 00H, 'm', 00H, 'p', 00H, '_', 00H, 'n', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 's', 00H, 'e', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H
	DB	'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c'
	DB	00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ','
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H
	DB	'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H
	DB	'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd'
	DB	00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't'
	DB	00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ',', 00H, '0', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'I', 00H, 'n', 00H, 's', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, '_', 00H, 'h', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@
CONST	SEGMENT
??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@ DB 'map/set insert '
	DB	'iterator outside range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
CONST	SEGMENT
??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'a', 00H, 'f', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'e', 00H, 'n', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
CONST	SEGMENT
??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@ DB 'cannot seek a'
	DB	'rray iterator after end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
CONST	SEGMENT
??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
CONST	SEGMENT
??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@ DB 'cannot seek a'
	DB	'rray iterator before begin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
CONST	SEGMENT
??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
CONST	SEGMENT
??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H, '9'
	DB	00H, '>', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f'
	DB	00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
CONST	SEGMENT
??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@ DB 'cannot seek v'
	DB	'alue-initialized array iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ DB '"'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
CONST	SEGMENT
??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@ DB 'transposed pointer ran'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
CONST	SEGMENT
??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, '_', 00H, 'l', 00H, 't'
	DB	00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JM@EIPCMFMM@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1JM@EIPCMFMM@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H
	DB	'.', 00H, 'g', 00H, '.', 00H, '"', 00H, ' ', 00H, '"', 00H, ' '
	DB	00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, ')', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@BDELDFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MA@BDELDFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@NPIAEPMO@string?5iterators?5incompatible?5?$CI@
CONST	SEGMENT
??_C@_0EJ@NPIAEPMO@string?5iterators?5incompatible?5?$CI@ DB 'string iter'
	DB	'ators incompatible (e.g. point to different string instances)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CFE@PPLBLEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1CFE@PPLBLEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H
	DB	'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CFG@FGJHCIBH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1CFG@FGJHCIBH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H
	DB	'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ DB 'map/set iterato'
	DB	'rs incompatible', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
CONST	SEGMENT
??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ DB 'string subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@
CONST	SEGMENT
??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@ DB 'cannot derefer'
	DB	'ence string iterator because it is out of range (e.g. an end '
	DB	'iterator)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H
	DB	's', 00H, '"', 00H, ' ', 00H, '"', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, ' ', 00H, 'd', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'y', 00H, 'e'
	DB	00H, 'd', 00H, ')', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@
CONST	SEGMENT
??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@ DB 'cannot derefer'
	DB	'ence string iterator because the iterator was invalidated (e.'
	DB	'g. reallocation occurred, or the string was destroyed)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized string iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@JCCODAAD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FI@JCCODAAD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@IKJHPFKC@cannot?5increment?5string?5iterato@
CONST	SEGMENT
??_C@_0CK@IKJHPFKC@cannot?5increment?5string?5iterato@ DB 'cannot increme'
	DB	'nt string iterator past end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAK@GBJMLMKM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1BAK@GBJMLMKM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, '"', 00H
	DB	' ', 00H, '"', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a'
	DB	00H, 'l', 00H, 'i', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.', 00H, 'g', 00H, '.'
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'w'
	DB	00H, 'a', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'o', 00H, 'y', 00H, 'e', 00H, 'd', 00H, ')'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IA@BFMOHEDB@cannot?5increment?5string?5iterato@
CONST	SEGMENT
??_C@_0IA@BFMOHEDB@cannot?5increment?5string?5iterato@ DB 'cannot increme'
	DB	'nt string iterator because the iterator was invalidated (e.g.'
	DB	' reallocation occurred, or the string was destroyed)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@MICKMFNF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GK@MICKMFNF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	'+', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xstring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LAECODHC@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DD@LAECODHC@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized string iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
CONST	SEGMENT
??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ DB 'cannot incre'
	DB	'ment end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CFG@PGGKMBNC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1CFG@PGGKMBNC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H
	DB	'a', 00H, 's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xtree', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized map/set iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@DDPKBOFO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MG@DDPKBOFO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@LPKPGOAL@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAh?$AAe?$AAr?$AAe?$AA?5?$AAi?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1FG@LPKPGOAL@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAh?$AAe?$AAr?$AAe?$AA?5?$AAi?$AAs?$AA?5@ DB '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'T', 00H
	DB	'h', 00H, 'e', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 'e', 00H, 'i', 00H, 'v', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GODENGIM@?$AA?$CB?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1BO@GODENGIM@?$AA?$CB?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ@ DB '!'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '.', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, '(', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@OHPHNMOO@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
CONST	SEGMENT
??_C@_1JC@OHPHNMOO@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@ DB 'g'
	DB	00H, ':', 00H, '\', 00H, 'Q', 07fH, 0d0H, 'r\', 00H, 'h', 00H, 'a'
	DB	00H, 'p', 00H, 'p', 00H, 'y', 00H, 'g', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 'w', 00H, 'h', 00H, '\', 00H, 0dH, 'g', 0a1H, 'R', 0efH
	DB	'z\', 00H, 0fbH, '|', 0dfH, '~!jWW\', 00H, 0dH, 'g', 0a1H, 'Rh'
	DB	'V', 0c4H, '~', 0f6H, 'N\', 00H, 085H, 'Q8h', 015H, '_', 0ceH, 'd'
	DB	'\', 00H, 'z', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'n', 00H, 'e', 00H
	DB	't', 00H, '\', 00H, 'h', 00H, 't', 00H, 't', 00H, 'p', 00H, '\'
	DB	00H, 'h', 00H, 't', 00H, 't', 00H, 'p', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HOJGPHBA@Content?9Length@
CONST	SEGMENT
??_C@_0P@HOJGPHBA@Content?9Length@ DB 'Content-Length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	060H
CONST	ENDS
;	COMDAT ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_1CI@BNKFDNDJ@?$AAe?$AAn?$AAd?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AAW?$AAr?$AAi@
CONST	SEGMENT
??_C@_1CI@BNKFDNDJ@?$AAe?$AAn?$AAd?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AAW?$AAr?$AAi@ DB 'e'
	DB	00H, 'n', 00H, 'd', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'W', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CEEBIDBF@?$AAp?$AAe?$AAe?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AAn?$AAd@
CONST	SEGMENT
??_C@_1BM@CEEBIDBF@?$AAp?$AAe?$AAe?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AAn?$AAd@ DB 'p'
	DB	00H, 'e', 00H, 'e', 00H, 'k', 00H, '(', 00H, ')', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@OMGMEOPK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAa?$AAb?$AAl?$AAe@
CONST	SEGMENT
??_C@_1CO@OMGMEOPK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAa?$AAb?$AAl?$AAe@ DB 'l'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
CONST	SEGMENT
??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@ DB 'g'
	DB	00H, ':', 00H, '\', 00H, 'Q', 07fH, 0d0H, 'r\', 00H, 'h', 00H, 'a'
	DB	00H, 'p', 00H, 'p', 00H, 'y', 00H, 'g', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 'w', 00H, 'h', 00H, '\', 00H, 0dH, 'g', 0a1H, 'R', 0efH
	DB	'z\', 00H, 0fbH, '|', 0dfH, '~!jWW\', 00H, 0dH, 'g', 0a1H, 'Rh'
	DB	'V', 0c4H, '~', 0f6H, 'N\', 00H, 085H, 'Q8h', 015H, '_', 0ceH, 'd'
	DB	'\', 00H, 'z', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'b', 00H, 'y', 00H
	DB	't', 00H, 'e', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JAFHAICJ@HTTP?11?40@
CONST	SEGMENT
??_C@_08JAFHAICJ@HTTP?11?40@ DB 'HTTP/1.0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IJEMDJGI@HTTP?11?41@
CONST	SEGMENT
??_C@_08IJEMDJGI@HTTP?11?41@ DB 'HTTP/1.1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKDAMKFP@DELETE@
CONST	SEGMENT
??_C@_06FKDAMKFP@DELETE@ DB 'DELETE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KBBGFLEK@PUT@
CONST	SEGMENT
??_C@_03KBBGFLEK@PUT@ DB 'PUT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BINJNOJD@HEAD@
CONST	SEGMENT
??_C@_04BINJNOJD@HEAD@ DB 'HEAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCJEIHPL@POST@
CONST	SEGMENT
??_C@_04HCJEIHPL@POST@ DB 'POST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HAPOJHBM@GET@
CONST	SEGMENT
??_C@_03HAPOJHBM@GET@ DB 'GET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$59 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$0
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z DD 00H
	DD	0dH
	DD	0eH
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$59
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$4
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$61 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$0
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z DD 02H
	DD	010H
	DD	011H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$61
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z DD 019930522H
	DD	016H
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$3
	DD	01H
	DD	00H
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	00H
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$10
	DD	01H
	DD	00H
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$6
__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z$1
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z$2
	DD	01H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$18
	DD	05H
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$16
	DD	06H
	DD	FLAT:___std_terminate
	DD	05H
	DD	FLAT:___std_terminate
	DD	05H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$1
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$8
	DD	04H
	DD	FLAT:__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$9
	DD	05H
	DD	FLAT:___std_terminate
	DD	05H
	DD	FLAT:__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$10
	DD	05H
	DD	FLAT:___std_terminate
	DD	04H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z$0
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:__unwindfunclet$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z$2
	DD	04H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$3
__ehfuncinfo$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@ByteBuffer@net@zl@@ABEPBDXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?begin@ByteBuffer@net@zl@@ABEPBDXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?begin@ByteBuffer@net@zl@@ABEPBDXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@ByteBuffer@net@zl@@AAEPADXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?begin@ByteBuffer@net@zl@@AAEPADXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?begin@ByteBuffer@net@zl@@AAEPADXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?beginWrite@ByteBuffer@net@zl@@QAEPADXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?beginWrite@ByteBuffer@net@zl@@QAEPADXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?beginWrite@ByteBuffer@net@zl@@QAEPADXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?peek@ByteBuffer@net@zl@@QBEPBDXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?peek@ByteBuffer@net@zl@@QBEPBDXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?peek@ByteBuffer@net@zl@@QBEPBDXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z$1
	DD	01H
	DD	FLAT:___std_terminate
__ehfuncinfo$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$1
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$3
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$5
	DD	06H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z DD 019930522H
	DD	018H
	DD	FLAT:__unwindtable$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$39
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$0
	DD	011H
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$1
	DD	013H
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$55
	DD	014H
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$56
	DD	015H
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$58
	DD	013H
	DD	FLAT:__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z$0
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z$1
	DD	02H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_Iterator_base12@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0_Iterator_base12@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_Iterator_base12@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 978  : 	{	// get rvalue reference to _Index element of tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 979  : 	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
; 980  : 	typedef tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
; 981  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 982  : 	}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
??$get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 1306 : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 981  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]

; 982  : 	}
; 983  : 
; 984  : template<size_t _Index,
; 985  : 	class... _Types>
; 986  : 	_NODISCARD constexpr const tuple_element_t<_Index, tuple<_Types...>>&&
; 987  : 		get(const tuple<_Types...>&& _Tuple) noexcept
; 988  : 	{	// get const rvalue reference to _Index element of tuple
; 989  : 	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
; 990  : 	typedef const tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
; 991  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
; 992  : 	}
; 993  : 
; 994  : 	// FUNCTION TEMPLATE get (by type)
; 995  : template<class _Ty,
; 996  : 	class... _Types>
; 997  : 	_NODISCARD constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
; 998  : 	{	// get reference to _Ty element of tuple
; 999  : 	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
; 1000 : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 1001 : 	}
; 1002 : 
; 1003 : template<class _Ty,
; 1004 : 	class... _Types>
; 1005 : 	_NODISCARD constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
; 1006 : 	{	// get const reference to _Ty element of tuple
; 1007 : 	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
; 1008 : 	return (((_Ttype&)_Tuple)._Myfirst._Val);
; 1009 : 	}
; 1010 : 
; 1011 : template<class _Ty,
; 1012 : 	class... _Types>
; 1013 : 	_NODISCARD constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
; 1014 : 	{	// get rvalue reference to _Ty element of tuple
; 1015 : 	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
; 1016 : 	return (_STD forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
; 1017 : 	}
; 1018 : 
; 1019 : template<class _Ty,
; 1020 : 	class... _Types>
; 1021 : 	_NODISCARD constexpr const _Ty&& get(const tuple<_Types...>&& _Tuple) noexcept
; 1022 : 	{	// get const rvalue reference to _Ty element of tuple
; 1023 : 	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
; 1024 : 	return (_STD forward<const _Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
; 1025 : 	}
; 1026 : 
; 1027 : 	// CONSTRUCTOR TEMPLATES FOR tuple
; 1028 : template<class _This,
; 1029 : 	class... _Rest>
; 1030 : 	template<class _Tag,
; 1031 : 		class _Tpl,
; 1032 : 		size_t... _Indices,
; 1033 : 		enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int>>
; 1034 : 		constexpr tuple<_This, _Rest...>::tuple(_Tag, _Tpl&& _Right, index_sequence<_Indices...>)
; 1035 : 		: tuple(_Exact_args_t{}, _STD get<_Indices>(_STD forward<_Tpl>(_Right))...)
; 1036 : 		{	// construct from unpacking a tuple/pair, using get<I>()
; 1037 : 		}
; 1038 : 
; 1039 : template<class _This,
; 1040 : 	class... _Rest>
; 1041 : 	template<class _Tag,
; 1042 : 		class _Alloc,
; 1043 : 		class _Tpl,
; 1044 : 		size_t... _Indices,
; 1045 : 		enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int>> inline
; 1046 : 		tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, index_sequence<_Indices...>)
; 1047 : 		: tuple(_Alloc_exact_args_t{}, _Al, _STD get<_Indices>(_STD forward<_Tpl>(_Right))...)
; 1048 : 		{	// construct from an allocator and unpacking a tuple/pair, using get<I>()
; 1049 : 		}
; 1050 : 
; 1051 : 	// FUNCTION TEMPLATE make_tuple
; 1052 : template<class... _Types>
; 1053 : 	_NODISCARD constexpr tuple<_Unrefwrap_t<_Types>...>
; 1054 : 		make_tuple(_Types&&... _Args)
; 1055 : 	{	// make tuple from elements
; 1056 : 	typedef tuple<_Unrefwrap_t<_Types>...> _Ttype;
; 1057 : 	return (_Ttype(_STD forward<_Types>(_Args)...));
; 1058 : 	}
; 1059 : 
; 1060 : 	// FUNCTION TEMPLATE tie
; 1061 : template<class... _Types>
; 1062 : 	_NODISCARD constexpr tuple<_Types&...>
; 1063 : 		tie(_Types&... _Args) noexcept
; 1064 : 	{	// make tuple from elements
; 1065 : 	typedef tuple<_Types&...> _Ttype;
; 1066 : 	return (_Ttype(_Args...));
; 1067 : 	}
; 1068 : 
; 1069 : 	// FUNCTION TEMPLATE forward_as_tuple
; 1070 : template<class... _Types>
; 1071 : 	_NODISCARD constexpr tuple<_Types&&...>
; 1072 : 		forward_as_tuple(_Types&&... _Args) noexcept
; 1073 : 	{	// forward arguments in a tuple
; 1074 : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));
; 1075 : 	}
; 1076 : 
; 1077 : 	// STRUCT TEMPLATE _Cat_sequences
; 1078 : template<class _Seq_type1,
; 1079 : 	class _Seq_type2>
; 1080 : 	struct _Cat_sequences;
; 1081 : 
; 1082 : template<size_t... _Indexes1,
; 1083 : 	size_t... _Indexes2>
; 1084 : 	struct _Cat_sequences<index_sequence<_Indexes1...>,
; 1085 : 		index_sequence<_Indexes2...>>
; 1086 : 	{	// concatenates two index_sequence types
; 1087 : 	typedef index_sequence<_Indexes1..., _Indexes2...> type;
; 1088 : 	};
; 1089 : 
; 1090 : 	// FORWARD DECLARATIONS
; 1091 : template<class _Ty,
; 1092 : 	size_t _Size>
; 1093 : 	class array;
; 1094 : 
; 1095 : template<size_t _Idx,
; 1096 : 	class _Ty,
; 1097 : 	size_t _Size>
; 1098 : 	_NODISCARD constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;
; 1099 : 
; 1100 : template<size_t _Idx,
; 1101 : 	class _Ty,
; 1102 : 	size_t _Size>
; 1103 : 	_NODISCARD constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;
; 1104 : 
; 1105 : template<size_t _Idx,
; 1106 : 	class _Ty,
; 1107 : 	size_t _Size>
; 1108 : 	_NODISCARD constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;
; 1109 : 
; 1110 : template<size_t _Idx,
; 1111 : 	class _Ty,
; 1112 : 	size_t _Size>
; 1113 : 	_NODISCARD constexpr const _Ty&& get(const array<_Ty, _Size>&& _Arr) noexcept;
; 1114 : 
; 1115 : 	// STRUCT TEMPLATE _View_as_tuple
; 1116 : template<class _Ty,
; 1117 : 	class... _For_array>
; 1118 : 	struct _View_as_tuple
; 1119 : 	{	// tuple_cat() supports only tuples, pairs, and arrays
; 1120 : 	static_assert(_Always_false<_Ty>,
; 1121 : 		"Unsupported tuple_cat arguments.");
; 1122 : 	};
; 1123 : 
; 1124 : template<class... _Types>
; 1125 : 	struct _View_as_tuple<tuple<_Types...>>
; 1126 : 	{	// view a tuple as a tuple
; 1127 : 	typedef tuple<_Types...> type;
; 1128 : 	};
; 1129 : 
; 1130 : template<class _Ty1,
; 1131 : 	class _Ty2>
; 1132 : 	struct _View_as_tuple<pair<_Ty1, _Ty2>>
; 1133 : 	{	// view a pair as a tuple
; 1134 : 	typedef tuple<_Ty1, _Ty2> type;
; 1135 : 	};
; 1136 : 
; 1137 : template<class _Ty,
; 1138 : 	class... _Types>
; 1139 : 	struct _View_as_tuple<array<_Ty, 0>, _Types...>
; 1140 : 	{	// view an array as a tuple; ends recursion at 0
; 1141 : 	typedef tuple<_Types...> type;
; 1142 : 	};
; 1143 : 
; 1144 : template<class _Ty,
; 1145 : 	size_t _Size,
; 1146 : 	class... _Types>
; 1147 : 	struct _View_as_tuple<array<_Ty, _Size>, _Types...>
; 1148 : 		: _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
; 1149 : 	{	// view an array as a tuple; counts down to 0
; 1150 : 	};
; 1151 : 
; 1152 : 	// STRUCT TEMPLATE _Repeat_for
; 1153 : template<size_t _Nx,
; 1154 : 	class _Ty>
; 1155 : 	struct _Repeat_for
; 1156 : 		: integral_constant<size_t, _Nx>
; 1157 : 	{	// repeats _Nx for each _Ty in a parameter pack
; 1158 : 	};
; 1159 : 
; 1160 : 	// FUNCTION TEMPLATE tuple_cat
; 1161 : template<class _Ret,
; 1162 : 	class _Kx_arg,
; 1163 : 	class _Ix_arg,
; 1164 : 	size_t _Ix_next,
; 1165 : 	class... _Tuples>
; 1166 : 	struct _Tuple_cat2
; 1167 : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 1168 : 	static_assert(sizeof...(_Tuples) == 0,
; 1169 : 		"Unsupported tuple_cat arguments.");
; 1170 : 	typedef _Ret type;
; 1171 : 	typedef _Kx_arg _Kx_arg_seq;
; 1172 : 	typedef _Ix_arg _Ix_arg_seq;
; 1173 : 	};
; 1174 : 
; 1175 : template<class... _Types1,
; 1176 : 	class _Kx_arg,
; 1177 : 	size_t... _Ix,
; 1178 : 	size_t _Ix_next,
; 1179 : 	class... _Types2,
; 1180 : 	class... _Rest>
; 1181 : 	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
; 1182 : 		index_sequence<_Ix...>, _Ix_next,
; 1183 : 		tuple<_Types2...>, _Rest...>
; 1184 : 		: _Tuple_cat2<
; 1185 : 			tuple<_Types1..., _Types2...>,
; 1186 : 			typename _Cat_sequences<_Kx_arg, index_sequence_for<_Types2...>>::type,
; 1187 : 			index_sequence<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
; 1188 : 			_Ix_next + 1,
; 1189 : 			_Rest...>
; 1190 : 	{	// determine tuple_cat's return type and _Kx/_Ix indices
; 1191 : 	};
; 1192 : 
; 1193 : template<class... _Tuples>
; 1194 : 	struct _Tuple_cat1
; 1195 : 		: _Tuple_cat2<tuple<>, index_sequence<>,
; 1196 : 				index_sequence<>, 0,
; 1197 : 			typename _View_as_tuple<decay_t<_Tuples>>::type...>
; 1198 : 	{	// prepare to determine tuple_cat's return type and _Kx/_Ix indices
; 1199 : 	};
; 1200 : 
; 1201 : #pragma warning(push)
; 1202 : #pragma warning(disable: 4100)	// TRANSITION, VSO#181496, unreferenced formal parameter
; 1203 : template<class _Ret,
; 1204 : 	size_t... _Kx,
; 1205 : 	size_t... _Ix,
; 1206 : 	class _Ty>
; 1207 : 	constexpr _Ret _Tuple_cat(index_sequence<_Kx...>,
; 1208 : 		index_sequence<_Ix...>, _Ty&& _Arg)
; 1209 : 	{	// concatenate tuples
; 1210 : 	return (_Ret(_STD get<_Kx>(_STD get<_Ix>(_STD forward<_Ty>(_Arg)))...));
; 1211 : 	}
; 1212 : #pragma warning(pop)
; 1213 : 
; 1214 : template<class... _Tuples>
; 1215 : 	_NODISCARD constexpr typename _Tuple_cat1<_Tuples...>::type
; 1216 : 		tuple_cat(_Tuples&&... _Tpls)
; 1217 : 	{	// concatenate tuples
; 1218 : 	typedef _Tuple_cat1<_Tuples...> _Cat1;
; 1219 : 	return (_Tuple_cat<typename _Cat1::type>(
; 1220 : 		typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
; 1221 : 		_STD forward_as_tuple(_STD forward<_Tuples>(_Tpls)...)));
; 1222 : 	}
; 1223 : 
; 1224 : #if _HAS_CXX17
; 1225 : 	// FUNCTION TEMPLATE apply
; 1226 : #pragma warning(push)
; 1227 : #pragma warning(disable: 4100)	// TRANSITION, VSO#181496, unreferenced formal parameter
; 1228 : template<class _Callable,
; 1229 : 	class _Tuple,
; 1230 : 	size_t... _Indices>
; 1231 : 	constexpr decltype(auto) _Apply_impl(_Callable&& _Obj, _Tuple&& _Tpl, index_sequence<_Indices...>)
; 1232 : 	{	// invoke _Obj with the elements of _Tpl
; 1233 : 	return (_C_invoke(_STD forward<_Callable>(_Obj), _STD get<_Indices>(_STD forward<_Tuple>(_Tpl))...));
; 1234 : 	}
; 1235 : #pragma warning(pop)
; 1236 : 
; 1237 : template<class _Callable,
; 1238 : 	class _Tuple>
; 1239 : 	constexpr decltype(auto) apply(_Callable&& _Obj, _Tuple&& _Tpl)
; 1240 : 	{	// invoke _Obj with the elements of _Tpl
; 1241 : 	return (_Apply_impl(_STD forward<_Callable>(_Obj), _STD forward<_Tuple>(_Tpl),
; 1242 : 		make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>{}));
; 1243 : 	}
; 1244 : 
; 1245 : 	// FUNCTION TEMPLATE make_from_tuple
; 1246 : #pragma warning(push)
; 1247 : #pragma warning(disable: 4100)	// TRANSITION, VSO#181496, unreferenced formal parameter
; 1248 : template<class _Ty,
; 1249 : 	class _Tuple,
; 1250 : 	size_t... _Indices>
; 1251 : 	constexpr _Ty _Make_from_tuple_impl(_Tuple&& _Tpl, index_sequence<_Indices...>)
; 1252 : 	{	// construct _Ty from the elements of _Tpl
; 1253 : 	return (_Ty(_STD get<_Indices>(_STD forward<_Tuple>(_Tpl))...));
; 1254 : 	}
; 1255 : #pragma warning(pop)
; 1256 : 
; 1257 : template<class _Ty,
; 1258 : 	class _Tuple>
; 1259 : 	_NODISCARD constexpr _Ty make_from_tuple(_Tuple&& _Tpl)
; 1260 : 	{	// construct _Ty from the elements of _Tpl
; 1261 : 	return (_Make_from_tuple_impl<_Ty>(_STD forward<_Tuple>(_Tpl),
; 1262 : 		make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>{}));
; 1263 : 	}
; 1264 : #endif /* _HAS_CXX17 */
; 1265 : 
; 1266 : 	// FUNCTION TEMPLATE _For_each_tuple_element
; 1267 : template<class _Tpl,
; 1268 : 	class _Fx,
; 1269 : 	size_t... _Indices> inline
; 1270 : 	void _For_each_tuple_element_impl(_Tpl&& _Tuple,
; 1271 : 		_Fx _Func, index_sequence<_Indices...>)
; 1272 : 	{	// call _Func() on the _Indices elements of _Tuple
; 1273 : 	int _Ignored[] = { (static_cast<void>(_Func(
; 1274 : 		_STD get<_Indices>(_STD forward<_Tpl>(_Tuple))
; 1275 : 		)), 0)... };
; 1276 : 	(void)_Ignored;
; 1277 : 	}
; 1278 : 
; 1279 : template<class _Tpl,
; 1280 : 	class _Fx> inline
; 1281 : 	void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func)
; 1282 : 	{	// call _Func() on each element in _Tuple
; 1283 : 	_For_each_tuple_element_impl(
; 1284 : 		_STD forward<_Tpl>(_Tuple),
; 1285 : 		_Func,
; 1286 : 		make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>()
; 1287 : 		);
; 1288 : 	}
; 1289 : 
; 1290 : 
; 1291 : #pragma warning(push)
; 1292 : #pragma warning(disable: 4100)	// TRANSITION, VSO#181496, unreferenced formal parameter
; 1293 : 	// TEMPLATE CONSTRUCTOR pair::pair(tuple, tuple, sequence, sequence)
; 1294 : template<class _Ty1,
; 1295 : 	class _Ty2>
; 1296 : 	template<class _Tuple1,
; 1297 : 		class _Tuple2,
; 1298 : 		size_t... _Indexes1,
; 1299 : 		size_t... _Indexes2> inline
; 1300 : 		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
; 1301 : 			_Tuple2& _Val2,
; 1302 : 			index_sequence<_Indexes1...>,
; 1303 : 			index_sequence<_Indexes2...>)
; 1304 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  0002d	ff 30		 push	 DWORD PTR [eax]
  0002f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1305 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  00034	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00037	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2142 : 		{	// construct empty string

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00040	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00046	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  0004d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00054	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00059	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0005b	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00064	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 1307 : 		}

  0006f	8b c7		 mov	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00071	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00078	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0007f	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 1307 : 		}

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buy_if_not_node@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buy_if_not_node@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buy_if_not_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT
; _this$ = ecx

; 1574 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1575 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1576 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buy_if_not_node@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buy_if_not_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 1321 : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 1304 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  0002a	ff 75 0c	 push	 DWORD PTR __Val1$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1305 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  00032	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00035	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2142 : 		{	// construct empty string

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00044	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  0004b	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00052	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00057	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00059	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 1322 : 		}

  0006d	8b c7		 mov	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0006f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00076	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0007d	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 1322 : 		}

  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 237  : 		{	// construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 		: _Val(_STD forward<_Other>(_Arg))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 238  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 319  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 12
$T3 = -56						; size = 12
$T4 = -56						; size = 12
__Where$5 = -44						; size = 12
_this$ = -32						; size = 4
__Wherenode$1$ = -28					; size = 4
__Addleft$6 = -21					; size = 1
__Result$1$ = -17					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Lock$7 = 12						; size = 4
__Lock$8 = 12						; size = 4
__Lock$9 = 12						; size = 4
__Lock$10 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Lock$11 = 16						; size = 4
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>, COMDAT
; _this$ = ecx

; 1733 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e0	 mov	 DWORD PTR _this$[ebp], edi

; 1734 : 		auto& _My_data = this->_Get_data();
; 1735 : 		_TRY_BEGIN
; 1736 : 		_Nodeptr _Wherenode = _My_data._Myhead;

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 1737 : 		_Nodeptr _Trynode = _Wherenode->_Parent;
; 1738 : 		bool _Addleft = true;	// add to left of head if tree empty

  00033	b3 01		 mov	 bl, 1
  00035	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00038	89 75 e4	 mov	 DWORD PTR __Wherenode$1$[ebp], esi
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00045	88 5d eb	 mov	 BYTE PTR __Addleft$6[ebp], bl
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@Insert_noh:

; 1739 : 
; 1740 : 		while (!_Trynode->_Isnil)

  00050	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00054	0f 85 00 01 00
	00		 jne	 $LN3@Insert_noh

; 1741 : 			{	// look for leaf to insert before (_Addleft) or after
; 1742 : 			_Wherenode = _Trynode;
; 1743 : 			if (_Leftish)

  0005a	80 7d 0c 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  0005e	89 75 e4	 mov	 DWORD PTR __Wherenode$1$[ebp], esi
  00061	74 73		 je	 SHORT $LN5@Insert_noh
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 1110 : 	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  00063	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00064	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 1110 : 	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  00067	8b cf		 mov	 ecx, edi
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  0006f	88 45 ef	 mov	 BYTE PTR __Result$1$[ebp], al

; 1111 : 	if (_Result)

  00072	84 c0		 test	 al, al
  00074	74 5b		 je	 SHORT $LN347@Insert_noh

; 1112 : 		{
; 1113 : 		_STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

  00076	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00079	8b cf		 mov	 ecx, edi
  0007b	53		 push	 ebx
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  00082	84 c0		 test	 al, al
  00084	74 46		 je	 SHORT $LN54@Insert_noh
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00090	6a 00		 push	 0
  00092	68 59 04 00 00	 push	 1113			; 00000459H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009c	6a 02		 push	 2
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000a4	83 c4 18	 add	 esp, 24			; 00000018H
  000a7	83 f8 01	 cmp	 eax, 1
  000aa	75 01		 jne	 SHORT $LN60@Insert_noh
  000ac	cc		 int	 3
$LN60@Insert_noh:
  000ad	6a 00		 push	 0
  000af	68 59 04 00 00	 push	 1113			; 00000459H
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000c9	83 c4 14	 add	 esp, 20			; 00000014H
$LN54@Insert_noh:
  000cc	8a 45 ef	 mov	 al, BYTE PTR __Result$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1745 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  000cf	84 c0		 test	 al, al
$LN347@Insert_noh:
  000d1	0f 94 c3	 sete	 bl

; 1746 : 					this->_Key(_Trynode),
; 1747 : 					this->_Kfn(_Val));	// favor left end
; 1748 : 				}
; 1749 : 			else

  000d4	eb 6b		 jmp	 SHORT $LN77@Insert_noh
$LN5@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  000d6	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 1110 : 	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  000d9	50		 push	 eax
  000da	51		 push	 ecx
  000db	8b cf		 mov	 ecx, edi
  000dd	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  000e2	8a d8		 mov	 bl, al

; 1111 : 	if (_Result)

  000e4	84 db		 test	 bl, bl
  000e6	74 59		 je	 SHORT $LN77@Insert_noh

; 1112 : 		{
; 1113 : 		_STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

  000e8	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  000eb	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000ee	50		 push	 eax
  000ef	51		 push	 ecx
  000f0	8b cf		 mov	 ecx, edi
  000f2	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  000f7	84 c0		 test	 al, al
  000f9	74 46		 je	 SHORT $LN77@Insert_noh
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00105	6a 00		 push	 0
  00107	68 59 04 00 00	 push	 1113			; 00000459H
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00111	6a 02		 push	 2
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00119	83 c4 18	 add	 esp, 24			; 00000018H
  0011c	83 f8 01	 cmp	 eax, 1
  0011f	75 01		 jne	 SHORT $LN86@Insert_noh
  00121	cc		 int	 3
$LN86@Insert_noh:
  00122	6a 00		 push	 0
  00124	68 59 04 00 00	 push	 1113			; 00000459H
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0013e	83 c4 14	 add	 esp, 20			; 00000014H
$LN77@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1756 : 			_Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;

  00141	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00144	88 5d eb	 mov	 BYTE PTR __Addleft$6[ebp], bl
  00147	84 db		 test	 bl, bl
  00149	74 07		 je	 SHORT $LN16@Insert_noh
  0014b	8b 36		 mov	 esi, DWORD PTR [esi]
  0014d	e9 fe fe ff ff	 jmp	 $LL2@Insert_noh
$LN16@Insert_noh:
  00152	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 1757 : 			}

  00155	e9 f6 fe ff ff	 jmp	 $LL2@Insert_noh
$LN3@Insert_noh:

; 326  : 		: _Mybase(_Pnode, _Plist)

  0015a	8b 75 e4	 mov	 esi, DWORD PTR __Wherenode$1$[ebp]
  0015d	8d 4d d4	 lea	 ecx, DWORD PTR __Where$5[ebp]
  00160	57		 push	 edi
  00161	56		 push	 esi
  00162	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1758 : 
; 1759 : #pragma warning(push)
; 1760 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1761 : 		if (this->_Multi)
; 1762 : 			{
; 1763 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1764 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1765 : 			}
; 1766 : 		else
; 1767 : 			{	// insert only if unique
; 1768 : 			iterator _Where = iterator(_Wherenode, _STD addressof(_My_data));

  00167	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3

; 1769 : 			if (!_Addleft)

  0016b	84 db		 test	 bl, bl
  0016d	0f 84 e6 00 00
	00		 je	 $LN12@Insert_noh

; 498  : 		return (_Myhead->_Left);

  00173	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 326  : 		: _Mybase(_Pnode, _Plist)

  00176	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  00179	57		 push	 edi

; 1185 : 		{	// return iterator for beginning of mutable sequence

  0017a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4

; 326  : 		: _Mybase(_Pnode, _Plist)

  0017e	ff 30		 push	 DWORD PTR [eax]
  00180	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1772 : 			else if (_Where == begin())

  00185	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp]
  00188	50		 push	 eax
  00189	8d 4d d4	 lea	 ecx, DWORD PTR __Where$5[ebp]
  0018c	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  00191	8a d8		 mov	 bl, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00193	6a 03		 push	 3
  00195	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$10[ebp]
  00198	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  001a2	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  001a5	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  001aa	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$10[ebp]
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  001b3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1772 : 			else if (_Where == begin())

  001b7	84 db		 test	 bl, bl
  001b9	0f 84 92 00 00
	00		 je	 $LN11@Insert_noh

; 1774 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  001bf	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  001c2	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  001c5	8b cf		 mov	 ecx, edi
  001c7	50		 push	 eax
  001c8	56		 push	 esi
  001c9	6a 01		 push	 1
  001cb	8d 45 c8	 lea	 eax, DWORD PTR $T3[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  001d4	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1774 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  001d7	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  001d9	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  001df	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  001e6	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001e8	85 c9		 test	 ecx, ecx
  001ea	74 09		 je	 SHORT $LN179@Insert_noh

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  001ec	ff 31		 push	 DWORD PTR [ecx]
  001ee	8b ce		 mov	 ecx, esi
  001f0	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN179@Insert_noh:
  001f5	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  001f8	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

  001fb	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  001ff	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00205	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  00208	6a 03		 push	 3
  0020a	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  0020e	ff d3		 call	 ebx

; 142  : 		_Orphan_me();

  00210	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  00213	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00218	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0021e	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  00221	ff d7		 call	 edi

; 139  : 		{	// destroy the iterator

  00223	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
$LN348@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1800 : 		}

  00227	6a 03		 push	 3
  00229	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  0022c	ff d3		 call	 ebx
  0022e	8d 4d d4	 lea	 ecx, DWORD PTR __Where$5[ebp]
  00231	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me
  00236	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00239	ff d7		 call	 edi
$LN349@Insert_noh:
  0023b	8b c6		 mov	 eax, esi
  0023d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00240	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00247	59		 pop	 ecx
  00248	5f		 pop	 edi
  00249	5e		 pop	 esi
  0024a	5b		 pop	 ebx
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 355  : 		--static_cast<_Mybase&>(*this);

  00251	8d 4d d4	 lea	 ecx, DWORD PTR __Where$5[ebp]
  00254	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--
$LN12@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00259	8b 45 dc	 mov	 eax, DWORD PTR __Where$5[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1782 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  0025c	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  0025f	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1782 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  00262	53		 push	 ebx
  00263	50		 push	 eax
  00264	57		 push	 edi
  00265	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0026a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026d	84 c0		 test	 al, al
  0026f	74 6b		 je	 SHORT $LN13@Insert_noh

; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00271	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  00274	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00277	8b cf		 mov	 ecx, edi
  00279	53		 push	 ebx
  0027a	56		 push	 esi
  0027b	ff 75 eb	 push	 DWORD PTR __Addleft$6[ebp]
  0027e	50		 push	 eax
  0027f	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00284	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00287	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00289	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0028f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00296	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00298	85 c9		 test	 ecx, ecx
  0029a	74 09		 je	 SHORT $LN245@Insert_noh

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0029c	ff 31		 push	 DWORD PTR [ecx]
  0029e	8b ce		 mov	 ecx, esi
  002a0	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN245@Insert_noh:
  002a5	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  002a8	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

  002ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  002af	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  002b5	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  002b8	6a 03		 push	 3
  002ba	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  002be	ff d3		 call	 ebx

; 142  : 		_Orphan_me();

  002c0	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  002c3	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  002c8	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  002ce	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  002d1	ff d7		 call	 edi

; 139  : 		{	// destroy the iterator

  002d3	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  002d7	e9 4b ff ff ff	 jmp	 $LN348@Insert_noh
$LN13@Insert_noh:

; 1587 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Newnode->_Myval));

  002dc	8b 75 14	 mov	 esi, DWORD PTR __Newnode$[ebp]
  002df	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  002e2	e8 00 00 00 00	 call	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  002e7	6a 48		 push	 72			; 00000048H
  002e9	56		 push	 esi
  002ea	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  002ef	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  002f2	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  002f5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  002fb	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00302	8b 45 d4	 mov	 eax, DWORD PTR __Where$5[ebp]
  00305	85 c0		 test	 eax, eax
  00307	74 09		 je	 SHORT $LN324@Insert_noh

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00309	ff 30		 push	 DWORD PTR [eax]
  0030b	8b ce		 mov	 ecx, esi
  0030d	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN324@Insert_noh:
  00312	8b 45 dc	 mov	 eax, DWORD PTR __Where$5[ebp+8]
  00315	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

  00318	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0031c	6a 03		 push	 3
  0031e	8d 4d 10	 lea	 ecx, DWORD PTR __Lock$11[ebp]
  00321	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+12], 13 ; 0000000dH
  00325	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0032b	8d 4d d4	 lea	 ecx, DWORD PTR __Where$5[ebp]
  0032e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00333	8d 4d 10	 lea	 ecx, DWORD PTR __Lock$11[ebp]
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1792 : 				return (_Pairib(_Where, false));

  0033c	e9 fa fe ff ff	 jmp	 $LN349@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$0:

; 1793 : 				}
; 1794 : 			}
; 1795 : #pragma warning(pop)
; 1796 : 		_CATCH_ALL
; 1797 : 		_Destroy_if_node(_Newnode);

  00341	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  00344	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00347	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Destroy_if_node

; 1798 : 		_RERAISE;

  0034c	6a 00		 push	 0
  0034e	6a 00		 push	 0
  00350	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN346@Insert_noh:
  00355	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$4:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Where$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>, COMDAT
; _this$ = ecx

; 1805 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1806 : 		auto& _My_data = this->_Get_data();
; 1807 : 		if (max_size() - 1 <= _My_data._Mysize)

  00008	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000b	3d e2 38 8e 03	 cmp	 eax, 59652322		; 038e38e2H
  00010	0f 83 47 01 00
	00		 jae	 $LN77@Insert_at

; 1811 : 			}
; 1812 : 
; 1813 : 		_Nodeptr _Newnode = _Buy_if_not_node(_Node, _STD forward<_Valty>(_Val));
; 1814 : 
; 1815 : 		++_My_data._Mysize;
; 1816 : 		_Newnode->_Parent = _Wherenode;

  00016	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00019	40		 inc	 eax
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1817 : 
; 1818 : 		if (_Wherenode == _My_data._Myhead)

  00023	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00026	3b c1		 cmp	 eax, ecx
  00028	75 10		 jne	 SHORT $LN6@Insert_at

; 1819 : 			{	// first node in tree, just set head values
; 1820 : 			_My_data._Root() = _Newnode;

  0002a	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 498  : 		return (_Myhead->_Left);

  0002d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 1821 : 			_My_data._Lmost() = _Newnode;

  00030	89 18		 mov	 DWORD PTR [eax], ebx

; 1822 : 			_My_data._Rmost() = _Newnode;

  00032	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00035	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00038	eb 21		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1823 : 			}
; 1824 : 		else if (_Addleft)

  0003a	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003e	74 0d		 je	 SHORT $LN8@Insert_at

; 1825 : 			{	// add to left of _Wherenode
; 1826 : 			_Wherenode->_Left = _Newnode;

  00040	89 18		 mov	 DWORD PTR [eax], ebx

; 498  : 		return (_Myhead->_Left);

  00042	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 1827 : 			if (_Wherenode == _My_data._Lmost())

  00045	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00047	75 12		 jne	 SHORT $LN11@Insert_at

; 1828 : 				{
; 1829 : 				_My_data._Lmost() = _Newnode;

  00049	89 19		 mov	 DWORD PTR [ecx], ebx

; 1830 : 				}
; 1831 : 			}
; 1832 : 		else

  0004b	eb 0e		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1833 : 			{	// add to right of _Wherenode
; 1834 : 			_Wherenode->_Right = _Newnode;

  0004d	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 503  : 		return (_Myhead->_Right);

  00050	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 1835 : 			if (_Wherenode == _My_data._Rmost())

  00053	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00056	75 03		 jne	 SHORT $LN11@Insert_at

; 1836 : 				{
; 1837 : 				_My_data._Rmost() = _Newnode;

  00058	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

  0005b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005e	8b f3		 mov	 esi, ebx
  00060	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00064	0f 85 d5 00 00
	00		 jne	 $LN3@Insert_at
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Insert_at:

; 1842 : 			{
; 1843 : 			if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left)

  00070	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00073	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00076	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00078	3b c1		 cmp	 eax, ecx
  0007a	75 38		 jne	 SHORT $LN12@Insert_at

; 1844 : 				{	// fixup red-red in left subtree
; 1845 : 				_Wherenode = _Pnode->_Parent->_Parent->_Right;

  0007c	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1846 : 				if (_Wherenode->_Color == this->_Red)

  0007f	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00083	74 35		 je	 SHORT $LN75@Insert_at

; 1847 : 					{	// parent has two red children, blacken both
; 1848 : 					_Pnode->_Parent->_Color = this->_Black;
; 1849 : 					_Wherenode->_Color = this->_Black;
; 1850 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;
; 1851 : 					_Pnode = _Pnode->_Parent->_Parent;
; 1852 : 					}
; 1853 : 				else
; 1854 : 					{	// parent has red and black children
; 1855 : 					if (_Pnode == _Pnode->_Parent->_Right)

  00085	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00088	75 0a		 jne	 SHORT $LN16@Insert_at

; 1856 : 						{	// rotate right child to left
; 1857 : 						_Pnode = _Pnode->_Parent;

  0008a	8b f0		 mov	 esi, eax

; 1858 : 						_My_data._Lrotate(_Pnode);

  0008c	8b cf		 mov	 ecx, edi
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate
$LN16@Insert_at:

; 1859 : 						}
; 1860 : 
; 1861 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1862 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;
; 1863 : 					_My_data._Rrotate(_Pnode->_Parent->_Parent);

  00097	8b cf		 mov	 ecx, edi
  00099	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0009d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a3	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  000a7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000aa	ff 70 04	 push	 DWORD PTR [eax+4]
  000ad	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

  000b2	eb 7e		 jmp	 SHORT $LN18@Insert_at
$LN12@Insert_at:

; 1867 : 				{	// fixup red-red in right subtree
; 1868 : 				_Wherenode = _Pnode->_Parent->_Parent->_Left;
; 1869 : 				if (_Wherenode->_Color == this->_Red)

  000b4	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000b8	75 1a		 jne	 SHORT $LN17@Insert_at
$LN75@Insert_at:

; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

  000ba	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  000c2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c8	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  000cc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cf	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000d2	eb 5e		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1870 : 					{	// parent has two red children, blacken both
; 1871 : 					_Pnode->_Parent->_Color = this->_Black;
; 1872 : 					_Wherenode->_Color = this->_Black;
; 1873 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;
; 1874 : 					_Pnode = _Pnode->_Parent->_Parent;
; 1875 : 					}
; 1876 : 				else
; 1877 : 					{	// parent has red and black children
; 1878 : 					if (_Pnode == _Pnode->_Parent->_Left)

  000d4	3b 30		 cmp	 esi, DWORD PTR [eax]
  000d6	75 0a		 jne	 SHORT $LN19@Insert_at

; 1879 : 						{	// rotate left child to right
; 1880 : 						_Pnode = _Pnode->_Parent;

  000d8	8b f0		 mov	 esi, eax

; 1881 : 						_My_data._Rrotate(_Pnode);

  000da	8b cf		 mov	 ecx, edi
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate
$LN19@Insert_at:

; 1882 : 						}
; 1883 : 
; 1884 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

  000e2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1885 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

  000e9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ec	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ef	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1886 : 					_My_data._Lrotate(_Pnode->_Parent->_Parent);

  000f3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  000f9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  000fc	8b 02		 mov	 eax, DWORD PTR [edx]
  000fe	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00101	8b 02		 mov	 eax, DWORD PTR [edx]
  00103	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00107	75 03		 jne	 SHORT $LN58@Insert_at

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00109	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN58@Insert_at:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0010c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00112	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00115	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00118	75 05		 jne	 SHORT $LN59@Insert_at

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  0011a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0011d	eb 0e		 jmp	 SHORT $LN62@Insert_at
$LN59@Insert_at:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  0011f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00122	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00124	75 04		 jne	 SHORT $LN61@Insert_at

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  00126	89 10		 mov	 DWORD PTR [eax], edx

; 525  : 			}
; 526  : 		else

  00128	eb 03		 jmp	 SHORT $LN62@Insert_at
$LN61@Insert_at:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  0012a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN62@Insert_at:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  0012d	89 0a		 mov	 DWORD PTR [edx], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  0012f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

  00132	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00135	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00139	0f 84 31 ff ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1887 : 					}
; 1888 : 				}
; 1889 : 			}
; 1890 : 
; 1891 : 		_My_data._Root()->_Color = this->_Black;	// root is always black

  0013f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 326  : 		: _Mybase(_Pnode, _Plist)

  00142	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00145	57		 push	 edi
  00146	53		 push	 ebx

; 1887 : 					}
; 1888 : 				}
; 1889 : 			}
; 1890 : 
; 1891 : 		_My_data._Root()->_Color = this->_Black;	// root is always black

  00147	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0014a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 326  : 		: _Mybase(_Pnode, _Plist)

  0014e	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1892 : 		return (iterator(_Newnode, _STD addressof(_My_data)));

  00153	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx

; 1893 : 		}

  00159	5d		 pop	 ebp
  0015a	c2 14 00	 ret	 20			; 00000014H
$LN77@Insert_at:

; 1808 : 			{	// tree would get too big, fail
; 1809 : 			_Destroy_if_node(_Node);

  0015d	ff 75 18	 push	 DWORD PTR __Node$[ebp]
  00160	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Destroy_if_node

; 1810 : 			_Xlength_error("map/set<T> too long");

  00165	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
  0016a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN74@Insert_at:
  0016f	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAU10@@Z PROC ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAU10@@Z ENDP ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 1304 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  00023	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  00026	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00029	8b ce		 mov	 ecx, esi
  0002b	ff 30		 push	 DWORD PTR [eax]
  0002d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1305 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  00032	83 c6 1c	 add	 esi, 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00035	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2142 : 		{	// construct empty string

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00044	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  0004b	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00052	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00057	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00059	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00062	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	89 30		 mov	 DWORD PTR [eax], esi

; 3976 : 		_My_data._Mysize = 0;

  0006d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00074	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0007b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5e		 pop	 esi
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::_Exact_args_t,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>, COMDAT
; _this$ = ecx

; 359  : 		{	// construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 		: _Val(_STD forward<_Other>(_Arg))

  00003	8b 45 0c	 mov	 eax, DWORD PTR __This_arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 360  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::_Exact_args_t,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Equal_unchecked1@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Equal_unchecked1@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Equal_unchecked1<char const *,char const *,std::equal_to<void> >, COMDAT

; 3098 : 	{	// compare [_First1, _Last1) to [_First2, ...), memcmp optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3099 : 	const auto _First1_ch = reinterpret_cast<const char *>(_First1);
; 3100 : 	const auto _First2_ch = reinterpret_cast<const char *>(_First2);
; 3101 : 	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last1) - _First1_ch);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	56		 push	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0000c	8b 75 10	 mov	 esi, DWORD PTR __First2$[ebp]
  0000f	83 e9 04	 sub	 ecx, 4
  00012	72 11		 jb	 SHORT $LN5@Equal_unch
$LL6@Equal_unch:
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	3b 06		 cmp	 eax, DWORD PTR [esi]
  00018	75 10		 jne	 SHORT $LN4@Equal_unch
  0001a	83 c2 04	 add	 edx, 4
  0001d	83 c6 04	 add	 esi, 4
  00020	83 e9 04	 sub	 ecx, 4
  00023	73 ef		 jae	 SHORT $LL6@Equal_unch
$LN5@Equal_unch:
  00025	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00028	74 32		 je	 SHORT $LN3@Equal_unch
$LN4@Equal_unch:
  0002a	8a 02		 mov	 al, BYTE PTR [edx]
  0002c	3a 06		 cmp	 al, BYTE PTR [esi]
  0002e	75 27		 jne	 SHORT $LN7@Equal_unch
  00030	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00033	74 27		 je	 SHORT $LN3@Equal_unch
  00035	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00038	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0003b	75 1a		 jne	 SHORT $LN7@Equal_unch
  0003d	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00040	74 1a		 je	 SHORT $LN3@Equal_unch
  00042	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00045	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00048	75 0d		 jne	 SHORT $LN7@Equal_unch
  0004a	83 f9 ff	 cmp	 ecx, -1
  0004d	74 0d		 je	 SHORT $LN3@Equal_unch
  0004f	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00052	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00055	74 05		 je	 SHORT $LN3@Equal_unch
$LN7@Equal_unch:
  00057	32 c0		 xor	 al, al
  00059	5e		 pop	 esi

; 3103 : 	}

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN3@Equal_unch:

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0005c	b0 01		 mov	 al, 1
  0005e	5e		 pop	 esi

; 3103 : 	}

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Equal_unchecked1@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Equal_unchecked1<char const *,char const *,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Within_limits@D@std@@YA_NABDU?$integral_constant@_N$00@0@1U_Unused_parameter@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Within_limits@D@std@@YA_NABDU?$integral_constant@_N$00@0@1U_Unused_parameter@0@@Z PROC ; std::_Within_limits<char>, COMDAT

; 3459 : 	return (SCHAR_MIN <= _Val && _Val <= SCHAR_MAX);

  00000	b0 01		 mov	 al, 1

; 3460 : 	}

  00002	c3		 ret	 0
??$_Within_limits@D@std@@YA_NABDU?$integral_constant@_N$00@0@1U_Unused_parameter@0@@Z ENDP ; std::_Within_limits<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$_Equal_rev_pred_unchecked1@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Last2$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Equal_rev_pred_unchecked1@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Equal_rev_pred_unchecked1<char const *,char const *,std::equal_to<void> >, COMDAT

; 885  : 	{	// compare [_First1, ...) to [_First2, _Last2), memcmp optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  : 	const auto _First1_ch = reinterpret_cast<const char *>(_First1);
; 887  : 	const auto _First2_ch = reinterpret_cast<const char *>(_First2);
; 888  : 	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last2) - _First2_ch);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Last2$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __First2$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	56		 push	 esi

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0000c	8b 75 08	 mov	 esi, DWORD PTR __First1$[ebp]
  0000f	83 e9 04	 sub	 ecx, 4
  00012	72 11		 jb	 SHORT $LN5@Equal_rev_
$LL6@Equal_rev_:
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	3b 02		 cmp	 eax, DWORD PTR [edx]
  00018	75 10		 jne	 SHORT $LN4@Equal_rev_
  0001a	83 c6 04	 add	 esi, 4
  0001d	83 c2 04	 add	 edx, 4
  00020	83 e9 04	 sub	 ecx, 4
  00023	73 ef		 jae	 SHORT $LL6@Equal_rev_
$LN5@Equal_rev_:
  00025	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00028	74 32		 je	 SHORT $LN3@Equal_rev_
$LN4@Equal_rev_:
  0002a	8a 06		 mov	 al, BYTE PTR [esi]
  0002c	3a 02		 cmp	 al, BYTE PTR [edx]
  0002e	75 27		 jne	 SHORT $LN7@Equal_rev_
  00030	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00033	74 27		 je	 SHORT $LN3@Equal_rev_
  00035	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00038	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  0003b	75 1a		 jne	 SHORT $LN7@Equal_rev_
  0003d	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00040	74 1a		 je	 SHORT $LN3@Equal_rev_
  00042	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  00045	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00048	75 0d		 jne	 SHORT $LN7@Equal_rev_
  0004a	83 f9 ff	 cmp	 ecx, -1
  0004d	74 0d		 je	 SHORT $LN3@Equal_rev_
  0004f	8a 46 03	 mov	 al, BYTE PTR [esi+3]
  00052	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00055	74 05		 je	 SHORT $LN3@Equal_rev_
$LN7@Equal_rev_:
  00057	32 c0		 xor	 al, al
  00059	5e		 pop	 esi

; 890  : 	}

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN3@Equal_rev_:

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0005c	b0 01		 mov	 al, 1
  0005e	5e		 pop	 esi

; 890  : 	}

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Equal_rev_pred_unchecked1@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Equal_rev_pred_unchecked1<char const *,char const *,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Equal_memcmp_is_safe@$$CBD$$CBDU?$equal_to@X@std@@@std@@YA?AU?$integral_constant@_N$00@0@ABQBD0ABU?$equal_to@X@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Equal_memcmp_is_safe@$$CBD$$CBDU?$equal_to@X@std@@@std@@YA?AU?$integral_constant@_N$00@0@ABQBD0ABU?$equal_to@X@0@@Z PROC ; std::_Equal_memcmp_is_safe<char const ,char const ,std::equal_to<void> >, COMDAT

; 3073 : 	return {};

  00000	32 c0		 xor	 al, al

; 3074 : 	}

  00002	c3		 ret	 0
??$_Equal_memcmp_is_safe@$$CBD$$CBDU?$equal_to@X@std@@@std@@YA?AU?$integral_constant@_N$00@0@ABQBD0ABU?$equal_to@X@0@@Z ENDP ; std::_Equal_memcmp_is_safe<char const ,char const ,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
_TEXT	SEGMENT
$T2 = -64						; size = 16
$T3 = -60						; size = 12
$T4 = -60						; size = 12
$T5 = -60						; size = 12
__Next$ = -48						; size = 12
_this$ = -36						; size = 4
tv1534 = -32						; size = 4
tv1536 = -28						; size = 4
__Lock$6 = -24						; size = 4
__Lock$7 = -24						; size = 4
$T8 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lock$9 = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
$T10 = 27						; size = 1
__Lock$11 = 28						; size = 4
__Lock$12 = 28						; size = 4
__Lock$13 = 28						; size = 4
__Lock$14 = 28						; size = 4
__Newnode$ = 28						; size = 4
??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>, COMDAT
; _this$ = ecx

; 1599 : 		{	// try to insert node using _Where as a hint

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 dc	 mov	 DWORD PTR _this$[ebp], esi
  00030	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T8[ebp], 0
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0003e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Next$[ebp], 0
  00045	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __Next$[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 37   : 		: _Ptr()

  0004c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Next$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00053	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1604 : 		_TRY_BEGIN

  00056	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  0005a	85 c0		 test	 eax, eax
  0005c	74 02		 je	 SHORT $LN84@Insert_hin
$LN83@Insert_hin:
  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN84@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1606 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data), "map/set insert iterator outside range");

  00060	3b c6		 cmp	 eax, esi
  00062	74 46		 je	 SHORT $LN6@Insert_hin
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006e	6a 00		 push	 0
  00070	68 46 06 00 00	 push	 1606			; 00000646H
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	6a 02		 push	 2
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00082	83 c4 18	 add	 esp, 24			; 00000018H
  00085	83 f8 01	 cmp	 eax, 1
  00088	75 01		 jne	 SHORT $LN43@Insert_hin
  0008a	cc		 int	 3
$LN43@Insert_hin:
  0008b	6a 00		 push	 0
  0008d	68 46 06 00 00	 push	 1606			; 00000646H
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1DNE@PACNGJBJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a7	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@Insert_hin:

; 1607 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1608 : 
; 1609 : #pragma warning(push)
; 1610 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1611 : 		if (size() == 0)

  000aa	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  000ae	75 6b		 jne	 SHORT $LN11@Insert_hin

; 1613 : 			return (_Insert_at(true, _My_data._Myhead,

  000b0	ff 75 1c	 push	 DWORD PTR __Newnode$[ebp]
  000b3	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  000b6	8b ce		 mov	 ecx, esi
  000b8	ff 75 18	 push	 DWORD PTR __Val$[ebp]
  000bb	ff 76 04	 push	 DWORD PTR [esi+4]
  000be	6a 01		 push	 1
  000c0	53		 push	 ebx
  000c1	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000c6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  000cc	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$14[ebp]
  000cf	6a 03		 push	 3
  000d1	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000d5	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  000d7	8d 4d d0	 lea	 ecx, DWORD PTR __Next$[ebp]
  000da	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  000df	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000e5	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$14[ebp]
  000e8	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000ea	6a 03		 push	 3
  000ec	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$13[ebp]
  000ef	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  000f6	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  000f8	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  000fb	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00100	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$13[ebp]
  00103	ff d6		 call	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1613 : 			return (_Insert_at(true, _My_data._Myhead,

  00105	8b c3		 mov	 eax, ebx

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  00107	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0010a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00111	59		 pop	 ecx
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 18 00	 ret	 24			; 00000018H
$LN11@Insert_hin:

; 498  : 		return (_Myhead->_Left);

  0011b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 326  : 		: _Mybase(_Pnode, _Plist)

  0011e	8d 4d c4	 lea	 ecx, DWORD PTR $T5[ebp]
  00121	56		 push	 esi

; 1185 : 		{	// return iterator for beginning of mutable sequence

  00122	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+12], 11 ; 0000000bH

; 326  : 		: _Mybase(_Pnode, _Plist)

  00126	ff 30		 push	 DWORD PTR [eax]
  00128	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1666 : 			if (_Where == begin())

  0012d	8d 45 c4	 lea	 eax, DWORD PTR $T5[ebp]
  00130	50		 push	 eax
  00131	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00134	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  00139	8a d8		 mov	 bl, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0013b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00141	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00144	6a 03		 push	 3
  00146	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+12], 12 ; 0000000cH
  0014a	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  0014c	8d 4d c4	 lea	 ecx, DWORD PTR $T5[ebp]
  0014f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00154	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0015d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1666 : 			if (_Where == begin())

  00161	84 db		 test	 bl, bl
  00163	74 56		 je	 SHORT $LN29@Insert_hin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00165	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1668 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  00168	8b 7d 18	 mov	 edi, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  0016b	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1668 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  0016e	50		 push	 eax
  0016f	57		 push	 edi
  00170	56		 push	 esi
  00171	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH
  00179	84 c0		 test	 al, al
  0017b	0f 84 bf 01 00
	00		 je	 $LN41@Insert_hin

; 1669 : 					this->_Kfn(_Val), this->_Key(_Where._Ptr)))
; 1670 : 					{
; 1671 : 					return (_Insert_at(true, _Where._Ptr,

  00181	ff 75 1c	 push	 DWORD PTR __Newnode$[ebp]
  00184	57		 push	 edi
  00185	ff 75 14	 push	 DWORD PTR __Where$[ebp+8]
  00188	6a 01		 push	 1
$LN534@Insert_hin:

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  0018a	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
$LN535@Insert_hin:
  0018d	57		 push	 edi
  0018e	8b ce		 mov	 ecx, esi
  00190	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
  00195	8d 4d d0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00198	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
  0019d	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  001a0	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
  001a5	8b c7		 mov	 eax, edi
  001a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b1	59		 pop	 ecx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 18 00	 ret	 24			; 00000018H
$LN29@Insert_hin:

; 326  : 		: _Mybase(_Pnode, _Plist)

  001bb	56		 push	 esi
  001bc	ff 76 04	 push	 DWORD PTR [esi+4]
  001bf	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]

; 1197 : 		{	// return iterator for end of mutable sequence

  001c2	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+12], 13 ; 0000000dH

; 326  : 		: _Mybase(_Pnode, _Plist)

  001c6	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1675 : 			else if (_Where == end())

  001cb	8d 45 c4	 lea	 eax, DWORD PTR $T4[ebp]
  001ce	50		 push	 eax
  001cf	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  001d2	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  001d7	8a d8		 mov	 bl, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  001d9	6a 03		 push	 3
  001db	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  001de	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+12], 14 ; 0000000eH
  001e2	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  001e4	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  001e7	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  001ec	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1675 : 			else if (_Where == end())

  001f5	8b 7d 18	 mov	 edi, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  001f8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1675 : 			else if (_Where == end())

  001fc	84 db		 test	 bl, bl
  001fe	74 2d		 je	 SHORT $LN32@Insert_hin

; 503  : 		return (_Myhead->_Right);

  00200	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1677 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  00203	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00204	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00207	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1677 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  0020a	50		 push	 eax
  0020b	56		 push	 esi
  0020c	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00211	83 c4 0c	 add	 esp, 12			; 0000000cH
  00214	84 c0		 test	 al, al
  00216	0f 84 24 01 00
	00		 je	 $LN41@Insert_hin

; 1678 : 					this->_Key(_My_data._Rmost()), this->_Kfn(_Val)))
; 1679 : 					{
; 1680 : 					return (_Insert_at(false, _My_data._Rmost(),

  0021c	ff 75 1c	 push	 DWORD PTR __Newnode$[ebp]

; 503  : 		return (_Myhead->_Right);

  0021f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1678 : 					this->_Key(_My_data._Rmost()), this->_Kfn(_Val)))
; 1679 : 					{
; 1680 : 					return (_Insert_at(false, _My_data._Rmost(),

  00222	57		 push	 edi
  00223	ff 70 08	 push	 DWORD PTR [eax+8]
  00226	6a 00		 push	 0
  00228	e9 5d ff ff ff	 jmp	 $LN534@Insert_hin
$LN32@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  0022d	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00230	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  00233	50		 push	 eax
  00234	57		 push	 edi
  00235	56		 push	 esi
  00236	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0023b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023e	84 c0		 test	 al, al
  00240	74 4d		 je	 SHORT $LN35@Insert_hin
  00242	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00245	50		 push	 eax
  00246	8d 4d d0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00249	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  0024e	8b c8		 mov	 ecx, eax
  00250	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--
  00255	57		 push	 edi
  00256	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00259	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  0025c	50		 push	 eax
  0025d	56		 push	 esi
  0025e	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00263	83 c4 0c	 add	 esp, 12			; 0000000cH
  00266	84 c0		 test	 al, al
  00268	74 25		 je	 SHORT $LN35@Insert_hin

; 1687 : 					this->_Key((--(_Next = _Where))._Ptr),
; 1688 : 					this->_Kfn(_Val)))
; 1689 : 				{	// insert before _Where
; 1690 : 				if (_Next._Ptr->_Right->_Isnil)

  0026a	8b 4d d8	 mov	 ecx, DWORD PTR __Next$[ebp+8]
  0026d	ff 75 1c	 push	 DWORD PTR __Newnode$[ebp]
  00270	57		 push	 edi
  00271	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00274	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00277	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0027b	74 08		 je	 SHORT $LN37@Insert_hin
$LN536@Insert_hin:

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  0027d	51		 push	 ecx
  0027e	6a 00		 push	 0
  00280	e9 08 ff ff ff	 jmp	 $LN535@Insert_hin
$LN37@Insert_hin:

; 1691 : 					{
; 1692 : 					return (_Insert_at(false, _Next._Ptr,
; 1693 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1694 : 					}
; 1695 : 				else
; 1696 : 					{
; 1697 : 					return (_Insert_at(true, _Where._Ptr,

  00285	ff 75 14	 push	 DWORD PTR __Where$[ebp+8]
  00288	6a 01		 push	 1
  0028a	e9 fe fe ff ff	 jmp	 $LN535@Insert_hin
$LN35@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  0028f	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00292	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1703 : 				&& (++(_Next = _Where) == end()

  00295	57		 push	 edi
  00296	50		 push	 eax
  00297	56		 push	 esi
  00298	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a0	84 c0		 test	 al, al
  002a2	74 5a		 je	 SHORT $LN531@Insert_hin

; 326  : 		: _Mybase(_Pnode, _Plist)

  002a4	56		 push	 esi
  002a5	ff 76 04	 push	 DWORD PTR [esi+4]
  002a8	8d 4d c4	 lea	 ecx, DWORD PTR $T3[ebp]

; 1197 : 		{	// return iterator for end of mutable sequence

  002ab	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+12], 15 ; 0000000fH

; 326  : 		: _Mybase(_Pnode, _Plist)

  002af	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1703 : 				&& (++(_Next = _Where) == end()

  002b4	8b 5d ec	 mov	 ebx, DWORD PTR $T8[ebp]
  002b7	8d 45 c4	 lea	 eax, DWORD PTR $T3[ebp]
  002ba	50		 push	 eax
  002bb	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  002be	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+12], 16 ; 00000010H
  002c2	83 cb 04	 or	 ebx, 4
  002c5	8d 4d d0	 lea	 ecx, DWORD PTR __Next$[ebp]
  002c8	50		 push	 eax
  002c9	89 5d ec	 mov	 DWORD PTR $T8[ebp], ebx
  002cc	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  002d1	8b c8		 mov	 ecx, eax
  002d3	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator++
  002d8	8b c8		 mov	 ecx, eax
  002da	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  002df	84 c0		 test	 al, al
  002e1	75 15		 jne	 SHORT $LN47@Insert_hin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  002e3	8b 45 d8	 mov	 eax, DWORD PTR __Next$[ebp+8]
  002e6	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1703 : 				&& (++(_Next = _Where) == end()

  002e9	50		 push	 eax
  002ea	57		 push	 edi
  002eb	56		 push	 esi
  002ec	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  002f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f4	84 c0		 test	 al, al
  002f6	74 09		 je	 SHORT $LN48@Insert_hin
$LN47@Insert_hin:
  002f8	c6 45 1b 01	 mov	 BYTE PTR $T10[ebp], 1
  002fc	eb 07		 jmp	 SHORT $LN49@Insert_hin
$LN531@Insert_hin:
  002fe	8b 5d ec	 mov	 ebx, DWORD PTR $T8[ebp]
$LN48@Insert_hin:
  00301	c6 45 1b 00	 mov	 BYTE PTR $T10[ebp], 0
$LN49@Insert_hin:
  00305	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0030c	f6 c3 04	 test	 bl, 4
  0030f	74 08		 je	 SHORT $LN65@Insert_hin
  00311	8d 4d c4	 lea	 ecx, DWORD PTR $T3[ebp]
  00314	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
$LN65@Insert_hin:
  00319	80 7d 1b 00	 cmp	 BYTE PTR $T10[ebp], 0
  0031d	74 21		 je	 SHORT $LN41@Insert_hin

; 1704 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1705 : 						this->_Kfn(_Val), this->_Key(_Next._Ptr))))
; 1706 : 				{	// insert after _Where
; 1707 : 				if (_Where._Ptr->_Right->_Isnil)

  0031f	8b 4d 14	 mov	 ecx, DWORD PTR __Where$[ebp+8]
  00322	ff 75 1c	 push	 DWORD PTR __Newnode$[ebp]
  00325	57		 push	 edi
  00326	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00329	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0032c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00330	0f 85 47 ff ff
	ff		 jne	 $LN536@Insert_hin

; 1708 : 					{
; 1709 : 					return (_Insert_at(false, _Where._Ptr,
; 1710 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1711 : 					}
; 1712 : 				else
; 1713 : 					{
; 1714 : 					return (_Insert_at(true, _Next._Ptr,

  00336	ff 75 d8	 push	 DWORD PTR __Next$[ebp+8]
  00339	6a 01		 push	 1
  0033b	e9 4d fe ff ff	 jmp	 $LN535@Insert_hin
$LN41@Insert_hin:

; 1725 : 		return (_Insert_nohint(_Leftish,

  00340	ff 75 1c	 push	 DWORD PTR __Newnode$[ebp]
  00343	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  00346	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  0034d	57		 push	 edi
  0034e	6a 00		 push	 0
  00350	50		 push	 eax
  00351	8b ce		 mov	 ecx, esi
  00353	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00358	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1725 : 		return (_Insert_nohint(_Leftish,

  0035b	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0035d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00363	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0036a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0036c	85 c9		 test	 ecx, ecx
  0036e	74 09		 je	 SHORT $LN467@Insert_hin

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00370	ff 31		 push	 DWORD PTR [ecx]
  00372	8b ce		 mov	 ecx, esi
  00374	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN467@Insert_hin:
  00379	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0037c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0037f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00385	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$11[ebp]
  00388	6a 03		 push	 3
  0038a	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+12], 19 ; 00000013H
  0038e	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00390	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00393	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00398	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0039e	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$11[ebp]
  003a1	ff d3		 call	 ebx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  003a3	6a 03		 push	 3
  003a5	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$12[ebp]
  003a8	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+12], 20 ; 00000014H
  003ac	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  003ae	8d 4d d0	 lea	 ecx, DWORD PTR __Next$[ebp]
  003b1	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  003b6	8d 4d 1c	 lea	 ecx, DWORD PTR __Lock$12[ebp]
  003b9	ff d3		 call	 ebx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  003bb	6a 03		 push	 3
  003bd	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  003c0	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 21 ; 00000015H
  003c7	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  003c9	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  003cc	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  003d1	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  003d4	ff d3		 call	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1725 : 		return (_Insert_nohint(_Leftish,

  003d6	8b c6		 mov	 eax, esi

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  003d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003e2	59		 pop	 ecx
  003e3	5f		 pop	 edi
  003e4	5e		 pop	 esi
  003e5	5b		 pop	 ebx
  003e6	8b e5		 mov	 esp, ebp
  003e8	5d		 pop	 ebp
  003e9	c2 18 00	 ret	 24			; 00000018H
__catch$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$0:

; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 					}
; 1717 : 				}
; 1718 : 			}
; 1719 : #pragma warning(pop)
; 1720 : 		_CATCH_ALL
; 1721 : 		_Destroy_if_node(_Newnode);

  003ec	ff 75 1c	 push	 DWORD PTR __Newnode$[ebp]
  003ef	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f2	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Destroy_if_node

; 1722 : 		_RERAISE;

  003f7	6a 00		 push	 0
  003f9	6a 00		 push	 0
  003fb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN533@Insert_hin:
  00400	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$2:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$3:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z$10:
  00010	8b 45 ec	 mov	 eax, DWORD PTR $T8[ebp]
  00013	83 e0 04	 and	 eax, 4
  00016	0f 84 0c 00 00
	00		 je	 $LN64@Insert_hin
  0001c	83 65 ec fb	 and	 DWORD PTR $T8[ebp], -5	; fffffffbH
  00020	8d 4d c4	 lea	 ecx, DWORD PTR $T3[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
$LN64@Insert_hin:
  00028	c3		 ret	 0
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$ = 16						; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 976  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		_Nodeptr _Pnode = _Buynode0();

  0002e	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 1304 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 977  : 		_Nodeptr _Pnode = _Buynode0();

  00036	8b f8		 mov	 edi, eax
  00038	89 7d ec	 mov	 DWORD PTR __Pnode$[ebp], edi

; 978  : 
; 979  : 		_Pnode->_Color = _Red;
; 980  : 		_Pnode->_Isnil = false;
; 981  : 
; 982  : 		_TRY_BEGIN

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 983  : 		_Alnode_traits::construct(_Getal(),

  00048	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 1304 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  0004b	ff 31		 push	 DWORD PTR [ecx]
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1305 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  00054	83 c6 1c	 add	 esi, 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00057	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2142 : 		{	// construct empty string

  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0005d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00063	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  0006a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00071	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00076	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00078	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0007b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00081	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00088	8b 06		 mov	 eax, DWORD PTR [esi]
  0008a	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 990  : 		return (_Pnode);

  0008c	8b c7		 mov	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0008e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00095	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0009c	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 991  : 		}

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:

; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);

  000b4	ff 75 ec	 push	 DWORD PTR __Pnode$[ebp]
  000b7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Freenode0

; 987  : 		_RERAISE;

  000bf	6a 00		 push	 0
  000c1	6a 00		 push	 0
  000c3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN120@Buynode:
  000c8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__This_arg$ = 8						; size = 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>, COMDAT
; _this$ = ecx

; 446  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 		: _Val(_STD forward<_Other>(_Arg))

  00003	8b 45 08	 mov	 eax, DWORD PTR __This_arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 447  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Equal_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Equal_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@@Z PROC ; std::_Equal_unchecked<char const *,char const *,std::equal_to<void> >, COMDAT

; 3110 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred, choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3101 : 	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last1) - _First1_ch);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00009	2b ca		 sub	 ecx, edx

; 3110 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred, choose optimization

  0000b	56		 push	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0000c	8b 75 10	 mov	 esi, DWORD PTR __First2$[ebp]
  0000f	83 e9 04	 sub	 ecx, 4
  00012	72 11		 jb	 SHORT $LN9@Equal_unch
$LL10@Equal_unch:
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	3b 06		 cmp	 eax, DWORD PTR [esi]
  00018	75 10		 jne	 SHORT $LN8@Equal_unch
  0001a	83 c2 04	 add	 edx, 4
  0001d	83 c6 04	 add	 esi, 4
  00020	83 e9 04	 sub	 ecx, 4
  00023	73 ef		 jae	 SHORT $LL10@Equal_unch
$LN9@Equal_unch:
  00025	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00028	74 32		 je	 SHORT $LN7@Equal_unch
$LN8@Equal_unch:
  0002a	8a 02		 mov	 al, BYTE PTR [edx]
  0002c	3a 06		 cmp	 al, BYTE PTR [esi]
  0002e	75 27		 jne	 SHORT $LN11@Equal_unch
  00030	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00033	74 27		 je	 SHORT $LN7@Equal_unch
  00035	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00038	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0003b	75 1a		 jne	 SHORT $LN11@Equal_unch
  0003d	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00040	74 1a		 je	 SHORT $LN7@Equal_unch
  00042	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00045	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00048	75 0d		 jne	 SHORT $LN11@Equal_unch
  0004a	83 f9 ff	 cmp	 ecx, -1
  0004d	74 0d		 je	 SHORT $LN7@Equal_unch
  0004f	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00052	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00055	74 05		 je	 SHORT $LN7@Equal_unch
$LN11@Equal_unch:
  00057	32 c0		 xor	 al, al
  00059	5e		 pop	 esi

; 3111 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
; 3112 : 		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
; 3113 : 	}

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN7@Equal_unch:

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0005c	b0 01		 mov	 al, 1
  0005e	5e		 pop	 esi

; 3111 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
; 3112 : 		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
; 3113 : 	}

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Equal_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@@Z ENDP ; std::_Equal_unchecked<char const *,char const *,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@V?$_Array_iterator@$$CBD$08@std@@H$0A@@std@@YAPBDABV?$_Array_iterator@$$CBD$08@0@H@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__Off$ = 12						; size = 4
??$_Get_unwrapped_n@V?$_Array_iterator@$$CBD$08@std@@H$0A@@std@@YAPBDABV?$_Array_iterator@$$CBD$08@0@H@Z PROC ; std::_Get_unwrapped_n<std::_Array_iterator<char const ,9>,int,0>, COMDAT

; 760  : 	{	// ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1909 : 		if (_Off != 0)

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport

; 760  : 	{	// ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap

  00009	53		 push	 ebx

; 1909 : 		if (_Off != 0)

  0000a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter

; 760  : 	{	// ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap

  00010	56		 push	 esi

; 1909 : 		if (_Off != 0)

  00011	8b 75 08	 mov	 esi, DWORD PTR __It$[ebp]

; 760  : 	{	// ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap

  00014	57		 push	 edi

; 1909 : 		if (_Off != 0)

  00015	8b 7d 0c	 mov	 edi, DWORD PTR __Off$[ebp]
  00018	85 ff		 test	 edi, edi
  0001a	74 4c		 je	 SHORT $LN49@Get_unwrap

; 1910 : 			{
; 1911 : 			_STL_VERIFY(_Ptr, "cannot seek value-initialized array iterator");

  0001c	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00020	75 44		 jne	 SHORT $LN15@Get_unwrap
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002c	6a 00		 push	 0
  0002e	68 77 07 00 00	 push	 1911			; 00000777H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	6a 02		 push	 2
  0003a	ff d1		 call	 ecx
  0003c	83 c4 18	 add	 esp, 24			; 00000018H
  0003f	83 f8 01	 cmp	 eax, 1
  00042	75 01		 jne	 SHORT $LN42@Get_unwrap
  00044	cc		 int	 3
$LN42@Get_unwrap:
  00045	6a 00		 push	 0
  00047	68 77 07 00 00	 push	 1911			; 00000777H
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
  0005b	ff d3		 call	 ebx
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
  00063	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@Get_unwrap:

; 1912 : 			}
; 1913 : 
; 1914 : 		if (_Off < 0)

  00066	85 ff		 test	 edi, edi
$LN49@Get_unwrap:
  00068	79 47		 jns	 SHORT $LN21@Get_unwrap

; 1915 : 			{
; 1916 : #pragma warning(suppress: 4146)	// unary minus operator applied to unsigned type, result still unsigned
; 1917 : 			_STL_VERIFY(_Idx >= -static_cast<size_t>(_Off),

  0006a	8b c7		 mov	 eax, edi
  0006c	f7 d8		 neg	 eax
  0006e	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00071	73 3e		 jae	 SHORT $LN21@Get_unwrap
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0007d	6a 00		 push	 0
  0007f	68 7e 07 00 00	 push	 1918			; 0000077eH
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00089	6a 02		 push	 2
  0008b	ff d1		 call	 ecx
  0008d	83 c4 18	 add	 esp, 24			; 00000018H
  00090	83 f8 01	 cmp	 eax, 1
  00093	75 01		 jne	 SHORT $LN43@Get_unwrap
  00095	cc		 int	 3
$LN43@Get_unwrap:
  00096	6a 00		 push	 0
  00098	68 7e 07 00 00	 push	 1918			; 0000077eH
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  000ac	ff d3		 call	 ebx
  000ae	83 c4 14	 add	 esp, 20			; 00000014H
$LN21@Get_unwrap:

; 1918 : 				"cannot seek array iterator before begin");
; 1919 : 			}
; 1920 : 
; 1921 : 		if (_Off > 0)

  000b1	85 ff		 test	 edi, edi
  000b3	7e 4e		 jle	 SHORT $LN27@Get_unwrap

; 1922 : 			{
; 1923 : 			_STL_VERIFY(_Size - _Idx >= static_cast<size_t>(_Off),

  000b5	b8 09 00 00 00	 mov	 eax, 9
  000ba	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  000bd	3b c7		 cmp	 eax, edi
  000bf	73 42		 jae	 SHORT $LN27@Get_unwrap
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000cb	6a 00		 push	 0
  000cd	68 84 07 00 00	 push	 1924			; 00000784H
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000d7	6a 02		 push	 2
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000df	83 c4 18	 add	 esp, 24			; 00000018H
  000e2	83 f8 01	 cmp	 eax, 1
  000e5	75 01		 jne	 SHORT $LN44@Get_unwrap
  000e7	cc		 int	 3
$LN44@Get_unwrap:
  000e8	6a 00		 push	 0
  000ea	68 84 07 00 00	 push	 1924			; 00000784H
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  000fe	ff d3		 call	 ebx
  00100	83 c4 14	 add	 esp, 20			; 00000014H
$LN27@Get_unwrap:

; 2002 : 		return (_Ptr + _Idx);

  00103	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00106	03 46 08	 add	 eax, DWORD PTR [esi+8]

; 761  : 	using _IDiff = _Iter_diff_t<_Iter>;
; 762  : 	using _CDiff = common_type_t<_Diff, _IDiff>;
; 763  : 	const auto _COff = static_cast<_CDiff>(_Off);
; 764  : 
; 765  : 	_STL_ASSERT(_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>)
; 766  : 		&& (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff),
; 767  : 		"integer overflow");
; 768  : 	(void) _COff;
; 769  : 
; 770  : 	_It._Verify_offset(static_cast<_IDiff>(_Off));
; 771  : 	return (_It._Unwrapped());

  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx

; 772  : 	}

  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
??$_Get_unwrapped_n@V?$_Array_iterator@$$CBD$08@std@@H$0A@@std@@YAPBDABV?$_Array_iterator@$$CBD$08@0@H@Z ENDP ; std::_Get_unwrapped_n<std::_Array_iterator<char const ,9>,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PBDPBD@std@@YAHABQBD0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PBDPBD@std@@YAHABQBD0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<char const *,char const *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]

; 969  : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Idl_distance1@PBDPBD@std@@YAHABQBD0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PBDPBD@std@@YAHABQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PBDPBD@std@@YAHABQBD0@Z PROC		; std::_Idl_distance<char const *,char const *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));
; 976  : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Idl_distance@PBDPBD@std@@YAHABQBD0@Z ENDP		; std::_Idl_distance<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Within_limits@PBDD@std@@YA_NPBDABD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Within_limits@PBDD@std@@YA_NPBDABD@Z PROC		; std::_Within_limits<char const *,char>, COMDAT

; 3490 : 	using _Elem = remove_pointer_t<_InIt>;
; 3491 : 	return (_Within_limits(_Val, is_signed<_Elem>{}, is_signed<_Ty>{},

  00000	b0 01		 mov	 al, 1

; 3492 : 		bool_constant<-1 == static_cast<_Ty>(-1)>{}));
; 3493 : 	}

  00002	c3		 ret	 0
??$_Within_limits@PBDD@std@@YA_NPBDABD@Z ENDP		; std::_Within_limits<char const *,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$_Equal_rev_pred_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Last2$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Equal_rev_pred_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@@Z PROC ; std::_Equal_rev_pred_unchecked<char const *,char const *,std::equal_to<void> >, COMDAT

; 896  : 	{	// compare [_First1, ...) to [_First2, _Last2) using _Pred, choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 888  : 	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last2) - _First2_ch);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Last2$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __First2$[ebp]
  00009	2b ca		 sub	 ecx, edx

; 896  : 	{	// compare [_First1, ...) to [_First2, _Last2) using _Pred, choose optimization

  0000b	56		 push	 esi

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0000c	8b 75 08	 mov	 esi, DWORD PTR __First1$[ebp]
  0000f	83 e9 04	 sub	 ecx, 4
  00012	72 11		 jb	 SHORT $LN9@Equal_rev_
$LL10@Equal_rev_:
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	3b 02		 cmp	 eax, DWORD PTR [edx]
  00018	75 10		 jne	 SHORT $LN8@Equal_rev_
  0001a	83 c6 04	 add	 esi, 4
  0001d	83 c2 04	 add	 edx, 4
  00020	83 e9 04	 sub	 ecx, 4
  00023	73 ef		 jae	 SHORT $LL10@Equal_rev_
$LN9@Equal_rev_:
  00025	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00028	74 32		 je	 SHORT $LN7@Equal_rev_
$LN8@Equal_rev_:
  0002a	8a 06		 mov	 al, BYTE PTR [esi]
  0002c	3a 02		 cmp	 al, BYTE PTR [edx]
  0002e	75 27		 jne	 SHORT $LN11@Equal_rev_
  00030	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00033	74 27		 je	 SHORT $LN7@Equal_rev_
  00035	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00038	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  0003b	75 1a		 jne	 SHORT $LN11@Equal_rev_
  0003d	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00040	74 1a		 je	 SHORT $LN7@Equal_rev_
  00042	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  00045	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00048	75 0d		 jne	 SHORT $LN11@Equal_rev_
  0004a	83 f9 ff	 cmp	 ecx, -1
  0004d	74 0d		 je	 SHORT $LN7@Equal_rev_
  0004f	8a 46 03	 mov	 al, BYTE PTR [esi+3]
  00052	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00055	74 05		 je	 SHORT $LN7@Equal_rev_
$LN11@Equal_rev_:
  00057	32 c0		 xor	 al, al
  00059	5e		 pop	 esi

; 897  : 	return (_Equal_rev_pred_unchecked1(_First1, _First2, _Last2, _Pred,
; 898  : 		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
; 899  : 	}

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN7@Equal_rev_:

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0005c	b0 01		 mov	 al, 1
  0005e	5e		 pop	 esi

; 897  : 	return (_Equal_rev_pred_unchecked1(_First1, _First2, _Last2, _Pred,
; 898  : 		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
; 899  : 	}

  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Equal_rev_pred_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YA_NQBD00U?$equal_to@X@0@@Z ENDP ; std::_Equal_rev_pred_unchecked<char const *,char const *,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 436  : 		constexpr _Unused_parameter(_Ty&&) noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > &,bool,0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR __Val1$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN19@allocator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN19@allocator:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

  00049	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0004c	8a 00		 mov	 al, BYTE PTR [eax]
  0004e	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 175  : 		}

  00051	8b c6		 mov	 eax, esi
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > &,bool,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool,0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR __Val1$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN19@allocator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN19@allocator:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

  00049	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0004c	8a 00		 mov	 al, BYTE PTR [eax]
  0004e	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 175  : 		}

  00051	8b c6		 mov	 eax, esi
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
_<_Val_0>$ = 24						; size = 4
_<_Val_1>$ = 28						; size = 4
__Lock$2 = 32						; size = 4
_<_Val_2>$ = 32						; size = 4
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 1161 : 		{	// insert value_type(_Val...) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  00026	ff 75 20	 push	 DWORD PTR _<_Val_2>$[ebp]
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	ff 75 1c	 push	 DWORD PTR _<_Val_1>$[ebp]
  00033	ff 75 18	 push	 DWORD PTR _<_Val_0>$[ebp]
  00036	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  0003b	50		 push	 eax
  0003c	83 c0 10	 add	 eax, 16			; 00000010H
  0003f	50		 push	 eax
  00040	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00043	8b f4		 mov	 esi, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00045	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00052	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00055	85 c0		 test	 eax, eax
  00057	74 09		 je	 SHORT $LN24@emplace_hi

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00059	ff 30		 push	 DWORD PTR [eax]
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN24@emplace_hi:
  00062	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  00065	8b cf		 mov	 ecx, edi
  00067	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0006a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0006d	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 136  : 		}

  0006e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  00072	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00077	6a 03		 push	 3
  00079	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0007c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00089	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0008c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00091	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  0009a	8b c6		 mov	 eax, esi

; 1164 : 		}

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 1073 : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1074 : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1075 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
;	COMDAT ??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b c1		 mov	 eax, ecx
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1073 : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 		: _Val(_STD forward<_Other>(_Arg))

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1074 : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));
; 1075 : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z PROC ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1109 : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 : 	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00006	53		 push	 ebx
  00007	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0000d	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  00012	8a d8		 mov	 bl, al

; 1111 : 	if (_Result)

  00014	84 db		 test	 bl, bl
  00016	74 58		 je	 SHORT $LN13@Debug_lt_p

; 1112 : 		{
; 1113 : 		_STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

  00018	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0001e	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00021	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  00026	84 c0		 test	 al, al
  00028	74 46		 je	 SHORT $LN13@Debug_lt_p
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00034	6a 00		 push	 0
  00036	68 59 04 00 00	 push	 1113			; 00000459H
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00040	6a 02		 push	 2
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00048	83 c4 18	 add	 esp, 24			; 00000018H
  0004b	83 f8 01	 cmp	 eax, 1
  0004e	75 01		 jne	 SHORT $LN12@Debug_lt_p
  00050	cc		 int	 3
$LN12@Debug_lt_p:
  00051	6a 00		 push	 0
  00053	68 59 04 00 00	 push	 1113			; 00000459H
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
$LN13@Debug_lt_p:

; 1114 : 		}
; 1115 : 
; 1116 : 	return (_Result);
; 1117 : 	}

  00070	8a c3		 mov	 al, bl
  00072	5b		 pop	 ebx
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ENDP ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$equal@PBDV?$_Array_iterator@$$CBD$08@std@@U?$equal_to@X@2@@std@@YA_NQBD0V?$_Array_iterator@$$CBD$08@0@U?$equal_to@X@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 16
__Pred$ = 32						; size = 1
??$equal@PBDV?$_Array_iterator@$$CBD$08@std@@U?$equal_to@X@2@@std@@YA_NQBD0V?$_Array_iterator@$$CBD$08@0@U?$equal_to@X@0@@Z PROC ; std::equal<char const *,std::_Array_iterator<char const ,9>,std::equal_to<void> >, COMDAT

; 3120 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport

; 3120 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

  00008	53		 push	 ebx

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00009	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter

; 3120 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

  0000f	56		 push	 esi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00010	8b 75 0c	 mov	 esi, DWORD PTR __Last1$[ebp]

; 3120 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

  00013	57		 push	 edi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00014	8b 7d 08	 mov	 edi, DWORD PTR __First1$[ebp]
  00017	3b fe		 cmp	 edi, esi
  00019	76 43		 jbe	 SHORT $LN12@equal
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00025	6a 00		 push	 0
  00027	68 2f 02 00 00	 push	 559			; 0000022fH
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00031	6a 02		 push	 2
  00033	ff d0		 call	 eax
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 01		 jne	 SHORT $LN17@equal
  0003d	cc		 int	 3
$LN17@equal:
  0003e	6a 00		 push	 0
  00040	68 2f 02 00 00	 push	 559			; 0000022fH
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00054	ff d3		 call	 ebx
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  0005b	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@equal:

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  0005e	2b f7		 sub	 esi, edi

; 1909 : 		if (_Off != 0)

  00060	74 44		 je	 SHORT $LN40@equal

; 1910 : 			{
; 1911 : 			_STL_VERIFY(_Ptr, "cannot seek value-initialized array iterator");

  00062	83 7d 18 00	 cmp	 DWORD PTR __First2$[ebp+8], 0
  00066	75 3e		 jne	 SHORT $LN40@equal
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00072	6a 00		 push	 0
  00074	68 77 07 00 00	 push	 1911			; 00000777H
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007e	6a 02		 push	 2
  00080	ff d0		 call	 eax
  00082	83 c4 18	 add	 esp, 24			; 00000018H
  00085	83 f8 01	 cmp	 eax, 1
  00088	75 01		 jne	 SHORT $LN67@equal
  0008a	cc		 int	 3
$LN67@equal:
  0008b	6a 00		 push	 0
  0008d	68 77 07 00 00	 push	 1911			; 00000777H
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
  000a1	ff d3		 call	 ebx
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
$LN40@equal:

; 1912 : 			}
; 1913 : 
; 1914 : 		if (_Off < 0)

  000a6	85 f6		 test	 esi, esi
  000a8	79 4d		 jns	 SHORT $LN90@equal

; 1915 : 			{
; 1916 : #pragma warning(suppress: 4146)	// unary minus operator applied to unsigned type, result still unsigned
; 1917 : 			_STL_VERIFY(_Idx >= -static_cast<size_t>(_Off),

  000aa	8b c6		 mov	 eax, esi
  000ac	f7 d8		 neg	 eax
  000ae	39 45 1c	 cmp	 DWORD PTR __First2$[ebp+12], eax
  000b1	73 42		 jae	 SHORT $LN46@equal
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000bd	6a 00		 push	 0
  000bf	68 7e 07 00 00	 push	 1918			; 0000077eH
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000c9	6a 02		 push	 2
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000d1	83 c4 18	 add	 esp, 24			; 00000018H
  000d4	83 f8 01	 cmp	 eax, 1
  000d7	75 01		 jne	 SHORT $LN68@equal
  000d9	cc		 int	 3
$LN68@equal:
  000da	6a 00		 push	 0
  000dc	68 7e 07 00 00	 push	 1918			; 0000077eH
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  000f0	ff d3		 call	 ebx
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
$LN46@equal:

; 1918 : 				"cannot seek array iterator before begin");
; 1919 : 			}
; 1920 : 
; 1921 : 		if (_Off > 0)

  000f5	85 f6		 test	 esi, esi
$LN90@equal:
  000f7	7e 4e		 jle	 SHORT $LN52@equal

; 1922 : 			{
; 1923 : 			_STL_VERIFY(_Size - _Idx >= static_cast<size_t>(_Off),

  000f9	b8 09 00 00 00	 mov	 eax, 9
  000fe	2b 45 1c	 sub	 eax, DWORD PTR __First2$[ebp+12]
  00101	3b c6		 cmp	 eax, esi
  00103	73 42		 jae	 SHORT $LN52@equal
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0010f	6a 00		 push	 0
  00111	68 84 07 00 00	 push	 1924			; 00000784H
  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0011b	6a 02		 push	 2
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00123	83 c4 18	 add	 esp, 24			; 00000018H
  00126	83 f8 01	 cmp	 eax, 1
  00129	75 01		 jne	 SHORT $LN69@equal
  0012b	cc		 int	 3
$LN69@equal:
  0012c	6a 00		 push	 0
  0012e	68 84 07 00 00	 push	 1924			; 00000784H
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  00142	ff d3		 call	 ebx
  00144	83 c4 14	 add	 esp, 20			; 00000014H
$LN52@equal:

; 2002 : 		return (_Ptr + _Idx);

  00147	8b 4d 18	 mov	 ecx, DWORD PTR __First2$[ebp+8]
  0014a	8b 45 1c	 mov	 eax, DWORD PTR __First2$[ebp+12]
  0014d	03 c8		 add	 ecx, eax

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0014f	83 ee 04	 sub	 esi, 4
  00152	72 11		 jb	 SHORT $LN84@equal
$LL85@equal:
  00154	8b 07		 mov	 eax, DWORD PTR [edi]
  00156	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00158	75 10		 jne	 SHORT $LN83@equal
  0015a	83 c7 04	 add	 edi, 4
  0015d	83 c1 04	 add	 ecx, 4
  00160	83 ee 04	 sub	 esi, 4
  00163	73 ef		 jae	 SHORT $LL85@equal
$LN84@equal:
  00165	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00168	74 34		 je	 SHORT $LN82@equal
$LN83@equal:
  0016a	8a 07		 mov	 al, BYTE PTR [edi]
  0016c	3a 01		 cmp	 al, BYTE PTR [ecx]
  0016e	75 27		 jne	 SHORT $LN86@equal
  00170	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00173	74 29		 je	 SHORT $LN82@equal
  00175	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00178	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  0017b	75 1a		 jne	 SHORT $LN86@equal
  0017d	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00180	74 1c		 je	 SHORT $LN82@equal
  00182	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  00185	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00188	75 0d		 jne	 SHORT $LN86@equal
  0018a	83 fe ff	 cmp	 esi, -1
  0018d	74 0f		 je	 SHORT $LN82@equal
  0018f	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  00192	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00195	74 07		 je	 SHORT $LN82@equal
$LN86@equal:
  00197	5f		 pop	 edi

; 3121 : 	_Adl_verify_range(_First1, _Last1);
; 3122 : 	const auto _UFirst1 = _Get_unwrapped(_First1);
; 3123 : 	const auto _ULast1 = _Get_unwrapped(_Last1);
; 3124 : 	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
; 3125 : 	return (_Equal_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred)));
; 3126 : 	}

  00198	5e		 pop	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00199	32 c0		 xor	 al, al

; 3121 : 	_Adl_verify_range(_First1, _Last1);
; 3122 : 	const auto _UFirst1 = _Get_unwrapped(_First1);
; 3123 : 	const auto _ULast1 = _Get_unwrapped(_Last1);
; 3124 : 	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
; 3125 : 	return (_Equal_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred)));
; 3126 : 	}

  0019b	5b		 pop	 ebx
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
$LN82@equal:
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  001a0	b0 01		 mov	 al, 1

; 3121 : 	_Adl_verify_range(_First1, _Last1);
; 3122 : 	const auto _UFirst1 = _Get_unwrapped(_First1);
; 3123 : 	const auto _ULast1 = _Get_unwrapped(_Last1);
; 3124 : 	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
; 3125 : 	return (_Equal_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred)));
; 3126 : 	}

  001a2	5b		 pop	 ebx
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
??$equal@PBDV?$_Array_iterator@$$CBD$08@std@@U?$equal_to@X@2@@std@@YA_NQBD0V?$_Array_iterator@$$CBD$08@0@U?$equal_to@X@0@@Z ENDP ; std::equal<char const *,std::_Array_iterator<char const ,9>,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Unwrapped@?$_Array_iterator@$$CBD$08@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Unwrapped@?$_Array_iterator@$$CBD$08@std@@QBEPBDXZ PROC ; std::_Array_iterator<char const ,9>::_Unwrapped, COMDAT
; _this$ = ecx

; 2002 : 		return (_Ptr + _Idx);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 2139 : 		return (const_cast<pointer>(_Mybase::_Unwrapped()));
; 2140 : 		}

  00006	c3		 ret	 0
?_Unwrapped@?$_Array_iterator@$$CBD$08@std@@QBEPBDXZ ENDP ; std::_Array_iterator<char const ,9>::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Array_iterator@$$CBD$08@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Off$ = 12						; size = 4
??0?$_Array_iterator@$$CBD$08@std@@QAE@PBDI@Z PROC	; std::_Array_iterator<char const ,9>::_Array_iterator<char const ,9>, COMDAT
; _this$ = ecx

; 2063 : 		{	// construct with pointer and offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1860 : 		: _Ptr(_Parg),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1861 : 		_Idx(_Off)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 2064 : 		}

  0000f	8b c1		 mov	 eax, ecx
  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00017	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
??0?$_Array_iterator@$$CBD$08@std@@QAE@PBDI@Z ENDP	; std::_Array_iterator<char const ,9>::_Array_iterator<char const ,9>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Unwrapped@?$_Array_const_iterator@$$CBD$08@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Unwrapped@?$_Array_const_iterator@$$CBD$08@std@@QBEPBDXZ PROC ; std::_Array_const_iterator<char const ,9>::_Unwrapped, COMDAT
; _this$ = ecx

; 2002 : 		return (_Ptr + _Idx);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 2003 : 		}

  00006	c3		 ret	 0
?_Unwrapped@?$_Array_const_iterator@$$CBD$08@std@@QBEPBDXZ ENDP ; std::_Array_const_iterator<char const ,9>::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Verify_offset@?$_Array_const_iterator@$$CBD$08@std@@QBEXH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Verify_offset@?$_Array_const_iterator@$$CBD$08@std@@QBEXH@Z PROC ; std::_Array_const_iterator<char const ,9>::_Verify_offset, COMDAT
; _this$ = ecx

; 1908 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1909 : 		if (_Off != 0)

  00005	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___CrtDbgReport
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR __Off$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00012	57		 push	 edi
  00013	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___invalid_parameter
  00019	85 f6		 test	 esi, esi
  0001b	74 49		 je	 SHORT $LN33@Verify_off

; 1910 : 			{
; 1911 : 			_STL_VERIFY(_Ptr, "cannot seek value-initialized array iterator");

  0001d	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00021	75 41		 jne	 SHORT $LN3@Verify_off
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 77 07 00 00	 push	 1911			; 00000777H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff d3		 call	 ebx
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	83 f8 01	 cmp	 eax, 1
  00043	75 01		 jne	 SHORT $LN30@Verify_off
  00045	cc		 int	 3
$LN30@Verify_off:
  00046	6a 00		 push	 0
  00048	68 77 07 00 00	 push	 1911			; 00000777H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
  0005c	ff d7		 call	 edi
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00061	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@Verify_off:

; 1912 : 			}
; 1913 : 
; 1914 : 		if (_Off < 0)

  00064	85 f6		 test	 esi, esi
$LN33@Verify_off:
  00066	79 4a		 jns	 SHORT $LN9@Verify_off

; 1915 : 			{
; 1916 : #pragma warning(suppress: 4146)	// unary minus operator applied to unsigned type, result still unsigned
; 1917 : 			_STL_VERIFY(_Idx >= -static_cast<size_t>(_Off),

  00068	8b c6		 mov	 eax, esi
  0006a	f7 d8		 neg	 eax
  0006c	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  0006f	73 41		 jae	 SHORT $LN9@Verify_off
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0007b	6a 00		 push	 0
  0007d	68 7e 07 00 00	 push	 1918			; 0000077eH
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00087	6a 02		 push	 2
  00089	ff d3		 call	 ebx
  0008b	83 c4 18	 add	 esp, 24			; 00000018H
  0008e	83 f8 01	 cmp	 eax, 1
  00091	75 01		 jne	 SHORT $LN31@Verify_off
  00093	cc		 int	 3
$LN31@Verify_off:
  00094	6a 00		 push	 0
  00096	68 7e 07 00 00	 push	 1918			; 0000077eH
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  000aa	ff d7		 call	 edi
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	83 c4 14	 add	 esp, 20			; 00000014H
$LN9@Verify_off:

; 1918 : 				"cannot seek array iterator before begin");
; 1919 : 			}
; 1920 : 
; 1921 : 		if (_Off > 0)

  000b2	85 f6		 test	 esi, esi
  000b4	7e 4a		 jle	 SHORT $LN15@Verify_off

; 1922 : 			{
; 1923 : 			_STL_VERIFY(_Size - _Idx >= static_cast<size_t>(_Off),

  000b6	b8 09 00 00 00	 mov	 eax, 9
  000bb	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  000be	3b c6		 cmp	 eax, esi
  000c0	73 3e		 jae	 SHORT $LN15@Verify_off
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000cc	6a 00		 push	 0
  000ce	68 84 07 00 00	 push	 1924			; 00000784H
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000d8	6a 02		 push	 2
  000da	ff d3		 call	 ebx
  000dc	83 c4 18	 add	 esp, 24			; 00000018H
  000df	83 f8 01	 cmp	 eax, 1
  000e2	75 01		 jne	 SHORT $LN32@Verify_off
  000e4	cc		 int	 3
$LN32@Verify_off:
  000e5	6a 00		 push	 0
  000e7	68 84 07 00 00	 push	 1924			; 00000784H
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  000fb	ff d7		 call	 edi
  000fd	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@Verify_off:

; 1924 : 				"cannot seek array iterator after end");
; 1925 : 			}
; 1926 : 		}

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 04 00	 ret	 4
?_Verify_offset@?$_Array_const_iterator@$$CBD$08@std@@QBEXH@Z ENDP ; std::_Array_const_iterator<char const ,9>::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Array_const_iterator@$$CBD$08@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Off$ = 12						; size = 4
??0?$_Array_const_iterator@$$CBD$08@std@@QAE@PBDI@Z PROC ; std::_Array_const_iterator<char const ,9>::_Array_const_iterator<char const ,9>, COMDAT
; _this$ = ecx

; 1862 : 		{	// construct with pointer and offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1860 : 		: _Ptr(_Parg),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1861 : 		_Idx(_Off)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1863 : 		}

  0000f	8b c1		 mov	 eax, ecx
  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00017	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
??0?$_Array_const_iterator@$$CBD$08@std@@QAE@PBDI@Z ENDP ; std::_Array_const_iterator<char const ,9>::_Array_const_iterator<char const ,9>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__First2$ = 32						; size = 4
__Lock$3 = 36						; size = 4
__Lock$4 = 36						; size = 4
__Lock$5 = 36						; size = 4
__Last2$ = 36						; size = 4
___formal$ = 40						; size = 1
??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Replace_range<char const *>, COMDAT
; _this$ = ecx

; 3055 : 		{	// replace [_First, _Last) with [_First2, _Last2), pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002a	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0002e	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 3078 : 		{	// return iterator for beginning of immutable sequence

  00031	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 1815 : 		if (_Large_string_engaged())

  00038	72 02		 jb	 SHORT $LN21@Replace_ra
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN21@Replace_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3080 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));

  0003c	57		 push	 edi
  0003d	50		 push	 eax
  0003e	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00041	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1546 : 		_Compat(_Right);

  00046	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  00049	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1546 : 		_Compat(_Right);

  0004d	50		 push	 eax
  0004e	8d 4d 14	 lea	 ecx, DWORD PTR __Last$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 1547 : 		return (_Ptr - _Right._Ptr);

  00056	8b 75 1c	 mov	 esi, DWORD PTR __Last$[ebp+8]

; 1546 : 		_Compat(_Right);

  00059	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]

; 1547 : 		return (_Ptr - _Right._Ptr);

  0005c	2b 75 10	 sub	 esi, DWORD PTR __First$[ebp+8]

; 1546 : 		_Compat(_Right);

  0005f	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  00068	8b 4d 20	 mov	 ecx, DWORD PTR __First2$[ebp]
  0006b	8b 45 24	 mov	 eax, DWORD PTR __Last2$[ebp]

; 1547 : 		return (_Ptr - _Right._Ptr);

  0006e	8b 55 10	 mov	 edx, DWORD PTR __First$[ebp+8]

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  00071	2b c1		 sub	 eax, ecx

; 1547 : 		return (_Ptr - _Right._Ptr);

  00073	2b 55 f0	 sub	 edx, DWORD PTR $T2[ebp+8]

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  00076	50		 push	 eax
  00077	51		 push	 ecx
  00078	56		 push	 esi
  00079	52		 push	 edx
  0007a	8b cf		 mov	 ecx, edi
  0007c	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
  00081	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00083	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00089	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0008c	6a 03		 push	 3
  0008e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00092	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00094	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00097	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0009c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a2	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  000a5	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000a7	6a 03		 push	 3
  000a9	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  000ac	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000b0	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  000b2	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  000b5	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  000ba	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  000bd	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000bf	6a 03		 push	 3
  000c1	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000c4	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  000cb	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  000cd	8d 4d 14	 lea	 ecx, DWORD PTR __Last$[ebp]
  000d0	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  000d5	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000d8	ff d6		 call	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  000da	8b c3		 mov	 eax, ebx

; 3057 : 			_First2, static_cast<size_type>(_Last2 - _First2)));
; 3058 : 		}

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 24 00	 ret	 36			; 00000024H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Last$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z$2:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Replace_range@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1U?$integral_constant@_N$00@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Replace_range<char const *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00008	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1785 : 		_Myres(0)

  0000f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Find_unchecked1@PBDD@std@@YAPBDPBDQBDABDU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Find_unchecked1@PBDD@std@@YAPBDPBDQBDABDU?$integral_constant@_N$00@0@@Z PROC ; std::_Find_unchecked1<char const *,char>, COMDAT

; 3504 : 	{	// find first byte matching integral _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3505 : 	if (!_Within_limits(_First, _Val))
; 3506 : 		{
; 3507 : 		return (_Last);
; 3508 : 		}
; 3509 : 
; 3510 : 	_First = static_cast<_InIt>(_CSTD memchr(

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	8b c6		 mov	 eax, esi
  0000c	2b c2		 sub	 eax, edx
  0000e	50		 push	 eax
  0000f	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00012	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00015	51		 push	 ecx
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memchr
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3511 : 		_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
; 3512 : 	return (_First ? _First : _Last);

  0001f	85 c0		 test	 eax, eax
  00021	0f 45 f0	 cmovne	 esi, eax
  00024	8b c6		 mov	 eax, esi

; 3513 : 	}

  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Find_unchecked1@PBDD@std@@YAPBDPBDQBDABDU?$integral_constant@_N$00@0@@Z ENDP ; std::_Find_unchecked1<char const *,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$_Search_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YAPBDPBDQBD11U?$equal_to@X@0@Urandom_access_iterator_tag@0@3@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last_possible$1$ = 20					; size = 4
__Last2$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Search_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YAPBDPBDQBD11U?$equal_to@X@0@Urandom_access_iterator_tag@0@3@Z PROC ; std::_Search_unchecked<char const *,char const *,std::equal_to<void> >, COMDAT

; 936  : 	{	// find first [_First2, _Last2) satisfying _Pred, random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 937  : 	_Iter_diff_t<_FwdItPat> _Count2 = _Last2 - _First2;
; 938  : 	if (_Last1 - _First1 >= _Count2)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 55 10	 mov	 edx, DWORD PTR __First2$[ebp]
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR __Last2$[ebp]
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __First1$[ebp]
  00014	2b da		 sub	 ebx, edx
  00016	2b c7		 sub	 eax, edi
  00018	3b c3		 cmp	 eax, ebx
  0001a	0f 8c bf 00 00
	00		 jl	 $LN17@Search_unc

; 939  : 		{
; 940  : 		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);

  00020	2b cb		 sub	 ecx, ebx

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00022	8b f3		 mov	 esi, ebx

; 939  : 		{
; 940  : 		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);

  00024	89 4d 14	 mov	 DWORD PTR __Last_possible$1$[ebp], ecx

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00027	8b cf		 mov	 ecx, edi
  00029	83 ee 04	 sub	 esi, 4
  0002c	72 13		 jb	 SHORT $LN23@Search_unc
  0002e	66 90		 npad	 2
$LL24@Search_unc:
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	3b 02		 cmp	 eax, DWORD PTR [edx]
  00034	75 10		 jne	 SHORT $LN22@Search_unc
  00036	83 c1 04	 add	 ecx, 4
  00039	83 c2 04	 add	 edx, 4
  0003c	83 ee 04	 sub	 esi, 4
  0003f	73 ef		 jae	 SHORT $LL24@Search_unc
$LN23@Search_unc:
  00041	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN21@Search_unc
$LN22@Search_unc:
  00046	8a 01		 mov	 al, BYTE PTR [ecx]
  00048	3a 02		 cmp	 al, BYTE PTR [edx]
  0004a	75 27		 jne	 SHORT $LN25@Search_unc
  0004c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN21@Search_unc
  00051	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00054	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00057	75 1a		 jne	 SHORT $LN25@Search_unc
  00059	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN21@Search_unc
  0005e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00061	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00064	75 0d		 jne	 SHORT $LN25@Search_unc
  00066	83 fe ff	 cmp	 esi, -1
  00069	74 0f		 je	 SHORT $LN21@Search_unc
  0006b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0006e	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00071	74 07		 je	 SHORT $LN21@Search_unc
$LN25@Search_unc:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN26@Search_unc
$LN21@Search_unc:
  0007a	33 c0		 xor	 eax, eax
$LN26@Search_unc:
  0007c	85 c0		 test	 eax, eax

; 942  : 			{
; 943  : 			if (_Equal_rev_pred_unchecked(_First1, _First2, _Last2, _Pred))

  0007e	74 55		 je	 SHORT $LN27@Search_unc
$LL4@Search_unc:

; 946  : 				}
; 947  : 
; 948  : 			if (_First1 == _Last_possible)

  00080	3b 7d 14	 cmp	 edi, DWORD PTR __Last_possible$1$[ebp]
  00083	74 57		 je	 SHORT $LN31@Search_unc

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00085	8b 75 10	 mov	 esi, DWORD PTR __First2$[ebp]

; 941  : 		for (;; ++_First1)

  00088	47		 inc	 edi

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00089	8b c3		 mov	 eax, ebx
  0008b	8b d7		 mov	 edx, edi
  0008d	83 e8 04	 sub	 eax, 4
  00090	72 11		 jb	 SHORT $LN29@Search_unc
$LL30@Search_unc:
  00092	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00094	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00096	75 10		 jne	 SHORT $LN28@Search_unc
  00098	83 c2 04	 add	 edx, 4
  0009b	83 c6 04	 add	 esi, 4
  0009e	83 e8 04	 sub	 eax, 4
  000a1	73 ef		 jae	 SHORT $LL30@Search_unc
$LN29@Search_unc:
  000a3	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  000a6	74 2d		 je	 SHORT $LN27@Search_unc
$LN28@Search_unc:
  000a8	8a 0a		 mov	 cl, BYTE PTR [edx]
  000aa	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000ac	75 d2		 jne	 SHORT $LL4@Search_unc
  000ae	83 f8 fd	 cmp	 eax, -3			; fffffffdH
  000b1	74 22		 je	 SHORT $LN27@Search_unc
  000b3	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  000b6	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000b9	75 c5		 jne	 SHORT $LL4@Search_unc
  000bb	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  000be	74 15		 je	 SHORT $LN27@Search_unc
  000c0	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  000c3	3a 4e 02	 cmp	 cl, BYTE PTR [esi+2]
  000c6	75 b8		 jne	 SHORT $LL4@Search_unc
  000c8	83 f8 ff	 cmp	 eax, -1
  000cb	74 08		 je	 SHORT $LN27@Search_unc
  000cd	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  000d0	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  000d3	75 ab		 jne	 SHORT $LL4@Search_unc
$LN27@Search_unc:

; 944  : 				{
; 945  : 				return (_First1);

  000d5	8b c7		 mov	 eax, edi
  000d7	5f		 pop	 edi

; 949  : 				{
; 950  : 				break;
; 951  : 				}
; 952  : 			}
; 953  : 		}
; 954  : 
; 955  : 	return (_Last1);
; 956  : 	}

  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN31@Search_unc:

; 946  : 				}
; 947  : 
; 948  : 			if (_First1 == _Last_possible)

  000dc	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
$LN17@Search_unc:
  000df	5f		 pop	 edi

; 949  : 				{
; 950  : 				break;
; 951  : 				}
; 952  : 			}
; 953  : 		}
; 954  : 
; 955  : 	return (_Last1);
; 956  : 	}

  000e0	5e		 pop	 esi
  000e1	8b c1		 mov	 eax, ecx
  000e3	5b		 pop	 ebx
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??$_Search_unchecked@PBDPBDU?$equal_to@X@std@@@std@@YAPBDPBDQBD11U?$equal_to@X@0@Urandom_access_iterator_tag@0@3@Z ENDP ; std::_Search_unchecked<char const *,char const *,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Pass_fn@U?$equal_to@X@std@@$0A@@std@@YA?AU?$equal_to@X@0@U10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??$_Pass_fn@U?$equal_to@X@std@@$0A@@std@@YA?AU?$equal_to@X@0@U10@@Z PROC ; std::_Pass_fn<std::equal_to<void>,0>, COMDAT

; 380  : 	{	// pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 	return (_Val);

  00003	8a 45 08	 mov	 al, BYTE PTR __Val$[ebp]

; 382  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Pass_fn@U?$equal_to@X@std@@$0A@@std@@YA?AU?$equal_to@X@0@U10@@Z ENDP ; std::_Pass_fn<std::equal_to<void>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT

; 25   : 	{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Left_size$[ebp]
  00006	3b 4d 14	 cmp	 ecx, DWORD PTR __Right_size$[ebp]
  00009	75 61		 jne	 SHORT $LN3@Traits_equ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 455  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  0000b	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]
  00012	83 e9 04	 sub	 ecx, 4
  00015	72 11		 jb	 SHORT $LN9@Traits_equ
$LL10@Traits_equ:
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	3b 06		 cmp	 eax, DWORD PTR [esi]
  0001b	75 10		 jne	 SHORT $LN8@Traits_equ
  0001d	83 c2 04	 add	 edx, 4
  00020	83 c6 04	 add	 esi, 4
  00023	83 e9 04	 sub	 ecx, 4
  00026	73 ef		 jae	 SHORT $LL10@Traits_equ
$LN9@Traits_equ:
  00028	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  0002b	74 34		 je	 SHORT $LN7@Traits_equ
$LN8@Traits_equ:
  0002d	8a 02		 mov	 al, BYTE PTR [edx]
  0002f	3a 06		 cmp	 al, BYTE PTR [esi]
  00031	75 27		 jne	 SHORT $LN11@Traits_equ
  00033	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00036	74 29		 je	 SHORT $LN7@Traits_equ
  00038	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0003b	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0003e	75 1a		 jne	 SHORT $LN11@Traits_equ
  00040	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00043	74 1c		 je	 SHORT $LN7@Traits_equ
  00045	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00048	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  0004b	75 0d		 jne	 SHORT $LN11@Traits_equ
  0004d	83 f9 ff	 cmp	 ecx, -1
  00050	74 0f		 je	 SHORT $LN7@Traits_equ
  00052	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00055	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00058	74 07		 je	 SHORT $LN7@Traits_equ
$LN11@Traits_equ:
  0005a	1b c0		 sbb	 eax, eax
  0005c	83 c8 01	 or	 eax, 1
  0005f	eb 02		 jmp	 SHORT $LN12@Traits_equ
$LN7@Traits_equ:
  00061	33 c0		 xor	 eax, eax
$LN12@Traits_equ:
  00063	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00064	85 c0		 test	 eax, eax
  00066	75 04		 jne	 SHORT $LN3@Traits_equ
  00068	b0 01		 mov	 al, 1

; 27   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN3@Traits_equ:

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  0006c	32 c0		 xor	 al, al

; 27   : 	}

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> * &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]

; 94   : 	if (_Block_size <= _Bytes)

  00006	83 ca ff	 or	 edx, -1
  00009	56		 push	 esi
  0000a	8d 48 27	 lea	 ecx, DWORD PTR [eax+39]
  0000d	3b c8		 cmp	 ecx, eax
  0000f	0f 46 ca	 cmovbe	 ecx, edx

; 52   : 		return (::operator new(_Bytes));

  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);
; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00018	8b f0		 mov	 esi, eax

; 52   : 		return (::operator new(_Bytes));

  0001a	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0001d	85 f6		 test	 esi, esi
  0001f	75 3f		 jne	 SHORT $LN6@Allocate_m
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002b	50		 push	 eax
  0002c	6a 65		 push	 101			; 00000065H
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00033	6a 02		 push	 2
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	83 f8 01	 cmp	 eax, 1
  00041	75 01		 jne	 SHORT $LN12@Allocate_m
  00043	cc		 int	 3
$LN12@Allocate_m:
  00044	6a 00		 push	 0
  00046	6a 65		 push	 101			; 00000065H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@Allocate_m:

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00060	8d 46 27	 lea	 eax, DWORD PTR [esi+39]
  00063	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00066	89 70 fc	 mov	 DWORD PTR [eax-4], esi

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  00069	c7 40 f8 fa fa
	fa fa		 mov	 DWORD PTR [eax-8], -84215046 ; fafafafaH

; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);

  00070	5e		 pop	 esi

; 110  : 	}

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 1076 : 	}

  00000	c3		 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00008	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1785 : 		_Myres(0)

  0000f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -60						; size = 12
$T3 = -48						; size = 12
$T4 = -48						; size = 12
__Where$ = -36						; size = 12
__Lock$5 = -24						; size = 4
__Lock$6 = -24						; size = 4
$T7 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Lock$10 = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
tv852 = 12						; size = 4
_this$1$ = 12						; size = 4
__Lock$11 = 12						; size = 4
__Lock$12 = 12						; size = 4
__Keyval$ = 12						; size = 4
$T13 = 15						; size = 1
??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 227  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T8[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1481 : 		return (iterator(_Lbound(_Keyval), _STD addressof(this->_Get_data())));

  00031	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 326  : 		: _Mybase(_Pnode, _Plist)

  0003a	56		 push	 esi
  0003b	50		 push	 eax
  0003c	8d 4d dc	 lea	 ecx, DWORD PTR __Where$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
  00044	56		 push	 esi
  00045	ff 76 04	 push	 DWORD PTR [esi+4]
  00048	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]

; 1197 : 		{	// return iterator for end of mutable sequence

  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 326  : 		: _Mybase(_Pnode, _Plist)

  00052	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 230  : 			|| _DEBUG_LT_PRED(_Mybase::_Getcomp(),

  00057	8d 45 d0	 lea	 eax, DWORD PTR $T4[ebp]
  0005a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005e	50		 push	 eax
  0005f	8d 4d dc	 lea	 ecx, DWORD PTR __Where$[ebp]
  00062	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR $T8[ebp], 5
  00069	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  0006e	84 c0		 test	 al, al
  00070	75 19		 jne	 SHORT $LN5@Try_emplac

; 71   : 		return (_Val.first);

  00072	8b 45 e4	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00075	83 c0 10	 add	 eax, 16			; 00000010H

; 230  : 			|| _DEBUG_LT_PRED(_Mybase::_Getcomp(),

  00078	50		 push	 eax
  00079	53		 push	 ebx
  0007a	56		 push	 esi
  0007b	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NAAUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	c6 45 f3 00	 mov	 BYTE PTR $T9[ebp], 0
  00087	84 c0		 test	 al, al
  00089	74 04		 je	 SHORT $LN6@Try_emplac
$LN5@Try_emplac:
  0008b	c6 45 f3 01	 mov	 BYTE PTR $T9[ebp], 1
$LN6@Try_emplac:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0008f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00095	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00098	6a 03		 push	 3
  0009a	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000a1	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  000a3	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  000a6	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  000ab	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000b1	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  000b4	ff d3		 call	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 230  : 			|| _DEBUG_LT_PRED(_Mybase::_Getcomp(),

  000b6	80 7d f3 00	 cmp	 BYTE PTR $T9[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  000ba	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR $T8[ebp], 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 230  : 			|| _DEBUG_LT_PRED(_Mybase::_Getcomp(),

  000c1	0f 84 09 01 00
	00		 je	 $LN2@Try_emplac
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple

; 236  : 		: _Val(_STD forward<_Other>(_Arg))

  000c7	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000ca	89 45 e8	 mov	 DWORD PTR $T7[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  000cd	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  000d4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  000db	8b 45 dc	 mov	 eax, DWORD PTR __Where$[ebp]
  000de	85 c0		 test	 eax, eax
  000e0	74 0a		 je	 SHORT $LN99@Try_emplac

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  000e2	ff 30		 push	 DWORD PTR [eax]
  000e4	8d 4d d0	 lea	 ecx, DWORD PTR $T3[ebp]
  000e7	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN99@Try_emplac:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 232  : 			return (_Pairib(

  000ec	8b 45 e4	 mov	 eax, DWORD PTR __Where$[ebp+8]
  000ef	89 45 d8	 mov	 DWORD PTR $T3[ebp+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  000f2	8d 45 0f	 lea	 eax, DWORD PTR $T13[ebp]
  000f5	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000f9	50		 push	 eax
  000fa	8d 45 e8	 lea	 eax, DWORD PTR $T7[ebp]
  000fd	8b ce		 mov	 ecx, esi
  000ff	50		 push	 eax
  00100	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  00105	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  0010a	50		 push	 eax
  0010b	83 c0 10	 add	 eax, 16			; 00000010H
  0010e	50		 push	 eax
  0010f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00112	8b c4		 mov	 eax, esp
  00114	89 45 0c	 mov	 DWORD PTR _this$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00117	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0011d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00124	8b 4d d0	 mov	 ecx, DWORD PTR $T3[ebp]
  00127	85 c9		 test	 ecx, ecx
  00129	74 09		 je	 SHORT $LN125@Try_emplac

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0012b	ff 31		 push	 DWORD PTR [ecx]
  0012d	8b c8		 mov	 ecx, eax
  0012f	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN125@Try_emplac:
  00134	8b 4d 0c	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00137	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp+8]

; 132  : 				}
; 133  : 			}
; 134  : 
; 135  : 		return (*this);
; 136  : 		}

  0013a	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0013e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  00141	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00144	50		 push	 eax
  00145	8b ce		 mov	 ecx, esi
  00147	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Insert_hint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
  0014c	89 45 0c	 mov	 DWORD PTR tv852[ebp], eax
  0014f	c7 45 ec 0c 00
	00 00		 mov	 DWORD PTR $T8[ebp], 12	; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00156	6a 03		 push	 3
  00158	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0015b	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0015f	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00161	8d 4d d0	 lea	 ecx, DWORD PTR $T3[ebp]
  00164	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00169	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0016c	ff d3		 call	 ebx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0016e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00171	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00177	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0017e	8b 45 0c	 mov	 eax, DWORD PTR tv852[ebp]
  00181	8b 00		 mov	 eax, DWORD PTR [eax]
  00183	85 c0		 test	 eax, eax
  00185	74 09		 je	 SHORT $LN156@Try_emplac

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00187	ff 30		 push	 DWORD PTR [eax]
  00189	8b ce		 mov	 ecx, esi
  0018b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN156@Try_emplac:
  00190	8b 45 0c	 mov	 eax, DWORD PTR tv852[ebp]
  00193	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00196	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

  00199	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0019d	6a 03		 push	 3
  0019f	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$12[ebp]
  001a2	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  001a6	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  001a8	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  001ab	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  001b0	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$12[ebp]
  001b3	ff d3		 call	 ebx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  001b5	6a 03		 push	 3
  001b7	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$11[ebp]
  001ba	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  001c1	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  001c3	8d 4d dc	 lea	 ecx, DWORD PTR __Where$[ebp]
  001c6	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  001cb	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$11[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 232  : 			return (_Pairib(

  001ce	eb 43		 jmp	 SHORT $LN222@Try_emplac
$LN2@Try_emplac:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  001d0	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  001d3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  001d9	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  001e0	8b 45 dc	 mov	 eax, DWORD PTR __Where$[ebp]
  001e3	85 c0		 test	 eax, eax
  001e5	74 09		 je	 SHORT $LN204@Try_emplac

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  001e7	ff 30		 push	 DWORD PTR [eax]
  001e9	8b ce		 mov	 ecx, esi
  001eb	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN204@Try_emplac:
  001f0	8b 45 e4	 mov	 eax, DWORD PTR __Where$[ebp+8]
  001f3	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 173  : 				second(_STD forward<_Other2>(_Val2))

  001f6	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  001fa	6a 03		 push	 3
  001fc	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$10[ebp]
  001ff	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00206	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00208	8d 4d dc	 lea	 ecx, DWORD PTR __Where$[ebp]
  0020b	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00210	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$10[ebp]
$LN222@Try_emplac:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 242  : 		}

  00213	ff d3		 call	 ebx
  00215	8b c6		 mov	 eax, esi
  00217	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0021a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00221	59		 pop	 ecx
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8b 45 ec	 mov	 eax, DWORD PTR $T8[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN9@Try_emplac
  00014	83 65 ec fe	 and	 DWORD PTR $T8[ebp], -2	; fffffffeH
  00018	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
$LN9@Try_emplac:
  00020	c3		 ret	 0
__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$18:
  00021	8b 45 ec	 mov	 eax, DWORD PTR $T8[ebp]
  00024	83 e0 08	 and	 eax, 8
  00027	0f 84 0c 00 00
	00		 je	 $LN107@Try_emplac
  0002d	83 65 ec f7	 and	 DWORD PTR $T8[ebp], -9	; fffffff7H
  00031	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
$LN107@Try_emplac:
  00039	c3		 ret	 0
__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$16:
  0003a	8d 4d d0	 lea	 ecx, DWORD PTR $T3[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00058	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$equal@PBD$$CBD$08U?$equal_to@X@std@@$0A@@std@@YA_NQBD0AAY08$$CBDU?$equal_to@X@0@@Z
_TEXT	SEGMENT
__First2$ = -16						; size = 16
$T1 = -16						; size = 16
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$equal@PBD$$CBD$08U?$equal_to@X@std@@$0A@@std@@YA_NQBD0AAY08$$CBDU?$equal_to@X@0@@Z PROC ; std::equal<char const *,char const ,9,std::equal_to<void>,0>, COMDAT

; 3135 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1860 : 		: _Ptr(_Parg),

  00006	8b 45 10	 mov	 eax, DWORD PTR __First2$[ebp]

; 3135 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

  00009	53		 push	 ebx

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0000a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter

; 1860 : 		: _Ptr(_Parg),

  00010	89 45 f8	 mov	 DWORD PTR $T1[ebp+8], eax

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport

; 3135 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

  00018	56		 push	 esi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00019	8b 75 0c	 mov	 esi, DWORD PTR __Last1$[ebp]
  0001c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00023	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+4], 0

; 1861 : 		_Idx(_Off)

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+12], 0

; 3136 : 	return (_STD equal(_First1, _Last1,

  00031	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00035	57		 push	 edi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00036	8b 7d 08	 mov	 edi, DWORD PTR __First1$[ebp]

; 3136 : 	return (_STD equal(_First1, _Last1,

  00039	0f 11 45 f0	 movups	 XMMWORD PTR __First2$[ebp], xmm0

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0003d	3b fe		 cmp	 edi, esi
  0003f	76 43		 jbe	 SHORT $LN22@equal
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004b	6a 00		 push	 0
  0004d	68 2f 02 00 00	 push	 559			; 0000022fH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00057	6a 02		 push	 2
  00059	ff d0		 call	 eax
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 01		 jne	 SHORT $LN27@equal
  00063	cc		 int	 3
$LN27@equal:
  00064	6a 00		 push	 0
  00066	68 2f 02 00 00	 push	 559			; 0000022fH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  0007a	ff d3		 call	 ebx
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  00081	83 c4 14	 add	 esp, 20			; 00000014H
$LN22@equal:

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00084	2b f7		 sub	 esi, edi

; 1909 : 		if (_Off != 0)

  00086	74 44		 je	 SHORT $LN50@equal

; 1910 : 			{
; 1911 : 			_STL_VERIFY(_Ptr, "cannot seek value-initialized array iterator");

  00088	83 7d f8 00	 cmp	 DWORD PTR __First2$[ebp+8], 0
  0008c	75 3e		 jne	 SHORT $LN50@equal
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00098	6a 00		 push	 0
  0009a	68 77 07 00 00	 push	 1911			; 00000777H
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000a4	6a 02		 push	 2
  000a6	ff d0		 call	 eax
  000a8	83 c4 18	 add	 esp, 24			; 00000018H
  000ab	83 f8 01	 cmp	 eax, 1
  000ae	75 01		 jne	 SHORT $LN77@equal
  000b0	cc		 int	 3
$LN77@equal:
  000b1	6a 00		 push	 0
  000b3	68 77 07 00 00	 push	 1911			; 00000777H
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
  000c7	ff d3		 call	 ebx
  000c9	83 c4 14	 add	 esp, 20			; 00000014H
$LN50@equal:

; 1912 : 			}
; 1913 : 
; 1914 : 		if (_Off < 0)

  000cc	85 f6		 test	 esi, esi
  000ce	79 4d		 jns	 SHORT $LN98@equal

; 1915 : 			{
; 1916 : #pragma warning(suppress: 4146)	// unary minus operator applied to unsigned type, result still unsigned
; 1917 : 			_STL_VERIFY(_Idx >= -static_cast<size_t>(_Off),

  000d0	8b c6		 mov	 eax, esi
  000d2	f7 d8		 neg	 eax
  000d4	39 45 fc	 cmp	 DWORD PTR __First2$[ebp+12], eax
  000d7	73 42		 jae	 SHORT $LN56@equal
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000e3	6a 00		 push	 0
  000e5	68 7e 07 00 00	 push	 1918			; 0000077eH
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000ef	6a 02		 push	 2
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000f7	83 c4 18	 add	 esp, 24			; 00000018H
  000fa	83 f8 01	 cmp	 eax, 1
  000fd	75 01		 jne	 SHORT $LN78@equal
  000ff	cc		 int	 3
$LN78@equal:
  00100	6a 00		 push	 0
  00102	68 7e 07 00 00	 push	 1918			; 0000077eH
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  00116	ff d3		 call	 ebx
  00118	83 c4 14	 add	 esp, 20			; 00000014H
$LN56@equal:

; 1918 : 				"cannot seek array iterator before begin");
; 1919 : 			}
; 1920 : 
; 1921 : 		if (_Off > 0)

  0011b	85 f6		 test	 esi, esi
$LN98@equal:
  0011d	7e 4e		 jle	 SHORT $LN62@equal

; 1922 : 			{
; 1923 : 			_STL_VERIFY(_Size - _Idx >= static_cast<size_t>(_Off),

  0011f	b8 09 00 00 00	 mov	 eax, 9
  00124	2b 45 fc	 sub	 eax, DWORD PTR __First2$[ebp+12]
  00127	3b c6		 cmp	 eax, esi
  00129	73 42		 jae	 SHORT $LN62@equal
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00135	6a 00		 push	 0
  00137	68 84 07 00 00	 push	 1924			; 00000784H
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00141	6a 02		 push	 2
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00149	83 c4 18	 add	 esp, 24			; 00000018H
  0014c	83 f8 01	 cmp	 eax, 1
  0014f	75 01		 jne	 SHORT $LN79@equal
  00151	cc		 int	 3
$LN79@equal:
  00152	6a 00		 push	 0
  00154	68 84 07 00 00	 push	 1924			; 00000784H
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  00168	ff d3		 call	 ebx
  0016a	83 c4 14	 add	 esp, 20			; 00000014H
$LN62@equal:

; 2002 : 		return (_Ptr + _Idx);

  0016d	8b 4d f8	 mov	 ecx, DWORD PTR __First2$[ebp+8]
  00170	8b 45 fc	 mov	 eax, DWORD PTR __First2$[ebp+12]
  00173	03 c8		 add	 ecx, eax

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00175	83 ee 04	 sub	 esi, 4
  00178	72 17		 jb	 SHORT $LN94@equal
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL95@equal:
  00180	8b 07		 mov	 eax, DWORD PTR [edi]
  00182	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00184	75 10		 jne	 SHORT $LN93@equal
  00186	83 c7 04	 add	 edi, 4
  00189	83 c1 04	 add	 ecx, 4
  0018c	83 ee 04	 sub	 esi, 4
  0018f	73 ef		 jae	 SHORT $LL95@equal
$LN94@equal:
  00191	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00194	74 36		 je	 SHORT $LN92@equal
$LN93@equal:
  00196	8a 07		 mov	 al, BYTE PTR [edi]
  00198	3a 01		 cmp	 al, BYTE PTR [ecx]
  0019a	75 27		 jne	 SHORT $LN96@equal
  0019c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0019f	74 2b		 je	 SHORT $LN92@equal
  001a1	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  001a4	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  001a7	75 1a		 jne	 SHORT $LN96@equal
  001a9	83 fe fe	 cmp	 esi, -2			; fffffffeH
  001ac	74 1e		 je	 SHORT $LN92@equal
  001ae	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  001b1	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  001b4	75 0d		 jne	 SHORT $LN96@equal
  001b6	83 fe ff	 cmp	 esi, -1
  001b9	74 11		 je	 SHORT $LN92@equal
  001bb	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  001be	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  001c1	74 09		 je	 SHORT $LN92@equal
$LN96@equal:
  001c3	5f		 pop	 edi

; 3137 : 		_Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred)));
; 3138 : 	}

  001c4	5e		 pop	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  001c5	32 c0		 xor	 al, al

; 3137 : 		_Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred)));
; 3138 : 	}

  001c7	5b		 pop	 ebx
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
$LN92@equal:
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  001ce	b0 01		 mov	 al, 1

; 3137 : 		_Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred)));
; 3138 : 	}

  001d0	5b		 pop	 ebx
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
??$equal@PBD$$CBD$08U?$equal_to@X@std@@$0A@@std@@YA_NQBD0AAY08$$CBDU?$equal_to@X@0@@Z ENDP ; std::equal<char const *,char const ,9,std::equal_to<void>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
$T3 = -40						; size = 12
$T4 = -28						; size = 12
__Lock$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Lock$6 = 32						; size = 4
__Lock$7 = 32						; size = 4
__Lock$8 = 32						; size = 4
__First2$ = 32						; size = 4
__Lock$9 = 36						; size = 4
__Last2$ = 36						; size = 4
??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace<char const *,void>, COMDAT
; _this$ = ecx

; 3064 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00031	8b 5d 24	 mov	 ebx, DWORD PTR __Last2$[ebp]
  00034	39 5d 20	 cmp	 DWORD PTR __First2$[ebp], ebx
  00037	76 46		 jbe	 SHORT $LN16@replace
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00043	6a 00		 push	 0
  00045	68 2f 02 00 00	 push	 559			; 0000022fH
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	6a 02		 push	 2
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00057	83 c4 18	 add	 esp, 24			; 00000018H
  0005a	83 f8 01	 cmp	 eax, 1
  0005d	75 01		 jne	 SHORT $LN21@replace
  0005f	cc		 int	 3
$LN21@replace:
  00060	6a 00		 push	 0
  00062	68 2f 02 00 00	 push	 559			; 0000022fH
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0007c	83 c4 14	 add	 esp, 20			; 00000014H
$LN16@replace:

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0007f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  00086	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0008d	8b 45 14	 mov	 eax, DWORD PTR __Last$[ebp]
  00090	85 c0		 test	 eax, eax
  00092	74 0a		 je	 SHORT $LN34@replace

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00094	ff 30		 push	 DWORD PTR [eax]
  00096	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00099	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN34@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3068 : 		return (_Replace_range(_First, _Last, _UFirst2, _ULast2, _Is_elem_cptr<decltype(_UFirst2)>()));

  0009e	8b 45 1c	 mov	 eax, DWORD PTR __Last$[ebp+8]
  000a1	89 45 e0	 mov	 DWORD PTR $T3[ebp+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  000a4	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
  000ab	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  000b2	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000b5	85 c0		 test	 eax, eax
  000b7	74 0a		 je	 SHORT $LN45@replace

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  000b9	ff 30		 push	 DWORD PTR [eax]
  000bb	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  000be	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN45@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3055 : 		{	// replace [_First, _Last) with [_First2, _Last2), pointers

  000c3	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp+8]
  000c6	89 45 ec	 mov	 DWORD PTR $T4[ebp+8], eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000c9	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000cd	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 3078 : 		{	// return iterator for beginning of immutable sequence

  000d0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 1815 : 		if (_Large_string_engaged())

  000d4	72 02		 jb	 SHORT $LN68@replace
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000d6	8b 00		 mov	 eax, DWORD PTR [eax]
$LN68@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3080 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));

  000d8	57		 push	 edi
  000d9	50		 push	 eax
  000da	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  000dd	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1546 : 		_Compat(_Right);

  000e2	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  000e5	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 1546 : 		_Compat(_Right);

  000e9	50		 push	 eax
  000ea	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000ed	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 1547 : 		return (_Ptr - _Right._Ptr);

  000f2	8b 75 e0	 mov	 esi, DWORD PTR $T3[ebp+8]

; 1546 : 		_Compat(_Right);

  000f5	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]

; 1547 : 		return (_Ptr - _Right._Ptr);

  000f8	2b 75 ec	 sub	 esi, DWORD PTR $T4[ebp+8]

; 1546 : 		_Compat(_Right);

  000fb	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  00104	8b 4d 20	 mov	 ecx, DWORD PTR __First2$[ebp]
  00107	2b d9		 sub	 ebx, ecx

; 1547 : 		return (_Ptr - _Right._Ptr);

  00109	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp+8]
  0010c	2b 45 d4	 sub	 eax, DWORD PTR $T2[ebp+8]

; 3056 : 		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),

  0010f	53		 push	 ebx
  00110	51		 push	 ecx
  00111	56		 push	 esi
  00112	50		 push	 eax
  00113	8b cf		 mov	 ecx, edi
  00115	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
  0011a	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0011c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00122	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00125	6a 03		 push	 3
  00127	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0012b	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  0012d	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00130	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00135	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0013b	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0013e	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00140	6a 03		 push	 3
  00142	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  00145	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00149	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  0014b	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  0014e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00153	8d 4d 24	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  00156	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00158	6a 03		 push	 3
  0015a	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0015d	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00161	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00163	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00166	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0016b	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0016e	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00170	6a 03		 push	 3
  00172	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00175	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00179	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  0017b	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  0017e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00183	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00186	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00188	6a 03		 push	 3
  0018a	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0018d	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00194	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00196	8d 4d 14	 lea	 ecx, DWORD PTR __Last$[ebp]
  00199	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0019e	8d 4d 20	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  001a1	ff d6		 call	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3068 : 		return (_Replace_range(_First, _Last, _UFirst2, _ULast2, _Is_elem_cptr<decltype(_UFirst2)>()));

  001a3	8b c3		 mov	 eax, ebx

; 3069 : 		}

  001a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001af	59		 pop	 ecx
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	5b		 pop	 ebx
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Last$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$8:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$9:
  00018	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z$10:
  00020	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z:
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace<char const *,void>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>, COMDAT
; _this$ = ecx

; 1943 : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0000b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00012	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001e	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00020	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 30		 mov	 DWORD PTR [eax], esi

; 1944 : 		_Alloc_proxy();
; 1945 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	c2 04 00	 ret	 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@$$CBD@std@@YAXAAPBDQBD@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@$$CBD@std@@YAXAAPBDQBD@Z PROC		; std::_Seek_wrapped<char const >, COMDAT

; 871  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 872  : 	_It = _UIt;

  00003	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __UIt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 873  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Seek_wrapped@$$CBD@std@@YAXAAPBDQBD@Z ENDP		; std::_Seek_wrapped<char const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Find_unchecked@PBDD@std@@YAPBDQBD0ABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Find_unchecked@PBDD@std@@YAPBDQBD0ABD@Z PROC	; std::_Find_unchecked<char const *,char>, COMDAT

; 3528 : 	{	// find first matching _Val; choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3510 : 	_First = static_cast<_InIt>(_CSTD memchr(

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 3528 : 	{	// find first matching _Val; choose optimization

  00006	56		 push	 esi

; 3510 : 	_First = static_cast<_InIt>(_CSTD memchr(

  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	8b c6		 mov	 eax, esi
  0000c	2b c1		 sub	 eax, ecx
  0000e	50		 push	 eax
  0000f	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00012	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _memchr
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3511 : 		_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
; 3512 : 	return (_First ? _First : _Last);

  0001f	85 c0		 test	 eax, eax
  00021	0f 45 f0	 cmovne	 esi, eax

; 3529 : 	// activate optimization for pointers to (const) bytes and integral values
; 3530 : 	using _Memchr_opt = bool_constant<is_integral_v<_Ty> && _Is_any_of_v<_InIt,
; 3531 : 		char *, signed char *, unsigned char *, const char *, const signed char *, const unsigned char *>>;
; 3532 : 
; 3533 : 	return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt{}));

  00024	8b c6		 mov	 eax, esi

; 3534 : 	}

  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Find_unchecked@PBDD@std@@YAPBDQBD0ABD@Z ENDP	; std::_Find_unchecked<char const *,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@$$CBD@std@@YAPBDQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@$$CBD@std@@YAPBDQBD@Z PROC		; std::_Get_unwrapped<char const >, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 663  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@$$CBD@std@@YAPBDQBD@Z ENDP		; std::_Get_unwrapped<char const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$search@PBDPBDU?$equal_to@X@std@@@std@@YAPBDPBDQBD11U?$equal_to@X@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last_possible$1$ = 20					; size = 4
__Last2$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$search@PBDPBDU?$equal_to@X@std@@@std@@YAPBDPBDQBD11U?$equal_to@X@0@@Z PROC ; std::search<char const *,char const *,std::equal_to<void> >, COMDAT

; 963  : 	{	// find first [_First2, _Last2) satisfying _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___CrtDbgReport
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm

; 963  : 	{	// find first [_First2, _Last2) satisfying _Pred

  0000a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0000b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___invalid_parameter
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm

; 963  : 	{	// find first [_First2, _Last2) satisfying _Pred

  00011	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00012	8b 7d 08	 mov	 edi, DWORD PTR __First1$[ebp]
  00015	3b 7d 0c	 cmp	 edi, DWORD PTR __Last1$[ebp]
  00018	76 3e		 jbe	 SHORT $LN12@search
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00024	6a 00		 push	 0
  00026	68 2f 02 00 00	 push	 559			; 0000022fH
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00030	6a 02		 push	 2
  00032	ff d3		 call	 ebx
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 01		 jne	 SHORT $LN17@search
  0003c	cc		 int	 3
$LN17@search:
  0003d	6a 00		 push	 0
  0003f	68 2f 02 00 00	 push	 559			; 0000022fH
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00053	ff d6		 call	 esi
  00055	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@search:
  00058	8b 55 10	 mov	 edx, DWORD PTR __First2$[ebp]
  0005b	3b 55 14	 cmp	 edx, DWORD PTR __Last2$[ebp]
  0005e	76 41		 jbe	 SHORT $LN27@search
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006a	6a 00		 push	 0
  0006c	68 2f 02 00 00	 push	 559			; 0000022fH
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00076	6a 02		 push	 2
  00078	ff d3		 call	 ebx
  0007a	83 c4 18	 add	 esp, 24			; 00000018H
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 01		 jne	 SHORT $LN32@search
  00082	cc		 int	 3
$LN32@search:
  00083	6a 00		 push	 0
  00085	68 2f 02 00 00	 push	 559			; 0000022fH
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00099	ff d6		 call	 esi
  0009b	8b 55 10	 mov	 edx, DWORD PTR __First2$[ebp]
  0009e	83 c4 14	 add	 esp, 20			; 00000014H
$LN27@search:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm

; 938  : 	if (_Last1 - _First1 >= _Count2)

  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
  000a4	8b c1		 mov	 eax, ecx
  000a6	8b 5d 14	 mov	 ebx, DWORD PTR __Last2$[ebp]
  000a9	2b c7		 sub	 eax, edi
  000ab	2b da		 sub	 ebx, edx
  000ad	3b c3		 cmp	 eax, ebx
  000af	0f 8c bd 00 00
	00		 jl	 $LN61@search

; 939  : 		{
; 940  : 		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);

  000b5	2b cb		 sub	 ecx, ebx

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  000b7	8b f3		 mov	 esi, ebx

; 940  : 		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);

  000b9	89 4d 14	 mov	 DWORD PTR __Last_possible$1$[ebp], ecx

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  000bc	8b cf		 mov	 ecx, edi
  000be	83 ee 04	 sub	 esi, 4
  000c1	72 11		 jb	 SHORT $LN67@search
$LL68@search:
  000c3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c5	3b 02		 cmp	 eax, DWORD PTR [edx]
  000c7	75 10		 jne	 SHORT $LN66@search
  000c9	83 c1 04	 add	 ecx, 4
  000cc	83 c2 04	 add	 edx, 4
  000cf	83 ee 04	 sub	 esi, 4
  000d2	73 ef		 jae	 SHORT $LL68@search
$LN67@search:
  000d4	83 fe fc	 cmp	 esi, -4			; fffffffcH
  000d7	74 34		 je	 SHORT $LN65@search
$LN66@search:
  000d9	8a 01		 mov	 al, BYTE PTR [ecx]
  000db	3a 02		 cmp	 al, BYTE PTR [edx]
  000dd	75 27		 jne	 SHORT $LN69@search
  000df	83 fe fd	 cmp	 esi, -3			; fffffffdH
  000e2	74 29		 je	 SHORT $LN65@search
  000e4	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000e7	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  000ea	75 1a		 jne	 SHORT $LN69@search
  000ec	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000ef	74 1c		 je	 SHORT $LN65@search
  000f1	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  000f4	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  000f7	75 0d		 jne	 SHORT $LN69@search
  000f9	83 fe ff	 cmp	 esi, -1
  000fc	74 0f		 je	 SHORT $LN65@search
  000fe	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00101	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00104	74 07		 je	 SHORT $LN65@search
$LN69@search:
  00106	1b c0		 sbb	 eax, eax
  00108	83 c8 01	 or	 eax, 1
  0010b	eb 02		 jmp	 SHORT $LN70@search
$LN65@search:
  0010d	33 c0		 xor	 eax, eax
$LN70@search:
  0010f	85 c0		 test	 eax, eax

; 943  : 			if (_Equal_rev_pred_unchecked(_First1, _First2, _Last2, _Pred))

  00111	74 55		 je	 SHORT $LN71@search
$LL46@search:

; 944  : 				{
; 945  : 				return (_First1);
; 946  : 				}
; 947  : 
; 948  : 			if (_First1 == _Last_possible)

  00113	3b 7d 14	 cmp	 edi, DWORD PTR __Last_possible$1$[ebp]
  00116	74 57		 je	 SHORT $LN75@search

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00118	8b 75 10	 mov	 esi, DWORD PTR __First2$[ebp]

; 941  : 		for (;; ++_First1)

  0011b	47		 inc	 edi

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0011c	8b cb		 mov	 ecx, ebx
  0011e	8b d7		 mov	 edx, edi
  00120	83 e9 04	 sub	 ecx, 4
  00123	72 11		 jb	 SHORT $LN73@search
$LL74@search:
  00125	8b 02		 mov	 eax, DWORD PTR [edx]
  00127	3b 06		 cmp	 eax, DWORD PTR [esi]
  00129	75 10		 jne	 SHORT $LN72@search
  0012b	83 c2 04	 add	 edx, 4
  0012e	83 c6 04	 add	 esi, 4
  00131	83 e9 04	 sub	 ecx, 4
  00134	73 ef		 jae	 SHORT $LL74@search
$LN73@search:
  00136	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00139	74 2d		 je	 SHORT $LN71@search
$LN72@search:
  0013b	8a 02		 mov	 al, BYTE PTR [edx]
  0013d	3a 06		 cmp	 al, BYTE PTR [esi]
  0013f	75 d2		 jne	 SHORT $LL46@search
  00141	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00144	74 22		 je	 SHORT $LN71@search
  00146	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00149	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0014c	75 c5		 jne	 SHORT $LL46@search
  0014e	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00151	74 15		 je	 SHORT $LN71@search
  00153	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00156	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00159	75 b8		 jne	 SHORT $LL46@search
  0015b	83 f9 ff	 cmp	 ecx, -1
  0015e	74 08		 je	 SHORT $LN71@search
  00160	8a 4a 03	 mov	 cl, BYTE PTR [edx+3]
  00163	3a 4e 03	 cmp	 cl, BYTE PTR [esi+3]
  00166	75 ab		 jne	 SHORT $LL46@search
$LN71@search:

; 964  : 	_Adl_verify_range(_First1, _Last1);
; 965  : 	_Adl_verify_range(_First2, _Last2);
; 966  : 	_Seek_wrapped(_First1,
; 967  : 		_Search_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
; 968  : 			_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
; 969  : 			_Iter_cat_t<_FwdItHaystack>(), _Iter_cat_t<_FwdItPat>()));
; 970  : 	return (_First1);

  00168	8b c7		 mov	 eax, edi
  0016a	5f		 pop	 edi

; 971  : 	}

  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
$LN75@search:

; 948  : 			if (_First1 == _Last_possible)

  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
$LN61@search:
  00172	5f		 pop	 edi

; 971  : 	}

  00173	5e		 pop	 esi
  00174	8b c1		 mov	 eax, ecx
  00176	5b		 pop	 ebx
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
??$search@PBDPBDU?$equal_to@X@std@@@std@@YAPBDPBDQBD11U?$equal_to@X@0@@Z ENDP ; std::search<char const *,char const *,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z PROC ; std::_Adl_verify_range1<char const *,char const *>, COMDAT

; 602  : 	{	// check that [_First, _Last) forms an iterator range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	76 46		 jbe	 SHORT $LN8@Adl_verify
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00019	6a 00		 push	 0
  0001b	68 2f 02 00 00	 push	 559			; 0000022fH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 18	 add	 esp, 24			; 00000018H
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 01		 jne	 SHORT $LN13@Adl_verify
  00035	cc		 int	 3
$LN13@Adl_verify:
  00036	6a 00		 push	 0
  00038	68 2f 02 00 00	 push	 559			; 0000022fH
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00052	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@Adl_verify:

; 603  : 	_Verify_range(_First, _Last);
; 604  : 	}

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Adl_verify_range1<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Verify_range@D@std@@YAXQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Verify_range@D@std@@YAXQBD0@Z PROC			; std::_Verify_range<char>, COMDAT

; 558  : 	{	// special case range verification for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	76 46		 jbe	 SHORT $LN6@Verify_ran
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00015	6a 00		 push	 0
  00017	68 2f 02 00 00	 push	 559			; 0000022fH
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00021	6a 02		 push	 2
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	83 f8 01	 cmp	 eax, 1
  0002f	75 01		 jne	 SHORT $LN11@Verify_ran
  00031	cc		 int	 3
$LN11@Verify_ran:
  00032	6a 00		 push	 0
  00034	68 2f 02 00 00	 push	 559			; 0000022fH
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@Verify_ran:

; 560  : 	}

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$_Verify_range@D@std@@YAXQBD0@Z ENDP			; std::_Verify_range<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0EI@@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0EI@@std@@YAII@Z PROC		; std::_Get_size_of_n<72>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]

; 26   : 	if (_Max_possible < _Count)

  00006	83 ca ff	 or	 edx, -1
  00009	8d 04 c9	 lea	 eax, DWORD PTR [ecx+ecx*8]
  0000c	c1 e0 03	 shl	 eax, 3
  0000f	81 f9 e3 38 8e
	03		 cmp	 ecx, 59652323		; 038e38e3H
  00015	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Get_size_of_n@$0EI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<72>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> * &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00003	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]

; 26   : 	if (_Max_possible < _Count)

  00006	83 ca ff	 or	 edx, -1
  00009	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  0000f	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00016	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 886  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00006	5d		 pop	 ebp
  00007	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00003	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax
  0000d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00010	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z PROC ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 70   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 71   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 72   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@@Z ENDP ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT

; 407  : 			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	6a 48		 push	 72			; 00000048H
  00005	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000d	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 415  : 			}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1212 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	6a 08		 push	 8
  00005	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000d	83 c4 08	 add	 esp, 8

; 1213 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);
; 1214 : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00012	83 c4 08	 add	 esp, 8

; 874  : 		}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 987  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 26   : 	if (_Max_possible < _Count)

  00006	83 ca ff	 or	 edx, -1
  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00015	0f 47 ca	 cmova	 ecx, edx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 998  : 		}

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAU10@@Z PROC ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@AAU10@@Z ENDP ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Bytes$[ebp]
  00008	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0000e	0f 82 b8 00 00
	00		 jb	 $LN24@Deallocate

; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
  0001a	83 c6 27	 add	 esi, 39			; 00000027H
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00021	81 7f f8 fa fa
	fa fa		 cmp	 DWORD PTR [edi-8], -84215046 ; fafafafaH
  00028	8b 5f fc	 mov	 ebx, DWORD PTR [edi-4]
  0002b	74 42		 je	 SHORT $LN9@Deallocate
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00037	6a 00		 push	 0
  00039	6a 7a		 push	 122			; 0000007aH
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00040	6a 02		 push	 2
  00042	ff d1		 call	 ecx
  00044	83 c4 18	 add	 esp, 24			; 00000018H
  00047	83 f8 01	 cmp	 eax, 1
  0004a	75 01		 jne	 SHORT $LN22@Deallocate
  0004c	cc		 int	 3
$LN22@Deallocate:
  0004d	6a 00		 push	 0
  0004f	6a 7a		 push	 122			; 0000007aH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
$LN9@Deallocate:

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006f	2b fb		 sub	 edi, ebx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00071	83 ff 08	 cmp	 edi, 8
  00074	72 05		 jb	 SHORT $LN16@Deallocate
  00076	83 ff 27	 cmp	 edi, 39			; 00000027H
  00079	76 42		 jbe	 SHORT $LN15@Deallocate
$LN16@Deallocate:
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00085	6a 00		 push	 0
  00087	68 84 00 00 00	 push	 132			; 00000084H
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00091	6a 02		 push	 2
  00093	ff d1		 call	 ecx
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	83 f8 01	 cmp	 eax, 1
  0009b	75 01		 jne	 SHORT $LN23@Deallocate
  0009d	cc		 int	 3
$LN23@Deallocate:
  0009e	6a 00		 push	 0
  000a0	68 84 00 00 00	 push	 132			; 00000084H
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ba	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@Deallocate:
  000bd	5f		 pop	 edi

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  000be	56		 push	 esi
  000bf	53		 push	 ebx
  000c0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c5	83 c4 08	 add	 esp, 8
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx

; 208  : 	}

  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
$LN24@Deallocate:

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000cc	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  000cf	56		 push	 esi
  000d0	53		 push	 ebx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d6	83 c4 08	 add	 esp, 8
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx

; 208  : 	}

  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 6d		 jb	 SHORT $LN2@Allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0000e	8d 41 27	 lea	 eax, DWORD PTR [ecx+39]

; 94   : 	if (_Block_size <= _Bytes)

  00011	83 ca ff	 or	 edx, -1
  00014	3b c1		 cmp	 eax, ecx
  00016	56		 push	 esi
  00017	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00020	8b f0		 mov	 esi, eax

; 52   : 		return (::operator new(_Bytes));

  00022	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00025	85 f6		 test	 esi, esi
  00027	75 3f		 jne	 SHORT $LN10@Allocate
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	50		 push	 eax
  00034	6a 65		 push	 101			; 00000065H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	6a 02		 push	 2
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00043	83 c4 18	 add	 esp, 24			; 00000018H
  00046	83 f8 01	 cmp	 eax, 1
  00049	75 01		 jne	 SHORT $LN16@Allocate
  0004b	cc		 int	 3
$LN16@Allocate:
  0004c	6a 00		 push	 0
  0004e	6a 65		 push	 101			; 00000065H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00065	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Allocate:

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00068	8d 46 27	 lea	 eax, DWORD PTR [esi+39]
  0006b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0006e	89 70 fc	 mov	 DWORD PTR [eax-4], esi

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  00071	c7 40 f8 fa fa
	fa fa		 mov	 DWORD PTR [eax-8], -84215046 ; fafafafaH

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00078	5e		 pop	 esi

; 194  : 	}

  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN2@Allocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN3@Allocate

; 52   : 		return (::operator new(_Bytes));

  0007f	89 4d 08	 mov	 DWORD PTR __Bytes$[ebp], ecx

; 194  : 	}

  00082	5d		 pop	 ebp

; 52   : 		return (::operator new(_Bytes));

  00083	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));
; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00088	33 c0		 xor	 eax, eax

; 194  : 	}

  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00003	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z
_TEXT	SEGMENT
tv425 = -12						; size = 4
__New_size$1$ = -12					; size = 4
tv426 = -8						; size = 4
__Old$1$ = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
tv427 = 20						; size = 4
_<_Args_1>$ = 20					; size = 1
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Size_increase$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00018	2b c3		 sub	 eax, ebx
  0001a	3b c2		 cmp	 eax, edx
  0001c	0f 82 d9 00 00
	00		 jb	 $LN88@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00022	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00025	03 d3		 add	 edx, ebx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00027	8b f2		 mov	 esi, edx

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00029	89 55 f4	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002c	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0002f	89 45 fc	 mov	 DWORD PTR __Old$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00032	3b f1		 cmp	 esi, ecx

; 3870 : 		if (_Masked > _Max)

  00034	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00036	8b f1		 mov	 esi, ecx
  00038	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003a	8b d0		 mov	 edx, eax
  0003c	d1 ea		 shr	 edx, 1
  0003e	2b ca		 sub	 ecx, edx
  00040	3b c1		 cmp	 eax, ecx
  00042	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00044	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00049	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004b	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004d	3b f0		 cmp	 esi, eax
  0004f	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00052	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0005b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0005e	89 45 08	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  00061	8b cf		 mov	 ecx, edi
  00063	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  00068	8b 45 f4	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  0006b	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0006e	0f be 45 14	 movsx	 eax, BYTE PTR _<_Args_1>$[ebp]
  00072	89 45 14	 mov	 DWORD PTR tv427[ebp], eax
  00075	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00078	89 77 18	 mov	 DWORD PTR [edi+24], esi
  0007b	8d 77 04	 lea	 esi, DWORD PTR [edi+4]

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  0007e	53		 push	 ebx
  0007f	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
  00082	89 4d f8	 mov	 DWORD PTR tv426[ebp], ecx
  00085	03 4d 10	 add	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00088	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  0008c	89 4d f4	 mov	 DWORD PTR tv425[ebp], ecx
  0008f	72 3c		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00091	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00093	56		 push	 esi
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0009a	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  0009d	ff 75 14	 push	 DWORD PTR tv427[ebp]
  000a0	ff 75 f8	 push	 DWORD PTR tv426[ebp]
  000a3	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000a8	8b 45 f4	 mov	 eax, DWORD PTR tv425[ebp]
  000ab	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000ae	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000b1	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b2	50		 push	 eax
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000b9	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bc	83 c4 20	 add	 esp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000bf	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 3950 : 		return (*this);

  000c2	8b c7		 mov	 eax, edi
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx

; 3951 : 		}

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 10 00	 ret	 16			; 00000010H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000cd	56		 push	 esi
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000d4	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  000d7	ff 75 14	 push	 DWORD PTR tv427[ebp]
  000da	ff 75 f8	 push	 DWORD PTR tv426[ebp]
  000dd	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000e2	8b 45 f4	 mov	 eax, DWORD PTR tv425[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000e5	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  000e8	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  000eb	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  000ee	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  000f0	8b c7		 mov	 eax, edi
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx

; 3951 : 		}

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 10 00	 ret	 16			; 00000010H
$LN88@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  000fb	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN86@Reallocate:
  00100	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Count$ = 20						; size = 4
__Ch$ = 24						; size = 1
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z PROC ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator(), COMDAT
; _this$ = ecx

; 2610 : 				const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2610 : 				const size_type _Count, const _Elem _Ch) {

  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 7d 10	 mov	 edi, DWORD PTR __Old_size$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 0c	 push	 DWORD PTR __Old_ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00015	0f be 45 18	 movsx	 eax, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  00019	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0001b	8b 75 14	 mov	 esi, DWORD PTR __Count$[ebp]
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00029	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2614 : 			}, _Count, _Ch));

  0002f	5d		 pop	 ebp
  00030	c2 14 00	 ret	 20			; 00000014H
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ENDP ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __New_size$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00012	0f 87 8b 00 00
	00		 ja	 $LN76@Reallocate

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00018	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0001b	8b f3		 mov	 esi, ebx
  0001d	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00020	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00023	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00029	76 07		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0002b	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00030	eb 1e		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00032	8b d1		 mov	 edx, ecx
  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	d1 ea		 shr	 edx, 1
  0003b	2b c2		 sub	 eax, edx
  0003d	3b c8		 cmp	 ecx, eax
  0003f	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00041	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00046	eb 08		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00048	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004b	3b f0		 cmp	 esi, eax
  0004d	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00050	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00059	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0005c	89 45 08	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3899 : 		_My_data._Orphan_all();

  0005f	8b cf		 mov	 ecx, edi
  00061	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00066	53		 push	 ebx
  00067	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  0006a	89 77 18	 mov	 DWORD PTR [edi+24], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0006d	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$1$[ebp]
  00070	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  00071	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00074	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00079	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0007f	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0d		 jb	 SHORT $LN3@Reallocate

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  00088	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00089	50		 push	 eax
  0008a	ff 77 04	 push	 DWORD PTR [edi+4]
  0008d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00092	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3913 : 		return (*this);

  00095	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00098	8b c7		 mov	 eax, edi
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 3914 : 		}

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN76@Reallocate:

; 3890 : 			{
; 3891 : 			_Xlen();	// result too long

  000a3	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN74@Reallocate:
  000a8	cc		 int	 3
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00018	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2671 : 			}, _Ptr));

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z
_TEXT	SEGMENT
__Old$1$ = -16						; size = 4
tv460 = -12						; size = 4
__New_size$1$ = -12					; size = 4
tv461 = -8						; size = 4
tv463 = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
_<_Args_3>$ = 28					; size = 4
??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>,unsigned int,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Size_increase$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00018	2b c3		 sub	 eax, ebx
  0001a	3b c2		 cmp	 eax, edx
  0001c	0f 82 fb 00 00
	00		 jb	 $LN88@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00022	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00025	03 d3		 add	 edx, ebx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00027	8b f2		 mov	 esi, edx

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00029	89 55 f4	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002c	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0002f	89 45 f0	 mov	 DWORD PTR __Old$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00032	3b f1		 cmp	 esi, ecx

; 3870 : 		if (_Masked > _Max)

  00034	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00036	8b f1		 mov	 esi, ecx
  00038	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003a	8b d0		 mov	 edx, eax
  0003c	d1 ea		 shr	 edx, 1
  0003e	2b ca		 sub	 ecx, edx
  00040	3b c1		 cmp	 eax, ecx
  00042	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00044	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00049	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004b	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004d	3b f0		 cmp	 esi, eax
  0004f	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00052	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0005b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0005e	89 45 08	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  00061	8b cf		 mov	 ecx, edi
  00063	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  00068	8b 45 f4	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$1$[ebp]
  0006e	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00071	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00074	2b d8		 sub	 ebx, eax
  00076	2b 5d 14	 sub	 ebx, DWORD PTR _<_Args_1>$[ebp]
  00079	43		 inc	 ebx
  0007a	89 77 18	 mov	 DWORD PTR [edi+24], esi
  0007d	89 5d f8	 mov	 DWORD PTR tv461[ebp], ebx
  00080	8d 77 04	 lea	 esi, DWORD PTR [edi+4]

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00083	8b 5d f0	 mov	 ebx, DWORD PTR __Old$1$[ebp]
  00086	8d 14 01	 lea	 edx, DWORD PTR [ecx+eax]
  00089	89 55 fc	 mov	 DWORD PTR tv463[ebp], edx
  0008c	03 55 1c	 add	 edx, DWORD PTR _<_Args_3>$[ebp]
  0008f	89 55 f4	 mov	 DWORD PTR tv460[ebp], edx
  00092	50		 push	 eax
  00093	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00096	72 49		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00098	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009a	56		 push	 esi
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 _memcpy
  000a1	ff 75 1c	 push	 DWORD PTR _<_Args_3>$[ebp]
  000a4	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  000a7	ff 75 fc	 push	 DWORD PTR tv463[ebp]
  000aa	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  000af	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000b2	ff 75 f8	 push	 DWORD PTR tv461[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  000b5	03 c6		 add	 eax, esi
  000b7	03 45 14	 add	 eax, DWORD PTR _<_Args_1>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ba	50		 push	 eax
  000bb	ff 75 f4	 push	 DWORD PTR tv460[ebp]
  000be	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000c3	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000cd	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d0	83 c4 2c	 add	 esp, 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000d3	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 3950 : 		return (*this);

  000d6	8b c7		 mov	 eax, edi
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx

; 3951 : 		}

  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 18 00	 ret	 24			; 00000018H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000e1	56		 push	 esi
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 _memcpy
  000e8	ff 75 1c	 push	 DWORD PTR _<_Args_3>$[ebp]
  000eb	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  000ee	ff 75 fc	 push	 DWORD PTR tv463[ebp]
  000f1	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  000f6	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000f9	ff 75 f8	 push	 DWORD PTR tv461[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  000fc	03 c6		 add	 eax, esi
  000fe	03 45 14	 add	 eax, DWORD PTR _<_Args_1>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00101	50		 push	 eax
  00102	ff 75 f4	 push	 DWORD PTR tv460[ebp]
  00105	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0010a	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0010d	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00110	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  00112	8b c7		 mov	 eax, edi
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx

; 3951 : 		}

  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 18 00	 ret	 24			; 00000018H
$LN88@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  0011d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN86@Reallocate:
  00122	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>,unsigned int,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__N0$ = 24						; size = 4
__Ptr$ = 28						; size = 4
__Count$ = 32						; size = 4
??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z PROC ; <lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>::operator(), COMDAT
; _this$ = ecx

; 2968 : 				const size_type _Off, const size_type _N0, const _Elem * const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Old_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2968 : 				const size_type _Off, const size_type _N0, const _Elem * const _Ptr, const size_type _Count) {

  00007	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2968 : 				const size_type _Off, const size_type _N0, const _Elem * const _Ptr, const size_type _Count) {

  0000b	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0000c	8b 7d 14	 mov	 edi, DWORD PTR __Off$[ebp]
  0000f	57		 push	 edi
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2970 : 			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);

  00017	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00019	8b 75 20	 mov	 esi, DWORD PTR __Count$[ebp]
  0001c	56		 push	 esi
  0001d	ff 75 1c	 push	 DWORD PTR __Ptr$[ebp]
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  00026	8b 55 14	 mov	 edx, DWORD PTR __Off$[ebp]
  00029	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0002c	2b c2		 sub	 eax, edx
  0002e	2b 45 18	 sub	 eax, DWORD PTR __N0$[ebp]
  00031	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00032	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  00033	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00036	03 45 18	 add	 eax, DWORD PTR __N0$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00039	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  0003a	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memcpy
  00043	83 c4 24	 add	 esp, 36			; 00000024H
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2972 : 			}, _Off, _N0, _Ptr, _Count));

  00049	5d		 pop	 ebp
  0004a	c2 1c 00	 ret	 28			; 0000001cH
??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z ENDP ; <lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 32   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000d	0f 42 c1	 cmovb	 eax, ecx

; 34   : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00008	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1785 : 		_Myres(0)

  0000f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 1081 : 	typename allocator_traits<_Alloc>::propagate_on_container_copy_assignment _Tag;
; 1082 : 	_Pocca(_Left, _Right, _Tag);
; 1083 : 	}

  00000	c3		 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 2044 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 2045 : 		_Nodeptr _Wherenode = this->_Get_data()._Myhead;	// end() if search fails

  00008	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 2046 : 		_Nodeptr _Pnode = _Wherenode->_Parent;

  0000b	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

  0000e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00012	75 23		 jne	 SHORT $LN28@Lbound
$LL2@Lbound:

; 2032 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));

  00014	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00017	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2032 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));

  0001a	50		 push	 eax
  0001b	53		 push	 ebx
  0001c	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@ABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2049 : 			{
; 2050 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00024	84 c0		 test	 al, al
  00026	74 05		 je	 SHORT $LN4@Lbound

; 2051 : 				{
; 2052 : 				_Pnode = _Pnode->_Right;	// descend right subtree

  00028	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 2053 : 				}
; 2054 : 			else

  0002b	eb 04		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2055 : 				{	// _Pnode not less than _Keyval, remember it
; 2056 : 				_Wherenode = _Pnode;

  0002d	8b fe		 mov	 edi, esi

; 2057 : 				_Pnode = _Pnode->_Left;	// descend left subtree

  0002f	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Lbound:

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

  00031	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00035	74 dd		 je	 SHORT $LL2@Lbound
$LN28@Lbound:

; 2058 : 				}
; 2059 : 			}
; 2060 : 
; 2061 : 		return (_Wherenode);	// return best remembered candidate
; 2062 : 		}

  00037	8b c7		 mov	 eax, edi
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *>::pointer_to, COMDAT

; 341  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 342  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 343  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@$$CBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@ABU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@ABU10@@Z PROC ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@YAPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@0@ABU10@@Z ENDP ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@PAD@std@@YAABQADABQAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@PAD@std@@YAABQADABQAD0@Z PROC		; std::_Max_value<char *>, COMDAT

; 32   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000d	0f 42 c1	 cmovb	 eax, ecx

; 34   : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Max_value@PAD@std@@YAABQADABQAD0@Z ENDP		; std::_Max_value<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; _this$ = ecx

; 53   : 			// TRANSITION, ABI: We currently always set _Fpos to 0 but older .objs containing old basic_filebuf
; 54   : 			// would set _Fpos.
; 55   : 		return (_Myoff + _Fpos);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]
  00005	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00008	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 56   : 		}

  0000b	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 33   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	89 01		 mov	 DWORD PTR [ecx], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0000e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 34   : 		}

  00011	8b c1		 mov	 eax, ecx
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00021	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1943 : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0000b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00012	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001e	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00020	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 30		 mov	 DWORD PTR [eax], esi

; 1944 : 		_Alloc_proxy();
; 1945 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	c2 04 00	 ret	 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z PROC	; std::pointer_traits<char *>::pointer_to, COMDAT

; 341  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 342  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 343  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ENDP	; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z PROC		; std::_Refancy<char *,0>, COMDAT

; 362  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 364  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ENDP		; std::_Refancy<char *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Refancy@PBD$0A@@std@@YAPBDPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PBD$0A@@std@@YAPBDPBD@Z PROC		; std::_Refancy<char const *,0>, COMDAT

; 362  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 364  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PBD$0A@@std@@YAPBDPBD@Z ENDP		; std::_Refancy<char const *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@$$CBD@std@@YAPBDPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z PROC			; std::_Unfancy<char const >, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z ENDP			; std::_Unfancy<char const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,bool>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN14@Tree_itera

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN14@Tree_itera:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN14@Tree_itera

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN14@Tree_itera:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--, COMDAT
; _this$ = ecx

; 354  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 355  : 		--static_cast<_Mybase&>(*this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--

; 356  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 357  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator->, COMDAT
; _this$ = ecx

; 332  : 		return ((reference)**(_Mybase *)this);

  00000	e9 00 00 00 00	 jmp	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*, COMDAT
; _this$ = ecx

; 332  : 		return ((reference)**(_Mybase *)this);

  00000	e9 00 00 00 00	 jmp	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 0c	 push	 DWORD PTR __Plist$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 328  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$try_emplace@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$try_emplace@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::try_emplace<>, COMDAT
; _this$ = ecx

; 247  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 248  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  00003	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00006	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$try_emplace@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::try_emplace<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Debug_lt_pred@ABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@ABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z PROC ; std::_Debug_lt_pred<zl::base::string_cmp_nocase const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1109 : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 : 	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00006	53		 push	 ebx
  00007	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0000d	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  00012	8a d8		 mov	 bl, al

; 1111 : 	if (_Result)

  00014	84 db		 test	 bl, bl
  00016	74 58		 je	 SHORT $LN13@Debug_lt_p

; 1112 : 		{
; 1113 : 		_STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

  00018	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0001e	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00021	e8 00 00 00 00	 call	 ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; zl::base::string_cmp_nocase::operator()
  00026	84 c0		 test	 al, al
  00028	74 46		 je	 SHORT $LN13@Debug_lt_p
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00034	6a 00		 push	 0
  00036	68 59 04 00 00	 push	 1113			; 00000459H
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00040	6a 02		 push	 2
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00048	83 c4 18	 add	 esp, 24			; 00000018H
  0004b	83 f8 01	 cmp	 eax, 1
  0004e	75 01		 jne	 SHORT $LN12@Debug_lt_p
  00050	cc		 int	 3
$LN12@Debug_lt_p:
  00051	6a 00		 push	 0
  00053	68 59 04 00 00	 push	 1113			; 00000459H
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
$LN13@Debug_lt_p:

; 1114 : 		}
; 1115 : 
; 1116 : 	return (_Result);
; 1117 : 	}

  00070	8a c3		 mov	 al, bl
  00072	5b		 pop	 ebx
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??$_Debug_lt_pred@ABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ENDP ; std::_Debug_lt_pred<zl::base::string_cmp_nocase const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@SAPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@ABU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@SAPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@ABU32@@Z PROC ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *>::pointer_to, COMDAT

; 341  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 342  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 343  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@SAPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@ABU32@@Z ENDP ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<char> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@D@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@D@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<char> > const >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$equal@PBD$$CBD$08@std@@YA_NQBD0AAY08$$CBD@Z
_TEXT	SEGMENT
__First2$ = -16						; size = 16
$T1 = -16						; size = 16
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
??$equal@PBD$$CBD$08@std@@YA_NQBD0AAY08$$CBD@Z PROC	; std::equal<char const *,char const ,9>, COMDAT

; 3174 : 	{	// compare [_First1, _Last1) to [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1860 : 		: _Ptr(_Parg),

  00006	8b 45 10	 mov	 eax, DWORD PTR __First2$[ebp]

; 3174 : 	{	// compare [_First1, _Last1) to [_First2, ...)

  00009	53		 push	 ebx

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0000a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter

; 1860 : 		: _Ptr(_Parg),

  00010	89 45 f8	 mov	 DWORD PTR $T1[ebp+8], eax

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport

; 3174 : 	{	// compare [_First1, _Last1) to [_First2, ...)

  00018	56		 push	 esi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00019	8b 75 0c	 mov	 esi, DWORD PTR __Last1$[ebp]
  0001c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00023	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+4], 0

; 1861 : 		_Idx(_Off)

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+12], 0

; 3136 : 	return (_STD equal(_First1, _Last1,

  00031	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR $T1[ebp]

; 3174 : 	{	// compare [_First1, _Last1) to [_First2, ...)

  00035	57		 push	 edi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00036	8b 7d 08	 mov	 edi, DWORD PTR __First1$[ebp]

; 3136 : 	return (_STD equal(_First1, _Last1,

  00039	0f 11 45 f0	 movups	 XMMWORD PTR __First2$[ebp], xmm0

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0003d	3b fe		 cmp	 edi, esi
  0003f	76 43		 jbe	 SHORT $LN24@equal
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004b	6a 00		 push	 0
  0004d	68 2f 02 00 00	 push	 559			; 0000022fH
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00057	6a 02		 push	 2
  00059	ff d0		 call	 eax
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 01		 jne	 SHORT $LN29@equal
  00063	cc		 int	 3
$LN29@equal:
  00064	6a 00		 push	 0
  00066	68 2f 02 00 00	 push	 559			; 0000022fH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  0007a	ff d3		 call	 ebx
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  00081	83 c4 14	 add	 esp, 20			; 00000014H
$LN24@equal:

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00084	2b f7		 sub	 esi, edi

; 1909 : 		if (_Off != 0)

  00086	74 44		 je	 SHORT $LN52@equal

; 1910 : 			{
; 1911 : 			_STL_VERIFY(_Ptr, "cannot seek value-initialized array iterator");

  00088	83 7d f8 00	 cmp	 DWORD PTR __First2$[ebp+8], 0
  0008c	75 3e		 jne	 SHORT $LN52@equal
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00098	6a 00		 push	 0
  0009a	68 77 07 00 00	 push	 1911			; 00000777H
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000a4	6a 02		 push	 2
  000a6	ff d0		 call	 eax
  000a8	83 c4 18	 add	 esp, 24			; 00000018H
  000ab	83 f8 01	 cmp	 eax, 1
  000ae	75 01		 jne	 SHORT $LN79@equal
  000b0	cc		 int	 3
$LN79@equal:
  000b1	6a 00		 push	 0
  000b3	68 77 07 00 00	 push	 1911			; 00000777H
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
  000c7	ff d3		 call	 ebx
  000c9	83 c4 14	 add	 esp, 20			; 00000014H
$LN52@equal:

; 1912 : 			}
; 1913 : 
; 1914 : 		if (_Off < 0)

  000cc	85 f6		 test	 esi, esi
  000ce	79 4d		 jns	 SHORT $LN100@equal

; 1915 : 			{
; 1916 : #pragma warning(suppress: 4146)	// unary minus operator applied to unsigned type, result still unsigned
; 1917 : 			_STL_VERIFY(_Idx >= -static_cast<size_t>(_Off),

  000d0	8b c6		 mov	 eax, esi
  000d2	f7 d8		 neg	 eax
  000d4	39 45 fc	 cmp	 DWORD PTR __First2$[ebp+12], eax
  000d7	73 42		 jae	 SHORT $LN58@equal
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000e3	6a 00		 push	 0
  000e5	68 7e 07 00 00	 push	 1918			; 0000077eH
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000ef	6a 02		 push	 2
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000f7	83 c4 18	 add	 esp, 24			; 00000018H
  000fa	83 f8 01	 cmp	 eax, 1
  000fd	75 01		 jne	 SHORT $LN80@equal
  000ff	cc		 int	 3
$LN80@equal:
  00100	6a 00		 push	 0
  00102	68 7e 07 00 00	 push	 1918			; 0000077eH
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  00116	ff d3		 call	 ebx
  00118	83 c4 14	 add	 esp, 20			; 00000014H
$LN58@equal:

; 1918 : 				"cannot seek array iterator before begin");
; 1919 : 			}
; 1920 : 
; 1921 : 		if (_Off > 0)

  0011b	85 f6		 test	 esi, esi
$LN100@equal:
  0011d	7e 4e		 jle	 SHORT $LN64@equal

; 1922 : 			{
; 1923 : 			_STL_VERIFY(_Size - _Idx >= static_cast<size_t>(_Off),

  0011f	b8 09 00 00 00	 mov	 eax, 9
  00124	2b 45 fc	 sub	 eax, DWORD PTR __First2$[ebp+12]
  00127	3b c6		 cmp	 eax, esi
  00129	73 42		 jae	 SHORT $LN64@equal
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00135	6a 00		 push	 0
  00137	68 84 07 00 00	 push	 1924			; 00000784H
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00141	6a 02		 push	 2
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00149	83 c4 18	 add	 esp, 24			; 00000018H
  0014c	83 f8 01	 cmp	 eax, 1
  0014f	75 01		 jne	 SHORT $LN81@equal
  00151	cc		 int	 3
$LN81@equal:
  00152	6a 00		 push	 0
  00154	68 84 07 00 00	 push	 1924			; 00000784H
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@DJNPOCJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  00168	ff d3		 call	 ebx
  0016a	83 c4 14	 add	 esp, 20			; 00000014H
$LN64@equal:

; 2002 : 		return (_Ptr + _Idx);

  0016d	8b 4d f8	 mov	 ecx, DWORD PTR __First2$[ebp+8]
  00170	8b 45 fc	 mov	 eax, DWORD PTR __First2$[ebp+12]
  00173	03 c8		 add	 ecx, eax

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00175	83 ee 04	 sub	 esi, 4
  00178	72 17		 jb	 SHORT $LN96@equal
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL97@equal:
  00180	8b 07		 mov	 eax, DWORD PTR [edi]
  00182	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00184	75 10		 jne	 SHORT $LN95@equal
  00186	83 c7 04	 add	 edi, 4
  00189	83 c1 04	 add	 ecx, 4
  0018c	83 ee 04	 sub	 esi, 4
  0018f	73 ef		 jae	 SHORT $LL97@equal
$LN96@equal:
  00191	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00194	74 36		 je	 SHORT $LN94@equal
$LN95@equal:
  00196	8a 07		 mov	 al, BYTE PTR [edi]
  00198	3a 01		 cmp	 al, BYTE PTR [ecx]
  0019a	75 27		 jne	 SHORT $LN98@equal
  0019c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0019f	74 2b		 je	 SHORT $LN94@equal
  001a1	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  001a4	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  001a7	75 1a		 jne	 SHORT $LN98@equal
  001a9	83 fe fe	 cmp	 esi, -2			; fffffffeH
  001ac	74 1e		 je	 SHORT $LN94@equal
  001ae	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  001b1	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  001b4	75 0d		 jne	 SHORT $LN98@equal
  001b6	83 fe ff	 cmp	 esi, -1
  001b9	74 11		 je	 SHORT $LN94@equal
  001bb	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  001be	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  001c1	74 09		 je	 SHORT $LN94@equal
$LN98@equal:
  001c3	5f		 pop	 edi

; 3175 : 	return (_STD equal(_First1, _Last1, _First2, equal_to<>()));
; 3176 : 	}

  001c4	5e		 pop	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  001c5	32 c0		 xor	 al, al

; 3175 : 	return (_STD equal(_First1, _Last1, _First2, equal_to<>()));
; 3176 : 	}

  001c7	5b		 pop	 ebx
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
$LN94@equal:
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi

; 3102 : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  001ce	b0 01		 mov	 al, 1

; 3175 : 	return (_STD equal(_First1, _Last1, _First2, equal_to<>()));
; 3176 : 	}

  001d0	5b		 pop	 ebx
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
??$equal@PBD$$CBD$08@std@@YA_NQBD0AAY08$$CBD@Z ENDP	; std::equal<char const *,char const ,9>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
$T3 = -24						; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Lock$4 = 12						; size = 4
__Lock$5 = 12						; size = 4
__Last$ = 12						; size = 4
??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<char const *,void>, COMDAT
; _this$ = ecx

; 2700 : 		{	// assign [_First, _Last), input iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  0002a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0002d	ff 75 08	 push	 DWORD PTR __First$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00030	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00034	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]

; 3084 : 		{	// return iterator for end of mutable sequence

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1803 : 		value_type * _Result = _Bx._Buf;

  0003e	8b cf		 mov	 ecx, edi

; 1804 : 		if (_Large_string_engaged())

  00040	72 02		 jb	 SHORT $LN90@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00042	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN90@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3086 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr())

  00044	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00047	03 c1		 add	 eax, ecx

; 1646 : 		: _Mybase(_Parg, _Pstring)

  00049	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  0004c	56		 push	 esi
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  00053	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00056	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0005d	8b dc		 mov	 ebx, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0005f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00065	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0006c	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]
  0006f	85 c0		 test	 eax, eax
  00071	74 09		 je	 SHORT $LN36@assign

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00073	ff 30		 push	 DWORD PTR [eax]
  00075	8b cb		 mov	 ecx, ebx
  00077	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN36@assign:
  0007c	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp+8]
  0007f	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00082	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 3072 : 		{	// return iterator for beginning of mutable sequence

  00086	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1804 : 		if (_Large_string_engaged())

  0008a	72 02		 jb	 SHORT $LN49@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0008c	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN49@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1646 : 		: _Mybase(_Parg, _Pstring)

  0008e	56		 push	 esi
  0008f	57		 push	 edi
  00090	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  00093	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  00098	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0009b	8b fc		 mov	 edi, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0009d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  000a3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  000aa	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  000ad	85 c0		 test	 eax, eax
  000af	74 09		 je	 SHORT $LN68@assign

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  000b1	ff 30		 push	 DWORD PTR [eax]
  000b3	8b cf		 mov	 ecx, edi
  000b5	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN68@assign:
  000ba	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  000bd	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 136  : 		}

  000bf	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000c3	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  000c6	e8 00 00 00 00	 call	 ??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace<char const *,void>
  000cb	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000cd	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  000d3	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  000d6	6a 03		 push	 3
  000d8	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000dc	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  000de	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  000e6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ec	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  000ef	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000f1	6a 03		 push	 3
  000f3	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  000f6	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  000fd	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  000ff	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00102	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00107	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0010a	ff d6		 call	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  0010c	8b c3		 mov	 eax, ebx

; 2702 : 		}

  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z$2:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$assign@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<char const *,void>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>, COMDAT
; _this$ = ecx

; 2221 : 		{	// construct from [_First, _Last) with optional allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0002b	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  0003a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00041	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00046	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00048	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00051	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0005c	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0005f	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00062	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00069	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 1994 : 		}
; 1995 : 
; 1996 : 	void _Free_proxy()
; 1997 : 		{	// destroy proxy
; 1998 : 		_Alproxy _Proxy_allocator(_Getal());
; 1999 : 		_Orphan_all();
; 2000 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
; 2001 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());
; 2002 : 		_Myproxy() = nullptr;
; 2003 : 		}
; 2004 : 
; 2005 : 	_Iterator_base12 **_Getpfirst() const
; 2006 : 		{	// get address of iterator chain
; 2007 : 		return (_Get_data()._Getpfirst());
; 2008 : 		}
; 2009 : 
; 2010 : 	_Container_proxy * & _Myproxy() noexcept
; 2011 : 		{	// return reference to _Myproxy
; 2012 : 		return (_Get_data()._Myproxy);
; 2013 : 		}
; 2014 : 
; 2015 : 	_Container_proxy * const & _Myproxy() const noexcept
; 2016 : 		{	// return const reference to _Myproxy
; 2017 : 		return (_Get_data()._Myproxy);
; 2018 : 		}
; 2019 : #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2020 : 
; 2021 : 	void _Orphan_all()
; 2022 : 		{	// orphan all iterators
; 2023 : 		_Get_data()._Orphan_all();
; 2024 : 		}
; 2025 : 
; 2026 : 	void _Swap_all(_String_alloc& _Right)
; 2027 : 		{	// swap all iterators
; 2028 : 		_Get_data()._Swap_all(_Right._Get_data());
; 2029 : 		}
; 2030 : 
; 2031 : 	_Alty& _Getal() noexcept
; 2032 : 		{	// return reference to allocator
; 2033 : 		return (_Mypair._Get_first());
; 2034 : 		}
; 2035 : 
; 2036 : 	const _Alty& _Getal() const noexcept
; 2037 : 		{	// return const reference to allocator
; 2038 : 		return (_Mypair._Get_first());
; 2039 : 		}
; 2040 : 
; 2041 : 	_Mydata_t& _Get_data() noexcept
; 2042 : 		{	// return reference to _String_val
; 2043 : 		return (_Mypair._Get_second());
; 2044 : 		}
; 2045 : 
; 2046 : 	const _Mydata_t& _Get_data() const noexcept
; 2047 : 		{	// return const reference to _String_val
; 2048 : 		return (_Mypair._Get_second());
; 2049 : 		}
; 2050 : 
; 2051 : private:
; 2052 : 	_Compressed_pair<_Alty, _Mydata_t> _Mypair;
; 2053 : 	};
; 2054 : 
; 2055 : 
; 2056 : 		// CLASS TEMPLATE basic_string
; 2057 : template<class _Ty>
; 2058 : 	constexpr size_t _Size_after_ebco_v
; 2059 : 		= is_empty_v<_Ty> ? 0 : sizeof(_Ty);	// get _Ty's size after being EBCO'd
; 2060 : 
; 2061 : template<class _Elem,
; 2062 : 	class _Traits = char_traits<_Elem>,
; 2063 : 	class _Alloc = allocator<_Elem>>
; 2064 : 	class basic_string
; 2065 : 		: public _String_alloc<_String_base_types<_Elem, _Alloc>>
; 2066 : 	{	// null-terminated transparent array of elements
; 2067 : public:
; 2068 : 	static_assert(!_ENFORCE_MATCHING_ALLOCATORS || is_same_v<_Elem, typename _Alloc::value_type>,
; 2069 : 		_MISMATCHED_ALLOCATOR_MESSAGE("basic_string<T, Traits, Allocator>", "T"));
; 2070 : 
; 2071 : 	static_assert(is_same_v<_Elem, typename _Traits::char_type>,
; 2072 : 		"N4659 24.3.2.1 [string.require]/3 requires that the supplied "
; 2073 : 		"char_traits character type match the string's character type.");
; 2074 : 
; 2075 : 	using _Mybase = _String_alloc<_String_base_types<_Elem, _Alloc>>;
; 2076 : 	using traits_type = _Traits;
; 2077 : 	using allocator_type = _Alloc;
; 2078 : 
; 2079 : 	using _Alty = typename _Mybase::_Alty;
; 2080 : 	using _Alty_traits = typename _Mybase::_Alty_traits;
; 2081 : 	using _Mydata_t = typename _Mybase::_Mydata_t;
; 2082 : 
; 2083 : 	using value_type = typename _Mybase::value_type;
; 2084 : 	using size_type = typename _Mybase::size_type;
; 2085 : 	using difference_type = typename _Mybase::difference_type;
; 2086 : 	using pointer = typename _Mybase::pointer;
; 2087 : 	using const_pointer = typename _Mybase::const_pointer;
; 2088 : 	using reference = value_type&;
; 2089 : 	using const_reference = const value_type&;
; 2090 : 
; 2091 : 	using iterator = typename _Mybase::iterator;
; 2092 : 	using const_iterator = typename _Mybase::const_iterator;
; 2093 : 
; 2094 : 	using reverse_iterator = _STD reverse_iterator<iterator>;
; 2095 : 	using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 2096 : 
; 2097 : 	// When doing swap / move by memcpy, we are touching:
; 2098 : 	//   _String_val::_Bx::_Buf (type is array of _Elem)
; 2099 : 	//   _String_val::_Bx::_Ptr (type is pointer)
; 2100 : 	//   _String_val::_Mysize   (type is size_type)
; 2101 : 	//   _String_val::_Myres    (type is size_type)
; 2102 : 	// N4659 24.1 [strings.general]/1 says _Elem must be a non-array POD, so memcpy is safe.
; 2103 : 	// We need to ask if pointer is safe to memcpy.
; 2104 : 	// size_type must be an unsigned integral type so memcpy is safe.
; 2105 : 	// We also need to disable memcpy if the user has supplied _Traits, since
; 2106 : 	//   they can observe traits::assign and similar.
; 2107 : 	using _Use_memcpy_move = bool_constant<
; 2108 : 		_Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>>;
; 2109 : 	// This offset skips over the _Container_base members, if any
; 2110 : 	static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v<_Container_base>;
; 2111 : 	static constexpr size_t _Memcpy_move_size = sizeof(_Mydata_t) - _Memcpy_move_offset;
; 2112 : 
; 2113 : 	template<class _Iter>
; 2114 : 		using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter,
; 2115 : 			const _Elem * const,
; 2116 : 			_Elem * const,
; 2117 : 			const _Elem *,
; 2118 : 			_Elem *>>;
; 2119 : 
; 2120 : #if _HAS_CXX17
; 2121 : 	template<class _StringViewIsh>
; 2122 : 		using _Is_string_view_ish = enable_if_t<conjunction_v<
; 2123 : 			is_convertible<const _StringViewIsh&, basic_string_view<_Elem, _Traits>>,
; 2124 : 			negation<is_convertible<const _StringViewIsh&, const _Elem *>>>>;
; 2125 : #endif /* _HAS_CXX17 */
; 2126 : 
; 2127 : 
; 2128 : 	basic_string(const basic_string& _Right)
; 2129 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
; 2130 : 		{	// construct by copying _Right
; 2131 : 		_Construct_lv_contents(_Right);
; 2132 : 		}
; 2133 : 
; 2134 : 	basic_string(const basic_string& _Right, const _Alloc& _Al)
; 2135 : 		: _Mybase(_Al)
; 2136 : 		{	// construct by copying with allocator
; 2137 : 		_Construct_lv_contents(_Right);
; 2138 : 		}
; 2139 : 
; 2140 : 	basic_string() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)
; 2141 : 		: _Mybase()
; 2142 : 		{	// construct empty string
; 2143 : 		_Tidy_init();
; 2144 : 		}
; 2145 : 
; 2146 : 	explicit basic_string(const _Alloc& _Al) noexcept
; 2147 : 		: _Mybase(_Al)
; 2148 : 		{	// construct empty string with allocator
; 2149 : 		_Tidy_init();
; 2150 : 		}
; 2151 : 
; 2152 : 	basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
; 2153 : 		: _Mybase(_Al)
; 2154 : 		{	// construct from _Right [_Roff, <end>)
; 2155 : 		_Tidy_init();
; 2156 : 		assign(_Right, _Roff, npos);
; 2157 : 		}
; 2158 : 
; 2159 : 	basic_string(const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
; 2160 : 		: _Mybase(_Al)
; 2161 : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 2162 : 		_Tidy_init();
; 2163 : 		assign(_Right, _Roff, _Count);
; 2164 : 		}
; 2165 : 
; 2166 : 	basic_string(_In_reads_(_Count) const _Elem * const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count)
; 2167 : 		: _Mybase()
; 2168 : 		{	// construct from [_Ptr, _Ptr + _Count)
; 2169 : 		_Tidy_init();
; 2170 : 		assign(_Ptr, _Count);
; 2171 : 		}
; 2172 : 
; 2173 : 	basic_string(_In_reads_(_Count) const _Elem * const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count,
; 2174 : 		const _Alloc& _Al)
; 2175 : 		: _Mybase(_Al)
; 2176 : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 2177 : 		_Tidy_init();
; 2178 : 		assign(_Ptr, _Count);
; 2179 : 		}
; 2180 : 
; 2181 : 	basic_string(_In_z_ const _Elem * const _Ptr)
; 2182 : 		: _Mybase()
; 2183 : 		{	// construct from [_Ptr, <null>)
; 2184 : 		_Tidy_init();
; 2185 : 		assign(_Ptr);
; 2186 : 		}
; 2187 : 
; 2188 : #if _HAS_CXX17
; 2189 : 	template<class _Alloc2 = _Alloc,
; 2190 : 		enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
; 2191 : #endif /* _HAS_CXX17 */
; 2192 : 	basic_string(_In_z_ const _Elem * const _Ptr, const _Alloc& _Al)
; 2193 : 		: _Mybase(_Al)
; 2194 : 		{	// construct from [_Ptr, <null>) with allocator
; 2195 : 		_Tidy_init();
; 2196 : 		assign(_Ptr);
; 2197 : 		}
; 2198 : 
; 2199 : 	basic_string(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch)
; 2200 : 		: _Mybase()
; 2201 : 		{	// construct from _Count * _Ch
; 2202 : 		_Tidy_init();
; 2203 : 		assign(_Count, _Ch);
; 2204 : 		}
; 2205 : 
; 2206 : #if _HAS_CXX17
; 2207 : 	template<class _Alloc2 = _Alloc,
; 2208 : 		enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
; 2209 : #endif /* _HAS_CXX17 */
; 2210 : 	basic_string(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch, const _Alloc& _Al)
; 2211 : 		: _Mybase(_Al)
; 2212 : 		{	// construct from _Count * _Ch with allocator
; 2213 : 		_Tidy_init();
; 2214 : 		assign(_Count, _Ch);
; 2215 : 		}
; 2216 : 
; 2217 : 	template<class _Iter,
; 2218 : 		class = enable_if_t<_Is_iterator_v<_Iter>>>
; 2219 : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 2220 : 		: _Mybase(_Al)

  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00077	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0007b	3b df		 cmp	 ebx, edi
  0007d	76 48		 jbe	 SHORT $LN97@allocator
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00089	6a 00		 push	 0
  0008b	68 2f 02 00 00	 push	 559			; 0000022fH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0009d	83 c4 18	 add	 esp, 24			; 00000018H
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	75 01		 jne	 SHORT $LN85@allocator
  000a5	cc		 int	 3
$LN85@allocator:
  000a6	6a 00		 push	 0
  000a8	68 2f 02 00 00	 push	 559			; 0000022fH
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000c2	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2260 : 		if (_First != _Last)

  000c5	3b df		 cmp	 ebx, edi
$LN97@allocator:
  000c7	74 0b		 je	 SHORT $LN95@allocator

; 2261 : 			{
; 2262 : 			assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));

  000c9	2b fb		 sub	 edi, ebx
  000cb	8b ce		 mov	 ecx, esi
  000cd	57		 push	 edi
  000ce	53		 push	 ebx
  000cf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN95@allocator:

; 2222 : 		_Tidy_init();
; 2223 : 		_Adl_verify_range(_First, _Last);
; 2224 : 		_Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());
; 2225 : 		}

  000d4	8b c6		 mov	 eax, esi
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$find@PBDD@std@@YAPBDPBDQBDABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$find@PBDD@std@@YAPBDPBDQBDABD@Z PROC			; std::find<char const *,char>, COMDAT

; 3539 : 	{	// find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]

; 3539 : 	{	// find first matching _Val

  00007	57		 push	 edi

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	3b fe		 cmp	 edi, esi
  0000d	76 46		 jbe	 SHORT $LN12@find
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00019	6a 00		 push	 0
  0001b	68 2f 02 00 00	 push	 559			; 0000022fH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 18	 add	 esp, 24			; 00000018H
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 01		 jne	 SHORT $LN17@find
  00035	cc		 int	 3
$LN17@find:
  00036	6a 00		 push	 0
  00038	68 2f 02 00 00	 push	 559			; 0000022fH
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00052	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@find:

; 3510 : 	_First = static_cast<_InIt>(_CSTD memchr(

  00055	8b c6		 mov	 eax, esi
  00057	2b c7		 sub	 eax, edi
  00059	50		 push	 eax
  0005a	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0005d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00060	50		 push	 eax
  00061	57		 push	 edi
  00062	e8 00 00 00 00	 call	 _memchr
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3511 : 		_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
; 3512 : 	return (_First ? _First : _Last);

  0006a	85 c0		 test	 eax, eax
  0006c	0f 45 f0	 cmovne	 esi, eax

; 3540 : 	_Adl_verify_range(_First, _Last);
; 3541 : 	_Seek_wrapped(_First,
; 3542 : 		_Find_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val));
; 3543 : 	return (_First);

  0006f	8b c6		 mov	 eax, esi

; 3544 : 	}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??$find@PBDD@std@@YAPBDPBDQBDABD@Z ENDP			; std::find<char const *,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??_D?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx

; 523  : 		{	// destroy the object

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8d 71 60	 lea	 esi, DWORD PTR [ecx+96]

; 524  : 		}

  00006	8d 4e b0	 lea	 ecx, DWORD PTR [esi-80]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00014	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  0001d	89 44 32 9c	 mov	 DWORD PTR [edx+esi-100], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00026	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0002f	8b ce		 mov	 ecx, esi
  00031	5e		 pop	 esi
  00032	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
??_D?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??_G?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 523  : 		{	// destroy the object

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00009	57		 push	 edi
  0000a	8d 7e a0	 lea	 edi, DWORD PTR [esi-96]

; 524  : 		}

  0000d	8d 4e b0	 lea	 ecx, DWORD PTR [esi-80]
  00010	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00013	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0001b	8b 07		 mov	 eax, DWORD PTR [edi]
  0001d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00020	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00023	89 44 32 9c	 mov	 DWORD PTR [edx+esi-100], eax
  00027	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0002c	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00035	8b ce		 mov	 ecx, esi
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00041	74 0e		 je	 SHORT $LN9@scalar
  00043	68 a8 00 00 00	 push	 168			; 000000a8H
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??_G?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z
_TEXT	SEGMENT
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT

; 424  : 		{	// convert open mode to stream state bits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 425  : 		int _State = 0;
; 426  : 		if (!(_Mode & ios_base::in))
; 427  : 			{
; 428  : 			_State |= _Noread;
; 429  : 			}
; 430  : 
; 431  : 		if (!(_Mode & ios_base::out))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	f7 d1		 not	 ecx
  0000b	8b c3		 mov	 eax, ebx
  0000d	83 e1 01	 and	 ecx, 1
  00010	c1 e1 02	 shl	 ecx, 2

; 432  : 			{
; 433  : 			_State |= _Constant;
; 434  : 			}
; 435  : 
; 436  : 		if (_Mode & ios_base::app)

  00013	8b d1		 mov	 edx, ecx
  00015	83 ca 02	 or	 edx, 2
  00018	24 02		 and	 al, 2
  0001a	8b c3		 mov	 eax, ebx
  0001c	0f 45 d1	 cmovne	 edx, ecx

; 437  : 			{
; 438  : 			_State |= _Append;
; 439  : 			}
; 440  : 
; 441  : 		if (_Mode & ios_base::ate)

  0001f	8b ca		 mov	 ecx, edx
  00021	83 c9 08	 or	 ecx, 8
  00024	24 08		 and	 al, 8
  00026	0f 44 ca	 cmove	 ecx, edx

; 442  : 			{
; 443  : 			_State |= _Atend;
; 444  : 			}
; 445  : 
; 446  : 		return (_State);

  00029	8b c1		 mov	 eax, ecx
  0002b	83 c8 10	 or	 eax, 16			; 00000010H
  0002e	80 e3 04	 and	 bl, 4
  00031	5b		 pop	 ebx
  00032	0f 44 c1	 cmove	 eax, ecx

; 447  : 		}

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 401  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 402  : 		if (_Mystate & _Allocated)

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  00007	74 2d		 je	 SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00009	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 09		 je	 SHORT $LN4@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00012	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00019	eb 0a		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  0001b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	03 11		 add	 edx, DWORD PTR [ecx]
$LN5@Tidy:

; 220  : 		return (*_IGfirst);

  00025	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002c	52		 push	 edx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00033	83 c4 08	 add	 esp, 8
$LN2@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00036	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  0003f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00042	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00048	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 292  : 		*_IPfirst = _First;

  00051	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00054	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  : 		*_IPnext = _First;

  0005a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0005d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  00063	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00066	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 412  : 		_Mystate &= ~_Allocated;

  0006c	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  00070	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00077	5e		 pop	 esi

; 413  : 		}

  00078	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pnew$1$ = 12						; size = 4
__Count$ = 12						; size = 4
tv261 = 16						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 361  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 362  : 		if (_Count > INT_MAX)

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00011	0f 87 ab 00 00
	00		 ja	 $LN27@Init

; 365  : 			}
; 366  : 
; 367  : 		if (_Count != 0 && (_State & (_Noread | _Constant)) != (_Noread | _Constant))

  00017	8b 5d 10	 mov	 ebx, DWORD PTR __State$[ebp]
  0001a	85 ff		 test	 edi, edi
  0001c	0f 84 8f 00 00
	00		 je	 $LN3@Init
  00022	8b c3		 mov	 eax, ebx
  00024	83 e0 06	 and	 eax, 6
  00027	3c 06		 cmp	 al, 6
  00029	0f 84 82 00 00
	00		 je	 $LN3@Init
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00035	57		 push	 edi
  00036	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 369  : 			const auto _Pnew = _Unfancy(_Al.allocate(_Count));

  00039	89 45 0c	 mov	 DWORD PTR __Pnew$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 371  : 			_Seekhigh = _Pnew + _Count;

  00042	8b 55 0c	 mov	 edx, DWORD PTR __Pnew$1$[ebp]

; 373  : 			if (!(_State & _Noread))

  00045	8b c3		 mov	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00047	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 373  : 			if (!(_State & _Noread))

  0004a	83 e0 04	 and	 eax, 4
  0004d	89 45 10	 mov	 DWORD PTR tv261[ebp], eax
  00050	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
  00053	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00056	75 0f		 jne	 SHORT $LN5@Init
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00058	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005b	89 10		 mov	 DWORD PTR [eax], edx

; 252  : 		*_IGnext = _Next;

  0005d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00060	89 10		 mov	 DWORD PTR [eax], edx

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00062	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00065	89 38		 mov	 DWORD PTR [eax], edi
$LN5@Init:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 378  : 			if (!(_State & _Constant))

  00067	f6 c3 02	 test	 bl, 2
  0006a	75 38		 jne	 SHORT $LN7@Init
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  0006c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 380  : 				_Mysb::setp(_Pnew,

  0006f	f6 c3 18	 test	 bl, 24			; 00000018H
  00072	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00075	8b 7d 0c	 mov	 edi, DWORD PTR __Pnew$1$[ebp]
  00078	8b cf		 mov	 ecx, edi
  0007a	0f 45 ca	 cmovne	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  0007d	89 38		 mov	 DWORD PTR [eax], edi

; 301  : 		*_IPcount = (int)(_Last - _Next);

  0007f	2b d1		 sub	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 384  : 				if (_State & _Noread)

  00081	83 7d 10 00	 cmp	 DWORD PTR tv261[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 300  : 		*_IPnext = _Next;

  00085	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 301  : 		*_IPcount = (int)(_Last - _Next);

  0008a	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0008d	89 10		 mov	 DWORD PTR [eax], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 384  : 				if (_State & _Noread)

  0008f	74 13		 je	 SHORT $LN7@Init
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00091	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00094	89 38		 mov	 DWORD PTR [eax], edi

; 252  : 		*_IGnext = _Next;

  00096	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0009f	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a2	89 38		 mov	 DWORD PTR [eax], edi
$LN7@Init:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 390  : 			_State |= _Allocated;

  000a4	83 cb 01	 or	 ebx, 1

; 391  : 			}
; 392  : 		else
; 393  : 			{
; 394  : 			_Seekhigh = nullptr;
; 395  : 			}
; 396  : 
; 397  : 		_Mystate = _State;

  000a7	5f		 pop	 edi
  000a8	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx

; 398  : 		}

  000ad	5d		 pop	 ebp
  000ae	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Init:

; 391  : 			}
; 392  : 		else
; 393  : 			{
; 394  : 			_Seekhigh = nullptr;
; 395  : 			}
; 396  : 
; 397  : 		_Mystate = _State;

  000b1	5f		 pop	 edi
  000b2	89 5e 3c	 mov	 DWORD PTR [esi+60], ebx
  000b5	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx

; 398  : 		}

  000be	5d		 pop	 ebp
  000bf	c2 0c 00	 ret	 12			; 0000000cH
$LN27@Init:

; 363  : 			{	// TRANSITION, VSO#485517
; 364  : 			_Xbad_alloc();

  000c2	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN25@Init:
  000c7	cc		 int	 3
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
tv228 = -16						; size = 4
tv255 = -12						; size = 4
__Gptr_old$1$ = -8					; size = 4
__Seeklow$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 323  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  00007	8b 5d 18	 mov	 ebx, DWORD PTR __Pos$[ebp+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 323  : 		{	// change position to _Pos, according to _Mode

  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  0000e	8b 7d 14	 mov	 edi, DWORD PTR __Pos$[ebp+8]
  00011	03 7d 0c	 add	 edi, DWORD PTR __Pos$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00014	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  00017	13 5d 10	 adc	 ebx, DWORD PTR __Pos$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
  0001c	89 45 f8	 mov	 DWORD PTR __Gptr_old$1$[ebp], eax

; 235  : 		return (*_IPnext);

  0001f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 327  : 		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)

  00024	85 c9		 test	 ecx, ecx
  00026	74 08		 je	 SHORT $LN2@seekpos
  00028	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  0002b	73 03		 jae	 SHORT $LN2@seekpos

; 328  : 			{	// update high-water pointer
; 329  : 			_Seekhigh = _Pptr_old;

  0002d	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN2@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00030	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 333  : 		const auto _Seekdist = _Seekhigh - _Seeklow;

  00035	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00038	89 45 f0	 mov	 DWORD PTR tv228[ebp], eax
  0003b	2b c2		 sub	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0003d	89 55 fc	 mov	 DWORD PTR __Seeklow$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 334  : 		if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist))

  00040	99		 cdq
  00041	3b da		 cmp	 ebx, edx
  00043	72 18		 jb	 SHORT $LN3@seekpos
  00045	77 04		 ja	 SHORT $LN30@seekpos
  00047	3b f8		 cmp	 edi, eax
  00049	76 12		 jbe	 SHORT $LN3@seekpos
$LN30@seekpos:

; 358  : 		}

  0004b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00054	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  0005b	eb 70		 jmp	 SHORT $LN31@seekpos
$LN3@seekpos:

; 335  : 			{
; 336  : 			return (pos_type(off_type(-1)));
; 337  : 			}
; 338  : 
; 339  : 		if (_Off != 0
; 340  : 			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)

  0005d	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
  00060	8b c7		 mov	 eax, edi
  00062	0b c3		 or	 eax, ebx
  00064	74 14		 je	 SHORT $LN4@seekpos
  00066	f6 c2 01	 test	 dl, 1
  00069	74 06		 je	 SHORT $LN6@seekpos
  0006b	83 7d f8 00	 cmp	 DWORD PTR __Gptr_old$1$[ebp], 0
  0006f	74 da		 je	 SHORT $LN30@seekpos
$LN6@seekpos:
  00071	f6 c2 02	 test	 dl, 2
  00074	74 04		 je	 SHORT $LN4@seekpos
  00076	85 c9		 test	 ecx, ecx
  00078	74 d1		 je	 SHORT $LN30@seekpos
$LN4@seekpos:

; 341  : 				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
; 342  : 			{
; 343  : 			return (pos_type(off_type(-1)));
; 344  : 			}
; 345  : 
; 346  : 		const auto _Newptr = _Seeklow + _Off;	// may perform nullptr + 0

  0007a	8b 45 fc	 mov	 eax, DWORD PTR __Seeklow$1$[ebp]
  0007d	03 c7		 add	 eax, edi

; 347  : 		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)

  0007f	f6 c2 01	 test	 dl, 1
  00082	74 18		 je	 SHORT $LN7@seekpos
  00084	83 7d f8 00	 cmp	 DWORD PTR __Gptr_old$1$[ebp], 0
  00088	74 12		 je	 SHORT $LN7@seekpos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  0008a	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0008d	89 02		 mov	 DWORD PTR [edx], eax

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0008f	8b 55 f0	 mov	 edx, DWORD PTR tv228[ebp]
  00092	2b d0		 sub	 edx, eax
  00094	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00097	89 10		 mov	 DWORD PTR [eax], edx
  00099	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
$LN7@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 352  : 		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)

  0009c	f6 c2 02	 test	 dl, 2
  0009f	74 24		 je	 SHORT $LN8@seekpos
  000a1	85 c9		 test	 ecx, ecx
  000a3	74 20		 je	 SHORT $LN8@seekpos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  000a5	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000a8	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000ab	8b 10		 mov	 edx, DWORD PTR [eax]

; 299  : 		*_IPfirst = _First;

  000ad	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 258  : 		return (*_IPnext + *_IPcount);

  000b0	03 11		 add	 edx, DWORD PTR [ecx]

; 299  : 		*_IPfirst = _First;

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR __Seeklow$1$[ebp]
  000b5	89 08		 mov	 DWORD PTR [eax], ecx

; 300  : 		*_IPnext = _Next;

  000b7	03 cf		 add	 ecx, edi
  000b9	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000bc	2b d1		 sub	 edx, ecx
  000be	89 08		 mov	 DWORD PTR [eax], ecx
  000c0	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000c3	89 10		 mov	 DWORD PTR [eax], edx
$LN8@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  000c5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c8	89 38		 mov	 DWORD PTR [eax], edi
  000ca	89 58 04	 mov	 DWORD PTR [eax+4], ebx
$LN31@seekpos:
  000cd	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 358  : 		}

  000ce	0f 57 c0	 xorps	 xmm0, xmm0
  000d1	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000d8	5e		 pop	 esi
  000d9	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000e0	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Newoff$ = -28						; size = 8
tv183 = -20						; size = 4
tv248 = -16						; size = 4
__Seeklow$1$ = -12					; size = 4
__Seekdist$1$ = -8					; size = 4
__Gptr_old$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Off$2$ = 20						; size = 4
__Way$ = 20						; size = 4
__Newptr$1$ = 24					; size = 4
__Mode$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 249  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	8b 38		 mov	 edi, DWORD PTR [eax]

; 235  : 		return (*_IPnext);

  00010	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 225  : 		return (*_IGnext);

  00013	89 7d fc	 mov	 DWORD PTR __Gptr_old$1$[ebp], edi

; 235  : 		return (*_IPnext);

  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 252  : 		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)

  00018	85 c9		 test	 ecx, ecx
  0001a	74 08		 je	 SHORT $LN4@seekoff
  0001c	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  0001f	73 03		 jae	 SHORT $LN4@seekoff

; 253  : 			{	// update high-water pointer
; 254  : 			_Seekhigh = _Pptr_old;

  00021	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN4@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00024	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 260  : 		switch (_Way)

  00027	8b 5d 18	 mov	 ebx, DWORD PTR __Mode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 258  : 		const auto _Seekdist = _Seekhigh - _Seeklow;

  0002c	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0002f	89 45 ec	 mov	 DWORD PTR tv183[ebp], eax
  00032	2b c2		 sub	 eax, edx
  00034	89 45 f8	 mov	 DWORD PTR __Seekdist$1$[ebp], eax

; 260  : 		switch (_Way)

  00037	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0003a	89 55 f4	 mov	 DWORD PTR __Seeklow$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 260  : 		switch (_Way)

  0003d	83 e8 00	 sub	 eax, 0
  00040	74 62		 je	 SHORT $LN5@seekoff
  00042	83 e8 01	 sub	 eax, 1
  00045	74 0f		 je	 SHORT $LN7@seekoff
  00047	83 e8 01	 sub	 eax, 1
  0004a	75 43		 jne	 SHORT $LN13@seekoff

; 264  : 				break;
; 265  : 			case ios_base::end:
; 266  : 				_Newoff = _Seekdist;

  0004c	8b 45 f8	 mov	 eax, DWORD PTR __Seekdist$1$[ebp]
  0004f	99		 cdq
  00050	8b f8		 mov	 edi, eax
  00052	8b c2		 mov	 eax, edx

; 267  : 				break;

  00054	eb 5c		 jmp	 SHORT $LN2@seekoff
$LN7@seekoff:

; 268  : 			case ios_base::cur:
; 269  : 				{
; 270  : 				constexpr auto _Both = ios_base::in | ios_base::out;
; 271  : 				if ((_Mode & _Both) != _Both)

  00056	8b c3		 mov	 eax, ebx
  00058	83 e0 03	 and	 eax, 3
  0005b	3c 03		 cmp	 al, 3
  0005d	74 30		 je	 SHORT $LN13@seekoff

; 272  : 					{	// prohibited by N4727 [stringbuf.virtuals] Table 107 "seekoff positioning"
; 273  : 					if (_Mode & ios_base::in)

  0005f	f6 c3 01	 test	 bl, 1
  00062	74 13		 je	 SHORT $LN9@seekoff

; 274  : 						{
; 275  : 						if (_Gptr_old != nullptr || _Seeklow == nullptr)

  00064	85 ff		 test	 edi, edi
  00066	75 04		 jne	 SHORT $LN12@seekoff
  00068	85 d2		 test	 edx, edx
  0006a	75 23		 jne	 SHORT $LN13@seekoff
$LN12@seekoff:

; 276  : 							{
; 277  : 							_Newoff = _Gptr_old - _Seeklow;

  0006c	8b c7		 mov	 eax, edi
  0006e	2b c2		 sub	 eax, edx
  00070	99		 cdq
  00071	8b f8		 mov	 edi, eax
  00073	8b c2		 mov	 eax, edx

; 278  : 							break;

  00075	eb 3b		 jmp	 SHORT $LN2@seekoff
$LN9@seekoff:

; 279  : 							}
; 280  : 						}
; 281  : 					else if ((_Mode & ios_base::out) && (_Pptr_old != nullptr || _Seeklow == nullptr))

  00077	f6 c3 02	 test	 bl, 2
  0007a	74 13		 je	 SHORT $LN13@seekoff
  0007c	85 c9		 test	 ecx, ecx
  0007e	75 04		 jne	 SHORT $LN14@seekoff
  00080	85 d2		 test	 edx, edx
  00082	75 0b		 jne	 SHORT $LN13@seekoff
$LN14@seekoff:

; 282  : 						{
; 283  : 						_Newoff = _Pptr_old - _Seeklow;

  00084	8b c1		 mov	 eax, ecx
  00086	2b c2		 sub	 eax, edx
  00088	99		 cdq
  00089	8b f8		 mov	 edi, eax
  0008b	8b c2		 mov	 eax, edx

; 284  : 						break;

  0008d	eb 23		 jmp	 SHORT $LN2@seekoff
$LN13@seekoff:

; 319  : 		}

  0008f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00092	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00098	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  0009f	e9 97 00 00 00	 jmp	 $LN46@seekoff
$LN5@seekoff:
  000a4	0f 57 c0	 xorps	 xmm0, xmm0

; 261  : 			{
; 262  : 			case ios_base::beg:
; 263  : 				_Newoff = 0;

  000a7	66 0f 13 45 e4	 movlpd	 QWORD PTR __Newoff$[ebp], xmm0
  000ac	8b 45 e8	 mov	 eax, DWORD PTR __Newoff$[ebp+4]
  000af	8b 7d e4	 mov	 edi, DWORD PTR __Newoff$[ebp]
$LN2@seekoff:

; 285  : 						}
; 286  : 					}
; 287  : 				}
; 288  : 
; 289  : 				// fallthrough
; 290  : 			default:
; 291  : 				return (pos_type(off_type(-1)));
; 292  : 			}
; 293  : 
; 294  : 		if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist))

  000b2	03 7d 0c	 add	 edi, DWORD PTR __Off$[ebp]
  000b5	13 45 10	 adc	 eax, DWORD PTR __Off$[ebp+4]
  000b8	89 45 14	 mov	 DWORD PTR __Off$2$[ebp], eax
  000bb	8b 45 f8	 mov	 eax, DWORD PTR __Seekdist$1$[ebp]
  000be	99		 cdq
  000bf	39 55 14	 cmp	 DWORD PTR __Off$2$[ebp], edx
  000c2	72 06		 jb	 SHORT $LN16@seekoff
  000c4	77 c9		 ja	 SHORT $LN13@seekoff
  000c6	3b f8		 cmp	 edi, eax
  000c8	77 c5		 ja	 SHORT $LN13@seekoff
$LN16@seekoff:

; 295  : 			{
; 296  : 			return (pos_type(off_type(-1)));
; 297  : 			}
; 298  : 
; 299  : 		_Off += _Newoff;
; 300  : 		if (_Off != 0
; 301  : 			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)

  000ca	8b 55 fc	 mov	 edx, DWORD PTR __Gptr_old$1$[ebp]
  000cd	8b c7		 mov	 eax, edi
  000cf	0b 45 14	 or	 eax, DWORD PTR __Off$2$[ebp]
  000d2	74 12		 je	 SHORT $LN17@seekoff
  000d4	f6 c3 01	 test	 bl, 1
  000d7	74 04		 je	 SHORT $LN19@seekoff
  000d9	85 d2		 test	 edx, edx
  000db	74 b2		 je	 SHORT $LN13@seekoff
$LN19@seekoff:
  000dd	f6 c3 02	 test	 bl, 2
  000e0	74 04		 je	 SHORT $LN17@seekoff
  000e2	85 c9		 test	 ecx, ecx
  000e4	74 a9		 je	 SHORT $LN13@seekoff
$LN17@seekoff:

; 302  : 				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
; 303  : 			{
; 304  : 			return (pos_type(off_type(-1)));
; 305  : 			}
; 306  : 
; 307  : 		const auto _Newptr = _Seeklow + _Off;	// may perform nullptr + 0

  000e6	8b 45 f4	 mov	 eax, DWORD PTR __Seeklow$1$[ebp]
  000e9	03 c7		 add	 eax, edi
  000eb	89 45 18	 mov	 DWORD PTR __Newptr$1$[ebp], eax

; 308  : 		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)

  000ee	f6 c3 01	 test	 bl, 1
  000f1	74 13		 je	 SHORT $LN20@seekoff
  000f3	85 d2		 test	 edx, edx
  000f5	74 0f		 je	 SHORT $LN20@seekoff
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  000f7	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  000fa	89 02		 mov	 DWORD PTR [edx], eax

; 253  : 		*_IGcount = (int)(_Last - _Next);

  000fc	8b 55 ec	 mov	 edx, DWORD PTR tv183[ebp]
  000ff	2b d0		 sub	 edx, eax
  00101	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00104	89 10		 mov	 DWORD PTR [eax], edx
$LN20@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 313  : 		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)

  00106	f6 c3 02	 test	 bl, 2
  00109	74 25		 je	 SHORT $LN21@seekoff
  0010b	85 c9		 test	 ecx, ecx
  0010d	74 21		 je	 SHORT $LN21@seekoff
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  0010f	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00112	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00115	8b 10		 mov	 edx, DWORD PTR [eax]

; 299  : 		*_IPfirst = _First;

  00117	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 258  : 		return (*_IPnext + *_IPcount);

  0011a	03 11		 add	 edx, DWORD PTR [ecx]

; 299  : 		*_IPfirst = _First;

  0011c	8b 4d f4	 mov	 ecx, DWORD PTR __Seeklow$1$[ebp]
  0011f	89 08		 mov	 DWORD PTR [eax], ecx

; 300  : 		*_IPnext = _Next;

  00121	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00124	8b 4d 18	 mov	 ecx, DWORD PTR __Newptr$1$[ebp]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  00127	2b d1		 sub	 edx, ecx
  00129	89 08		 mov	 DWORD PTR [eax], ecx
  0012b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0012e	89 10		 mov	 DWORD PTR [eax], edx
$LN21@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00130	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00133	8b 4d 14	 mov	 ecx, DWORD PTR __Off$2$[ebp]
  00136	89 38		 mov	 DWORD PTR [eax], edi
  00138	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN46@seekoff:
  0013b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 319  : 		}

  0013c	0f 57 c0	 xorps	 xmm0, xmm0
  0013f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00146	5e		 pop	 esi
  00147	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0014e	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 216  : 		{	// get an element from stream, but don't point past it

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi
  00003	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00004	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  00007	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 218  : 		if (_Gptr == nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 47		 je	 SHORT $LN5@underflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  0000d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 223  : 		if (_Gptr < _Mysb::egptr())

  00014	3b c8		 cmp	 ecx, eax
  00016	73 06		 jae	 SHORT $LN3@underflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00018	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0001b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  0001c	5e		 pop	 esi
  0001d	c3		 ret	 0
$LN3@underflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  0001e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 229  : 		const auto _Pptr = _Mysb::pptr();

  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	85 c0		 test	 eax, eax

; 230  : 		if (!_Pptr || (_Mystate & _Noread))

  00025	74 2d		 je	 SHORT $LN5@underflow
  00027	f6 42 3c 04	 test	 BYTE PTR [edx+60], 4
  0002b	75 27		 jne	 SHORT $LN5@underflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0002d	8b 72 38	 mov	 esi, DWORD PTR [edx+56]
  00030	3b f0		 cmp	 esi, eax
  00032	0f 42 f0	 cmovb	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 236  : 		if (_Local_highwater <= _Gptr)

  00035	3b f1		 cmp	 esi, ecx
  00037	76 1b		 jbe	 SHORT $LN5@underflow

; 237  : 			{	// nothing in the put area to take
; 238  : 			return (_Traits::eof());
; 239  : 			}
; 240  : 
; 241  : 		_Seekhigh = _Local_highwater;

  00039	89 72 38	 mov	 DWORD PTR [edx+56], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  0003c	8b c7		 mov	 eax, edi

; 225  : 		return (*_IGnext);

  0003e	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00040	2b f1		 sub	 esi, ecx
  00042	5f		 pop	 edi

; 252  : 		*_IGnext = _Next;

  00043	89 08		 mov	 DWORD PTR [eax], ecx

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00045	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00048	89 30		 mov	 DWORD PTR [eax], esi

; 225  : 		return (*_IGnext);

  0004a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  0004d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00050	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  00053	c3		 ret	 0
$LN5@underflow:
  00054	5f		 pop	 edi

; 231  : 			{	// no put area or read disallowed
; 232  : 			return (_Traits::eof());

  00055	83 c8 ff	 or	 eax, -1

; 244  : 		}

  00058	5e		 pop	 esi
  00059	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 194  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00003	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 194  : 		{	// put an element back to stream

  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00007	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00009	85 f6		 test	 esi, esi
  0000b	74 3f		 je	 SHORT $LN3@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0000d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	76 38		 jbe	 SHORT $LN3@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00014	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00017	83 fa ff	 cmp	 edx, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0001a	74 0b		 je	 SHORT $LN2@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 511  : 		return (_Left == _Right);

  0001c	3a 56 ff	 cmp	 dl, BYTE PTR [esi-1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0001f	74 06		 je	 SHORT $LN2@pbackfail
  00021	f6 41 3c 02	 test	 BYTE PTR [ecx+60], 2
  00025	75 25		 jne	 SHORT $LN3@pbackfail
$LN2@pbackfail:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 245  : 		*_IGcount -= _Off;

  00027	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0002a	ff 00		 inc	 DWORD PTR [eax]

; 246  : 		*_IGnext += _Off;

  0002c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0002f	ff 08		 dec	 DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00031	83 fa ff	 cmp	 edx, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 207  : 		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00034	74 07		 je	 SHORT $LN4@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00036	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00039	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 209  : 			*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0003b	88 11		 mov	 BYTE PTR [ecx], dl
$LN4@pbackfail:

; 210  : 			}
; 211  : 
; 212  : 		return (_Traits::not_eof(_Meta));

  0003d	33 c0		 xor	 eax, eax
  0003f	83 fa ff	 cmp	 edx, -1
  00042	5e		 pop	 esi
  00043	0f 44 d0	 cmove	 edx, eax
  00046	8b c2		 mov	 eax, edx

; 213  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN3@pbackfail:

; 199  : 				&& !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])
; 200  : 				&& (_Mystate & _Constant)))
; 201  : 			{	// can't put back, fail
; 202  : 			return (_Traits::eof());

  0004c	83 c8 ff	 or	 eax, -1
  0004f	5e		 pop	 esi

; 213  : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Oldptr$1$ = -12					; size = 4
__Newsize$1$ = -8					; size = 4
__Newptr$1$ = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 119  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 120  : 		if (_Mystate & _Constant)

  0000b	f6 46 3c 02	 test	 BYTE PTR [esi+60], 2
  0000f	0f 85 2b 01 00
	00		 jne	 $LN10@overflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00015	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  00018	83 fb ff	 cmp	 ebx, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 125  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0001b	75 0b		 jne	 SHORT $LN3@overflow

; 190  : 		return (_Meta);
; 191  : 		}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	33 c0		 xor	 eax, eax
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN3@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00028	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0002b	8b 38		 mov	 edi, DWORD PTR [eax]

; 258  : 		return (*_IPnext + *_IPcount);

  0002d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	03 cf		 add	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 132  : 		if (_Pptr != nullptr && _Pptr < _Epptr)

  00034	85 ff		 test	 edi, edi
  00036	74 1f		 je	 SHORT $LN4@overflow
  00038	3b f9		 cmp	 edi, ecx
  0003a	73 1b		 jae	 SHORT $LN4@overflow

; 133  : 			{	// room in buffer, store it
; 134  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0003c	8b ce		 mov	 ecx, esi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ

; 135  : 			_Seekhigh = _Pptr + 1;

  00044	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00047	5f		 pop	 edi
  00048	88 18		 mov	 BYTE PTR [eax], bl

; 136  : 			return (_Meta);

  0004a	8b c3		 mov	 eax, ebx
  0004c	89 4e 38	 mov	 DWORD PTR [esi+56], ecx

; 190  : 		return (_Meta);
; 191  : 		}

  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN4@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00057	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 148  : 		if (_Oldsize < _MINSIZE)

  0005c	2b c8		 sub	 ecx, eax
  0005e	f7 df		 neg	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00060	89 45 f4	 mov	 DWORD PTR __Oldptr$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 148  : 		if (_Oldsize < _MINSIZE)

  00063	1b ff		 sbb	 edi, edi
  00065	23 f9		 and	 edi, ecx
  00067	83 ff 20	 cmp	 edi, 32			; 00000020H
  0006a	73 07		 jae	 SHORT $LN6@overflow

; 149  : 			{
; 150  : 			_Newsize = _MINSIZE;

  0006c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00071	eb 1e		 jmp	 SHORT $LN68@overflow
$LN6@overflow:

; 151  : 			}
; 152  : 		else if (_Oldsize < INT_MAX / 2)

  00073	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00079	73 05		 jae	 SHORT $LN8@overflow

; 153  : 			{	// grow by 50 percent
; 154  : 			_Newsize = _Oldsize << 1;

  0007b	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  0007e	eb 11		 jmp	 SHORT $LN68@overflow
$LN8@overflow:

; 155  : 			}
; 156  : 		else if (_Oldsize < INT_MAX)

  00080	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00086	0f 83 b4 00 00
	00		 jae	 $LN10@overflow

; 157  : 			{
; 158  : 			_Newsize = INT_MAX;

  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN68@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00091	50		 push	 eax
  00092	89 45 f8	 mov	 DWORD PTR __Newsize$1$[ebp], eax
  00095	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009a	57		 push	 edi
  0009b	ff 75 f4	 push	 DWORD PTR __Oldptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 165  : 		const auto _Newptr = _Unfancy(_Al.allocate(_Newsize));

  0009e	89 45 fc	 mov	 DWORD PTR __Newptr$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 168  : 		const auto _New_pnext = _Newptr + _Oldsize;

  000a7	8b 55 fc	 mov	 edx, DWORD PTR __Newptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000aa	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  000ad	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 168  : 		const auto _New_pnext = _Newptr + _Oldsize;

  000b0	03 d7		 add	 edx, edi

; 169  : 		_Seekhigh = _New_pnext + 1; // to include _Meta

  000b2	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000b5	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __Newptr$1$[ebp]
  000bb	89 08		 mov	 DWORD PTR [eax], ecx

; 300  : 		*_IPnext = _Next;
; 301  : 		*_IPcount = (int)(_Last - _Next);

  000bd	2b ca		 sub	 ecx, edx
  000bf	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000c2	03 4d f8	 add	 ecx, DWORD PTR __Newsize$1$[ebp]
  000c5	89 10		 mov	 DWORD PTR [eax], edx
  000c7	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000ca	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 172  : 		if (_Mystate & _Noread)

  000cc	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  000d0	74 18		 je	 SHORT $LN12@overflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  000d2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR __Newptr$1$[ebp]
  000d8	89 08		 mov	 DWORD PTR [eax], ecx

; 252  : 		*_IGnext = _Next;

  000da	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000dd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  000e3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000e6	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 176  : 		else

  000e8	eb 25		 jmp	 SHORT $LN13@overflow
$LN12@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  000ea	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 178  : 			_Mysb::setg(_Newptr,

  000ed	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  000f0	8b 5d fc	 mov	 ebx, DWORD PTR __Newptr$1$[ebp]

; 225  : 		return (*_IGnext);

  000f3	8b 08		 mov	 ecx, DWORD PTR [eax]

; 251  : 		*_IGfirst = _First;

  000f5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 225  : 		return (*_IGnext);

  000f8	2b 4d f4	 sub	 ecx, DWORD PTR __Oldptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 178  : 			_Mysb::setg(_Newptr,

  000fb	03 4d fc	 add	 ecx, DWORD PTR __Newptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 253  : 		*_IGcount = (int)(_Last - _Next);

  000fe	2b d1		 sub	 edx, ecx
  00100	89 18		 mov	 DWORD PTR [eax], ebx
  00102	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00105	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]

; 252  : 		*_IGnext = _Next;

  00108	89 08		 mov	 DWORD PTR [eax], ecx

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0010a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0010d	89 10		 mov	 DWORD PTR [eax], edx
$LN13@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 183  : 		if (_Mystate & _Allocated)

  0010f	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00112	a8 01		 test	 al, 1
  00114	74 0f		 je	 SHORT $LN14@overflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00116	57		 push	 edi
  00117	ff 75 f4	 push	 DWORD PTR __Oldptr$1$[ebp]
  0011a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0011f	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00122	83 c4 08	 add	 esp, 8
$LN14@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 188  : 		_Mystate |= _Allocated;

  00125	83 c8 01	 or	 eax, 1

; 189  : 		*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00128	8b ce		 mov	 ecx, esi
  0012a	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00133	5f		 pop	 edi

; 190  : 		return (_Meta);
; 191  : 		}

  00134	5e		 pop	 esi
  00135	88 18		 mov	 BYTE PTR [eax], bl
  00137	8b c3		 mov	 eax, ebx
  00139	5b		 pop	 ebx
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 04 00	 ret	 4
$LN10@overflow:
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	83 c8 ff	 or	 eax, -1
  00145	5b		 pop	 ebx
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 77   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 402  : 		if (_Mystate & _Allocated)

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1

; 77   : 		{	// destroy the object

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 402  : 		if (_Mystate & _Allocated)

  0000d	74 2d		 je	 SHORT $LN4@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  0000f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	85 c9		 test	 ecx, ecx
  00016	74 09		 je	 SHORT $LN6@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0001f	eb 0a		 jmp	 SHORT $LN7@basic_stri
$LN6@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  00021	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00024	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	03 11		 add	 edx, DWORD PTR [ecx]
$LN7@basic_stri:

; 220  : 		return (*_IGfirst);

  0002b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	52		 push	 edx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00039	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  0003c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 79   : 		}

  0003f	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  00047	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00050	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 292  : 		*_IPfirst = _First;

  00059	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  : 		*_IPnext = _First;

  00062	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  0006b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0006e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 412  : 		_Mystate &= ~_Allocated;

  00074	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  00078	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 79   : 		}

  0007f	5e		 pop	 esi
  00080	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__State$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Str$ = 8						; size = 4
tv430 = 12						; size = 4
__Result$1$ = 12					; size = 4
__Mode$ = 12						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 38   : 		{	// construct character buffer from string, mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ

; 431  : 		if (!(_Mode & ios_base::out))

  00033	8b 5d 0c	 mov	 ebx, DWORD PTR __Mode$[ebp]
  00036	8b d3		 mov	 edx, ebx
  00038	f7 d2		 not	 edx

; 38   : 		{	// construct character buffer from string, mode

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 431  : 		if (!(_Mode & ios_base::out))

  00040	83 e2 01	 and	 edx, 1

; 38   : 		{	// construct character buffer from string, mode

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 431  : 		if (!(_Mode & ios_base::out))

  0004a	c1 e2 02	 shl	 edx, 2
  0004d	8b c3		 mov	 eax, ebx

; 432  : 			{
; 433  : 			_State |= _Constant;
; 434  : 			}
; 435  : 
; 436  : 		if (_Mode & ios_base::app)

  0004f	8b ca		 mov	 ecx, edx
  00051	83 c9 02	 or	 ecx, 2
  00054	24 02		 and	 al, 2
  00056	8b c3		 mov	 eax, ebx
  00058	0f 45 ca	 cmovne	 ecx, edx

; 441  : 		if (_Mode & ios_base::ate)

  0005b	8b d1		 mov	 edx, ecx
  0005d	83 ca 08	 or	 edx, 8
  00060	24 08		 and	 al, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00062	8b 45 08	 mov	 eax, DWORD PTR __Str$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 441  : 		if (_Mode & ios_base::ate)

  00065	0f 44 d1	 cmove	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00068	8b ca		 mov	 ecx, edx
  0006a	83 c9 10	 or	 ecx, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 441  : 		if (_Mode & ios_base::ate)

  0006d	80 e3 04	 and	 bl, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00070	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]
  00073	0f 44 ca	 cmove	 ecx, edx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00076	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0007a	8d 50 04	 lea	 edx, DWORD PTR [eax+4]

; 3302 : 		return (this->_Get_data()._Mysize);

  0007d	89 4d f0	 mov	 DWORD PTR __State$1$[ebp], ecx

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00080	89 55 0c	 mov	 DWORD PTR __Result$1$[ebp], edx

; 1815 : 		if (_Large_string_engaged())

  00083	72 05		 jb	 SHORT $LN29@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00085	8b 12		 mov	 edx, DWORD PTR [edx]
  00087	89 55 0c	 mov	 DWORD PTR __Result$1$[ebp], edx
$LN29@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 362  : 		if (_Count > INT_MAX)

  0008a	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00090	0f 87 ad 00 00
	00		 ja	 $LN63@basic_stri

; 365  : 			}
; 366  : 
; 367  : 		if (_Count != 0 && (_State & (_Noread | _Constant)) != (_Noread | _Constant))

  00096	85 db		 test	 ebx, ebx
  00098	0f 84 85 00 00
	00		 je	 $LN37@basic_stri
  0009e	8b c1		 mov	 eax, ecx
  000a0	83 e0 06	 and	 eax, 6
  000a3	3c 06		 cmp	 al, 6
  000a5	74 7c		 je	 SHORT $LN37@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  000a7	53		 push	 ebx
  000a8	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ad	53		 push	 ebx
  000ae	ff 75 0c	 push	 DWORD PTR __Result$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 369  : 			const auto _Pnew = _Unfancy(_Al.allocate(_Count));

  000b1	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 371  : 			_Seekhigh = _Pnew + _Count;

  000b9	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000bc	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 371  : 			_Seekhigh = _Pnew + _Count;

  000bf	89 4e 38	 mov	 DWORD PTR [esi+56], ecx

; 372  : 
; 373  : 			if (!(_State & _Noread))

  000c2	8b 4d f0	 mov	 ecx, DWORD PTR __State$1$[ebp]
  000c5	8b c1		 mov	 eax, ecx
  000c7	83 e0 04	 and	 eax, 4
  000ca	89 45 0c	 mov	 DWORD PTR tv430[ebp], eax
  000cd	75 0f		 jne	 SHORT $LN39@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  000cf	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000d2	89 38		 mov	 DWORD PTR [eax], edi

; 252  : 		*_IGnext = _Next;

  000d4	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000d7	89 38		 mov	 DWORD PTR [eax], edi

; 253  : 		*_IGcount = (int)(_Last - _Next);

  000d9	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000dc	89 18		 mov	 DWORD PTR [eax], ebx
$LN39@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 378  : 			if (!(_State & _Constant))

  000de	f6 c1 02	 test	 cl, 2
  000e1	75 3b		 jne	 SHORT $LN41@basic_stri

; 379  : 				{	// setup write buffer, and maybe read buffer
; 380  : 				_Mysb::setp(_Pnew,

  000e3	f6 c1 18	 test	 cl, 24			; 00000018H
  000e6	74 07		 je	 SHORT $LN43@basic_stri
  000e8	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000eb	8b da		 mov	 ebx, edx
  000ed	eb 05		 jmp	 SHORT $LN44@basic_stri
$LN43@basic_stri:
  000ef	8b 5e 38	 mov	 ebx, DWORD PTR [esi+56]
  000f2	8b d7		 mov	 edx, edi
$LN44@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  000f4	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000f7	2b da		 sub	 ebx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 384  : 				if (_State & _Noread)

  000f9	83 7d 0c 00	 cmp	 DWORD PTR tv430[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  000fd	89 38		 mov	 DWORD PTR [eax], edi

; 300  : 		*_IPnext = _Next;

  000ff	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00102	89 10		 mov	 DWORD PTR [eax], edx

; 301  : 		*_IPcount = (int)(_Last - _Next);

  00104	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00107	89 18		 mov	 DWORD PTR [eax], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 384  : 				if (_State & _Noread)

  00109	74 13		 je	 SHORT $LN41@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  0010b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0010e	89 38		 mov	 DWORD PTR [eax], edi

; 252  : 		*_IGnext = _Next;

  00110	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00113	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00119	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0011c	89 38		 mov	 DWORD PTR [eax], edi
$LN41@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 390  : 			_State |= _Allocated;

  0011e	83 c9 01	 or	 ecx, 1

; 391  : 			}
; 392  : 		else

  00121	eb 07		 jmp	 SHORT $LN38@basic_stri
$LN37@basic_stri:

; 393  : 			{
; 394  : 			_Seekhigh = nullptr;

  00123	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
$LN38@basic_stri:

; 395  : 			}
; 396  : 
; 397  : 		_Mystate = _State;

  0012a	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx

; 39   : 		_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
; 40   : 		}

  0012d	8b c6		 mov	 eax, esi
  0012f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00132	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00139	59		 pop	 ecx
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 08 00	 ret	 8
$LN63@basic_stri:

; 364  : 			_Xbad_alloc();

  00143	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN61@basic_stri:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??1?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_istringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 523  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]

; 524  : 		}

  00006	8d 4e b0	 lea	 ecx, DWORD PTR [esi-80]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00014	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  0001d	89 44 32 9c	 mov	 DWORD PTR [edx+esi-100], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00026	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  00029	5e		 pop	 esi
  0002a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
??1?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_istringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
_this$ = -24						; size = 4
__State$1$ = -20					; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Str$ = 8						; size = 4
$T3 = 12						; size = 4
__Mode$ = 12						; size = 4
$T4 = 16						; size = 4
__Result$1$ = 16					; size = 4
_$initVBases$ = 16					; size = 4
??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z PROC ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 486  : 		{	// construct readable character buffer from NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi
  0002d	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00038	74 1d		 je	 SHORT $LN2@basic_istr
  0003a	8d 4f 60	 lea	 ecx, DWORD PTR [edi+96]
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
$LN2@basic_istr:

; 442  : 			{
; 443  : 			_State |= _Atend;
; 444  : 			}
; 445  : 
; 446  : 		return (_State);
; 447  : 		}
; 448  : 
; 449  : 	_Elem * _Seekhigh;	// the high-water pointer in character array
; 450  : 	int _Mystate;	// the stream state
; 451  : 	allocator_type _Al;	// the allocator object
; 452  : 	};
; 453  : 
; 454  : template<class _Elem,
; 455  : 	class _Traits,
; 456  : 	class _Alloc> inline
; 457  : 	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
; 458  : 		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
; 459  : 	{	// swap _Left and _Right basic_stringbufs
; 460  : 	_Left.swap(_Right);
; 461  : 	}
; 462  : 
; 463  : 		// CLASS TEMPLATE basic_istringstream
; 464  : template<class _Elem,
; 465  : 	class _Traits,
; 466  : 	class _Alloc>
; 467  : 	class basic_istringstream
; 468  : 		: public basic_istream<_Elem, _Traits>
; 469  : 	{	// input stream associated with a character array
; 470  : public:
; 471  : 	typedef basic_istream<_Elem, _Traits> _Mybase;
; 472  : 	typedef _Alloc allocator_type;
; 473  : 	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
; 474  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 475  : 
; 476  : 	explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
; 477  : 		: _Mybase(&_Stringbuffer),
; 478  : 			_Stringbuffer(_Mode | ios_base::in)
; 479  : 		{	// construct empty readable character buffer
; 480  : 		}
; 481  : 
; 482  : 	explicit basic_istringstream(const _Mystr& _Str,
; 483  : 		ios_base::openmode _Mode = ios_base::in)
; 484  : 		: _Mybase(&_Stringbuffer),

  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
  0005e	8b cf		 mov	 ecx, edi
  00060	56		 push	 esi
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z

; 486  : 		{	// construct readable character buffer from NTCS

  00067	8b 07		 mov	 eax, DWORD PTR [edi]
  00069	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00070	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00073	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0007a	8b 07		 mov	 eax, DWORD PTR [edi]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	89 75 e4	 mov	 DWORD PTR _this$[ebp], esi
  00082	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  00085	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax

; 38   : 		{	// construct character buffer from string, mode

  00089	8b ce		 mov	 ecx, esi
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ

; 431  : 		if (!(_Mode & ios_base::out))

  00091	8b 5d 0c	 mov	 ebx, DWORD PTR __Mode$[ebp]
  00094	8b cb		 mov	 ecx, ebx
  00096	f7 d1		 not	 ecx

; 38   : 		{	// construct character buffer from string, mode

  00098	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 431  : 		if (!(_Mode & ios_base::out))

  0009e	83 e1 02	 and	 ecx, 2

; 38   : 		{	// construct character buffer from string, mode

  000a1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 441  : 		if (_Mode & ios_base::ate)

  000a5	8b d1		 mov	 edx, ecx
  000a7	8b c3		 mov	 eax, ebx
  000a9	83 ca 08	 or	 edx, 8
  000ac	24 08		 and	 al, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  000ae	8b 45 08	 mov	 eax, DWORD PTR __Str$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 441  : 		if (_Mode & ios_base::ate)

  000b1	0f 44 d1	 cmove	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  000b4	8b ca		 mov	 ecx, edx
  000b6	83 c9 10	 or	 ecx, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 441  : 		if (_Mode & ios_base::ate)

  000b9	80 e3 04	 and	 bl, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000bc	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]

; 3302 : 		return (this->_Get_data()._Mysize);

  000bf	0f 44 ca	 cmove	 ecx, edx

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000c2	89 5d 10	 mov	 DWORD PTR __Result$1$[ebp], ebx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000c5	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 3302 : 		return (this->_Get_data()._Mysize);

  000c9	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000cc	89 4d ec	 mov	 DWORD PTR __State$1$[ebp], ecx
  000cf	89 55 0c	 mov	 DWORD PTR $T3[ebp], edx

; 1815 : 		if (_Large_string_engaged())

  000d2	72 05		 jb	 SHORT $LN36@basic_istr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000d4	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  000d6	89 5d 10	 mov	 DWORD PTR __Result$1$[ebp], ebx
$LN36@basic_istr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 362  : 		if (_Count > INT_MAX)

  000d9	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH
  000df	0f 87 89 00 00
	00		 ja	 $LN71@basic_istr

; 365  : 			}
; 366  : 
; 367  : 		if (_Count != 0 && (_State & (_Noread | _Constant)) != (_Noread | _Constant))

  000e5	85 d2		 test	 edx, edx
  000e7	74 65		 je	 SHORT $LN44@basic_istr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ef	ff 75 0c	 push	 DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 369  : 			const auto _Pnew = _Unfancy(_Al.allocate(_Count));

  000f2	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000f4	ff 75 10	 push	 DWORD PTR __Result$1$[ebp]
  000f7	53		 push	 ebx
  000f8	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 371  : 			_Seekhigh = _Pnew + _Count;

  000fd	8b 55 0c	 mov	 edx, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00100	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 371  : 			_Seekhigh = _Pnew + _Count;

  00103	8d 0c 13	 lea	 ecx, DWORD PTR [ebx+edx]
  00106	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00109	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0010c	89 19		 mov	 DWORD PTR [ecx], ebx

; 252  : 		*_IGnext = _Next;

  0010e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 378  : 			if (!(_State & _Constant))

  00111	8b 4d ec	 mov	 ecx, DWORD PTR __State$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  00114	89 18		 mov	 DWORD PTR [eax], ebx

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00116	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00119	89 10		 mov	 DWORD PTR [eax], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 378  : 			if (!(_State & _Constant))

  0011b	f6 c1 02	 test	 cl, 2
  0011e	75 29		 jne	 SHORT $LN48@basic_istr

; 379  : 				{	// setup write buffer, and maybe read buffer
; 380  : 				_Mysb::setp(_Pnew,

  00120	f6 c1 18	 test	 cl, 24			; 00000018H
  00123	74 08		 je	 SHORT $LN50@basic_istr
  00125	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00128	89 55 10	 mov	 DWORD PTR $T4[ebp], edx
  0012b	eb 08		 jmp	 SHORT $LN51@basic_istr
$LN50@basic_istr:
  0012d	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00130	8b d3		 mov	 edx, ebx
  00132	89 45 10	 mov	 DWORD PTR $T4[ebp], eax
$LN51@basic_istr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  00135	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00138	89 18		 mov	 DWORD PTR [eax], ebx

; 300  : 		*_IPnext = _Next;

  0013a	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  0013d	8b 5d 10	 mov	 ebx, DWORD PTR $T4[ebp]
  00140	2b da		 sub	 ebx, edx
  00142	89 10		 mov	 DWORD PTR [eax], edx
  00144	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00147	89 18		 mov	 DWORD PTR [eax], ebx
$LN48@basic_istr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 390  : 			_State |= _Allocated;

  00149	83 c9 01	 or	 ecx, 1

; 391  : 			}
; 392  : 		else

  0014c	eb 07		 jmp	 SHORT $LN45@basic_istr
$LN44@basic_istr:

; 393  : 			{
; 394  : 			_Seekhigh = nullptr;

  0014e	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
$LN45@basic_istr:

; 395  : 			}
; 396  : 
; 397  : 		_Mystate = _State;

  00155	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx

; 487  : 		}

  00158	8b c7		 mov	 eax, edi
  0015a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00164	59		 pop	 ecx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 0c 00	 ret	 12			; 0000000cH
$LN71@basic_istr:

; 364  : 			_Xbad_alloc();

  0016e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN69@basic_istr:
  00173	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 10 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 60	 add	 ecx, 96			; 00000060H
  00016	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN5@basic_istr:
  0001c	c3		 ret	 0
__unwindfunclet$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$1:
  0001d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 18	 add	 ecx, 24			; 00000018H
  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
__unwindfunclet$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z$3:
  00029	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@H@Z ENDP ; std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

  00000	e9 00 00 00 00	 jmp	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 253  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 0c	 push	 DWORD PTR __Pvector$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 75 08	 push	 DWORD PTR __Parg$[ebp]
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >

; 254  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 47   : 		{	// return designated object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00004	8b 3e		 mov	 edi, DWORD PTR [esi]
  00006	85 ff		 test	 edi, edi
  00008	74 02		 je	 SHORT $LN24@operator
$LN23@operator:
  0000a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN24@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 50   : 		_STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

  0000c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000f	85 c0		 test	 eax, eax
  00011	75 42		 jne	 SHORT $LN6@operator
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0001d	50		 push	 eax
  0001e	6a 32		 push	 50			; 00000032H
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 18	 add	 esp, 24			; 00000018H
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 01		 jne	 SHORT $LN19@operator
  00035	cc		 int	 3
$LN19@operator:
  00036	6a 00		 push	 0
  00038	6a 32		 push	 50			; 00000032H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@DDPKBOFO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0004f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00052	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:

; 51   : 		_STL_VERIFY(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast,

  00055	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00058	77 05		 ja	 SHORT $LN13@operator
  0005a	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0005d	72 43		 jb	 SHORT $LN12@operator
$LN13@operator:
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00069	6a 00		 push	 0
  0006b	6a 34		 push	 52			; 00000034H
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00072	6a 02		 push	 2
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0007a	83 c4 18	 add	 esp, 24			; 00000018H
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 01		 jne	 SHORT $LN20@operator
  00082	cc		 int	 3
$LN20@operator:
  00083	6a 00		 push	 0
  00085	6a 34		 push	 52			; 00000034H
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@DDPKBOFO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter

; 52   : 			"can't dereference out of range vector iterator");
; 53   :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 54   : 
; 55   : 		return (*_Ptr);

  0009c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0009f	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@operator:

; 56   : 		}

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
__Parg$ = 8						; size = 4
__Lock$3 = 12						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 41   : 		: _Ptr(_Parg)

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 41   : 		: _Ptr(_Parg)

  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 148  : 		if (_Parent == nullptr)

  0003d	8b 7d 0c	 mov	 edi, DWORD PTR __Pvector$[ebp]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 ff		 test	 edi, edi
  00049	75 17		 jne	 SHORT $LN7@Vector_con

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	6a 03		 push	 3
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 152  : 			_Orphan_me();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

  0005d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]

; 155  : 		else

  00060	eb 26		 jmp	 SHORT $LN14@Vector_con
$LN7@Vector_con:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  00062	8b 3f		 mov	 edi, DWORD PTR [edi]

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

  00064	85 ff		 test	 edi, edi
  00066	74 26		 je	 SHORT $LN12@Vector_con

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

  00068	6a 03		 push	 3
  0006a	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 163  : 				_Orphan_me();

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  0007a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}

  0007d	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00080	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00083	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00086	89 3e		 mov	 DWORD PTR [esi], edi
$LN14@Vector_con:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 44   : 		}

  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN12@Vector_con:
  0008e	8b c6		 mov	 eax, esi
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$search@PBDPBD@std@@YAPBDQBD000@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last_possible$1$ = 20					; size = 4
__Last2$ = 20						; size = 4
??$search@PBDPBD@std@@YAPBDQBD000@Z PROC		; std::search<char const *,char const *>, COMDAT

; 987  : 	{	// find first [_First2, _Last2) match

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___CrtDbgReport
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm

; 987  : 	{	// find first [_First2, _Last2) match

  0000a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  0000b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___invalid_parameter
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm

; 987  : 	{	// find first [_First2, _Last2) match

  00011	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00012	8b 7d 08	 mov	 edi, DWORD PTR __First1$[ebp]
  00015	3b 7d 0c	 cmp	 edi, DWORD PTR __Last1$[ebp]
  00018	76 3e		 jbe	 SHORT $LN14@search
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00024	6a 00		 push	 0
  00026	68 2f 02 00 00	 push	 559			; 0000022fH
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00030	6a 02		 push	 2
  00032	ff d3		 call	 ebx
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 01		 jne	 SHORT $LN19@search
  0003c	cc		 int	 3
$LN19@search:
  0003d	6a 00		 push	 0
  0003f	68 2f 02 00 00	 push	 559			; 0000022fH
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00053	ff d6		 call	 esi
  00055	83 c4 14	 add	 esp, 20			; 00000014H
$LN14@search:
  00058	8b 55 10	 mov	 edx, DWORD PTR __First2$[ebp]
  0005b	3b 55 14	 cmp	 edx, DWORD PTR __Last2$[ebp]
  0005e	76 41		 jbe	 SHORT $LN29@search
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006a	6a 00		 push	 0
  0006c	68 2f 02 00 00	 push	 559			; 0000022fH
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00076	6a 02		 push	 2
  00078	ff d3		 call	 ebx
  0007a	83 c4 18	 add	 esp, 24			; 00000018H
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 01		 jne	 SHORT $LN34@search
  00082	cc		 int	 3
$LN34@search:
  00083	6a 00		 push	 0
  00085	68 2f 02 00 00	 push	 559			; 0000022fH
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00099	ff d6		 call	 esi
  0009b	8b 55 10	 mov	 edx, DWORD PTR __First2$[ebp]
  0009e	83 c4 14	 add	 esp, 20			; 00000014H
$LN29@search:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm

; 938  : 	if (_Last1 - _First1 >= _Count2)

  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
  000a4	8b c1		 mov	 eax, ecx
  000a6	8b 5d 14	 mov	 ebx, DWORD PTR __Last2$[ebp]
  000a9	2b c7		 sub	 eax, edi
  000ab	2b da		 sub	 ebx, edx
  000ad	3b c3		 cmp	 eax, ebx
  000af	0f 8c bd 00 00
	00		 jl	 $LN63@search

; 939  : 		{
; 940  : 		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);

  000b5	2b cb		 sub	 ecx, ebx

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  000b7	8b f3		 mov	 esi, ebx

; 940  : 		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);

  000b9	89 4d 14	 mov	 DWORD PTR __Last_possible$1$[ebp], ecx

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  000bc	8b cf		 mov	 ecx, edi
  000be	83 ee 04	 sub	 esi, 4
  000c1	72 11		 jb	 SHORT $LN69@search
$LL70@search:
  000c3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c5	3b 02		 cmp	 eax, DWORD PTR [edx]
  000c7	75 10		 jne	 SHORT $LN68@search
  000c9	83 c1 04	 add	 ecx, 4
  000cc	83 c2 04	 add	 edx, 4
  000cf	83 ee 04	 sub	 esi, 4
  000d2	73 ef		 jae	 SHORT $LL70@search
$LN69@search:
  000d4	83 fe fc	 cmp	 esi, -4			; fffffffcH
  000d7	74 34		 je	 SHORT $LN67@search
$LN68@search:
  000d9	8a 01		 mov	 al, BYTE PTR [ecx]
  000db	3a 02		 cmp	 al, BYTE PTR [edx]
  000dd	75 27		 jne	 SHORT $LN71@search
  000df	83 fe fd	 cmp	 esi, -3			; fffffffdH
  000e2	74 29		 je	 SHORT $LN67@search
  000e4	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000e7	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  000ea	75 1a		 jne	 SHORT $LN71@search
  000ec	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000ef	74 1c		 je	 SHORT $LN67@search
  000f1	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  000f4	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  000f7	75 0d		 jne	 SHORT $LN71@search
  000f9	83 fe ff	 cmp	 esi, -1
  000fc	74 0f		 je	 SHORT $LN67@search
  000fe	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00101	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00104	74 07		 je	 SHORT $LN67@search
$LN71@search:
  00106	1b c0		 sbb	 eax, eax
  00108	83 c8 01	 or	 eax, 1
  0010b	eb 02		 jmp	 SHORT $LN72@search
$LN67@search:
  0010d	33 c0		 xor	 eax, eax
$LN72@search:
  0010f	85 c0		 test	 eax, eax

; 943  : 			if (_Equal_rev_pred_unchecked(_First1, _First2, _Last2, _Pred))

  00111	74 55		 je	 SHORT $LN73@search
$LL48@search:

; 944  : 				{
; 945  : 				return (_First1);
; 946  : 				}
; 947  : 
; 948  : 			if (_First1 == _Last_possible)

  00113	3b 7d 14	 cmp	 edi, DWORD PTR __Last_possible$1$[ebp]
  00116	74 57		 je	 SHORT $LN77@search

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00118	8b 75 10	 mov	 esi, DWORD PTR __First2$[ebp]

; 941  : 		for (;; ++_First1)

  0011b	47		 inc	 edi

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0011c	8b cb		 mov	 ecx, ebx
  0011e	8b d7		 mov	 edx, edi
  00120	83 e9 04	 sub	 ecx, 4
  00123	72 11		 jb	 SHORT $LN75@search
$LL76@search:
  00125	8b 02		 mov	 eax, DWORD PTR [edx]
  00127	3b 06		 cmp	 eax, DWORD PTR [esi]
  00129	75 10		 jne	 SHORT $LN74@search
  0012b	83 c2 04	 add	 edx, 4
  0012e	83 c6 04	 add	 esi, 4
  00131	83 e9 04	 sub	 ecx, 4
  00134	73 ef		 jae	 SHORT $LL76@search
$LN75@search:
  00136	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00139	74 2d		 je	 SHORT $LN73@search
$LN74@search:
  0013b	8a 02		 mov	 al, BYTE PTR [edx]
  0013d	3a 06		 cmp	 al, BYTE PTR [esi]
  0013f	75 d2		 jne	 SHORT $LL48@search
  00141	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00144	74 22		 je	 SHORT $LN73@search
  00146	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00149	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0014c	75 c5		 jne	 SHORT $LL48@search
  0014e	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00151	74 15		 je	 SHORT $LN73@search
  00153	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00156	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00159	75 b8		 jne	 SHORT $LL48@search
  0015b	83 f9 ff	 cmp	 ecx, -1
  0015e	74 08		 je	 SHORT $LN73@search
  00160	8a 4a 03	 mov	 cl, BYTE PTR [edx+3]
  00163	3a 4e 03	 cmp	 cl, BYTE PTR [esi+3]
  00166	75 ab		 jne	 SHORT $LL48@search
$LN73@search:

; 988  : 	return (_STD search(_First1, _Last1, _First2, _Last2, equal_to<>()));

  00168	8b c7		 mov	 eax, edi
  0016a	5f		 pop	 edi

; 989  : 	}

  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
$LN77@search:

; 948  : 			if (_First1 == _Last_possible)

  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR __Last1$[ebp]
$LN63@search:
  00172	5f		 pop	 edi

; 989  : 	}

  00173	5e		 pop	 esi
  00174	8b c1		 mov	 eax, ecx
  00176	5b		 pop	 ebx
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
??$search@PBDPBD@std@@YAPBDQBD000@Z ENDP		; std::search<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1623 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  00022	51		 push	 ecx
  00023	ff 71 04	 push	 DWORD PTR [ecx+4]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1625 : 		}

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1618 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 252  : 		: _Mybase(_Parg, _Pvector)

  00022	51		 push	 ecx
  00023	ff 71 04	 push	 DWORD PTR [ecx+4]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >

; 1619 : 		return (iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1620 : 		}

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@DV?$allocator@D@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 582  : 		}

  00003	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABQADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 577  : 		}

  00003	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPADXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?begin@ByteBuffer@net@zl@@ABEPBDXZ
_TEXT	SEGMENT
$T2 = -28						; size = 12
__Lock$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?begin@ByteBuffer@net@zl@@ABEPBDXZ PROC			; zl::net::ByteBuffer::begin, COMDAT
; _this$ = ecx

; 288  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@ByteBuffer@net@zl@@ABEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 289  :         return &*buffer_.begin();

  00026	83 c1 08	 add	 ecx, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  00029	51		 push	 ecx
  0002a	ff 71 04	 push	 DWORD PTR [ecx+4]
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  0003c	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0003f	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00044	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00046	6a 03		 push	 3
  00048	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00058	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0005b	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00060	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00069	8b c6		 mov	 eax, esi

; 290  :     }

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@ByteBuffer@net@zl@@ABEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@ByteBuffer@net@zl@@ABEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@ByteBuffer@net@zl@@ABEPBDXZ ENDP			; zl::net::ByteBuffer::begin
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?begin@ByteBuffer@net@zl@@AAEPADXZ
_TEXT	SEGMENT
$T2 = -28						; size = 12
__Lock$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?begin@ByteBuffer@net@zl@@AAEPADXZ PROC			; zl::net::ByteBuffer::begin, COMDAT
; _this$ = ecx

; 283  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@ByteBuffer@net@zl@@AAEPADXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 284  :         return &*buffer_.begin();

  00026	83 c1 08	 add	 ecx, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 252  : 		: _Mybase(_Parg, _Pvector)

  00029	51		 push	 ecx
  0002a	ff 71 04	 push	 DWORD PTR [ecx+4]
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]

; 1618 : 		{	// return iterator for beginning of mutable sequence

  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 252  : 		: _Mybase(_Parg, _Pvector)

  00037	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

  0003c	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0003f	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 284  :         return &*buffer_.begin();

  00044	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00046	6a 03		 push	 3
  00048	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00058	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0005b	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00060	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 284  :         return &*buffer_.begin();

  00069	8b c6		 mov	 eax, esi

; 285  :     }

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@ByteBuffer@net@zl@@AAEPADXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@ByteBuffer@net@zl@@AAEPADXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@ByteBuffer@net@zl@@AAEPADXZ ENDP			; zl::net::ByteBuffer::begin
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ
_TEXT	SEGMENT
$T2 = -28						; size = 12
__Lock$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ PROC		; zl::net::ByteBuffer::beginWrite, COMDAT
; _this$ = ecx

; 245  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 289  :         return &*buffer_.begin();

  00029	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0002c	50		 push	 eax
  0002d	ff 70 04	 push	 DWORD PTR [eax+4]
  00030	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  0003f	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00042	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00047	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00049	6a 03		 push	 3
  0004b	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0005b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00063	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 246  :         return begin() + writerIndex_;

  0006c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006f	03 c6		 add	 eax, esi

; 247  :     }

  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?beginWrite@ByteBuffer@net@zl@@QBEPBDXZ ENDP		; zl::net::ByteBuffer::beginWrite
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?beginWrite@ByteBuffer@net@zl@@QAEPADXZ
_TEXT	SEGMENT
$T2 = -28						; size = 12
__Lock$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?beginWrite@ByteBuffer@net@zl@@QAEPADXZ PROC		; zl::net::ByteBuffer::beginWrite, COMDAT
; _this$ = ecx

; 240  :     { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?beginWrite@ByteBuffer@net@zl@@QAEPADXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 284  :         return &*buffer_.begin();

  00029	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 252  : 		: _Mybase(_Parg, _Pvector)

  0002c	50		 push	 eax
  0002d	ff 70 04	 push	 DWORD PTR [eax+4]
  00030	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]

; 1618 : 		{	// return iterator for beginning of mutable sequence

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 252  : 		: _Mybase(_Parg, _Pvector)

  0003a	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

  0003f	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00042	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 284  :         return &*buffer_.begin();

  00047	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00049	6a 03		 push	 3
  0004b	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0005b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00063	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 241  :         return begin() + writerIndex_;

  0006c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006f	03 c6		 add	 eax, esi

; 242  :     }

  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?beginWrite@ByteBuffer@net@zl@@QAEPADXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?beginWrite@ByteBuffer@net@zl@@QAEPADXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?beginWrite@ByteBuffer@net@zl@@QAEPADXZ ENDP		; zl::net::ByteBuffer::beginWrite
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ
_TEXT	SEGMENT
$T2 = -64						; size = 12
$T3 = -52						; size = 12
$T4 = -40						; size = 12
__Lock$5 = -28						; size = 4
__Lock$6 = -24						; size = 4
__Lock$7 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ PROC		; zl::net::ByteBuffer::findCRLF, COMDAT
; _this$ = ecx

; 196  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx

; 289  :         return &*buffer_.begin();

  0002d	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  00030	57		 push	 edi
  00031	ff 77 04	 push	 DWORD PTR [edi+4]
  00034	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00043	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00046	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  0004b	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0004d	6a 03		 push	 3
  0004f	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00052	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0005f	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00062	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00067	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 246  :         return begin() + writerIndex_;

  00070	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00073	03 de		 add	 ebx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  00075	57		 push	 edi
  00076	ff 77 04	 push	 DWORD PTR [edi+4]
  00079	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  0007c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00083	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00088	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  0008b	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00090	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00092	6a 03		 push	 3
  00094	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00097	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  000a4	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  000a7	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  000ac	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  000b5	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  000b8	8b 32		 mov	 esi, DWORD PTR [edx]
  000ba	03 f7		 add	 esi, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  000bc	3b f3		 cmp	 esi, ebx
  000be	76 49		 jbe	 SHORT $LN83@findCRLF
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000ca	6a 00		 push	 0
  000cc	68 2f 02 00 00	 push	 559			; 0000022fH
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000d6	6a 02		 push	 2
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	83 f8 01	 cmp	 eax, 1
  000e4	75 01		 jne	 SHORT $LN73@findCRLF
  000e6	cc		 int	 3
$LN73@findCRLF:
  000e7	6a 00		 push	 0
  000e9	68 2f 02 00 00	 push	 559			; 0000022fH
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00103	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  00106	83 c4 14	 add	 esp, 20			; 00000014H
$LN83@findCRLF:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm

; 938  : 	if (_Last1 - _First1 >= _Count2)

  00109	8b c3		 mov	 eax, ebx
  0010b	2b c6		 sub	 eax, esi
  0010d	83 f8 02	 cmp	 eax, 2
  00110	7c 3a		 jl	 SHORT $LN143@findCRLF

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00112	0f b6 06	 movzx	 eax, BYTE PTR [esi]

; 940  : 		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);

  00115	8d 4b fe	 lea	 ecx, DWORD PTR [ebx-2]

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00118	bf 00 00 00 00	 mov	 edi, OFFSET ?kCRLF@ByteBuffer@net@zl@@0QBDB ; zl::net::ByteBuffer::kCRLF
  0011d	3a 07		 cmp	 al, BYTE PTR [edi]
  0011f	75 0d		 jne	 SHORT $LN147@findCRLF
  00121	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00125	3a 47 01	 cmp	 al, BYTE PTR [edi+1]
  00128	75 04		 jne	 SHORT $LN147@findCRLF
  0012a	33 c0		 xor	 eax, eax
  0012c	eb 05		 jmp	 SHORT $LN148@findCRLF
$LN147@findCRLF:
  0012e	1b c0		 sbb	 eax, eax
  00130	83 c8 01	 or	 eax, 1
$LN148@findCRLF:
  00133	85 c0		 test	 eax, eax

; 943  : 			if (_Equal_rev_pred_unchecked(_First1, _First2, _Last2, _Pred))

  00135	74 17		 je	 SHORT $LN99@findCRLF
$LL102@findCRLF:

; 946  : 				}
; 947  : 
; 948  : 			if (_First1 == _Last_possible)

  00137	3b f1		 cmp	 esi, ecx
  00139	74 11		 je	 SHORT $LN143@findCRLF

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  0013b	66 8b 46 01	 mov	 ax, WORD PTR [esi+1]

; 941  : 		for (;; ++_First1)

  0013f	46		 inc	 esi

; 889  : 	return (_CSTD memcmp(_First1_ch, _First2_ch, _Count) == 0);

  00140	bf 00 00 00 00	 mov	 edi, OFFSET ?kCRLF@ByteBuffer@net@zl@@0QBDB ; zl::net::ByteBuffer::kCRLF
  00145	66 3b 07	 cmp	 ax, WORD PTR [edi]

; 943  : 			if (_Equal_rev_pred_unchecked(_First1, _First2, _Last2, _Pred))

  00148	75 ed		 jne	 SHORT $LL102@findCRLF

; 944  : 				{
; 945  : 				return (_First1);

  0014a	eb 02		 jmp	 SHORT $LN99@findCRLF
$LN143@findCRLF:

; 949  : 				{
; 950  : 				break;
; 951  : 				}
; 952  : 			}
; 953  : 		}
; 954  : 
; 955  : 	return (_Last1);

  0014c	8b f3		 mov	 esi, ebx
$LN99@findCRLF:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0014e	8d 42 08	 lea	 eax, DWORD PTR [edx+8]
  00151	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00158	50		 push	 eax
  00159	ff 70 04	 push	 DWORD PTR [eax+4]
  0015c	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  0015f	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00164	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00167	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  0016c	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0016e	6a 03		 push	 3
  00170	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00173	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00180	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00183	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00188	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 246  :         return begin() + writerIndex_;

  00191	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00194	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 197  :         const char* crlf = std::search(peek(), beginWrite(), kCRLF, kCRLF + 2);
; 198  :         return crlf == beginWrite() ? NULL : crlf;

  00197	33 c9		 xor	 ecx, ecx

; 246  :         return begin() + writerIndex_;

  00199	03 c7		 add	 eax, edi

; 197  :         const char* crlf = std::search(peek(), beginWrite(), kCRLF, kCRLF + 2);
; 198  :         return crlf == beginWrite() ? NULL : crlf;

  0019b	3b f0		 cmp	 esi, eax
  0019d	0f 44 f1	 cmove	 esi, ecx
  001a0	8b c6		 mov	 eax, esi

; 199  :     }

  001a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ac	59		 pop	 ecx
  001ad	5f		 pop	 edi
  001ae	5e		 pop	 esi
  001af	5b		 pop	 ebx
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ ENDP		; zl::net::ByteBuffer::findCRLF
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?peek@ByteBuffer@net@zl@@QBEPBDXZ
_TEXT	SEGMENT
$T2 = -28						; size = 12
__Lock$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?peek@ByteBuffer@net@zl@@QBEPBDXZ PROC			; zl::net::ByteBuffer::peek, COMDAT
; _this$ = ecx

; 191  :     { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?peek@ByteBuffer@net@zl@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 289  :         return &*buffer_.begin();

  00029	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0002c	50		 push	 eax
  0002d	ff 70 04	 push	 DWORD PTR [eax+4]
  00030	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  0003f	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00042	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00047	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00049	6a 03		 push	 3
  0004b	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0005b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00063	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  0006c	8b 07		 mov	 eax, DWORD PTR [edi]
  0006e	03 c6		 add	 eax, esi

; 193  :     }

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?peek@ByteBuffer@net@zl@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?peek@ByteBuffer@net@zl@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?peek@ByteBuffer@net@zl@@QBEPBDXZ ENDP			; zl::net::ByteBuffer::peek
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?retrieveAll@ByteBuffer@net@zl@@QAEXXZ
_TEXT	SEGMENT
?retrieveAll@ByteBuffer@net@zl@@QAEXXZ PROC		; zl::net::ByteBuffer::retrieveAll, COMDAT
; _this$ = ecx

; 172  :         readerIndex_ = kCheapPrepend;

  00000	c7 01 08 00 00
	00		 mov	 DWORD PTR [ecx], 8

; 173  :         writerIndex_ = kCheapPrepend;

  00006	c7 41 04 08 00
	00 00		 mov	 DWORD PTR [ecx+4], 8

; 174  :     }

  0000d	c3		 ret	 0
?retrieveAll@ByteBuffer@net@zl@@QAEXXZ ENDP		; zl::net::ByteBuffer::retrieveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 12
$T3 = -32						; size = 12
$T4 = -32						; size = 12
__Lock$5 = -20						; size = 4
__Lock$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lock$7 = 8						; size = 4
_end$ = 8						; size = 4
?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z PROC	; zl::net::ByteBuffer::retrieveUntil, COMDAT
; _this$ = ecx

; 164  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 289  :         return &*buffer_.begin();

  0002a	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0002d	50		 push	 eax
  0002e	ff 70 04	 push	 DWORD PTR [eax+4]
  00031	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00040	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  00043	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00048	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0004a	6a 03		 push	 3
  0004c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0004f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0005c	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00064	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  0006d	8b 07		 mov	 eax, DWORD PTR [edi]

; 165  :         assert(peek() <= end);

  0006f	8b 5d 08	 mov	 ebx, DWORD PTR _end$[ebp]

; 192  :         return begin() + readerIndex_; 

  00072	03 c6		 add	 eax, esi

; 165  :         assert(peek() <= end);

  00074	3b c3		 cmp	 eax, ebx
  00076	76 18		 jbe	 SHORT $LN3@retrieveUn
  00078	68 a5 00 00 00	 push	 165			; 000000a5H
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@CEEBIDBF@?$AAp?$AAe?$AAe?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AAn?$AAd@
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@retrieveUn:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 252  : 		: _Mybase(_Parg, _Pvector)

  00090	8d 47 08	 lea	 eax, DWORD PTR [edi+8]

; 1618 : 		{	// return iterator for beginning of mutable sequence

  00093	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 252  : 		: _Mybase(_Parg, _Pvector)

  0009a	50		 push	 eax
  0009b	ff 70 04	 push	 DWORD PTR [eax+4]
  0009e	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a1	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

  000a6	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a9	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 284  :         return &*buffer_.begin();

  000ae	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000b0	6a 03		 push	 3
  000b2	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  000b5	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  000c2	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  000c5	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  000ca	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 241  :         return begin() + writerIndex_;

  000d3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d6	03 c6		 add	 eax, esi

; 166  :         assert(end <= beginWrite());

  000d8	3b d8		 cmp	 ebx, eax
  000da	76 18		 jbe	 SHORT $LN4@retrieveUn
  000dc	68 a6 00 00 00	 push	 166			; 000000a6H
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@BNKFDNDJ@?$AAe?$AAn?$AAd?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AAW?$AAr?$AAi@
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@retrieveUn:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  000f4	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000f7	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  000fe	50		 push	 eax
  000ff	ff 70 04	 push	 DWORD PTR [eax+4]
  00102	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00105	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  0010a	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  0010d	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00112	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00114	6a 03		 push	 3
  00116	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00119	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00126	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00129	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0012e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 167  :         retrieve(end - peek());

  00137	8b 17		 mov	 edx, DWORD PTR [edi]
  00139	2b da		 sub	 ebx, edx

; 50   :         return writerIndex_ - readerIndex_;

  0013b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 167  :         retrieve(end - peek());

  0013e	2b de		 sub	 ebx, esi

; 50   :         return writerIndex_ - readerIndex_;

  00140	8b c1		 mov	 eax, ecx
  00142	2b c2		 sub	 eax, edx

; 146  :         assert(len <= readableBytes());

  00144	3b d8		 cmp	 ebx, eax
  00146	76 1d		 jbe	 SHORT $LN95@retrieveUn
  00148	68 92 00 00 00	 push	 146			; 00000092H
  0014d	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@OMGMEOPK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAa?$AAb?$AAl?$AAe@
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0015d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00160	83 c4 0c	 add	 esp, 12			; 0000000cH
  00163	8b 17		 mov	 edx, DWORD PTR [edi]
$LN95@retrieveUn:

; 50   :         return writerIndex_ - readerIndex_;

  00165	2b ca		 sub	 ecx, edx

; 147  :         if (len < readableBytes())

  00167	3b d9		 cmp	 ebx, ecx
  00169	73 19		 jae	 SHORT $LN92@retrieveUn

; 148  :         {
; 149  :             readerIndex_ += len;

  0016b	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  0016e	89 07		 mov	 DWORD PTR [edi], eax

; 168  :     }

  00170	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00173	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017a	59		 pop	 ecx
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 04 00	 ret	 4
$LN92@retrieveUn:

; 172  :         readerIndex_ = kCheapPrepend;

  00184	c7 07 08 00 00
	00		 mov	 DWORD PTR [edi], 8

; 173  :         writerIndex_ = kCheapPrepend;

  0018a	c7 47 04 08 00
	00 00		 mov	 DWORD PTR [edi+4], 8

; 168  :     }

  00191	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00194	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019b	59		 pop	 ecx
  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	5b		 pop	 ebx
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?retrieveUntil@ByteBuffer@net@zl@@QAEXPBD@Z ENDP	; zl::net::ByteBuffer::retrieveUntil
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?retrieve@ByteBuffer@net@zl@@QAEXI@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
?retrieve@ByteBuffer@net@zl@@QAEXI@Z PROC		; zl::net::ByteBuffer::retrieve, COMDAT
; _this$ = ecx

; 145  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 146  :         assert(len <= readableBytes());

  00007	8b 7d 08	 mov	 edi, DWORD PTR _len$[ebp]

; 50   :         return writerIndex_ - readerIndex_;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	8b c1		 mov	 eax, ecx
  0000f	8b 16		 mov	 edx, DWORD PTR [esi]
  00011	2b c2		 sub	 eax, edx

; 146  :         assert(len <= readableBytes());

  00013	3b f8		 cmp	 edi, eax
  00015	76 1d		 jbe	 SHORT $LN5@retrieve
  00017	68 92 00 00 00	 push	 146			; 00000092H
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@OMGMEOPK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAa?$AAb?$AAl?$AAe@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0002c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	8b 16		 mov	 edx, DWORD PTR [esi]
$LN5@retrieve:

; 50   :         return writerIndex_ - readerIndex_;

  00034	2b ca		 sub	 ecx, edx

; 147  :         if (len < readableBytes())

  00036	3b f9		 cmp	 edi, ecx
  00038	73 0b		 jae	 SHORT $LN2@retrieve

; 148  :         {
; 149  :             readerIndex_ += len;

  0003a	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  0003d	5f		 pop	 edi

; 150  :         }
; 151  :         else
; 152  :         {
; 153  :             retrieveAll();
; 154  :         }
; 155  :     }

  0003e	89 06		 mov	 DWORD PTR [esi], eax
  00040	5e		 pop	 esi
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN2@retrieve:

; 173  :         writerIndex_ = kCheapPrepend;

  00045	c7 46 04 08 00
	00 00		 mov	 DWORD PTR [esi+4], 8
  0004c	5f		 pop	 edi

; 150  :         }
; 151  :         else
; 152  :         {
; 153  :             retrieveAll();
; 154  :         }
; 155  :     }

  0004d	c7 06 08 00 00
	00		 mov	 DWORD PTR [esi], 8
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?retrieve@ByteBuffer@net@zl@@QAEXI@Z ENDP		; zl::net::ByteBuffer::retrieve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
;	COMDAT ?readableBytes@ByteBuffer@net@zl@@QBEIXZ
_TEXT	SEGMENT
?readableBytes@ByteBuffer@net@zl@@QBEIXZ PROC		; zl::net::ByteBuffer::readableBytes, COMDAT
; _this$ = ecx

; 50   :         return writerIndex_ - readerIndex_;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 51   :     }

  00005	c3		 ret	 0
?readableBytes@ByteBuffer@net@zl@@QBEIXZ ENDP		; zl::net::ByteBuffer::readableBytes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
;	COMDAT ?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z
_TEXT	SEGMENT
$T2 = -104						; size = 16
__Old_capacity$1$ = -88					; size = 4
_this$GSCopy$1$ = -84					; size = 4
__Lock$3 = -84						; size = 4
__New_ptr$1$ = -80					; size = 4
$T4 = -80						; size = 4
$T5 = -80						; size = 4
$T6 = -80						; size = 4
__Alloc_max$7 = -80					; size = 4
$T8 = -80						; size = 4
__Masked$9 = -80					; size = 4
$T10 = -80						; size = 4
$T11 = -80						; size = 4
$T12 = -80						; size = 4
__Alloc_max$13 = -80					; size = 4
$T14 = -73						; size = 1
$T15 = -73						; size = 1
$T16 = -73						; size = 1
_field$17 = -72						; size = 28
_value$18 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z PROC ; zl::net::HttpContext::processReqestHeader, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d ac	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 7d 0c	 mov	 edi, DWORD PTR _end$[ebp]

  00031	8d 45 b7	 lea	 eax, DWORD PTR $T16[ebp]
  00034	8b 5d 08	 mov	 ebx, DWORD PTR _begin$[ebp]
  00037	50		 push	 eax
  00038	57		 push	 edi
  00039	53		 push	 ebx
  0003a	c6 45 b7 3a	 mov	 BYTE PTR $T16[ebp], 58	; 0000003aH
  0003e	e8 00 00 00 00	 call	 ??$find@PBDD@std@@YAPBDPBDQBDABD@Z ; std::find<char const *,char>
  00043	8b f0		 mov	 esi, eax
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

  00048	3b f7		 cmp	 esi, edi
  0004a	0f 84 0e 03 00
	00		 je	 $LN6@processReq

  00050	8d 45 b7	 lea	 eax, DWORD PTR $T15[ebp]
  00053	50		 push	 eax
  00054	56		 push	 esi
  00055	53		 push	 ebx
  00056	8d 4d b8	 lea	 ecx, DWORD PTR _field$17[ebp]
  00059	e8 00 00 00 00	 call	 ??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>

  0005e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__isspace
  00064	46		 inc	 esi
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	3b f7		 cmp	 esi, edi
  0006e	73 12		 jae	 SHORT $LN3@processReq
$LL2@processReq:
  00070	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00073	50		 push	 eax
  00074	ff d3		 call	 ebx
  00076	83 c4 04	 add	 esp, 4
  00079	85 c0		 test	 eax, eax
  0007b	74 05		 je	 SHORT $LN3@processReq

  0007d	46		 inc	 esi
  0007e	3b f7		 cmp	 esi, edi
  00080	72 ee		 jb	 SHORT $LL2@processReq
$LN3@processReq:

  00082	8d 45 b7	 lea	 eax, DWORD PTR $T14[ebp]
  00085	50		 push	 eax
  00086	57		 push	 edi
  00087	56		 push	 esi
  00088	8d 4d d4	 lea	 ecx, DWORD PTR _value$18[ebp]
  0008b	e8 00 00 00 00	 call	 ??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>

  00090	8b 45 e8	 mov	 eax, DWORD PTR _value$18[ebp+20]
  00093	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00097	85 c0		 test	 eax, eax
  00099	0f 84 cd 01 00
	00		 je	 $LN5@processReq
  0009f	90		 npad	 1
$LL4@processReq:
  000a0	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  000a3	3b f0		 cmp	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3204 : 		_STL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");

  000a5	76 46		 jbe	 SHORT $LN34@processReq
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000b1	6a 00		 push	 0
  000b3	68 84 0c 00 00	 push	 3204			; 00000c84H
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000bd	6a 02		 push	 2
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000c5	83 c4 18	 add	 esp, 24			; 00000018H
  000c8	83 f8 01	 cmp	 eax, 1
  000cb	75 01		 jne	 SHORT $LN39@processReq
  000cd	cc		 int	 3
$LN39@processReq:
  000ce	6a 00		 push	 0
  000d0	68 84 0c 00 00	 push	 3204			; 00000c84H
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ea	83 c4 14	 add	 esp, 20			; 00000014H
$LN34@processReq:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000ed	83 7d ec 10	 cmp	 DWORD PTR _value$18[ebp+24], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  000f1	8d 45 d8	 lea	 eax, DWORD PTR _value$18[ebp+4]

; 1804 : 		if (_Large_string_engaged())

  000f4	0f 43 45 d8	 cmovae	 eax, DWORD PTR _value$18[ebp+4]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  000f8	0f b6 04 30	 movzx	 eax, BYTE PTR [eax+esi]
  000fc	50		 push	 eax
  000fd	ff d3		 call	 ebx
  000ff	83 c4 04	 add	 esp, 4
  00102	85 c0		 test	 eax, eax
  00104	0f 84 62 01 00
	00		 je	 $LN5@processReq

  0010a	8b 75 e8	 mov	 esi, DWORD PTR _value$18[ebp+20]
  0010d	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3320 : 		if (_Newsize <= _Old_size)

  00110	3b ce		 cmp	 ecx, esi
  00112	77 17		 ja	 SHORT $LN58@processReq

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00114	83 7d ec 10	 cmp	 DWORD PTR _value$18[ebp+24], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00118	8d 45 d8	 lea	 eax, DWORD PTR _value$18[ebp+4]

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  0011b	89 4d e8	 mov	 DWORD PTR _value$18[ebp+20], ecx

; 1804 : 		if (_Large_string_engaged())

  0011e	0f 43 45 d8	 cmovae	 eax, DWORD PTR _value$18[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00122	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3324 : 		else

  00126	e9 36 01 00 00	 jmp	 $LN103@processReq
$LN58@processReq:

; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  0012b	8b 55 ec	 mov	 edx, DWORD PTR _value$18[ebp+24]
  0012e	8b d9		 mov	 ebx, ecx
  00130	8b c2		 mov	 eax, edx
  00132	89 55 a8	 mov	 DWORD PTR __Old_capacity$1$[ebp], edx
  00135	2b de		 sub	 ebx, esi
  00137	2b c6		 sub	 eax, esi

; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  00139	3b d8		 cmp	 ebx, eax
  0013b	77 24		 ja	 SHORT $LN83@processReq

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0013d	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2601 : 			_My_data._Mysize = _Old_size + _Count;

  00140	89 4d e8	 mov	 DWORD PTR _value$18[ebp+20], ecx

; 1803 : 		value_type * _Result = _Bx._Buf;

  00143	8d 45 d8	 lea	 eax, DWORD PTR _value$18[ebp+4]

; 1804 : 		if (_Large_string_engaged())

  00146	0f 43 45 d8	 cmovae	 eax, DWORD PTR _value$18[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0014a	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2603 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  0014b	03 f0		 add	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0014d	6a 00		 push	 0
  0014f	56		 push	 esi
  00150	e8 00 00 00 00	 call	 _memset
  00155	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00158	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2605 : 			return (*this);

  0015c	e9 fa 00 00 00	 jmp	 $LN534@processReq
$LN83@processReq:

; 3310 : 		return (_Min_value(

  00161	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00166	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR __Alloc_max$13[ebp], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3310 : 		return (_Min_value(

  0016d	2b c6		 sub	 eax, esi
  0016f	c7 45 b0 10 00
	00 00		 mov	 DWORD PTR $T12[ebp], 16	; 00000010H
  00176	c7 45 b0 fe ff
	ff ff		 mov	 DWORD PTR $T11[ebp], -2	; fffffffeH
  0017d	c7 45 b0 ff ff
	ff 7f		 mov	 DWORD PTR $T10[ebp], 2147483647 ; 7fffffffH

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00184	3b c3		 cmp	 eax, ebx
  00186	0f 82 f2 01 00
	00		 jb	 $LN525@processReq

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0018c	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  0018e	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR __Alloc_max$7[ebp], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00195	83 cf 0f	 or	 edi, 15			; 0000000fH

; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));

  00198	c7 45 b0 10 00
	00 00		 mov	 DWORD PTR $T6[ebp], 16	; 00000010H

; 3310 : 		return (_Min_value(

  0019f	c7 45 b0 fe ff
	ff ff		 mov	 DWORD PTR $T5[ebp], -2	; fffffffeH
  001a6	c7 45 b0 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  001ad	89 7d b0	 mov	 DWORD PTR __Masked$9[ebp], edi
  001b0	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  001b6	76 07		 jbe	 SHORT $LN124@processReq

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  001b8	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  001bd	eb 21		 jmp	 SHORT $LN123@processReq
$LN124@processReq:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  001bf	8b ca		 mov	 ecx, edx
  001c1	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  001c6	d1 e9		 shr	 ecx, 1
  001c8	2b c1		 sub	 eax, ecx
  001ca	3b d0		 cmp	 edx, eax
  001cc	76 07		 jbe	 SHORT $LN125@processReq

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  001ce	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  001d3	eb 0b		 jmp	 SHORT $LN123@processReq
$LN125@processReq:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  001d5	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  001d8	3b f8		 cmp	 edi, eax
  001da	89 45 b0	 mov	 DWORD PTR $T8[ebp], eax
  001dd	0f 42 f8	 cmovb	 edi, eax
$LN123@processReq:

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  001e0	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  001e9	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  001ec	89 45 b0	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  001ef	8d 4d d4	 lea	 ecx, DWORD PTR _value$18[ebp]
  001f2	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);
; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  001f7	83 7d a8 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  001fb	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  001fe	89 4d e8	 mov	 DWORD PTR _value$18[ebp+20], ecx
  00201	89 7d ec	 mov	 DWORD PTR _value$18[ebp+24], edi
  00204	56		 push	 esi
  00205	72 32		 jb	 SHORT $LN102@processReq

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00207	8b 7d d8	 mov	 edi, DWORD PTR _value$18[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0020a	57		 push	 edi
  0020b	ff 75 b0	 push	 DWORD PTR __New_ptr$1$[ebp]
  0020e	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  00213	03 75 b0	 add	 esi, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00216	53		 push	 ebx
  00217	6a 00		 push	 0
  00219	56		 push	 esi
  0021a	e8 00 00 00 00	 call	 _memset
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0021f	8b 45 a8	 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  00222	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00223	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00227	50		 push	 eax
  00228	57		 push	 edi
  00229	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  0022e	8b 45 b0	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00231	83 c4 20	 add	 esp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  00234	89 45 d8	 mov	 DWORD PTR _value$18[ebp+4], eax

; 3943 : 			}
; 3944 : 		else

  00237	eb 22		 jmp	 SHORT $LN534@processReq
$LN102@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00239	8b 7d b0	 mov	 edi, DWORD PTR __New_ptr$1$[ebp]
  0023c	8d 45 d8	 lea	 eax, DWORD PTR _value$18[ebp+4]
  0023f	50		 push	 eax
  00240	57		 push	 edi
  00241	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00246	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  00247	03 f7		 add	 esi, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00249	6a 00		 push	 0
  0024b	56		 push	 esi
  0024c	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  00251	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00255	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00258	89 7d d8	 mov	 DWORD PTR _value$18[ebp+4], edi
$LN534@processReq:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0025b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__isspace
$LN103@processReq:
  00261	8b 45 e8	 mov	 eax, DWORD PTR _value$18[ebp+20]
  00264	85 c0		 test	 eax, eax
  00266	0f 85 34 fe ff
	ff		 jne	 $LL4@processReq
$LN5@processReq:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0026c	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 248  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  0026f	8d 45 b8	 lea	 eax, DWORD PTR _field$17[ebp]
  00272	50		 push	 eax
  00273	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00276	83 c1 60	 add	 ecx, 96			; 00000060H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 248  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 ??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 332  : 		return ((reference)**(_Mybase *)this);

  0027f	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00282	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 363  : 		return (try_emplace(_Keyval).first->second);

  00287	8d 70 1c	 lea	 esi, DWORD PTR [eax+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0028a	6a 03		 push	 3
  0028c	8d 4d ac	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0028f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00293	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00299	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0029c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  002a1	8d 4d ac	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  002a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  002aa	8d 45 d4	 lea	 eax, DWORD PTR _value$18[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  002ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  002b1	3b f0		 cmp	 esi, eax
  002b3	74 16		 je	 SHORT $LN221@processReq

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002b5	83 7d ec 10	 cmp	 DWORD PTR _value$18[ebp+24], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  002b9	8d 45 d8	 lea	 eax, DWORD PTR _value$18[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  002bc	ff 75 e8	 push	 DWORD PTR _value$18[ebp+20]

; 1815 : 		if (_Large_string_engaged())

  002bf	0f 43 45 d8	 cmovae	 eax, DWORD PTR _value$18[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  002c3	8b ce		 mov	 ecx, esi
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN221@processReq:

; 2023 : 		_Get_data()._Orphan_all();

  002cb	8d 4d d4	 lea	 ecx, DWORD PTR _value$18[ebp]
  002ce	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002d3	8b 45 ec	 mov	 eax, DWORD PTR _value$18[ebp+24]
  002d6	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  002d9	72 0d		 jb	 SHORT $LN369@processReq

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  002db	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002dc	50		 push	 eax
  002dd	ff 75 d8	 push	 DWORD PTR _value$18[ebp+4]
  002e0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002e5	83 c4 08	 add	 esp, 8
$LN369@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  002e8	8d 4d d4	 lea	 ecx, DWORD PTR _value$18[ebp]

; 3995 : 		_My_data._Mysize = 0;

  002eb	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _value$18[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002f2	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _value$18[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002f9	c6 45 d8 00	 mov	 BYTE PTR _value$18[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  002fd	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00302	6a 08		 push	 8
  00304	ff 75 d4	 push	 DWORD PTR _value$18[ebp]
  00307	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0030c	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  0030f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _value$18[ebp], 0

; 2023 : 		_Get_data()._Orphan_all();

  00316	8d 4d b8	 lea	 ecx, DWORD PTR _field$17[ebp]
  00319	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0031e	8b 45 d0	 mov	 eax, DWORD PTR _field$17[ebp+24]
  00321	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00324	72 0d		 jb	 SHORT $LN448@processReq

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00326	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00327	50		 push	 eax
  00328	ff 75 bc	 push	 DWORD PTR _field$17[ebp+4]
  0032b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00330	83 c4 08	 add	 esp, 8
$LN448@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00333	8d 4d b8	 lea	 ecx, DWORD PTR _field$17[ebp]

; 3995 : 		_My_data._Mysize = 0;

  00336	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _field$17[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0033d	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR _field$17[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00344	c6 45 bc 00	 mov	 BYTE PTR _field$17[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00348	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0034d	6a 08		 push	 8
  0034f	ff 75 b8	 push	 DWORD PTR _field$17[ebp]
  00352	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00357	83 c4 08	 add	 esp, 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0035a	b0 01		 mov	 al, 1
  0035c	eb 02		 jmp	 SHORT $LN7@processReq
$LN6@processReq:

  0035e	32 c0		 xor	 al, al
$LN7@processReq:

  00360	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00363	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0036a	59		 pop	 ecx
  0036b	5f		 pop	 edi
  0036c	5e		 pop	 esi
  0036d	5b		 pop	 ebx
  0036e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00371	33 cd		 xor	 ecx, ebp
  00373	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00378	8b e5		 mov	 esp, ebp
  0037a	5d		 pop	 ebp
  0037b	c2 08 00	 ret	 8
$LN525@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3925 : 			_Xlen();	// result too long

  0037e	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN533@processReq:
  00383	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR _field$17[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR _value$18[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z ENDP ; zl::net::HttpContext::processReqestHeader
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
;	COMDAT ?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z
_TEXT	SEGMENT
$T2 = -116						; size = 12
$T3 = -104						; size = 12
_space$2$ = -92						; size = 4
_end$GSCopy$1$ = -88					; size = 4
_space$1$ = -84						; size = 4
_question$1$ = -80					; size = 4
__Lock$4 = -80						; size = 4
__Lock$5 = -80						; size = 4
$T6 = -73						; size = 1
$T7 = -73						; size = 1
$T8 = -73						; size = 1
$T9 = -73						; size = 1
$T10 = -73						; size = 1
_method$ = -72						; size = 28
_u$11 = -44						; size = 28
_u$12 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_begin$ = 8						; size = 4
_end$ = 12						; size = 4
?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z PROC ; zl::net::HttpContext::processRequestLine, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _end$[ebp]

  00030	8d 45 b7	 lea	 eax, DWORD PTR $T10[ebp]
  00033	8b 75 08	 mov	 esi, DWORD PTR _begin$[ebp]
  00036	50		 push	 eax
  00037	57		 push	 edi
  00038	56		 push	 esi
  00039	89 7d a8	 mov	 DWORD PTR _end$GSCopy$1$[ebp], edi
  0003c	c6 45 b7 20	 mov	 BYTE PTR $T10[ebp], 32	; 00000020H
  00040	e8 00 00 00 00	 call	 ??$find@PBDD@std@@YAPBDPBDQBDABD@Z ; std::find<char const *,char>
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	89 45 ac	 mov	 DWORD PTR _space$1$[ebp], eax

  0004b	8d 4d b7	 lea	 ecx, DWORD PTR $T9[ebp]
  0004e	51		 push	 ecx
  0004f	50		 push	 eax
  00050	56		 push	 esi
  00051	8d 4d b8	 lea	 ecx, DWORD PTR _method$[ebp]
  00054	e8 00 00 00 00	 call	 ??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

  00060	39 7d ac	 cmp	 DWORD PTR _space$1$[ebp], edi
  00063	0f 84 de 02 00
	00		 je	 $LN3@processReq
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00069	8b 75 d0	 mov	 esi, DWORD PTR _method$[ebp+24]

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0006c	8d 45 bc	 lea	 eax, DWORD PTR _method$[ebp+4]

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  0006f	6a 03		 push	 3
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_03HAPOJHBM@GET@
  00076	ff 75 cc	 push	 DWORD PTR _method$[ebp+20]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00079	83 fe 10	 cmp	 esi, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  0007c	0f 43 45 bc	 cmovae	 eax, DWORD PTR _method$[ebp+4]

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00086	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00089	84 c0		 test	 al, al
  0008b	74 0c		 je	 SHORT $LN21@processReq

  0008d	c7 43 04 02 00
	00 00		 mov	 DWORD PTR [ebx+4], 2

  00094	e9 ad 00 00 00	 jmp	 $LN733@processReq
$LN21@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00099	6a 04		 push	 4
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_04HCJEIHPL@POST@
  000a0	ff 75 cc	 push	 DWORD PTR _method$[ebp+20]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000a3	83 fe 10	 cmp	 esi, 16			; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000a6	8d 45 bc	 lea	 eax, DWORD PTR _method$[ebp+4]

; 1815 : 		if (_Large_string_engaged())

  000a9	0f 43 45 bc	 cmovae	 eax, DWORD PTR _method$[ebp+4]

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  000b6	84 c0		 test	 al, al
  000b8	74 0c		 je	 SHORT $LN23@processReq

  000ba	c7 43 04 03 00
	00 00		 mov	 DWORD PTR [ebx+4], 3

  000c1	e9 80 00 00 00	 jmp	 $LN733@processReq
$LN23@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  000c6	6a 04		 push	 4
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_04BINJNOJD@HEAD@
  000cd	ff 75 cc	 push	 DWORD PTR _method$[ebp+20]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000d0	83 fe 10	 cmp	 esi, 16			; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000d3	8d 45 bc	 lea	 eax, DWORD PTR _method$[ebp+4]

; 1815 : 		if (_Large_string_engaged())

  000d6	0f 43 45 bc	 cmovae	 eax, DWORD PTR _method$[ebp+4]

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  000e0	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  000e3	84 c0		 test	 al, al
  000e5	74 09		 je	 SHORT $LN25@processReq

  000e7	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [ebx+4], 1

  000ee	eb 56		 jmp	 SHORT $LN733@processReq
$LN25@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  000f0	6a 03		 push	 3
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_03KBBGFLEK@PUT@
  000f7	ff 75 cc	 push	 DWORD PTR _method$[ebp+20]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000fa	83 fe 10	 cmp	 esi, 16			; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000fd	8d 45 bc	 lea	 eax, DWORD PTR _method$[ebp+4]

; 1815 : 		if (_Large_string_engaged())

  00100	0f 43 45 bc	 cmovae	 eax, DWORD PTR _method$[ebp+4]

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  0010a	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0010d	84 c0		 test	 al, al
  0010f	74 09		 je	 SHORT $LN27@processReq

  00111	c7 43 04 04 00
	00 00		 mov	 DWORD PTR [ebx+4], 4

  00118	eb 2c		 jmp	 SHORT $LN733@processReq
$LN27@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  0011a	6a 06		 push	 6
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_06FKDAMKFP@DELETE@
  00121	ff 75 cc	 push	 DWORD PTR _method$[ebp+20]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00124	83 fe 10	 cmp	 esi, 16			; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00127	8d 45 bc	 lea	 eax, DWORD PTR _method$[ebp+4]

; 1815 : 		if (_Large_string_engaged())

  0012a	0f 43 45 bc	 cmovae	 eax, DWORD PTR _method$[ebp+4]

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00134	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00137	84 c0		 test	 al, al
  00139	0f 84 01 02 00
	00		 je	 $LN29@processReq

  0013f	c7 43 04 05 00
	00 00		 mov	 DWORD PTR [ebx+4], 5
$LN733@processReq:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  00146	8b 45 ac	 mov	 eax, DWORD PTR _space$1$[ebp]

  00149	8d 4d b7	 lea	 ecx, DWORD PTR $T8[ebp]
  0014c	51		 push	 ecx
  0014d	40		 inc	 eax
  0014e	c6 45 b7 20	 mov	 BYTE PTR $T8[ebp], 32	; 00000020H
  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ??$find@PBDD@std@@YAPBDPBDQBDABD@Z ; std::find<char const *,char>
  00159	8b f0		 mov	 esi, eax
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015e	89 75 a4	 mov	 DWORD PTR _space$2$[ebp], esi

  00161	3b f7		 cmp	 esi, edi
  00163	0f 84 de 01 00
	00		 je	 $LN3@processReq

  00169	8d 45 b7	 lea	 eax, DWORD PTR $T7[ebp]
  0016c	c6 45 b7 3f	 mov	 BYTE PTR $T7[ebp], 63	; 0000003fH
  00170	50		 push	 eax
  00171	8b 45 ac	 mov	 eax, DWORD PTR _space$1$[ebp]
  00174	40		 inc	 eax
  00175	56		 push	 esi
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ??$find@PBDD@std@@YAPBDPBDQBDABD@Z ; std::find<char const *,char>
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017f	89 45 b0	 mov	 DWORD PTR _question$1$[ebp], eax

  00182	8d 4d b7	 lea	 ecx, DWORD PTR $T6[ebp]
  00185	3b c6		 cmp	 eax, esi
  00187	51		 push	 ecx
  00188	50		 push	 eax
  00189	8b 45 ac	 mov	 eax, DWORD PTR _space$1$[ebp]
  0018c	8d 4d d4	 lea	 ecx, DWORD PTR _u$12[ebp]
  0018f	0f 84 34 01 00
	00		 je	 $LN4@processReq

  00195	40		 inc	 eax
  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 ??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0019c	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0019f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  001a3	8d 45 d4	 lea	 eax, DWORD PTR _u$12[ebp]
  001a6	3b c8		 cmp	 ecx, eax
  001a8	74 14		 je	 SHORT $LN122@processReq

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001aa	83 7d ec 10	 cmp	 DWORD PTR _u$12[ebp+24], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  001ae	8d 45 d8	 lea	 eax, DWORD PTR _u$12[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  001b1	ff 75 e8	 push	 DWORD PTR _u$12[ebp+20]

; 1815 : 		if (_Large_string_engaged())

  001b4	0f 43 45 d8	 cmovae	 eax, DWORD PTR _u$12[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN122@processReq:

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  001be	56		 push	 esi
  001bf	ff 75 b0	 push	 DWORD PTR _question$1$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001c2	83 7d ec 10	 cmp	 DWORD PTR _u$12[ebp+24], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  001c6	8d 4d d8	 lea	 ecx, DWORD PTR _u$12[ebp+4]

; 3086 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr())

  001c9	8b 45 e8	 mov	 eax, DWORD PTR _u$12[ebp+20]

; 1804 : 		if (_Large_string_engaged())

  001cc	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _u$12[ebp+4]

; 3086 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr())

  001d0	03 c1		 add	 eax, ecx
  001d2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1646 : 		: _Mybase(_Parg, _Pstring)

  001d6	8d 4d d4	 lea	 ecx, DWORD PTR _u$12[ebp]
  001d9	51		 push	 ecx
  001da	50		 push	 eax
  001db	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  001de	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  001e3	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001e6	8b f4		 mov	 esi, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  001e8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  001ee	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  001f5	8b 45 8c	 mov	 eax, DWORD PTR $T2[ebp]
  001f8	85 c0		 test	 eax, eax
  001fa	74 09		 je	 SHORT $LN301@processReq

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  001fc	ff 30		 push	 DWORD PTR [eax]
  001fe	8b ce		 mov	 ecx, esi
  00200	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN301@processReq:
  00205	8b 45 94	 mov	 eax, DWORD PTR $T2[ebp+8]
  00208	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0020b	83 7d ec 10	 cmp	 DWORD PTR _u$12[ebp+24], 16 ; 00000010H

; 1646 : 		: _Mybase(_Parg, _Pstring)

  0020f	8d 4d d4	 lea	 ecx, DWORD PTR _u$12[ebp]

; 1803 : 		value_type * _Result = _Bx._Buf;

  00212	8d 45 d8	 lea	 eax, DWORD PTR _u$12[ebp+4]

; 3072 : 		{	// return iterator for beginning of mutable sequence

  00215	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 1804 : 		if (_Large_string_engaged())

  00219	0f 43 45 d8	 cmovae	 eax, DWORD PTR _u$12[ebp+4]

; 1646 : 		: _Mybase(_Parg, _Pstring)

  0021d	51		 push	 ecx
  0021e	50		 push	 eax
  0021f	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  00222	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  00227	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0022a	8b f4		 mov	 esi, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0022c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00232	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00239	8b 45 98	 mov	 eax, DWORD PTR $T3[ebp]
  0023c	85 c0		 test	 eax, eax
  0023e	74 09		 je	 SHORT $LN333@processReq

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00240	ff 30		 push	 DWORD PTR [eax]
  00242	8b ce		 mov	 ecx, esi
  00244	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN333@processReq:
  00249	8b 45 a0	 mov	 eax, DWORD PTR $T3[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  0024c	8d 4d d4	 lea	 ecx, DWORD PTR _u$12[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 136  : 		}

  0024f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00253	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2701 : 		return (replace(begin(), end(), _First, _Last));

  00256	e8 00 00 00 00	 call	 ??$replace@PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0QBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace<char const *,void>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0025b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00261	8d 4d b0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00264	6a 03		 push	 3
  00266	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0026a	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  0026c	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  0026f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00274	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0027a	8d 4d b0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0027d	ff d6		 call	 esi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0027f	6a 03		 push	 3
  00281	8d 4d b0	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00284	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00288	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  0028a	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  0028d	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00292	8d 4d b0	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00295	ff d6		 call	 esi
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00297	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  0029a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  0029e	8d 45 d4	 lea	 eax, DWORD PTR _u$12[ebp]
  002a1	3b c8		 cmp	 ecx, eax
  002a3	74 14		 je	 SHORT $LN357@processReq

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002a5	83 7d ec 10	 cmp	 DWORD PTR _u$12[ebp+24], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  002a9	8d 45 d8	 lea	 eax, DWORD PTR _u$12[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  002ac	ff 75 e8	 push	 DWORD PTR _u$12[ebp+20]

; 1815 : 		if (_Large_string_engaged())

  002af	0f 43 45 d8	 cmovae	 eax, DWORD PTR _u$12[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN357@processReq:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  002b9	8d 4d d4	 lea	 ecx, DWORD PTR _u$12[ebp]
  002bc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

  002c1	8b 7d a8	 mov	 edi, DWORD PTR _end$GSCopy$1$[ebp]
  002c4	8b 75 a4	 mov	 esi, DWORD PTR _space$2$[ebp]
  002c7	eb 31		 jmp	 SHORT $LN5@processReq
$LN4@processReq:

  002c9	40		 inc	 eax
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 ??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  002d0	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  002d3	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  002d7	8d 45 d4	 lea	 eax, DWORD PTR _u$11[ebp]
  002da	3b c8		 cmp	 ecx, eax
  002dc	74 14		 je	 SHORT $LN506@processReq

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002de	83 7d ec 10	 cmp	 DWORD PTR _u$11[ebp+24], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  002e2	8d 45 d8	 lea	 eax, DWORD PTR _u$11[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  002e5	ff 75 e8	 push	 DWORD PTR _u$11[ebp+20]

; 1815 : 		if (_Large_string_engaged())

  002e8	0f 43 45 d8	 cmovae	 eax, DWORD PTR _u$11[ebp+4]

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN506@processReq:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  002f2	8d 4d d4	 lea	 ecx, DWORD PTR _u$11[ebp]
  002f5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@processReq:

  002fa	46		 inc	 esi

  002fb	8b c7		 mov	 eax, edi
  002fd	2b c6		 sub	 eax, esi
  002ff	83 f8 08	 cmp	 eax, 8
  00302	75 43		 jne	 SHORT $LN3@processReq

  00304	68 00 00 00 00	 push	 OFFSET ??_C@_08IJEMDJGI@HTTP?11?41@
  00309	57		 push	 edi
  0030a	56		 push	 esi
  0030b	e8 00 00 00 00	 call	 ??$equal@PBD$$CBD$08@std@@YA_NQBD0AAY08$$CBD@Z ; std::equal<char const *,char const ,9>
  00310	83 c4 0c	 add	 esp, 12			; 0000000cH
  00313	84 c0		 test	 al, al
  00315	74 0b		 je	 SHORT $LN7@processReq
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00317	c7 43 08 02 00
	00 00		 mov	 DWORD PTR [ebx+8], 2
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0031e	b3 01		 mov	 bl, 1
  00320	eb 27		 jmp	 SHORT $LN15@processReq
$LN7@processReq:

  00322	68 00 00 00 00	 push	 OFFSET ??_C@_08JAFHAICJ@HTTP?11?40@
  00327	57		 push	 edi
  00328	56		 push	 esi
  00329	e8 00 00 00 00	 call	 ??$equal@PBD$$CBD$08@std@@YA_NQBD0AAY08$$CBD@Z ; std::equal<char const *,char const ,9>
  0032e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00331	84 c0		 test	 al, al
  00333	74 07		 je	 SHORT $LN9@processReq
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00335	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [ebx+8], 1
$LN9@processReq:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0033c	b3 01		 mov	 bl, 1
  0033e	eb 09		 jmp	 SHORT $LN15@processReq
$LN29@processReq:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00340	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
$LN3@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00347	32 db		 xor	 bl, bl
$LN15@processReq:
  00349	8d 4d b8	 lea	 ecx, DWORD PTR _method$[ebp]
  0034c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00351	8b 45 d0	 mov	 eax, DWORD PTR _method$[ebp+24]
  00354	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00357	72 0d		 jb	 SHORT $LN658@processReq

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00359	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0035a	50		 push	 eax
  0035b	ff 75 bc	 push	 DWORD PTR _method$[ebp+4]
  0035e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00363	83 c4 08	 add	 esp, 8
$LN658@processReq:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00366	8d 4d b8	 lea	 ecx, DWORD PTR _method$[ebp]

; 3995 : 		_My_data._Mysize = 0;

  00369	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _method$[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00370	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR _method$[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00377	c6 45 bc 00	 mov	 BYTE PTR _method$[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0037b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00380	6a 08		 push	 8
  00382	ff 75 b8	 push	 DWORD PTR _method$[ebp]
  00385	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0038a	83 c4 08	 add	 esp, 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0038d	8a c3		 mov	 al, bl

  0038f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00392	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00399	59		 pop	 ecx
  0039a	5f		 pop	 edi
  0039b	5e		 pop	 esi
  0039c	5b		 pop	 ebx
  0039d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a0	33 cd		 xor	 ecx, ebp
  003a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a7	8b e5		 mov	 esp, ebp
  003a9	5d		 pop	 ebp
  003aa	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR _method$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR _u$12[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$3:
  00010	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$5:
  00018	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z$2:
  00020	8d 4d d4	 lea	 ecx, DWORD PTR _u$11[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z:
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z ENDP ; zl::net::HttpContext::processRequestLine
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?request@HttpContext@net@zl@@QAEAAVHttpRequest@23@XZ
_TEXT	SEGMENT
?request@HttpContext@net@zl@@QAEAAVHttpRequest@23@XZ PROC ; zl::net::HttpContext::request, COMDAT
; _this$ = ecx

; 56   : 			HttpRequest& request()         { return request_; }

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?request@HttpContext@net@zl@@QAEAAVHttpRequest@23@XZ ENDP ; zl::net::HttpContext::request
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?receiveBody@HttpContext@net@zl@@QAEXXZ
_TEXT	SEGMENT
?receiveBody@HttpContext@net@zl@@QAEXXZ PROC		; zl::net::HttpContext::receiveBody, COMDAT
; _this$ = ecx

; 54   : 			void receiveBody()             { state_ = kGotAll; }

  00000	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3
  00006	c3		 ret	 0
?receiveBody@HttpContext@net@zl@@QAEXXZ ENDP		; zl::net::HttpContext::receiveBody
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?receiveHeaders@HttpContext@net@zl@@QAEXXZ
_TEXT	SEGMENT
?receiveHeaders@HttpContext@net@zl@@QAEXXZ PROC		; zl::net::HttpContext::receiveHeaders, COMDAT
; _this$ = ecx

; 49   : 				if (request_.method() == HttpGet)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 f8 02	 cmp	 eax, 2
  00006	75 07		 jne	 SHORT $LN2@receiveHea

; 50   : 					state_ = kGotAll;

  00008	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3

; 53   : 			}

  0000e	c3		 ret	 0
$LN2@receiveHea:

; 51   : 				else if (request_.method() == HttpPost)

  0000f	83 f8 03	 cmp	 eax, 3
  00012	75 06		 jne	 SHORT $LN4@receiveHea

; 52   : 					state_ = kExpectBody;

  00014	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN4@receiveHea:

; 53   : 			}

  0001a	c3		 ret	 0
?receiveHeaders@HttpContext@net@zl@@QAEXXZ ENDP		; zl::net::HttpContext::receiveHeaders
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?receiveRequestLine@HttpContext@net@zl@@QAEXXZ
_TEXT	SEGMENT
?receiveRequestLine@HttpContext@net@zl@@QAEXXZ PROC	; zl::net::HttpContext::receiveRequestLine, COMDAT
; _this$ = ecx

; 46   : 			void receiveRequestLine()      { state_ = kExpectHeaders; }

  00000	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  00006	c3		 ret	 0
?receiveRequestLine@HttpContext@net@zl@@QAEXXZ ENDP	; zl::net::HttpContext::receiveRequestLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?gotAll@HttpContext@net@zl@@QBE_NXZ
_TEXT	SEGMENT
?gotAll@HttpContext@net@zl@@QBE_NXZ PROC		; zl::net::HttpContext::gotAll, COMDAT
; _this$ = ecx

; 45   : 			bool gotAll() const            { return state_ == kGotAll; }

  00000	83 39 03	 cmp	 DWORD PTR [ecx], 3
  00003	0f 94 c0	 sete	 al
  00006	c3		 ret	 0
?gotAll@HttpContext@net@zl@@QBE_NXZ ENDP		; zl::net::HttpContext::gotAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?expectBody@HttpContext@net@zl@@QBE_NXZ
_TEXT	SEGMENT
?expectBody@HttpContext@net@zl@@QBE_NXZ PROC		; zl::net::HttpContext::expectBody, COMDAT
; _this$ = ecx

; 44   : 			bool expectBody() const        { return state_ == kExpectBody; }

  00000	83 39 02	 cmp	 DWORD PTR [ecx], 2
  00003	0f 94 c0	 sete	 al
  00006	c3		 ret	 0
?expectBody@HttpContext@net@zl@@QBE_NXZ ENDP		; zl::net::HttpContext::expectBody
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?expectHeaders@HttpContext@net@zl@@QBE_NXZ
_TEXT	SEGMENT
?expectHeaders@HttpContext@net@zl@@QBE_NXZ PROC		; zl::net::HttpContext::expectHeaders, COMDAT
; _this$ = ecx

; 43   : 			bool expectHeaders() const     { return state_ == kExpectHeaders; }

  00000	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00003	0f 94 c0	 sete	 al
  00006	c3		 ret	 0
?expectHeaders@HttpContext@net@zl@@QBE_NXZ ENDP		; zl::net::HttpContext::expectHeaders
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
;	COMDAT ?expectRequestLine@HttpContext@net@zl@@QBE_NXZ
_TEXT	SEGMENT
?expectRequestLine@HttpContext@net@zl@@QBE_NXZ PROC	; zl::net::HttpContext::expectRequestLine, COMDAT
; _this$ = ecx

; 42   : 			bool expectRequestLine() const { return state_ == kExpectRequestLine; }

  00000	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00003	0f 94 c0	 sete	 al
  00006	c3		 ret	 0
?expectRequestLine@HttpContext@net@zl@@QBE_NXZ ENDP	; zl::net::HttpContext::expectRequestLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
;	COMDAT ?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z
_TEXT	SEGMENT
_iss$2 = -384						; size = 168
$T3 = -216						; size = 12
$T4 = -204						; size = 12
$T5 = -192						; size = 12
$T6 = -180						; size = 12
$T7 = -168						; size = 12
$T8 = -156						; size = 12
$T9 = -144						; size = 12
$T10 = -132						; size = 12
_content_len$11 = -120					; size = 4
__Lock$12 = -116					; size = 4
__Lock$13 = -112					; size = 4
__Lock$14 = -108					; size = 4
__Lock$15 = -104					; size = 4
__Lock$16 = -100					; size = 4
_this$ = -96						; size = 4
__Lock$17 = -96						; size = 4
$T18 = -92						; size = 4
__Lock$19 = -92						; size = 4
_bufsize$1$ = -88					; size = 4
__Lock$20 = -88						; size = 4
_hasMore$1$ = -81					; size = 1
__Result$1$ = -80					; size = 4
_len$1$ = -80						; size = 4
_len$1$ = -80						; size = 4
_crlf$1$ = -80						; size = 4
_crlf$1$ = -80						; size = 4
_ok$1$ = -73						; size = 1
$T21 = -72						; size = 28
_value$22 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_buf$ = 8						; size = 4
?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z PROC ; zl::net::HttpContext::parseRequest, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
  00033	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T18[ebp], 0

  0003a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___wassert
  00040	c6 45 b7 01	 mov	 BYTE PTR _ok$1$[ebp], 1
  00044	c6 45 af 01	 mov	 BYTE PTR _hasMore$1$[ebp], 1
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@parseReque:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h

; 42   : 			bool expectRequestLine() const { return state_ == kExpectRequestLine; }

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]
  00052	85 c0		 test	 eax, eax
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  00054	0f 85 18 02 00
	00		 jne	 $LN4@parseReque

  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ ; zl::net::ByteBuffer::findCRLF
  00061	89 45 b0	 mov	 DWORD PTR _crlf$1$[ebp], eax

  00064	85 c0		 test	 eax, eax
  00066	0f 84 ea 06 00
	00		 je	 $LN971@parseReque
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  0006c	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0006f	50		 push	 eax
  00070	ff 70 04	 push	 DWORD PTR [eax+4]
  00073	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00080	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00085	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0008b	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00090	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00092	6a 03		 push	 3
  00094	8d 4d 9c	 lea	 ecx, DWORD PTR __Lock$16[ebp]
  00097	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  000a4	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  000aa	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  000af	8d 4d 9c	 lea	 ecx, DWORD PTR __Lock$16[ebp]
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  000b8	8b 07		 mov	 eax, DWORD PTR [edi]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  000ba	8b cb		 mov	 ecx, ebx
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  000bc	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  000be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  000c5	8b 75 b0	 mov	 esi, DWORD PTR _crlf$1$[ebp]
  000c8	56		 push	 esi
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?processRequestLine@HttpContext@net@zl@@AAE_NPBD0@Z ; zl::net::HttpContext::processRequestLine
  000cf	88 45 b7	 mov	 BYTE PTR _ok$1$[ebp], al

  000d2	84 c0		 test	 al, al
  000d4	0f 84 7f 06 00
	00		 je	 $LN1@parseReque

  000da	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  000dd	89 45 b0	 mov	 DWORD PTR _len$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  000e0	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000e3	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000ea	50		 push	 eax
  000eb	ff 70 04	 push	 DWORD PTR [eax+4]
  000ee	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  000f4	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  000f9	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  000ff	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00104	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00106	6a 03		 push	 3
  00108	8d 4d 98	 lea	 ecx, DWORD PTR __Lock$15[ebp]
  0010b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00118	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0011e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00123	8d 4d 98	 lea	 ecx, DWORD PTR __Lock$15[ebp]
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  0012c	8b 07		 mov	 eax, DWORD PTR [edi]
  0012e	03 c6		 add	 eax, esi

; 165  :         assert(peek() <= end);

  00130	3b 45 b0	 cmp	 eax, DWORD PTR _len$1$[ebp]
  00133	76 18		 jbe	 SHORT $LN56@parseReque
  00135	68 a5 00 00 00	 push	 165			; 000000a5H
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@CEEBIDBF@?$AAp?$AAe?$AAe?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AAn?$AAd@
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN56@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 252  : 		: _Mybase(_Parg, _Pvector)

  0014d	8d 47 08	 lea	 eax, DWORD PTR [edi+8]

; 1618 : 		{	// return iterator for beginning of mutable sequence

  00150	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4

; 252  : 		: _Mybase(_Parg, _Pvector)

  00157	50		 push	 eax
  00158	ff 70 04	 push	 DWORD PTR [eax+4]
  0015b	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00161	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

  00166	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0016c	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 284  :         return &*buffer_.begin();

  00171	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00173	6a 03		 push	 3
  00175	8d 4d 94	 lea	 ecx, DWORD PTR __Lock$14[ebp]
  00178	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00185	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0018b	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  00190	8d 4d 94	 lea	 ecx, DWORD PTR __Lock$14[ebp]
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 241  :         return begin() + writerIndex_;

  00199	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0019c	03 c6		 add	 eax, esi

; 166  :         assert(end <= beginWrite());

  0019e	39 45 b0	 cmp	 DWORD PTR _len$1$[ebp], eax
  001a1	76 18		 jbe	 SHORT $LN57@parseReque
  001a3	68 a6 00 00 00	 push	 166			; 000000a6H
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@BNKFDNDJ@?$AAe?$AAn?$AAd?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AAW?$AAr?$AAi@
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  001bb	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  001be	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  001c5	50		 push	 eax
  001c6	ff 70 04	 push	 DWORD PTR [eax+4]
  001c9	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  001cf	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  001d4	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  001da	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  001df	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  001e1	6a 03		 push	 3
  001e3	8d 4d 90	 lea	 ecx, DWORD PTR __Lock$13[ebp]
  001e6	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  001f3	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  001f9	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  001fe	8d 4d 90	 lea	 ecx, DWORD PTR __Lock$13[ebp]
  00201	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 167  :         retrieve(end - peek());

  00207	8b 55 b0	 mov	 edx, DWORD PTR _len$1$[ebp]

; 50   :         return writerIndex_ - readerIndex_;

  0020a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 167  :         retrieve(end - peek());

  0020d	2b d6		 sub	 edx, esi
  0020f	2b 17		 sub	 edx, DWORD PTR [edi]

; 50   :         return writerIndex_ - readerIndex_;

  00211	8b c1		 mov	 eax, ecx
  00213	2b 07		 sub	 eax, DWORD PTR [edi]

; 146  :         assert(len <= readableBytes());

  00215	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___wassert
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  0021b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 167  :         retrieve(end - peek());

  00222	89 55 b0	 mov	 DWORD PTR _len$1$[ebp], edx

; 146  :         assert(len <= readableBytes());

  00225	3b d0		 cmp	 edx, eax
  00227	76 1a		 jbe	 SHORT $LN968@parseReque
  00229	68 92 00 00 00	 push	 146			; 00000092H
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  00233	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@OMGMEOPK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAa?$AAb?$AAl?$AAe@
  00238	ff d6		 call	 esi
  0023a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0023d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00240	8b 55 b0	 mov	 edx, DWORD PTR _len$1$[ebp]
$LN968@parseReque:

; 50   :         return writerIndex_ - readerIndex_;

  00243	8b 07		 mov	 eax, DWORD PTR [edi]
  00245	2b c8		 sub	 ecx, eax

; 147  :         if (len < readableBytes())

  00247	3b d1		 cmp	 edx, ecx
  00249	73 0f		 jae	 SHORT $LN145@parseReque

; 148  :         {
; 149  :             readerIndex_ += len;

  0024b	03 c2		 add	 eax, edx
  0024d	89 07		 mov	 DWORD PTR [edi], eax
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h

; 46   : 			void receiveRequestLine()      { state_ = kExpectHeaders; }

  0024f	c7 03 01 00 00
	00		 mov	 DWORD PTR [ebx], 1
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  00255	e9 58 02 00 00	 jmp	 $LN22@parseReque
$LN145@parseReque:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 172  :         readerIndex_ = kCheapPrepend;

  0025a	c7 07 08 00 00
	00		 mov	 DWORD PTR [edi], 8

; 173  :         writerIndex_ = kCheapPrepend;

  00260	c7 47 04 08 00
	00 00		 mov	 DWORD PTR [edi+4], 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h

; 46   : 			void receiveRequestLine()      { state_ = kExpectHeaders; }

  00267	c7 03 01 00 00
	00		 mov	 DWORD PTR [ebx], 1
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0026d	e9 40 02 00 00	 jmp	 $LN22@parseReque
$LN4@parseReque:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h

; 43   : 			bool expectHeaders() const     { return state_ == kExpectHeaders; }

  00272	83 f8 01	 cmp	 eax, 1
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  00275	0f 85 21 02 00
	00		 jne	 $LN10@parseReque

  0027b	8b cf		 mov	 ecx, edi
  0027d	e8 00 00 00 00	 call	 ?findCRLF@ByteBuffer@net@zl@@QBEPBDXZ ; zl::net::ByteBuffer::findCRLF
  00282	89 45 b0	 mov	 DWORD PTR _crlf$1$[ebp], eax

  00285	85 c0		 test	 eax, eax
  00287	0f 84 c9 04 00
	00		 je	 $LN971@parseReque
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  0028d	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  00290	50		 push	 eax
  00291	ff 70 04	 push	 DWORD PTR [eax+4]
  00294	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0029a	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  002a1	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  002a6	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  002ac	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  002b1	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  002b3	6a 03		 push	 3
  002b5	8d 4d 8c	 lea	 ecx, DWORD PTR __Lock$12[ebp]
  002b8	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  002bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  002c5	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  002cb	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  002d0	8d 4d 8c	 lea	 ecx, DWORD PTR __Lock$12[ebp]
  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  002d9	8b 07		 mov	 eax, DWORD PTR [edi]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  002db	8b cb		 mov	 ecx, ebx
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  002dd	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  002df	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  002e6	8b 75 b0	 mov	 esi, DWORD PTR _crlf$1$[ebp]
  002e9	56		 push	 esi
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 ?processReqestHeader@HttpContext@net@zl@@AAE_NPBD0@Z ; zl::net::HttpContext::processReqestHeader
  002f0	84 c0		 test	 al, al
  002f2	75 22		 jne	 SHORT $LN966@parseReque
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  002f4	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h

; 49   : 				if (request_.method() == HttpGet)

  002f7	83 f8 02	 cmp	 eax, 2
  002fa	75 08		 jne	 SHORT $LN186@parseReque

; 50   : 					state_ = kGotAll;

  002fc	c7 03 03 00 00
	00		 mov	 DWORD PTR [ebx], 3
  00302	eb 0b		 jmp	 SHORT $LN188@parseReque
$LN186@parseReque:

; 51   : 				else if (request_.method() == HttpPost)

  00304	83 f8 03	 cmp	 eax, 3
  00307	75 06		 jne	 SHORT $LN188@parseReque

; 52   : 					state_ = kExpectBody;

  00309	c7 03 02 00 00
	00		 mov	 DWORD PTR [ebx], 2
$LN188@parseReque:

; 45   : 			bool gotAll() const            { return state_ == kGotAll; }

  0030f	83 3b 03	 cmp	 DWORD PTR [ebx], 3
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  00312	0f 95 45 af	 setne	 BYTE PTR _hasMore$1$[ebp]
$LN966@parseReque:

  00316	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00319	89 45 b0	 mov	 DWORD PTR _len$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  0031c	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  0031f	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00326	50		 push	 eax
  00327	ff 70 04	 push	 DWORD PTR [eax+4]
  0032a	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00330	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00335	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0033b	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  00340	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00342	6a 03		 push	 3
  00344	8d 4d a0	 lea	 ecx, DWORD PTR __Lock$17[ebp]
  00347	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0034e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00354	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0035a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  0035f	8d 4d a0	 lea	 ecx, DWORD PTR __Lock$17[ebp]
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 192  :         return begin() + readerIndex_; 

  00368	8b 07		 mov	 eax, DWORD PTR [edi]
  0036a	03 c6		 add	 eax, esi

; 165  :         assert(peek() <= end);

  0036c	3b 45 b0	 cmp	 eax, DWORD PTR _len$1$[ebp]
  0036f	76 18		 jbe	 SHORT $LN198@parseReque
  00371	68 a5 00 00 00	 push	 165			; 000000a5H
  00376	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@CEEBIDBF@?$AAp?$AAe?$AAe?$AAk?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AAn?$AAd@
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00386	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN198@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 252  : 		: _Mybase(_Parg, _Pvector)

  00389	8d 47 08	 lea	 eax, DWORD PTR [edi+8]

; 1618 : 		{	// return iterator for beginning of mutable sequence

  0038c	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH

; 252  : 		: _Mybase(_Parg, _Pvector)

  00393	50		 push	 eax
  00394	ff 70 04	 push	 DWORD PTR [eax+4]
  00397	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0039d	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

  003a2	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  003a8	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 284  :         return &*buffer_.begin();

  003ad	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  003af	6a 03		 push	 3
  003b1	8d 4d a8	 lea	 ecx, DWORD PTR __Lock$20[ebp]
  003b4	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  003bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  003c1	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  003c7	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  003cc	8d 4d a8	 lea	 ecx, DWORD PTR __Lock$20[ebp]
  003cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 241  :         return begin() + writerIndex_;

  003d5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  003d8	03 c6		 add	 eax, esi

; 166  :         assert(end <= beginWrite());

  003da	39 45 b0	 cmp	 DWORD PTR _len$1$[ebp], eax
  003dd	76 18		 jbe	 SHORT $LN199@parseReque
  003df	68 a6 00 00 00	 push	 166			; 000000a6H
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@BNKFDNDJ@?$AAe?$AAn?$AAd?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AAW?$AAr?$AAi@
  003ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  003f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN199@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1624 : 		return (const_iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

  003f7	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  003fa	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00401	50		 push	 eax
  00402	ff 70 04	 push	 DWORD PTR [eax+4]
  00405	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0040b	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 289  :         return &*buffer_.begin();

  00410	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00416	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
  0041b	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0041d	6a 03		 push	 3
  0041f	8d 4d a4	 lea	 ecx, DWORD PTR __Lock$19[ebp]
  00422	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00429	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0042f	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00435	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  0043a	8d 4d a4	 lea	 ecx, DWORD PTR __Lock$19[ebp]
  0043d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 167  :         retrieve(end - peek());

  00443	8b 55 b0	 mov	 edx, DWORD PTR _len$1$[ebp]

; 50   :         return writerIndex_ - readerIndex_;

  00446	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 167  :         retrieve(end - peek());

  00449	2b d6		 sub	 edx, esi
  0044b	2b 17		 sub	 edx, DWORD PTR [edi]

; 50   :         return writerIndex_ - readerIndex_;

  0044d	8b c1		 mov	 eax, ecx
  0044f	2b 07		 sub	 eax, DWORD PTR [edi]

; 146  :         assert(len <= readableBytes());

  00451	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___wassert
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  00457	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 167  :         retrieve(end - peek());

  0045e	89 55 b0	 mov	 DWORD PTR _len$1$[ebp], edx

; 146  :         assert(len <= readableBytes());

  00461	3b d0		 cmp	 edx, eax
  00463	76 1a		 jbe	 SHORT $LN967@parseReque
  00465	68 92 00 00 00	 push	 146			; 00000092H
  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_1HK@JAGCKFE@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@OMGMEOPK@?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAa?$AAb?$AAl?$AAe@
  00474	ff d6		 call	 esi
  00476	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00479	83 c4 0c	 add	 esp, 12			; 0000000cH
  0047c	8b 55 b0	 mov	 edx, DWORD PTR _len$1$[ebp]
$LN967@parseReque:

; 50   :         return writerIndex_ - readerIndex_;

  0047f	8b 07		 mov	 eax, DWORD PTR [edi]
  00481	2b c8		 sub	 ecx, eax

; 147  :         if (len < readableBytes())

  00483	3b d1		 cmp	 edx, ecx
  00485	73 06		 jae	 SHORT $LN287@parseReque

; 148  :         {
; 149  :             readerIndex_ += len;

  00487	03 c2		 add	 eax, edx
  00489	89 07		 mov	 DWORD PTR [edi], eax

; 150  :         }
; 151  :         else

  0048b	eb 25		 jmp	 SHORT $LN22@parseReque
$LN287@parseReque:

; 172  :         readerIndex_ = kCheapPrepend;

  0048d	c7 07 08 00 00
	00		 mov	 DWORD PTR [edi], 8

; 173  :         writerIndex_ = kCheapPrepend;

  00493	c7 47 04 08 00
	00 00		 mov	 DWORD PTR [edi+4], 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0049a	eb 16		 jmp	 SHORT $LN22@parseReque
$LN10@parseReque:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h

; 44   : 			bool expectBody() const        { return state_ == kExpectBody; }

  0049c	83 f8 02	 cmp	 eax, 2
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0049f	74 20		 je	 SHORT $LN965@parseReque

  004a1	6a 6c		 push	 108			; 0000006cH
  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@OHPHNMOO@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@LPKPGOAL@?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAh?$AAe?$AAr?$AAe?$AA?5?$AAi?$AAs?$AA?5@
  004ad	ff d6		 call	 esi
  004af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN22@parseReque:

  004b2	80 7d af 00	 cmp	 BYTE PTR _hasMore$1$[ebp], 0
  004b6	0f 85 94 fb ff
	ff		 jne	 $LL2@parseReque
  004bc	e9 95 02 00 00	 jmp	 $LN971@parseReque
$LN965@parseReque:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 50   :         return writerIndex_ - readerIndex_;

  004c1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  004c4	2b 07		 sub	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  004c6	6a 08		 push	 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\bytebuffer.h

; 50   :         return writerIndex_ - readerIndex_;

  004c8	89 45 a8	 mov	 DWORD PTR _bufsize$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  004cb	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  004d2	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 0

; 1785 : 		_Myres(0)

  004d9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  004e0	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  004e5	89 45 b8	 mov	 DWORD PTR $T21[ebp], eax

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  004e8	8d 4d b8	 lea	 ecx, DWORD PTR $T21[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  004eb	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  004ee	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  004f4	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  004fb	8b 45 b8	 mov	 eax, DWORD PTR $T21[ebp]
  004fe	89 08		 mov	 DWORD PTR [eax], ecx

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00500	6a 0e		 push	 14			; 0000000eH
  00502	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HOJGPHBA@Content?9Length@

; 2182 : 		: _Mybase()

  00507	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 16 ; 00000010H

; 3976 : 		_My_data._Mysize = 0;

  0050e	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00515	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0051c	c6 45 bc 00	 mov	 BYTE PTR $T21[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00520	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  00525	8d 45 b8	 lea	 eax, DWORD PTR $T21[ebp]
  00528	c7 45 fc 11 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 17 ; 00000011H
  0052f	50		 push	 eax
  00530	8d 45 d4	 lea	 eax, DWORD PTR _value$22[ebp]
  00533	50		 push	 eax
  00534	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00537	e8 00 00 00 00	 call	 ?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z ; zl::net::HttpRequest::getHeader
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0053c	8d 4d b8	 lea	 ecx, DWORD PTR $T21[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0053f	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00543	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00548	8b 45 d0	 mov	 eax, DWORD PTR $T21[ebp+24]
  0054b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0054e	72 0d		 jb	 SHORT $LN636@parseReque

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00550	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00551	50		 push	 eax
  00552	ff 75 bc	 push	 DWORD PTR $T21[ebp+4]
  00555	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0055a	83 c4 08	 add	 esp, 8
$LN636@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0055d	8d 4d b8	 lea	 ecx, DWORD PTR $T21[ebp]

; 3995 : 		_My_data._Mysize = 0;

  00560	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00567	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0056e	c6 45 bc 00	 mov	 BYTE PTR $T21[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00572	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00577	6a 08		 push	 8
  00579	ff 75 b8	 push	 DWORD PTR $T21[ebp]
  0057c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00581	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00584	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp], 0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  0058b	83 7d e8 00	 cmp	 DWORD PTR _value$22[ebp+20], 0
  0058f	75 11		 jne	 SHORT $LN20@parseReque
  00591	6a 54		 push	 84			; 00000054H
  00593	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@OHPHNMOO@?$AAg?$AA?3?$AA?2?$AAQ?$PP?P?$AA?2?$AAh?$AAa?$AAp?$AAp?$AAy?$AAg?$AAa?$AAm?$AAe@
  00598	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@GODENGIM@?$AA?$CB?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ@
  0059d	ff d6		 call	 esi
  0059f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 486  : 		{	// construct readable character buffer from NTCS

  005a2	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+96]
  005a8	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iss$2[ebp], OFFSET ??_8?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  005b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  005b8	6a 00		 push	 0
  005ba	6a 00		 push	 0
  005bc	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _iss$2[ebp+16]
  005c2	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  005c6	50		 push	 eax
  005c7	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp]
  005cd	c7 45 a4 02 00
	00 00		 mov	 DWORD PTR $T18[ebp], 2
  005d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  005da	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _iss$2[ebp]
  005e0	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 21 ; 00000015H
  005e7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  005ea	c7 84 05 80 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _iss$2[ebp+eax], OFFSET ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  005f5	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _iss$2[ebp]
  005fb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005fe	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  00601	89 84 0d 7c fe
	ff ff		 mov	 DWORD PTR _iss$2[ebp+ecx-4], eax
  00608	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _iss$2[ebp+16]

; 38   : 		{	// construct character buffer from string, mode

  0060e	8b c8		 mov	 ecx, eax

; 485  : 			_Stringbuffer(_Str, _Mode | ios_base::in)

  00610	89 45 a0	 mov	 DWORD PTR _this$[ebp], eax

; 38   : 		{	// construct character buffer from string, mode

  00613	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00619	83 7d ec 10	 cmp	 DWORD PTR _value$22[ebp+24], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0061d	8d 75 d8	 lea	 esi, DWORD PTR _value$22[ebp+4]

; 3302 : 		return (this->_Get_data()._Mysize);

  00620	8b 7d e8	 mov	 edi, DWORD PTR _value$22[ebp+20]

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00623	8b d7		 mov	 edx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 38   : 		{	// construct character buffer from string, mode

  00625	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00629	8b cf		 mov	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 38   : 		{	// construct character buffer from string, mode

  0062b	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iss$2[ebp+16], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00635	89 75 b0	 mov	 DWORD PTR __Result$1$[ebp], esi

; 1815 : 		if (_Large_string_engaged())

  00638	72 06		 jb	 SHORT $LN754@parseReque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0063a	8b 45 d8	 mov	 eax, DWORD PTR _value$22[ebp+4]
  0063d	89 45 b0	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN754@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 39   : 		_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));

  00640	b8 02 00 00 00	 mov	 eax, 2
  00645	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH

; 362  : 		if (_Count > INT_MAX)

  0064b	0f 87 b5 01 00
	00		 ja	 $LN960@parseReque

; 365  : 			}
; 366  : 
; 367  : 		if (_Count != 0 && (_State & (_Noread | _Constant)) != (_Noread | _Constant))

  00651	85 c9		 test	 ecx, ecx
  00653	74 3d		 je	 SHORT $LN762@parseReque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00655	57		 push	 edi
  00656	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0065b	57		 push	 edi
  0065c	ff 75 b0	 push	 DWORD PTR __Result$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 369  : 			const auto _Pnew = _Unfancy(_Al.allocate(_Count));

  0065f	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00661	56		 push	 esi
  00662	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 371  : 			_Seekhigh = _Pnew + _Count;

  00667	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0066a	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 371  : 			_Seekhigh = _Pnew + _Count;

  0066d	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _iss$2[ebp+72], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00673	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _iss$2[ebp+28]
  00679	89 31		 mov	 DWORD PTR [ecx], esi

; 252  : 		*_IGnext = _Next;

  0067b	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _iss$2[ebp+44]
  00681	89 30		 mov	 DWORD PTR [eax], esi

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00683	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _iss$2[ebp+60]
  00689	89 38		 mov	 DWORD PTR [eax], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 390  : 			_State |= _Allocated;

  0068b	b8 03 00 00 00	 mov	 eax, 3

; 391  : 			}
; 392  : 		else

  00690	eb 0a		 jmp	 SHORT $LN763@parseReque
$LN762@parseReque:

; 393  : 			{
; 394  : 			_Seekhigh = nullptr;

  00692	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iss$2[ebp+72], 0
$LN763@parseReque:

; 395  : 			}
; 396  : 
; 397  : 		_Mystate = _State;

  0069c	89 85 cc fe ff
	ff		 mov	 DWORD PTR _iss$2[ebp+76], eax
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  006a2	8d 45 88	 lea	 eax, DWORD PTR _content_len$11[ebp]
  006a5	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  006a9	50		 push	 eax
  006aa	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp]
  006b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z

  006b6	8b 45 a8	 mov	 eax, DWORD PTR _bufsize$1$[ebp]
  006b9	3b 45 88	 cmp	 eax, DWORD PTR _content_len$11[ebp]
  006bc	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _iss$2[ebp]
  006c2	0f 8c af 00 00
	00		 jl	 $LN17@parseReque
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.h

; 54   : 			void receiveBody()             { state_ = kGotAll; }

  006c8	c7 03 03 00 00
	00		 mov	 DWORD PTR [ebx], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 523  : 		{	// destroy the object

  006ce	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  006d1	c7 84 05 80 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _iss$2[ebp+eax], OFFSET ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  006dc	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _iss$2[ebp]
  006e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006e5	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  006e8	89 84 0d 7c fe
	ff ff		 mov	 DWORD PTR _iss$2[ebp+ecx-4], eax

; 524  : 		}

  006ef	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+16]
  006f5	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  006fa	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+24]
  00700	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00706	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+96]
  0070c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00712	8d 4d d4	 lea	 ecx, DWORD PTR _value$22[ebp]
  00715	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0071a	8b 45 ec	 mov	 eax, DWORD PTR _value$22[ebp+24]
  0071d	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00720	72 0d		 jb	 SHORT $LN884@parseReque

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00722	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00723	50		 push	 eax
  00724	ff 75 d8	 push	 DWORD PTR _value$22[ebp+4]
  00727	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0072c	83 c4 08	 add	 esp, 8
$LN884@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0072f	8d 4d d4	 lea	 ecx, DWORD PTR _value$22[ebp]

; 3995 : 		_My_data._Mysize = 0;

  00732	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _value$22[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00739	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _value$22[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00740	c6 45 d8 00	 mov	 BYTE PTR _value$22[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00744	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00749	6a 08		 push	 8
  0074b	ff 75 d4	 push	 DWORD PTR _value$22[ebp]
  0074e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00753	83 c4 08	 add	 esp, 8
$LN971@parseReque:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  00756	8a 45 b7	 mov	 al, BYTE PTR _ok$1$[ebp]
$LN1@parseReque:

  00759	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0075c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00763	59		 pop	 ecx
  00764	5f		 pop	 edi
  00765	5e		 pop	 esi
  00766	5b		 pop	 ebx
  00767	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0076a	33 cd		 xor	 ecx, ebp
  0076c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00771	8b e5		 mov	 esp, ebp
  00773	5d		 pop	 ebp
  00774	c2 04 00	 ret	 4
$LN17@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 523  : 		{	// destroy the object

  00777	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0077a	c7 84 05 80 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _iss$2[ebp+eax], OFFSET ??_7?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00785	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _iss$2[ebp]
  0078b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0078e	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  00791	89 84 0d 7c fe
	ff ff		 mov	 DWORD PTR _iss$2[ebp+ecx-4], eax

; 524  : 		}

  00798	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+16]
  0079e	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  007a3	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+24]
  007a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  007af	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+96]
  007b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  007bb	8d 4d d4	 lea	 ecx, DWORD PTR _value$22[ebp]
  007be	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  007c3	8b 45 ec	 mov	 eax, DWORD PTR _value$22[ebp+24]
  007c6	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  007c9	72 0d		 jb	 SHORT $LN800@parseReque

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  007cb	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007cc	50		 push	 eax
  007cd	ff 75 d8	 push	 DWORD PTR _value$22[ebp+4]
  007d0	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  007d5	83 c4 08	 add	 esp, 8
$LN800@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  007d8	8d 4d d4	 lea	 ecx, DWORD PTR _value$22[ebp]

; 3995 : 		_My_data._Mysize = 0;

  007db	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _value$22[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  007e2	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _value$22[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  007e9	c6 45 d8 00	 mov	 BYTE PTR _value$22[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  007ed	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  007f2	6a 08		 push	 8
  007f4	ff 75 d4	 push	 DWORD PTR _value$22[ebp]
  007f7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  007fc	83 c4 08	 add	 esp, 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp

  007ff	32 c0		 xor	 al, al
  00801	e9 53 ff ff ff	 jmp	 $LN1@parseReque
$LN960@parseReque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 364  : 			_Xbad_alloc();

  00806	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN973@parseReque:
  0080b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$39:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T21[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$0:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR $T21[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$1:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR _value$22[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$55:
  00018	8b 45 a4	 mov	 eax, DWORD PTR $T18[ebp]
  0001b	83 e0 02	 and	 eax, 2
  0001e	0f 84 10 00 00
	00		 je	 $LN723@parseReque
  00024	83 65 a4 fd	 and	 DWORD PTR $T18[ebp], -3	; fffffffdH
  00028	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+96]
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN723@parseReque:
  00034	c3		 ret	 0
__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$56:
  00035	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp+24]
  0003b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$58:
  00041	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__unwindfunclet$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z$2:
  0004a	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR _iss$2[ebp]
  00050	e9 00 00 00 00	 jmp	 ??_D?$basic_istringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__ehhandler$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z:
  00055	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00059	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005c	8b 8a 7c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-388]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?parseRequest@HttpContext@net@zl@@QAE_NPAVByteBuffer@23@@Z ENDP ; zl::net::HttpContext::parseRequest
; Function compile flags: /Ogtp
;	COMDAT ??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAEPAXI@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 38		 push	 56			; 00000038H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAEPAXI@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 2023 : 		_Get_data()._Orphan_all();

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00007	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000c	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0000f	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00012	72 0d		 jb	 SHORT $LN7@pair

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00014	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	50		 push	 eax
  00016	ff 76 20	 push	 DWORD PTR [esi+32]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8
$LN7@pair:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00021	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 2023 : 		_Get_data()._Orphan_all();

  00028	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0002b	c7 46 34 0f 00
	00 00		 mov	 DWORD PTR [esi+52], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00032	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00036	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003b	6a 08		 push	 8
  0003d	ff 76 1c	 push	 DWORD PTR [esi+28]
  00040	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00045	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00048	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 2023 : 		_Get_data()._Orphan_all();

  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0005c	72 0d		 jb	 SHORT $LN86@pair

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0005e	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005f	50		 push	 eax
  00060	ff 76 04	 push	 DWORD PTR [esi+4]
  00063	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00068	83 c4 08	 add	 esp, 8
$LN86@pair:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0006b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2023 : 		_Get_data()._Orphan_all();

  00072	8b ce		 mov	 ecx, esi

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00074	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0007b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0007f	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00084	6a 08		 push	 8
  00086	ff 36		 push	 DWORD PTR [esi]
  00088	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008d	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00090	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	c3		 ret	 0
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00026	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	39 06		 cmp	 DWORD PTR [esi], eax
  00034	74 2a		 je	 SHORT $LN8@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)

  00036	85 c0		 test	 eax, eax
  00038	75 1d		 jne	 SHORT $LN7@operator

; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);

  0003a	6a 03		 push	 3
  0003c	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 126  : 				_Orphan_me();

  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}

  0004c	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ

; 129  : 			else

  00055	eb 09		 jmp	 SHORT $LN8@operator
$LN7@operator:

; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00057	ff 30		 push	 DWORD PTR [eax]
  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN8@operator:
  00060	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00063	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN11@Tree_const

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN11@Tree_const:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN11@Tree_const

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN11@Tree_const:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator!=, COMDAT
; _this$ = ecx

; 282  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 		return (!(*this == _Right));

  00003	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00006	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  0000b	84 c0		 test	 al, al
  0000d	0f 94 c0	 sete	 al

; 284  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==, COMDAT
; _this$ = ecx

; 273  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 274  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 275  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b cb		 mov	 ecx, ebx
  0000d	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00012	8b cf		 mov	 ecx, edi
  00014	8b f0		 mov	 esi, eax
  00016	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0001b	3b c6		 cmp	 eax, esi
  0001d	74 46		 je	 SHORT $LN6@operator
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00029	6a 00		 push	 0
  0002b	68 13 01 00 00	 push	 275			; 00000113H
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00035	6a 02		 push	 2
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	83 f8 01	 cmp	 eax, 1
  00043	75 01		 jne	 SHORT $LN11@operator
  00045	cc		 int	 3
$LN11@operator:
  00046	6a 00		 push	 0
  00048	68 13 01 00 00	 push	 275			; 00000113H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1CFG@FGJHCIBH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00062	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:

; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);

  00065	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00068	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	0f 94 c0	 sete	 al
  00070	5b		 pop	 ebx

; 279  : 		}

  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
tv442 = -8						; size = 4
tv443 = -4						; size = 4
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--, COMDAT
; _this$ = ecx

; 252  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");

  0000b	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00010	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___CrtDbgReport
  00016	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter
  0001c	85 c0		 test	 eax, eax
  0001e	75 3e		 jne	 SHORT $LN6@operator
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002a	6a 00		 push	 0
  0002c	68 00 01 00 00	 push	 256			; 00000100H
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00036	6a 02		 push	 2
  00038	ff d7		 call	 edi
  0003a	83 c4 18	 add	 esp, 24			; 00000018H
  0003d	83 f8 01	 cmp	 eax, 1
  00040	75 01		 jne	 SHORT $LN19@operator
  00042	cc		 int	 3
$LN19@operator:
  00043	6a 00		 push	 0
  00045	68 00 01 00 00	 push	 256			; 00000100H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1CFG@FFIHNBD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
  00059	ff d3		 call	 ebx
  0005b	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:

; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;

  0005e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 86   : 		if (_Ptr->_Isnil)

  00061	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00065	74 05		 je	 SHORT $LN24@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  00067	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006a	eb 62		 jmp	 SHORT $LN32@operator
$LN24@operator:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

  0006c	8b 02		 mov	 eax, DWORD PTR [edx]
  0006e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00072	74 46		 je	 SHORT $LN26@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  00074	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00077	8b c2		 mov	 eax, edx
  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 2e		 jne	 SHORT $LN23@operator
  0007f	8b fa		 mov	 edi, edx
  00081	8b da		 mov	 ebx, edx
$LL22@operator:
  00083	8b c3		 mov	 eax, ebx
  00085	89 4d f8	 mov	 DWORD PTR tv442[ebp], ecx
  00088	89 4d fc	 mov	 DWORD PTR tv443[ebp], ecx
  0008b	3b 39		 cmp	 edi, DWORD PTR [ecx]
  0008d	75 12		 jne	 SHORT $LN43@operator
  0008f	8b f9		 mov	 edi, ecx

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00091	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00094	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00097	8b df		 mov	 ebx, edi
  00099	8b c7		 mov	 eax, edi
  0009b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0009f	74 e2		 je	 SHORT $LL22@operator
$LN43@operator:
  000a1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter
  000a7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___CrtDbgReport
$LN23@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  000ad	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b1	75 1e		 jne	 SHORT $LN10@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  000b3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  000b6	8b c1		 mov	 eax, ecx

; 101  : 				}
; 102  : 			}
; 103  : 		else

  000b8	eb 17		 jmp	 SHORT $LN10@operator
$LN26@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000ba	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000bd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000c1	75 0b		 jne	 SHORT $LN32@operator
$LL31@operator:

; 480  : 			_Pnode = _Pnode->_Right;

  000c3	8b c1		 mov	 eax, ecx
  000c5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000cc	74 f5		 je	 SHORT $LL31@operator
$LN32@operator:

; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");

  000ce	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN10@operator:
  000d1	3b d0		 cmp	 edx, eax
  000d3	75 3e		 jne	 SHORT $LN42@operator
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000df	6a 00		 push	 0
  000e1	68 03 01 00 00	 push	 259			; 00000103H
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000eb	6a 02		 push	 2
  000ed	ff d7		 call	 edi
  000ef	83 c4 18	 add	 esp, 24			; 00000018H
  000f2	83 f8 01	 cmp	 eax, 1
  000f5	75 01		 jne	 SHORT $LN20@operator
  000f7	cc		 int	 3
$LN20@operator:
  000f8	6a 00		 push	 0
  000fa	68 03 01 00 00	 push	 259			; 00000103H
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_1CFG@FFIHNBD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
  0010e	ff d3		 call	 ebx
  00110	83 c4 14	 add	 esp, 20			; 00000014H
$LN42@operator:

; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}

  00113	5f		 pop	 edi
  00114	8b c6		 mov	 eax, esi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator++, COMDAT
; _this$ = ecx

; 234  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");

  00003	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00008	85 c0		 test	 eax, eax
  0000a	75 45		 jne	 SHORT $LN6@operator
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00016	50		 push	 eax
  00017	68 ec 00 00 00	 push	 236			; 000000ecH
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00021	6a 02		 push	 2
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	83 f8 01	 cmp	 eax, 1
  0002f	75 01		 jne	 SHORT $LN19@operator
  00031	cc		 int	 3
$LN19@operator:
  00032	6a 00		 push	 0
  00034	68 ec 00 00 00	 push	 236			; 000000ecH
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1CFG@PGGKMBNC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0004e	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:

; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");

  00051	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00054	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00058	74 49		 je	 SHORT $LN12@operator
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00064	6a 00		 push	 0
  00066	68 ed 00 00 00	 push	 237			; 000000edH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00070	6a 02		 push	 2
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 01		 jne	 SHORT $LN20@operator
  00080	cc		 int	 3
$LN20@operator:
  00081	6a 00		 push	 0
  00083	68 ed 00 00 00	 push	 237			; 000000edH
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_1CFG@PGGKMBNC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@operator:

; 59   : 		if (_Ptr->_Right->_Isnil)

  000a3	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a6	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000aa	74 23		 je	 SHORT $LN24@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  000ac	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 13		 jne	 SHORT $LN39@operator
$LL22@operator:
  000b5	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000b8	75 0e		 jne	 SHORT $LN39@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000ba	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000bd	8b c8		 mov	 ecx, eax
  000bf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c6	74 ed		 je	 SHORT $LL22@operator
$LN39@operator:

; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  000c8	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 242  : 		}

  000cb	8b c6		 mov	 eax, esi
  000cd	5e		 pop	 esi
  000ce	c3		 ret	 0
$LN24@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000cf	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000d1	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000d5	75 0c		 jne	 SHORT $LN29@operator
$LL28@operator:
  000d7	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  000d9	8b d1		 mov	 edx, ecx
  000db	8b c8		 mov	 ecx, eax
  000dd	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000e1	74 f4		 je	 SHORT $LL28@operator
$LN29@operator:

; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  000e3	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 242  : 		}

  000e6	8b c6		 mov	 eax, esi
  000e8	5e		 pop	 esi
  000e9	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator->, COMDAT
; _this$ = ecx

; 230  : 		return (pointer_traits<pointer>::pointer_to(**this));

  00000	e9 00 00 00 00	 jmp	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEPBU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*, COMDAT
; _this$ = ecx

; 218  : 		{	// return designated value

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 06		 je	 SHORT $LN25@operator
$LN23@operator:
  0000a	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 221  : 		_STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

  0000c	85 f6		 test	 esi, esi
  0000e	75 46		 jne	 SHORT $LN6@operator
$LN25@operator:
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0001a	6a 00		 push	 0
  0001c	68 dd 00 00 00	 push	 221			; 000000ddH
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00026	6a 02		 push	 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 01		 jne	 SHORT $LN19@operator
  00036	cc		 int	 3
$LN19@operator:
  00037	6a 00		 push	 0
  00039	68 dd 00 00 00	 push	 221			; 000000ddH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1CFE@PPLBLEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00053	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:

; 222  : 		_STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

  00056	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00059	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0005c	75 49		 jne	 SHORT $LN26@operator
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00068	6a 00		 push	 0
  0006a	68 de 00 00 00	 push	 222			; 000000deH
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	6a 02		 push	 2
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0007c	83 c4 18	 add	 esp, 24			; 00000018H
  0007f	83 f8 01	 cmp	 eax, 1
  00082	75 01		 jne	 SHORT $LN20@operator
  00084	cc		 int	 3
$LN20@operator:
  00085	6a 00		 push	 0
  00087	68 de 00 00 00	 push	 222			; 000000deH
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1CFE@PPLBLEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a1	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000a4	83 c4 14	 add	 esp, 20			; 00000014H
$LN26@operator:

; 223  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 224  : 
; 225  : 		return (this->_Ptr->_Myval);
; 226  : 		}

  000a7	5f		 pop	 edi
  000a8	83 c0 10	 add	 eax, 16			; 00000010H
  000ab	5e		 pop	 esi
  000ac	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
__Pnode$ = 8						; size = 4
__Lock$3 = 12						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 42   : 		: _Ptr(_Pnode)

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 148  : 		if (_Parent == nullptr)

  0003d	8b 7d 0c	 mov	 edi, DWORD PTR __Plist$[ebp]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 ff		 test	 edi, edi
  00049	75 17		 jne	 SHORT $LN10@Tree_const

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	6a 03		 push	 3
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 152  : 			_Orphan_me();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

  0005d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]

; 155  : 		else

  00060	eb 26		 jmp	 SHORT $LN17@Tree_const
$LN10@Tree_const:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  00062	8b 3f		 mov	 edi, DWORD PTR [edi]

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

  00064	85 ff		 test	 edi, edi
  00066	74 26		 je	 SHORT $LN15@Tree_const

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

  00068	6a 03		 push	 3
  0006a	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 163  : 				_Orphan_me();

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  0007a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}

  0007d	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00080	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00083	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00086	89 3e		 mov	 DWORD PTR [esi], edi
$LN17@Tree_const:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 215  : 		}

  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN15@Tree_const:
  0008e	8b c6		 mov	 eax, esi
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT
; _this$ = ecx

; 209  : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 210  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 37   : 		: _Ptr()

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 210  : 		}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00026	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	39 06		 cmp	 DWORD PTR [esi], eax
  00034	74 2a		 je	 SHORT $LN6@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)

  00036	85 c0		 test	 eax, eax
  00038	75 1d		 jne	 SHORT $LN5@operator

; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);

  0003a	6a 03		 push	 3
  0003c	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 126  : 				_Orphan_me();

  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}

  0004c	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ

; 129  : 			else

  00055	eb 09		 jmp	 SHORT $LN6@operator
$LN5@operator:

; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00057	ff 30		 push	 DWORD PTR [eax]
  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN6@operator:
  00060	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00063	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN8@Tree_unche

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN8@Tree_unche:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN8@Tree_unche

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN8@Tree_unche:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
tv320 = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::operator--, COMDAT
; _this$ = ecx

; 85   : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 86   : 		if (_Ptr->_Isnil)

  00007	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0000e	74 0d		 je	 SHORT $LN4@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
$LN4@operator:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

  0001d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001f	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00023	74 3e		 je	 SHORT $LN6@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	75 25		 jne	 SHORT $LN23@operator
  0002e	57		 push	 edi
  0002f	8b ca		 mov	 ecx, edx
  00031	8b fa		 mov	 edi, edx
  00033	53		 push	 ebx
$LL2@operator:
  00034	8b d8		 mov	 ebx, eax
  00036	89 45 fc	 mov	 DWORD PTR tv320[ebp], eax
  00039	8b d7		 mov	 edx, edi
  0003b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003d	75 12		 jne	 SHORT $LN25@operator

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00042	8b c8		 mov	 ecx, eax
  00044	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00047	8b f9		 mov	 edi, ecx
  00049	8b d3		 mov	 edx, ebx
  0004b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004f	74 e3		 je	 SHORT $LL2@operator
$LN25@operator:
  00051	5b		 pop	 ebx
  00052	5f		 pop	 edi
$LN23@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  00053	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00057	75 25		 jne	 SHORT $LN26@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

  0005c	8b c6		 mov	 eax, esi
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN6@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00063	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00066	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006a	75 0f		 jne	 SHORT $LN12@operator
  0006c	0f 1f 40 00	 npad	 4
$LL11@operator:

; 480  : 			_Pnode = _Pnode->_Right;

  00070	8b c8		 mov	 ecx, eax
  00072	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00075	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00079	74 f5		 je	 SHORT $LL11@operator
$LN12@operator:

; 101  : 				}
; 102  : 			}
; 103  : 		else
; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

  0007b	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
$LN26@operator:

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

  0007e	8b c6		 mov	 eax, esi
  00080	5e		 pop	 esi
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00007	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0000a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000e	74 2b		 je	 SHORT $LN4@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00010	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00013	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00017	75 1a		 jne	 SHORT $LN19@operator
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@operator:
  00020	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00023	75 0e		 jne	 SHORT $LN19@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00025	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00028	8b d0		 mov	 edx, eax
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00031	74 ed		 je	 SHORT $LL2@operator
$LN19@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  00033	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 75   : 		}

  00036	8b c6		 mov	 eax, esi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	c3		 ret	 0
$LN4@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0003b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0003d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00041	75 0c		 jne	 SHORT $LN9@operator
$LL8@operator:
  00043	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00045	8b f9		 mov	 edi, ecx
  00047	8b c8		 mov	 ecx, eax
  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  0004f	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 75   : 		}

  00052	8b c6		 mov	 eax, esi
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
__Pnode$ = 8						; size = 4
__Lock$3 = 12						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 42   : 		: _Ptr(_Pnode)

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 148  : 		if (_Parent == nullptr)

  0003d	8b 7d 0c	 mov	 edi, DWORD PTR __Plist$[ebp]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 ff		 test	 edi, edi
  00049	75 17		 jne	 SHORT $LN7@Tree_unche

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	6a 03		 push	 3
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 152  : 			_Orphan_me();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

  0005d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]

; 155  : 		else

  00060	eb 26		 jmp	 SHORT $LN14@Tree_unche
$LN7@Tree_unche:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  00062	8b 3f		 mov	 edi, DWORD PTR [edi]

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

  00064	85 ff		 test	 edi, edi
  00066	74 26		 je	 SHORT $LN12@Tree_unche

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

  00068	6a 03		 push	 3
  0006a	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 163  : 				_Orphan_me();

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  0007a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}

  0007d	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00080	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00083	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00086	89 3e		 mov	 DWORD PTR [esi], edi
$LN14@Tree_unche:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 45   : 		}

  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN12@Tree_unche:
  0008e	8b c6		 mov	 eax, esi
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 37   : 		: _Ptr()

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 39   : 		}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4219 : 	{	// test for string vs. NTCTS equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL18@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL18@operator
  00017	2b c2		 sub	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00019	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001c	83 7a 18 10	 cmp	 DWORD PTR [edx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00020	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]

; 1815 : 		if (_Large_string_engaged())

  00023	72 02		 jb	 SHORT $LN12@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00025	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN12@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00027	50		 push	 eax
  00028	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  0002b	ff 72 14	 push	 DWORD PTR [edx+20]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 4220 : 	return (_Left._Equal(_Right));
; 4221 : 	}

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 16
__$EHRec$ = -12						; size = 12
__Lock$3 = 8						; size = 4
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[], COMDAT
; _this$ = ecx

; 362  : 		{	// find element matching _Keyval or insert with default mapped

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 248  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  00026	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  00029	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 332  : 		return ((reference)**(_Mybase *)this);

  00032	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00035	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 363  : 		return (try_emplace(_Keyval).first->second);

  0003a	8d 70 1c	 lea	 esi, DWORD PTR [eax+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0003d	6a 03		 push	 3
  0003f	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0004f	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00052	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00057	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 363  : 		return (try_emplace(_Keyval).first->second);

  00060	8b c6		 mov	 eax, esi

; 364  : 		}

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5e		 pop	 esi
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV21@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Key, COMDAT
; _this$ = ecx

; 2122 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2124 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2117 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2118 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2119 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2031 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2032 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@ABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2033 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Destroy_if_node, COMDAT
; _this$ = ecx

; 1585 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1586 : 		_Alnode& _Al = this->_Getal();
; 1587 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Newnode->_Myval));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newnode$[ebp]
  00007	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0000a	e8 00 00 00 00	 call	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0000f	6a 48		 push	 72			; 00000048H
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1589 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Destroy_if_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1485 : 		{	// find leftmost node not less than _Keyval in nonmutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1486 : 		return (const_iterator(_Lbound(_Keyval), _STD addressof(this->_Get_data())));

  00003	51		 push	 ecx
  00004	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00007	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1487 : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1480 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1481 : 		return (iterator(_Lbound(_Keyval), _STD addressof(this->_Get_data())));

  00004	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 326  : 		: _Mybase(_Pnode, _Plist)

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	56		 push	 esi
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1481 : 		return (iterator(_Lbound(_Keyval), _STD addressof(this->_Get_data())));

  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	5e		 pop	 esi

; 1482 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T2 = -64						; size = 12
$T3 = -52						; size = 12
__Where$ = -40						; size = 12
$T4 = -28						; size = 12
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Lock$6 = 12						; size = 4
__Lock$7 = 12						; size = 4
__Lock$8 = 12						; size = 4
__Lock$9 = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::find, COMDAT
; _this$ = ecx

; 1432 : 		{	// find an element in nonmutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 1486 : 		return (const_iterator(_Lbound(_Keyval), _STD addressof(this->_Get_data())));

  00031	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0003b	50		 push	 eax
  0003c	8d 4d d8	 lea	 ecx, DWORD PTR __Where$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1205 : 		return (const_iterator(_My_data._Myhead, _STD addressof(_My_data)));

  00044	56		 push	 esi
  00045	ff 76 04	 push	 DWORD PTR [esi+4]
  00048	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00052	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1434 : 		return (_Where == end()

  00057	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0005a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005e	50		 push	 eax
  0005f	8d 4d d8	 lea	 ecx, DWORD PTR __Where$[ebp]
  00062	c7 45 f0 11 00
	00 00		 mov	 DWORD PTR $T5[ebp], 17	; 00000011H
  00069	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  0006e	84 c0		 test	 al, al
  00070	75 44		 jne	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00072	8b 45 e0	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00075	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1434 : 		return (_Where == end()

  00078	50		 push	 eax
  00079	57		 push	 edi
  0007a	56		 push	 esi
  0007b	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@ABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@std@@YA_NABUstring_cmp_nocase@base@zl@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<zl::base::string_cmp_nocase const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	84 c0		 test	 al, al
  00085	75 2f		 jne	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00087	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
  0008e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 119  : 		{	// assign an iterator

  00095	8b 45 d8	 mov	 eax, DWORD PTR __Where$[ebp]
  00098	85 c0		 test	 eax, eax

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0009a	74 0a		 je	 SHORT $LN61@find

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0009c	ff 30		 push	 DWORD PTR [eax]
  0009e	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  000a1	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN61@find:
  000a6	8b 45 e0	 mov	 eax, DWORD PTR __Where$[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1434 : 		return (_Where == end()

  000a9	8d 7d e4	 lea	 edi, DWORD PTR $T4[ebp]
  000ac	89 45 ec	 mov	 DWORD PTR $T4[ebp+8], eax
  000af	bb 13 00 00 00	 mov	 ebx, 19			; 00000013H
  000b4	eb 1b		 jmp	 SHORT $LN4@find
$LN3@find:

; 1205 : 		return (const_iterator(_My_data._Myhead, _STD addressof(_My_data)));

  000b6	56		 push	 esi
  000b7	ff 76 04	 push	 DWORD PTR [esi+4]
  000ba	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  000bd	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  000c4	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1434 : 		return (_Where == end()

  000c9	8d 7d cc	 lea	 edi, DWORD PTR $T3[ebp]
  000cc	bb 15 00 00 00	 mov	 ebx, 21			; 00000015H
$LN4@find:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  000d1	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  000d4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000da	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  000e1	8b 07		 mov	 eax, DWORD PTR [edi]
  000e3	85 c0		 test	 eax, eax
  000e5	74 09		 je	 SHORT $LN86@find

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  000e7	ff 30		 push	 DWORD PTR [eax]
  000e9	8b ce		 mov	 ecx, esi
  000eb	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN86@find:
  000f0	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1434 : 		return (_Where == end()

  000f3	83 cb 08	 or	 ebx, 8
  000f6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  000fc	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000ff	f6 c3 04	 test	 bl, 4
  00102	74 25		 je	 SHORT $LN96@find
  00104	83 e3 fb	 and	 ebx, -5			; fffffffbH
  00107	89 5d f0	 mov	 DWORD PTR $T5[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0010a	6a 03		 push	 3
  0010c	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  0010f	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00116	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00118	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  0011b	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00120	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$9[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN96@find:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1434 : 		return (_Where == end()

  00129	f6 c3 02	 test	 bl, 2
  0012c	74 29		 je	 SHORT $LN125@find
  0012e	83 e3 fd	 and	 ebx, -3			; fffffffdH
  00131	89 5d f0	 mov	 DWORD PTR $T5[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00134	6a 03		 push	 3
  00136	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00139	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  00140	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00142	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  00145	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0014a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00150	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00153	ff d3		 call	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1434 : 		return (_Where == end()

  00155	eb 06		 jmp	 SHORT $LN105@find
$LN125@find:
  00157	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN105@find:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0015d	6a 03		 push	 3
  0015f	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00162	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  00169	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  0016b	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  0016e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00173	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00176	ff d3		 call	 ebx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00178	6a 03		 push	 3
  0017a	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0017d	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  00184	ff d7		 call	 edi

; 142  : 		_Orphan_me();

  00186	8d 4d d8	 lea	 ecx, DWORD PTR __Where$[ebp]
  00189	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0018e	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00191	ff d3		 call	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1434 : 		return (_Where == end()

  00193	8b c6		 mov	 eax, esi

; 1435 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1436 : 				_Keyval, this->_Key(_Where._Ptr))
; 1437 : 					? end() : _Where);
; 1438 : 		}

  00195	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00198	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019f	59		 pop	 ecx
  001a0	5f		 pop	 edi
  001a1	5e		 pop	 esi
  001a2	5b		 pop	 ebx
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN7@find
  00014	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00018	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
$LN7@find:
  00020	c3		 ret	 0
__ehhandler$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::find
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::max_size, COMDAT
; _this$ = ecx

; 1275 : 		return (_Alnode_traits::max_size(this->_Getal()));

  00000	b8 e3 38 8e 03	 mov	 eax, 59652323		; 038e38e3H

; 1276 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::size, COMDAT
; _this$ = ecx

; 1270 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1271 : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::end, COMDAT
; _this$ = ecx

; 1203 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1204 : 		auto& _My_data = this->_Get_data();
; 1205 : 		return (const_iterator(_My_data._Myhead, _STD addressof(_My_data)));

  00022	51		 push	 ecx
  00023	ff 71 04	 push	 DWORD PTR [ecx+4]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1206 : 		}

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::end
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::end, COMDAT
; _this$ = ecx

; 1197 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 326  : 		: _Mybase(_Pnode, _Plist)

  00022	51		 push	 ecx
  00023	ff 71 04	 push	 DWORD PTR [ecx+4]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1198 : 		auto& _My_data = this->_Get_data();
; 1199 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));

  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1200 : 		}

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::end
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::begin, COMDAT
; _this$ = ecx

; 1185 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 498  : 		return (_Myhead->_Left);

  00022	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 326  : 		: _Mybase(_Pnode, _Plist)

  00025	51		 push	 ecx
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	ff 30		 push	 DWORD PTR [eax]
  0002b	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 1186 : 		auto& _My_data = this->_Get_data();
; 1187 : 		return (iterator(_My_data._Lmost(), _STD addressof(_My_data)));

  00030	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1188 : 		}

  00033	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00036	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003d	59		 pop	 ecx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QBEABUstring_cmp_nocase@base@zl@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QBEABUstring_cmp_nocase@base@zl@@XZ PROC ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QBEABUstring_cmp_nocase@base@zl@@XZ ENDP ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QAEAAUstring_cmp_nocase@base@zl@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QAEAAUstring_cmp_nocase@base@zl@@XZ PROC ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@Ustring_cmp_nocase@base@zl@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@$00@std@@QAEAAUstring_cmp_nocase@base@zl@@XZ ENDP ; std::_Compressed_pair<zl::base::string_cmp_nocase,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate, COMDAT
; _this$ = ecx

; 536  : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00023	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00026	75 0e		 jne	 SHORT $LN3@Rrotate

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00028	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0002b	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002e	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00031	5e		 pop	 esi
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN3@Rrotate:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00036	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00039	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003c	75 0e		 jne	 SHORT $LN5@Rrotate

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0003e	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  00041	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00044	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN5@Rrotate:

; 551  : 			}
; 552  : 		else
; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0004c	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0004e	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00051	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate, COMDAT
; _this$ = ecx

; 507  : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00023	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00026	75 0d		 jne	 SHORT $LN3@Lrotate

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  00028	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0002b	89 16		 mov	 DWORD PTR [esi], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Lrotate:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 10		 cmp	 edx, DWORD PTR [eax]
  0003a	75 0c		 jne	 SHORT $LN5@Lrotate

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  0003c	89 30		 mov	 DWORD PTR [eax], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0003e	89 16		 mov	 DWORD PTR [esi], edx
  00040	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN5@Lrotate:

; 525  : 			}
; 526  : 		else
; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  00048	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0004b	89 16		 mov	 DWORD PTR [esi], edx
  0004d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00050	5e		 pop	 esi
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rmost, COMDAT
; _this$ = ecx

; 503  : 		return (_Myhead->_Right);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 504  : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lmost, COMDAT
; _this$ = ecx

; 498  : 		return (_Myhead->_Left);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 499  : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Root, COMDAT
; _this$ = ecx

; 493  : 		return (_Myhead->_Parent);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 494  : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Min, COMDAT

; 485  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0000c	75 10		 jne	 SHORT $LN3@Min
  0000e	66 90		 npad	 2
$LL2@Min:
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00012	8b d1		 mov	 edx, ecx
  00014	8b c8		 mov	 ecx, eax
  00016	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001a	74 f4		 je	 SHORT $LL2@Min

; 488  : 		return (_Pnode);

  0001c	8b c2		 mov	 eax, edx
$LN3@Min:

; 489  : 		}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Max, COMDAT

; 478  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN9@Max
  0000f	90		 npad	 1
$LL2@Max:

; 480  : 			_Pnode = _Pnode->_Right;

  00010	8b c8		 mov	 ecx, eax
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN9@Max:

; 481  : 		return (_Pnode);
; 482  : 		}

  0001b	8b c1		 mov	 eax, ecx
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1020 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1021 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1015 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1016 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1010 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1011 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1005 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1006 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABUstring_cmp_nocase@base@zl@@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABUstring_cmp_nocase@base@zl@@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1000 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1001 : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBEABUstring_cmp_nocase@base@zl@@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAUstring_cmp_nocase@base@zl@@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAUstring_cmp_nocase@base@zl@@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 995  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 996  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEAAUstring_cmp_nocase@base@zl@@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 970  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	6a 48		 push	 72			; 00000048H
  00005	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000d	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 972  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 951  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00001	6a 48		 push	 72			; 00000048H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 951  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000d	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 966  : 		return (_Pnode);

  0001e	5e		 pop	 esi

; 967  : 		}

  0001f	c3		 ret	 0
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::max_size, COMDAT

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 e3 38 8e 03	 mov	 eax, 59652323		; 038e38e3H

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00009	c1 e0 03	 shl	 eax, 3
  0000c	50		 push	 eax
  0000d	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00015	83 c4 08	 add	 esp, 8

; 874  : 		}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 26   : 	if (_Max_possible < _Count)

  00006	83 ca ff	 or	 edx, -1
  00009	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0000c	c1 e1 03	 shl	 ecx, 3
  0000f	3d e3 38 8e 03	 cmp	 eax, 59652323		; 038e38e3H
  00014	0f 47 ca	 cmova	 ecx, edx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001d	83 c4 04	 add	 esp, 4

; 998  : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00009	c1 e0 03	 shl	 eax, 3
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00015	83 c4 08	 add	 esp, 8

; 993  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
;	COMDAT ?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 12
_it$ = -28						; size = 12
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Lock$4 = 12						; size = 4
__Lock$5 = 12						; size = 4
_field$ = 12						; size = 4
?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z PROC ; zl::net::HttpRequest::getHeader, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00031	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00034	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2142 : 		{	// construct empty string

  00036	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00043	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1785 : 		_Myres(0)

  0004a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00051	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00056	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00058	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0005b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00061	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00068	8b 07		 mov	 eax, DWORD PTR [edi]
  0006a	89 38		 mov	 DWORD PTR [eax], edi

; 3976 : 		_My_data._Mysize = 0;

  0006c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00073	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0007a	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0007e	ff 75 0c	 push	 DWORD PTR _field$[ebp]
  00081	8d 45 e4	 lea	 eax, DWORD PTR _it$[ebp]
  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008b	83 c6 5c	 add	 esi, 92			; 0000005cH
  0008e	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  00095	50		 push	 eax
  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::find
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1205 : 		return (const_iterator(_My_data._Myhead, _STD addressof(_My_data)));

  0009d	56		 push	 esi
  0009e	ff 76 04	 push	 DWORD PTR [esi+4]
  000a1	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  000a4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000ab	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >

; 283  : 		return (!(*this == _Right));

  000b0	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000b3	50		 push	 eax
  000b4	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  000b7	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator==
  000bc	8a d8		 mov	 bl, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000be	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  000c4	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  000c7	6a 03		 push	 3
  000c9	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000cd	ff d6		 call	 esi

; 142  : 		_Orphan_me();

  000cf	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  000d2	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  000d7	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000e0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  000e4	84 db		 test	 bl, bl
  000e6	75 25		 jne	 SHORT $LN105@getHeader
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 230  : 		return (pointer_traits<pointer>::pointer_to(**this));

  000e8	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  000eb	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  000f0	83 c0 1c	 add	 eax, 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  000f3	3b f8		 cmp	 edi, eax
  000f5	74 16		 je	 SHORT $LN105@getHeader

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000f7	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000fb	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]

; 1815 : 		if (_Large_string_engaged())

  000fe	72 02		 jb	 SHORT $LN243@getHeader
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00100	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN243@getHeader:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00102	ff 70 14	 push	 DWORD PTR [eax+20]
  00105	51		 push	 ecx
  00106	8b cf		 mov	 ecx, edi
  00108	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN105@getHeader:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0010d	6a 03		 push	 3
  0010f	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00112	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00119	ff d6		 call	 esi

; 142  : 		_Orphan_me();

  0011b	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  0011e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00123	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0012c	8b c7		 mov	 eax, edi

  0012e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@getHeader
  0000c	83 65 f0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@getHeader:
  00018	c3		 ret	 0
__unwindfunclet$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z$1:
  00019	8d 4d e4	 lea	 ecx, DWORD PTR _it$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getHeader@HttpRequest@net@zl@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV45@@Z ENDP ; zl::net::HttpRequest::getHeader
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
;	COMDAT ?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
$T2 = -28						; size = 16
__$EHRec$ = -12						; size = 12
__Lock$3 = 8						; size = 4
_key$ = 8						; size = 4
_value$ = 12						; size = 4
?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; zl::net::HttpRequest::addHeader, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 248  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  00026	ff 75 08	 push	 DWORD PTR _key$[ebp]
  00029	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0002c	83 c1 5c	 add	 ecx, 92			; 0000005cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 248  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@Ustring_cmp_nocase@base@zl@@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,zl::base::string_cmp_nocase,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 332  : 		return ((reference)**(_Mybase *)this);

  00035	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00038	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >::operator*
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 363  : 		return (try_emplace(_Keyval).first->second);

  0003d	8d 70 1c	 lea	 esi, DWORD PTR [eax+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00040	6a 03		 push	 3
  00042	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00052	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00055	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 144  : 		}

  0005a	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  00063	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 144  : 		}

  00066	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  0006d	3b f2		 cmp	 esi, edx
  0006f	74 16		 je	 SHORT $LN34@addHeader

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00071	83 7a 18 10	 cmp	 DWORD PTR [edx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00075	8d 42 04	 lea	 eax, DWORD PTR [edx+4]

; 1815 : 		if (_Large_string_engaged())

  00078	72 02		 jb	 SHORT $LN172@addHeader
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0007a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN172@addHeader:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  0007c	ff 72 14	 push	 DWORD PTR [edx+20]
  0007f	8b ce		 mov	 ecx, esi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN34@addHeader:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5e		 pop	 esi
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?addHeader@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; zl::net::HttpRequest::addHeader
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
;	COMDAT ?setQuery@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_url$ = 8						; size = 4
?setQuery@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; zl::net::HttpRequest::setQuery, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  00003	8b 45 08	 mov	 eax, DWORD PTR _url$[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00006	83 c1 24	 add	 ecx, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  00009	3b c8		 cmp	 ecx, eax
  0000b	74 14		 je	 SHORT $LN4@setQuery

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000d	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00011	8d 50 04	 lea	 edx, DWORD PTR [eax+4]

; 1815 : 		if (_Large_string_engaged())

  00014	72 02		 jb	 SHORT $LN142@setQuery
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00016	8b 12		 mov	 edx, DWORD PTR [edx]
$LN142@setQuery:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00018	ff 70 14	 push	 DWORD PTR [eax+20]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@setQuery:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?setQuery@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; zl::net::HttpRequest::setQuery
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
;	COMDAT ?setPath@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_url$ = 8						; size = 4
?setPath@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; zl::net::HttpRequest::setPath, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  00003	8b 45 08	 mov	 eax, DWORD PTR _url$[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00006	83 c1 08	 add	 ecx, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2467 : 		if (this != _STD addressof(_Right))

  00009	3b c8		 cmp	 ecx, eax
  0000b	74 14		 je	 SHORT $LN4@setPath

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000d	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00011	8d 50 04	 lea	 edx, DWORD PTR [eax+4]

; 1815 : 		if (_Large_string_engaged())

  00014	72 02		 jb	 SHORT $LN142@setPath
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00016	8b 12		 mov	 edx, DWORD PTR [edx]
$LN142@setPath:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00018	ff 70 14	 push	 DWORD PTR [eax+20]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@setPath:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?setPath@HttpRequest@net@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; zl::net::HttpRequest::setPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
;	COMDAT ?setVersion@HttpRequest@net@zl@@QAEXW4HttpVersion@23@@Z
_TEXT	SEGMENT
_httpver$ = 8						; size = 4
?setVersion@HttpRequest@net@zl@@QAEXW4HttpVersion@23@@Z PROC ; zl::net::HttpRequest::setVersion, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _httpver$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?setVersion@HttpRequest@net@zl@@QAEXW4HttpVersion@23@@Z ENDP ; zl::net::HttpRequest::setVersion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
;	COMDAT ?method@HttpRequest@net@zl@@QBE?AW4HttpMethod@23@XZ
_TEXT	SEGMENT
?method@HttpRequest@net@zl@@QBE?AW4HttpMethod@23@XZ PROC ; zl::net::HttpRequest::method, COMDAT
; _this$ = ecx

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?method@HttpRequest@net@zl@@QBE?AW4HttpMethod@23@XZ ENDP ; zl::net::HttpRequest::method
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h
;	COMDAT ?setMethod@HttpRequest@net@zl@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_method$ = 8						; size = 4
?setMethod@HttpRequest@net@zl@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; zl::net::HttpRequest::setMethod, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00003	8b 45 08	 mov	 eax, DWORD PTR _method$[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00009	8b 58 18	 mov	 ebx, DWORD PTR [eax+24]

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0000c	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0000f	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00011	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00013	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00016	72 02		 jb	 SHORT $LN102@setMethod
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00018	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN102@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  0001a	6a 03		 push	 3
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_03HAPOJHBM@GET@
  00021	ff 70 14	 push	 DWORD PTR [eax+20]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  0002a	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  0002d	84 c0		 test	 al, al
  0002f	74 17		 je	 SHORT $LN2@setMethod

  00031	b8 02 00 00 00	 mov	 eax, 2
  00036	c7 07 02 00 00
	00		 mov	 DWORD PTR [edi], 2

  0003c	5f		 pop	 edi
  0003d	85 c0		 test	 eax, eax
  0003f	5e		 pop	 esi
  00040	0f 95 c0	 setne	 al
  00043	5b		 pop	 ebx

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN2@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00048	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0004a	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  0004d	72 02		 jb	 SHORT $LN103@setMethod
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0004f	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN103@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00051	8b 45 08	 mov	 eax, DWORD PTR _method$[ebp]
  00054	6a 04		 push	 4
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_04HCJEIHPL@POST@
  0005b	ff 70 14	 push	 DWORD PTR [eax+20]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00064	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00067	84 c0		 test	 al, al
  00069	74 17		 je	 SHORT $LN4@setMethod

  0006b	b8 03 00 00 00	 mov	 eax, 3
  00070	c7 07 03 00 00
	00		 mov	 DWORD PTR [edi], 3

  00076	5f		 pop	 edi
  00077	85 c0		 test	 eax, eax
  00079	5e		 pop	 esi
  0007a	0f 95 c0	 setne	 al
  0007d	5b		 pop	 ebx

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
$LN4@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00082	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00084	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00087	72 02		 jb	 SHORT $LN104@setMethod
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00089	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN104@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  0008b	8b 45 08	 mov	 eax, DWORD PTR _method$[ebp]
  0008e	6a 04		 push	 4
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_04BINJNOJD@HEAD@
  00095	ff 70 14	 push	 DWORD PTR [eax+20]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  000a1	84 c0		 test	 al, al
  000a3	74 17		 je	 SHORT $LN6@setMethod

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1

  000b0	5f		 pop	 edi
  000b1	85 c0		 test	 eax, eax
  000b3	5e		 pop	 esi
  000b4	0f 95 c0	 setne	 al
  000b7	5b		 pop	 ebx

  000b8	5d		 pop	 ebp
  000b9	c2 04 00	 ret	 4
$LN6@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000bc	8b ce		 mov	 ecx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000be	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  000c1	72 02		 jb	 SHORT $LN105@setMethod
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000c3	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN105@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  000c5	8b 45 08	 mov	 eax, DWORD PTR _method$[ebp]
  000c8	6a 03		 push	 3
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_03KBBGFLEK@PUT@
  000cf	ff 70 14	 push	 DWORD PTR [eax+20]
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  000d8	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  000db	84 c0		 test	 al, al
  000dd	74 17		 je	 SHORT $LN8@setMethod

  000df	b8 04 00 00 00	 mov	 eax, 4
  000e4	c7 07 04 00 00
	00		 mov	 DWORD PTR [edi], 4

  000ea	5f		 pop	 edi
  000eb	85 c0		 test	 eax, eax
  000ed	5e		 pop	 esi
  000ee	0f 95 c0	 setne	 al
  000f1	5b		 pop	 ebx

  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
$LN8@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000f6	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 1815 : 		if (_Large_string_engaged())

  000f9	72 02		 jb	 SHORT $LN92@setMethod
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000fb	8b 36		 mov	 esi, DWORD PTR [esi]
$LN92@setMethod:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  000fd	8b 45 08	 mov	 eax, DWORD PTR _method$[ebp]
  00100	6a 06		 push	 6
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_06FKDAMKFP@DELETE@
  00107	ff 70 14	 push	 DWORD PTR [eax+20]
  0010a	56		 push	 esi
  0010b	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00110	83 c4 10	 add	 esp, 16			; 00000010H
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httprequest.h

  00113	84 c0		 test	 al, al
  00115	74 17		 je	 SHORT $LN10@setMethod

  00117	b8 05 00 00 00	 mov	 eax, 5
  0011c	c7 07 05 00 00
	00		 mov	 DWORD PTR [edi], 5

  00122	5f		 pop	 edi
  00123	85 c0		 test	 eax, eax
  00125	5e		 pop	 esi
  00126	0f 95 c0	 setne	 al
  00129	5b		 pop	 ebx

  0012a	5d		 pop	 ebp
  0012b	c2 04 00	 ret	 4
$LN10@setMethod:

  0012e	33 c0		 xor	 eax, eax
  00130	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

  00136	5f		 pop	 edi
  00137	85 c0		 test	 eax, eax
  00139	5e		 pop	 esi
  0013a	0f 95 c0	 setne	 al
  0013d	5b		 pop	 ebx

  0013e	5d		 pop	 ebp
  0013f	c2 04 00	 ret	 4
?setMethod@HttpRequest@net@zl@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; zl::net::HttpRequest::setMethod
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1647 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 0c	 push	 DWORD PTR __Pstring$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 75 08	 push	 DWORD PTR __Parg$[ebp]
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1648 : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN8@String_con

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN8@String_con:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN8@String_con

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003c	ff 30		 push	 DWORD PTR [eax]
  0003e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN8@String_con:
  00043	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00046	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00049	8b c6		 mov	 eax, esi
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003f	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat, COMDAT
; _this$ = ecx

; 1588 : 		{	// test for compatible iterator pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1589 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1590 : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "string iterators incompatible (e.g."

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0000f	8b cf		 mov	 ecx, edi
  00011	8b f0		 mov	 esi, eax
  00013	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00018	5f		 pop	 edi
  00019	3b c6		 cmp	 eax, esi
  0001b	5e		 pop	 esi
  0001c	74 46		 je	 SHORT $LN6@Compat
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@NPIAEPMO@string?5iterators?5incompatible?5?$CI@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00028	6a 00		 push	 0
  0002a	68 37 06 00 00	 push	 1591			; 00000637H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00034	6a 02		 push	 2
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003c	83 c4 18	 add	 esp, 24			; 00000018H
  0003f	83 f8 01	 cmp	 eax, 1
  00042	75 01		 jne	 SHORT $LN11@Compat
  00044	cc		 int	 3
$LN11@Compat:
  00045	6a 00		 push	 0
  00047	68 37 06 00 00	 push	 1591			; 00000637H
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1MA@BDELDFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1JM@EIPCMFMM@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00061	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@Compat:

; 1591 : 			" point to different string instances)");
; 1592 : #else /* ^^^ _ITERATOR_DEBUG_LEVEL >= 1 ^^^ // vvv _ITERATOR_DEBUG_LEVEL == 0 vvv */
; 1593 : 		(void)_Right;
; 1594 : #endif /* _ITERATOR_DEBUG_LEVEL */
; 1595 : 		}

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=, COMDAT
; _this$ = ecx

; 1562 : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1557 : 		_Compat(_Right);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]

; 1562 : 		{	// test for iterator inequality

  00007	57		 push	 edi

; 1557 : 		_Compat(_Right);

  00008	56		 push	 esi

; 1562 : 		{	// test for iterator inequality

  00009	8b f9		 mov	 edi, ecx

; 1557 : 		_Compat(_Right);

  0000b	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 1563 : 		return (!(*this == _Right));

  00010	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00013	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00016	5f		 pop	 edi
  00017	0f 95 c0	 setne	 al
  0001a	5e		 pop	 esi

; 1564 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==, COMDAT
; _this$ = ecx

; 1556 : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1557 : 		_Compat(_Right);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 1558 : 		return (_Ptr == _Right._Ptr);

  00010	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00013	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00016	5f		 pop	 edi
  00017	0f 94 c0	 sete	 al
  0001a	5e		 pop	 esi

; 1559 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-, COMDAT
; _this$ = ecx

; 1545 : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1546 : 		_Compat(_Right);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 1547 : 		return (_Ptr - _Right._Ptr);

  00010	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00013	2b 46 08	 sub	 eax, DWORD PTR [esi+8]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi

; 1548 : 		}

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++, COMDAT
; _this$ = ecx

; 1445 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1446 : 		_STL_VERIFY(_Ptr, "cannot increment value-initialized string iterator");

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___invalid_parameter
  0000f	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00013	75 43		 jne	 SHORT $LN6@operator
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LAECODHC@cannot?5increment?5value?9initiali@
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0001f	6a 00		 push	 0
  00021	68 a6 05 00 00	 push	 1446			; 000005a6H
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002b	6a 02		 push	 2
  0002d	ff d0		 call	 eax
  0002f	83 c4 18	 add	 esp, 24			; 00000018H
  00032	83 f8 01	 cmp	 eax, 1
  00035	75 01		 jne	 SHORT $LN27@operator
  00037	cc		 int	 3
$LN27@operator:
  00038	6a 00		 push	 0
  0003a	68 a6 05 00 00	 push	 1446			; 000005a6H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1GK@MICKMFNF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  0004e	ff d7		 call	 edi
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  00055	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:
  00058	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00059	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0005b	85 db		 test	 ebx, ebx
  0005d	74 06		 je	 SHORT $LN36@operator
$LN32@operator:
  0005f	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1448 : 		_STL_VERIFY(_Mycont, "cannot increment string iterator because the iterator was"

  00061	85 db		 test	 ebx, ebx
  00063	75 3e		 jne	 SHORT $LN12@operator
$LN36@operator:
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@BFMOHEDB@cannot?5increment?5string?5iterato@
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006f	6a 00		 push	 0
  00071	68 a9 05 00 00	 push	 1449			; 000005a9H
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007b	6a 02		 push	 2
  0007d	ff d0		 call	 eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	83 f8 01	 cmp	 eax, 1
  00085	75 01		 jne	 SHORT $LN28@operator
  00087	cc		 int	 3
$LN28@operator:
  00088	6a 00		 push	 0
  0008a	68 a9 05 00 00	 push	 1449			; 000005a9H
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_1BAK@GBJMLMKM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  0009e	ff d7		 call	 edi
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@operator:

; 1449 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1450 : 		_STL_VERIFY(_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize,

  000a3	8b cb		 mov	 ecx, ebx
  000a5	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000aa	03 43 14	 add	 eax, DWORD PTR [ebx+20]
  000ad	5b		 pop	 ebx
  000ae	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  000b1	72 42		 jb	 SHORT $LN37@operator
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@IKJHPFKC@cannot?5increment?5string?5iterato@
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000bd	6a 00		 push	 0
  000bf	68 ab 05 00 00	 push	 1451			; 000005abH
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000c9	6a 02		 push	 2
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000d1	83 c4 18	 add	 esp, 24			; 00000018H
  000d4	83 f8 01	 cmp	 eax, 1
  000d7	75 01		 jne	 SHORT $LN29@operator
  000d9	cc		 int	 3
$LN29@operator:
  000da	6a 00		 push	 0
  000dc	68 ab 05 00 00	 push	 1451			; 000005abH
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@JCCODAAD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  000f0	ff d7		 call	 edi
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@operator:

; 1451 : 			"cannot increment string iterator past end");
; 1452 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1453 : 
; 1454 : 		++_Ptr;

  000f5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000f8	40		 inc	 eax
  000f9	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1455 : 		return (*this);

  000fc	8b c6		 mov	 eax, esi
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi

; 1456 : 		}

  00100	c3		 ret	 0
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1423 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1424 : 		_STL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  00005	53		 push	 ebx
  00006	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
  00010	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00014	75 43		 jne	 SHORT $LN6@operator
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00020	6a 00		 push	 0
  00022	68 90 05 00 00	 push	 1424			; 00000590H
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002c	6a 02		 push	 2
  0002e	ff d0		 call	 eax
  00030	83 c4 18	 add	 esp, 24			; 00000018H
  00033	83 f8 01	 cmp	 eax, 1
  00036	75 01		 jne	 SHORT $LN27@operator
  00038	cc		 int	 3
$LN27@operator:
  00039	6a 00		 push	 0
  0003b	68 90 05 00 00	 push	 1424			; 00000590H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0004f	ff d3		 call	 ebx
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  00056	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00059	8b 37		 mov	 esi, DWORD PTR [edi]
  0005b	85 f6		 test	 esi, esi
  0005d	74 06		 je	 SHORT $LN43@operator
$LN32@operator:
  0005f	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1426 : 		_STL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"

  00061	85 f6		 test	 esi, esi
  00063	75 3e		 jne	 SHORT $LN12@operator
$LN43@operator:
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006f	6a 00		 push	 0
  00071	68 93 05 00 00	 push	 1427			; 00000593H
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007b	6a 02		 push	 2
  0007d	ff d0		 call	 eax
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	83 f8 01	 cmp	 eax, 1
  00085	75 01		 jne	 SHORT $LN28@operator
  00087	cc		 int	 3
$LN28@operator:
  00088	6a 00		 push	 0
  0008a	68 93 05 00 00	 push	 1427			; 00000593H
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0009e	ff d3		 call	 ebx
  000a0	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@operator:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000a7	8d 56 04	 lea	 edx, DWORD PTR [esi+4]

; 1815 : 		if (_Large_string_engaged())

  000aa	72 02		 jb	 SHORT $LN35@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000ac	8b 12		 mov	 edx, DWORD PTR [edx]
$LN35@operator:
  000ae	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1430 : 		_STL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,

  000b1	3b d0		 cmp	 edx, eax
  000b3	77 09		 ja	 SHORT $LN19@operator
  000b5	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000b8	03 ca		 add	 ecx, edx
  000ba	3b c1		 cmp	 eax, ecx
  000bc	72 45		 jb	 SHORT $LN18@operator
$LN19@operator:
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c8	6a 00		 push	 0
  000ca	68 97 05 00 00	 push	 1431			; 00000597H
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000d4	6a 02		 push	 2
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000dc	83 c4 18	 add	 esp, 24			; 00000018H
  000df	83 f8 01	 cmp	 eax, 1
  000e2	75 01		 jne	 SHORT $LN29@operator
  000e4	cc		 int	 3
$LN29@operator:
  000e5	6a 00		 push	 0
  000e7	68 97 05 00 00	 push	 1431			; 00000597H
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  000fb	ff d3		 call	 ebx

; 1431 : 			"cannot dereference string iterator because it is out of range (e.g. an end iterator)");
; 1432 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1433 : 
; 1434 : 		_Analysis_assume_(_Ptr);
; 1435 : 		return (*_Ptr);

  000fd	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00100	83 c4 14	 add	 esp, 20			; 00000014H
$LN18@operator:

; 1436 : 		}

  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
__Parg$ = 8						; size = 4
__Lock$3 = 12						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1417 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 1416 : 		: _Ptr(_Parg)

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1416 : 		: _Ptr(_Parg)

  0003a	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 148  : 		if (_Parent == nullptr)

  0003d	8b 7d 0c	 mov	 edi, DWORD PTR __Pstring$[ebp]
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 ff		 test	 edi, edi
  00049	75 17		 jne	 SHORT $LN7@String_con

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	6a 03		 push	 3
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 152  : 			_Orphan_me();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

  0005d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]

; 155  : 		else

  00060	eb 26		 jmp	 SHORT $LN14@String_con
$LN7@String_con:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  00062	8b 3f		 mov	 edi, DWORD PTR [edi]

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

  00064	85 ff		 test	 edi, edi
  00066	74 26		 je	 SHORT $LN12@String_con

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

  00068	6a 03		 push	 3
  0006a	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 163  : 				_Orphan_me();

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  0007a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}

  0007d	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00080	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00083	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00086	89 3e		 mov	 DWORD PTR [esi], edi
$LN14@String_con:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1419 : 		}

  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN12@String_con:
  0008e	8b c6		 mov	 eax, esi
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h
;	COMDAT ??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
$T2 = -72						; size = 12
$T3 = -60						; size = 12
_p$ = -48						; size = 12
_p2$ = -36						; size = 12
__Lock$4 = -24						; size = 4
__Lock$5 = -20						; size = 4
$T6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lock$7 = 8						; size = 4
_lhs$ = 8						; size = 4
__Lock$8 = 12						; size = 4
_rhs$ = 12						; size = 4
??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; zl::base::string_cmp_nocase::operator(), COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 db		 xor	 ebx, ebx
  0002a	89 5d f0	 mov	 DWORD PTR $T6[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0002d	8b 75 08	 mov	 esi, DWORD PTR _lhs$[ebp]

; 3078 : 		{	// return iterator for beginning of immutable sequence

  00030	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00033	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00037	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 1815 : 		if (_Large_string_engaged())

  0003a	72 03		 jb	 SHORT $LN311@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN311@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3080 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));

  0003f	56		 push	 esi
  00040	50		 push	 eax
  00041	8d 4d d0	 lea	 ecx, DWORD PTR _p$[ebp]
  00044	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00049	8b 7d 0c	 mov	 edi, DWORD PTR _rhs$[ebp]

; 3078 : 		{	// return iterator for beginning of immutable sequence

  0004c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00053	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00057	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 1815 : 		if (_Large_string_engaged())

  0005a	72 03		 jb	 SHORT $LN312@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0005c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN312@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3080 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));

  0005f	57		 push	 edi
  00060	50		 push	 eax
  00061	8d 4d dc	 lea	 ecx, DWORD PTR _p2$[ebp]
  00064	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@operator:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00070	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00074	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]

; 3091 : 		{	// return iterator for end of immutable sequence

  00077	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 1815 : 		if (_Large_string_engaged())

  0007e	72 03		 jb	 SHORT $LN65@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00080	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
$LN65@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3093 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr())

  00083	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00086	03 c1		 add	 eax, ecx
  00088	8d 4d b8	 lea	 ecx, DWORD PTR $T2[ebp]
  0008b	56		 push	 esi
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1557 : 		_Compat(_Right);

  00092	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  00095	83 cb 01	 or	 ebx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1557 : 		_Compat(_Right);

  00098	50		 push	 eax
  00099	8d 4d d0	 lea	 ecx, DWORD PTR _p$[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  0009c	89 5d f0	 mov	 DWORD PTR $T6[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1557 : 		_Compat(_Right);

  0009f	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 1558 : 		return (_Ptr == _Right._Ptr);

  000a4	8b 45 d8	 mov	 eax, DWORD PTR _p$[ebp+8]
  000a7	3b 45 c0	 cmp	 eax, DWORD PTR $T2[ebp+8]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  000aa	74 40		 je	 SHORT $LN6@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000ac	83 7f 18 10	 cmp	 DWORD PTR [edi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000b0	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]

; 3091 : 		{	// return iterator for end of immutable sequence

  000b3	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 1815 : 		if (_Large_string_engaged())

  000ba	72 03		 jb	 SHORT $LN87@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000bc	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
$LN87@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3093 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr())

  000bf	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000c2	03 c1		 add	 eax, ecx
  000c4	8d 4d c4	 lea	 ecx, DWORD PTR $T3[ebp]
  000c7	57		 push	 edi
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1557 : 		_Compat(_Right);

  000ce	8d 45 c4	 lea	 eax, DWORD PTR $T3[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  000d1	83 cb 02	 or	 ebx, 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1557 : 		_Compat(_Right);

  000d4	50		 push	 eax
  000d5	8d 4d dc	 lea	 ecx, DWORD PTR _p2$[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  000d8	89 5d f0	 mov	 DWORD PTR $T6[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1557 : 		_Compat(_Right);

  000db	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 1558 : 		return (_Ptr == _Right._Ptr);

  000e0	8b 45 e4	 mov	 eax, DWORD PTR _p2$[ebp+8]
  000e3	3b 45 cc	 cmp	 eax, DWORD PTR $T3[ebp+8]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  000e6	74 04		 je	 SHORT $LN6@operator
  000e8	b3 01		 mov	 bl, 1
  000ea	eb 02		 jmp	 SHORT $LN7@operator
$LN6@operator:
  000ec	32 db		 xor	 bl, bl
$LN7@operator:
  000ee	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
  000f1	a8 02		 test	 al, 2
  000f3	74 2c		 je	 SHORT $LN103@operator
  000f5	83 e0 fd	 and	 eax, -3			; fffffffdH
  000f8	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  000fb	6a 03		 push	 3
  000fd	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00100	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  0010d	8d 4d c4	 lea	 ecx, DWORD PTR $T3[ebp]
  00110	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00115	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0011e	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
$LN103@operator:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  00121	83 e0 fe	 and	 eax, -2			; fffffffeH
  00124	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00127	6a 03		 push	 3
  00129	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0012c	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00139	8d 4d b8	 lea	 ecx, DWORD PTR $T2[ebp]
  0013c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00141	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  0014a	84 db		 test	 bl, bl
  0014c	0f 84 29 04 00
	00		 je	 $LN3@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1424 : 		_STL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");

  00152	8b 7d d8	 mov	 edi, DWORD PTR _p$[ebp+8]
  00155	85 ff		 test	 edi, edi
  00157	75 4c		 jne	 SHORT $LN313@operator
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00163	57		 push	 edi
  00164	68 90 05 00 00	 push	 1424			; 00000590H
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0016e	6a 02		 push	 2
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00176	83 c4 18	 add	 esp, 24			; 00000018H
  00179	83 f8 01	 cmp	 eax, 1
  0017c	75 01		 jne	 SHORT $LN137@operator
  0017e	cc		 int	 3
$LN137@operator:
  0017f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter
  00185	6a 00		 push	 0
  00187	68 90 05 00 00	 push	 1424			; 00000590H
  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00191	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0019b	ff d3		 call	 ebx
  0019d	8b 7d d8	 mov	 edi, DWORD PTR _p$[ebp+8]
  001a0	83 c4 14	 add	 esp, 20			; 00000014H
  001a3	eb 06		 jmp	 SHORT $LN116@operator
$LN313@operator:
  001a5	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___invalid_parameter
$LN116@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  001ab	8b 75 d0	 mov	 esi, DWORD PTR _p$[ebp]
  001ae	85 f6		 test	 esi, esi
  001b0	74 06		 je	 SHORT $LN307@operator
$LN142@operator:
  001b2	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1426 : 		_STL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"

  001b4	85 f6		 test	 esi, esi
  001b6	75 46		 jne	 SHORT $LN122@operator
$LN307@operator:
  001b8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001c7	6a 00		 push	 0
  001c9	68 93 05 00 00	 push	 1427			; 00000593H
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  001d3	6a 02		 push	 2
  001d5	ff d0		 call	 eax
  001d7	83 c4 18	 add	 esp, 24			; 00000018H
  001da	83 f8 01	 cmp	 eax, 1
  001dd	75 01		 jne	 SHORT $LN138@operator
  001df	cc		 int	 3
$LN138@operator:
  001e0	6a 00		 push	 0
  001e2	68 93 05 00 00	 push	 1427			; 00000593H
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  001f6	ff d3		 call	 ebx
  001f8	8b 7d d8	 mov	 edi, DWORD PTR _p$[ebp+8]
  001fb	83 c4 14	 add	 esp, 20			; 00000014H
$LN122@operator:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001fe	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00202	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]

; 1815 : 		if (_Large_string_engaged())

  00205	72 02		 jb	 SHORT $LN145@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00207	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN145@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1430 : 		_STL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,

  00209	3b cf		 cmp	 ecx, edi
  0020b	77 09		 ja	 SHORT $LN129@operator
  0020d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00210	03 c1		 add	 eax, ecx
  00212	3b f8		 cmp	 edi, eax
  00214	72 49		 jb	 SHORT $LN314@operator
$LN129@operator:
  00216	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___CrtDbgReport
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@
  00221	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00226	6a 00		 push	 0
  00228	68 97 05 00 00	 push	 1431			; 00000597H
  0022d	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00232	6a 02		 push	 2
  00234	ff d6		 call	 esi
  00236	83 c4 18	 add	 esp, 24			; 00000018H
  00239	83 f8 01	 cmp	 eax, 1
  0023c	75 01		 jne	 SHORT $LN139@operator
  0023e	cc		 int	 3
$LN139@operator:
  0023f	6a 00		 push	 0
  00241	68 97 05 00 00	 push	 1431			; 00000597H
  00246	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00250	68 00 00 00 00	 push	 OFFSET ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  00255	ff d3		 call	 ebx
  00257	8b 7d d8	 mov	 edi, DWORD PTR _p$[ebp+8]
  0025a	83 c4 14	 add	 esp, 20			; 00000014H
  0025d	eb 06		 jmp	 SHORT $LN128@operator
$LN314@operator:
  0025f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp___CrtDbgReport
$LN128@operator:

; 1424 : 		_STL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");

  00265	8b 4d e4	 mov	 ecx, DWORD PTR _p2$[ebp+8]
  00268	85 c9		 test	 ecx, ecx
  0026a	75 40		 jne	 SHORT $LN158@operator
  0026c	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@IMIHIHOP@cannot?5dereference?5value?9initia@
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00276	51		 push	 ecx
  00277	68 90 05 00 00	 push	 1424			; 00000590H
  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00281	6a 02		 push	 2
  00283	ff d6		 call	 esi
  00285	83 c4 18	 add	 esp, 24			; 00000018H
  00288	83 f8 01	 cmp	 eax, 1
  0028b	75 01		 jne	 SHORT $LN179@operator
  0028d	cc		 int	 3
$LN179@operator:
  0028e	6a 00		 push	 0
  00290	68 90 05 00 00	 push	 1424			; 00000590H
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  0029f	68 00 00 00 00	 push	 OFFSET ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  002a4	ff d3		 call	 ebx
  002a6	8b 4d e4	 mov	 ecx, DWORD PTR _p2$[ebp+8]
  002a9	83 c4 14	 add	 esp, 20			; 00000014H
$LN158@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  002ac	8b 75 dc	 mov	 esi, DWORD PTR _p2$[ebp]
  002af	85 f6		 test	 esi, esi
  002b1	74 06		 je	 SHORT $LN308@operator
$LN184@operator:
  002b3	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1426 : 		_STL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"

  002b5	85 f6		 test	 esi, esi
  002b7	75 46		 jne	 SHORT $LN164@operator
$LN308@operator:
  002b9	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___CrtDbgReport
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0IC@DGJDAAEM@cannot?5dereference?5string?5itera@
  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  002c8	6a 00		 push	 0
  002ca	68 93 05 00 00	 push	 1427			; 00000593H
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  002d4	6a 02		 push	 2
  002d6	ff d0		 call	 eax
  002d8	83 c4 18	 add	 esp, 24			; 00000018H
  002db	83 f8 01	 cmp	 eax, 1
  002de	75 01		 jne	 SHORT $LN180@operator
  002e0	cc		 int	 3
$LN180@operator:
  002e1	6a 00		 push	 0
  002e3	68 93 05 00 00	 push	 1427			; 00000593H
  002e8	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  002ed	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  002f7	ff d3		 call	 ebx
  002f9	8b 4d e4	 mov	 ecx, DWORD PTR _p2$[ebp+8]
  002fc	83 c4 14	 add	 esp, 20			; 00000014H
$LN164@operator:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002ff	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00303	8d 56 04	 lea	 edx, DWORD PTR [esi+4]

; 1815 : 		if (_Large_string_engaged())

  00306	72 02		 jb	 SHORT $LN187@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00308	8b 12		 mov	 edx, DWORD PTR [edx]
$LN187@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1430 : 		_STL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,

  0030a	3b d1		 cmp	 edx, ecx
  0030c	77 09		 ja	 SHORT $LN171@operator
  0030e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00311	03 c2		 add	 eax, edx
  00313	3b c8		 cmp	 ecx, eax
  00315	72 45		 jb	 SHORT $LN170@operator
$LN171@operator:
  00317	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@HJKEHIBC@cannot?5dereference?5string?5itera@
  0031c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00321	6a 00		 push	 0
  00323	68 97 05 00 00	 push	 1431			; 00000597H
  00328	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0032d	6a 02		 push	 2
  0032f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00335	83 c4 18	 add	 esp, 24			; 00000018H
  00338	83 f8 01	 cmp	 eax, 1
  0033b	75 01		 jne	 SHORT $LN181@operator
  0033d	cc		 int	 3
$LN181@operator:
  0033e	6a 00		 push	 0
  00340	68 97 05 00 00	 push	 1431			; 00000597H
  00345	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0034a	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  0034f	68 00 00 00 00	 push	 OFFSET ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  00354	ff d3		 call	 ebx
  00356	8b 4d e4	 mov	 ecx, DWORD PTR _p2$[ebp+8]
  00359	83 c4 14	 add	 esp, 20			; 00000014H
$LN170@operator:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  0035c	0f be 01	 movsx	 eax, BYTE PTR [ecx]
  0035f	50		 push	 eax
  00360	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00366	0f be 0f	 movsx	 ecx, BYTE PTR [edi]
  00369	8b f0		 mov	 esi, eax
  0036b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__toupper
  00371	51		 push	 ecx
  00372	ff d7		 call	 edi
  00374	83 c4 08	 add	 esp, 8
  00377	3b c6		 cmp	 eax, esi
  00379	0f 85 d2 01 00
	00		 jne	 $LN302@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1446 : 		_STL_VERIFY(_Ptr, "cannot increment value-initialized string iterator");

  0037f	83 7d d8 00	 cmp	 DWORD PTR _p$[ebp+8], 0
  00383	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___CrtDbgReport
  00389	75 3e		 jne	 SHORT $LN200@operator
  0038b	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LAECODHC@cannot?5increment?5value?9initiali@
  00390	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00395	6a 00		 push	 0
  00397	68 a6 05 00 00	 push	 1446			; 000005a6H
  0039c	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  003a1	6a 02		 push	 2
  003a3	ff d7		 call	 edi
  003a5	83 c4 18	 add	 esp, 24			; 00000018H
  003a8	83 f8 01	 cmp	 eax, 1
  003ab	75 01		 jne	 SHORT $LN221@operator
  003ad	cc		 int	 3
$LN221@operator:
  003ae	6a 00		 push	 0
  003b0	68 a6 05 00 00	 push	 1446			; 000005a6H
  003b5	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  003ba	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  003bf	68 00 00 00 00	 push	 OFFSET ??_C@_1GK@MICKMFNF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  003c4	ff d3		 call	 ebx
  003c6	83 c4 14	 add	 esp, 20			; 00000014H
$LN200@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  003c9	8b 75 d0	 mov	 esi, DWORD PTR _p$[ebp]
  003cc	85 f6		 test	 esi, esi
  003ce	74 06		 je	 SHORT $LN309@operator
$LN226@operator:
  003d0	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1448 : 		_STL_VERIFY(_Mycont, "cannot increment string iterator because the iterator was"

  003d2	85 f6		 test	 esi, esi
  003d4	75 3e		 jne	 SHORT $LN206@operator
$LN309@operator:
  003d6	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@BFMOHEDB@cannot?5increment?5string?5iterato@
  003db	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  003e0	6a 00		 push	 0
  003e2	68 a9 05 00 00	 push	 1449			; 000005a9H
  003e7	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  003ec	6a 02		 push	 2
  003ee	ff d7		 call	 edi
  003f0	83 c4 18	 add	 esp, 24			; 00000018H
  003f3	83 f8 01	 cmp	 eax, 1
  003f6	75 01		 jne	 SHORT $LN222@operator
  003f8	cc		 int	 3
$LN222@operator:
  003f9	6a 00		 push	 0
  003fb	68 a9 05 00 00	 push	 1449			; 000005a9H
  00400	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00405	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  0040a	68 00 00 00 00	 push	 OFFSET ??_C@_1BAK@GBJMLMKM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  0040f	ff d3		 call	 ebx
  00411	83 c4 14	 add	 esp, 20			; 00000014H
$LN206@operator:

; 1449 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1450 : 		_STL_VERIFY(_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize,

  00414	8b ce		 mov	 ecx, esi
  00416	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0041b	03 46 14	 add	 eax, DWORD PTR [esi+20]
  0041e	39 45 d8	 cmp	 DWORD PTR _p$[ebp+8], eax
  00421	72 3e		 jb	 SHORT $LN212@operator
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@IKJHPFKC@cannot?5increment?5string?5iterato@
  00428	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0042d	6a 00		 push	 0
  0042f	68 ab 05 00 00	 push	 1451			; 000005abH
  00434	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00439	6a 02		 push	 2
  0043b	ff d7		 call	 edi
  0043d	83 c4 18	 add	 esp, 24			; 00000018H
  00440	83 f8 01	 cmp	 eax, 1
  00443	75 01		 jne	 SHORT $LN223@operator
  00445	cc		 int	 3
$LN223@operator:
  00446	6a 00		 push	 0
  00448	68 ab 05 00 00	 push	 1451			; 000005abH
  0044d	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00452	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00457	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@JCCODAAD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  0045c	ff d3		 call	 ebx
  0045e	83 c4 14	 add	 esp, 20			; 00000014H
$LN212@operator:

; 1451 : 			"cannot increment string iterator past end");
; 1452 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1453 : 
; 1454 : 		++_Ptr;

  00461	ff 45 d8	 inc	 DWORD PTR _p$[ebp+8]

; 1446 : 		_STL_VERIFY(_Ptr, "cannot increment value-initialized string iterator");

  00464	83 7d e4 00	 cmp	 DWORD PTR _p2$[ebp+8], 0
  00468	75 3e		 jne	 SHORT $LN235@operator
  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@LAECODHC@cannot?5increment?5value?9initiali@
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00474	6a 00		 push	 0
  00476	68 a6 05 00 00	 push	 1446			; 000005a6H
  0047b	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00480	6a 02		 push	 2
  00482	ff d7		 call	 edi
  00484	83 c4 18	 add	 esp, 24			; 00000018H
  00487	83 f8 01	 cmp	 eax, 1
  0048a	75 01		 jne	 SHORT $LN256@operator
  0048c	cc		 int	 3
$LN256@operator:
  0048d	6a 00		 push	 0
  0048f	68 a6 05 00 00	 push	 1446			; 000005a6H
  00494	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00499	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  0049e	68 00 00 00 00	 push	 OFFSET ??_C@_1GK@MICKMFNF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  004a3	ff d3		 call	 ebx
  004a5	83 c4 14	 add	 esp, 20			; 00000014H
$LN235@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  004a8	8b 75 dc	 mov	 esi, DWORD PTR _p2$[ebp]
  004ab	85 f6		 test	 esi, esi
  004ad	74 06		 je	 SHORT $LN310@operator
$LN261@operator:
  004af	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1448 : 		_STL_VERIFY(_Mycont, "cannot increment string iterator because the iterator was"

  004b1	85 f6		 test	 esi, esi
  004b3	75 3e		 jne	 SHORT $LN241@operator
$LN310@operator:
  004b5	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@BFMOHEDB@cannot?5increment?5string?5iterato@
  004ba	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  004bf	6a 00		 push	 0
  004c1	68 a9 05 00 00	 push	 1449			; 000005a9H
  004c6	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  004cb	6a 02		 push	 2
  004cd	ff d7		 call	 edi
  004cf	83 c4 18	 add	 esp, 24			; 00000018H
  004d2	83 f8 01	 cmp	 eax, 1
  004d5	75 01		 jne	 SHORT $LN257@operator
  004d7	cc		 int	 3
$LN257@operator:
  004d8	6a 00		 push	 0
  004da	68 a9 05 00 00	 push	 1449			; 000005a9H
  004df	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  004e4	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  004e9	68 00 00 00 00	 push	 OFFSET ??_C@_1BAK@GBJMLMKM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  004ee	ff d3		 call	 ebx
  004f0	83 c4 14	 add	 esp, 20			; 00000014H
$LN241@operator:

; 1449 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1450 : 		_STL_VERIFY(_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize,

  004f3	8b ce		 mov	 ecx, esi
  004f5	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  004fa	03 46 14	 add	 eax, DWORD PTR [esi+20]
  004fd	39 45 e4	 cmp	 DWORD PTR _p2$[ebp+8], eax
  00500	72 3e		 jb	 SHORT $LN247@operator
  00502	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@IKJHPFKC@cannot?5increment?5string?5iterato@
  00507	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0050c	6a 00		 push	 0
  0050e	68 ab 05 00 00	 push	 1451			; 000005abH
  00513	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00518	6a 02		 push	 2
  0051a	ff d7		 call	 edi
  0051c	83 c4 18	 add	 esp, 24			; 00000018H
  0051f	83 f8 01	 cmp	 eax, 1
  00522	75 01		 jne	 SHORT $LN258@operator
  00524	cc		 int	 3
$LN258@operator:
  00525	6a 00		 push	 0
  00527	68 ab 05 00 00	 push	 1451			; 000005abH
  0052c	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00531	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo@
  00536	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@JCCODAAD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  0053b	ff d3		 call	 ebx
  0053d	83 c4 14	 add	 esp, 20			; 00000014H
$LN247@operator:

; 1451 : 			"cannot increment string iterator past end");
; 1452 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1453 : 
; 1454 : 		++_Ptr;

  00540	ff 45 e4	 inc	 DWORD PTR _p2$[ebp+8]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  00543	8b 5d f0	 mov	 ebx, DWORD PTR $T6[ebp]
  00546	8b 75 08	 mov	 esi, DWORD PTR _lhs$[ebp]
  00549	8b 7d 0c	 mov	 edi, DWORD PTR _rhs$[ebp]
  0054c	e9 1f fb ff ff	 jmp	 $LL2@operator
$LN302@operator:

  00551	8d 4d dc	 lea	 ecx, DWORD PTR _p2$[ebp]
  00554	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00559	8d 4d d0	 lea	 ecx, DWORD PTR _p$[ebp]
  0055c	8a 18		 mov	 bl, BYTE PTR [eax]
  0055e	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00563	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00566	50		 push	 eax
  00567	ff d7		 call	 edi
  00569	0f be cb	 movsx	 ecx, bl
  0056c	8b f0		 mov	 esi, eax
  0056e	51		 push	 ecx
  0056f	ff d7		 call	 edi
  00571	83 c4 08	 add	 esp, 8
  00574	3b f0		 cmp	 esi, eax
  00576	0f 9c c3	 setl	 bl
  00579	eb 0f		 jmp	 SHORT $LN9@operator
$LN3@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  0057b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  0057e	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00581	75 04		 jne	 SHORT $LN8@operator
  00583	32 db		 xor	 bl, bl
  00585	eb 03		 jmp	 SHORT $LN9@operator
$LN8@operator:
  00587	0f 92 c3	 setb	 bl
$LN9@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0058a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00590	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00593	6a 03		 push	 3
  00595	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0059c	ff d6		 call	 esi

; 142  : 		_Orphan_me();

  0059e	8d 4d dc	 lea	 ecx, DWORD PTR _p2$[ebp]
  005a1	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  005a6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  005ac	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  005af	ff d7		 call	 edi

; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  005b1	6a 03		 push	 3
  005b3	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  005b6	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  005bd	ff d6		 call	 esi

; 142  : 		_Orphan_me();

  005bf	8d 4d d0	 lea	 ecx, DWORD PTR _p$[ebp]
  005c2	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  005c7	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  005ca	ff d7		 call	 edi
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\base\stringutil.h

  005cc	8a c3		 mov	 al, bl

  005ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005d8	59		 pop	 ecx
  005d9	5f		 pop	 edi
  005da	5e		 pop	 esi
  005db	5b		 pop	 ebx
  005dc	8b e5		 mov	 esp, ebp
  005de	5d		 pop	 ebp
  005df	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??Rstring_cmp_nocase@base@zl@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; zl::base::string_cmp_nocase::operator()
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 615  : 	{	// check that [_First, _Last) forms an iterator range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	76 46		 jbe	 SHORT $LN10@Adl_verify
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00019	6a 00		 push	 0
  0001b	68 2f 02 00 00	 push	 559			; 0000022fH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 18	 add	 esp, 24			; 00000018H
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 01		 jne	 SHORT $LN15@Adl_verify
  00035	cc		 int	 3
$LN15@Adl_verify:
  00036	6a 00		 push	 0
  00038	68 2f 02 00 00	 push	 559			; 0000022fH
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00052	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Adl_verify:

; 616  : 	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});
; 617  : 	}

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 42 c2	 cmovb	 eax, edx

; 25   : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4004 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3984 : 		{	// initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00008	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3985 : 		this->_Orphan_all();
; 3986 : 		auto& _My_data = this->_Get_data();
; 3987 : 		if (_My_data._Large_string_engaged())

  0000e	72 0d		 jb	 SHORT $LN2@Tidy_deall

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00010	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8
$LN2@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0001d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00024	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0002b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 4000 : 		}

  00030	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3975 : 		auto& _My_data = this->_Get_data();
; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00007	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0000e	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3981 : 		}

  00012	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 3968 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 3969 : 		auto& _My_data = this->_Get_data();
; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  00007	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0000a	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1804 : 		if (_Large_string_engaged())

  0000d	72 0b		 jb	 SHORT $LN16@Eos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00012	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3971 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN16@Eos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0001a	c6 44 11 04 00	 mov	 BYTE PTR [ecx+edx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3971 : 		}

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3866 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3867 : 		const size_type _Max = max_size();
; 3868 : 		auto& _My_data = this->_Get_data();
; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00006	83 ca 0f	 or	 edx, 15			; 0000000fH
  00009	56		 push	 esi
  0000a	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00010	77 21		 ja	 SHORT $LN25@Calculate_

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);
; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;

  00012	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]

; 3876 : 		if (_Old > _Max - _Old / 2)

  00015	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0001a	8b ce		 mov	 ecx, esi
  0001c	d1 e9		 shr	 ecx, 1
  0001e	2b c1		 sub	 eax, ecx
  00020	3b f0		 cmp	 esi, eax
  00022	77 0f		 ja	 SHORT $LN25@Calculate_

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00024	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00027	3b d0		 cmp	 edx, eax
  00029	5e		 pop	 esi
  0002a	0f 42 d0	 cmovb	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0002d	8b c2		 mov	 eax, edx

; 3882 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN25@Calculate_:

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00033	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00038	5e		 pop	 esi

; 3882 : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 3861 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3862 : 		return (static_cast<allocator_type>(this->_Getal()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3863 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 3767 : 		{	// compare [0, size()) with _Ptr for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3767 : 		{	// compare [0, size()) with _Ptr for equality

  00006	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00007	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL16@Equal:
  00010	8a 02		 mov	 al, BYTE PTR [edx]
  00012	42		 inc	 edx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL16@Equal
  00017	2b d7		 sub	 edx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00019	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001c	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00020	5f		 pop	 edi

; 1815 : 		if (_Large_string_engaged())

  00021	72 02		 jb	 SHORT $LN10@Equal
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00023	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@Equal:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00025	52		 push	 edx
  00026	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00029	ff 71 14	 push	 DWORD PTR [ecx+20]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 3770 : 		}

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 3371 : 		return (size() == 0);

  00000	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00004	0f 94 c0	 sete	 al

; 3372 : 		}

  00007	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
tv662 = -16						; size = 4
tv656 = -12						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
__New_ptr$1$ = -4					; size = 4
tv657 = 8						; size = 4
__Newsize$ = 8						; size = 4
tv666 = 12						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 3318 : 		{	// determine new length, padding with _Ch elements as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3319 : 		const size_type _Old_size = size();
; 3320 : 		if (_Newsize <= _Old_size)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx

; 3319 : 		const size_type _Old_size = size();
; 3320 : 		if (_Newsize <= _Old_size)

  00012	3b d1		 cmp	 edx, ecx
  00014	77 19		 ja	 SHORT $LN2@resize

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  00016	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 1803 : 		value_type * _Result = _Bx._Buf;

  00019	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001c	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00020	72 02		 jb	 SHORT $LN18@resize
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00022	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00024	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
  00028	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3328 : 		}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN2@resize:
  0002f	53		 push	 ebx
  00030	57		 push	 edi

; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  00031	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]

; 3321 : 			{
; 3322 : 			_Eos(_Newsize);
; 3323 : 			}
; 3324 : 		else
; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  00034	8b da		 mov	 ebx, edx

; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  00036	8b c7		 mov	 eax, edi
  00038	89 7d f8	 mov	 DWORD PTR __Old$1$[ebp], edi

; 3321 : 			{
; 3322 : 			_Eos(_Newsize);
; 3323 : 			}
; 3324 : 		else
; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  0003b	2b d9		 sub	 ebx, ecx

; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  0003d	2b c1		 sub	 eax, ecx
  0003f	3b d8		 cmp	 ebx, eax
  00041	77 2b		 ja	 SHORT $LN27@resize

; 2600 : 			{
; 2601 : 			_My_data._Mysize = _Old_size + _Count;

  00043	89 56 14	 mov	 DWORD PTR [esi+20], edx

; 1803 : 		value_type * _Result = _Bx._Buf;

  00046	83 c6 04	 add	 esi, 4

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00049	83 ff 10	 cmp	 edi, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0004c	72 02		 jb	 SHORT $LN34@resize
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0004e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN34@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00050	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2603 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00054	03 f1		 add	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00056	53		 push	 ebx
  00057	50		 push	 eax
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _memset
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00061	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00065	5f		 pop	 edi
  00066	5b		 pop	 ebx
  00067	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3328 : 		}

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
$LN27@resize:

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	2b c1		 sub	 eax, ecx
  00075	3b c3		 cmp	 eax, ebx
  00077	0f 82 dd 00 00
	00		 jb	 $LN135@resize

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0007d	8b fa		 mov	 edi, edx
  0007f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00082	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00088	76 07		 jbe	 SHORT $LN68@resize

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0008a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0008f	eb 20		 jmp	 SHORT $LN67@resize
$LN68@resize:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00091	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]
  00094	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00099	8b d0		 mov	 edx, eax
  0009b	d1 ea		 shr	 edx, 1
  0009d	2b ca		 sub	 ecx, edx
  0009f	3b c1		 cmp	 eax, ecx
  000a1	76 07		 jbe	 SHORT $LN69@resize

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  000a3	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  000a8	eb 07		 jmp	 SHORT $LN67@resize
$LN69@resize:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  000aa	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  000ac	3b f8		 cmp	 edi, eax
  000ae	0f 42 f8	 cmovb	 edi, eax
$LN67@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000b1	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000ba	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000bd	89 45 fc	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  000c0	8b ce		 mov	 ecx, esi
  000c2	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  000c7	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000ca	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  000ce	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000d4	89 45 0c	 mov	 DWORD PTR tv666[ebp], eax
  000d7	8b 45 fc	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  000da	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  000dd	83 c6 04	 add	 esi, 4

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000e0	8b 7d f8	 mov	 edi, DWORD PTR __Old$1$[ebp]
  000e3	89 75 f0	 mov	 DWORD PTR tv662[ebp], esi
  000e6	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  000e9	89 55 08	 mov	 DWORD PTR tv657[ebp], edx
  000ec	03 d3		 add	 edx, ebx
  000ee	89 55 f4	 mov	 DWORD PTR tv656[ebp], edx
  000f1	51		 push	 ecx
  000f2	83 ff 10	 cmp	 edi, 16			; 00000010H
  000f5	72 39		 jb	 SHORT $LN46@resize

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000f7	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000f9	56		 push	 esi
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00100	53		 push	 ebx
  00101	ff 75 0c	 push	 DWORD PTR tv666[ebp]
  00104	ff 75 08	 push	 DWORD PTR tv657[ebp]
  00107	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  0010c	8b 45 f4	 mov	 eax, DWORD PTR tv656[ebp]
  0010f	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00112	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00115	50		 push	 eax
  00116	56		 push	 esi
  00117	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  0011c	8b 4d f0	 mov	 ecx, DWORD PTR tv662[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011f	83 c4 20	 add	 esp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  00122	8b 45 fc	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00125	5f		 pop	 edi
  00126	5b		 pop	 ebx
  00127	89 01		 mov	 DWORD PTR [ecx], eax
  00129	5e		 pop	 esi

; 3328 : 		}

  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 08 00	 ret	 8
$LN46@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00130	56		 push	 esi
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00137	53		 push	 ebx
  00138	ff 75 0c	 push	 DWORD PTR tv666[ebp]
  0013b	ff 75 08	 push	 DWORD PTR tv657[ebp]
  0013e	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  00143	8b 45 f4	 mov	 eax, DWORD PTR tv656[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00146	83 c4 18	 add	 esp, 24			; 00000018H
  00149	5f		 pop	 edi

; 506  : 		_Left = _Right;

  0014a	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0014d	8b 45 fc	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00150	5b		 pop	 ebx
  00151	89 06		 mov	 DWORD PTR [esi], eax
  00153	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3328 : 		}

  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
$LN135@resize:

; 3925 : 			_Xlen();	// result too long

  0015a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN133@resize:
  0015f	cc		 int	 3
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3307 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
; 3308 : 		const size_type _Storage_max = // can always store small string
; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
; 3310 : 		return (_Min_value(

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3311 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3312 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 : 			));
; 3314 : 
; 3315 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 3303 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1815 : 		if (_Large_string_engaged())

  00007	72 02		 jb	 SHORT $LN8@c_str

; 3280 : 		return (this->_Get_data()._Myptr());

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@c_str:

; 3281 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3201 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 3202 : 		auto& _My_data = this->_Get_data();
; 3203 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 3204 : 		_STL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Off$[ebp]
  0000a	3b 7e 14	 cmp	 edi, DWORD PTR [esi+20]
  0000d	76 46		 jbe	 SHORT $LN6@operator
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00019	6a 00		 push	 0
  0001b	68 84 0c 00 00	 push	 3204			; 00000c84H
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002d	83 c4 18	 add	 esp, 24			; 00000018H
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 01		 jne	 SHORT $LN11@operator
  00035	cc		 int	 3
$LN11@operator:
  00036	6a 00		 push	 0
  00038	68 84 0c 00 00	 push	 3204			; 00000c84H
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00052	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@operator:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00055	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00059	72 0b		 jb	 SHORT $LN23@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0005b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3206 : 		return (_My_data._Myptr()[_Off]);

  0005e	03 c7		 add	 eax, edi
  00060	5f		 pop	 edi

; 3207 : 		}

  00061	5e		 pop	 esi
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
$LN23@operator:

; 3206 : 		return (_My_data._Myptr()[_Off]);

  00066	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00069	5f		 pop	 edi
  0006a	03 c6		 add	 eax, esi

; 3207 : 		}

  0006c	5e		 pop	 esi
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cbegin, COMDAT
; _this$ = ecx

; 3140 : 		{	// return iterator for beginning of immutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00026	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 3078 : 		{	// return iterator for beginning of immutable sequence

  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1815 : 		if (_Large_string_engaged())

  00030	72 02		 jb	 SHORT $LN13@cbegin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00032	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@cbegin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3080 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));

  00034	51		 push	 ecx
  00035	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 3141 : 		return (begin());

  0003e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3142 : 		}

  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cbegin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 3091 : 		{	// return iterator for end of immutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00026	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]

; 1815 : 		if (_Large_string_engaged())

  00029	72 02		 jb	 SHORT $LN10@end
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0002b	8b 12		 mov	 edx, DWORD PTR [edx]
$LN10@end:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3093 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr())

  0002d	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00030	51		 push	 ecx
  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	03 c2		 add	 eax, edx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
  0003c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3094 : 			+ static_cast<difference_type>(_My_data->_Mysize), _My_data));
; 3095 : 		}

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 3084 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00026	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]

; 1804 : 		if (_Large_string_engaged())

  00029	72 02		 jb	 SHORT $LN10@end
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0002b	8b 12		 mov	 edx, DWORD PTR [edx]
$LN10@end:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3086 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr())

  0002d	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1646 : 		: _Mybase(_Parg, _Pstring)

  00030	51		 push	 ecx
  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 3086 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr())

  00034	03 c2		 add	 eax, edx

; 1646 : 		: _Mybase(_Parg, _Pstring)

  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 3086 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr())

  0003c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3087 : 			+ static_cast<difference_type>(_My_data->_Mysize), _My_data));
; 3088 : 		}

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 3078 : 		{	// return iterator for beginning of immutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00026	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1815 : 		if (_Large_string_engaged())

  00029	72 02		 jb	 SHORT $LN10@begin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0002b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@begin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3080 : 		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));

  0002d	51		 push	 ecx
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3081 : 		}

  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 3072 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00026	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1804 : 		if (_Large_string_engaged())

  00029	72 02		 jb	 SHORT $LN10@begin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0002b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@begin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1646 : 		: _Mybase(_Parg, _Pstring)

  0002d	51		 push	 ecx
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 3073 : 		auto _My_data = _STD addressof(this->_Get_data());
; 3074 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));

  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3075 : 		}

  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z
_TEXT	SEGMENT
tv757 = -16						; size = 4
tv727 = -16						; size = 4
__Suffix_at$1$ = -16					; size = 4
__New_ptr$1$ = -12					; size = 4
__Suffix_size$1$ = -8					; size = 4
__Old$1$ = -4						; size = 4
__Result$1$ = 8						; size = 4
__Off$ = 8						; size = 4
__Insert_at$1$ = 12					; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
tv770 = 20						; size = 4
tv758 = 20						; size = 4
__New_capacity$1$ = 20					; size = 4
__Growth$1$ = 20					; size = 4
__Count$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx

; 2910 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1830 : 		if (_Mysize < _Off)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]

; 2910 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 1830 : 		if (_Mysize < _Off)

  0000e	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00011	3b ca		 cmp	 ecx, edx
  00013	0f 82 3d 02 00
	00		 jb	 $LN145@replace
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00019	8b 75 0c	 mov	 esi, DWORD PTR __N0$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  0001c	8b c1		 mov	 eax, ecx

; 2911 : 		auto& _My_data = this->_Get_data();
; 2912 : 		_My_data._Check_offset(_Off);
; 2913 : 		_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
; 2914 : 		if (_N0 == _Count)

  0001e	8b 5d 14	 mov	 ebx, DWORD PTR __Count$[ebp]

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00021	2b c2		 sub	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00023	3b c6		 cmp	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00025	89 45 f0	 mov	 DWORD PTR tv727[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00028	0f 42 f0	 cmovb	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  0002b	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0002e	89 75 0c	 mov	 DWORD PTR __N0$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00031	89 45 fc	 mov	 DWORD PTR __Old$1$[ebp], eax

; 2911 : 		auto& _My_data = this->_Get_data();
; 2912 : 		_My_data._Check_offset(_Off);
; 2913 : 		_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
; 2914 : 		if (_N0 == _Count)

  00034	3b f3		 cmp	 esi, ebx
  00036	75 25		 jne	 SHORT $LN2@replace

; 1803 : 		value_type * _Result = _Bx._Buf;

  00038	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0003b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0003e	72 02		 jb	 SHORT $LN24@replace
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN24@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00042	53		 push	 ebx
  00043	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2916 : 			_Traits::move(_My_data._Myptr() + _Off, _Ptr, _Count);

  00046	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _memmove
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2973 : 		}

  00052	8b c7		 mov	 eax, edi
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 10 00	 ret	 16			; 00000010H
$LN2@replace:

; 2917 : 			return (*this);
; 2918 : 			}
; 2919 : 
; 2920 : 		const size_type _Old_size = _My_data._Mysize;
; 2921 : 		const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;

  0005d	8b 55 f0	 mov	 edx, DWORD PTR tv727[ebp]
  00060	2b d6		 sub	 edx, esi
  00062	42		 inc	 edx
  00063	89 55 f8	 mov	 DWORD PTR __Suffix_size$1$[ebp], edx

; 2922 : 		if (_Count < _N0)

  00066	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00069	3b de		 cmp	 ebx, esi
  0006b	73 3e		 jae	 SHORT $LN3@replace

; 2923 : 			{	// suffix shifts backwards; we don't have to move anything out of the way
; 2924 : 			_My_data._Mysize = _Old_size - (_N0 - _Count);

  0006d	2b ce		 sub	 ecx, esi
  0006f	03 cb		 add	 ecx, ebx
  00071	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 1803 : 		value_type * _Result = _Bx._Buf;

  00074	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00077	83 f8 10	 cmp	 eax, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0007a	72 02		 jb	 SHORT $LN33@replace
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0007c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN33@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0007e	53		 push	 ebx
  0007f	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2926 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  00082	8d 34 11	 lea	 esi, DWORD PTR [ecx+edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 _memmove
  0008b	ff 75 f8	 push	 DWORD PTR __Suffix_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2928 : 			_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);

  0008e	8b 45 0c	 mov	 eax, DWORD PTR __N0$[ebp]
  00091	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00093	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2928 : 			_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);

  00094	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _memmove
  0009d	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2973 : 		}

  000a0	8b c7		 mov	 eax, edi
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 10 00	 ret	 16			; 00000010H
$LN3@replace:

; 2929 : 			return (*this);
; 2930 : 			}
; 2931 : 
; 2932 : 		const size_type _Growth = static_cast<size_type>(_Count - _N0);

  000ab	89 5d 14	 mov	 DWORD PTR __Growth$1$[ebp], ebx

; 2933 : 		if (_Growth <= _My_data._Myres - _Old_size)

  000ae	2b c1		 sub	 eax, ecx
  000b0	29 75 14	 sub	 DWORD PTR __Growth$1$[ebp], esi
  000b3	39 45 14	 cmp	 DWORD PTR __Growth$1$[ebp], eax
  000b6	0f 87 88 00 00
	00		 ja	 $LN4@replace

; 2934 : 			{	// growth fits
; 2935 : 			_My_data._Mysize = _Old_size + _Growth;

  000bc	8b 45 14	 mov	 eax, DWORD PTR __Growth$1$[ebp]
  000bf	03 c1		 add	 eax, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000c1	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H

; 2934 : 			{	// growth fits
; 2935 : 			_My_data._Mysize = _Old_size + _Growth;

  000c5	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  000c8	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000cb	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax

; 1804 : 		if (_Large_string_engaged())

  000ce	72 05		 jb	 SHORT $LN44@replace
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000d0	8b 00		 mov	 eax, DWORD PTR [eax]
  000d2	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN44@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2937 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  000d5	03 c2		 add	 eax, edx

; 2938 : 			_Elem * const _Suffix_at = _Insert_at + _N0;
; 2939 : 
; 2940 : 			size_type _Ptr_shifted_after; // see rationale in insert
; 2941 : 			if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)

  000d7	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000da	03 f0		 add	 esi, eax
  000dc	89 45 0c	 mov	 DWORD PTR __Insert_at$1$[ebp], eax
  000df	89 75 f0	 mov	 DWORD PTR __Suffix_at$1$[ebp], esi
  000e2	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  000e5	3b 45 0c	 cmp	 eax, DWORD PTR __Insert_at$1$[ebp]
  000e8	76 15		 jbe	 SHORT $LN7@replace
  000ea	8b 45 08	 mov	 eax, DWORD PTR __Result$1$[ebp]
  000ed	03 c1		 add	 eax, ecx
  000ef	3b d0		 cmp	 edx, eax
  000f1	77 0c		 ja	 SHORT $LN7@replace

; 2944 : 				}
; 2945 : 			else if (_Suffix_at <= _Ptr)

  000f3	3b f2		 cmp	 esi, edx
  000f5	77 04		 ja	 SHORT $LN8@replace

; 2946 : 				{
; 2947 : 				_Ptr_shifted_after = 0;

  000f7	33 f6		 xor	 esi, esi

; 2948 : 				}
; 2949 : 			else

  000f9	eb 06		 jmp	 SHORT $LN9@replace
$LN8@replace:

; 2950 : 				{
; 2951 : 				_Ptr_shifted_after = static_cast<size_type>(_Suffix_at - _Ptr);

  000fb	2b f2		 sub	 esi, edx
  000fd	eb 02		 jmp	 SHORT $LN9@replace
$LN7@replace:

; 2942 : 				{
; 2943 : 				_Ptr_shifted_after = _Count;

  000ff	8b f3		 mov	 esi, ebx
$LN9@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00101	ff 75 f8	 push	 DWORD PTR __Suffix_size$1$[ebp]
  00104	8b 4d f0	 mov	 ecx, DWORD PTR __Suffix_at$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2954 : 			_Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);

  00107	8b 45 14	 mov	 eax, DWORD PTR __Growth$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0010a	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2954 : 			_Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);

  0010b	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memmove
  00113	56		 push	 esi
  00114	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00117	ff 75 0c	 push	 DWORD PTR __Insert_at$1$[ebp]
  0011a	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2961 : 			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after,

  0011f	8b 45 14	 mov	 eax, DWORD PTR __Growth$1$[ebp]
  00122	2b de		 sub	 ebx, esi
  00124	03 c6		 add	 eax, esi
  00126	03 45 10	 add	 eax, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00129	53		 push	 ebx
  0012a	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2961 : 			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after,

  0012b	8b 45 0c	 mov	 eax, DWORD PTR __Insert_at$1$[ebp]
  0012e	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2973 : 		}

  00136	83 c4 24	 add	 esp, 36			; 00000024H
  00139	8b c7		 mov	 eax, edi
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 10 00	 ret	 16			; 00000010H
$LN4@replace:

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00144	8b 55 14	 mov	 edx, DWORD PTR __Growth$1$[ebp]
  00147	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0014c	2b c1		 sub	 eax, ecx
  0014e	3b c2		 cmp	 eax, edx
  00150	0f 82 05 01 00
	00		 jb	 $LN146@replace

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00156	8d 34 11	 lea	 esi, DWORD PTR [ecx+edx]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00159	8b ce		 mov	 ecx, esi
  0015b	83 c9 0f	 or	 ecx, 15			; 0000000fH
  0015e	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00164	76 07		 jbe	 SHORT $LN80@replace

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00166	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0016b	eb 25		 jmp	 SHORT $LN143@replace
$LN80@replace:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0016d	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  00170	8b d0		 mov	 edx, eax
  00172	d1 ea		 shr	 edx, 1
  00174	89 55 14	 mov	 DWORD PTR tv770[ebp], edx
  00177	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  0017c	2b 55 14	 sub	 edx, DWORD PTR tv770[ebp]
  0017f	3b c2		 cmp	 eax, edx
  00181	76 07		 jbe	 SHORT $LN81@replace

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00183	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00188	eb 08		 jmp	 SHORT $LN143@replace
$LN81@replace:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0018a	03 45 14	 add	 eax, DWORD PTR tv770[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0018d	3b c8		 cmp	 ecx, eax
  0018f	0f 42 c8	 cmovb	 ecx, eax
$LN143@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00192	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00195	89 4d 14	 mov	 DWORD PTR __New_capacity$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0019e	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  001a1	89 45 f4	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  001a4	8b cf		 mov	 ecx, edi
  001a6	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  001ab	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  001ae	8b 55 f4	 mov	 edx, DWORD PTR __New_ptr$1$[ebp]
  001b1	8b 4d 14	 mov	 ecx, DWORD PTR __New_capacity$1$[ebp]
  001b4	89 77 14	 mov	 DWORD PTR [edi+20], esi
  001b7	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
  001ba	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  001bd	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  001c0	89 75 14	 mov	 DWORD PTR tv758[ebp], esi
  001c3	03 f3		 add	 esi, ebx

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  001c5	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  001c9	89 75 f0	 mov	 DWORD PTR tv757[ebp], esi
  001cc	8b 75 0c	 mov	 esi, DWORD PTR __N0$[ebp]
  001cf	50		 push	 eax
  001d0	72 48		 jb	 SHORT $LN58@replace

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  001d2	8b 31		 mov	 esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  001d4	56		 push	 esi
  001d5	52		 push	 edx
  001d6	e8 00 00 00 00	 call	 _memcpy
  001db	53		 push	 ebx
  001dc	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  001df	ff 75 14	 push	 DWORD PTR tv758[ebp]
  001e2	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  001e7	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  001ea	ff 75 f8	 push	 DWORD PTR __Suffix_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  001ed	03 c6		 add	 eax, esi
  001ef	03 45 0c	 add	 eax, DWORD PTR __N0$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  001f2	50		 push	 eax
  001f3	ff 75 f0	 push	 DWORD PTR tv757[ebp]
  001f6	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  001fb	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  001fe	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ff	50		 push	 eax
  00200	56		 push	 esi
  00201	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  00206	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00209	83 c4 2c	 add	 esp, 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  0020c	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2973 : 		}

  0020f	8b c7		 mov	 eax, edi
  00211	5f		 pop	 edi
  00212	5e		 pop	 esi
  00213	5b		 pop	 ebx
  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c2 10 00	 ret	 16			; 00000010H
$LN58@replace:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0021a	51		 push	 ecx
  0021b	52		 push	 edx
  0021c	e8 00 00 00 00	 call	 _memcpy
  00221	53		 push	 ebx
  00222	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00225	ff 75 14	 push	 DWORD PTR tv758[ebp]
  00228	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  0022d	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00230	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00233	ff 75 f8	 push	 DWORD PTR __Suffix_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2971 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  00236	03 c3		 add	 eax, ebx
  00238	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0023a	50		 push	 eax
  0023b	ff 75 f0	 push	 DWORD PTR tv757[ebp]
  0023e	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00243	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2973 : 		}

  00246	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00249	89 03		 mov	 DWORD PTR [ebx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2973 : 		}

  0024b	8b c7		 mov	 eax, edi
  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	5b		 pop	 ebx
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c2 10 00	 ret	 16			; 00000010H
$LN145@replace:

; 1832 : 			_Xran();

  00256	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN146@replace:

; 3925 : 			_Xlen();	// result too long

  0025b	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN141@replace:
  00260	cc		 int	 3
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2675 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2675 : 		{	// assign [_Ptr, <null>)

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@assign:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@assign
  00017	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 2677 : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1$ = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2657 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 2658 : 		auto& _My_data = this->_Get_data();
; 2659 : 		if (_Count <= _My_data._Myres)

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 29		 ja	 SHORT $LN2@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00016	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00019	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0001c	72 02		 jb	 SHORT $LN9@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN9@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00020	53		 push	 ebx
  00021	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2662 : 			_My_data._Mysize = _Count;

  00024	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 _memmove
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00030	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2672 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN2@assign:

; 3889 : 		if (_New_size > max_size())

  0003f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00045	0f 87 85 00 00
	00		 ja	 $LN95@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0004b	8b fb		 mov	 edi, ebx
  0004d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00050	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00056	76 07		 jbe	 SHORT $LN43@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00058	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0005d	eb 1e		 jmp	 SHORT $LN42@assign
$LN43@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0005f	8b d1		 mov	 edx, ecx
  00061	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00066	d1 ea		 shr	 edx, 1
  00068	2b c2		 sub	 eax, edx
  0006a	3b c8		 cmp	 ecx, eax
  0006c	76 07		 jbe	 SHORT $LN44@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0006e	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00073	eb 08		 jmp	 SHORT $LN42@assign
$LN44@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00075	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00078	3b f8		 cmp	 edi, eax
  0007a	0f 42 f8	 cmovb	 edi, eax
$LN42@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0007d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00086	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3899 : 		_My_data._Orphan_all();

  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00093	53		 push	 ebx
  00094	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  00097	89 7e 18	 mov	 DWORD PTR [esi+24], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009a	8b 7d 0c	 mov	 edi, DWORD PTR __New_ptr$1$[ebp]
  0009d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  0009e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a1	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000a6	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  000ac	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000b0	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b3	72 0d		 jb	 SHORT $LN21@assign

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000b5	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b6	50		 push	 eax
  000b7	ff 76 04	 push	 DWORD PTR [esi+4]
  000ba	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000bf	83 c4 08	 add	 esp, 8
$LN21@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2672 : 		}

  000c2	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000c5	8b c6		 mov	 eax, esi
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
$LN95@assign:

; 3891 : 			_Xlen();	// result too long

  000d0	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN93@assign:
  000d5	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
tv543 = -12						; size = 4
__New_size$1$ = -12					; size = 4
tv544 = -8						; size = 4
__Old_size$1$ = -8					; size = 4
__Old$1$ = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__Count$ = 8						; size = 4
tv555 = 12						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2596 : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 2597 : 		auto& _My_data = this->_Get_data();
; 2598 : 		const size_type _Old_size = _My_data._Mysize;
; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  0000e	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f8	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b f8		 cmp	 edi, eax
  00020	77 31		 ja	 SHORT $LN2@append

; 2600 : 			{
; 2601 : 			_My_data._Mysize = _Old_size + _Count;

  00022	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00025	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00028	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002b	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0002e	72 02		 jb	 SHORT $LN9@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00030	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2603 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00032	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00035	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00039	57		 push	 edi
  0003a	50		 push	 eax
  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 _memset
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00044	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2615 : 		}

  00048	8b c3		 mov	 eax, ebx
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN2@append:

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00053	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00058	2b c1		 sub	 eax, ecx
  0005a	3b c7		 cmp	 eax, edi
  0005c	0f 82 df 00 00
	00		 jb	 $LN107@append

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00062	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00065	8b f0		 mov	 esi, eax

; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00067	89 45 f4	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0006a	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006d	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00073	76 07		 jbe	 SHORT $LN43@append

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00075	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0007a	eb 1e		 jmp	 SHORT $LN42@append
$LN43@append:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0007c	8b ca		 mov	 ecx, edx
  0007e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00083	d1 e9		 shr	 ecx, 1
  00085	2b c1		 sub	 eax, ecx
  00087	3b d0		 cmp	 edx, eax
  00089	76 07		 jbe	 SHORT $LN44@append

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0008b	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00090	eb 08		 jmp	 SHORT $LN42@append
$LN44@append:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00092	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00095	3b f0		 cmp	 esi, eax
  00097	0f 42 f0	 cmovb	 esi, eax
$LN42@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0009a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000a3	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000a6	89 45 08	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  000a9	8b cb		 mov	 ecx, ebx
  000ab	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  000b0	8b 45 f4	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b3	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000b6	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000b9	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  000bd	89 45 0c	 mov	 DWORD PTR tv555[ebp], eax
  000c0	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  000c3	89 73 18	 mov	 DWORD PTR [ebx+24], esi
  000c6	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c9	51		 push	 ecx
  000ca	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  000cd	89 55 f8	 mov	 DWORD PTR tv544[ebp], edx
  000d0	03 d7		 add	 edx, edi
  000d2	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000d6	89 55 f4	 mov	 DWORD PTR tv543[ebp], edx
  000d9	72 3a		 jb	 SHORT $LN21@append

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000db	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000dd	56		 push	 esi
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000e4	57		 push	 edi
  000e5	ff 75 0c	 push	 DWORD PTR tv555[ebp]
  000e8	ff 75 f8	 push	 DWORD PTR tv544[ebp]
  000eb	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000f0	8b 45 f4	 mov	 eax, DWORD PTR tv543[ebp]
  000f3	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000f6	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000f9	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fa	50		 push	 eax
  000fb	56		 push	 esi
  000fc	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  00101	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00104	83 c4 20	 add	 esp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  00107	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 2615 : 		}

  0010a	8b c3		 mov	 eax, ebx
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN21@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00115	56		 push	 esi
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0011c	57		 push	 edi
  0011d	ff 75 0c	 push	 DWORD PTR tv555[ebp]
  00120	ff 75 f8	 push	 DWORD PTR tv544[ebp]
  00123	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  00128	8b 45 f4	 mov	 eax, DWORD PTR tv543[ebp]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0012b	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  0012e	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00131	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00134	5f		 pop	 edi
  00135	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2615 : 		}

  00137	8b c3		 mov	 eax, ebx
  00139	5e		 pop	 esi
  0013a	5b		 pop	 ebx
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 08 00	 ret	 8
$LN107@append:

; 3925 : 			_Xlen();	// result too long

  00141	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN105@append:
  00146	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2466 : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2467 : 		if (this != _STD addressof(_Right))

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b f0		 cmp	 esi, eax
  0000b	74 16		 je	 SHORT $LN146@operator

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000d	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00011	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]

; 1815 : 		if (_Large_string_engaged())

  00014	72 02		 jb	 SHORT $LN140@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00016	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN140@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2481 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00018	ff 70 14	 push	 DWORD PTR [eax+20]
  0001b	51		 push	 ecx
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN146@operator:

; 2482 : 			}
; 2483 : 
; 2484 : 		return (*this);
; 2485 : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2459 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00008	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0000e	72 0d		 jb	 SHORT $LN4@basic_stri

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00010	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0001d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2023 : 		_Get_data()._Orphan_all();

  00024	8b ce		 mov	 ecx, esi

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00026	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0002d	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00031	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00036	6a 08		 push	 8
  00038	ff 36		 push	 DWORD PTR [esi]
  0003a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003f	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00048	5e		 pop	 esi

; 2460 : 		_Tidy_deallocate();
; 2461 : 		}

  00049	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
__Right_size$1$ = 8					; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2394 : 		{	// assign by copying data stored in _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();
; 2398 : 		auto& _Right_data = _Right._Get_data();
; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000a	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0000e	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();
; 2398 : 		auto& _Right_data = _Right._Get_data();
; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	89 4d 08	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 1815 : 		if (_Large_string_engaged())

  00017	72 02		 jb	 SHORT $LN13@Construct_
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00019	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN13@Construct_:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  0001b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0001e	73 17		 jae	 SHORT $LN2@Construct_
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00020	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  00023	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2416 : 		}

  00027	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  0002a	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  00031	5f		 pop	 edi
  00032	5b		 pop	 ebx
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN2@Construct_:
  00037	56		 push	 esi

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00038	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0003a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00042	3b f0		 cmp	 esi, eax
  00044	0f 47 f0	 cmova	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00047	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00050	8b 4d 08	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  00053	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00054	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00057	51		 push	 ecx
  00058	53		 push	 ebx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2416 : 		}

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00062	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2416 : 		}

  00065	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00068	89 77 18	 mov	 DWORD PTR [edi+24], esi
  0006b	5e		 pop	 esi
  0006c	5f		 pop	 edi
  0006d	5b		 pop	 ebx
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2344 : 		{	// assign by stealing _Right's buffer, memcpy optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00026	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00029	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 2345 : 			// pre: this != &_Right
; 2346 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2347 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2348 : 		auto& _Right_data = _Right._Get_data();
; 2349 : 
; 2350 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2351 : 		if (_Right_data._Large_string_engaged())

  0002d	72 35		 jb	 SHORT $LN2@Assign_rv_
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

  0002f	6a 03		 push	 3
  00031	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;
; 235  : 	_Myproxy = _Right._Myproxy;

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00045	89 07		 mov	 DWORD PTR [edi], eax

; 236  : 	_Right._Myproxy = _Temp;

  00047	89 0e		 mov	 DWORD PTR [esi], ecx

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

  00049	8b 07		 mov	 eax, DWORD PTR [edi]
  0004b	85 c0		 test	 eax, eax
  0004d	74 04		 je	 SHORT $LN22@Assign_rv_

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  0004f	89 38		 mov	 DWORD PTR [eax], edi
  00051	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN22@Assign_rv_:

; 240  : 	if (_Right._Myproxy != nullptr)

  00053	85 c9		 test	 ecx, ecx
  00055	74 02		 je	 SHORT $LN23@Assign_rv_

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  00057	89 31		 mov	 DWORD PTR [ecx], esi
$LN23@Assign_rv_:

; 242  : 	}

  00059	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2355 : 		else

  00062	eb 07		 jmp	 SHORT $LN3@Assign_rv_
$LN2@Assign_rv_:

; 2023 : 		_Get_data()._Orphan_all();

  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN3@Assign_rv_:

; 2356 : 			{
; 2357 : 			_Right._Orphan_all();
; 2358 : 			}
; 2359 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2360 : 
; 2361 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2362 : 			+ _Memcpy_move_offset;
; 2363 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2364 : 			+ _Memcpy_move_offset;
; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0006b	0f 10 46 04	 movups	 xmm0, XMMWORD PTR [esi+4]
  0006f	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0
  00073	f3 0f 7e 46 14	 movq	 xmm0, QWORD PTR [esi+20]
  00078	66 0f d6 47 14	 movq	 QWORD PTR [edi+20], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0007d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00084	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0008b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2367 : 		}

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2268 : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00026	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0002e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00035	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0003c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00041	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00044	89 06		 mov	 DWORD PTR [esi], eax

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00046	c6 45 f0 00	 mov	 BYTE PTR $T2[ebp], 0
  0004a	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0004c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00052	ff 75 f0	 push	 DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0005c	8b 06		 mov	 eax, DWORD PTR [esi]

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0005e	ff 75 08	 push	 DWORD PTR __Right$[ebp]

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00061	89 30		 mov	 DWORD PTR [eax], esi

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00063	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2270 : 		}

  00068	8b c6		 mov	 eax, esi
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXQBD0Urandom_access_iterator_tag@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXQBD0Urandom_access_iterator_tag@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct, COMDAT
; _this$ = ecx

; 2259 : 		{	// initialize from [_First, _Last), const pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2260 : 		if (_First != _Last)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	3b d0		 cmp	 edx, eax
  0000b	74 09		 je	 SHORT $LN2@Construct

; 2261 : 			{
; 2262 : 			assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));

  0000d	2b c2		 sub	 eax, edx
  0000f	50		 push	 eax
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@Construct:

; 2263 : 			}
; 2264 : 		}

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXQBD0Urandom_access_iterator_tag@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2183 : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0002a	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00032	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00039	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00040	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00045	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00047	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0004a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00050	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0005b	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0005e	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00060	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00067	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 1994 : 		}
; 1995 : 
; 1996 : 	void _Free_proxy()
; 1997 : 		{	// destroy proxy
; 1998 : 		_Alproxy _Proxy_allocator(_Getal());
; 1999 : 		_Orphan_all();
; 2000 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
; 2001 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());
; 2002 : 		_Myproxy() = nullptr;
; 2003 : 		}
; 2004 : 
; 2005 : 	_Iterator_base12 **_Getpfirst() const
; 2006 : 		{	// get address of iterator chain
; 2007 : 		return (_Get_data()._Getpfirst());
; 2008 : 		}
; 2009 : 
; 2010 : 	_Container_proxy * & _Myproxy() noexcept
; 2011 : 		{	// return reference to _Myproxy
; 2012 : 		return (_Get_data()._Myproxy);
; 2013 : 		}
; 2014 : 
; 2015 : 	_Container_proxy * const & _Myproxy() const noexcept
; 2016 : 		{	// return const reference to _Myproxy
; 2017 : 		return (_Get_data()._Myproxy);
; 2018 : 		}
; 2019 : #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2020 : 
; 2021 : 	void _Orphan_all()
; 2022 : 		{	// orphan all iterators
; 2023 : 		_Get_data()._Orphan_all();
; 2024 : 		}
; 2025 : 
; 2026 : 	void _Swap_all(_String_alloc& _Right)
; 2027 : 		{	// swap all iterators
; 2028 : 		_Get_data()._Swap_all(_Right._Get_data());
; 2029 : 		}
; 2030 : 
; 2031 : 	_Alty& _Getal() noexcept
; 2032 : 		{	// return reference to allocator
; 2033 : 		return (_Mypair._Get_first());
; 2034 : 		}
; 2035 : 
; 2036 : 	const _Alty& _Getal() const noexcept
; 2037 : 		{	// return const reference to allocator
; 2038 : 		return (_Mypair._Get_first());
; 2039 : 		}
; 2040 : 
; 2041 : 	_Mydata_t& _Get_data() noexcept
; 2042 : 		{	// return reference to _String_val
; 2043 : 		return (_Mypair._Get_second());
; 2044 : 		}
; 2045 : 
; 2046 : 	const _Mydata_t& _Get_data() const noexcept
; 2047 : 		{	// return const reference to _String_val
; 2048 : 		return (_Mypair._Get_second());
; 2049 : 		}
; 2050 : 
; 2051 : private:
; 2052 : 	_Compressed_pair<_Alty, _Mydata_t> _Mypair;
; 2053 : 	};
; 2054 : 
; 2055 : 
; 2056 : 		// CLASS TEMPLATE basic_string
; 2057 : template<class _Ty>
; 2058 : 	constexpr size_t _Size_after_ebco_v
; 2059 : 		= is_empty_v<_Ty> ? 0 : sizeof(_Ty);	// get _Ty's size after being EBCO'd
; 2060 : 
; 2061 : template<class _Elem,
; 2062 : 	class _Traits = char_traits<_Elem>,
; 2063 : 	class _Alloc = allocator<_Elem>>
; 2064 : 	class basic_string
; 2065 : 		: public _String_alloc<_String_base_types<_Elem, _Alloc>>
; 2066 : 	{	// null-terminated transparent array of elements
; 2067 : public:
; 2068 : 	static_assert(!_ENFORCE_MATCHING_ALLOCATORS || is_same_v<_Elem, typename _Alloc::value_type>,
; 2069 : 		_MISMATCHED_ALLOCATOR_MESSAGE("basic_string<T, Traits, Allocator>", "T"));
; 2070 : 
; 2071 : 	static_assert(is_same_v<_Elem, typename _Traits::char_type>,
; 2072 : 		"N4659 24.3.2.1 [string.require]/3 requires that the supplied "
; 2073 : 		"char_traits character type match the string's character type.");
; 2074 : 
; 2075 : 	using _Mybase = _String_alloc<_String_base_types<_Elem, _Alloc>>;
; 2076 : 	using traits_type = _Traits;
; 2077 : 	using allocator_type = _Alloc;
; 2078 : 
; 2079 : 	using _Alty = typename _Mybase::_Alty;
; 2080 : 	using _Alty_traits = typename _Mybase::_Alty_traits;
; 2081 : 	using _Mydata_t = typename _Mybase::_Mydata_t;
; 2082 : 
; 2083 : 	using value_type = typename _Mybase::value_type;
; 2084 : 	using size_type = typename _Mybase::size_type;
; 2085 : 	using difference_type = typename _Mybase::difference_type;
; 2086 : 	using pointer = typename _Mybase::pointer;
; 2087 : 	using const_pointer = typename _Mybase::const_pointer;
; 2088 : 	using reference = value_type&;
; 2089 : 	using const_reference = const value_type&;
; 2090 : 
; 2091 : 	using iterator = typename _Mybase::iterator;
; 2092 : 	using const_iterator = typename _Mybase::const_iterator;
; 2093 : 
; 2094 : 	using reverse_iterator = _STD reverse_iterator<iterator>;
; 2095 : 	using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 2096 : 
; 2097 : 	// When doing swap / move by memcpy, we are touching:
; 2098 : 	//   _String_val::_Bx::_Buf (type is array of _Elem)
; 2099 : 	//   _String_val::_Bx::_Ptr (type is pointer)
; 2100 : 	//   _String_val::_Mysize   (type is size_type)
; 2101 : 	//   _String_val::_Myres    (type is size_type)
; 2102 : 	// N4659 24.1 [strings.general]/1 says _Elem must be a non-array POD, so memcpy is safe.
; 2103 : 	// We need to ask if pointer is safe to memcpy.
; 2104 : 	// size_type must be an unsigned integral type so memcpy is safe.
; 2105 : 	// We also need to disable memcpy if the user has supplied _Traits, since
; 2106 : 	//   they can observe traits::assign and similar.
; 2107 : 	using _Use_memcpy_move = bool_constant<
; 2108 : 		_Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>>;
; 2109 : 	// This offset skips over the _Container_base members, if any
; 2110 : 	static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v<_Container_base>;
; 2111 : 	static constexpr size_t _Memcpy_move_size = sizeof(_Mydata_t) - _Memcpy_move_offset;
; 2112 : 
; 2113 : 	template<class _Iter>
; 2114 : 		using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter,
; 2115 : 			const _Elem * const,
; 2116 : 			_Elem * const,
; 2117 : 			const _Elem *,
; 2118 : 			_Elem *>>;
; 2119 : 
; 2120 : #if _HAS_CXX17
; 2121 : 	template<class _StringViewIsh>
; 2122 : 		using _Is_string_view_ish = enable_if_t<conjunction_v<
; 2123 : 			is_convertible<const _StringViewIsh&, basic_string_view<_Elem, _Traits>>,
; 2124 : 			negation<is_convertible<const _StringViewIsh&, const _Elem *>>>>;
; 2125 : #endif /* _HAS_CXX17 */
; 2126 : 
; 2127 : 
; 2128 : 	basic_string(const basic_string& _Right)
; 2129 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
; 2130 : 		{	// construct by copying _Right
; 2131 : 		_Construct_lv_contents(_Right);
; 2132 : 		}
; 2133 : 
; 2134 : 	basic_string(const basic_string& _Right, const _Alloc& _Al)
; 2135 : 		: _Mybase(_Al)
; 2136 : 		{	// construct by copying with allocator
; 2137 : 		_Construct_lv_contents(_Right);
; 2138 : 		}
; 2139 : 
; 2140 : 	basic_string() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)
; 2141 : 		: _Mybase()
; 2142 : 		{	// construct empty string
; 2143 : 		_Tidy_init();
; 2144 : 		}
; 2145 : 
; 2146 : 	explicit basic_string(const _Alloc& _Al) noexcept
; 2147 : 		: _Mybase(_Al)
; 2148 : 		{	// construct empty string with allocator
; 2149 : 		_Tidy_init();
; 2150 : 		}
; 2151 : 
; 2152 : 	basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
; 2153 : 		: _Mybase(_Al)
; 2154 : 		{	// construct from _Right [_Roff, <end>)
; 2155 : 		_Tidy_init();
; 2156 : 		assign(_Right, _Roff, npos);
; 2157 : 		}
; 2158 : 
; 2159 : 	basic_string(const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
; 2160 : 		: _Mybase(_Al)
; 2161 : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 2162 : 		_Tidy_init();
; 2163 : 		assign(_Right, _Roff, _Count);
; 2164 : 		}
; 2165 : 
; 2166 : 	basic_string(_In_reads_(_Count) const _Elem * const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count)
; 2167 : 		: _Mybase()
; 2168 : 		{	// construct from [_Ptr, _Ptr + _Count)
; 2169 : 		_Tidy_init();
; 2170 : 		assign(_Ptr, _Count);
; 2171 : 		}
; 2172 : 
; 2173 : 	basic_string(_In_reads_(_Count) const _Elem * const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count,
; 2174 : 		const _Alloc& _Al)
; 2175 : 		: _Mybase(_Al)
; 2176 : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 2177 : 		_Tidy_init();
; 2178 : 		assign(_Ptr, _Count);
; 2179 : 		}
; 2180 : 
; 2181 : 	basic_string(_In_z_ const _Elem * const _Ptr)
; 2182 : 		: _Mybase()

  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00075	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 464  : 		return (_CSTD strlen(_First));

  00079	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0007c	0f 1f 40 00	 npad	 4
$LL75@basic_stri:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	84 c9		 test	 cl, cl
  00085	75 f9		 jne	 SHORT $LL75@basic_stri
  00087	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00089	8b ce		 mov	 ecx, esi
  0008b	50		 push	 eax
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2184 : 		_Tidy_init();
; 2185 : 		assign(_Ptr);
; 2186 : 		}

  00092	8b c6		 mov	 eax, esi
  00094	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2142 : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00025	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0002d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00034	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0003b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00040	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00042	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0004b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	89 30		 mov	 DWORD PTR [eax], esi

; 2144 : 		}

  00056	8b c6		 mov	 eax, esi

; 3976 : 		_My_data._Mysize = 0;

  00058	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0005f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00066	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2144 : 		}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Right_size$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Result$1$ = 8						; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2130 : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0002c	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0002e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00034	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1785 : 		_Myres(0)

  0003b	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00042	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00047	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00049	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0004c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00052	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00059	8b 07		 mov	 eax, DWORD PTR [edi]
  0005b	89 38		 mov	 DWORD PTR [eax], edi

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0005d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 1994 : 		}
; 1995 : 
; 1996 : 	void _Free_proxy()
; 1997 : 		{	// destroy proxy
; 1998 : 		_Alproxy _Proxy_allocator(_Getal());
; 1999 : 		_Orphan_all();
; 2000 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
; 2001 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());
; 2002 : 		_Myproxy() = nullptr;
; 2003 : 		}
; 2004 : 
; 2005 : 	_Iterator_base12 **_Getpfirst() const
; 2006 : 		{	// get address of iterator chain
; 2007 : 		return (_Get_data()._Getpfirst());
; 2008 : 		}
; 2009 : 
; 2010 : 	_Container_proxy * & _Myproxy() noexcept
; 2011 : 		{	// return reference to _Myproxy
; 2012 : 		return (_Get_data()._Myproxy);
; 2013 : 		}
; 2014 : 
; 2015 : 	_Container_proxy * const & _Myproxy() const noexcept
; 2016 : 		{	// return const reference to _Myproxy
; 2017 : 		return (_Get_data()._Myproxy);
; 2018 : 		}
; 2019 : #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2020 : 
; 2021 : 	void _Orphan_all()
; 2022 : 		{	// orphan all iterators
; 2023 : 		_Get_data()._Orphan_all();
; 2024 : 		}
; 2025 : 
; 2026 : 	void _Swap_all(_String_alloc& _Right)
; 2027 : 		{	// swap all iterators
; 2028 : 		_Get_data()._Swap_all(_Right._Get_data());
; 2029 : 		}
; 2030 : 
; 2031 : 	_Alty& _Getal() noexcept
; 2032 : 		{	// return reference to allocator
; 2033 : 		return (_Mypair._Get_first());
; 2034 : 		}
; 2035 : 
; 2036 : 	const _Alty& _Getal() const noexcept
; 2037 : 		{	// return const reference to allocator
; 2038 : 		return (_Mypair._Get_first());
; 2039 : 		}
; 2040 : 
; 2041 : 	_Mydata_t& _Get_data() noexcept
; 2042 : 		{	// return reference to _String_val
; 2043 : 		return (_Mypair._Get_second());
; 2044 : 		}
; 2045 : 
; 2046 : 	const _Mydata_t& _Get_data() const noexcept
; 2047 : 		{	// return const reference to _String_val
; 2048 : 		return (_Mypair._Get_second());
; 2049 : 		}
; 2050 : 
; 2051 : private:
; 2052 : 	_Compressed_pair<_Alty, _Mydata_t> _Mypair;
; 2053 : 	};
; 2054 : 
; 2055 : 
; 2056 : 		// CLASS TEMPLATE basic_string
; 2057 : template<class _Ty>
; 2058 : 	constexpr size_t _Size_after_ebco_v
; 2059 : 		= is_empty_v<_Ty> ? 0 : sizeof(_Ty);	// get _Ty's size after being EBCO'd
; 2060 : 
; 2061 : template<class _Elem,
; 2062 : 	class _Traits = char_traits<_Elem>,
; 2063 : 	class _Alloc = allocator<_Elem>>
; 2064 : 	class basic_string
; 2065 : 		: public _String_alloc<_String_base_types<_Elem, _Alloc>>
; 2066 : 	{	// null-terminated transparent array of elements
; 2067 : public:
; 2068 : 	static_assert(!_ENFORCE_MATCHING_ALLOCATORS || is_same_v<_Elem, typename _Alloc::value_type>,
; 2069 : 		_MISMATCHED_ALLOCATOR_MESSAGE("basic_string<T, Traits, Allocator>", "T"));
; 2070 : 
; 2071 : 	static_assert(is_same_v<_Elem, typename _Traits::char_type>,
; 2072 : 		"N4659 24.3.2.1 [string.require]/3 requires that the supplied "
; 2073 : 		"char_traits character type match the string's character type.");
; 2074 : 
; 2075 : 	using _Mybase = _String_alloc<_String_base_types<_Elem, _Alloc>>;
; 2076 : 	using traits_type = _Traits;
; 2077 : 	using allocator_type = _Alloc;
; 2078 : 
; 2079 : 	using _Alty = typename _Mybase::_Alty;
; 2080 : 	using _Alty_traits = typename _Mybase::_Alty_traits;
; 2081 : 	using _Mydata_t = typename _Mybase::_Mydata_t;
; 2082 : 
; 2083 : 	using value_type = typename _Mybase::value_type;
; 2084 : 	using size_type = typename _Mybase::size_type;
; 2085 : 	using difference_type = typename _Mybase::difference_type;
; 2086 : 	using pointer = typename _Mybase::pointer;
; 2087 : 	using const_pointer = typename _Mybase::const_pointer;
; 2088 : 	using reference = value_type&;
; 2089 : 	using const_reference = const value_type&;
; 2090 : 
; 2091 : 	using iterator = typename _Mybase::iterator;
; 2092 : 	using const_iterator = typename _Mybase::const_iterator;
; 2093 : 
; 2094 : 	using reverse_iterator = _STD reverse_iterator<iterator>;
; 2095 : 	using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 2096 : 
; 2097 : 	// When doing swap / move by memcpy, we are touching:
; 2098 : 	//   _String_val::_Bx::_Buf (type is array of _Elem)
; 2099 : 	//   _String_val::_Bx::_Ptr (type is pointer)
; 2100 : 	//   _String_val::_Mysize   (type is size_type)
; 2101 : 	//   _String_val::_Myres    (type is size_type)
; 2102 : 	// N4659 24.1 [strings.general]/1 says _Elem must be a non-array POD, so memcpy is safe.
; 2103 : 	// We need to ask if pointer is safe to memcpy.
; 2104 : 	// size_type must be an unsigned integral type so memcpy is safe.
; 2105 : 	// We also need to disable memcpy if the user has supplied _Traits, since
; 2106 : 	//   they can observe traits::assign and similar.
; 2107 : 	using _Use_memcpy_move = bool_constant<
; 2108 : 		_Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>>;
; 2109 : 	// This offset skips over the _Container_base members, if any
; 2110 : 	static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v<_Container_base>;
; 2111 : 	static constexpr size_t _Memcpy_move_size = sizeof(_Mydata_t) - _Memcpy_move_offset;
; 2112 : 
; 2113 : 	template<class _Iter>
; 2114 : 		using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter,
; 2115 : 			const _Elem * const,
; 2116 : 			_Elem * const,
; 2117 : 			const _Elem *,
; 2118 : 			_Elem *>>;
; 2119 : 
; 2120 : #if _HAS_CXX17
; 2121 : 	template<class _StringViewIsh>
; 2122 : 		using _Is_string_view_ish = enable_if_t<conjunction_v<
; 2123 : 			is_convertible<const _StringViewIsh&, basic_string_view<_Elem, _Traits>>,
; 2124 : 			negation<is_convertible<const _StringViewIsh&, const _Elem *>>>>;
; 2125 : #endif /* _HAS_CXX17 */
; 2126 : 
; 2127 : 
; 2128 : 	basic_string(const basic_string& _Right)
; 2129 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00067	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0006b	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0006e	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00071	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00074	89 4d 08	 mov	 DWORD PTR __Result$1$[ebp], ecx

; 1815 : 		if (_Large_string_engaged())

  00077	72 05		 jb	 SHORT $LN81@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 4d 08	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN81@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  0007e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00081	73 13		 jae	 SHORT $LN70@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00083	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00086	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2404 : 			_My_data._Mysize = _Right_size;

  0008a	89 57 14	 mov	 DWORD PTR [edi+20], edx

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  0008d	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 2406 : 			return;

  00094	eb 35		 jmp	 SHORT $LN126@basic_stri
$LN70@basic_stri:

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00096	8b f2		 mov	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00098	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  0009d	83 ce 0f	 or	 esi, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  000a0	3b f0		 cmp	 esi, eax
  000a2	0f 47 f0	 cmova	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  000a5	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000ae	8b 4d f0	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  000b1	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  000b2	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000b5	51		 push	 ecx
  000b6	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  000bf	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c2	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  000c5	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 2415 : 		_My_data._Myres = _New_capacity;

  000c8	89 77 18	 mov	 DWORD PTR [edi+24], esi
$LN126@basic_stri:

; 2131 : 		_Construct_lv_contents(_Right);
; 2132 : 		}

  000cb	8b c7		 mov	 eax, edi
  000cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d7	59		 pop	 ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2048 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2049 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2043 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2044 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2038 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2039 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2033 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2034 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all, COMDAT
; _this$ = ecx

; 2027 : 		{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

  00027	6a 03		 push	 3
  00029	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;
; 235  : 	_Myproxy = _Right._Myproxy;

  00039	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  0003c	8b 17		 mov	 edx, DWORD PTR [edi]
  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	89 07		 mov	 DWORD PTR [edi], eax

; 236  : 	_Right._Myproxy = _Temp;

  00042	89 16		 mov	 DWORD PTR [esi], edx

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

  00044	8b 07		 mov	 eax, DWORD PTR [edi]
  00046	85 c0		 test	 eax, eax
  00048	74 04		 je	 SHORT $LN12@Swap_all

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  0004a	89 38		 mov	 DWORD PTR [eax], edi
  0004c	8b 16		 mov	 edx, DWORD PTR [esi]
$LN12@Swap_all:

; 240  : 	if (_Right._Myproxy != nullptr)

  0004e	85 d2		 test	 edx, edx
  00050	74 02		 je	 SHORT $LN13@Swap_all

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  00052	89 32		 mov	 DWORD PTR [edx], esi
$LN13@Swap_all:

; 242  : 	}

  00054	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2029 : 		}

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 2023 : 		_Get_data()._Orphan_all();

  00000	e9 00 00 00 00	 jmp	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT
; _this$ = ecx

; 2012 : 		return (_Get_data()._Myproxy);

  00000	8b c1		 mov	 eax, ecx

; 2013 : 		}

  00002	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 1997 : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00008	6a 08		 push	 8
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00011	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001a	5e		 pop	 esi

; 2003 : 		}

  0001b	c3		 ret	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 1989 : 		{	// construct proxy

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00001	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1989 : 		{	// construct proxy

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0000a	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000c	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 30		 mov	 DWORD PTR [eax], esi
  00020	5e		 pop	 esi

; 1994 : 		}

  00021	c3		 ret	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc, COMDAT
; _this$ = ecx

; 1954 : 		const bool _Reload = _Alty_traits::propagate_on_container_copy_assignment::value
; 1955 : 			&& _Getal() != _Al;
; 1956 : 
; 1957 : 		if (_Reload)
; 1958 : 			{
; 1959 : 			_Free_proxy();
; 1960 : 			}
; 1961 : 
; 1962 : 		_Pocca(_Getal(), _Al);
; 1963 : 
; 1964 : 		if (_Reload)
; 1965 : 			{
; 1966 : 			_Alloc_proxy();
; 1967 : 			}
; 1968 : 		}

  00000	c2 04 00	 ret	 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1948 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00008	6a 08		 push	 8
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00011	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001a	5e		 pop	 esi

; 1949 : 		_Free_proxy();
; 1950 : 		}

  0001b	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1934 : 		{	// default construct allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0000b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00012	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001e	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00020	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 30		 mov	 DWORD PTR [eax], esi

; 1935 : 		_Alloc_proxy();
; 1936 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1862 : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1857 : 			{	// user-provided, for fancy pointers
; 1858 : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 1850 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00003	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00006	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Size$[ebp]
  0000c	3b c8		 cmp	 ecx, eax
  0000e	0f 42 c1	 cmovb	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1852 : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1846 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 1829 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1830 : 		if (_Mysize < _Off)

  00003	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00006	3b 45 08	 cmp	 eax, DWORD PTR __Off$[ebp]
  00009	72 04		 jb	 SHORT $LN6@Check_offs

; 1833 : 			}
; 1834 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN6@Check_offs:

; 1831 : 			{
; 1832 : 			_Xran();

  0000f	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN4@Check_offs:
  00014	cc		 int	 3
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	0f 93 c0	 setae	 al

; 1826 : 		}

  00007	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1815 : 		if (_Large_string_engaged())

  00007	72 02		 jb	 SHORT $LN2@Myptr

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN2@Myptr:

; 1821 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1804 : 		if (_Large_string_engaged())

  00007	72 02		 jb	 SHORT $LN2@Myptr

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN2@Myptr:

; 1810 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1787 : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0000f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00016	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 897  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	83 c8 ff	 or	 eax, -1

; 893  : 		}

  00003	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00003	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0000b	83 c4 04	 add	 esp, 4

; 998  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000e	83 c4 08	 add	 esp, 8

; 993  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1203 : 	{	// convert size_t to size_t, unchanged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1204 : 	return (_Len);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1205 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	_Bytes += _Non_user_size;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];
; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00010	83 00 27	 add	 DWORD PTR [eax], 39	; 00000027H
  00013	57		 push	 edi
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	81 78 f8 fa fa
	fa fa		 cmp	 DWORD PTR [eax-8], -84215046 ; fafafafaH
  0001d	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  00020	74 44		 je	 SHORT $LN6@Adjust_man
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002c	6a 00		 push	 0
  0002e	6a 7a		 push	 122			; 0000007aH
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00035	6a 02		 push	 2
  00037	ff d1		 call	 ecx
  00039	83 c4 18	 add	 esp, 24			; 00000018H
  0003c	83 f8 01	 cmp	 eax, 1
  0003f	75 01		 jne	 SHORT $LN19@Adjust_man
  00041	cc		 int	 3
$LN19@Adjust_man:
  00042	6a 00		 push	 0
  00044	6a 7a		 push	 122			; 0000007aH
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005b	8b 06		 mov	 eax, DWORD PTR [esi]
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
$LN6@Adjust_man:

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00066	2b c7		 sub	 eax, edi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00068	83 f8 08	 cmp	 eax, 8
  0006b	72 05		 jb	 SHORT $LN13@Adjust_man
  0006d	83 f8 27	 cmp	 eax, 39			; 00000027H
  00070	76 42		 jbe	 SHORT $LN22@Adjust_man
$LN13@Adjust_man:
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0007c	6a 00		 push	 0
  0007e	68 84 00 00 00	 push	 132			; 00000084H
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00088	6a 02		 push	 2
  0008a	ff d1		 call	 ecx
  0008c	83 c4 18	 add	 esp, 24			; 00000018H
  0008f	83 f8 01	 cmp	 eax, 1
  00092	75 01		 jne	 SHORT $LN20@Adjust_man
  00094	cc		 int	 3
$LN20@Adjust_man:
  00095	6a 00		 push	 0
  00097	68 84 00 00 00	 push	 132			; 00000084H
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b1	83 c4 14	 add	 esp, 20			; 00000014H
$LN22@Adjust_man:

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);
; 134  : 	}

  000b4	89 3e		 mov	 DWORD PTR [esi], edi
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 		}

  00003	5d		 pop	 ebp

; 52   : 		return (::operator new(_Bytes));

  00004	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 37   : 	{	// gets the size of _Count copies of a type with size 1

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	return (_Count);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 39   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 617  : 		return (INT_MAX);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 618  : 		}

  00005	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 302  : 		{	// copy construct
; 303  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@XZ
_TEXT	SEGMENT
??0?$tuple@$$V@std@@QAE@XZ PROC				; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 298  : 		{	// default construct
; 299  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$tuple@$$V@std@@QAE@XZ ENDP				; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0_Iterator_base12_compatible@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12_compatible@std@@QAE@XZ PROC		; std::_Iterator_base12_compatible::_Iterator_base12_compatible, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Iterator_base12_compatible@std@@QAE@XZ ENDP		; std::_Iterator_base12_compatible::_Iterator_base12_compatible
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 191  : 		{	// cut ties with parent

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 192  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 193  : 		if (_Myproxy != nullptr)

  00004	8b 3e		 mov	 edi, DWORD PTR [esi]
  00006	85 ff		 test	 edi, edi
  00008	74 73		 je	 SHORT $LN10@Orphan_me

; 194  : 			{	// adopted, remove self from list
; 195  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 196  : 			while (*_Pnext != nullptr && *_Pnext != this)

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000d	83 c7 04	 add	 edi, 4
  00010	85 c0		 test	 eax, eax
  00012	74 18		 je	 SHORT $LN21@Orphan_me
  00014	8b c8		 mov	 ecx, eax
$LL2@Orphan_me:
  00016	8b c1		 mov	 eax, ecx
  00018	3b ce		 cmp	 ecx, esi
  0001a	74 0c		 je	 SHORT $LN6@Orphan_me
  0001c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 197  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  0001f	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00022	8b c8		 mov	 ecx, eax
  00024	85 c0		 test	 eax, eax
  00026	75 ee		 jne	 SHORT $LL2@Orphan_me
$LN6@Orphan_me:

; 198  : 
; 199  : 			_STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

  00028	85 c0		 test	 eax, eax
  0002a	75 46		 jne	 SHORT $LN8@Orphan_me
$LN21@Orphan_me:
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00036	6a 00		 push	 0
  00038	68 c7 00 00 00	 push	 199			; 000000c7H
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00042	6a 02		 push	 2
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0004a	83 c4 18	 add	 esp, 24			; 00000018H
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 01		 jne	 SHORT $LN14@Orphan_me
  00052	cc		 int	 3
$LN14@Orphan_me:
  00053	6a 00		 push	 0
  00055	68 c7 00 00 00	 push	 199			; 000000c7H
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006f	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@Orphan_me:

; 200  : 			*_Pnext = _Mynextiter;

  00072	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00075	89 07		 mov	 DWORD PTR [edi], eax

; 201  : 			_Myproxy = nullptr;

  00077	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN10@Orphan_me:

; 202  : 			}
; 203  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 204  : 		}

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	c3		 ret	 0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 01		 jne	 SHORT $LN3@Getcont

; 183  : 		}

  00006	c3		 ret	 0
$LN3@Getcont:

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  00007	8b 00		 mov	 eax, DWORD PTR [eax]

; 183  : 		}

  00009	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lock$3 = 8						; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 147  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 148  : 		if (_Parent == nullptr)

  00027	8b 7d 08	 mov	 edi, DWORD PTR __Parent$[ebp]
  0002a	85 ff		 test	 edi, edi
  0002c	75 17		 jne	 SHORT $LN2@Adopt

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

  0002e	6a 03		 push	 3
  00030	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 152  : 			_Orphan_me();

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

  00040	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$3[ebp]

; 155  : 		else

  00043	eb 26		 jmp	 SHORT $LN7@Adopt
$LN2@Adopt:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  00045	8b 3f		 mov	 edi, DWORD PTR [edi]

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

  00047	39 3e		 cmp	 DWORD PTR [esi], edi
  00049	74 26		 je	 SHORT $LN4@Adopt

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

  0004b	6a 03		 push	 3
  0004d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 163  : 				_Orphan_me();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  0005d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 165  : 				_Parent_proxy->_Myfirstiter = this;
; 166  : 				_Myproxy = _Parent_proxy;
; 167  : 				}

  00060	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00063	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00066	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00069	89 3e		 mov	 DWORD PTR [esi], edi
$LN7@Adopt:

; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;
; 171  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 172  : 			}
; 173  : 		}

  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN4@Adopt:
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 139  : 		{	// destroy the iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 140  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  00026	6a 03		 push	 3
  00028	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  00038	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00041	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00044	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004b	59		 pop	 ecx
  0004c	5e		 pop	 esi
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 119  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00025	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	39 06		 cmp	 DWORD PTR [esi], eax
  0002c	74 3a		 je	 SHORT $LN6@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)

  0002e	85 c0		 test	 eax, eax
  00030	75 2f		 jne	 SHORT $LN3@operator

; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);

  00032	6a 03		 push	 3
  00034	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 126  : 				_Orphan_me();

  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}

  00044	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ

; 132  : 				}
; 133  : 			}
; 134  : 
; 135  : 		return (*this);
; 136  : 		}

  0004d	8b c6		 mov	 eax, esi
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN3@operator:

; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  00061	ff 30		 push	 DWORD PTR [eax]
  00063	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN6@operator:

; 132  : 				}
; 133  : 			}
; 134  : 
; 135  : 		return (*this);
; 136  : 		}

  00068	8b c6		 mov	 eax, esi
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Iterator_base12@std@@QAE@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 120  : 		if (_Myproxy != _Right._Myproxy)

  00032	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	85 c0		 test	 eax, eax
  00039	74 07		 je	 SHORT $LN9@Iterator_b

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)
; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);
; 126  : 				_Orphan_me();
; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}
; 129  : 			else
; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0003b	ff 30		 push	 DWORD PTR [eax]
  0003d	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN9@Iterator_b:

; 115  : 		*this = _Right;
; 116  : 		}

  00042	8b c6		 mov	 eax, esi
  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	5e		 pop	 esi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0_Iterator_base12@std@@QAE@ABU01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Iterator_base12@std@@QAE@ABU01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 110  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Lock$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 229  : 	{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 230  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

  00027	6a 03		 push	 3
  00029	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;
; 235  : 	_Myproxy = _Right._Myproxy;

  00032	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00035	8b 17		 mov	 edx, DWORD PTR [edi]
  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	89 07		 mov	 DWORD PTR [edi], eax

; 236  : 	_Right._Myproxy = _Temp;

  0003b	89 16		 mov	 DWORD PTR [esi], edx

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

  0003d	8b 07		 mov	 eax, DWORD PTR [edi]
  0003f	85 c0		 test	 eax, eax
  00041	74 04		 je	 SHORT $LN2@Swap_all

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  00043	89 38		 mov	 DWORD PTR [eax], edi
  00045	8b 16		 mov	 edx, DWORD PTR [esi]
$LN2@Swap_all:

; 240  : 	if (_Right._Myproxy != nullptr)

  00047	85 d2		 test	 edx, edx
  00049	74 02		 je	 SHORT $LN3@Swap_all

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  0004b	89 32		 mov	 DWORD PTR [edx], esi
$LN3@Swap_all:

; 242  : 	}

  0004d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != nullptr)

  00026	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00029	74 3d		 je	 SHORT $LN5@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

  0002b	6a 03		 push	 3
  0002d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00036	8b 06		 mov	 eax, DWORD PTR [esi]

; 221  : 			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)

  00038	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003c	74 1a		 je	 SHORT $LN3@Orphan_all
  0003e	66 90		 npad	 2
$LL4@Orphan_all:

; 222  : 			(*_Pnext)->_Myproxy = nullptr;

  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00052	85 c9		 test	 ecx, ecx
  00054	75 ea		 jne	 SHORT $LL4@Orphan_all
  00056	8b 06		 mov	 eax, DWORD PTR [esi]
$LN3@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = nullptr;
; 224  : 		}

  00058	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0005b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN5@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 82   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		: _Mycont(nullptr), _Myfirstiter(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 70   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 541  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 542  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 535  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]

; 536  : 		return (_Meta != eof() ? _Meta : !eof());

  00006	33 c9		 xor	 ecx, ecx
  00008	8b 00		 mov	 eax, DWORD PTR [eax]
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	0f 44 c1	 cmove	 eax, ecx

; 537  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 530  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 531  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 532  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 525  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 527  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 520  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  : 		return (static_cast<char>(_Meta));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 522  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 510  : 		{	// test for element equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 511  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 512  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 505  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 506  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000b	88 08		 mov	 BYTE PTR [eax], cl

; 507  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADQADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADQADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 500  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00003	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00006	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 502  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADQADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 494  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  : 		}

  00003	5d		 pop	 ebp

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 470  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 		}

  00003	5d		 pop	 ebp

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 460  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  : #if _HAS_CXX17
; 462  : 		return (__builtin_strlen(_First));
; 463  : #else /* _HAS_CXX17 */
; 464  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@length:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@length
  00017	2b c2		 sub	 eax, edx

; 465  : #endif /* _HAS_CXX17 */
; 466  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHQBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHQBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 451  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 452  : #if _HAS_CXX17
; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));
; 454  : #else /* _HAS_CXX17 */
; 455  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __First2$[ebp]
  0000d	83 e9 04	 sub	 ecx, 4
  00010	72 11		 jb	 SHORT $LN5@compare
$LL6@compare:
  00012	8b 02		 mov	 eax, DWORD PTR [edx]
  00014	3b 06		 cmp	 eax, DWORD PTR [esi]
  00016	75 10		 jne	 SHORT $LN4@compare
  00018	83 c2 04	 add	 edx, 4
  0001b	83 c6 04	 add	 esi, 4
  0001e	83 e9 04	 sub	 ecx, 4
  00021	73 ef		 jae	 SHORT $LL6@compare
$LN5@compare:
  00023	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00026	74 35		 je	 SHORT $LN3@compare
$LN4@compare:
  00028	8a 02		 mov	 al, BYTE PTR [edx]
  0002a	3a 06		 cmp	 al, BYTE PTR [esi]
  0002c	75 27		 jne	 SHORT $LN7@compare
  0002e	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  00031	74 2a		 je	 SHORT $LN3@compare
  00033	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00036	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00039	75 1a		 jne	 SHORT $LN7@compare
  0003b	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0003e	74 1d		 je	 SHORT $LN3@compare
  00040	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00043	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00046	75 0d		 jne	 SHORT $LN7@compare
  00048	83 f9 ff	 cmp	 ecx, -1
  0004b	74 10		 je	 SHORT $LN3@compare
  0004d	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  00050	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00053	74 08		 je	 SHORT $LN3@compare
$LN7@compare:
  00055	1b c0		 sbb	 eax, eax
  00057	83 c8 01	 or	 eax, 1
  0005a	5e		 pop	 esi

; 456  : #endif /* _HAS_CXX17 */
; 457  : 		}

  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN3@compare:

; 452  : #if _HAS_CXX17
; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));
; 454  : #else /* _HAS_CXX17 */
; 455  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  0005d	33 c0		 xor	 eax, eax
  0005f	5e		 pop	 esi

; 456  : #endif /* _HAS_CXX17 */
; 457  : 		}

  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHQBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  :         (void)_Size;
; 187  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\net\http\httpcontext.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
