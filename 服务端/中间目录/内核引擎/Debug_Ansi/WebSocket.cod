; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\内核引擎\zlreactor\WebSocket.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?ntoh16@ws@net@zl@@YAGG@Z			; zl::net::ws::ntoh16
PUBLIC	?hton16@ws@net@zl@@YAGG@Z			; zl::net::ws::hton16
PUBLIC	?ntoh64@ws@net@zl@@YA_K_K@Z			; zl::net::ws::ntoh64
PUBLIC	?hton64@ws@net@zl@@YA_K_K@Z			; zl::net::ws::hton64
PUBLIC	?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z ; zl::net::ws::makeHandshakeResponse
PUBLIC	?decodeFrame@ws@net@zl@@YA?AW4WsFrameType@123@PBDHPADPAH2@Z ; zl::net::ws::decodeFrame
PUBLIC	?encodeFrame@ws@net@zl@@YAHW4WsFrameType@123@PBDHPADH@Z ; zl::net::ws::encodeFrame
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0CF@DPPCDNJI@258EAFA5?9E914?947DA?995CA?9C5AB0DC@ ; `string'
PUBLIC	??_C@_0CD@LIKLDGFH@HTTP?11?41?5101?5Switching?5Protocol@ ; `string'
PUBLIC	??_C@_0BF@GNLHKLOJ@Upgrade?3?5WebSocket?$AN?6@	; `string'
PUBLIC	??_C@_0BG@FHMIDDAA@Connection?3?5Upgrade?$AN?6@	; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_0BI@BHOALOBM@Sec?9WebSocket?9Protocol?3@	; `string'
PUBLIC	??_C@_0BH@IMEJNJMG@Sec?9WebSocket?9Accept?3?5@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??0SHA1@util@zl@@QAE@XZ:PROC			; zl::util::SHA1::SHA1
EXTRN	??1SHA1@util@zl@@QAE@XZ:PROC			; zl::util::SHA1::~SHA1
EXTRN	?update@SHA1@util@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; zl::util::SHA1::update
EXTRN	?final@SHA1@util@zl@@QAEXPAX@Z:PROC		; zl::util::SHA1::final
EXTRN	?base64Encode@util@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z:PROC ; zl::util::base64Encode
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IMEJNJMG@Sec?9WebSocket?9Accept?3?5@
CONST	SEGMENT
??_C@_0BH@IMEJNJMG@Sec?9WebSocket?9Accept?3?5@ DB 'Sec-WebSocket-Accept: '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BHOALOBM@Sec?9WebSocket?9Protocol?3@
CONST	SEGMENT
??_C@_0BI@BHOALOBM@Sec?9WebSocket?9Protocol?3@ DB 'Sec-WebSocket-Protocol'
	DB	':', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FHMIDDAA@Connection?3?5Upgrade?$AN?6@
CONST	SEGMENT
??_C@_0BG@FHMIDDAA@Connection?3?5Upgrade?$AN?6@ DB 'Connection: Upgrade', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GNLHKLOJ@Upgrade?3?5WebSocket?$AN?6@
CONST	SEGMENT
??_C@_0BF@GNLHKLOJ@Upgrade?3?5WebSocket?$AN?6@ DB 'Upgrade: WebSocket', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LIKLDGFH@HTTP?11?41?5101?5Switching?5Protocol@
CONST	SEGMENT
??_C@_0CD@LIKLDGFH@HTTP?11?41?5101?5Switching?5Protocol@ DB 'HTTP/1.1 101'
	DB	' Switching Protocols', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DPPCDNJI@258EAFA5?9E914?947DA?995CA?9C5AB0DC@
CONST	SEGMENT
??_C@_0CF@DPPCDNJI@258EAFA5?9E914?947DA?995CA?9C5AB0DC@ DB '258EAFA5-E914'
	DB	'-47DA-95CA-C5AB0DC85B11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z$0
	DD	00H
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$9
	DD	01H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$2
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$4
	DD	06H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$5
	DD	07H
	DD	FLAT:___std_terminate
	DD	07H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$7
	DD	09H
	DD	FLAT:___std_terminate
	DD	09H
	DD	FLAT:__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
__New_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Size_increase$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00018	2b c3		 sub	 eax, ebx
  0001a	89 5d f8	 mov	 DWORD PTR __Old_size$1$[ebp], ebx
  0001d	3b c2		 cmp	 eax, edx
  0001f	0f 82 98 00 00
	00		 jb	 $LN80@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00025	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00028	03 d3		 add	 edx, ebx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002a	8b f2		 mov	 esi, edx

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  0002c	89 55 fc	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002f	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00032	89 45 08	 mov	 DWORD PTR __Old$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00035	3b f1		 cmp	 esi, ecx

; 3870 : 		if (_Masked > _Max)

  00037	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00039	8b f1		 mov	 esi, ecx
  0003b	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003d	8b d0		 mov	 edx, eax
  0003f	d1 ea		 shr	 edx, 1
  00041	2b ca		 sub	 ecx, edx
  00043	3b c1		 cmp	 eax, ecx
  00045	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00047	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0004c	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004e	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00050	3b f0		 cmp	 esi, eax
  00052	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00055	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0005e	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3933 : 		_My_data._Orphan_all();

  00061	8b cf		 mov	 ecx, edi
  00063	8b d8		 mov	 ebx, eax
  00065	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  0006d	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  00070	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  00073	40		 inc	 eax
  00074	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00077	83 7d 08 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  0007b	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0007e	50		 push	 eax
  0007f	72 25		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00081	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00083	56		 push	 esi
  00084	53		 push	 ebx
  00085	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0008a	8b 45 08	 mov	 eax, DWORD PTR __Old$1$[ebp]
  0008d	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008e	50		 push	 eax
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00095	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  00098	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3950 : 		return (*this);

  0009b	8b c7		 mov	 eax, edi
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx

; 3951 : 		}

  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a6	56		 push	 esi
  000a7	53		 push	 ebx
  000a8	e8 00 00 00 00	 call	 _memcpy
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  000b0	89 1e		 mov	 DWORD PTR [esi], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  000b2	8b c7		 mov	 eax, edi
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 3951 : 		}

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
$LN80@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  000bd	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN78@Reallocate:
  000c2	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBEXQADQBDI@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBEXQADQBDI@Z PROC ; <lambda_67d87d4aa1269033985980465fd1d824>::operator(), COMDAT
; _this$ = ecx

; 3352 : 				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3353 : 				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00006	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR __Old_ptr$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __New_ptr$[ebp]
  0000e	e8 00 00 00 00	 call	 _memcpy
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3354 : 				});

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBEXQADQBDI@Z ENDP ; <lambda_67d87d4aa1269033985980465fd1d824>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]

; 94   : 	if (_Block_size <= _Bytes)

  00006	83 ca ff	 or	 edx, -1
  00009	56		 push	 esi
  0000a	8d 48 27	 lea	 ecx, DWORD PTR [eax+39]
  0000d	3b c8		 cmp	 ecx, eax
  0000f	0f 46 ca	 cmovbe	 ecx, edx

; 52   : 		return (::operator new(_Bytes));

  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);
; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00018	8b f0		 mov	 esi, eax

; 52   : 		return (::operator new(_Bytes));

  0001a	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0001d	85 f6		 test	 esi, esi
  0001f	75 3f		 jne	 SHORT $LN6@Allocate_m
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002b	50		 push	 eax
  0002c	6a 65		 push	 101			; 00000065H
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00033	6a 02		 push	 2
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	83 f8 01	 cmp	 eax, 1
  00041	75 01		 jne	 SHORT $LN12@Allocate_m
  00043	cc		 int	 3
$LN12@Allocate_m:
  00044	6a 00		 push	 0
  00046	6a 65		 push	 101			; 00000065H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
$LN6@Allocate_m:

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00060	8d 46 27	 lea	 eax, DWORD PTR [esi+39]
  00063	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00066	89 70 fc	 mov	 DWORD PTR [eax-4], esi

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  00069	c7 40 f8 fa fa
	fa fa		 mov	 DWORD PTR [eax-8], -84215046 ; fafafafaH

; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);

  00070	5e		 pop	 esi

; 110  : 	}

  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1089 : 	_Left = _STD move(_Right);
; 1090 : 	}

  00000	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00008	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1785 : 		_Myres(0)

  0000f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]

; 26   : 	if (_Max_possible < _Count)

  00006	83 ca ff	 or	 edx, -1
  00009	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  0000f	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00016	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 987  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00003	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax
  0000d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00010	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1212 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	6a 08		 push	 8
  00005	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000d	83 c4 08	 add	 esp, 8

; 1213 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);
; 1214 : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00012	83 c4 08	 add	 esp, 8

; 874  : 		}

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 26   : 	if (_Max_possible < _Count)

  00006	83 ca ff	 or	 edx, -1
  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00015	0f 47 ca	 cmova	 ecx, edx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 998  : 		}

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Bytes$[ebp]
  00008	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0000e	0f 82 b8 00 00
	00		 jb	 $LN24@Deallocate

; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
  0001a	83 c6 27	 add	 esi, 39			; 00000027H
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00021	81 7f f8 fa fa
	fa fa		 cmp	 DWORD PTR [edi-8], -84215046 ; fafafafaH
  00028	8b 5f fc	 mov	 ebx, DWORD PTR [edi-4]
  0002b	74 42		 je	 SHORT $LN9@Deallocate
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00037	6a 00		 push	 0
  00039	6a 7a		 push	 122			; 0000007aH
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00040	6a 02		 push	 2
  00042	ff d1		 call	 ecx
  00044	83 c4 18	 add	 esp, 24			; 00000018H
  00047	83 f8 01	 cmp	 eax, 1
  0004a	75 01		 jne	 SHORT $LN22@Deallocate
  0004c	cc		 int	 3
$LN22@Deallocate:
  0004d	6a 00		 push	 0
  0004f	6a 7a		 push	 122			; 0000007aH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
$LN9@Deallocate:

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006f	2b fb		 sub	 edi, ebx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00071	83 ff 08	 cmp	 edi, 8
  00074	72 05		 jb	 SHORT $LN16@Deallocate
  00076	83 ff 27	 cmp	 edi, 39			; 00000027H
  00079	76 42		 jbe	 SHORT $LN15@Deallocate
$LN16@Deallocate:
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00085	6a 00		 push	 0
  00087	68 84 00 00 00	 push	 132			; 00000084H
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00091	6a 02		 push	 2
  00093	ff d1		 call	 ecx
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	83 f8 01	 cmp	 eax, 1
  0009b	75 01		 jne	 SHORT $LN23@Deallocate
  0009d	cc		 int	 3
$LN23@Deallocate:
  0009e	6a 00		 push	 0
  000a0	68 84 00 00 00	 push	 132			; 00000084H
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ba	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@Deallocate:
  000bd	5f		 pop	 edi

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  000be	56		 push	 esi
  000bf	53		 push	 ebx
  000c0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c5	83 c4 08	 add	 esp, 8
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx

; 208  : 	}

  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
$LN24@Deallocate:

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000cc	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  000cf	56		 push	 esi
  000d0	53		 push	 ebx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d6	83 c4 08	 add	 esp, 8
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx

; 208  : 	}

  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 6d		 jb	 SHORT $LN2@Allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0000e	8d 41 27	 lea	 eax, DWORD PTR [ecx+39]

; 94   : 	if (_Block_size <= _Bytes)

  00011	83 ca ff	 or	 edx, -1
  00014	3b c1		 cmp	 eax, ecx
  00016	56		 push	 esi
  00017	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00020	8b f0		 mov	 esi, eax

; 52   : 		return (::operator new(_Bytes));

  00022	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00025	85 f6		 test	 esi, esi
  00027	75 3f		 jne	 SHORT $LN10@Allocate
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	50		 push	 eax
  00034	6a 65		 push	 101			; 00000065H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	6a 02		 push	 2
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00043	83 c4 18	 add	 esp, 24			; 00000018H
  00046	83 f8 01	 cmp	 eax, 1
  00049	75 01		 jne	 SHORT $LN16@Allocate
  0004b	cc		 int	 3
$LN16@Allocate:
  0004c	6a 00		 push	 0
  0004e	6a 65		 push	 101			; 00000065H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00065	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@Allocate:

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00068	8d 46 27	 lea	 eax, DWORD PTR [esi+39]
  0006b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0006e	89 70 fc	 mov	 DWORD PTR [eax-4], esi

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  00071	c7 40 f8 fa fa
	fa fa		 mov	 DWORD PTR [eax-8], -84215046 ; fafafafaH

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00078	5e		 pop	 esi

; 194  : 	}

  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN2@Allocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN3@Allocate

; 52   : 		return (::operator new(_Bytes));

  0007f	89 4d 08	 mov	 DWORD PTR __Bytes$[ebp], ecx

; 194  : 	}

  00082	5d		 pop	 ebp

; 52   : 		return (::operator new(_Bytes));

  00083	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));
; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00088	33 c0		 xor	 eax, eax

; 194  : 	}

  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00003	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
tv418 = -12						; size = 4
__New_size$1$ = -12					; size = 4
tv419 = -8						; size = 4
__Old$1$ = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Size_increase$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00018	2b c3		 sub	 eax, ebx
  0001a	3b c2		 cmp	 eax, edx
  0001c	0f 82 d2 00 00
	00		 jb	 $LN88@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00022	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00025	03 d3		 add	 edx, ebx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00027	8b f2		 mov	 esi, edx

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00029	89 55 f4	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002c	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0002f	89 45 fc	 mov	 DWORD PTR __Old$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00032	3b f1		 cmp	 esi, ecx

; 3870 : 		if (_Masked > _Max)

  00034	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00036	8b f1		 mov	 esi, ecx
  00038	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003a	8b d0		 mov	 edx, eax
  0003c	d1 ea		 shr	 edx, 1
  0003e	2b ca		 sub	 ecx, edx
  00040	3b c1		 cmp	 eax, ecx
  00042	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00044	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00049	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004b	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004d	3b f0		 cmp	 esi, eax
  0004f	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00052	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0005b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0005e	89 45 08	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  00061	8b cf		 mov	 ecx, edi
  00063	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  00068	8b 45 f4	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  0006b	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0006e	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00071	89 77 18	 mov	 DWORD PTR [edi+24], esi
  00074	8d 77 04	 lea	 esi, DWORD PTR [edi+4]

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00077	53		 push	 ebx
  00078	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
  0007b	89 4d f8	 mov	 DWORD PTR tv419[ebp], ecx
  0007e	03 4d 14	 add	 ecx, DWORD PTR _<_Args_1>$[ebp]
  00081	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  00085	89 4d f4	 mov	 DWORD PTR tv418[ebp], ecx
  00088	72 3c		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  0008a	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0008c	56		 push	 esi
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _memcpy
  00093	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  00096	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00099	ff 75 f8	 push	 DWORD PTR tv419[ebp]
  0009c	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000a1	8b 45 f4	 mov	 eax, DWORD PTR tv418[ebp]
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000a7	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000aa	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	56		 push	 esi
  000ad	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000b2	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b5	83 c4 20	 add	 esp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000b8	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 3950 : 		return (*this);

  000bb	8b c7		 mov	 eax, edi
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx

; 3951 : 		}

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 10 00	 ret	 16			; 00000010H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c6	56		 push	 esi
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 _memcpy
  000cd	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000d0	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  000d3	ff 75 f8	 push	 DWORD PTR tv419[ebp]
  000d6	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000db	8b 45 f4	 mov	 eax, DWORD PTR tv418[ebp]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000de	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  000e1	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  000e4	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  000e7	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  000e9	8b c7		 mov	 eax, edi
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx

; 3951 : 		}

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 10 00	 ret	 16			; 00000010H
$LN88@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  000f4	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN86@Reallocate:
  000f9	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 7d 10	 mov	 edi, DWORD PTR __Old_size$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 0c	 push	 DWORD PTR __Old_ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00015	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00017	8b 75 18	 mov	 esi, DWORD PTR __Count$[ebp]
  0001a	56		 push	 esi
  0001b	ff 75 14	 push	 DWORD PTR __Ptr$[ebp]
  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _memcpy
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00027	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2587 : 			}, _Ptr, _Count));

  0002d	5d		 pop	 ebp
  0002e	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __New_size$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00012	0f 87 8b 00 00
	00		 ja	 $LN76@Reallocate

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00018	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0001b	8b f3		 mov	 esi, ebx
  0001d	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00020	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00023	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00029	76 07		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0002b	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00030	eb 1e		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00032	8b d1		 mov	 edx, ecx
  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	d1 ea		 shr	 edx, 1
  0003b	2b c2		 sub	 eax, edx
  0003d	3b c8		 cmp	 ecx, eax
  0003f	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00041	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00046	eb 08		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00048	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004b	3b f0		 cmp	 esi, eax
  0004d	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00050	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00059	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0005c	89 45 08	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3899 : 		_My_data._Orphan_all();

  0005f	8b cf		 mov	 ecx, edi
  00061	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00066	53		 push	 ebx
  00067	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  0006a	89 77 18	 mov	 DWORD PTR [edi+24], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0006d	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$1$[ebp]
  00070	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  00071	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00074	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00079	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0007f	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00083	83 f8 10	 cmp	 eax, 16			; 00000010H
  00086	72 0d		 jb	 SHORT $LN3@Reallocate

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  00088	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00089	50		 push	 eax
  0008a	ff 77 04	 push	 DWORD PTR [edi+4]
  0008d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00092	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3913 : 		return (*this);

  00095	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00098	8b c7		 mov	 eax, edi
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 3914 : 		}

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN76@Reallocate:

; 3890 : 			{
; 3891 : 			_Xlen();	// result too long

  000a3	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN74@Reallocate:
  000a8	cc		 int	 3
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00018	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2671 : 			}, _Ptr));

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 32   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000d	0f 42 c1	 cmovb	 eax, ecx

; 34   : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00008	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1785 : 		_Myres(0)

  0000f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1100 : 	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
; 1101 : 	_Pocma(_Left, _Right, _Tag);
; 1102 : 	}

  00000	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1943 : 		{	// construct allocator from _Al

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0000b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00012	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001e	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00020	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 30		 mov	 DWORD PTR [eax], esi

; 1944 : 		_Alloc_proxy();
; 1945 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	c2 04 00	 ret	 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 1055 : 	return (false);

  00000	32 c0		 xor	 al, al

; 1056 : 	}

  00002	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 1
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4178 : 	{	// return string + NTCTS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00024	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00027	8b c2		 mov	 eax, edx
  00029	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0002c	0f 1f 40 00	 npad	 4
$LL83@operator:
  00030	8a 08		 mov	 cl, BYTE PTR [eax]
  00032	40		 inc	 eax
  00033	84 c9		 test	 cl, cl
  00035	75 f9		 jne	 SHORT $LL83@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00037	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0003a	2b c6		 sub	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0003c	50		 push	 eax
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00043	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00045	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00048	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2268 : 		{	// construct by moving _Right

  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00051	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00057	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1785 : 		_Myres(0)

  0005e	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00065	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0006a	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0006c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0006f	c6 45 08 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00073	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00079	ff 75 08	 push	 DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0007c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00083	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00085	56		 push	 esi

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00086	89 39		 mov	 DWORD PTR [ecx], edi

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 4179 : 	return (_STD move(_Left.append(_Right)));

  0008f	8b c7		 mov	 eax, edi

; 4180 : 	}

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z
_TEXT	SEGMENT
__New_size$1$ = -28					; size = 4
$T2 = -24						; size = 4
__Old_size$1$ = -20					; size = 4
__New_ptr$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4063 : 	{	// return NTCTS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0002f	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00032	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2142 : 		{	// construct empty string

  00034	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00041	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1785 : 		_Myres(0)

  00048	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0004f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00054	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00056	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0005f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00066	8b 07		 mov	 eax, DWORD PTR [edi]
  00068	89 38		 mov	 DWORD PTR [eax], edi

; 3976 : 		_My_data._Mysize = 0;

  0006a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00071	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00078	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0

; 464  : 		return (_CSTD strlen(_First));

  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 4070 : 	return (_Ans);

  0007f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00086	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0008d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL197@operator:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL197@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 4067 : 	_Ans.reserve(_Convert_size<_Size_type>(_Traits::length(_Left) + _Right.size()));

  00097	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0009a	2b ca		 sub	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3338 : 		if (_My_data._Mysize > _Newcap)

  0009c	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  0009f	89 75 ec	 mov	 DWORD PTR __Old_size$1$[ebp], esi

; 4067 : 	_Ans.reserve(_Convert_size<_Size_type>(_Traits::length(_Left) + _Right.size()));

  000a2	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  000a5	03 d1		 add	 edx, ecx
  000a7	89 55 e4	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 3338 : 		if (_My_data._Mysize > _Newcap)

  000aa	3b f2		 cmp	 esi, edx
  000ac	0f 87 d4 00 00
	00		 ja	 $LN87@operator

; 3339 : 			{	// requested capacity is not large enough for current size, ignore
; 3340 : 			return;	// nothing to do
; 3341 : 			}
; 3342 : 
; 3343 : 		if (_My_data._Myres == _Newcap)

  000b2	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  000b5	3b da		 cmp	 ebx, edx
  000b7	0f 84 c6 00 00
	00		 je	 $LN201@operator

; 3344 : 			{	// we're already at the requested capacity
; 3345 : 			return;	// nothing to do
; 3346 : 			}
; 3347 : 
; 3348 : 		if (_My_data._Myres < _Newcap)

  000bd	0f 83 af 00 00
	00		 jae	 $LN86@operator

; 3349 : 			{	// reallocate to grow
; 3350 : 			const size_type _Old_size = _My_data._Mysize;
; 3351 : 			_Reallocate_grow_by(_Newcap - _Old_size,

  000c3	8b ca		 mov	 ecx, edx

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  000c5	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3351 : 			_Reallocate_grow_by(_Newcap - _Old_size,

  000ca	2b ce		 sub	 ecx, esi

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  000cc	2b c6		 sub	 eax, esi
  000ce	3b c1		 cmp	 eax, ecx
  000d0	0f 82 f6 00 00
	00		 jb	 $LN205@operator

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  000d6	8b f2		 mov	 esi, edx
  000d8	83 ce 0f	 or	 esi, 15			; 0000000fH
  000db	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  000e1	76 07		 jbe	 SHORT $LN117@operator

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  000e3	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  000e8	eb 1e		 jmp	 SHORT $LN116@operator
$LN117@operator:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  000ea	8b cb		 mov	 ecx, ebx
  000ec	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000f1	d1 e9		 shr	 ecx, 1
  000f3	2b c1		 sub	 eax, ecx
  000f5	3b d8		 cmp	 ebx, eax
  000f7	76 07		 jbe	 SHORT $LN118@operator

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  000f9	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  000fe	eb 08		 jmp	 SHORT $LN116@operator
$LN118@operator:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00100	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00103	3b f0		 cmp	 esi, eax
  00105	0f 42 f0	 cmovb	 esi, eax
$LN116@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00108	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00111	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00114	89 45 f0	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  00117	8b cf		 mov	 ecx, edi
  00119	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);
; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  0011e	8b 45 ec	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  00121	8b 4d e4	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
  00124	40		 inc	 eax
  00125	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  00128	89 77 18	 mov	 DWORD PTR [edi+24], esi
  0012b	50		 push	 eax
  0012c	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0012f	72 27		 jb	 SHORT $LN95@operator

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00131	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00134	56		 push	 esi
  00135	ff 75 f0	 push	 DWORD PTR __New_ptr$1$[ebp]
  00138	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0013d	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00140	50		 push	 eax
  00141	56		 push	 esi
  00142	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  00147	8b 45 f0	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014a	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  0014d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 3356 : 			_My_data._Mysize = _Old_size;

  00150	8b 45 ec	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  00153	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 3357 : 			return;

  00156	eb 2b		 jmp	 SHORT $LN201@operator
$LN95@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00158	8b 5d f0	 mov	 ebx, DWORD PTR __New_ptr$1$[ebp]
  0015b	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0015e	56		 push	 esi
  0015f	53		 push	 ebx
  00160	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  00165	8b 45 ec	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00168	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0016b	89 1e		 mov	 DWORD PTR [esi], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  0016d	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 3357 : 			return;

  00170	eb 11		 jmp	 SHORT $LN201@operator
$LN86@operator:

; 3358 : 			}
; 3359 : 
; 3360 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  00172	83 fa 10	 cmp	 edx, 16			; 00000010H
  00175	73 0c		 jae	 SHORT $LN201@operator

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00177	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 3360 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  0017a	72 07		 jb	 SHORT $LN201@operator

; 3361 : 			{	// deallocate everything; switch back to "small" mode
; 3362 : 			_Become_small();

  0017c	8b cf		 mov	 ecx, edi
  0017e	e8 00 00 00 00	 call	 ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
$LN201@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00183	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
$LN87@operator:
  00186	8b 75 0c	 mov	 esi, DWORD PTR __Left$[ebp]
  00189	8b ce		 mov	 ecx, esi
  0018b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0018e	66 90		 npad	 2
$LL198@operator:
  00190	8a 01		 mov	 al, BYTE PTR [ecx]
  00192	41		 inc	 ecx
  00193	84 c0		 test	 al, al
  00195	75 f9		 jne	 SHORT $LL198@operator
  00197	2b ca		 sub	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00199	51		 push	 ecx
  0019a	56		 push	 esi
  0019b	8b cf		 mov	 ecx, edi
  0019d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001a2	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  001a6	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]

; 1815 : 		if (_Large_string_engaged())

  001a9	72 02		 jb	 SHORT $LN191@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  001ab	8b 00		 mov	 eax, DWORD PTR [eax]
$LN191@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  001ad	ff 73 14	 push	 DWORD PTR [ebx+20]
  001b0	8b cf		 mov	 ecx, edi
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 4070 : 	return (_Ans);

  001b8	8b c7		 mov	 eax, edi

; 4071 : 	}

  001ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c4	59		 pop	 ecx
  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi
  001c7	5b		 pop	 ebx
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
$LN205@operator:

; 3925 : 			_Xlen();	// result too long

  001cc	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN203@operator:
  001d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@operator
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@operator:
  00018	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?encodeFrame@ws@net@zl@@YAHW4WsFrameType@123@PBDHPADH@Z
_TEXT	SEGMENT
_frame_type$ = 8					; size = 4
_msg$ = 12						; size = 4
_msg_length$ = 16					; size = 4
_outbuf$ = 20						; size = 4
_bufsize$ = 24						; size = 4
?encodeFrame@ws@net@zl@@YAHW4WsFrameType@123@PBDHPADH@Z PROC ; zl::net::ws::encodeFrame, COMDAT

; 168  : int encodeFrame(WsFrameType frame_type, const char* msg, int msg_length, char* outbuf, int bufsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 14	 mov	 ecx, DWORD PTR _outbuf$[ebp]

; 169  :     //std::cout << "makeFrame : " <<  frame_type << "\t" << msg << "\t" << msg_length << "\n";
; 170  :     int pos = 0;
; 171  :     int size = msg_length;
; 172  :     outbuf[pos++] = (unsigned char)frame_type; // text frame

  00006	8a 45 08	 mov	 al, BYTE PTR _frame_type$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 10	 mov	 ebx, DWORD PTR _msg_length$[ebp]
  0000d	88 01		 mov	 BYTE PTR [ecx], al
  0000f	56		 push	 esi

; 173  :     if (size <= PAYLOAD_SIZE_BASIC) { // 125

  00010	83 fb 7d	 cmp	 ebx, 125		; 0000007dH
  00013	7f 0a		 jg	 SHORT $LN8@encodeFram

; 174  :         outbuf[pos++] = size;

  00015	88 59 01	 mov	 BYTE PTR [ecx+1], bl
  00018	be 02 00 00 00	 mov	 esi, 2
  0001d	eb 44		 jmp	 SHORT $LN20@encodeFram
$LN8@encodeFram:

; 175  :     } else if (size <= PAYLOAD_SIZE_EXTENDED) { // 65535

  0001f	8b d3		 mov	 edx, ebx
  00021	c1 fa 08	 sar	 edx, 8
  00024	81 fb ff ff 00
	00		 cmp	 ebx, 65535		; 0000ffffH
  0002a	7f 11		 jg	 SHORT $LN10@encodeFram

; 176  :         outbuf[pos++] = 126; //16 bit length

  0002c	c6 41 01 7e	 mov	 BYTE PTR [ecx+1], 126	; 0000007eH

; 177  :         outbuf[pos++] = (size >> 8) & 0xFF; // rightmost first
; 178  :         outbuf[pos++] = size & 0xFF;

  00030	be 04 00 00 00	 mov	 esi, 4
  00035	88 51 02	 mov	 BYTE PTR [ecx+2], dl
  00038	88 59 03	 mov	 BYTE PTR [ecx+3], bl

; 179  :     } else { // >2^16-1

  0003b	eb 26		 jmp	 SHORT $LN20@encodeFram
$LN10@encodeFram:

; 180  :         outbuf[pos++] = 127; //64 bit length

  0003d	c6 41 01 7f	 mov	 BYTE PTR [ecx+1], 127	; 0000007fH

; 181  : 
; 182  :         // write 8 bytes length (significant first)
; 183  :         // since msg_length is int it can be no longer than 4 bytes = 2^32-1
; 184  :         // padd zeroes for the first 4 bytes
; 185  :         for (int i = 3; i >= 0; i--) {
; 186  :             outbuf[pos++] = 0;
; 187  :         }
; 188  :         // write the actual 32bit msg_length in the next 4 bytes
; 189  :         for (int i = 3; i >= 0; i--) {
; 190  :             outbuf[pos++] = ((size >> 8 * i) & 0xFF);

  00041	8b c3		 mov	 eax, ebx
  00043	c7 41 02 00 00
	00 00		 mov	 DWORD PTR [ecx+2], 0
  0004a	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  0004f	c1 f8 18	 sar	 eax, 24			; 00000018H
  00052	88 41 06	 mov	 BYTE PTR [ecx+6], al
  00055	8b c3		 mov	 eax, ebx
  00057	c1 f8 10	 sar	 eax, 16			; 00000010H
  0005a	88 41 07	 mov	 BYTE PTR [ecx+7], al
  0005d	88 51 08	 mov	 BYTE PTR [ecx+8], dl
  00060	88 59 09	 mov	 BYTE PTR [ecx+9], bl
$LN20@encodeFram:

; 191  :         }
; 192  :     }
; 193  :     //fix by xujialong 数据长度检查
; 194  :     if (size > 0 &&(size+pos)<bufsize) {

  00063	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00066	85 db		 test	 ebx, ebx
  00068	7e 18		 jle	 SHORT $LN12@encodeFram
  0006a	3b 45 18	 cmp	 eax, DWORD PTR _bufsize$[ebp]
  0006d	7d 10		 jge	 SHORT $LN27@encodeFram

; 195  :         memcpy((void*)(outbuf + pos), msg, size);

  0006f	53		 push	 ebx
  00070	ff 75 0c	 push	 DWORD PTR _msg$[ebp]
  00073	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@encodeFram:

; 196  :     }
; 197  :     return (size + pos);
; 198  : }

  0007f	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
$LN12@encodeFram:
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?encodeFrame@ws@net@zl@@YAHW4WsFrameType@123@PBDHPADH@Z ENDP ; zl::net::ws::encodeFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?decodeFrame@ws@net@zl@@YA?AW4WsFrameType@123@PBDHPADPAH2@Z
_TEXT	SEGMENT
tv522 = -8						; size = 4
tv531 = -2						; size = 1
tv529 = -1						; size = 1
_inbuf$ = 8						; size = 4
_mask$ = 12						; size = 4
_inlength$ = 12						; size = 4
_outbuf$ = 16						; size = 4
_outlen$ = 20						; size = 4
_frameSize$ = 24					; size = 4
?decodeFrame@ws@net@zl@@YA?AW4WsFrameType@123@PBDHPADPAH2@Z PROC ; zl::net::ws::decodeFrame, COMDAT

; 96   : WsFrameType decodeFrame(const char* inbuf, int inlength, char* outbuf, int* outlen, int* frameSize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 97   :     if (inlength < 3) return WS_INCOMPLETE_FRAME;

  00006	83 7d 0c 03	 cmp	 DWORD PTR _inlength$[ebp], 3
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	0f 8c 5e 01 00
	00		 jl	 $LN33@decodeFram

; 98   : 
; 99   :     const unsigned char* inp = (const unsigned char*)(inbuf);
; 100  : 
; 101  :     unsigned char msg_opcode = inp[0] & 0x0F;

  00013	8b 7d 08	 mov	 edi, DWORD PTR _inbuf$[ebp]
  00016	8a 3f		 mov	 bh, BYTE PTR [edi]

; 102  :     unsigned char msg_fin = (inp[0] >> 7) & 0x01;
; 103  :     unsigned char msg_masked = (inp[1] >> 7) & 0x01;

  00018	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  0001b	8a df		 mov	 bl, bh
  0001d	8a c8		 mov	 cl, al
  0001f	88 45 fe	 mov	 BYTE PTR tv531[ebp], al
  00022	c0 e9 07	 shr	 cl, 7
  00025	80 e3 0f	 and	 bl, 15			; 0000000fH
  00028	88 4d ff	 mov	 BYTE PTR tv529[ebp], cl

; 104  : 
; 105  :     if (msg_fin == 0) {

  0002b	84 ff		 test	 bh, bh
  0002d	0f 89 32 01 00
	00		 jns	 $LN22@decodeFram

; 106  :         return WS_ERROR_FRAME;
; 107  :     }
; 108  : 
; 109  :     int payload_length = 0;

  00033	33 f6		 xor	 esi, esi

; 110  :     int pos = 2;
; 111  :     int length_field = inp[1] & (~0x80);

  00035	0f b6 c0	 movzx	 eax, al
  00038	25 7f ff ff ff	 and	 eax, -129		; ffffff7fH
  0003d	8d 56 02	 lea	 edx, DWORD PTR [esi+2]

; 112  :     unsigned int mask = 0;
; 113  : 
; 114  :     if (length_field <= PAYLOAD_SIZE_BASIC) {

  00040	83 f8 7d	 cmp	 eax, 125		; 0000007dH
  00043	77 04		 ja	 SHORT $LN7@decodeFram

; 115  :         payload_length = length_field;

  00045	8b f0		 mov	 esi, eax
  00047	eb 52		 jmp	 SHORT $LN11@decodeFram
$LN7@decodeFram:

; 116  :     } else if (length_field == 126) { //msglen is 16bit!

  00049	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  0004c	75 12		 jne	 SHORT $LN9@decodeFram

; 13   :     return ((x & 0x00ff) << 8) | ((x & 0xff00) >> 8);

  0004e	66 8b 47 02	 mov	 ax, WORD PTR [edi+2]

; 120  :         //payload_length = inp[2] + (inp[3] << 8);
; 121  :         pos += 2;

  00052	ba 04 00 00 00	 mov	 edx, 4

; 13   :     return ((x & 0x00ff) << 8) | ((x & 0xff00) >> 8);

  00057	66 c1 c0 08	 rol	 ax, 8

; 117  :         uint16_t tmp16 = 0;
; 118  :         memcpy(&tmp16, inp + 2, 2);
; 119  :         payload_length = ntoh16(tmp16);

  0005b	0f b7 f0	 movzx	 esi, ax

; 120  :         //payload_length = inp[2] + (inp[3] << 8);
; 121  :         pos += 2;

  0005e	eb 3b		 jmp	 SHORT $LN11@decodeFram
$LN9@decodeFram:

; 122  :     } else if (length_field == 127) { //msglen is 64bit!

  00060	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00063	75 36		 jne	 SHORT $LN11@decodeFram

; 123  :         uint64_t tmp64 = 0;
; 124  :         memcpy(&tmp64, inp + 2, 8);

  00065	8b 57 06	 mov	 edx, DWORD PTR [edi+6]

; 19   :     return (x >> 56) |

  00068	8b c2		 mov	 eax, edx

; 123  :         uint64_t tmp64 = 0;
; 124  :         memcpy(&tmp64, inp + 2, 8);

  0006a	8b 4f 02	 mov	 ecx, DWORD PTR [edi+2]

; 19   :     return (x >> 56) |

  0006d	8b f1		 mov	 esi, ecx
  0006f	0f ac c6 18	 shrd	 esi, eax, 24
  00073	c1 e8 08	 shr	 eax, 8
  00076	81 e6 00 00 ff
	00		 and	 esi, 16711680		; 00ff0000H
  0007c	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00081	0b f0		 or	 esi, eax
  00083	8b c2		 mov	 eax, edx
  00085	0f ac c1 08	 shrd	 ecx, eax, 8
  00089	c1 ea 18	 shr	 edx, 24			; 00000018H
  0008c	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  00092	0b f1		 or	 esi, ecx
  00094	0b f2		 or	 esi, edx

; 125  :         payload_length = ntoh64(tmp64);
; 126  :         //payload_length = inp[2] + (inp[3] << 8);
; 127  :         pos += 8;

  00096	ba 0a 00 00 00	 mov	 edx, 10			; 0000000aH
$LN11@decodeFram:

; 128  :     }
; 129  :     int frameLength = payload_length + pos;
; 130  :     if (msg_masked == true) {
; 131  :         frameLength+=4;
; 132  :     }
; 133  :     if (inlength < frameLength) {

  0009b	80 7d ff 01	 cmp	 BYTE PTR tv529[ebp], 1
  0009f	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  000a2	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  000a5	0f 45 c8	 cmovne	 ecx, eax
  000a8	89 4d f8	 mov	 DWORD PTR tv522[ebp], ecx
  000ab	39 4d 0c	 cmp	 DWORD PTR _inlength$[ebp], ecx
  000ae	0f 8c bd 00 00
	00		 jl	 $LN33@decodeFram

; 134  :         //printf("warn: inlengh<frameLength\n");
; 135  :         return WS_INCOMPLETE_FRAME;
; 136  :     } else if (inlength>frameLength) {
; 137  :         //printf("warn: inlengh>frameLength:%d>%d\n", inlength, frameLength);
; 138  :     }
; 139  :     //else if (payload_length >(int)outbuf->size())
; 140  :     //{
; 141  :     //	outbuf->resize(payload_length);
; 142  :     //}
; 143  : 
; 144  :     if (msg_masked&&payload_length>0) {

  000b4	80 7d fe 00	 cmp	 BYTE PTR tv531[ebp], 0
  000b8	7d 3a		 jge	 SHORT $LN3@decodeFram
  000ba	85 f6		 test	 esi, esi
  000bc	7e 36		 jle	 SHORT $LN3@decodeFram

; 145  :         mask = *((unsigned int*)(inp + pos));

  000be	8b 04 3a	 mov	 eax, DWORD PTR [edx+edi]
  000c1	89 45 0c	 mov	 DWORD PTR _mask$[ebp], eax

; 146  :         pos += 4;
; 147  :         memcpy(outbuf, (void*)(inp + pos), payload_length);

  000c4	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000c7	8b 7d 10	 mov	 edi, DWORD PTR _outbuf$[ebp]
  000ca	03 c2		 add	 eax, edx
  000cc	56		 push	 esi
  000cd	50		 push	 eax
  000ce	57		 push	 edi
  000cf	e8 00 00 00 00	 call	 _memcpy
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	33 c9		 xor	 ecx, ecx
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@decodeFram:

; 148  :         // unmask data:
; 149  :         char* c = outbuf;
; 150  :         for (int i = 0; i < payload_length; i++) {
; 151  :             c[i] = c[i] ^ ((unsigned char*)(&mask))[i % 4];

  000e0	8b c1		 mov	 eax, ecx
  000e2	83 e0 03	 and	 eax, 3
  000e5	8a 44 05 0c	 mov	 al, BYTE PTR _mask$[ebp+eax]
  000e9	30 04 39	 xor	 BYTE PTR [ecx+edi], al
  000ec	41		 inc	 ecx
  000ed	3b ce		 cmp	 ecx, esi
  000ef	7c ef		 jl	 SHORT $LL4@decodeFram
  000f1	8b 4d f8	 mov	 ecx, DWORD PTR tv522[ebp]
$LN3@decodeFram:

; 152  :         }
; 153  :     }
; 154  : 
; 155  :     *frameSize = frameLength;

  000f4	8b 45 18	 mov	 eax, DWORD PTR _frameSize$[ebp]
  000f7	89 08		 mov	 DWORD PTR [eax], ecx

; 156  :     *outlen = payload_length;

  000f9	8b 45 14	 mov	 eax, DWORD PTR _outlen$[ebp]
  000fc	89 30		 mov	 DWORD PTR [eax], esi

; 157  :     // (*outbuf)[payload_length] = 0;
; 158  : 
; 159  :     if (msg_opcode == 0x0) return (msg_fin) ? WS_TEXT_FRAME : WS_INCOMPLETE_TEXT_FRAME; // continuation frame ?

  000fe	84 db		 test	 bl, bl
  00100	74 51		 je	 SHORT $LN32@decodeFram

; 160  :     if (msg_opcode == 0x1) return (msg_fin) ? WS_TEXT_FRAME : WS_INCOMPLETE_TEXT_FRAME;

  00102	80 fb 01	 cmp	 bl, 1
  00105	74 4c		 je	 SHORT $LN32@decodeFram

; 161  :     if (msg_opcode == 0x2) return (msg_fin) ? WS_BINARY_FRAME : WS_INCOMPLETE_BINARY_FRAME;

  00107	80 fb 02	 cmp	 bl, 2
  0010a	75 14		 jne	 SHORT $LN19@decodeFram
  0010c	8a c7		 mov	 al, bh
  0010e	c0 f8 07	 sar	 al, 7
  00111	5f		 pop	 edi
  00112	25 80 00 00 00	 and	 eax, 128		; 00000080H

; 165  : 
; 166  :     return WS_ERROR_FRAME;
; 167  : }

  00117	5e		 pop	 esi
  00118	83 c0 02	 add	 eax, 2
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN19@decodeFram:

; 162  :     if (msg_opcode == 0x8) return WS_CLOSE_FRAME;

  00120	80 fb 08	 cmp	 bl, 8
  00123	75 0c		 jne	 SHORT $LN20@decodeFram

; 165  : 
; 166  :     return WS_ERROR_FRAME;
; 167  : }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	b8 88 00 00 00	 mov	 eax, 136		; 00000088H
  0012c	5b		 pop	 ebx
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
$LN20@decodeFram:

; 163  :     if (msg_opcode == 0x9) return WS_PING_FRAME;

  00131	80 fb 09	 cmp	 bl, 9
  00134	75 0c		 jne	 SHORT $LN21@decodeFram

; 165  : 
; 166  :     return WS_ERROR_FRAME;
; 167  : }

  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	b8 89 00 00 00	 mov	 eax, 137		; 00000089H
  0013d	5b		 pop	 ebx
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
$LN21@decodeFram:

; 164  :     if (msg_opcode == 0xA) return WS_PONG_FRAME;

  00142	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00145	75 1e		 jne	 SHORT $LN22@decodeFram

; 165  : 
; 166  :     return WS_ERROR_FRAME;
; 167  : }

  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	b8 8a 00 00 00	 mov	 eax, 138		; 0000008aH
  0014e	5b		 pop	 ebx
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
$LN32@decodeFram:

; 160  :     if (msg_opcode == 0x1) return (msg_fin) ? WS_TEXT_FRAME : WS_INCOMPLETE_TEXT_FRAME;

  00153	8a c7		 mov	 al, bh
  00155	c0 f8 07	 sar	 al, 7
  00158	5f		 pop	 edi
  00159	25 80 00 00 00	 and	 eax, 128		; 00000080H

; 165  : 
; 166  :     return WS_ERROR_FRAME;
; 167  : }

  0015e	5e		 pop	 esi
  0015f	40		 inc	 eax
  00160	5b		 pop	 ebx
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
$LN22@decodeFram:
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	b8 00 ff 00 00	 mov	 eax, 65280		; 0000ff00H
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN33@decodeFram:
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	b8 00 fe 00 00	 mov	 eax, 65024		; 0000fe00H
  00178	5b		 pop	 ebx
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
?decodeFrame@ws@net@zl@@YA?AW4WsFrameType@123@PBDHPADPAH2@Z ENDP ; zl::net::ws::decodeFrame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -256				; size = 4
$T2 = -252						; size = 1
$T3 = -248						; size = 4
_seckey$GSCopy$1$ = -244				; size = 4
$T4 = -244						; size = 1
$T5 = -244						; size = 1
_sha1$6 = -240						; size = 112
$T7 = -128						; size = 28
_key$8 = -100						; size = 28
$T9 = -72						; size = 28
_shakey$10 = -64					; size = 20
$T11 = -44						; size = 28
$T12 = -44						; size = 28
$T13 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_seckey$ = 12						; size = 4
_protocol$ = 16						; size = 28
?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z PROC ; zl::net::ws::makeHandshakeResponse, COMDAT

; 39   : std::string makeHandshakeResponse(const char* seckey,std::string protocol) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00030	8b 45 0c	 mov	 eax, DWORD PTR _seckey$[ebp]
  00033	89 bd 00 ff ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00039	89 85 0c ff ff
	ff		 mov	 DWORD PTR _seckey$GSCopy$1$[ebp], eax
  0003f	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00049	6a 08		 push	 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 39   : std::string makeHandshakeResponse(const char* seckey,std::string protocol) {

  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00052	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00058	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 1785 : 		_Myres(0)

  0005f	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00066	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0006b	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0006d	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00076	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0007d	8b 07		 mov	 eax, DWORD PTR [edi]
  0007f	89 38		 mov	 DWORD PTR [eax], edi

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00081	6a 00		 push	 0

; 3976 : 		_My_data._Mysize = 0;

  00083	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0008a	8b cf		 mov	 ecx, edi

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0008c	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@

; 2182 : 		: _Mybase()

  00098	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0009c	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000a0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2186 : 		}

  000a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000a9	6a 22		 push	 34			; 00000022H
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LIKLDGFH@HTTP?11?41?5101?5Switching?5Protocol@
  000b0	8b cf		 mov	 ecx, edi
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 59   :     return answer;

  000b2	c7 85 08 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T3[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000bc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000c1	6a 14		 push	 20			; 00000014H
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GNLHKLOJ@Upgrade?3?5WebSocket?$AN?6@
  000c8	8b cf		 mov	 ecx, edi
  000ca	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000cf	6a 15		 push	 21			; 00000015H
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FHMIDDAA@Connection?3?5Upgrade?$AN?6@
  000d6	8b cf		 mov	 ecx, edi
  000d8	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 45   :     answer += "Sec-WebSocket-Protocol:" + protocol + "\r\n";

  000dd	8d 45 10	 lea	 eax, DWORD PTR _protocol$[ebp]
  000e0	50		 push	 eax
  000e1	8d 45 d4	 lea	 eax, DWORD PTR $T13[ebp]
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BHOALOBM@Sec?9WebSocket?9Protocol?3@
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000f2	6a 02		 push	 2
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6@
  000f9	8b c8		 mov	 ecx, eax
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 45   :     answer += "Sec-WebSocket-Protocol:" + protocol + "\r\n";

  000fb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000ff	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00104	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00106	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2268 : 		{	// construct by moving _Right

  00108	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0010c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T9[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00113	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 0

; 1785 : 		_Myres(0)

  0011a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00121	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00126	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00129	89 45 b8	 mov	 DWORD PTR $T9[ebp], eax

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0012c	c6 85 04 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00133	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00136	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0013c	ff b5 04 ff ff
	ff		 push	 DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00142	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00149	8b 45 b8	 mov	 eax, DWORD PTR $T9[ebp]

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0014c	56		 push	 esi

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0014d	89 08		 mov	 DWORD PTR [eax], ecx

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0014f	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 4179 : 	return (_STD move(_Left.append(_Right)));

  00154	c7 85 08 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR $T3[ebp], 3

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0015e	83 7d d0 10	 cmp	 DWORD PTR $T9[ebp+24], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00162	8d 45 bc	 lea	 eax, DWORD PTR $T9[ebp+4]

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00165	ff 75 cc	 push	 DWORD PTR $T9[ebp+20]

; 1815 : 		if (_Large_string_engaged())

  00168	0f 43 45 bc	 cmovae	 eax, DWORD PTR $T9[ebp+4]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 45   :     answer += "Sec-WebSocket-Protocol:" + protocol + "\r\n";

  0016c	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00170	50		 push	 eax
  00171	8b cf		 mov	 ecx, edi
  00173	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2023 : 		_Get_data()._Orphan_all();

  00178	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]
  0017b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00180	8b 45 d0	 mov	 eax, DWORD PTR $T9[ebp+24]
  00183	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00186	72 0d		 jb	 SHORT $LN213@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00188	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00189	50		 push	 eax
  0018a	ff 75 bc	 push	 DWORD PTR $T9[ebp+4]
  0018d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00192	83 c4 08	 add	 esp, 8
$LN213@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00195	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]

; 3995 : 		_My_data._Mysize = 0;

  00198	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0019f	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T9[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001a6	c6 45 bc 00	 mov	 BYTE PTR $T9[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  001aa	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  001af	6a 08		 push	 8
  001b1	ff 75 b8	 push	 DWORD PTR $T9[ebp]
  001b4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001b9	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  001bc	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T9[ebp], 0

; 2023 : 		_Get_data()._Orphan_all();

  001c3	8d 4d d4	 lea	 ecx, DWORD PTR $T13[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 45   :     answer += "Sec-WebSocket-Protocol:" + protocol + "\r\n";

  001c6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  001ca	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001cf	8b 45 ec	 mov	 eax, DWORD PTR $T13[ebp+24]
  001d2	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001d5	72 0d		 jb	 SHORT $LN292@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001d7	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d8	50		 push	 eax
  001d9	ff 75 d8	 push	 DWORD PTR $T13[ebp+4]
  001dc	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  001e1	83 c4 08	 add	 esp, 8
$LN292@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  001e4	8d 4d d4	 lea	 ecx, DWORD PTR $T13[ebp]

; 3995 : 		_My_data._Mysize = 0;

  001e7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  001ee	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T13[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001f5	c6 45 d8 00	 mov	 BYTE PTR $T13[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  001f9	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  001fe	6a 08		 push	 8
  00200	ff 75 d4	 push	 DWORD PTR $T13[ebp]
  00203	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 46   :     if (seckey) {

  00208	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _seckey$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0020e	83 c4 08	 add	 esp, 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 46   :     if (seckey) {

  00211	85 c0		 test	 eax, eax
  00213	0f 84 78 02 00
	00		 je	 $LN937@makeHandsh

; 47   :         std::string key(seckey);

  00219	50		 push	 eax
  0021a	8d 4d 9c	 lea	 ecx, DWORD PTR _key$8[ebp]
  0021d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00222	6a 24		 push	 36			; 00000024H
  00224	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DPPCDNJI@258EAFA5?9E914?947DA?995CA?9C5AB0DC@
  00229	8d 4d 9c	 lea	 ecx, DWORD PTR _key$8[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 47   :         std::string key(seckey);

  0022c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00230	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00235	0f 57 c0	 xorps	 xmm0, xmm0
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 49   :         char shakey[20] = { 0 };

  00238	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _shakey$10[ebp+16], 0

; 50   :         zl::util::SHA1 sha1;

  0023f	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _sha1$6[ebp]
  00245	0f 11 45 c0	 movups	 XMMWORD PTR _shakey$10[ebp], xmm0
  00249	e8 00 00 00 00	 call	 ??0SHA1@util@zl@@QAE@XZ	; zl::util::SHA1::SHA1

; 51   :         sha1.update(key);

  0024e	8d 45 9c	 lea	 eax, DWORD PTR _key$8[ebp]
  00251	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00255	50		 push	 eax
  00256	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _sha1$6[ebp]
  0025c	e8 00 00 00 00	 call	 ?update@SHA1@util@zl@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; zl::util::SHA1::update

; 52   :         sha1.final(shakey);

  00261	8d 45 c0	 lea	 eax, DWORD PTR _shakey$10[ebp]
  00264	50		 push	 eax
  00265	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _sha1$6[ebp]
  0026b	e8 00 00 00 00	 call	 ?final@SHA1@util@zl@@QAEXPAX@Z ; zl::util::SHA1::final

; 53   :         //LOG_WARN("get SHA1 : %s, %s", key.c_str(), shakey);
; 54   :         key = zl::util::base64Encode(shakey, 20);

  00270	6a 14		 push	 20			; 00000014H
  00272	8d 45 c0	 lea	 eax, DWORD PTR _shakey$10[ebp]
  00275	50		 push	 eax
  00276	8d 45 d4	 lea	 eax, DWORD PTR $T12[ebp]
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 ?base64Encode@util@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; zl::util::base64Encode
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00282	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2302 : 		if (this != _STD addressof(_Right))

  00284	8d 45 9c	 lea	 eax, DWORD PTR _key$8[ebp]
  00287	3b c6		 cmp	 eax, esi
  00289	74 44		 je	 SHORT $LN522@makeHandsh

; 2023 : 		_Get_data()._Orphan_all();

  0028b	8b c8		 mov	 ecx, eax
  0028d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00292	8b 45 b4	 mov	 eax, DWORD PTR _key$8[ebp+24]
  00295	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00298	72 0d		 jb	 SHORT $LN382@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0029a	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029b	50		 push	 eax
  0029c	ff 75 a0	 push	 DWORD PTR _key$8[ebp+4]
  0029f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002a4	83 c4 08	 add	 esp, 8
$LN382@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  002a7	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0
  002ae	8d 4d 9c	 lea	 ecx, DWORD PTR _key$8[ebp]
  002b1	ff b5 0c ff ff
	ff		 push	 DWORD PTR $T5[ebp]

; 3995 : 		_My_data._Mysize = 0;

  002b7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _key$8[ebp+20], 0

; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  002be	56		 push	 esi

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002bf	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR _key$8[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  002c6	c6 45 a0 00	 mov	 BYTE PTR _key$8[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  002ca	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
$LN522@makeHandsh:

; 2023 : 		_Get_data()._Orphan_all();

  002cf	8d 4d d4	 lea	 ecx, DWORD PTR $T12[ebp]

; 2312 : 		}

  002d2	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 2023 : 		_Get_data()._Orphan_all();

  002d6	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  002db	8b 45 ec	 mov	 eax, DWORD PTR $T12[ebp+24]
  002de	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  002e1	72 0d		 jb	 SHORT $LN529@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  002e3	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e4	50		 push	 eax
  002e5	ff 75 d8	 push	 DWORD PTR $T12[ebp+4]
  002e8	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  002ed	83 c4 08	 add	 esp, 8
$LN529@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  002f0	8d 4d d4	 lea	 ecx, DWORD PTR $T12[ebp]

; 3995 : 		_My_data._Mysize = 0;

  002f3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T12[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  002fa	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T12[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00301	c6 45 d8 00	 mov	 BYTE PTR $T12[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00305	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0030a	6a 08		 push	 8
  0030c	ff 75 d4	 push	 DWORD PTR $T12[ebp]
  0030f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 56   :         answer += ("Sec-WebSocket-Accept: " + key + "\r\n");

  00314	8d 45 9c	 lea	 eax, DWORD PTR _key$8[ebp]
  00317	50		 push	 eax
  00318	8d 45 80	 lea	 eax, DWORD PTR $T7[ebp]
  0031b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IMEJNJMG@Sec?9WebSocket?9Accept?3?5@
  00320	50		 push	 eax
  00321	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00326	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00329	6a 02		 push	 2
  0032b	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6@
  00330	8b c8		 mov	 ecx, eax
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 56   :         answer += ("Sec-WebSocket-Accept: " + key + "\r\n");

  00332	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00336	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0033b	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0033d	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2268 : 		{	// construct by moving _Right

  0033f	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00343	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T11[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0034a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+20], 0

; 1785 : 		_Myres(0)

  00351	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00358	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0035d	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00360	89 45 d4	 mov	 DWORD PTR $T11[ebp], eax

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00363	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0036a	8d 4d d4	 lea	 ecx, DWORD PTR $T11[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0036d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00373	ff b5 0c ff ff
	ff		 push	 DWORD PTR $T4[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00379	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00380	8b 45 d4	 mov	 eax, DWORD PTR $T11[ebp]

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00383	56		 push	 esi

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00384	89 08		 mov	 DWORD PTR [eax], ecx

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00386	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 4179 : 	return (_STD move(_Left.append(_Right)));

  0038b	c7 85 08 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp], 7

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00395	83 7d ec 10	 cmp	 DWORD PTR $T11[ebp+24], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00399	8d 45 d8	 lea	 eax, DWORD PTR $T11[ebp+4]

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  0039c	ff 75 e8	 push	 DWORD PTR $T11[ebp+20]

; 1815 : 		if (_Large_string_engaged())

  0039f	0f 43 45 d8	 cmovae	 eax, DWORD PTR $T11[ebp+4]

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  003a3	8b cf		 mov	 ecx, edi
  003a5	50		 push	 eax
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 56   :         answer += ("Sec-WebSocket-Accept: " + key + "\r\n");

  003a6	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  003aa	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2023 : 		_Get_data()._Orphan_all();

  003af	8d 4d d4	 lea	 ecx, DWORD PTR $T11[ebp]
  003b2	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  003b7	8b 45 ec	 mov	 eax, DWORD PTR $T11[ebp+24]
  003ba	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  003bd	72 0d		 jb	 SHORT $LN705@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  003bf	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003c0	50		 push	 eax
  003c1	ff 75 d8	 push	 DWORD PTR $T11[ebp+4]
  003c4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  003c9	83 c4 08	 add	 esp, 8
$LN705@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  003cc	8d 4d d4	 lea	 ecx, DWORD PTR $T11[ebp]

; 3995 : 		_My_data._Mysize = 0;

  003cf	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  003d6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T11[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  003dd	c6 45 d8 00	 mov	 BYTE PTR $T11[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  003e1	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  003e6	6a 08		 push	 8
  003e8	ff 75 d4	 push	 DWORD PTR $T11[ebp]
  003eb	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  003f0	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  003f3	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T11[ebp], 0

; 2023 : 		_Get_data()._Orphan_all();

  003fa	8d 4d 80	 lea	 ecx, DWORD PTR $T7[ebp]
  003fd	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00402	8b 45 98	 mov	 eax, DWORD PTR $T7[ebp+24]
  00405	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00408	72 0d		 jb	 SHORT $LN784@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0040a	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0040b	50		 push	 eax
  0040c	ff 75 84	 push	 DWORD PTR $T7[ebp+4]
  0040f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00414	83 c4 08	 add	 esp, 8
$LN784@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00417	8d 4d 80	 lea	 ecx, DWORD PTR $T7[ebp]

; 3995 : 		_My_data._Mysize = 0;

  0041a	c7 45 94 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00421	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00428	c6 45 84 00	 mov	 BYTE PTR $T7[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0042c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00431	6a 08		 push	 8
  00433	ff 75 80	 push	 DWORD PTR $T7[ebp]
  00436	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0043b	83 c4 08	 add	 esp, 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 57   :     }

  0043e	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _sha1$6[ebp]
  00444	e8 00 00 00 00	 call	 ??1SHA1@util@zl@@QAE@XZ	; zl::util::SHA1::~SHA1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00449	8d 4d 9c	 lea	 ecx, DWORD PTR _key$8[ebp]
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 57   :     }

  0044c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00450	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00455	8b 45 b4	 mov	 eax, DWORD PTR _key$8[ebp+24]
  00458	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0045b	72 0d		 jb	 SHORT $LN863@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0045d	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0045e	50		 push	 eax
  0045f	ff 75 a0	 push	 DWORD PTR _key$8[ebp+4]
  00462	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00467	83 c4 08	 add	 esp, 8
$LN863@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0046a	8d 4d 9c	 lea	 ecx, DWORD PTR _key$8[ebp]

; 3995 : 		_My_data._Mysize = 0;

  0046d	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _key$8[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00474	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR _key$8[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0047b	c6 45 a0 00	 mov	 BYTE PTR _key$8[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  0047f	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00484	6a 08		 push	 8
  00486	ff 75 9c	 push	 DWORD PTR _key$8[ebp]
  00489	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0048e	83 c4 08	 add	 esp, 8
$LN937@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00491	6a 02		 push	 2
  00493	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6@
  00498	8b cf		 mov	 ecx, edi
  0049a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2023 : 		_Get_data()._Orphan_all();

  0049f	8d 4d 10	 lea	 ecx, DWORD PTR _protocol$[ebp]
  004a2	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  004a7	8b 45 28	 mov	 eax, DWORD PTR _protocol$[ebp+24]
  004aa	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  004ad	72 0d		 jb	 SHORT $LN950@makeHandsh

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  004af	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b0	50		 push	 eax
  004b1	ff 75 14	 push	 DWORD PTR _protocol$[ebp+4]
  004b4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  004b9	83 c4 08	 add	 esp, 8
$LN950@makeHandsh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  004bc	8d 4d 10	 lea	 ecx, DWORD PTR _protocol$[ebp]

; 3995 : 		_My_data._Mysize = 0;

  004bf	c7 45 24 00 00
	00 00		 mov	 DWORD PTR _protocol$[ebp+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  004c6	c7 45 28 0f 00
	00 00		 mov	 DWORD PTR _protocol$[ebp+24], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  004cd	c6 45 14 00	 mov	 BYTE PTR _protocol$[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  004d1	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  004d6	6a 08		 push	 8
  004d8	ff 75 10	 push	 DWORD PTR _protocol$[ebp]
  004db	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  004e0	83 c4 08	 add	 esp, 8
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp

; 59   :     return answer;

  004e3	8b c7		 mov	 eax, edi

; 60   : }

  004e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004ef	59		 pop	 ecx
  004f0	5f		 pop	 edi
  004f1	5e		 pop	 esi
  004f2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f5	33 cd		 xor	 ecx, ebp
  004f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004fc	8b e5		 mov	 esp, ebp
  004fe	5d		 pop	 ebp
  004ff	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$0:
  00000	8d 4d 10	 lea	 ecx, DWORD PTR _protocol$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$9:
  00008	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$1:
  00013	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	0f 84 12 00 00
	00		 je	 $LN6@makeHandsh
  00022	83 a5 08 ff ff
	ff fe		 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00029	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@makeHandsh:
  00034	c3		 ret	 0
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$2:
  00035	8d 4d d4	 lea	 ecx, DWORD PTR $T13[ebp]
  00038	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$3:
  0003d	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]
  00040	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$4:
  00045	8d 4d 9c	 lea	 ecx, DWORD PTR _key$8[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$5:
  0004d	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _sha1$6[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1SHA1@util@zl@@QAE@XZ	; zl::util::SHA1::~SHA1
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$7:
  00058	8d 4d 80	 lea	 ecx, DWORD PTR $T7[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z$8:
  00060	8d 4d d4	 lea	 ecx, DWORD PTR $T11[ebp]
  00063	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z:
  00068	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0006f	8b 8a 00 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-256]
  00075	33 c8		 xor	 ecx, eax
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0007f	33 c8		 xor	 ecx, eax
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z
  0008b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?makeHandshakeResponse@ws@net@zl@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDV45@@Z ENDP ; zl::net::ws::makeHandshakeResponse
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?hton64@ws@net@zl@@YA_K_K@Z
_TEXT	SEGMENT
_x$ = 8							; size = 8
tv225 = 12						; size = 4
?hton64@ws@net@zl@@YA_K_K@Z PROC			; zl::net::ws::hton64, COMDAT

; 28   : uint64_t hton64(uint64_t x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 29   :     return (x >> 56) |

  00003	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  00006	8b ca		 mov	 ecx, edx
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	33 f6		 xor	 esi, esi
  0000c	8b da		 mov	 ebx, edx
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _x$[ebp]
  00012	81 e3 00 00 ff
	00		 and	 ebx, 16711680		; 00ff0000H
  00018	8b c7		 mov	 eax, edi
  0001a	0f ac c8 10	 shrd	 eax, ecx, 16
  0001e	0b f0		 or	 esi, eax
  00020	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00023	0b d9		 or	 ebx, ecx
  00025	8b c2		 mov	 eax, edx
  00027	0f ac de 10	 shrd	 esi, ebx, 16
  0002b	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00030	33 c9		 xor	 ecx, ecx
  00032	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00035	0b d8		 or	 ebx, eax
  00037	0f b6 c2	 movzx	 eax, dl
  0003a	0f ac de 10	 shrd	 esi, ebx, 16
  0003e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00041	0b d8		 or	 ebx, eax
  00043	8b c7		 mov	 eax, edi
  00045	0f ac de 08	 shrd	 esi, ebx, 8
  00049	0f a4 c2 10	 shld	 edx, eax, 16
  0004d	89 75 0c	 mov	 DWORD PTR tv225[ebp], esi
  00050	8b f7		 mov	 esi, edi
  00052	81 e6 00 ff 00
	00		 and	 esi, 65280		; 0000ff00H
  00058	c1 e0 10	 shl	 eax, 16			; 00000010H
  0005b	0b f0		 or	 esi, eax
  0005d	c1 eb 08	 shr	 ebx, 8
  00060	0b d1		 or	 edx, ecx
  00062	8b c7		 mov	 eax, edi
  00064	0f a4 f2 10	 shld	 edx, esi, 16
  00068	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0006d	81 e7 00 00 00
	ff		 and	 edi, -16777216		; ff000000H
  00073	c1 e6 10	 shl	 esi, 16			; 00000010H
  00076	0b f0		 or	 esi, eax
  00078	8b 45 0c	 mov	 eax, DWORD PTR tv225[ebp]
  0007b	0f a4 f2 10	 shld	 edx, esi, 16
  0007f	c1 e6 10	 shl	 esi, 16			; 00000010H
  00082	0b f7		 or	 esi, edi
  00084	0f a4 f2 08	 shld	 edx, esi, 8
  00088	5f		 pop	 edi
  00089	c1 e6 08	 shl	 esi, 8
  0008c	0b c6		 or	 eax, esi
  0008e	0b d3		 or	 edx, ebx
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 30   :            ((x << 40) & 0x00ff000000000000LL) |
; 31   :            ((x << 24) & 0x0000ff0000000000LL) |
; 32   :            ((x << 8) & 0x000000ff00000000LL) |
; 33   :            ((x >> 8) & 0x00000000ff000000LL) |
; 34   :            ((x >> 24) & 0x0000000000ff0000LL) |
; 35   :            ((x >> 40) & 0x000000000000ff00LL) |
; 36   :            (x << 56);
; 37   : }

  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?hton64@ws@net@zl@@YA_K_K@Z ENDP			; zl::net::ws::hton64
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?ntoh64@ws@net@zl@@YA_K_K@Z
_TEXT	SEGMENT
_x$ = 8							; size = 8
tv225 = 12						; size = 4
?ntoh64@ws@net@zl@@YA_K_K@Z PROC			; zl::net::ws::ntoh64, COMDAT

; 18   : uint64_t ntoh64(uint64_t x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19   :     return (x >> 56) |

  00003	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp+4]
  00006	8b ca		 mov	 ecx, edx
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	33 f6		 xor	 esi, esi
  0000c	8b da		 mov	 ebx, edx
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _x$[ebp]
  00012	81 e3 00 00 ff
	00		 and	 ebx, 16711680		; 00ff0000H
  00018	8b c7		 mov	 eax, edi
  0001a	0f ac c8 10	 shrd	 eax, ecx, 16
  0001e	0b f0		 or	 esi, eax
  00020	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00023	0b d9		 or	 ebx, ecx
  00025	8b c2		 mov	 eax, edx
  00027	0f ac de 10	 shrd	 esi, ebx, 16
  0002b	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00030	33 c9		 xor	 ecx, ecx
  00032	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00035	0b d8		 or	 ebx, eax
  00037	0f b6 c2	 movzx	 eax, dl
  0003a	0f ac de 10	 shrd	 esi, ebx, 16
  0003e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00041	0b d8		 or	 ebx, eax
  00043	8b c7		 mov	 eax, edi
  00045	0f ac de 08	 shrd	 esi, ebx, 8
  00049	0f a4 c2 10	 shld	 edx, eax, 16
  0004d	89 75 0c	 mov	 DWORD PTR tv225[ebp], esi
  00050	8b f7		 mov	 esi, edi
  00052	81 e6 00 ff 00
	00		 and	 esi, 65280		; 0000ff00H
  00058	c1 e0 10	 shl	 eax, 16			; 00000010H
  0005b	0b f0		 or	 esi, eax
  0005d	c1 eb 08	 shr	 ebx, 8
  00060	0b d1		 or	 edx, ecx
  00062	8b c7		 mov	 eax, edi
  00064	0f a4 f2 10	 shld	 edx, esi, 16
  00068	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0006d	81 e7 00 00 00
	ff		 and	 edi, -16777216		; ff000000H
  00073	c1 e6 10	 shl	 esi, 16			; 00000010H
  00076	0b f0		 or	 esi, eax
  00078	8b 45 0c	 mov	 eax, DWORD PTR tv225[ebp]
  0007b	0f a4 f2 10	 shld	 edx, esi, 16
  0007f	c1 e6 10	 shl	 esi, 16			; 00000010H
  00082	0b f7		 or	 esi, edi
  00084	0f a4 f2 08	 shld	 edx, esi, 8
  00088	5f		 pop	 edi
  00089	c1 e6 08	 shl	 esi, 8
  0008c	0b c6		 or	 eax, esi
  0008e	0b d3		 or	 edx, ebx
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 20   :            ((x << 40) & 0x00ff000000000000LL) |
; 21   :            ((x << 24) & 0x0000ff0000000000LL) |
; 22   :            ((x << 8) & 0x000000ff00000000LL) |
; 23   :            ((x >> 8) & 0x00000000ff000000LL) |
; 24   :            ((x >> 24) & 0x0000000000ff0000LL) |
; 25   :            ((x >> 40) & 0x000000000000ff00LL) |
; 26   :            (x << 56);
; 27   : }

  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?ntoh64@ws@net@zl@@YA_K_K@Z ENDP			; zl::net::ws::ntoh64
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?hton16@ws@net@zl@@YAGG@Z
_TEXT	SEGMENT
_x$ = 8							; size = 2
?hton16@ws@net@zl@@YAGG@Z PROC				; zl::net::ws::hton16, COMDAT

; 15   : uint16_t hton16(uint16_t x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   :     return ((x & 0x00ff) << 8) | ((x & 0xff00) >> 8);

  00003	0f b7 4d 08	 movzx	 ecx, WORD PTR _x$[ebp]
  00007	8b c1		 mov	 eax, ecx
  00009	c1 e1 08	 shl	 ecx, 8
  0000c	c1 e8 08	 shr	 eax, 8
  0000f	0b c1		 or	 eax, ecx

; 17   : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?hton16@ws@net@zl@@YAGG@Z ENDP				; zl::net::ws::hton16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?ntoh16@ws@net@zl@@YAGG@Z
_TEXT	SEGMENT
_x$ = 8							; size = 2
?ntoh16@ws@net@zl@@YAGG@Z PROC				; zl::net::ws::ntoh16, COMDAT

; 12   : uint16_t ntoh16(uint16_t x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   :     return ((x & 0x00ff) << 8) | ((x & 0xff00) >> 8);

  00003	0f b7 4d 08	 movzx	 ecx, WORD PTR _x$[ebp]
  00007	8b c1		 mov	 eax, ecx
  00009	c1 e1 08	 shl	 ecx, 8
  0000c	c1 e8 08	 shr	 eax, 8
  0000f	0b c1		 or	 eax, ecx

; 14   : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?ntoh16@ws@net@zl@@YAGG@Z ENDP				; zl::net::ws::ntoh16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 42 c2	 cmovb	 eax, edx

; 25   : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4004 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3984 : 		{	// initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00008	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3985 : 		this->_Orphan_all();
; 3986 : 		auto& _My_data = this->_Get_data();
; 3987 : 		if (_My_data._Large_string_engaged())

  0000e	72 0d		 jb	 SHORT $LN2@Tidy_deall

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00010	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8
$LN2@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0001d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00024	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0002b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 4000 : 		}

  00030	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3975 : 		auto& _My_data = this->_Get_data();
; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00007	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0000e	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3981 : 		}

  00012	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small, COMDAT
; _this$ = ecx

; 3954 : 		{	// release any held storage and return to small string mode

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 3955 : 			// pre: *this is in large string mode
; 3956 : 			// pre: this is small enough to return to small string mode
; 3957 : 		auto& _My_data = this->_Get_data();
; 3958 : 		_My_data._Orphan_all();

  00004	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3959 : 		const pointer _Ptr = _My_data._Bx._Ptr;
; 3960 : 		auto& _Al = this->_Getal();
; 3961 : 		_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3962 : 		_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  00009	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000c	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
  0000f	8b 32		 mov	 esi, DWORD PTR [edx]
  00011	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00012	50		 push	 eax
  00013	56		 push	 esi
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3963 : 		_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0001d	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	50		 push	 eax
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00025	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3964 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00028	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 3965 : 		}

  00031	c3		 ret	 0
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3866 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3867 : 		const size_type _Max = max_size();
; 3868 : 		auto& _My_data = this->_Get_data();
; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00006	83 ca 0f	 or	 edx, 15			; 0000000fH
  00009	56		 push	 esi
  0000a	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00010	77 21		 ja	 SHORT $LN25@Calculate_

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);
; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;

  00012	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]

; 3876 : 		if (_Old > _Max - _Old / 2)

  00015	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0001a	8b ce		 mov	 ecx, esi
  0001c	d1 e9		 shr	 ecx, 1
  0001e	2b c1		 sub	 eax, ecx
  00020	3b f0		 cmp	 esi, eax
  00022	77 0f		 ja	 SHORT $LN25@Calculate_

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00024	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00027	3b d0		 cmp	 edx, eax
  00029	5e		 pop	 esi
  0002a	0f 42 d0	 cmovb	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0002d	8b c2		 mov	 eax, edx

; 3882 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN25@Calculate_:

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00033	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00038	5e		 pop	 esi

; 3882 : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
tv489 = -8						; size = 4
__Old_size$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 3336 : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx
  00008	56		 push	 esi

; 3337 : 		auto& _My_data = this->_Get_data();
; 3338 : 		if (_My_data._Mysize > _Newcap)

  00009	8b 75 08	 mov	 esi, DWORD PTR __Newcap$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00012	89 55 f8	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  00015	3b d6		 cmp	 edx, esi
  00017	0f 87 ec 00 00
	00		 ja	 $LN5@reserve

; 3339 : 			{	// requested capacity is not large enough for current size, ignore
; 3340 : 			return;	// nothing to do
; 3341 : 			}
; 3342 : 
; 3343 : 		if (_My_data._Myres == _Newcap)

  0001d	57		 push	 edi
  0001e	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  00021	3b fe		 cmp	 edi, esi
  00023	0f 84 df 00 00
	00		 je	 $LN91@reserve

; 3344 : 			{	// we're already at the requested capacity
; 3345 : 			return;	// nothing to do
; 3346 : 			}
; 3347 : 
; 3348 : 		if (_My_data._Myres < _Newcap)

  00029	0f 83 ca 00 00
	00		 jae	 $LN4@reserve

; 3349 : 			{	// reallocate to grow
; 3350 : 			const size_type _Old_size = _My_data._Mysize;
; 3351 : 			_Reallocate_grow_by(_Newcap - _Old_size,

  0002f	8b ce		 mov	 ecx, esi

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00031	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3349 : 			{	// reallocate to grow
; 3350 : 			const size_type _Old_size = _My_data._Mysize;
; 3351 : 			_Reallocate_grow_by(_Newcap - _Old_size,

  00036	2b ca		 sub	 ecx, edx

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00038	2b c2		 sub	 eax, edx
  0003a	3b c1		 cmp	 eax, ecx
  0003c	0f 82 ce 00 00
	00		 jb	 $LN94@reserve
  00042	53		 push	 ebx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00043	8b de		 mov	 ebx, esi
  00045	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00048	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  0004e	76 07		 jbe	 SHORT $LN35@reserve

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00050	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00055	eb 1e		 jmp	 SHORT $LN34@reserve
$LN35@reserve:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00057	8b cf		 mov	 ecx, edi
  00059	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0005e	d1 e9		 shr	 ecx, 1
  00060	2b c1		 sub	 eax, ecx
  00062	3b f8		 cmp	 edi, eax
  00064	76 07		 jbe	 SHORT $LN36@reserve

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00066	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0006b	eb 08		 jmp	 SHORT $LN34@reserve
$LN36@reserve:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0006d	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00070	3b d8		 cmp	 ebx, eax
  00072	0f 42 d8	 cmovb	 ebx, eax
$LN34@reserve:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00075	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3933 : 		_My_data._Orphan_all();

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00081	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00084	89 45 08	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  00087	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 3935 : 		_My_data._Myres = _New_capacity;

  0008f	89 58 18	 mov	 DWORD PTR [eax+24], ebx

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  00092	8b 5d f8	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  00095	89 70 14	 mov	 DWORD PTR [eax+20], esi
  00098	83 c0 04	 add	 eax, 4
  0009b	89 45 f8	 mov	 DWORD PTR tv489[ebp], eax
  0009e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000a1	51		 push	 ecx
  000a2	83 ff 10	 cmp	 edi, 16			; 00000010H
  000a5	72 2f		 jb	 SHORT $LN13@reserve

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000a7	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a9	56		 push	 esi
  000aa	ff 75 08	 push	 DWORD PTR __New_ptr$1$[ebp]
  000ad	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000b2	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b5	50		 push	 eax
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  000bc	8b 4d f8	 mov	 ecx, DWORD PTR tv489[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  000c2	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  000c5	89 01		 mov	 DWORD PTR [ecx], eax
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000ca	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000cd	5b		 pop	 ebx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi

; 3363 : 			return;
; 3364 : 			}
; 3365 : 
; 3366 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3367 : 		}

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
$LN13@reserve:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000d6	50		 push	 eax
  000d7	ff 75 08	 push	 DWORD PTR __New_ptr$1$[ebp]
  000da	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  000df	8b 4d f8	 mov	 ecx, DWORD PTR tv489[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  000e5	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  000e8	89 01		 mov	 DWORD PTR [ecx], eax
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000ed	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000f0	5b		 pop	 ebx
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi

; 3363 : 			return;
; 3364 : 			}
; 3365 : 
; 3366 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3367 : 		}

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
$LN4@reserve:

; 3357 : 			return;
; 3358 : 			}
; 3359 : 
; 3360 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  000f9	83 fe 10	 cmp	 esi, 16			; 00000010H
  000fc	73 0a		 jae	 SHORT $LN91@reserve

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000fe	83 ff 10	 cmp	 edi, 16			; 00000010H

; 3357 : 			return;
; 3358 : 			}
; 3359 : 
; 3360 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  00101	72 05		 jb	 SHORT $LN91@reserve

; 3361 : 			{	// deallocate everything; switch back to "small" mode
; 3362 : 			_Become_small();

  00103	e8 00 00 00 00	 call	 ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
$LN91@reserve:
  00108	5f		 pop	 edi
$LN5@reserve:
  00109	5e		 pop	 esi

; 3363 : 			return;
; 3364 : 			}
; 3365 : 
; 3366 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3367 : 		}

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 04 00	 ret	 4
$LN94@reserve:

; 3925 : 			_Xlen();	// result too long

  00110	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN92@reserve:
  00115	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3307 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
; 3308 : 		const size_type _Storage_max = // can always store small string
; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
; 3310 : 		return (_Min_value(

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3311 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3312 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 : 			));
; 3314 : 
; 3315 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 3303 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2675 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2675 : 		{	// assign [_Ptr, <null>)

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@assign:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@assign
  00017	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 2677 : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1$ = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2657 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 2658 : 		auto& _My_data = this->_Get_data();
; 2659 : 		if (_Count <= _My_data._Myres)

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 29		 ja	 SHORT $LN2@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00016	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00019	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0001c	72 02		 jb	 SHORT $LN9@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0001e	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN9@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00020	53		 push	 ebx
  00021	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2662 : 			_My_data._Mysize = _Count;

  00024	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 _memmove
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00030	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2672 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN2@assign:

; 3889 : 		if (_New_size > max_size())

  0003f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00045	0f 87 85 00 00
	00		 ja	 $LN95@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0004b	8b fb		 mov	 edi, ebx
  0004d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00050	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00056	76 07		 jbe	 SHORT $LN43@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00058	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0005d	eb 1e		 jmp	 SHORT $LN42@assign
$LN43@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0005f	8b d1		 mov	 edx, ecx
  00061	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00066	d1 ea		 shr	 edx, 1
  00068	2b c2		 sub	 eax, edx
  0006a	3b c8		 cmp	 ecx, eax
  0006c	76 07		 jbe	 SHORT $LN44@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0006e	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00073	eb 08		 jmp	 SHORT $LN42@assign
$LN44@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00075	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00078	3b f8		 cmp	 edi, eax
  0007a	0f 42 f8	 cmovb	 edi, eax
$LN42@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0007d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00086	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3899 : 		_My_data._Orphan_all();

  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00093	53		 push	 ebx
  00094	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  00097	89 7e 18	 mov	 DWORD PTR [esi+24], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009a	8b 7d 0c	 mov	 edi, DWORD PTR __New_ptr$1$[ebp]
  0009d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  0009e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a1	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000a6	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  000ac	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000b0	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b3	72 0d		 jb	 SHORT $LN21@assign

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000b5	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b6	50		 push	 eax
  000b7	ff 76 04	 push	 DWORD PTR [esi+4]
  000ba	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000bf	83 c4 08	 add	 esp, 8
$LN21@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2672 : 		}

  000c2	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000c5	8b c6		 mov	 eax, esi
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
$LN95@assign:

; 3891 : 			_Xlen();	// result too long

  000d0	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN93@assign:
  000d5	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2591 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2591 : 		{	// append [_Ptr, <null>)

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@append:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@append
  00017	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 2593 : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv536 = -12						; size = 4
__New_size$1$ = -12					; size = 4
tv537 = -8						; size = 4
__Old_size$1$ = -8					; size = 4
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1$ = 12					; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2569 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 2570 : 		auto& _My_data = this->_Get_data();
; 2571 : 		const size_type _Old_size = _My_data._Mysize;
; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000e	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f8	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b f8		 cmp	 edi, eax
  00020	77 2f		 ja	 SHORT $LN2@append

; 2573 : 			{
; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  00022	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00025	89 43 14	 mov	 DWORD PTR [ebx+20], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00028	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002b	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0002e	72 02		 jb	 SHORT $LN9@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00030	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00032	57		 push	 edi
  00033	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00036	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _memmove
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00042	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2588 : 		}

  00046	8b c3		 mov	 eax, ebx
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
$LN2@append:

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00051	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00056	2b c1		 sub	 eax, ecx
  00058	3b c7		 cmp	 eax, edi
  0005a	0f 82 d8 00 00
	00		 jb	 $LN107@append

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00060	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00063	8b f0		 mov	 esi, eax

; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00065	89 45 f4	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00068	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00071	76 07		 jbe	 SHORT $LN43@append

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00073	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00078	eb 1e		 jmp	 SHORT $LN42@append
$LN43@append:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0007a	8b ca		 mov	 ecx, edx
  0007c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00081	d1 e9		 shr	 ecx, 1
  00083	2b c1		 sub	 eax, ecx
  00085	3b d0		 cmp	 edx, eax
  00087	76 07		 jbe	 SHORT $LN44@append

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00089	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0008e	eb 08		 jmp	 SHORT $LN42@append
$LN44@append:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00090	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00093	3b f0		 cmp	 esi, eax
  00095	0f 42 f0	 cmovb	 esi, eax
$LN42@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000a1	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000a4	89 45 0c	 mov	 DWORD PTR __New_ptr$1$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  000a7	8b cb		 mov	 ecx, ebx
  000a9	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  000ae	8b 45 f4	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b1	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000b4	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000b7	8b 45 0c	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  000ba	89 73 18	 mov	 DWORD PTR [ebx+24], esi
  000bd	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c0	51		 push	 ecx
  000c1	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  000c4	89 55 f8	 mov	 DWORD PTR tv537[ebp], edx
  000c7	03 d7		 add	 edx, edi
  000c9	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000cd	89 55 f4	 mov	 DWORD PTR tv536[ebp], edx
  000d0	72 3a		 jb	 SHORT $LN21@append

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d2	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000d4	56		 push	 esi
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _memcpy
  000db	57		 push	 edi
  000dc	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000df	ff 75 f8	 push	 DWORD PTR tv537[ebp]
  000e2	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000e7	8b 45 f4	 mov	 eax, DWORD PTR tv536[ebp]
  000ea	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000ed	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]
  000f0	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	50		 push	 eax
  000f2	56		 push	 esi
  000f3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000f8	8b 45 0c	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fb	83 c4 20	 add	 esp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000fe	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 2588 : 		}

  00101	8b c3		 mov	 eax, ebx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN21@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0010c	56		 push	 esi
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memcpy
  00113	57		 push	 edi
  00114	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00117	ff 75 f8	 push	 DWORD PTR tv537[ebp]
  0011a	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  0011f	8b 45 f4	 mov	 eax, DWORD PTR tv536[ebp]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00122	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00125	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00128	8b 45 0c	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  0012b	5f		 pop	 edi
  0012c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2588 : 		}

  0012e	8b c3		 mov	 eax, ebx
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 08 00	 ret	 8
$LN107@append:

; 3925 : 			_Xlen();	// result too long

  00138	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN105@append:
  0013d	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2537 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00006	83 7a 18 10	 cmp	 DWORD PTR [edx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0000a	8d 42 04	 lea	 eax, DWORD PTR [edx+4]

; 1815 : 		if (_Large_string_engaged())

  0000d	72 02		 jb	 SHORT $LN8@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00011	ff 72 14	 push	 DWORD PTR [edx+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2540 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2526 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2526 : 		{	// append [_Ptr, <null>)

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL9@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL9@operator
  00017	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2527 : 		return (append(_Ptr));

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 2528 : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2512 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00006	83 7a 18 10	 cmp	 DWORD PTR [edx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0000a	8d 42 04	 lea	 eax, DWORD PTR [edx+4]

; 1815 : 		if (_Large_string_engaged())

  0000d	72 02		 jb	 SHORT $LN10@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00011	ff 72 14	 push	 DWORD PTR [edx+20]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2513 : 		return (append(_Right));
; 2514 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2459 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00008	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0000b	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0000e	72 0d		 jb	 SHORT $LN4@basic_stri

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00010	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	50		 push	 eax
  00012	ff 76 04	 push	 DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8
$LN4@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0001d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2023 : 		_Get_data()._Orphan_all();

  00024	8b ce		 mov	 ecx, esi

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00026	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0002d	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2023 : 		_Get_data()._Orphan_all();

  00031	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00036	6a 08		 push	 8
  00038	ff 36		 push	 DWORD PTR [esi]
  0003a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0003f	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00048	5e		 pop	 esi

; 2460 : 		_Tidy_deallocate();
; 2461 : 		}

  00049	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Lock$2 = 8						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2344 : 		{	// assign by stealing _Right's buffer, memcpy optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00026	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00029	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H

; 2345 : 			// pre: this != &_Right
; 2346 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2347 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2348 : 		auto& _Right_data = _Right._Get_data();
; 2349 : 
; 2350 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2351 : 		if (_Right_data._Large_string_engaged())

  0002d	72 35		 jb	 SHORT $LN2@Assign_rv_
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

  0002f	6a 03		 push	 3
  00031	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;
; 235  : 	_Myproxy = _Right._Myproxy;

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00045	89 07		 mov	 DWORD PTR [edi], eax

; 236  : 	_Right._Myproxy = _Temp;

  00047	89 0e		 mov	 DWORD PTR [esi], ecx

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

  00049	8b 07		 mov	 eax, DWORD PTR [edi]
  0004b	85 c0		 test	 eax, eax
  0004d	74 04		 je	 SHORT $LN22@Assign_rv_

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  0004f	89 38		 mov	 DWORD PTR [eax], edi
  00051	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN22@Assign_rv_:

; 240  : 	if (_Right._Myproxy != nullptr)

  00053	85 c9		 test	 ecx, ecx
  00055	74 02		 je	 SHORT $LN23@Assign_rv_

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  00057	89 31		 mov	 DWORD PTR [ecx], esi
$LN23@Assign_rv_:

; 242  : 	}

  00059	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2355 : 		else

  00062	eb 07		 jmp	 SHORT $LN3@Assign_rv_
$LN2@Assign_rv_:

; 2023 : 		_Get_data()._Orphan_all();

  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN3@Assign_rv_:

; 2356 : 			{
; 2357 : 			_Right._Orphan_all();
; 2358 : 			}
; 2359 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2360 : 
; 2361 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2362 : 			+ _Memcpy_move_offset;
; 2363 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2364 : 			+ _Memcpy_move_offset;
; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0006b	0f 10 46 04	 movups	 xmm0, XMMWORD PTR [esi+4]
  0006f	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0
  00073	f3 0f 7e 46 14	 movq	 xmm0, QWORD PTR [esi+20]
  00078	66 0f d6 47 14	 movq	 QWORD PTR [edi+20], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0007d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00084	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0008b	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2367 : 		}

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents, COMDAT
; _this$ = ecx

; 2321 : 		{	// assign either as an rvalue or as an lvalue copy, allocators always equal optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2322 : 			// pre: this != &_Right
; 2323 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2324 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00004	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  00008	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000e	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2326 : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2301 : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 2302 : 		if (this != _STD addressof(_Right))

  00026	3b 75 08	 cmp	 esi, DWORD PTR __Right$[ebp]
  00029	74 3d		 je	 SHORT $LN151@operator

; 2023 : 		_Get_data()._Orphan_all();

  0002b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00030	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00033	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00036	72 0d		 jb	 SHORT $LN7@operator

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;
; 3990 : 			auto& _Al = this->_Getal();
; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00038	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00039	50		 push	 eax
  0003a	ff 76 04	 push	 DWORD PTR [esi+4]
  0003d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00042	83 c4 08	 add	 esp, 8
$LN7@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00045	c6 45 f0 00	 mov	 BYTE PTR $T2[ebp], 0
  00049	8b ce		 mov	 ecx, esi
  0004b	ff 75 f0	 push	 DWORD PTR $T2[ebp]

; 3995 : 		_My_data._Mysize = 0;

  0004e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00055	ff 75 08	 push	 DWORD PTR __Right$[ebp]

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00058	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0005f	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00063	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
$LN151@operator:

; 2303 : 			{	// different, assign it
; 2304 : 			_Tidy_deallocate();
; 2305 : 			this->_Move_alloc(_Right._Getal());
; 2306 : 			// tag dispatch to remove unnecessary exception handling codegen in the
; 2307 : 			// equal allocators case
; 2308 : 			_Assign_rv_contents(_STD move(_Right), bool_constant<_Always_equal_after_move<_Alty>>{});
; 2309 : 			}
; 2310 : 
; 2311 : 		return (*this);
; 2312 : 		}

  00068	8b c6		 mov	 eax, esi
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2268 : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00026	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0002e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00035	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0003c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00041	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00044	89 06		 mov	 DWORD PTR [esi], eax

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00046	c6 45 f0 00	 mov	 BYTE PTR $T2[ebp], 0
  0004a	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0004c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00052	ff 75 f0	 push	 DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0005c	8b 06		 mov	 eax, DWORD PTR [esi]

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0005e	ff 75 08	 push	 DWORD PTR __Right$[ebp]

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00061	89 30		 mov	 DWORD PTR [eax], esi

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00063	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2270 : 		}

  00068	8b c6		 mov	 eax, esi
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2183 : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0002a	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00032	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00039	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00040	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00045	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00047	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0004a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00050	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0005b	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0005e	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00060	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00067	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 1994 : 		}
; 1995 : 
; 1996 : 	void _Free_proxy()
; 1997 : 		{	// destroy proxy
; 1998 : 		_Alproxy _Proxy_allocator(_Getal());
; 1999 : 		_Orphan_all();
; 2000 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
; 2001 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());
; 2002 : 		_Myproxy() = nullptr;
; 2003 : 		}
; 2004 : 
; 2005 : 	_Iterator_base12 **_Getpfirst() const
; 2006 : 		{	// get address of iterator chain
; 2007 : 		return (_Get_data()._Getpfirst());
; 2008 : 		}
; 2009 : 
; 2010 : 	_Container_proxy * & _Myproxy() noexcept
; 2011 : 		{	// return reference to _Myproxy
; 2012 : 		return (_Get_data()._Myproxy);
; 2013 : 		}
; 2014 : 
; 2015 : 	_Container_proxy * const & _Myproxy() const noexcept
; 2016 : 		{	// return const reference to _Myproxy
; 2017 : 		return (_Get_data()._Myproxy);
; 2018 : 		}
; 2019 : #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2020 : 
; 2021 : 	void _Orphan_all()
; 2022 : 		{	// orphan all iterators
; 2023 : 		_Get_data()._Orphan_all();
; 2024 : 		}
; 2025 : 
; 2026 : 	void _Swap_all(_String_alloc& _Right)
; 2027 : 		{	// swap all iterators
; 2028 : 		_Get_data()._Swap_all(_Right._Get_data());
; 2029 : 		}
; 2030 : 
; 2031 : 	_Alty& _Getal() noexcept
; 2032 : 		{	// return reference to allocator
; 2033 : 		return (_Mypair._Get_first());
; 2034 : 		}
; 2035 : 
; 2036 : 	const _Alty& _Getal() const noexcept
; 2037 : 		{	// return const reference to allocator
; 2038 : 		return (_Mypair._Get_first());
; 2039 : 		}
; 2040 : 
; 2041 : 	_Mydata_t& _Get_data() noexcept
; 2042 : 		{	// return reference to _String_val
; 2043 : 		return (_Mypair._Get_second());
; 2044 : 		}
; 2045 : 
; 2046 : 	const _Mydata_t& _Get_data() const noexcept
; 2047 : 		{	// return const reference to _String_val
; 2048 : 		return (_Mypair._Get_second());
; 2049 : 		}
; 2050 : 
; 2051 : private:
; 2052 : 	_Compressed_pair<_Alty, _Mydata_t> _Mypair;
; 2053 : 	};
; 2054 : 
; 2055 : 
; 2056 : 		// CLASS TEMPLATE basic_string
; 2057 : template<class _Ty>
; 2058 : 	constexpr size_t _Size_after_ebco_v
; 2059 : 		= is_empty_v<_Ty> ? 0 : sizeof(_Ty);	// get _Ty's size after being EBCO'd
; 2060 : 
; 2061 : template<class _Elem,
; 2062 : 	class _Traits = char_traits<_Elem>,
; 2063 : 	class _Alloc = allocator<_Elem>>
; 2064 : 	class basic_string
; 2065 : 		: public _String_alloc<_String_base_types<_Elem, _Alloc>>
; 2066 : 	{	// null-terminated transparent array of elements
; 2067 : public:
; 2068 : 	static_assert(!_ENFORCE_MATCHING_ALLOCATORS || is_same_v<_Elem, typename _Alloc::value_type>,
; 2069 : 		_MISMATCHED_ALLOCATOR_MESSAGE("basic_string<T, Traits, Allocator>", "T"));
; 2070 : 
; 2071 : 	static_assert(is_same_v<_Elem, typename _Traits::char_type>,
; 2072 : 		"N4659 24.3.2.1 [string.require]/3 requires that the supplied "
; 2073 : 		"char_traits character type match the string's character type.");
; 2074 : 
; 2075 : 	using _Mybase = _String_alloc<_String_base_types<_Elem, _Alloc>>;
; 2076 : 	using traits_type = _Traits;
; 2077 : 	using allocator_type = _Alloc;
; 2078 : 
; 2079 : 	using _Alty = typename _Mybase::_Alty;
; 2080 : 	using _Alty_traits = typename _Mybase::_Alty_traits;
; 2081 : 	using _Mydata_t = typename _Mybase::_Mydata_t;
; 2082 : 
; 2083 : 	using value_type = typename _Mybase::value_type;
; 2084 : 	using size_type = typename _Mybase::size_type;
; 2085 : 	using difference_type = typename _Mybase::difference_type;
; 2086 : 	using pointer = typename _Mybase::pointer;
; 2087 : 	using const_pointer = typename _Mybase::const_pointer;
; 2088 : 	using reference = value_type&;
; 2089 : 	using const_reference = const value_type&;
; 2090 : 
; 2091 : 	using iterator = typename _Mybase::iterator;
; 2092 : 	using const_iterator = typename _Mybase::const_iterator;
; 2093 : 
; 2094 : 	using reverse_iterator = _STD reverse_iterator<iterator>;
; 2095 : 	using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 2096 : 
; 2097 : 	// When doing swap / move by memcpy, we are touching:
; 2098 : 	//   _String_val::_Bx::_Buf (type is array of _Elem)
; 2099 : 	//   _String_val::_Bx::_Ptr (type is pointer)
; 2100 : 	//   _String_val::_Mysize   (type is size_type)
; 2101 : 	//   _String_val::_Myres    (type is size_type)
; 2102 : 	// N4659 24.1 [strings.general]/1 says _Elem must be a non-array POD, so memcpy is safe.
; 2103 : 	// We need to ask if pointer is safe to memcpy.
; 2104 : 	// size_type must be an unsigned integral type so memcpy is safe.
; 2105 : 	// We also need to disable memcpy if the user has supplied _Traits, since
; 2106 : 	//   they can observe traits::assign and similar.
; 2107 : 	using _Use_memcpy_move = bool_constant<
; 2108 : 		_Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>>;
; 2109 : 	// This offset skips over the _Container_base members, if any
; 2110 : 	static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v<_Container_base>;
; 2111 : 	static constexpr size_t _Memcpy_move_size = sizeof(_Mydata_t) - _Memcpy_move_offset;
; 2112 : 
; 2113 : 	template<class _Iter>
; 2114 : 		using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter,
; 2115 : 			const _Elem * const,
; 2116 : 			_Elem * const,
; 2117 : 			const _Elem *,
; 2118 : 			_Elem *>>;
; 2119 : 
; 2120 : #if _HAS_CXX17
; 2121 : 	template<class _StringViewIsh>
; 2122 : 		using _Is_string_view_ish = enable_if_t<conjunction_v<
; 2123 : 			is_convertible<const _StringViewIsh&, basic_string_view<_Elem, _Traits>>,
; 2124 : 			negation<is_convertible<const _StringViewIsh&, const _Elem *>>>>;
; 2125 : #endif /* _HAS_CXX17 */
; 2126 : 
; 2127 : 
; 2128 : 	basic_string(const basic_string& _Right)
; 2129 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
; 2130 : 		{	// construct by copying _Right
; 2131 : 		_Construct_lv_contents(_Right);
; 2132 : 		}
; 2133 : 
; 2134 : 	basic_string(const basic_string& _Right, const _Alloc& _Al)
; 2135 : 		: _Mybase(_Al)
; 2136 : 		{	// construct by copying with allocator
; 2137 : 		_Construct_lv_contents(_Right);
; 2138 : 		}
; 2139 : 
; 2140 : 	basic_string() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)
; 2141 : 		: _Mybase()
; 2142 : 		{	// construct empty string
; 2143 : 		_Tidy_init();
; 2144 : 		}
; 2145 : 
; 2146 : 	explicit basic_string(const _Alloc& _Al) noexcept
; 2147 : 		: _Mybase(_Al)
; 2148 : 		{	// construct empty string with allocator
; 2149 : 		_Tidy_init();
; 2150 : 		}
; 2151 : 
; 2152 : 	basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
; 2153 : 		: _Mybase(_Al)
; 2154 : 		{	// construct from _Right [_Roff, <end>)
; 2155 : 		_Tidy_init();
; 2156 : 		assign(_Right, _Roff, npos);
; 2157 : 		}
; 2158 : 
; 2159 : 	basic_string(const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
; 2160 : 		: _Mybase(_Al)
; 2161 : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 2162 : 		_Tidy_init();
; 2163 : 		assign(_Right, _Roff, _Count);
; 2164 : 		}
; 2165 : 
; 2166 : 	basic_string(_In_reads_(_Count) const _Elem * const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count)
; 2167 : 		: _Mybase()
; 2168 : 		{	// construct from [_Ptr, _Ptr + _Count)
; 2169 : 		_Tidy_init();
; 2170 : 		assign(_Ptr, _Count);
; 2171 : 		}
; 2172 : 
; 2173 : 	basic_string(_In_reads_(_Count) const _Elem * const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count,
; 2174 : 		const _Alloc& _Al)
; 2175 : 		: _Mybase(_Al)
; 2176 : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 2177 : 		_Tidy_init();
; 2178 : 		assign(_Ptr, _Count);
; 2179 : 		}
; 2180 : 
; 2181 : 	basic_string(_In_z_ const _Elem * const _Ptr)
; 2182 : 		: _Mybase()

  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00075	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 464  : 		return (_CSTD strlen(_First));

  00079	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0007c	0f 1f 40 00	 npad	 4
$LL75@basic_stri:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	84 c9		 test	 cl, cl
  00085	75 f9		 jne	 SHORT $LL75@basic_stri
  00087	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00089	8b ce		 mov	 ecx, esi
  0008b	50		 push	 eax
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2184 : 		_Tidy_init();
; 2185 : 		assign(_Ptr);
; 2186 : 		}

  00092	8b c6		 mov	 eax, esi
  00094	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2142 : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00025	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0002d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00034	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0003b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00040	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00042	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0004b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	89 30		 mov	 DWORD PTR [eax], esi

; 2144 : 		}

  00056	8b c6		 mov	 eax, esi

; 3976 : 		_My_data._Mysize = 0;

  00058	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0005f	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00066	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2144 : 		}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2048 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2049 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2043 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2044 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2038 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2039 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2033 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2034 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all, COMDAT
; _this$ = ecx

; 2027 : 		{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

  00027	6a 03		 push	 3
  00029	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;
; 235  : 	_Myproxy = _Right._Myproxy;

  00039	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  0003c	8b 17		 mov	 edx, DWORD PTR [edi]
  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	89 07		 mov	 DWORD PTR [edi], eax

; 236  : 	_Right._Myproxy = _Temp;

  00042	89 16		 mov	 DWORD PTR [esi], edx

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

  00044	8b 07		 mov	 eax, DWORD PTR [edi]
  00046	85 c0		 test	 eax, eax
  00048	74 04		 je	 SHORT $LN12@Swap_all

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  0004a	89 38		 mov	 DWORD PTR [eax], edi
  0004c	8b 16		 mov	 edx, DWORD PTR [esi]
$LN12@Swap_all:

; 240  : 	if (_Right._Myproxy != nullptr)

  0004e	85 d2		 test	 edx, edx
  00050	74 02		 je	 SHORT $LN13@Swap_all

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  00052	89 32		 mov	 DWORD PTR [edx], esi
$LN13@Swap_all:

; 242  : 	}

  00054	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2029 : 		}

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 2023 : 		_Get_data()._Orphan_all();

  00000	e9 00 00 00 00	 jmp	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT
; _this$ = ecx

; 2012 : 		return (_Get_data()._Myproxy);

  00000	8b c1		 mov	 eax, ecx

; 2013 : 		}

  00002	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 1997 : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00008	6a 08		 push	 8
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00011	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001a	5e		 pop	 esi

; 2003 : 		}

  0001b	c3		 ret	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 1989 : 		{	// construct proxy

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00001	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1989 : 		{	// construct proxy

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00005	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0000a	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000c	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	89 30		 mov	 DWORD PTR [eax], esi
  00020	5e		 pop	 esi

; 1994 : 		}

  00021	c3		 ret	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 1972 : 		const bool _Reload = _Alty_traits::propagate_on_container_move_assignment::value
; 1973 : 			&& _Getal() != _Al;
; 1974 : 
; 1975 : 		if (_Reload)
; 1976 : 			{
; 1977 : 			_Free_proxy();
; 1978 : 			}
; 1979 : 
; 1980 : 		_Pocma(_Getal(), _Al);
; 1981 : 
; 1982 : 		if (_Reload)
; 1983 : 			{
; 1984 : 			_Alloc_proxy();
; 1985 : 			}
; 1986 : 		}

  00000	c2 04 00	 ret	 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1948 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2023 : 		_Get_data()._Orphan_all();

  00003	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00008	6a 08		 push	 8
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00011	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2002 : 		_Myproxy() = nullptr;

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0001a	5e		 pop	 esi

; 1949 : 		_Free_proxy();
; 1950 : 		}

  0001b	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1934 : 		{	// default construct allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0000b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00012	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001e	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00020	83 c4 04	 add	 esp, 4

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 30		 mov	 DWORD PTR [eax], esi

; 1935 : 		_Alloc_proxy();
; 1936 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1862 : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1857 : 			{	// user-provided, for fancy pointers
; 1858 : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	0f 93 c0	 setae	 al

; 1826 : 		}

  00007	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1815 : 		if (_Large_string_engaged())

  00007	72 02		 jb	 SHORT $LN2@Myptr

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN2@Myptr:

; 1821 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1804 : 		if (_Large_string_engaged())

  00007	72 02		 jb	 SHORT $LN2@Myptr

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN2@Myptr:

; 1810 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1787 : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0000f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00016	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	83 c8 ff	 or	 eax, -1

; 893  : 		}

  00003	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00003	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0000b	83 c4 04	 add	 esp, 4

; 998  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000e	83 c4 08	 add	 esp, 8

; 993  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1203 : 	{	// convert size_t to size_t, unchanged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1204 : 	return (_Len);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1205 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 	_Bytes += _Non_user_size;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];
; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00010	83 00 27	 add	 DWORD PTR [eax], 39	; 00000027H
  00013	57		 push	 edi
  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	81 78 f8 fa fa
	fa fa		 cmp	 DWORD PTR [eax-8], -84215046 ; fafafafaH
  0001d	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  00020	74 44		 je	 SHORT $LN6@Adjust_man
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002c	6a 00		 push	 0
  0002e	6a 7a		 push	 122			; 0000007aH
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00035	6a 02		 push	 2
  00037	ff d1		 call	 ecx
  00039	83 c4 18	 add	 esp, 24			; 00000018H
  0003c	83 f8 01	 cmp	 eax, 1
  0003f	75 01		 jne	 SHORT $LN19@Adjust_man
  00041	cc		 int	 3
$LN19@Adjust_man:
  00042	6a 00		 push	 0
  00044	6a 7a		 push	 122			; 0000007aH
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005b	8b 06		 mov	 eax, DWORD PTR [esi]
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___CrtDbgReport
$LN6@Adjust_man:

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00066	2b c7		 sub	 eax, edi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00068	83 f8 08	 cmp	 eax, 8
  0006b	72 05		 jb	 SHORT $LN13@Adjust_man
  0006d	83 f8 27	 cmp	 eax, 39			; 00000027H
  00070	76 42		 jbe	 SHORT $LN22@Adjust_man
$LN13@Adjust_man:
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0007c	6a 00		 push	 0
  0007e	68 84 00 00 00	 push	 132			; 00000084H
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00088	6a 02		 push	 2
  0008a	ff d1		 call	 ecx
  0008c	83 c4 18	 add	 esp, 24			; 00000018H
  0008f	83 f8 01	 cmp	 eax, 1
  00092	75 01		 jne	 SHORT $LN20@Adjust_man
  00094	cc		 int	 3
$LN20@Adjust_man:
  00095	6a 00		 push	 0
  00097	68 84 00 00 00	 push	 132			; 00000084H
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b1	83 c4 14	 add	 esp, 20			; 00000014H
$LN22@Adjust_man:

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);
; 134  : 	}

  000b4	89 3e		 mov	 DWORD PTR [esi], edi
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 		}

  00003	5d		 pop	 ebp

; 52   : 		return (::operator new(_Bytes));

  00004	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 37   : 	{	// gets the size of _Count copies of a type with size 1

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	return (_Count);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 39   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Lock$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 229  : 	{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 230  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

  00027	6a 03		 push	 3
  00029	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;
; 235  : 	_Myproxy = _Right._Myproxy;

  00032	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00035	8b 17		 mov	 edx, DWORD PTR [edi]
  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	89 07		 mov	 DWORD PTR [edi], eax

; 236  : 	_Right._Myproxy = _Temp;

  0003b	89 16		 mov	 DWORD PTR [esi], edx

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

  0003d	8b 07		 mov	 eax, DWORD PTR [edi]
  0003f	85 c0		 test	 eax, eax
  00041	74 04		 je	 SHORT $LN2@Swap_all

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  00043	89 38		 mov	 DWORD PTR [eax], edi
  00045	8b 16		 mov	 edx, DWORD PTR [esi]
$LN2@Swap_all:

; 240  : 	if (_Right._Myproxy != nullptr)

  00047	85 d2		 test	 edx, edx
  00049	74 02		 je	 SHORT $LN3@Swap_all

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  0004b	89 32		 mov	 DWORD PTR [edx], esi
$LN3@Swap_all:

; 242  : 	}

  0004d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != nullptr)

  00026	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00029	74 3d		 je	 SHORT $LN5@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

  0002b	6a 03		 push	 3
  0002d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00036	8b 06		 mov	 eax, DWORD PTR [esi]

; 221  : 			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)

  00038	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0003c	74 1a		 je	 SHORT $LN3@Orphan_all
  0003e	66 90		 npad	 2
$LL4@Orphan_all:

; 222  : 			(*_Pnext)->_Myproxy = nullptr;

  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00052	85 c9		 test	 ecx, ecx
  00054	75 ea		 jne	 SHORT $LL4@Orphan_all
  00056	8b 06		 mov	 eax, DWORD PTR [esi]
$LN3@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = nullptr;
; 224  : 		}

  00058	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0005b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN5@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		: _Myproxy(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 82   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		: _Mycont(nullptr), _Myfirstiter(nullptr)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 70   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 505  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 506  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000b	88 08		 mov	 BYTE PTR [eax], cl

; 507  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 494  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  : 		}

  00003	5d		 pop	 ebp

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00004	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 470  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 472  : 		}

  00003	5d		 pop	 ebp

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00004	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 460  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  : #if _HAS_CXX17
; 462  : 		return (__builtin_strlen(_First));
; 463  : #else /* _HAS_CXX17 */
; 464  : 		return (_CSTD strlen(_First));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@length:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@length
  00017	2b c2		 sub	 eax, edx

; 465  : #endif /* _HAS_CXX17 */
; 466  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 617  : 		return (INT_MAX);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 618  : 		}

  00005	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  :         (void)_Size;
; 187  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\zlreactor\websocket.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
