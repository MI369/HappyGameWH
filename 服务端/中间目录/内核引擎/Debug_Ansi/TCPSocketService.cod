; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\内核引擎\TCPSocketService.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IServiceModule@@3U_GUID@@B DD 05980504H		; IID_IServiceModule
	DW	0a2f2H
	DW	04b0fH
	DB	09bH
	DB	054H
	DB	051H
	DB	054H
	DB	01eH
	DB	05H
	DB	05cH
	DB	0ffH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_ITCPSocketEvent@@3U_GUID@@B DD 06f5bdb91H		; IID_ITCPSocketEvent
	DW	0f72aH
	DW	0425dH
	DB	087H
	DB	03H
	DB	039H
	DB	0bcH
	DB	0f7H
	DB	01eH
	DB	0bH
	DB	03H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0CTCPSocketServiceThread@@QAE@XZ		; CTCPSocketServiceThread::CTCPSocketServiceThread
PUBLIC	??1CTCPSocketServiceThread@@UAE@XZ		; CTCPSocketServiceThread::~CTCPSocketServiceThread
PUBLIC	?OnEventThreadRun@CTCPSocketServiceThread@@UAE_NXZ ; CTCPSocketServiceThread::OnEventThreadRun
PUBLIC	?OnEventThreadStrat@CTCPSocketServiceThread@@UAE_NXZ ; CTCPSocketServiceThread::OnEventThreadStrat
PUBLIC	?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ ; CTCPSocketServiceThread::OnEventThreadConclude
PUBLIC	?ConcludeThread@CTCPSocketServiceThread@@UAE_NK@Z ; CTCPSocketServiceThread::ConcludeThread
PUBLIC	?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z ; CTCPSocketServiceThread::PostThreadRequest
PUBLIC	?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket
PUBLIC	?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z ; CTCPSocketServiceThread::PerformConnect
PUBLIC	?PerformSendData@CTCPSocketServiceThread@@AAEKGG@Z ; CTCPSocketServiceThread::PerformSendData
PUBLIC	?PerformSendData@CTCPSocketServiceThread@@AAEKGGPAXG@Z ; CTCPSocketServiceThread::PerformSendData
PUBLIC	?SendBuffer@CTCPSocketServiceThread@@AAEKPAXG@Z	; CTCPSocketServiceThread::SendBuffer
PUBLIC	?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z ; CTCPSocketServiceThread::AmortizeBuffer
PUBLIC	?CrevasseBuffer@CTCPSocketServiceThread@@AAEGQAEG@Z ; CTCPSocketServiceThread::CrevasseBuffer
PUBLIC	?EncryptBuffer@CTCPSocketServiceThread@@AAEGQAEGG@Z ; CTCPSocketServiceThread::EncryptBuffer
PUBLIC	?OnSocketNotify@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotify
PUBLIC	?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnServiceRequest
PUBLIC	?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyRead
PUBLIC	?OnSocketNotifyWrite@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyWrite
PUBLIC	?OnSocketNotifyClose@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyClose
PUBLIC	?OnSocketNotifyConnect@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyConnect
PUBLIC	??_GCTCPSocketServiceThread@@UAEPAXI@Z		; CTCPSocketServiceThread::`scalar deleting destructor'
PUBLIC	??0CTCPSocketService@@QAE@XZ			; CTCPSocketService::CTCPSocketService
PUBLIC	??1CTCPSocketService@@UAE@XZ			; CTCPSocketService::~CTCPSocketService
PUBLIC	?Release@CTCPSocketService@@UAEXXZ		; CTCPSocketService::Release
PUBLIC	?QueryInterface@CTCPSocketService@@UAEPAXABU_GUID@@K@Z ; CTCPSocketService::QueryInterface
PUBLIC	?StartService@CTCPSocketService@@UAE_NXZ	; CTCPSocketService::StartService
PUBLIC	?ConcludeService@CTCPSocketService@@UAE_NXZ	; CTCPSocketService::ConcludeService
PUBLIC	?SetServiceID@CTCPSocketService@@UAE_NG@Z	; CTCPSocketService::SetServiceID
PUBLIC	?SetTCPSocketEvent@CTCPSocketService@@UAE_NPAUIUnknownEx@@@Z ; CTCPSocketService::SetTCPSocketEvent
PUBLIC	?CloseSocket@CTCPSocketService@@UAE_NXZ		; CTCPSocketService::CloseSocket
PUBLIC	?Connect@CTCPSocketService@@UAE_NKG@Z		; CTCPSocketService::Connect
PUBLIC	?Connect@CTCPSocketService@@UAE_NPBDG@Z		; CTCPSocketService::Connect
PUBLIC	?SendData@CTCPSocketService@@UAE_NGG@Z		; CTCPSocketService::SendData
PUBLIC	?SendData@CTCPSocketService@@UAE_NGGPAXG@Z	; CTCPSocketService::SendData
PUBLIC	?OnSocketLink@CTCPSocketService@@IAE_NH@Z	; CTCPSocketService::OnSocketLink
PUBLIC	?OnSocketShut@CTCPSocketService@@IAE_NE@Z	; CTCPSocketService::OnSocketShut
PUBLIC	?OnSocketRead@CTCPSocketService@@IAE_NUTCP_Command@@PAXG@Z ; CTCPSocketService::OnSocketRead
PUBLIC	?TranslateAddress@CTCPSocketService@@AAEKPBD@Z	; CTCPSocketService::TranslateAddress
PUBLIC	??_GCTCPSocketService@@UAEPAXI@Z		; CTCPSocketService::`scalar deleting destructor'
PUBLIC	_CreateTCPSocketService
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IServiceModule@@6B@				; IServiceModule::`vftable'
PUBLIC	??_7ITCPSocketService@@6B@			; ITCPSocketService::`vftable'
PUBLIC	??_7CTCPSocketServiceThread@@6B@		; CTCPSocketServiceThread::`vftable'
PUBLIC	??_7CTCPSocketService@@6B@			; CTCPSocketService::`vftable'
PUBLIC	??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_0BN@IDFIFOBN@TCPSocketStatusServiceThread@ ; `string'
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	__CT??_R0H@84
PUBLIC	__TI2PAD
PUBLIC	__CTA2PAD
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_C@_0BD@DINLBKIB@?J?$PN?$LO?$NN?$LA?$PM?$LN?b?C?$NM?$LD?$KE?$LG?H?$LE?m?N?s@ ; `string'
PUBLIC	??_C@_0BB@GKKJNMOA@?J?$PN?$LO?$NN?$LA?$PM?P?$KH?Q?i?B?k?$LE?m?N?s@ ; `string'
PUBLIC	??_C@_0BL@KIGJPCPC@?M?x?B?g?A?$KM?$LN?S?$LJ?X?$LB?U?$KD?$KM?$LG?A?H?$KB?J?$PN?$LO?$NN?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0P@BBEPCAEF@?J?$PN?$LO?$NN?$LA?$PM?$LA?f?$LB?$LO?$LE?m?N?s@ ; `string'
PUBLIC	??_C@_0L@CGBOKMKC@?J?$PN?$LO?$NN?$LA?$PM?L?$KL?$LE?s@ ; `string'
PUBLIC	??_C@_0BD@GNALJNHF@?M?x?B?g?J?$PN?$LO?$NN?$LA?$PM?$LE?$KG?$MA?m?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServiceModule@@6B@			; IServiceModule::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServiceModule@@@8			; IServiceModule `RTTI Type Descriptor'
PUBLIC	??_R3IServiceModule@@8				; IServiceModule::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServiceModule@@8				; IServiceModule::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServiceModule@@8			; IServiceModule::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ITCPSocketService@@6B@			; ITCPSocketService::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUITCPSocketService@@@8			; ITCPSocketService `RTTI Type Descriptor'
PUBLIC	??_R3ITCPSocketService@@8			; ITCPSocketService::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITCPSocketService@@8			; ITCPSocketService::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITCPSocketService@@8		; ITCPSocketService::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTCPSocketServiceThread@@6B@		; CTCPSocketServiceThread::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTCPSocketServiceThread@@@8		; CTCPSocketServiceThread `RTTI Type Descriptor'
PUBLIC	??_R3CTCPSocketServiceThread@@8			; CTCPSocketServiceThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTCPSocketServiceThread@@8			; CTCPSocketServiceThread::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTCPSocketServiceThread@@8	; CTCPSocketServiceThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CWHThread@@8			; CWHThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWHThread@@@8				; CWHThread `RTTI Type Descriptor'
PUBLIC	??_R3CWHThread@@8				; CWHThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHThread@@8				; CWHThread::`RTTI Base Class Array'
PUBLIC	??_R4CTCPSocketService@@6B@			; CTCPSocketService::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTCPSocketService@@@8			; CTCPSocketService `RTTI Type Descriptor'
PUBLIC	??_R3CTCPSocketService@@8			; CTCPSocketService::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTCPSocketService@@8			; CTCPSocketService::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTCPSocketService@@8		; CTCPSocketService::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp__GetDesktopWindow@0:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__connect@12:PROC
EXTRN	__imp__htonl@4:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__inet_addr@4:PROC
EXTRN	__imp__recv@16:PROC
EXTRN	__imp__send@16:PROC
EXTRN	__imp__socket@12:PROC
EXTRN	__imp__gethostbyname@4:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__WSAAsyncSelect@16:PROC
EXTRN	__imp__CoCreateGuid@4:PROC
EXTRN	?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ:PROC ; AfxGetInstanceHandle
EXTRN	??0CCriticalSection@@QAE@XZ:PROC		; CCriticalSection::CCriticalSection
EXTRN	??1CCriticalSection@@UAE@XZ:PROC		; CCriticalSection::~CCriticalSection
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_??0CWHThread@@IAE@XZ:PROC
EXTRN	__imp_??1CWHThread@@MAE@XZ:PROC
EXTRN	__imp_?ConcludeThread@CWHThread@@UAE_NK@Z:PROC
EXTRN	__imp_?PostThreadMessageA@CWHThread@@QAEJIIJ@Z:PROC
EXTRN	__imp_??0CWHDataQueue@@QAE@XZ:PROC
EXTRN	__imp_??1CWHDataQueue@@UAE@XZ:PROC
EXTRN	__imp_?InsertData@CWHDataQueue@@QAE_NGPAXG@Z:PROC
EXTRN	__imp_?RemoveData@CWHDataQueue@@QAEX_N@Z:PROC
EXTRN	__imp_?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z:PROC
EXTRN	__imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z:PROC
EXTRN	__imp_??1CWHDataLocker@@UAE@XZ:PROC
EXTRN	??_ECTCPSocketServiceThread@@UAEPAXI@Z:PROC	; CTCPSocketServiceThread::`vector deleting destructor'
EXTRN	??_ECTCPSocketService@@UAEPAXI@Z:PROC		; CTCPSocketService::`vector deleting destructor'
EXTRN	?IsRuning@CWHThread@@UAE_NXZ:PROC		; CWHThread::IsRuning
EXTRN	?StartThread@CWHThread@@UAE_NXZ:PROC		; CWHThread::StartThread
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CTCPSocketService@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTCPSocketService@@8 DD FLAT:??_R0?AVCTCPSocketService@@@8 ; CTCPSocketService::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTCPSocketService@@8
rdata$r	ENDS
;	COMDAT ??_R2CTCPSocketService@@8
rdata$r	SEGMENT
??_R2CTCPSocketService@@8 DD FLAT:??_R1A@?0A@EA@CTCPSocketService@@8 ; CTCPSocketService::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ITCPSocketService@@8
	DD	FLAT:??_R1A@?0A@EA@IServiceModule@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CTCPSocketService@@8
rdata$r	SEGMENT
??_R3CTCPSocketService@@8 DD 00H			; CTCPSocketService::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CTCPSocketService@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTCPSocketService@@@8
data$r	SEGMENT
??_R0?AVCTCPSocketService@@@8 DD FLAT:??_7type_info@@6B@ ; CTCPSocketService `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTCPSocketService@@', 00H
data$r	ENDS
;	COMDAT ??_R4CTCPSocketService@@6B@
rdata$r	SEGMENT
??_R4CTCPSocketService@@6B@ DD 00H			; CTCPSocketService::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTCPSocketService@@@8
	DD	FLAT:??_R3CTCPSocketService@@8
rdata$r	ENDS
;	COMDAT ??_R2CWHThread@@8
rdata$r	SEGMENT
??_R2CWHThread@@8 DD FLAT:??_R1A@?0A@EA@CWHThread@@8	; CWHThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHThread@@8
rdata$r	SEGMENT
??_R3CWHThread@@8 DD 00H				; CWHThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHThread@@@8
data$r	SEGMENT
??_R0?AVCWHThread@@@8 DD FLAT:??_7type_info@@6B@	; CWHThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHThread@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHThread@@8 DD FLAT:??_R0?AVCWHThread@@@8 ; CWHThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTCPSocketServiceThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTCPSocketServiceThread@@8 DD FLAT:??_R0?AVCTCPSocketServiceThread@@@8 ; CTCPSocketServiceThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTCPSocketServiceThread@@8
rdata$r	ENDS
;	COMDAT ??_R2CTCPSocketServiceThread@@8
rdata$r	SEGMENT
??_R2CTCPSocketServiceThread@@8 DD FLAT:??_R1A@?0A@EA@CTCPSocketServiceThread@@8 ; CTCPSocketServiceThread::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R3CTCPSocketServiceThread@@8
rdata$r	SEGMENT
??_R3CTCPSocketServiceThread@@8 DD 00H			; CTCPSocketServiceThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CTCPSocketServiceThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTCPSocketServiceThread@@@8
data$r	SEGMENT
??_R0?AVCTCPSocketServiceThread@@@8 DD FLAT:??_7type_info@@6B@ ; CTCPSocketServiceThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTCPSocketServiceThread@@', 00H
data$r	ENDS
;	COMDAT ??_R4CTCPSocketServiceThread@@6B@
rdata$r	SEGMENT
??_R4CTCPSocketServiceThread@@6B@ DD 00H		; CTCPSocketServiceThread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTCPSocketServiceThread@@@8
	DD	FLAT:??_R3CTCPSocketServiceThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITCPSocketService@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITCPSocketService@@8 DD FLAT:??_R0?AUITCPSocketService@@@8 ; ITCPSocketService::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITCPSocketService@@8
rdata$r	ENDS
;	COMDAT ??_R2ITCPSocketService@@8
rdata$r	SEGMENT
??_R2ITCPSocketService@@8 DD FLAT:??_R1A@?0A@EA@ITCPSocketService@@8 ; ITCPSocketService::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IServiceModule@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3ITCPSocketService@@8
rdata$r	SEGMENT
??_R3ITCPSocketService@@8 DD 00H			; ITCPSocketService::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ITCPSocketService@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITCPSocketService@@@8
data$r	SEGMENT
??_R0?AUITCPSocketService@@@8 DD FLAT:??_7type_info@@6B@ ; ITCPSocketService `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITCPSocketService@@', 00H
data$r	ENDS
;	COMDAT ??_R4ITCPSocketService@@6B@
rdata$r	SEGMENT
??_R4ITCPSocketService@@6B@ DD 00H			; ITCPSocketService::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUITCPSocketService@@@8
	DD	FLAT:??_R3ITCPSocketService@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServiceModule@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServiceModule@@8 DD FLAT:??_R0?AUIServiceModule@@@8 ; IServiceModule::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R2IServiceModule@@8
rdata$r	SEGMENT
??_R2IServiceModule@@8 DD FLAT:??_R1A@?0A@EA@IServiceModule@@8 ; IServiceModule::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServiceModule@@8
rdata$r	SEGMENT
??_R3IServiceModule@@8 DD 00H				; IServiceModule::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServiceModule@@@8
data$r	SEGMENT
??_R0?AUIServiceModule@@@8 DD FLAT:??_7type_info@@6B@	; IServiceModule `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServiceModule@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServiceModule@@6B@
rdata$r	SEGMENT
??_R4IServiceModule@@6B@ DD 00H				; IServiceModule::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServiceModule@@@8
	DD	FLAT:??_R3IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@ DB 0bdH, 0d3H, 0bfH
	DB	0daH, 0b2H, 0e9H, 0d1H, 0afH, 0caH, 0a7H, 0b0H, 0dcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@ DB 0b4H, 0b4H, 0bdH, 0a8H
	DB	0caH, 0a7H, 0b0H, 0dcH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GNALJNHF@?M?x?B?g?J?$PN?$LO?$NN?$LA?$PM?$LE?$KG?$MA?m?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_0BD@GNALJNHF@?M?x?B?g?J?$PN?$LO?$NN?$LA?$PM?$LE?$KG?$MA?m?J?$KH?$LA?$NM@ DB 0cdH
	DB	0f8H, 0c2H, 0e7H, 0caH, 0fdH, 0beH, 0ddH, 0b0H, 0fcH, 0b4H, 0a6H
	DB	0c0H, 0edH, 0caH, 0a7H, 0b0H, 0dcH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CGBOKMKC@?J?$PN?$LO?$NN?$LA?$PM?L?$KL?$LE?s@
CONST	SEGMENT
??_C@_0L@CGBOKMKC@?J?$PN?$LO?$NN?$LA?$PM?L?$KL?$LE?s@ DB 0caH, 0fdH, 0beH
	DB	0ddH, 0b0H, 0fcH, 0ccH, 0abH, 0b4H, 0f3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BBEPCAEF@?J?$PN?$LO?$NN?$LA?$PM?$LA?f?$LB?$LO?$LE?m?N?s@
CONST	SEGMENT
??_C@_0P@BBEPCAEF@?J?$PN?$LO?$NN?$LA?$PM?$LA?f?$LB?$LO?$LE?m?N?s@ DB 0caH
	DB	0fdH, 0beH, 0ddH, 0b0H, 0fcH, 0b0H, 0e6H, 0b1H, 0beH, 0b4H, 0edH
	DB	0ceH, 0f3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KIGJPCPC@?M?x?B?g?A?$KM?$LN?S?$LJ?X?$LB?U?$KD?$KM?$LG?A?H?$KB?J?$PN?$LO?$NN?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_0BL@KIGJPCPC@?M?x?B?g?A?$KM?$LN?S?$LJ?X?$LB?U?$KD?$KM?$LG?A?H?$KB?J?$PN?$LO?$NN?J?$KH?$LA?$NM@ DB 0cdH
	DB	0f8H, 0c2H, 0e7H, 0c1H, 0acH, 0bdH, 0d3H, 0b9H, 0d8H, 0b1H, 0d5H
	DB	0a3H, 0acH, 0b6H, 0c1H, 0c8H, 0a1H, 0caH, 0fdH, 0beH, 0ddH, 0caH
	DB	0a7H, 0b0H, 0dcH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GKKJNMOA@?J?$PN?$LO?$NN?$LA?$PM?P?$KH?Q?i?B?k?$LE?m?N?s@
CONST	SEGMENT
??_C@_0BB@GKKJNMOA@?J?$PN?$LO?$NN?$LA?$PM?P?$KH?Q?i?B?k?$LE?m?N?s@ DB 0caH
	DB	0fdH, 0beH, 0ddH, 0b0H, 0fcH, 0d0H, 0a7H, 0d1H, 0e9H, 0c2H, 0ebH
	DB	0b4H, 0edH, 0ceH, 0f3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DINLBKIB@?J?$PN?$LO?$NN?$LA?$PM?$LN?b?C?$NM?$LD?$KE?$LG?H?$LE?m?N?s@
CONST	SEGMENT
??_C@_0BD@DINLBKIB@?J?$PN?$LO?$NN?$LA?$PM?$LN?b?C?$NM?$LD?$KE?$LG?H?$LE?m?N?s@ DB 0caH
	DB	0fdH, 0beH, 0ddH, 0b0H, 0fcH, 0bdH, 0e2H, 0c3H, 0dcH, 0b3H, 0a4H
	DB	0b6H, 0c8H, 0b4H, 0edH, 0ceH, 0f3H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
xdata$x	ENDS
;	COMDAT ??_C@_0BN@IDFIFOBN@TCPSocketStatusServiceThread@
CONST	SEGMENT
??_C@_0BN@IDFIFOBN@TCPSocketStatusServiceThread@ DB 'TCPSocketStatusServi'
	DB	'ceThread', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0c4H, 0daH, 0baH, 0cbH, 0d2H, 0fdH, 0c7H, 0e6H, '\t'
	DB	'cpsocketservice.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CTCPSocketService@@6B@
CONST	SEGMENT
??_7CTCPSocketService@@6B@ DD FLAT:??_R4CTCPSocketService@@6B@ ; CTCPSocketService::`vftable'
	DD	FLAT:?Release@CTCPSocketService@@UAEXXZ
	DD	FLAT:?QueryInterface@CTCPSocketService@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?StartService@CTCPSocketService@@UAE_NXZ
	DD	FLAT:?ConcludeService@CTCPSocketService@@UAE_NXZ
	DD	FLAT:?SetServiceID@CTCPSocketService@@UAE_NG@Z
	DD	FLAT:?SetTCPSocketEvent@CTCPSocketService@@UAE_NPAUIUnknownEx@@@Z
	DD	FLAT:?CloseSocket@CTCPSocketService@@UAE_NXZ
	DD	FLAT:?Connect@CTCPSocketService@@UAE_NPBDG@Z
	DD	FLAT:?Connect@CTCPSocketService@@UAE_NKG@Z
	DD	FLAT:?SendData@CTCPSocketService@@UAE_NGGPAXG@Z
	DD	FLAT:?SendData@CTCPSocketService@@UAE_NGG@Z
	DD	FLAT:??_ECTCPSocketService@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CTCPSocketServiceThread@@6B@
CONST	SEGMENT
??_7CTCPSocketServiceThread@@6B@ DD FLAT:??_R4CTCPSocketServiceThread@@6B@ ; CTCPSocketServiceThread::`vftable'
	DD	FLAT:??_ECTCPSocketServiceThread@@UAEPAXI@Z
	DD	FLAT:?IsRuning@CWHThread@@UAE_NXZ
	DD	FLAT:?StartThread@CWHThread@@UAE_NXZ
	DD	FLAT:?ConcludeThread@CTCPSocketServiceThread@@UAE_NK@Z
	DD	FLAT:?OnEventThreadRun@CTCPSocketServiceThread@@UAE_NXZ
	DD	FLAT:?OnEventThreadStrat@CTCPSocketServiceThread@@UAE_NXZ
	DD	FLAT:?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ
CONST	ENDS
;	COMDAT ??_7ITCPSocketService@@6B@
CONST	SEGMENT
??_7ITCPSocketService@@6B@ DD FLAT:??_R4ITCPSocketService@@6B@ ; ITCPSocketService::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IServiceModule@@6B@
CONST	SEGMENT
??_7IServiceModule@@6B@ DD FLAT:??_R4IServiceModule@@6B@ ; IServiceModule::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
CONST	SEGMENT
?g_SendByteMap@@3QBEB DB 070H				; g_SendByteMap
	DB	02fH
	DB	040H
	DB	05fH
	DB	044H
	DB	08eH
	DB	06eH
	DB	045H
	DB	07eH
	DB	0abH
	DB	02cH
	DB	01fH
	DB	0b4H
	DB	0acH
	DB	09dH
	DB	091H
	DB	0dH
	DB	036H
	DB	09bH
	DB	0bH
	DB	0d4H
	DB	0c4H
	DB	039H
	DB	074H
	DB	0bfH
	DB	023H
	DB	016H
	DB	014H
	DB	06H
	DB	0ebH
	DB	04H
	DB	03eH
	DB	012H
	DB	05cH
	DB	08bH
	DB	0bcH
	DB	061H
	DB	063H
	DB	0f6H
	DB	0a5H
	DB	0e1H
	DB	065H
	DB	0d8H
	DB	0f5H
	DB	05aH
	DB	07H
	DB	0f0H
	DB	013H
	DB	0f2H
	DB	020H
	DB	06bH
	DB	04aH
	DB	024H
	DB	059H
	DB	089H
	DB	064H
	DB	0d7H
	DB	042H
	DB	06aH
	DB	05eH
	DB	03dH
	DB	0aH
	DB	077H
	DB	0e0H
	DB	080H
	DB	027H
	DB	0b8H
	DB	0c5H
	DB	08cH
	DB	0eH
	DB	0faH
	DB	08aH
	DB	0d5H
	DB	029H
	DB	056H
	DB	057H
	DB	06cH
	DB	053H
	DB	067H
	DB	041H
	DB	0e8H
	DB	00H
	DB	01aH
	DB	0ceH
	DB	086H
	DB	083H
	DB	0b0H
	DB	022H
	DB	028H
	DB	04dH
	DB	03fH
	DB	026H
	DB	046H
	DB	04fH
	DB	06fH
	DB	02bH
	DB	072H
	DB	03aH
	DB	0f1H
	DB	08dH
	DB	097H
	DB	095H
	DB	049H
	DB	084H
	DB	0e5H
	DB	0e3H
	DB	079H
	DB	08fH
	DB	051H
	DB	010H
	DB	0a8H
	DB	082H
	DB	0c6H
	DB	0ddH
	DB	0ffH
	DB	0fcH
	DB	0e4H
	DB	0cfH
	DB	0b3H
	DB	09H
	DB	05dH
	DB	0eaH
	DB	09cH
	DB	034H
	DB	0f9H
	DB	017H
	DB	09fH
	DB	0daH
	DB	087H
	DB	0f8H
	DB	015H
	DB	05H
	DB	03cH
	DB	0d3H
	DB	0a4H
	DB	085H
	DB	02eH
	DB	0fbH
	DB	0eeH
	DB	047H
	DB	03bH
	DB	0efH
	DB	037H
	DB	07fH
	DB	093H
	DB	0afH
	DB	069H
	DB	0cH
	DB	071H
	DB	031H
	DB	0deH
	DB	021H
	DB	075H
	DB	0a0H
	DB	0aaH
	DB	0baH
	DB	07cH
	DB	038H
	DB	02H
	DB	0b7H
	DB	081H
	DB	01H
	DB	0fdH
	DB	0e7H
	DB	01dH
	DB	0ccH
	DB	0cdH
	DB	0bdH
	DB	01bH
	DB	07aH
	DB	02aH
	DB	0adH
	DB	066H
	DB	0beH
	DB	055H
	DB	033H
	DB	03H
	DB	0dbH
	DB	088H
	DB	0b2H
	DB	01eH
	DB	04eH
	DB	0b9H
	DB	0e6H
	DB	0c2H
	DB	0f7H
	DB	0cbH
	DB	07dH
	DB	0c9H
	DB	062H
	DB	0c3H
	DB	0a6H
	DB	0dcH
	DB	0a7H
	DB	050H
	DB	0b5H
	DB	04bH
	DB	094H
	DB	0c0H
	DB	092H
	DB	04cH
	DB	011H
	DB	05bH
	DB	078H
	DB	0d9H
	DB	0b1H
	DB	0edH
	DB	019H
	DB	0e9H
	DB	0a1H
	DB	01cH
	DB	0b6H
	DB	032H
	DB	099H
	DB	0a3H
	DB	076H
	DB	09eH
	DB	07bH
	DB	06dH
	DB	09aH
	DB	030H
	DB	0d6H
	DB	0a9H
	DB	025H
	DB	0c7H
	DB	0aeH
	DB	096H
	DB	035H
	DB	0d0H
	DB	0bbH
	DB	0d2H
	DB	0c8H
	DB	0a2H
	DB	08H
	DB	0f3H
	DB	0d1H
	DB	073H
	DB	0f4H
	DB	048H
	DB	02dH
	DB	090H
	DB	0caH
	DB	0e2H
	DB	058H
	DB	0c1H
	DB	018H
	DB	052H
	DB	0feH
	DB	0dfH
	DB	068H
	DB	098H
	DB	054H
	DB	0ecH
	DB	060H
	DB	043H
	DB	0fH
?g_RecvByteMap@@3QBEB DB 051H				; g_RecvByteMap
	DB	0a1H
	DB	09eH
	DB	0b0H
	DB	01eH
	DB	083H
	DB	01cH
	DB	02dH
	DB	0e9H
	DB	077H
	DB	03dH
	DB	013H
	DB	093H
	DB	010H
	DB	045H
	DB	0ffH
	DB	06dH
	DB	0c9H
	DB	020H
	DB	02fH
	DB	01bH
	DB	082H
	DB	01aH
	DB	07dH
	DB	0f5H
	DB	0cfH
	DB	052H
	DB	0a8H
	DB	0d2H
	DB	0a4H
	DB	0b4H
	DB	0bH
	DB	031H
	DB	097H
	DB	057H
	DB	019H
	DB	034H
	DB	0dfH
	DB	05bH
	DB	041H
	DB	058H
	DB	049H
	DB	0aaH
	DB	05fH
	DB	0aH
	DB	0efH
	DB	088H
	DB	01H
	DB	0dcH
	DB	095H
	DB	0d4H
	DB	0afH
	DB	07bH
	DB	0e3H
	DB	011H
	DB	08eH
	DB	09dH
	DB	016H
	DB	061H
	DB	08cH
	DB	084H
	DB	03cH
	DB	01fH
	DB	05aH
	DB	02H
	DB	04fH
	DB	039H
	DB	0feH
	DB	04H
	DB	07H
	DB	05cH
	DB	08bH
	DB	0eeH
	DB	066H
	DB	033H
	DB	0c4H
	DB	0c8H
	DB	059H
	DB	0b5H
	DB	05dH
	DB	0c2H
	DB	06cH
	DB	0f6H
	DB	04dH
	DB	0fbH
	DB	0aeH
	DB	04aH
	DB	04bH
	DB	0f3H
	DB	035H
	DB	02cH
	DB	0caH
	DB	021H
	DB	078H
	DB	03bH
	DB	03H
	DB	0fdH
	DB	024H
	DB	0bdH
	DB	025H
	DB	037H
	DB	029H
	DB	0acH
	DB	04eH
	DB	0f9H
	DB	092H
	DB	03aH
	DB	032H
	DB	04cH
	DB	0daH
	DB	06H
	DB	05eH
	DB	00H
	DB	094H
	DB	060H
	DB	0ecH
	DB	017H
	DB	098H
	DB	0d7H
	DB	03eH
	DB	0cbH
	DB	06aH
	DB	0a9H
	DB	0d9H
	DB	09cH
	DB	0bbH
	DB	08H
	DB	08fH
	DB	040H
	DB	0a0H
	DB	06fH
	DB	055H
	DB	067H
	DB	087H
	DB	054H
	DB	080H
	DB	0b2H
	DB	036H
	DB	047H
	DB	022H
	DB	044H
	DB	063H
	DB	05H
	DB	06bH
	DB	0f0H
	DB	0fH
	DB	0c7H
	DB	090H
	DB	0c5H
	DB	065H
	DB	0e2H
	DB	064H
	DB	0faH
	DB	0d5H
	DB	0dbH
	DB	012H
	DB	07aH
	DB	0eH
	DB	0d8H
	DB	07eH
	DB	099H
	DB	0d1H
	DB	0e8H
	DB	0d6H
	DB	086H
	DB	027H
	DB	0bfH
	DB	0c1H
	DB	06eH
	DB	0deH
	DB	09aH
	DB	09H
	DB	0dH
	DB	0abH
	DB	0e1H
	DB	091H
	DB	056H
	DB	0cdH
	DB	0b3H
	DB	076H
	DB	0cH
	DB	0c3H
	DB	0d3H
	DB	09fH
	DB	042H
	DB	0b6H
	DB	09bH
	DB	0e5H
	DB	023H
	DB	0a7H
	DB	0adH
	DB	018H
	DB	0c6H
	DB	0f4H
	DB	0b8H
	DB	0beH
	DB	015H
	DB	043H
	DB	070H
	DB	0e0H
	DB	0e7H
	DB	0bcH
	DB	0f1H
	DB	0baH
	DB	0a5H
	DB	0a6H
	DB	053H
	DB	075H
	DB	0e4H
	DB	0ebH
	DB	0e6H
	DB	085H
	DB	014H
	DB	048H
	DB	0ddH
	DB	038H
	DB	02aH
	DB	0ccH
	DB	07fH
	DB	0b1H
	DB	0c0H
	DB	071H
	DB	096H
	DB	0f8H
	DB	03fH
	DB	028H
	DB	0f2H
	DB	069H
	DB	074H
	DB	068H
	DB	0b7H
	DB	0a3H
	DB	050H
	DB	0d0H
	DB	079H
	DB	01dH
	DB	0fcH
	DB	0ceH
	DB	08aH
	DB	08dH
	DB	02eH
	DB	062H
	DB	030H
	DB	0eaH
	DB	0edH
	DB	02bH
	DB	026H
	DB	0b9H
	DB	081H
	DB	07cH
	DB	046H
	DB	089H
	DB	073H
	DB	0a2H
	DB	0f7H
	DB	072H
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_CreateTCPSocketService$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_CreateTCPSocketService$2
__catchsym$_CreateTCPSocketService$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_CreateTCPSocketService$0
__ehfuncinfo$_CreateTCPSocketService DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$_CreateTCPSocketService
	DD	02H
	DD	FLAT:__tryblocktable$_CreateTCPSocketService
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_CreateTCPSocketService DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_CreateTCPSocketService$5
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$_CreateTCPSocketService$6
__unwindtable$_CreateTCPSocketService DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_CreateTCPSocketService$4
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTCPSocketService@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z$0
__unwindtable$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z$2
__ehfuncinfo$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z
	DD	01H
	DD	FLAT:__tryblocktable$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z$0
__ehfuncinfo$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$2
__catchsym$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$0
__unwindtable$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z
	DD	02H
	DD	FLAT:__tryblocktable$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z$0
__unwindtable$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z$2
__ehfuncinfo$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z
	DD	01H
	DD	FLAT:__tryblocktable$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z$0
__ehfuncinfo$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ$0
__ehfuncinfo$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CTCPSocketServiceThread@@UAE@XZ$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CTCPSocketServiceThread@@UAE@XZ$0
__tryblocktable$??1CTCPSocketServiceThread@@UAE@XZ DD 03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??1CTCPSocketServiceThread@@UAE@XZ$5
__ehfuncinfo$??1CTCPSocketServiceThread@@UAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1CTCPSocketServiceThread@@UAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CTCPSocketServiceThread@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1CTCPSocketServiceThread@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CTCPSocketServiceThread@@UAE@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$??1CTCPSocketServiceThread@@UAE@XZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$??1CTCPSocketServiceThread@@UAE@XZ$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTCPSocketServiceThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTCPSocketServiceThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTCPSocketServiceThread@@QAE@XZ$1
__ehfuncinfo$??0CTCPSocketServiceThread@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CTCPSocketServiceThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
tv66 = -28						; size = 4
tv86 = -24						; size = 4
__Ptrdest$ = -20					; size = 4
__Ptrnext$1 = -16					; size = 4
__Count$ = -12						; size = 4
tv83 = -8						; size = 4
tv89 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0000f	83 c1 01	 add	 ecx, 1
  00012	89 4d e8	 mov	 DWORD PTR tv86[ebp], ecx
$LL7@Maklocstr:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv83[ebp]
  00018	8a 02		 mov	 al, BYTE PTR [edx]
  0001a	88 45 ff	 mov	 BYTE PTR tv89[ebp], al
  0001d	83 45 f8 01	 add	 DWORD PTR tv83[ebp], 1
  00021	80 7d ff 00	 cmp	 BYTE PTR tv89[ebp], 0
  00025	75 ee		 jne	 SHORT $LL7@Maklocstr
  00027	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0002a	2b 4d e8	 sub	 ecx, DWORD PTR tv86[ebp]
  0002d	89 4d e4	 mov	 DWORD PTR tv66[ebp], ecx
  00030	8b 55 e4	 mov	 edx, DWORD PTR tv66[ebp]
  00033	83 c2 01	 add	 edx, 1
  00036	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  00039	68 9c 02 00 00	 push	 668			; 0000029cH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00043	6a 02		 push	 2
  00045	6a 01		 push	 1
  00047	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00051	83 c4 14	 add	 esp, 20			; 00000014H
  00054	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00057	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005b	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0005d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00062	8b 4d ec	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  00065	89 4d f0	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00068	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0006a	8b 55 f4	 mov	 edx, DWORD PTR __Count$[ebp]
  0006d	83 ea 01	 sub	 edx, 1
  00070	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx
  00073	8b 45 f0	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00076	83 c0 01	 add	 eax, 1
  00079	89 45 f0	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0007f	83 c1 01	 add	 ecx, 1
  00082	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
$LN4@Maklocstr:
  00085	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00089	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0008b	8b 55 f0	 mov	 edx, DWORD PTR __Ptrnext$1[ebp]
  0008e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	88 0a		 mov	 BYTE PTR [edx], cl
  00095	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00097	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT _CreateTCPSocketService
_TEXT	SEGMENT
tv129 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
tv150 = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
tv151 = -44						; size = 4
tv153 = -40						; size = 4
_pObject$6 = -36					; size = 4
tv75 = -32						; size = 4
$T7 = -28						; size = 4
$T8 = -24						; size = 4
_pTCPSocketService$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
_Guid$ = 8						; size = 4
_dwInterfaceVer$ = 12					; size = 4
_CreateTCPSocketService PROC				; COMDAT

; 1109 : DECLARE_CREATE_MODULE(TCPSocketService);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_CreateTCPSocketService
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 34	 sub	 esp, 52			; 00000034H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pTCPSocketService$[ebp], 0
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	68 98 80 02 00	 push	 163992			; 00028098H
  0003f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 d8	 mov	 DWORD PTR tv153[ebp], eax
  0004a	8b 45 d8	 mov	 eax, DWORD PTR tv153[ebp]
  0004d	89 45 e4	 mov	 DWORD PTR $T7[ebp], eax
  00050	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00054	83 7d e4 00	 cmp	 DWORD PTR $T7[ebp], 0
  00058	74 13		 je	 SHORT $LN7@CreateTCPS
  0005a	8b 4d e4	 mov	 ecx, DWORD PTR $T7[ebp]
  0005d	e8 00 00 00 00	 call	 ??0CTCPSocketService@@QAE@XZ ; CTCPSocketService::CTCPSocketService
  00062	89 45 d4	 mov	 DWORD PTR tv151[ebp], eax
  00065	8b 4d d4	 mov	 ecx, DWORD PTR tv151[ebp]
  00068	89 4d e0	 mov	 DWORD PTR tv75[ebp], ecx
  0006b	eb 07		 jmp	 SHORT $LN8@CreateTCPS
$LN7@CreateTCPS:
  0006d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN8@CreateTCPS:
  00074	8b 55 e0	 mov	 edx, DWORD PTR tv75[ebp]
  00077	89 55 d0	 mov	 DWORD PTR $T5[ebp], edx
  0007a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0007e	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  00081	89 45 ec	 mov	 DWORD PTR _pTCPSocketService$[ebp], eax
  00084	83 7d ec 00	 cmp	 DWORD PTR _pTCPSocketService$[ebp], 0
  00088	75 15		 jne	 SHORT $LN3@CreateTCPS
  0008a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@
  00091	68 00 00 00 00	 push	 OFFSET __TI2PAD
  00096	8d 4d cc	 lea	 ecx, DWORD PTR $T4[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@CreateTCPS:
  0009f	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d ec	 mov	 ecx, DWORD PTR _pTCPSocketService$[ebp]
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	8b 4d ec	 mov	 ecx, DWORD PTR _pTCPSocketService$[ebp]
  000af	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b2	ff d0		 call	 eax
  000b4	89 45 c8	 mov	 DWORD PTR tv150[ebp], eax
  000b7	8b 4d c8	 mov	 ecx, DWORD PTR tv150[ebp]
  000ba	89 4d dc	 mov	 DWORD PTR _pObject$6[ebp], ecx
  000bd	83 7d dc 00	 cmp	 DWORD PTR _pObject$6[ebp], 0
  000c1	75 15		 jne	 SHORT $LN4@CreateTCPS
  000c3	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@
  000ca	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000cf	8d 55 c4	 lea	 edx, DWORD PTR $T3[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@CreateTCPS:
  000d8	8b 45 dc	 mov	 eax, DWORD PTR _pObject$6[ebp]
  000db	e9 83 00 00 00	 jmp	 $LN6@CreateTCPS
__catch$_CreateTCPSocketService$0:
  000e0	b8 00 00 00 00	 mov	 eax, $LN18@CreateTCPS
  000e5	c3		 ret	 0
  000e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ed	eb 07		 jmp	 SHORT __tryend$_CreateTCPSocketService$1
$LN18@CreateTCPS:
  000ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_CreateTCPSocketService$1:
  000f6	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000fd	8b 45 ec	 mov	 eax, DWORD PTR _pTCPSocketService$[ebp]
  00100	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax
  00103	8b 4d c0	 mov	 ecx, DWORD PTR $T2[ebp]
  00106	89 4d e8	 mov	 DWORD PTR $T8[ebp], ecx
  00109	83 7d e8 00	 cmp	 DWORD PTR $T8[ebp], 0
  0010d	74 14		 je	 SHORT $LN9@CreateTCPS
  0010f	6a 01		 push	 1
  00111	8b 55 e8	 mov	 edx, DWORD PTR $T8[ebp]
  00114	8b 02		 mov	 eax, DWORD PTR [edx]
  00116	8b 4d e8	 mov	 ecx, DWORD PTR $T8[ebp]
  00119	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0011c	ff d2		 call	 edx
  0011e	89 45 bc	 mov	 DWORD PTR tv129[ebp], eax
  00121	eb 07		 jmp	 SHORT $LN10@CreateTCPS
$LN9@CreateTCPS:
  00123	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN10@CreateTCPS:
  0012a	eb 1e		 jmp	 SHORT $LN14@CreateTCPS
__catch$_CreateTCPSocketService$2:
  0012c	33 c0		 xor	 eax, eax
  0012e	75 14		 jne	 SHORT $LN11@CreateTCPS
  00130	68 55 04 00 00	 push	 1109			; 00000455H
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0013a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0013f	85 c0		 test	 eax, eax
  00141	74 01		 je	 SHORT $LN11@CreateTCPS
  00143	cc		 int	 3
$LN11@CreateTCPS:
  00144	b8 00 00 00 00	 mov	 eax, $LN20@CreateTCPS
  00149	c3		 ret	 0
$LN14@CreateTCPS:
  0014a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00151	eb 07		 jmp	 SHORT __tryend$_CreateTCPSocketService$3
$LN20@CreateTCPS:
  00153	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_CreateTCPSocketService$3:
  0015a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pTCPSocketService$[ebp], 0
  00161	33 c0		 xor	 eax, eax
$LN6@CreateTCPS:
  00163	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00166	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016d	59		 pop	 ecx
  0016e	5f		 pop	 edi
  0016f	5e		 pop	 esi
  00170	5b		 pop	 ebx
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_CreateTCPSocketService$4:
  00000	68 98 80 02 00	 push	 163992			; 00028098H
  00005	8b 45 e4	 mov	 eax, DWORD PTR $T7[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$_CreateTCPSocketService:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_CreateTCPSocketService
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_CreateTCPSocketService ENDP
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ PROC			; ATL::CA2CAEX<128>::operator char const *, COMDAT
; _this$ = ecx

; 293  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 294  : 		return( m_psz );

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 295  : 	}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??B?$CA2CAEX@$0IA@@ATL@@QBEPBDXZ ENDP			; ATL::CA2CAEX<128>::operator char const *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ PROC			; ATL::CA2CAEX<128>::~CA2CAEX<128>, COMDAT
; _this$ = ecx

; 289  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 290  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1?$CA2CAEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CA2CAEX<128>::~CA2CAEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
;	COMDAT ??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z PROC			; ATL::CA2CAEX<128>::CA2CAEX<128>, COMDAT
; _this$ = ecx

; 279  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 278  : 		m_psz( psz )

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 280  : 	}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$CA2CAEX@$0IA@@ATL@@QAE@PBD@Z ENDP			; ATL::CA2CAEX<128>::CA2CAEX<128>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCTCPSocketService@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTCPSocketService@@UAEPAXI@Z PROC			; CTCPSocketService::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CTCPSocketService@@UAE@XZ ; CTCPSocketService::~CTCPSocketService
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 11		 je	 SHORT $LN2@scalar
  00017	68 98 80 02 00	 push	 163992			; 00028098H
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00025	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_GCTCPSocketService@@UAEPAXI@Z ENDP			; CTCPSocketService::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?TranslateAddress@CTCPSocketService@@AAEKPBD@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
_lpHost$5 = -12						; size = 4
_ServerAddr$ = -8					; size = 4
_dwServerIP$ = -4					; size = 4
_szServerIP$ = 8					; size = 4
?TranslateAddress@CTCPSocketService@@AAEKPBD@Z PROC	; CTCPSocketService::TranslateAddress, COMDAT
; _this$ = ecx

; 1089 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h

; 278  : 		m_psz( psz )

  00009	8b 45 08	 mov	 eax, DWORD PTR _szServerIP$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _ServerAddr$[ebp], eax

; 294  : 		return( m_psz );

  0000f	8b 4d f8	 mov	 ecx, DWORD PTR _ServerAddr$[ebp]
  00012	89 4d f0	 mov	 DWORD PTR $T4[ebp], ecx
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp

; 1092 :     DWORD dwServerIP = inet_addr(ServerAddr);

  00015	8b 55 f0	 mov	 edx, DWORD PTR $T4[ebp]
  00018	52		 push	 edx
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  0001f	89 45 fc	 mov	 DWORD PTR _dwServerIP$[ebp], eax

; 1093 : 
; 1094 :     // 域名解释
; 1095 :     if (dwServerIP == INADDR_NONE)

  00022	83 7d fc ff	 cmp	 DWORD PTR _dwServerIP$[ebp], -1
  00026	75 3b		 jne	 SHORT $LN2@TranslateA
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlconv.h

; 294  : 		return( m_psz );

  00028	8b 45 f8	 mov	 eax, DWORD PTR _ServerAddr$[ebp]
  0002b	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp

; 1097 :         LPHOSTENT lpHost = gethostbyname(ServerAddr);

  0002e	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gethostbyname@4
  00038	89 45 f4	 mov	 DWORD PTR _lpHost$5[ebp], eax

; 1098 :         if (lpHost == NULL)

  0003b	83 7d f4 00	 cmp	 DWORD PTR _lpHost$5[ebp], 0
  0003f	75 0c		 jne	 SHORT $LN3@TranslateA

; 1099 :             return INADDR_NONE;

  00041	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR $T2[ebp], -1
  00048	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  0004b	eb 1f		 jmp	 SHORT $LN1@TranslateA
$LN3@TranslateA:

; 1100 :         dwServerIP = ((LPIN_ADDR)lpHost->h_addr)->s_addr;

  0004d	ba 04 00 00 00	 mov	 edx, 4
  00052	6b c2 00	 imul	 eax, edx, 0
  00055	8b 4d f4	 mov	 ecx, DWORD PTR _lpHost$5[ebp]
  00058	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005b	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	89 4d fc	 mov	 DWORD PTR _dwServerIP$[ebp], ecx
$LN2@TranslateA:

; 1101 :     }
; 1102 : 
; 1103 :     return dwServerIP;

  00063	8b 55 fc	 mov	 edx, DWORD PTR _dwServerIP$[ebp]
  00066	89 55 e4	 mov	 DWORD PTR $T1[ebp], edx
  00069	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
$LN1@TranslateA:

; 1104 : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?TranslateAddress@CTCPSocketService@@AAEKPBD@Z ENDP	; CTCPSocketService::TranslateAddress
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketRead@CTCPSocketService@@IAE_NUTCP_Command@@PAXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Command$ = 8						; size = 4
_pData$ = 12						; size = 4
_wDataSize$ = 16					; size = 2
?OnSocketRead@CTCPSocketService@@IAE_NUTCP_Command@@PAXG@Z PROC ; CTCPSocketService::OnSocketRead, COMDAT
; _this$ = ecx

; 1081 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1082 :     // 投递事件
; 1083 :     ASSERT(m_pITCPSocketEvent != NULL);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000e	75 14		 jne	 SHORT $LN3@OnSocketRe
  00010	68 3b 04 00 00	 push	 1083			; 0000043bH
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0001f	85 c0		 test	 eax, eax
  00021	74 01		 je	 SHORT $LN3@OnSocketRe
  00023	cc		 int	 3
$LN3@OnSocketRe:

; 1084 :     return m_pITCPSocketEvent->OnEventTCPSocketRead(m_wServiceID, Command, pData, wDataSize);

  00024	0f b7 55 10	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  00028	52		 push	 edx
  00029	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _Command$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  00038	50		 push	 eax
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 12		 mov	 edx, DWORD PTR [edx]
  00044	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00047	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0004a	ff d0		 call	 eax

; 1085 : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
?OnSocketRead@CTCPSocketService@@IAE_NUTCP_Command@@PAXG@Z ENDP ; CTCPSocketService::OnSocketRead
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketShut@CTCPSocketService@@IAE_NE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cbShutReason$ = 8					; size = 1
?OnSocketShut@CTCPSocketService@@IAE_NE@Z PROC		; CTCPSocketService::OnSocketShut, COMDAT
; _this$ = ecx

; 1073 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1074 :     // 投递事件
; 1075 :     ASSERT(m_pITCPSocketEvent != NULL);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000e	75 14		 jne	 SHORT $LN3@OnSocketSh
  00010	68 33 04 00 00	 push	 1075			; 00000433H
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0001f	85 c0		 test	 eax, eax
  00021	74 01		 je	 SHORT $LN3@OnSocketSh
  00023	cc		 int	 3
$LN3@OnSocketSh:

; 1076 :     return m_pITCPSocketEvent->OnEventTCPSocketShut(m_wServiceID, cbShutReason);

  00024	0f b6 55 08	 movzx	 edx, BYTE PTR _cbShutReason$[ebp]
  00028	52		 push	 edx
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0003f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00042	ff d0		 call	 eax

; 1077 : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?OnSocketShut@CTCPSocketService@@IAE_NE@Z ENDP		; CTCPSocketService::OnSocketShut
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketLink@CTCPSocketService@@IAE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nErrorCode$ = 8					; size = 4
?OnSocketLink@CTCPSocketService@@IAE_NH@Z PROC		; CTCPSocketService::OnSocketLink, COMDAT
; _this$ = ecx

; 1065 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1066 :     // 投递事件
; 1067 :     ASSERT(m_pITCPSocketEvent != NULL);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000e	75 14		 jne	 SHORT $LN3@OnSocketLi
  00010	68 2b 04 00 00	 push	 1067			; 0000042bH
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0001f	85 c0		 test	 eax, eax
  00021	74 01		 je	 SHORT $LN3@OnSocketLi
  00023	cc		 int	 3
$LN3@OnSocketLi:

; 1068 :     return m_pITCPSocketEvent->OnEventTCPSocketLink(m_wServiceID, nErrorCode);

  00024	8b 55 08	 mov	 edx, DWORD PTR _nErrorCode$[ebp]
  00027	52		 push	 edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0002f	51		 push	 ecx
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 10		 mov	 edx, DWORD PTR [eax]
  0003b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0003e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00041	ff d0		 call	 eax

; 1069 : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?OnSocketLink@CTCPSocketService@@IAE_NH@Z ENDP		; CTCPSocketService::OnSocketLink
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?SendData@CTCPSocketService@@UAE_NGGPAXG@Z
_TEXT	SEGMENT
_this$ = -16396						; size = 4
_wSendSize$ = -16392					; size = 2
_SendRequestEx$ = -16388				; size = 16382
__$ArrayPad$ = -4					; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
_pData$ = 16						; size = 4
_wDataSize$ = 20					; size = 2
?SendData@CTCPSocketService@@UAE_NGGPAXG@Z PROC		; CTCPSocketService::SendData, COMDAT
; _this$ = ecx

; 1036 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 0c 40 00 00	 mov	 eax, 16396		; 0000400cH
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	89 8d f4 bf ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1037 :     // 状态效验
; 1038 :     ASSERT(m_bService == true);

  0001d	8b 85 f4 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00027	83 f9 01	 cmp	 ecx, 1
  0002a	74 14		 je	 SHORT $LN5@SendData
  0002c	68 0e 04 00 00	 push	 1038			; 0000040eH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN5@SendData
  0003f	cc		 int	 3
$LN5@SendData:

; 1039 :     if (m_bService == false)

  00040	8b 85 f4 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00046	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0004a	85 c9		 test	 ecx, ecx
  0004c	75 07		 jne	 SHORT $LN2@SendData

; 1040 :         return false;

  0004e	32 c0		 xor	 al, al
  00050	e9 9e 00 00 00	 jmp	 $LN1@SendData
$LN2@SendData:

; 1041 : 
; 1042 :     // 构造数据
; 1043 :     tagSendDataExRequest SendRequestEx;
; 1044 :     ZeroMemory(&SendRequestEx, sizeof(SendRequestEx));

  00055	68 fe 3f 00 00	 push	 16382			; 00003ffeH
  0005a	6a 00		 push	 0
  0005c	8d 95 fc bf ff
	ff		 lea	 edx, DWORD PTR _SendRequestEx$[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 _memset
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1045 : 
; 1046 :     // 设置变量
; 1047 :     SendRequestEx.wDataSize = wDataSize;

  0006b	66 8b 45 14	 mov	 ax, WORD PTR _wDataSize$[ebp]
  0006f	66 89 85 00 c0
	ff ff		 mov	 WORD PTR _SendRequestEx$[ebp+4], ax

; 1048 :     SendRequestEx.wSubCmdID = wSubCmdID;

  00076	66 8b 4d 0c	 mov	 cx, WORD PTR _wSubCmdID$[ebp]
  0007a	66 89 8d fe bf
	ff ff		 mov	 WORD PTR _SendRequestEx$[ebp+2], cx

; 1049 :     SendRequestEx.wMainCmdID = wMainCmdID;

  00081	66 8b 55 08	 mov	 dx, WORD PTR _wMainCmdID$[ebp]
  00085	66 89 95 fc bf
	ff ff		 mov	 WORD PTR _SendRequestEx$[ebp], dx

; 1050 : 
; 1051 :     // 附加数据
; 1052 :     if (wDataSize > 0)

  0008c	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00090	85 c0		 test	 eax, eax
  00092	7e 32		 jle	 SHORT $LN3@SendData

; 1053 :     {
; 1054 :         ASSERT(pData != NULL);

  00094	83 7d 10 00	 cmp	 DWORD PTR _pData$[ebp], 0
  00098	75 14		 jne	 SHORT $LN6@SendData
  0009a	68 1e 04 00 00	 push	 1054			; 0000041eH
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000a4	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a9	85 c0		 test	 eax, eax
  000ab	74 01		 je	 SHORT $LN6@SendData
  000ad	cc		 int	 3
$LN6@SendData:

; 1055 :         CopyMemory(SendRequestEx.cbSendBuffer, pData, wDataSize);

  000ae	0f b7 55 14	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  000b2	52		 push	 edx
  000b3	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  000b6	50		 push	 eax
  000b7	8d 8d 02 c0 ff
	ff		 lea	 ecx, DWORD PTR _SendRequestEx$[ebp+6]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _memcpy
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SendData:

; 1056 :     }
; 1057 : 
; 1058 :     // 投递请求
; 1059 :     WORD wSendSize = sizeof(SendRequestEx) - sizeof(SendRequestEx.cbSendBuffer) + wDataSize;

  000c6	0f b7 55 14	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  000ca	83 c2 06	 add	 edx, 6
  000cd	66 89 95 f8 bf
	ff ff		 mov	 WORD PTR _wSendSize$[ebp], dx

; 1060 :     return m_TCPSocketServiceThread.PostThreadRequest(REQUEST_SEND_DATA_EX, &SendRequestEx, wSendSize);

  000d4	0f b7 85 f8 bf
	ff ff		 movzx	 eax, WORD PTR _wSendSize$[ebp]
  000db	50		 push	 eax
  000dc	8d 8d fc bf ff
	ff		 lea	 ecx, DWORD PTR _SendRequestEx$[ebp]
  000e2	51		 push	 ecx
  000e3	6a 03		 push	 3
  000e5	8b 8d f4 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000ee	e8 00 00 00 00	 call	 ?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z ; CTCPSocketServiceThread::PostThreadRequest
$LN1@SendData:

; 1061 : }

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f6	33 cd		 xor	 ecx, ebp
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 10 00	 ret	 16			; 00000010H
?SendData@CTCPSocketService@@UAE_NGGPAXG@Z ENDP		; CTCPSocketService::SendData
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?SendData@CTCPSocketService@@UAE_NGG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_SendDataRequest$ = -4					; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
?SendData@CTCPSocketService@@UAE_NGG@Z PROC		; CTCPSocketService::SendData, COMDAT
; _this$ = ecx

; 1016 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1017 :     // 状态效验
; 1018 :     ASSERT(m_bService == true);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00010	83 f9 01	 cmp	 ecx, 1
  00013	74 14		 je	 SHORT $LN4@SendData
  00015	68 fa 03 00 00	 push	 1018			; 000003faH
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00024	85 c0		 test	 eax, eax
  00026	74 01		 je	 SHORT $LN4@SendData
  00028	cc		 int	 3
$LN4@SendData:

; 1019 :     if (m_bService == false)

  00029	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00030	85 c9		 test	 ecx, ecx
  00032	75 04		 jne	 SHORT $LN2@SendData

; 1020 :         return false;

  00034	32 c0		 xor	 al, al
  00036	eb 28		 jmp	 SHORT $LN1@SendData
$LN2@SendData:

; 1021 : 
; 1022 :     // 构造数据
; 1023 :     tagSendDataRequest SendDataRequest;
; 1024 :     ZeroMemory(&SendDataRequest, sizeof(SendDataRequest));

  00038	33 d2		 xor	 edx, edx
  0003a	89 55 fc	 mov	 DWORD PTR _SendDataRequest$[ebp], edx

; 1025 : 
; 1026 :     // 设置变量
; 1027 :     SendDataRequest.wSubCmdID = wSubCmdID;

  0003d	66 8b 45 0c	 mov	 ax, WORD PTR _wSubCmdID$[ebp]
  00041	66 89 45 fe	 mov	 WORD PTR _SendDataRequest$[ebp+2], ax

; 1028 :     SendDataRequest.wMainCmdID = wMainCmdID;

  00045	66 8b 4d 08	 mov	 cx, WORD PTR _wMainCmdID$[ebp]
  00049	66 89 4d fc	 mov	 WORD PTR _SendDataRequest$[ebp], cx

; 1029 : 
; 1030 :     // 投递请求
; 1031 :     return m_TCPSocketServiceThread.PostThreadRequest(REQUEST_SEND_DATA, &SendDataRequest, sizeof(SendDataRequest));

  0004d	6a 04		 push	 4
  0004f	8d 55 fc	 lea	 edx, DWORD PTR _SendDataRequest$[ebp]
  00052	52		 push	 edx
  00053	6a 02		 push	 2
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005b	e8 00 00 00 00	 call	 ?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z ; CTCPSocketServiceThread::PostThreadRequest
$LN1@SendData:

; 1032 : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
?SendData@CTCPSocketService@@UAE_NGG@Z ENDP		; CTCPSocketService::SendData
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?Connect@CTCPSocketService@@UAE_NPBDG@Z
_TEXT	SEGMENT
_ConnectRequest$ = -12					; size = 8
_this$ = -4						; size = 4
_szServerIP$ = 8					; size = 4
_wPort$ = 12						; size = 2
?Connect@CTCPSocketService@@UAE_NPBDG@Z PROC		; CTCPSocketService::Connect, COMDAT
; _this$ = ecx

; 996  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  :     // 状态效验
; 998  :     ASSERT(m_bService == true);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00010	83 f9 01	 cmp	 ecx, 1
  00013	74 14		 je	 SHORT $LN4@Connect
  00015	68 e6 03 00 00	 push	 998			; 000003e6H
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00024	85 c0		 test	 eax, eax
  00026	74 01		 je	 SHORT $LN4@Connect
  00028	cc		 int	 3
$LN4@Connect:

; 999  :     if (m_bService == false)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00030	85 c9		 test	 ecx, ecx
  00032	75 04		 jne	 SHORT $LN2@Connect

; 1000 :         return false;

  00034	32 c0		 xor	 al, al
  00036	eb 32		 jmp	 SHORT $LN1@Connect
$LN2@Connect:

; 1001 : 
; 1002 :     // 构造数据
; 1003 :     tagConnectRequest ConnectRequest;
; 1004 :     ZeroMemory(&ConnectRequest, sizeof(ConnectRequest));

  00038	33 d2		 xor	 edx, edx
  0003a	89 55 f4	 mov	 DWORD PTR _ConnectRequest$[ebp], edx
  0003d	89 55 f8	 mov	 DWORD PTR _ConnectRequest$[ebp+4], edx

; 1005 : 
; 1006 :     // 设置变量
; 1007 :     ConnectRequest.wPort = wPort;

  00040	66 8b 45 0c	 mov	 ax, WORD PTR _wPort$[ebp]
  00044	66 89 45 f4	 mov	 WORD PTR _ConnectRequest$[ebp], ax

; 1008 :     ConnectRequest.dwServerIP = TranslateAddress(szServerIP);

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _szServerIP$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?TranslateAddress@CTCPSocketService@@AAEKPBD@Z ; CTCPSocketService::TranslateAddress
  00054	89 45 f8	 mov	 DWORD PTR _ConnectRequest$[ebp+4], eax

; 1009 : 
; 1010 :     // 投递请求
; 1011 :     return m_TCPSocketServiceThread.PostThreadRequest(REQUEST_CONNECT, &ConnectRequest, sizeof(ConnectRequest));

  00057	6a 08		 push	 8
  00059	8d 55 f4	 lea	 edx, DWORD PTR _ConnectRequest$[ebp]
  0005c	52		 push	 edx
  0005d	6a 01		 push	 1
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00065	e8 00 00 00 00	 call	 ?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z ; CTCPSocketServiceThread::PostThreadRequest
$LN1@Connect:

; 1012 : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?Connect@CTCPSocketService@@UAE_NPBDG@Z ENDP		; CTCPSocketService::Connect
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?Connect@CTCPSocketService@@UAE_NKG@Z
_TEXT	SEGMENT
_ConnectRequest$ = -12					; size = 8
_this$ = -4						; size = 4
_dwServerIP$ = 8					; size = 4
_wPort$ = 12						; size = 2
?Connect@CTCPSocketService@@UAE_NKG@Z PROC		; CTCPSocketService::Connect, COMDAT
; _this$ = ecx

; 976  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 977  :     // 状态效验
; 978  :     ASSERT(m_bService == true);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00010	83 f9 01	 cmp	 ecx, 1
  00013	74 14		 je	 SHORT $LN4@Connect
  00015	68 d2 03 00 00	 push	 978			; 000003d2H
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00024	85 c0		 test	 eax, eax
  00026	74 01		 je	 SHORT $LN4@Connect
  00028	cc		 int	 3
$LN4@Connect:

; 979  :     if (m_bService == false)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00030	85 c9		 test	 ecx, ecx
  00032	75 04		 jne	 SHORT $LN2@Connect

; 980  :         return false;

  00034	32 c0		 xor	 al, al
  00036	eb 30		 jmp	 SHORT $LN1@Connect
$LN2@Connect:

; 981  : 
; 982  :     // 构造数据
; 983  :     tagConnectRequest ConnectRequest;
; 984  :     ZeroMemory(&ConnectRequest, sizeof(ConnectRequest));

  00038	33 d2		 xor	 edx, edx
  0003a	89 55 f4	 mov	 DWORD PTR _ConnectRequest$[ebp], edx
  0003d	89 55 f8	 mov	 DWORD PTR _ConnectRequest$[ebp+4], edx

; 985  : 
; 986  :     // 设置变量
; 987  :     ConnectRequest.wPort = wPort;

  00040	66 8b 45 0c	 mov	 ax, WORD PTR _wPort$[ebp]
  00044	66 89 45 f4	 mov	 WORD PTR _ConnectRequest$[ebp], ax

; 988  :     ConnectRequest.dwServerIP = htonl(dwServerIP);

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _dwServerIP$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4
  00052	89 45 f8	 mov	 DWORD PTR _ConnectRequest$[ebp+4], eax

; 989  : 
; 990  :     // 投递请求
; 991  :     return m_TCPSocketServiceThread.PostThreadRequest(REQUEST_CONNECT, &ConnectRequest, sizeof(ConnectRequest));

  00055	6a 08		 push	 8
  00057	8d 55 f4	 lea	 edx, DWORD PTR _ConnectRequest$[ebp]
  0005a	52		 push	 edx
  0005b	6a 01		 push	 1
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00063	e8 00 00 00 00	 call	 ?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z ; CTCPSocketServiceThread::PostThreadRequest
$LN1@Connect:

; 992  : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?Connect@CTCPSocketService@@UAE_NKG@Z ENDP		; CTCPSocketService::Connect
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?CloseSocket@CTCPSocketService@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseSocket@CTCPSocketService@@UAE_NXZ PROC		; CTCPSocketService::CloseSocket, COMDAT
; _this$ = ecx

; 964  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 965  :     // 状态效验
; 966  :     ASSERT(m_bService == true);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0000e	83 f9 01	 cmp	 ecx, 1
  00011	74 14		 je	 SHORT $LN4@CloseSocke
  00013	68 c6 03 00 00	 push	 966			; 000003c6H
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00022	85 c0		 test	 eax, eax
  00024	74 01		 je	 SHORT $LN4@CloseSocke
  00026	cc		 int	 3
$LN4@CloseSocke:

; 967  :     if (m_bService == false)

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0002e	85 c9		 test	 ecx, ecx
  00030	75 04		 jne	 SHORT $LN2@CloseSocke

; 968  :         return false;

  00032	32 c0		 xor	 al, al
  00034	eb 11		 jmp	 SHORT $LN1@CloseSocke
$LN2@CloseSocke:

; 969  : 
; 970  :     // 投递请求
; 971  :     return m_TCPSocketServiceThread.PostThreadRequest(REQUEST_CLOSE_SOCKET, NULL, 0);

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 04		 push	 4
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00042	e8 00 00 00 00	 call	 ?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z ; CTCPSocketServiceThread::PostThreadRequest
$LN1@CloseSocke:

; 972  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?CloseSocket@CTCPSocketService@@UAE_NXZ ENDP		; CTCPSocketService::CloseSocket
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?SetTCPSocketEvent@CTCPSocketService@@UAE_NPAUIUnknownEx@@@Z
_TEXT	SEGMENT
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_pIUnknownEx$ = 8					; size = 4
?SetTCPSocketEvent@CTCPSocketService@@UAE_NPAUIUnknownEx@@@Z PROC ; CTCPSocketService::SetTCPSocketEvent, COMDAT
; _this$ = ecx

; 943  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 944  :     // 状态效验
; 945  :     ASSERT(m_bService == false);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00010	85 c9		 test	 ecx, ecx
  00012	74 14		 je	 SHORT $LN5@SetTCPSock
  00014	68 b1 03 00 00	 push	 945			; 000003b1H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00023	85 c0		 test	 eax, eax
  00025	74 01		 je	 SHORT $LN5@SetTCPSock
  00027	cc		 int	 3
$LN5@SetTCPSock:

; 946  :     if (m_bService == true)

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0002f	83 f9 01	 cmp	 ecx, 1
  00032	75 04		 jne	 SHORT $LN2@SetTCPSock

; 947  :         return false;

  00034	32 c0		 xor	 al, al
  00036	eb 59		 jmp	 SHORT $LN1@SetTCPSock
$LN2@SetTCPSock:

; 948  : 
; 949  :     // 查询接口
; 950  :     m_pITCPSocketEvent = QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx, ITCPSocketEvent);

  00038	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  0003c	75 09		 jne	 SHORT $LN6@SetTCPSock
  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
  00045	eb 1a		 jmp	 SHORT $LN7@SetTCPSock
$LN6@SetTCPSock:
  00047	68 00 01 01 06	 push	 100729088		; 06010100H
  0004c	68 00 00 00 00	 push	 OFFSET ?IID_ITCPSocketEvent@@3U_GUID@@B
  00051	8b 55 08	 mov	 edx, DWORD PTR _pIUnknownEx$[ebp]
  00054	8b 02		 mov	 eax, DWORD PTR [edx]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  00059	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005c	ff d2		 call	 edx
  0005e	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
$LN7@SetTCPSock:
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  00067	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 951  : 
; 952  :     // 错误判断
; 953  :     if (m_pITCPSocketEvent == NULL)

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00071	75 1c		 jne	 SHORT $LN3@SetTCPSock

; 954  :     {
; 955  :         ASSERT(FALSE);

  00073	33 c0		 xor	 eax, eax
  00075	75 14		 jne	 SHORT $LN8@SetTCPSock
  00077	68 bb 03 00 00	 push	 955			; 000003bbH
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00081	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00086	85 c0		 test	 eax, eax
  00088	74 01		 je	 SHORT $LN8@SetTCPSock
  0008a	cc		 int	 3
$LN8@SetTCPSock:

; 956  :         return false;

  0008b	32 c0		 xor	 al, al
  0008d	eb 02		 jmp	 SHORT $LN1@SetTCPSock
$LN3@SetTCPSock:

; 957  :     }
; 958  : 
; 959  :     return true;

  0008f	b0 01		 mov	 al, 1
$LN1@SetTCPSock:

; 960  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?SetTCPSocketEvent@CTCPSocketService@@UAE_NPAUIUnknownEx@@@Z ENDP ; CTCPSocketService::SetTCPSocketEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?SetServiceID@CTCPSocketService@@UAE_NG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wServiceID$ = 8					; size = 2
?SetServiceID@CTCPSocketService@@UAE_NG@Z PROC		; CTCPSocketService::SetServiceID, COMDAT
; _this$ = ecx

; 929  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 930  :     // 状态效验
; 931  :     ASSERT(m_bService == false);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 14		 je	 SHORT $LN4@SetService
  00012	68 a3 03 00 00	 push	 931			; 000003a3H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN4@SetService
  00025	cc		 int	 3
$LN4@SetService:

; 932  :     if (m_bService == true)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0002d	83 f9 01	 cmp	 ecx, 1
  00030	75 04		 jne	 SHORT $LN2@SetService

; 933  :         return false;

  00032	32 c0		 xor	 al, al
  00034	eb 0d		 jmp	 SHORT $LN1@SetService
$LN2@SetService:

; 934  : 
; 935  :     // 设置变量
; 936  :     m_wServiceID = wServiceID;

  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	66 8b 45 08	 mov	 ax, WORD PTR _wServiceID$[ebp]
  0003d	66 89 42 06	 mov	 WORD PTR [edx+6], ax

; 937  : 
; 938  :     return true;

  00041	b0 01		 mov	 al, 1
$LN1@SetService:

; 939  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?SetServiceID@CTCPSocketService@@UAE_NG@Z ENDP		; CTCPSocketService::SetServiceID
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?ConcludeService@CTCPSocketService@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ConcludeService@CTCPSocketService@@UAE_NXZ PROC	; CTCPSocketService::ConcludeService, COMDAT
; _this$ = ecx

; 917  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 918  :     // 设置变量
; 919  :     m_bService = false;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 920  : 
; 921  :     // 停止线程
; 922  :     m_TCPSocketServiceThread.ConcludeThread(INFINITE);

  0000e	6a ff		 push	 -1
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001c	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0001f	ff d2		 call	 edx

; 923  : 
; 924  :     return true;

  00021	b0 01		 mov	 al, 1

; 925  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?ConcludeService@CTCPSocketService@@UAE_NXZ ENDP	; CTCPSocketService::ConcludeService
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?StartService@CTCPSocketService@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartService@CTCPSocketService@@UAE_NXZ PROC		; CTCPSocketService::StartService, COMDAT
; _this$ = ecx

; 899  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 900  :     // 运行判断
; 901  :     ASSERT((m_bService == false) && (m_pITCPSocketEvent != NULL));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0000e	85 c9		 test	 ecx, ecx
  00010	75 09		 jne	 SHORT $LN6@StartServi
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00019	75 14		 jne	 SHORT $LN7@StartServi
$LN6@StartServi:
  0001b	68 85 03 00 00	 push	 901			; 00000385H
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00025	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002a	85 c0		 test	 eax, eax
  0002c	74 01		 je	 SHORT $LN7@StartServi
  0002e	cc		 int	 3
$LN7@StartServi:

; 902  :     if ((m_bService == true) || (m_pITCPSocketEvent == NULL))

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  00036	83 fa 01	 cmp	 edx, 1
  00039	74 09		 je	 SHORT $LN3@StartServi
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00042	75 04		 jne	 SHORT $LN2@StartServi
$LN3@StartServi:

; 903  :         return false;

  00044	32 c0		 xor	 al, al
  00046	eb 25		 jmp	 SHORT $LN1@StartServi
$LN2@StartServi:

; 904  : 
; 905  :     // 服务线程
; 906  :     if (m_TCPSocketServiceThread.StartThread() == false)

  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00054	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00057	ff d2		 call	 edx
  00059	0f b6 c0	 movzx	 eax, al
  0005c	85 c0		 test	 eax, eax
  0005e	75 04		 jne	 SHORT $LN4@StartServi

; 907  :         return false;

  00060	32 c0		 xor	 al, al
  00062	eb 09		 jmp	 SHORT $LN1@StartServi
$LN4@StartServi:

; 908  : 
; 909  :     // 设置变量
; 910  :     m_bService = true;

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1

; 911  : 
; 912  :     return true;

  0006b	b0 01		 mov	 al, 1
$LN1@StartServi:

; 913  : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?StartService@CTCPSocketService@@UAE_NXZ ENDP		; CTCPSocketService::StartService
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?QueryInterface@CTCPSocketService@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
tv202 = -40						; size = 4
tv185 = -36						; size = 4
tv152 = -32						; size = 4
tv190 = -28						; size = 4
tv201 = -24						; size = 4
tv173 = -20						; size = 4
tv184 = -16						; size = 4
tv146 = -12						; size = 4
tv154 = -8						; size = 4
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CTCPSocketService@@UAEPAXABU_GUID@@K@Z PROC ; CTCPSocketService::QueryInterface, COMDAT
; _this$ = ecx

; 890  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	68 00 00 00 00	 push	 OFFSET ?IID_IServiceModule@@3U_GUID@@B
  00010	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memcmp
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	89 45 e0	 mov	 DWORD PTR tv152[ebp], eax
  0001f	83 7d e0 00	 cmp	 DWORD PTR tv152[ebp], 0
  00023	75 09		 jne	 SHORT $LN12@QueryInter
  00025	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv154[ebp], 1
  0002c	eb 07		 jmp	 SHORT $LN10@QueryInter
$LN12@QueryInter:
  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
$LN10@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00035	83 7d f8 00	 cmp	 DWORD PTR tv154[ebp], 0
  00039	74 09		 je	 SHORT $LN8@QueryInter
  0003b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv146[ebp], 1
  00042	eb 07		 jmp	 SHORT $LN6@QueryInter
$LN8@QueryInter:
  00044	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN6@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp

; 891  :     QUERYINTERFACE(IServiceModule, Guid, dwQueryVer);

  0004b	0f b6 4d f4	 movzx	 ecx, BYTE PTR tv146[ebp]
  0004f	85 c9		 test	 ecx, ecx
  00051	74 20		 je	 SHORT $LN2@QueryInter
  00053	68 00 01 01 06	 push	 100729088		; 06010100H
  00058	8b 55 0c	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00061	83 c4 08	 add	 esp, 8
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	74 08		 je	 SHORT $LN2@QueryInter
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	e9 d0 00 00 00	 jmp	 $LN1@QueryInter
$LN2@QueryInter:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00073	6a 10		 push	 16			; 00000010H
  00075	68 00 00 00 00	 push	 OFFSET ?IID_ITCPSocketService@@3U_GUID@@B
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _Guid$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _memcmp
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	89 45 dc	 mov	 DWORD PTR tv185[ebp], eax
  00089	83 7d dc 00	 cmp	 DWORD PTR tv185[ebp], 0
  0008d	75 09		 jne	 SHORT $LN42@QueryInter
  0008f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv184[ebp], 1
  00096	eb 07		 jmp	 SHORT $LN40@QueryInter
$LN42@QueryInter:
  00098	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN40@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0009f	83 7d f0 00	 cmp	 DWORD PTR tv184[ebp], 0
  000a3	74 09		 je	 SHORT $LN38@QueryInter
  000a5	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv173[ebp], 1
  000ac	eb 07		 jmp	 SHORT $LN36@QueryInter
$LN38@QueryInter:
  000ae	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN36@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp

; 892  :     QUERYINTERFACE(ITCPSocketService, Guid, dwQueryVer);

  000b5	0f b6 55 ec	 movzx	 edx, BYTE PTR tv173[ebp]
  000b9	85 d2		 test	 edx, edx
  000bb	74 1d		 je	 SHORT $LN3@QueryInter
  000bd	68 00 01 01 06	 push	 100729088		; 06010100H
  000c2	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  000cb	83 c4 08	 add	 esp, 8
  000ce	0f b6 c8	 movzx	 ecx, al
  000d1	85 c9		 test	 ecx, ecx
  000d3	74 05		 je	 SHORT $LN3@QueryInter
  000d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	eb 69		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  000da	6a 10		 push	 16			; 00000010H
  000dc	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  000e1	8b 55 08	 mov	 edx, DWORD PTR _Guid$[ebp]
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 _memcmp
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	89 45 d8	 mov	 DWORD PTR tv202[ebp], eax
  000f0	83 7d d8 00	 cmp	 DWORD PTR tv202[ebp], 0
  000f4	75 09		 jne	 SHORT $LN72@QueryInter
  000f6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv201[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN70@QueryInter
$LN72@QueryInter:
  000ff	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN70@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00106	83 7d e8 00	 cmp	 DWORD PTR tv201[ebp], 0
  0010a	74 09		 je	 SHORT $LN68@QueryInter
  0010c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv190[ebp], 1
  00113	eb 07		 jmp	 SHORT $LN66@QueryInter
$LN68@QueryInter:
  00115	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN66@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp

; 893  :     QUERYINTERFACE_IUNKNOWNEX(ITCPSocketService, Guid, dwQueryVer);

  0011c	0f b6 45 e4	 movzx	 eax, BYTE PTR tv190[ebp]
  00120	85 c0		 test	 eax, eax
  00122	74 1d		 je	 SHORT $LN4@QueryInter
  00124	68 00 01 01 06	 push	 100729088		; 06010100H
  00129	8b 4d 0c	 mov	 ecx, DWORD PTR _dwQueryVer$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00132	83 c4 08	 add	 esp, 8
  00135	0f b6 d0	 movzx	 edx, al
  00138	85 d2		 test	 edx, edx
  0013a	74 05		 je	 SHORT $LN4@QueryInter
  0013c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN4@QueryInter:

; 894  :     return NULL;

  00141	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 895  : }

  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 08 00	 ret	 8
?QueryInterface@CTCPSocketService@@UAEPAXABU_GUID@@K@Z ENDP ; CTCPSocketService::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.h
;	COMDAT ?Release@CTCPSocketService@@UAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
$T1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -4						; size = 4
?Release@CTCPSocketService@@UAEXXZ PROC			; CTCPSocketService::Release, COMDAT
; _this$ = ecx

; 151  :     virtual VOID Release() { delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0000f	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00012	89 4d fc	 mov	 DWORD PTR $T2[ebp], ecx
  00015	83 7d fc 00	 cmp	 DWORD PTR $T2[ebp], 0
  00019	74 14		 je	 SHORT $LN3@Release
  0001b	6a 01		 push	 1
  0001d	8b 55 fc	 mov	 edx, DWORD PTR $T2[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  00025	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00028	ff d2		 call	 edx
  0002a	89 45 f0	 mov	 DWORD PTR tv70[ebp], eax
  0002d	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN1@Release:
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?Release@CTCPSocketService@@UAEXXZ ENDP			; CTCPSocketService::Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ??1CTCPSocketService@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTCPSocketService@@UAE@XZ PROC			; CTCPSocketService::~CTCPSocketService, COMDAT
; _this$ = ecx

; 881  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTCPSocketService@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CTCPSocketService@@6B@

; 882  :     // 停止服务
; 883  :     ConcludeService();

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?ConcludeService@CTCPSocketService@@UAE_NXZ ; CTCPSocketService::ConcludeService

; 884  : 
; 885  :     return;
; 886  : }

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003d	e8 00 00 00 00	 call	 ??1CTCPSocketServiceThread@@UAE@XZ ; CTCPSocketServiceThread::~CTCPSocketServiceThread
  00042	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00045	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004c	59		 pop	 ecx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTCPSocketService@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTCPSocketService@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTCPSocketService@@UAE@XZ ENDP			; CTCPSocketService::~CTCPSocketService
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ??0CTCPSocketService@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTCPSocketService@@QAE@XZ PROC			; CTCPSocketService::CTCPSocketService, COMDAT
; _this$ = ecx

; 870  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IServiceModule@@6B@
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ITCPSocketService@@6B@
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CTCPSocketService@@6B@
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00031	e8 00 00 00 00	 call	 ??0CTCPSocketServiceThread@@QAE@XZ ; CTCPSocketServiceThread::CTCPSocketServiceThread

; 871  :     // 内核变量
; 872  :     m_wServiceID = 0;

  00036	33 c9		 xor	 ecx, ecx
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	66 89 4a 06	 mov	 WORD PTR [edx+6], cx

; 873  :     m_bService = false;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 874  :     m_pITCPSocketEvent = NULL;

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 875  : 
; 876  :     return;
; 877  : }

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??0CTCPSocketService@@QAE@XZ ENDP			; CTCPSocketService::CTCPSocketService
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCTCPSocketServiceThread@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTCPSocketServiceThread@@UAEPAXI@Z PROC		; CTCPSocketServiceThread::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CTCPSocketServiceThread@@UAE@XZ ; CTCPSocketServiceThread::~CTCPSocketServiceThread
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 11		 je	 SHORT $LN2@scalar
  00017	68 8c 80 02 00	 push	 163980			; 0002808cH
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00025	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_GCTCPSocketServiceThread@@UAEPAXI@Z ENDP		; CTCPSocketServiceThread::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?MapRecvByte@CTCPSocketServiceThread@@AAEEE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cbMap$ = -1						; size = 1
_cbData$ = 8						; size = 1
?MapRecvByte@CTCPSocketServiceThread@@AAEEE@Z PROC	; CTCPSocketServiceThread::MapRecvByte, COMDAT
; _this$ = ecx

; 458  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 459  : 	BYTE cbMap = g_RecvByteMap[cbData] - m_cbRecvRound;

  00009	0f b6 45 08	 movzx	 eax, BYTE PTR _cbData$[ebp]
  0000d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?g_RecvByteMap@@3QBEB[eax]
  00014	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00017	0f b6 82 71 80
	02 00		 movzx	 eax, BYTE PTR [edx+163953]
  0001e	2b c8		 sub	 ecx, eax
  00020	88 4d ff	 mov	 BYTE PTR _cbMap$[ebp], cl

; 460  : 	m_cbRecvRound += 3;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	0f b6 91 71 80
	02 00		 movzx	 edx, BYTE PTR [ecx+163953]
  0002d	83 c2 03	 add	 edx, 3
  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	88 90 71 80 02
	00		 mov	 BYTE PTR [eax+163953], dl

; 461  : 
; 462  :     return cbMap;

  00039	8a 45 ff	 mov	 al, BYTE PTR _cbMap$[ebp]

; 463  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?MapRecvByte@CTCPSocketServiceThread@@AAEEE@Z ENDP	; CTCPSocketServiceThread::MapRecvByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?MapSendByte@CTCPSocketServiceThread@@AAEEE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cbMap$ = -1						; size = 1
_cbData$ = 8						; size = 1
?MapSendByte@CTCPSocketServiceThread@@AAEEE@Z PROC	; CTCPSocketServiceThread::MapSendByte, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 450  : 	BYTE cbMap = g_SendByteMap[(BYTE)(cbData + m_cbSendRound)];

  00009	0f b6 45 08	 movzx	 eax, BYTE PTR _cbData$[ebp]
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	0f b6 91 70 80
	02 00		 movzx	 edx, BYTE PTR [ecx+163952]
  00017	03 c2		 add	 eax, edx
  00019	0f b6 c0	 movzx	 eax, al
  0001c	8a 88 00 00 00
	00		 mov	 cl, BYTE PTR ?g_SendByteMap@@3QBEB[eax]
  00022	88 4d ff	 mov	 BYTE PTR _cbMap$[ebp], cl

; 451  : 	m_cbSendRound += 3;

  00025	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00028	0f b6 82 70 80
	02 00		 movzx	 eax, BYTE PTR [edx+163952]
  0002f	83 c0 03	 add	 eax, 3
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	88 81 70 80 02
	00		 mov	 BYTE PTR [ecx+163952], al

; 452  : 
; 453  :     return cbMap;

  0003b	8a 45 ff	 mov	 al, BYTE PTR _cbMap$[ebp]

; 454  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?MapSendByte@CTCPSocketServiceThread@@AAEEE@Z ENDP	; CTCPSocketServiceThread::MapSendByte
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?SeedRandMap@CTCPSocketServiceThread@@AAEGG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwHold$ = -4						; size = 4
_wSeed$ = 8						; size = 2
?SeedRandMap@CTCPSocketServiceThread@@AAEGG@Z PROC	; CTCPSocketServiceThread::SeedRandMap, COMDAT
; _this$ = ecx

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 443  :     DWORD dwHold = wSeed;

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _wSeed$[ebp]
  0000d	89 45 fc	 mov	 DWORD PTR _dwHold$[ebp], eax

; 444  :     return (WORD)((dwHold = dwHold * 241103L + 2533101L) >> 16);

  00010	69 4d fc cf ad
	03 00		 imul	 ecx, DWORD PTR _dwHold$[ebp], 241103
  00017	81 c1 ed a6 26
	00		 add	 ecx, 2533101		; 0026a6edH
  0001d	89 4d fc	 mov	 DWORD PTR _dwHold$[ebp], ecx
  00020	8b 45 fc	 mov	 eax, DWORD PTR _dwHold$[ebp]
  00023	c1 e8 10	 shr	 eax, 16			; 00000010H

; 445  : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?SeedRandMap@CTCPSocketServiceThread@@AAEGG@Z ENDP	; CTCPSocketServiceThread::SeedRandMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketNotifyConnect@CTCPSocketServiceThread@@AAEJIJ@Z
_TEXT	SEGMENT
_pTCPSocketStatusService$ = -12				; size = 4
_nErrorCode$ = -8					; size = 4
_this$ = -4						; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnSocketNotifyConnect@CTCPSocketServiceThread@@AAEJIJ@Z PROC ; CTCPSocketServiceThread::OnSocketNotifyConnect, COMDAT
; _this$ = ecx

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 846  :     // 获取错误
; 847  :     INT nErrorCode = WSAGETSELECTERROR(lParam);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000c	c1 e8 10	 shr	 eax, 16			; 00000010H
  0000f	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00014	0f b7 c8	 movzx	 ecx, ax
  00017	89 4d f8	 mov	 DWORD PTR _nErrorCode$[ebp], ecx

; 848  : 
; 849  :     // 事件通知
; 850  :     CTCPSocketService * pTCPSocketStatusService = CONTAINING_RECORD(this, CTCPSocketService, m_TCPSocketServiceThread);

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	83 ea 0c	 sub	 edx, 12			; 0000000cH
  00020	89 55 f4	 mov	 DWORD PTR _pTCPSocketStatusService$[ebp], edx

; 851  :     pTCPSocketStatusService->OnSocketLink(nErrorCode);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _nErrorCode$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f4	 mov	 ecx, DWORD PTR _pTCPSocketStatusService$[ebp]
  0002a	e8 00 00 00 00	 call	 ?OnSocketLink@CTCPSocketService@@IAE_NH@Z ; CTCPSocketService::OnSocketLink

; 852  : 
; 853  :     // 关闭判断
; 854  :     if (nErrorCode != 0)

  0002f	83 7d f8 00	 cmp	 DWORD PTR _nErrorCode$[ebp], 0
  00033	74 0e		 je	 SHORT $LN2@OnSocketNo

; 855  :     {
; 856  :         PerformCloseSocket(SHUT_REASON_INSIDE);

  00035	6a 00		 push	 0
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 857  :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 0c		 jmp	 SHORT $LN1@OnSocketNo
$LN2@OnSocketNo:

; 858  :     }
; 859  : 
; 860  :     // 设置状态
; 861  :     m_TCPSocketStatus = SOCKET_STATUS_CONNECT;

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	c6 41 18 02	 mov	 BYTE PTR [ecx+24], 2

; 862  : 
; 863  :     return 1;

  0004a	b8 01 00 00 00	 mov	 eax, 1
$LN1@OnSocketNo:

; 864  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?OnSocketNotifyConnect@CTCPSocketServiceThread@@AAEJIJ@Z ENDP ; CTCPSocketServiceThread::OnSocketNotifyConnect
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketNotifyClose@CTCPSocketServiceThread@@AAEJIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnSocketNotifyClose@CTCPSocketServiceThread@@AAEJIJ@Z PROC ; CTCPSocketServiceThread::OnSocketNotifyClose, COMDAT
; _this$ = ecx

; 836  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 837  :     // 关闭连接
; 838  :     PerformCloseSocket(true);

  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 839  : 
; 840  :     return 1;

  00011	b8 01 00 00 00	 mov	 eax, 1

; 841  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?OnSocketNotifyClose@CTCPSocketServiceThread@@AAEJIJ@Z ENDP ; CTCPSocketServiceThread::OnSocketNotifyClose
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketNotifyWrite@CTCPSocketServiceThread@@AAEJIJ@Z
_TEXT	SEGMENT
_nSendCount$1 = -24					; size = 4
tv79 = -20						; size = 4
_dwPacketSize$2 = -16					; size = 4
_dwTotalCount$3 = -12					; size = 4
_this$ = -8						; size = 4
_wSendSize$4 = -4					; size = 2
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnSocketNotifyWrite@CTCPSocketServiceThread@@AAEJIJ@Z PROC ; CTCPSocketServiceThread::OnSocketNotifyWrite, COMDAT
; _this$ = ecx

; 778  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 779  :     // 缓冲判断
; 780  :     if ((m_bNeedBuffer == true) && (m_dwBufferData > 0L))

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 88 62 80
	02 00		 movzx	 ecx, BYTE PTR [eax+163938]
  00013	83 f9 01	 cmp	 ecx, 1
  00016	0f 85 4e 01 00
	00		 jne	 $LN4@OnSocketNo
  0001c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	83 ba 64 80 02
	00 00		 cmp	 DWORD PTR [edx+163940], 0
  00026	0f 86 3e 01 00
	00		 jbe	 $LN4@OnSocketNo

; 781  :     {
; 782  :         // 变量定义
; 783  :         DWORD dwTotalCount = 0;

  0002c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwTotalCount$3[ebp], 0

; 784  :         DWORD dwPacketSize = 4096;

  00033	c7 45 f0 00 10
	00 00		 mov	 DWORD PTR _dwPacketSize$2[ebp], 4096 ; 00001000H

; 785  : 
; 786  :         // 设置变量
; 787  :         m_dwSendTickCount = GetTickCount() / 1000L;

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00040	33 d2		 xor	 edx, edx
  00042	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00047	f7 f1		 div	 ecx
  00049	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	89 82 7c 80 02
	00		 mov	 DWORD PTR [edx+163964], eax
$LN2@OnSocketNo:

; 788  : 
; 789  :         // 发送数据
; 790  :         while (dwTotalCount < m_dwBufferData)

  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR _dwTotalCount$3[ebp]
  00058	3b 88 64 80 02
	00		 cmp	 ecx, DWORD PTR [eax+163940]
  0005e	0f 83 ef 00 00
	00		 jae	 $LN3@OnSocketNo

; 791  :         {
; 792  :             // 发生数据
; 793  :             WORD wSendSize = (WORD)__min(dwPacketSize, m_dwBufferData - dwTotalCount);

  00064	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00067	8b 82 64 80 02
	00		 mov	 eax, DWORD PTR [edx+163940]
  0006d	2b 45 f4	 sub	 eax, DWORD PTR _dwTotalCount$3[ebp]
  00070	39 45 f0	 cmp	 DWORD PTR _dwPacketSize$2[ebp], eax
  00073	73 08		 jae	 SHORT $LN9@OnSocketNo
  00075	8b 4d f0	 mov	 ecx, DWORD PTR _dwPacketSize$2[ebp]
  00078	89 4d ec	 mov	 DWORD PTR tv79[ebp], ecx
  0007b	eb 0f		 jmp	 SHORT $LN10@OnSocketNo
$LN9@OnSocketNo:
  0007d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00080	8b 82 64 80 02
	00		 mov	 eax, DWORD PTR [edx+163940]
  00086	2b 45 f4	 sub	 eax, DWORD PTR _dwTotalCount$3[ebp]
  00089	89 45 ec	 mov	 DWORD PTR tv79[ebp], eax
$LN10@OnSocketNo:
  0008c	66 8b 4d ec	 mov	 cx, WORD PTR tv79[ebp]
  00090	66 89 4d fc	 mov	 WORD PTR _wSendSize$4[ebp], cx

; 794  :             INT nSendCount = send(m_hSocket, (char *)m_pcbDataBuffer + dwTotalCount, wSendSize, 0);

  00094	6a 00		 push	 0
  00096	0f b7 55 fc	 movzx	 edx, WORD PTR _wSendSize$4[ebp]
  0009a	52		 push	 edx
  0009b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 88 6c 80 02
	00		 mov	 ecx, DWORD PTR [eax+163948]
  000a4	03 4d f4	 add	 ecx, DWORD PTR _dwTotalCount$3[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ab	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ae	50		 push	 eax
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16
  000b5	89 45 e8	 mov	 DWORD PTR _nSendCount$1[ebp], eax

; 795  : 
; 796  :             // 错误判断
; 797  :             if (nSendCount == SOCKET_ERROR)

  000b8	83 7d e8 ff	 cmp	 DWORD PTR _nSendCount$1[ebp], -1
  000bc	0f 85 83 00 00
	00		 jne	 $LN5@OnSocketNo

; 798  :             {
; 799  :                 // 缓冲判断
; 800  :                 if (WSAGetLastError() == WSAEWOULDBLOCK)

  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  000c8	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  000cd	75 65		 jne	 SHORT $LN6@OnSocketNo

; 801  :                 {
; 802  :                     // 设置变量
; 803  :                     m_bNeedBuffer = false;

  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	c6 81 62 80 02
	00 00		 mov	 BYTE PTR [ecx+163938], 0

; 804  :                     m_dwBufferData -= dwTotalCount;

  000d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	8b 82 64 80 02
	00		 mov	 eax, DWORD PTR [edx+163940]
  000e2	2b 45 f4	 sub	 eax, DWORD PTR _dwTotalCount$3[ebp]
  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	89 81 64 80 02
	00		 mov	 DWORD PTR [ecx+163940], eax

; 805  : 
; 806  :                     // 移动内存
; 807  :                     if (m_dwBufferData > 0L)

  000ee	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000f1	83 ba 64 80 02
	00 00		 cmp	 DWORD PTR [edx+163940], 0
  000f8	76 33		 jbe	 SHORT $LN7@OnSocketNo

; 808  :                     {
; 809  :                         m_bNeedBuffer = true;

  000fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	c6 80 62 80 02
	00 01		 mov	 BYTE PTR [eax+163938], 1

; 810  :                         MoveMemory(m_pcbDataBuffer, m_pcbDataBuffer + dwTotalCount, m_dwBufferData);

  00104	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	8b 91 64 80 02
	00		 mov	 edx, DWORD PTR [ecx+163940]
  0010d	52		 push	 edx
  0010e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 88 6c 80 02
	00		 mov	 ecx, DWORD PTR [eax+163948]
  00117	03 4d f4	 add	 ecx, DWORD PTR _dwTotalCount$3[ebp]
  0011a	51		 push	 ecx
  0011b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	8b 82 6c 80 02
	00		 mov	 eax, DWORD PTR [edx+163948]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 _memmove
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@OnSocketNo:

; 811  :                     }
; 812  : 
; 813  :                     return 1L;

  0012d	b8 01 00 00 00	 mov	 eax, 1
  00132	eb 3b		 jmp	 SHORT $LN1@OnSocketNo
$LN6@OnSocketNo:

; 814  :                 }
; 815  : 
; 816  :                 // 关闭连接
; 817  :                 PerformCloseSocket(SHUT_REASON_EXCEPTION);

  00134	6a 04		 push	 4
  00136	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 818  : 
; 819  :                 return 1L;

  0013e	b8 01 00 00 00	 mov	 eax, 1
  00143	eb 2a		 jmp	 SHORT $LN1@OnSocketNo
$LN5@OnSocketNo:

; 820  :             }
; 821  : 
; 822  :             // 设置变量
; 823  :             dwTotalCount += nSendCount;

  00145	8b 4d f4	 mov	 ecx, DWORD PTR _dwTotalCount$3[ebp]
  00148	03 4d e8	 add	 ecx, DWORD PTR _nSendCount$1[ebp]
  0014b	89 4d f4	 mov	 DWORD PTR _dwTotalCount$3[ebp], ecx

; 824  :         }

  0014e	e9 ff fe ff ff	 jmp	 $LN2@OnSocketNo
$LN3@OnSocketNo:

; 825  : 
; 826  :         // 设置变量
; 827  :         m_dwBufferData = 0L;

  00153	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00156	c7 82 64 80 02
	00 00 00 00 00	 mov	 DWORD PTR [edx+163940], 0

; 828  :         m_bNeedBuffer = false;

  00160	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00163	c6 80 62 80 02
	00 00		 mov	 BYTE PTR [eax+163938], 0
$LN4@OnSocketNo:

; 829  :     }
; 830  : 
; 831  :     return 1L;

  0016a	b8 01 00 00 00	 mov	 eax, 1
$LN1@OnSocketNo:

; 832  : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 08 00	 ret	 8
?OnSocketNotifyWrite@CTCPSocketServiceThread@@AAEJIJ@Z ENDP ; CTCPSocketServiceThread::OnSocketNotifyWrite
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z
_TEXT	SEGMENT
$T2 = -16484						; size = 4
_pTCPSocketStatusService$3 = -16480			; size = 4
_pDataBuffer$4 = -16476					; size = 4
tv226 = -16472						; size = 4
$T5 = -16468						; size = 4
$T6 = -16464						; size = 4
tv235 = -16460						; size = 4
tv230 = -16456						; size = 4
tv224 = -16452						; size = 4
$T7 = -16448						; size = 4
tv201 = -16444						; size = 4
_iRetCode$8 = -16440					; size = 4
_Command$9 = -16436					; size = 4
_pHead$10 = -16432					; size = 4
_wDataSize$11 = -16428					; size = 2
tv225 = -16422						; size = 2
_wRealySize$12 = -16420					; size = 2
tv227 = -16413						; size = 1
_wPacketSize$13 = -16412				; size = 2
_this$ = -16408						; size = 4
_cbDataBuffer$14 = -16404				; size = 16384
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z PROC ; CTCPSocketServiceThread::OnSocketNotifyRead, COMDAT
; _this$ = ecx

; 699  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	b8 54 40 00 00	 mov	 eax, 16468		; 00004054H
  00017	e8 00 00 00 00	 call	 __chkstk
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00036	89 8d e8 bf ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 700  :     try

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 701  :     {
; 702  :         // 读取数据
; 703  :         INT iRetCode = recv(m_hSocket, (char *)m_cbRecvBuf + m_wRecvSize, sizeof(m_cbRecvBuf) - m_wRecvSize, 0);

  00043	6a 00		 push	 0
  00045	8b 85 e8 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0004b	0f b7 48 60	 movzx	 ecx, WORD PTR [eax+96]
  0004f	ba 00 80 02 00	 mov	 edx, 163840		; 00028000H
  00054	2b d1		 sub	 edx, ecx
  00056	52		 push	 edx
  00057	8b 85 e8 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0005d	0f b7 48 60	 movzx	 ecx, WORD PTR [eax+96]
  00061	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00067	8d 44 0a 62	 lea	 eax, DWORD PTR [edx+ecx+98]
  0006b	50		 push	 eax
  0006c	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00075	52		 push	 edx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recv@16
  0007c	89 85 c8 bf ff
	ff		 mov	 DWORD PTR _iRetCode$8[ebp], eax

; 704  :         if (iRetCode == SOCKET_ERROR) throw TEXT("网络连接关闭，读取数据失败");

  00082	83 bd c8 bf ff
	ff ff		 cmp	 DWORD PTR _iRetCode$8[ebp], -1
  00089	75 1b		 jne	 SHORT $LN7@OnSocketNo
  0008b	c7 85 c0 bf ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp], OFFSET ??_C@_0BL@KIGJPCPC@?M?x?B?g?A?$KM?$LN?S?$LJ?X?$LB?U?$KD?$KM?$LG?A?H?$KB?J?$PN?$LO?$NN?J?$KH?$LA?$NM@
  00095	68 00 00 00 00	 push	 OFFSET __TI2PAD
  0009a	8d 85 c0 bf ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@OnSocketNo:

; 705  :         ASSERT(m_dwSendPacketCount > 0);

  000a6	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	83 b9 84 80 02
	00 00		 cmp	 DWORD PTR [ecx+163972], 0
  000b3	77 1f		 ja	 SHORT $LN17@OnSocketNo
  000b5	68 c1 02 00 00	 push	 705			; 000002c1H
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000bf	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000c4	89 85 bc bf ff
	ff		 mov	 DWORD PTR tv224[ebp], eax
  000ca	83 bd bc bf ff
	ff 00		 cmp	 DWORD PTR tv224[ebp], 0
  000d1	74 01		 je	 SHORT $LN17@OnSocketNo
  000d3	cc		 int	 3
$LN17@OnSocketNo:

; 706  :         m_wRecvSize += iRetCode;

  000d4	8b 85 e8 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  000da	0f b7 48 60	 movzx	 ecx, WORD PTR [eax+96]
  000de	03 8d c8 bf ff
	ff		 add	 ecx, DWORD PTR _iRetCode$8[ebp]
  000e4	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  000ea	66 89 4a 60	 mov	 WORD PTR [edx+96], cx

; 707  :         m_dwRecvTickCount = GetTickCount() / 1000L;

  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000f4	33 d2		 xor	 edx, edx
  000f6	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  000fb	f7 f1		 div	 ecx
  000fd	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00103	89 82 80 80 02
	00		 mov	 DWORD PTR [edx+163968], eax

; 708  : 
; 709  :         // 变量定义
; 710  :         WORD wPacketSize = 0;

  00109	33 c0		 xor	 eax, eax
  0010b	66 89 85 e4 bf
	ff ff		 mov	 WORD PTR _wPacketSize$13[ebp], ax

; 711  :         BYTE cbDataBuffer[SOCKET_TCP_PACKET + sizeof(TCP_Head)];
; 712  :         TCP_Head * pHead = (TCP_Head *)m_cbRecvBuf;

  00112	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00118	83 c1 62	 add	 ecx, 98			; 00000062H
  0011b	89 8d d0 bf ff
	ff		 mov	 DWORD PTR _pHead$10[ebp], ecx
$LN2@OnSocketNo:

; 713  : 
; 714  :         while (m_wRecvSize >= sizeof(TCP_Head))

  00121	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00127	0f b7 42 60	 movzx	 eax, WORD PTR [edx+96]
  0012b	83 f8 08	 cmp	 eax, 8
  0012e	0f 82 7a 02 00
	00		 jb	 $LN3@OnSocketNo

; 715  :         {
; 716  :             // 效验参数
; 717  :             wPacketSize = pHead->TCPInfo.wPacketSize;

  00134	8b 8d d0 bf ff
	ff		 mov	 ecx, DWORD PTR _pHead$10[ebp]
  0013a	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  0013e	66 89 95 e4 bf
	ff ff		 mov	 WORD PTR _wPacketSize$13[ebp], dx

; 718  :             ASSERT(pHead->TCPInfo.cbDataKind == DK_MAPPED);

  00145	8b 85 d0 bf ff
	ff		 mov	 eax, DWORD PTR _pHead$10[ebp]
  0014b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0014e	83 f9 01	 cmp	 ecx, 1
  00151	74 1f		 je	 SHORT $LN18@OnSocketNo
  00153	68 ce 02 00 00	 push	 718			; 000002ceH
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0015d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00162	89 85 b8 bf ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
  00168	83 bd b8 bf ff
	ff 00		 cmp	 DWORD PTR tv230[ebp], 0
  0016f	74 01		 je	 SHORT $LN18@OnSocketNo
  00171	cc		 int	 3
$LN18@OnSocketNo:

; 719  :             ASSERT(wPacketSize <= (SOCKET_TCP_PACKET + sizeof(TCP_Head)));

  00172	0f b7 85 e4 bf
	ff ff		 movzx	 eax, WORD PTR _wPacketSize$13[ebp]
  00179	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0017e	76 1f		 jbe	 SHORT $LN19@OnSocketNo
  00180	68 cf 02 00 00	 push	 719			; 000002cfH
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0018a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0018f	89 85 b4 bf ff
	ff		 mov	 DWORD PTR tv235[ebp], eax
  00195	83 bd b4 bf ff
	ff 00		 cmp	 DWORD PTR tv235[ebp], 0
  0019c	74 01		 je	 SHORT $LN19@OnSocketNo
  0019e	cc		 int	 3
$LN19@OnSocketNo:

; 720  :             if (pHead->TCPInfo.cbDataKind != DK_MAPPED) throw TEXT("数据包版本错误");

  0019f	8b 95 d0 bf ff
	ff		 mov	 edx, DWORD PTR _pHead$10[ebp]
  001a5	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  001a8	83 f8 01	 cmp	 eax, 1
  001ab	74 1b		 je	 SHORT $LN8@OnSocketNo
  001ad	c7 85 b0 bf ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], OFFSET ??_C@_0P@BBEPCAEF@?J?$PN?$LO?$NN?$LA?$PM?$LA?f?$LB?$LO?$LE?m?N?s@
  001b7	68 00 00 00 00	 push	 OFFSET __TI2PAD
  001bc	8d 8d b0 bf ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@OnSocketNo:

; 721  :             if (wPacketSize > (SOCKET_TCP_PACKET + sizeof(TCP_Head))) throw TEXT("数据包太大");

  001c8	0f b7 95 e4 bf
	ff ff		 movzx	 edx, WORD PTR _wPacketSize$13[ebp]
  001cf	81 fa 00 40 00
	00		 cmp	 edx, 16384		; 00004000H
  001d5	76 1b		 jbe	 SHORT $LN9@OnSocketNo
  001d7	c7 85 ac bf ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], OFFSET ??_C@_0L@CGBOKMKC@?J?$PN?$LO?$NN?$LA?$PM?L?$KL?$LE?s@
  001e1	68 00 00 00 00	 push	 OFFSET __TI2PAD
  001e6	8d 85 ac bf ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@OnSocketNo:

; 722  :             if (m_wRecvSize < wPacketSize)

  001f2	0f b7 8d e4 bf
	ff ff		 movzx	 ecx, WORD PTR _wPacketSize$13[ebp]
  001f9	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001ff	0f b7 42 60	 movzx	 eax, WORD PTR [edx+96]
  00203	3b c1		 cmp	 eax, ecx
  00205	7d 0a		 jge	 SHORT $LN10@OnSocketNo

; 723  :                 return 1;

  00207	b8 01 00 00 00	 mov	 eax, 1
  0020c	e9 c7 01 00 00	 jmp	 $LN16@OnSocketNo
$LN10@OnSocketNo:

; 724  : 
; 725  :             // 拷贝数据
; 726  :             CopyMemory(cbDataBuffer, m_cbRecvBuf, wPacketSize);

  00211	0f b7 8d e4 bf
	ff ff		 movzx	 ecx, WORD PTR _wPacketSize$13[ebp]
  00218	51		 push	 ecx
  00219	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0021f	83 c2 62	 add	 edx, 98			; 00000062H
  00222	52		 push	 edx
  00223	8d 85 ec bf ff
	ff		 lea	 eax, DWORD PTR _cbDataBuffer$14[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 _memcpy
  0022f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 727  :             m_wRecvSize -= wPacketSize;

  00232	0f b7 8d e4 bf
	ff ff		 movzx	 ecx, WORD PTR _wPacketSize$13[ebp]
  00239	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0023f	0f b7 42 60	 movzx	 eax, WORD PTR [edx+96]
  00243	2b c1		 sub	 eax, ecx
  00245	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0024b	66 89 41 60	 mov	 WORD PTR [ecx+96], ax

; 728  :             MoveMemory(m_cbRecvBuf, m_cbRecvBuf + wPacketSize, m_wRecvSize);

  0024f	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00255	0f b7 42 60	 movzx	 eax, WORD PTR [edx+96]
  00259	50		 push	 eax
  0025a	0f b7 8d e4 bf
	ff ff		 movzx	 ecx, WORD PTR _wPacketSize$13[ebp]
  00261	8b 95 e8 bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00267	8d 44 0a 62	 lea	 eax, DWORD PTR [edx+ecx+98]
  0026b	50		 push	 eax
  0026c	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00272	83 c1 62	 add	 ecx, 98			; 00000062H
  00275	51		 push	 ecx
  00276	e8 00 00 00 00	 call	 _memmove
  0027b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 729  : 
; 730  :             // 解密数据
; 731  :             WORD wRealySize = CrevasseBuffer(cbDataBuffer, wPacketSize);

  0027e	0f b7 95 e4 bf
	ff ff		 movzx	 edx, WORD PTR _wPacketSize$13[ebp]
  00285	52		 push	 edx
  00286	8d 85 ec bf ff
	ff		 lea	 eax, DWORD PTR _cbDataBuffer$14[ebp]
  0028c	50		 push	 eax
  0028d	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00293	e8 00 00 00 00	 call	 ?CrevasseBuffer@CTCPSocketServiceThread@@AAEGQAEG@Z ; CTCPSocketServiceThread::CrevasseBuffer
  00298	66 89 85 da bf
	ff ff		 mov	 WORD PTR tv225[ebp], ax
  0029f	66 8b 8d da bf
	ff ff		 mov	 cx, WORD PTR tv225[ebp]
  002a6	66 89 8d dc bf
	ff ff		 mov	 WORD PTR _wRealySize$12[ebp], cx

; 732  :             ASSERT(wRealySize >= sizeof(TCP_Head));

  002ad	0f b7 95 dc bf
	ff ff		 movzx	 edx, WORD PTR _wRealySize$12[ebp]
  002b4	83 fa 08	 cmp	 edx, 8
  002b7	73 1f		 jae	 SHORT $LN20@OnSocketNo
  002b9	68 dc 02 00 00	 push	 732			; 000002dcH
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  002c3	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  002c8	89 85 a8 bf ff
	ff		 mov	 DWORD PTR tv226[ebp], eax
  002ce	83 bd a8 bf ff
	ff 00		 cmp	 DWORD PTR tv226[ebp], 0
  002d5	74 01		 je	 SHORT $LN20@OnSocketNo
  002d7	cc		 int	 3
$LN20@OnSocketNo:

; 733  : 			
; 734  :             // 解释数据
; 735  :             WORD wDataSize = wRealySize - sizeof(TCP_Head);

  002d8	0f b7 8d dc bf
	ff ff		 movzx	 ecx, WORD PTR _wRealySize$12[ebp]
  002df	83 e9 08	 sub	 ecx, 8
  002e2	66 89 8d d4 bf
	ff ff		 mov	 WORD PTR _wDataSize$11[ebp], cx

; 736  :             VOID * pDataBuffer = cbDataBuffer + sizeof(TCP_Head);

  002e9	8d 95 f4 bf ff
	ff		 lea	 edx, DWORD PTR _cbDataBuffer$14[ebp+8]
  002ef	89 95 a4 bf ff
	ff		 mov	 DWORD PTR _pDataBuffer$4[ebp], edx

; 737  :             TCP_Command Command = ((TCP_Head *)cbDataBuffer)->CommandInfo;

  002f5	8b 85 f0 bf ff
	ff		 mov	 eax, DWORD PTR _cbDataBuffer$14[ebp+4]
  002fb	89 85 cc bf ff
	ff		 mov	 DWORD PTR _Command$9[ebp], eax

; 738  : 
; 739  :             // 内核数据
; 740  :             if (Command.wMainCmdID == MDM_KN_COMMAND)

  00301	0f b7 8d cc bf
	ff ff		 movzx	 ecx, WORD PTR _Command$9[ebp]
  00308	85 c9		 test	 ecx, ecx
  0030a	75 41		 jne	 SHORT $LN11@OnSocketNo

; 741  :             {
; 742  :                 switch (Command.wSubCmdID)

  0030c	0f b7 95 ce bf
	ff ff		 movzx	 edx, WORD PTR _Command$9[ebp+2]
  00313	89 95 c4 bf ff
	ff		 mov	 DWORD PTR tv201[ebp], edx
  00319	83 bd c4 bf ff
	ff 01		 cmp	 DWORD PTR tv201[ebp], 1
  00320	74 0b		 je	 SHORT $LN13@OnSocketNo
  00322	83 bd c4 bf ff
	ff 03		 cmp	 DWORD PTR tv201[ebp], 3
  00329	74 13		 je	 SHORT $LN14@OnSocketNo
  0032b	eb 1e		 jmp	 SHORT $LN4@OnSocketNo
$LN13@OnSocketNo:

; 743  :                 {
; 744  :                     case SUB_KN_DETECT_SOCKET:		// 网络检测
; 745  :                     {
; 746  :                         // 回应数据
; 747  :                         PerformSendData(MDM_KN_COMMAND, SUB_KN_DETECT_SOCKET);

  0032d	6a 01		 push	 1
  0032f	6a 00		 push	 0
  00331	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00337	e8 00 00 00 00	 call	 ?PerformSendData@CTCPSocketServiceThread@@AAEKGG@Z ; CTCPSocketServiceThread::PerformSendData

; 748  : 
; 749  :                         break;

  0033c	eb 0d		 jmp	 SHORT $LN4@OnSocketNo
$LN14@OnSocketNo:

; 750  :                     }
; 751  :                      case SUB_KN_SHUT_DOWN_SOCKET:	// 中断连接
; 752  :                      	{
; 753  :                      		// 中断连接
; 754  :                      		PerformCloseSocket(true); 

  0033e	6a 01		 push	 1
  00340	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00346	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket
$LN4@OnSocketNo:

; 755  :                      		break;
; 756  :                      	}
; 757  :                 }
; 758  :             }
; 759  :             else

  0034b	eb 5c		 jmp	 SHORT $LN12@OnSocketNo
$LN11@OnSocketNo:

; 760  :             {
; 761  :                 // 处理数据
; 762  :                 CTCPSocketService * pTCPSocketStatusService = CONTAINING_RECORD(this, CTCPSocketService, m_TCPSocketServiceThread);

  0034d	8b 85 e8 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00353	83 e8 0c	 sub	 eax, 12			; 0000000cH
  00356	89 85 a0 bf ff
	ff		 mov	 DWORD PTR _pTCPSocketStatusService$3[ebp], eax

; 763  :                 if (pTCPSocketStatusService->OnSocketRead(Command, pDataBuffer, wDataSize) == false) throw TEXT("网络数据包处理失败");

  0035c	0f b7 8d d4 bf
	ff ff		 movzx	 ecx, WORD PTR _wDataSize$11[ebp]
  00363	51		 push	 ecx
  00364	8b 95 a4 bf ff
	ff		 mov	 edx, DWORD PTR _pDataBuffer$4[ebp]
  0036a	52		 push	 edx
  0036b	8b 85 cc bf ff
	ff		 mov	 eax, DWORD PTR _Command$9[ebp]
  00371	50		 push	 eax
  00372	8b 8d a0 bf ff
	ff		 mov	 ecx, DWORD PTR _pTCPSocketStatusService$3[ebp]
  00378	e8 00 00 00 00	 call	 ?OnSocketRead@CTCPSocketService@@IAE_NUTCP_Command@@PAXG@Z ; CTCPSocketService::OnSocketRead
  0037d	88 85 e3 bf ff
	ff		 mov	 BYTE PTR tv227[ebp], al
  00383	0f b6 8d e3 bf
	ff ff		 movzx	 ecx, BYTE PTR tv227[ebp]
  0038a	85 c9		 test	 ecx, ecx
  0038c	75 1b		 jne	 SHORT $LN12@OnSocketNo
  0038e	c7 85 9c bf ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_C@_0BD@GNALJNHF@?M?x?B?g?J?$PN?$LO?$NN?$LA?$PM?$LE?$KG?$MA?m?J?$KH?$LA?$NM@
  00398	68 00 00 00 00	 push	 OFFSET __TI2PAD
  0039d	8d 95 9c bf ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  003a3	52		 push	 edx
  003a4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@OnSocketNo:

; 764  :             }
; 765  :         };

  003a9	e9 73 fd ff ff	 jmp	 $LN2@OnSocketNo
$LN3@OnSocketNo:

; 766  :     }

  003ae	eb 13		 jmp	 SHORT $LN21@OnSocketNo
__catch$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z$0:

; 767  :     catch (...)
; 768  :     {
; 769  :         // 关闭连接
; 770  :         PerformCloseSocket(true);

  003b0	6a 01		 push	 1
  003b2	8b 8d e8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  003b8	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 771  :     }

  003bd	b8 00 00 00 00	 mov	 eax, $LN24@OnSocketNo
  003c2	c3		 ret	 0
$LN21@OnSocketNo:
  003c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003ca	eb 07		 jmp	 SHORT __tryend$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z$1
$LN24@OnSocketNo:
  003cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z$1:

; 772  : 
; 773  :     return 1;

  003d3	b8 01 00 00 00	 mov	 eax, 1
$LN16@OnSocketNo:

; 774  : }

  003d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003e2	59		 pop	 ecx
  003e3	5f		 pop	 edi
  003e4	5e		 pop	 esi
  003e5	5b		 pop	 ebx
  003e6	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e9	33 cd		 xor	 ecx, ebp
  003eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003f0	8b e5		 mov	 esp, ebp
  003f2	5d		 pop	 ebp
  003f3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 98 bf ff
	ff		 mov	 ecx, DWORD PTR [edx-16488]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z ENDP ; CTCPSocketServiceThread::OnSocketNotifyRead
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z
_TEXT	SEGMENT
$T2 = -16464						; size = 4
$T3 = -16460						; size = 4
$T4 = -16456						; size = 4
$T5 = -16452						; size = 4
$T6 = -16448						; size = 4
_pTCPSocketStatusService$7 = -16444			; size = 4
$T8 = -16440						; size = 4
_ThreadLock$ = -16436					; size = 12
_pSendDataRequest$9 = -16424				; size = 4
_pConnectRequest$10 = -16420				; size = 4
tv79 = -16416						; size = 4
_pSendDataExRequest$11 = -16412				; size = 4
_DataHead$ = -16408					; size = 4
_this$ = -16404						; size = 4
_cbBuffer$ = -16400					; size = 16384
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z PROC ; CTCPSocketServiceThread::OnServiceRequest, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 44 40 00 00	 mov	 eax, 16452		; 00004044H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 8d ec bf ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 608  :     // 变量定义
; 609  :     tagDataHead DataHead;
; 610  :     CWHDataLocker ThreadLock(m_CriticalSection);

  00035	6a 01		 push	 1
  00037	8b 85 ec bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 3c	 add	 eax, 60			; 0000003cH
  00040	50		 push	 eax
  00041	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 611  : 
; 612  :     // 提取数据
; 613  :     BYTE cbBuffer[MAX_ASYNCHRONISM_DATA];
; 614  :     if (m_DataQueue.DistillData(DataHead, cbBuffer, sizeof(cbBuffer)) == false)

  00054	68 00 40 00 00	 push	 16384			; 00004000H
  00059	8d 8d f0 bf ff
	ff		 lea	 ecx, DWORD PTR _cbBuffer$[ebp]
  0005f	51		 push	 ecx
  00060	8d 95 e8 bf ff
	ff		 lea	 edx, DWORD PTR _DataHead$[ebp]
  00066	52		 push	 edx
  00067	8b 8d ec bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z
  00076	0f b6 c0	 movzx	 eax, al
  00079	85 c0		 test	 eax, eax
  0007b	75 28		 jne	 SHORT $LN4@OnServiceR

; 615  :         return 0;

  0007d	c7 85 c8 bf ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp], 0
  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  0009a	8b 85 c8 bf ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  000a0	e9 47 02 00 00	 jmp	 $LN1@OnServiceR
$LN4@OnServiceR:

; 616  : 
; 617  :     // 数据处理
; 618  :     switch (DataHead.wIdentifier)

  000a5	0f b7 8d ea bf
	ff ff		 movzx	 ecx, WORD PTR _DataHead$[ebp+2]
  000ac	89 8d e0 bf ff
	ff		 mov	 DWORD PTR tv79[ebp], ecx
  000b2	8b 95 e0 bf ff
	ff		 mov	 edx, DWORD PTR tv79[ebp]
  000b8	83 ea 01	 sub	 edx, 1
  000bb	89 95 e0 bf ff
	ff		 mov	 DWORD PTR tv79[ebp], edx
  000c1	83 bd e0 bf ff
	ff 03		 cmp	 DWORD PTR tv79[ebp], 3
  000c8	0f 87 fb 01 00
	00		 ja	 $LN2@OnServiceR
  000ce	8b 85 e0 bf ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  000d4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN29@OnServiceR[eax*4]
$LN5@OnServiceR:

; 619  :     {
; 620  :         case REQUEST_CONNECT:		// 连接请求
; 621  :         {
; 622  :             // 效验数据
; 623  :             ASSERT(DataHead.wDataSize == sizeof(tagConnectRequest));

  000db	0f b7 8d e8 bf
	ff ff		 movzx	 ecx, WORD PTR _DataHead$[ebp]
  000e2	83 f9 08	 cmp	 ecx, 8
  000e5	74 14		 je	 SHORT $LN11@OnServiceR
  000e7	68 6f 02 00 00	 push	 623			; 0000026fH
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000f1	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000f6	85 c0		 test	 eax, eax
  000f8	74 01		 je	 SHORT $LN11@OnServiceR
  000fa	cc		 int	 3
$LN11@OnServiceR:

; 624  :             tagConnectRequest * pConnectRequest = (tagConnectRequest *)cbBuffer;

  000fb	8d 85 f0 bf ff
	ff		 lea	 eax, DWORD PTR _cbBuffer$[ebp]
  00101	89 85 dc bf ff
	ff		 mov	 DWORD PTR _pConnectRequest$10[ebp], eax

; 625  : 
; 626  :             // 数据处理
; 627  :             if (PerformConnect(pConnectRequest->dwServerIP, pConnectRequest->wPort) != CONNECT_SUCCESS)

  00107	8b 8d dc bf ff
	ff		 mov	 ecx, DWORD PTR _pConnectRequest$10[ebp]
  0010d	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00110	52		 push	 edx
  00111	8b 85 dc bf ff
	ff		 mov	 eax, DWORD PTR _pConnectRequest$10[ebp]
  00117	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011a	51		 push	 ecx
  0011b	8b 8d ec bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00121	e8 00 00 00 00	 call	 ?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z ; CTCPSocketServiceThread::PerformConnect
  00126	85 c0		 test	 eax, eax
  00128	74 1f		 je	 SHORT $LN6@OnServiceR

; 628  :             {
; 629  :                 // 事件通知
; 630  :                 CTCPSocketService * pTCPSocketStatusService = CONTAINING_RECORD(this, CTCPSocketService, m_TCPSocketServiceThread);

  0012a	8b 95 ec bf ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00130	83 ea 0c	 sub	 edx, 12			; 0000000cH
  00133	89 95 c4 bf ff
	ff		 mov	 DWORD PTR _pTCPSocketStatusService$7[ebp], edx

; 631  :                 pTCPSocketStatusService->OnSocketLink(WSAEADDRNOTAVAIL);

  00139	68 41 27 00 00	 push	 10049			; 00002741H
  0013e	8b 8d c4 bf ff
	ff		 mov	 ecx, DWORD PTR _pTCPSocketStatusService$7[ebp]
  00144	e8 00 00 00 00	 call	 ?OnSocketLink@CTCPSocketService@@IAE_NH@Z ; CTCPSocketService::OnSocketLink
$LN6@OnServiceR:

; 632  :             }
; 633  : 
; 634  :             return 1;

  00149	c7 85 c0 bf ff
	ff 01 00 00 00	 mov	 DWORD PTR $T6[ebp], 1
  00153	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015a	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  00166	8b 85 c0 bf ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0016c	e9 7b 01 00 00	 jmp	 $LN1@OnServiceR
$LN7@OnServiceR:

; 635  :         }
; 636  :         case REQUEST_SEND_DATA:		// 发送请求
; 637  :         {
; 638  :             // 效验数据
; 639  :             ASSERT(DataHead.wDataSize == sizeof(tagSendDataRequest));

  00171	0f b7 85 e8 bf
	ff ff		 movzx	 eax, WORD PTR _DataHead$[ebp]
  00178	83 f8 04	 cmp	 eax, 4
  0017b	74 14		 je	 SHORT $LN12@OnServiceR
  0017d	68 7f 02 00 00	 push	 639			; 0000027fH
  00182	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00187	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0018c	85 c0		 test	 eax, eax
  0018e	74 01		 je	 SHORT $LN12@OnServiceR
  00190	cc		 int	 3
$LN12@OnServiceR:

; 640  :             tagSendDataRequest * pSendDataRequest = (tagSendDataRequest *)cbBuffer;

  00191	8d 95 f0 bf ff
	ff		 lea	 edx, DWORD PTR _cbBuffer$[ebp]
  00197	89 95 d8 bf ff
	ff		 mov	 DWORD PTR _pSendDataRequest$9[ebp], edx

; 641  : 
; 642  :             // 数据处理
; 643  :             PerformSendData(pSendDataRequest->wMainCmdID, pSendDataRequest->wSubCmdID);

  0019d	8b 85 d8 bf ff
	ff		 mov	 eax, DWORD PTR _pSendDataRequest$9[ebp]
  001a3	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  001a7	51		 push	 ecx
  001a8	8b 95 d8 bf ff
	ff		 mov	 edx, DWORD PTR _pSendDataRequest$9[ebp]
  001ae	0f b7 02	 movzx	 eax, WORD PTR [edx]
  001b1	50		 push	 eax
  001b2	8b 8d ec bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	e8 00 00 00 00	 call	 ?PerformSendData@CTCPSocketServiceThread@@AAEKGG@Z ; CTCPSocketServiceThread::PerformSendData

; 644  : 
; 645  :             return 1;

  001bd	c7 85 bc bf ff
	ff 01 00 00 00	 mov	 DWORD PTR $T5[ebp], 1
  001c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ce	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  001da	8b 85 bc bf ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  001e0	e9 07 01 00 00	 jmp	 $LN1@OnServiceR
$LN8@OnServiceR:

; 646  :         }
; 647  :         case REQUEST_SEND_DATA_EX:	// 发送请求
; 648  :         {
; 649  :             // 效验数据
; 650  :             tagSendDataExRequest * pSendDataExRequest = (tagSendDataExRequest *)cbBuffer;

  001e5	8d 8d f0 bf ff
	ff		 lea	 ecx, DWORD PTR _cbBuffer$[ebp]
  001eb	89 8d e4 bf ff
	ff		 mov	 DWORD PTR _pSendDataExRequest$11[ebp], ecx

; 651  :             ASSERT(DataHead.wDataSize >= (sizeof(tagSendDataExRequest) - sizeof(pSendDataExRequest->cbSendBuffer)));

  001f1	0f b7 95 e8 bf
	ff ff		 movzx	 edx, WORD PTR _DataHead$[ebp]
  001f8	83 fa 06	 cmp	 edx, 6
  001fb	73 14		 jae	 SHORT $LN13@OnServiceR
  001fd	68 8b 02 00 00	 push	 651			; 0000028bH
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00207	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0020c	85 c0		 test	 eax, eax
  0020e	74 01		 je	 SHORT $LN13@OnServiceR
  00210	cc		 int	 3
$LN13@OnServiceR:

; 652  :             ASSERT(DataHead.wDataSize == (pSendDataExRequest->wDataSize + sizeof(tagSendDataExRequest) - sizeof(pSendDataExRequest->cbSendBuffer)));

  00211	0f b7 8d e8 bf
	ff ff		 movzx	 ecx, WORD PTR _DataHead$[ebp]
  00218	8b 95 e4 bf ff
	ff		 mov	 edx, DWORD PTR _pSendDataExRequest$11[ebp]
  0021e	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  00222	83 c0 06	 add	 eax, 6
  00225	3b c8		 cmp	 ecx, eax
  00227	74 14		 je	 SHORT $LN14@OnServiceR
  00229	68 8c 02 00 00	 push	 652			; 0000028cH
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00233	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00238	85 c0		 test	 eax, eax
  0023a	74 01		 je	 SHORT $LN14@OnServiceR
  0023c	cc		 int	 3
$LN14@OnServiceR:

; 653  : 
; 654  :             // 数据处理
; 655  :             PerformSendData(pSendDataExRequest->wMainCmdID, pSendDataExRequest->wSubCmdID, pSendDataExRequest->cbSendBuffer, pSendDataExRequest->wDataSize);

  0023d	8b 95 e4 bf ff
	ff		 mov	 edx, DWORD PTR _pSendDataExRequest$11[ebp]
  00243	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  00247	50		 push	 eax
  00248	8b 8d e4 bf ff
	ff		 mov	 ecx, DWORD PTR _pSendDataExRequest$11[ebp]
  0024e	83 c1 06	 add	 ecx, 6
  00251	51		 push	 ecx
  00252	8b 95 e4 bf ff
	ff		 mov	 edx, DWORD PTR _pSendDataExRequest$11[ebp]
  00258	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0025c	50		 push	 eax
  0025d	8b 8d e4 bf ff
	ff		 mov	 ecx, DWORD PTR _pSendDataExRequest$11[ebp]
  00263	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00266	52		 push	 edx
  00267	8b 8d ec bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0026d	e8 00 00 00 00	 call	 ?PerformSendData@CTCPSocketServiceThread@@AAEKGGPAXG@Z ; CTCPSocketServiceThread::PerformSendData

; 656  : 
; 657  :             return 1;

  00272	c7 85 b8 bf ff
	ff 01 00 00 00	 mov	 DWORD PTR $T4[ebp], 1
  0027c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00283	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00289	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  0028f	8b 85 b8 bf ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00295	eb 55		 jmp	 SHORT $LN1@OnServiceR
$LN9@OnServiceR:

; 658  :         }
; 659  :         case REQUEST_CLOSE_SOCKET:	// 关闭请求
; 660  :         {
; 661  :             // 关闭连接
; 662  :             PerformCloseSocket(true);

  00297	6a 01		 push	 1
  00299	8b 8d ec bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0029f	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 663  : 
; 664  :             return 1;

  002a4	c7 85 b4 bf ff
	ff 01 00 00 00	 mov	 DWORD PTR $T3[ebp], 1
  002ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b5	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  002c1	8b 85 b4 bf ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  002c7	eb 23		 jmp	 SHORT $LN1@OnServiceR
$LN2@OnServiceR:

; 665  :         }
; 666  :     }
; 667  : 
; 668  :     return 0;

  002c9	c7 85 b0 bf ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  002d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002da	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  002e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  002e6	8b 85 b0 bf ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@OnServiceR:

; 669  : }

  002ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f6	59		 pop	 ecx
  002f7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fa	33 cd		 xor	 ecx, ebp
  002fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00301	8b e5		 mov	 esp, ebp
  00303	5d		 pop	 ebp
  00304	c2 08 00	 ret	 8
  00307	90		 npad	 1
$LN29@OnServiceR:
  00308	00 00 00 00	 DD	 $LN5@OnServiceR
  0030c	00 00 00 00	 DD	 $LN7@OnServiceR
  00310	00 00 00 00	 DD	 $LN8@OnServiceR
  00314	00 00 00 00	 DD	 $LN9@OnServiceR
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z$0:
  00000	8d 8d cc bf ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 8a b8 bf ff
	ff		 mov	 ecx, DWORD PTR [edx-16456]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z ENDP ; CTCPSocketServiceThread::OnServiceRequest
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnSocketNotify@CTCPSocketServiceThread@@AAEJIJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnSocketNotify@CTCPSocketServiceThread@@AAEJIJ@Z PROC	; CTCPSocketServiceThread::OnSocketNotify, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 674  :     switch (WSAGETSELECTEVENT(lParam))

  00009	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00011	0f b7 c8	 movzx	 ecx, ax
  00014	89 4d fc	 mov	 DWORD PTR tv67[ebp], ecx
  00017	8b 55 fc	 mov	 edx, DWORD PTR tv67[ebp]
  0001a	83 ea 01	 sub	 edx, 1
  0001d	89 55 fc	 mov	 DWORD PTR tv67[ebp], edx
  00020	83 7d fc 1f	 cmp	 DWORD PTR tv67[ebp], 31	; 0000001fH
  00024	77 59		 ja	 SHORT $LN2@OnSocketNo
  00026	8b 45 fc	 mov	 eax, DWORD PTR tv67[ebp]
  00029	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN9@OnSocketNo[eax]
  00030	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN10@OnSocketNo[ecx*4]
$LN4@OnSocketNo:

; 675  :     {
; 676  :         case FD_READ:		// 数据读取
; 677  :         {
; 678  :             return OnSocketNotifyRead(wParam, lParam);

  00037	8b 55 0c	 mov	 edx, DWORD PTR _lParam$[ebp]
  0003a	52		 push	 edx
  0003b	8b 45 08	 mov	 eax, DWORD PTR _wParam$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?OnSocketNotifyRead@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyRead
  00047	eb 38		 jmp	 SHORT $LN1@OnSocketNo
$LN5@OnSocketNo:

; 679  :         }
; 680  :         case FD_WRITE:		// 网络发送
; 681  :         {
; 682  :             return OnSocketNotifyWrite(wParam, lParam);

  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0004c	51		 push	 ecx
  0004d	8b 55 08	 mov	 edx, DWORD PTR _wParam$[ebp]
  00050	52		 push	 edx
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?OnSocketNotifyWrite@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyWrite
  00059	eb 26		 jmp	 SHORT $LN1@OnSocketNo
$LN6@OnSocketNo:

; 683  :         }
; 684  :         case FD_CLOSE:		// 网络关闭
; 685  :         {
; 686  :             return OnSocketNotifyClose(wParam, lParam);

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _lParam$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00062	51		 push	 ecx
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?OnSocketNotifyClose@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyClose
  0006b	eb 14		 jmp	 SHORT $LN1@OnSocketNo
$LN7@OnSocketNo:

; 687  :         }
; 688  :         case FD_CONNECT:	// 网络连接
; 689  :         {
; 690  :             return OnSocketNotifyConnect(wParam, lParam);

  0006d	8b 55 0c	 mov	 edx, DWORD PTR _lParam$[ebp]
  00070	52		 push	 edx
  00071	8b 45 08	 mov	 eax, DWORD PTR _wParam$[ebp]
  00074	50		 push	 eax
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?OnSocketNotifyConnect@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotifyConnect
  0007d	eb 02		 jmp	 SHORT $LN1@OnSocketNo
$LN2@OnSocketNo:

; 691  :         }
; 692  :     }
; 693  : 
; 694  :     return 0;

  0007f	33 c0		 xor	 eax, eax
$LN1@OnSocketNo:

; 695  : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
  00087	90		 npad	 1
$LN10@OnSocketNo:
  00088	00 00 00 00	 DD	 $LN4@OnSocketNo
  0008c	00 00 00 00	 DD	 $LN5@OnSocketNo
  00090	00 00 00 00	 DD	 $LN7@OnSocketNo
  00094	00 00 00 00	 DD	 $LN6@OnSocketNo
  00098	00 00 00 00	 DD	 $LN2@OnSocketNo
$LN9@OnSocketNo:
  0009c	00		 DB	 0
  0009d	01		 DB	 1
  0009e	04		 DB	 4
  0009f	04		 DB	 4
  000a0	04		 DB	 4
  000a1	04		 DB	 4
  000a2	04		 DB	 4
  000a3	04		 DB	 4
  000a4	04		 DB	 4
  000a5	04		 DB	 4
  000a6	04		 DB	 4
  000a7	04		 DB	 4
  000a8	04		 DB	 4
  000a9	04		 DB	 4
  000aa	04		 DB	 4
  000ab	02		 DB	 2
  000ac	04		 DB	 4
  000ad	04		 DB	 4
  000ae	04		 DB	 4
  000af	04		 DB	 4
  000b0	04		 DB	 4
  000b1	04		 DB	 4
  000b2	04		 DB	 4
  000b3	04		 DB	 4
  000b4	04		 DB	 4
  000b5	04		 DB	 4
  000b6	04		 DB	 4
  000b7	04		 DB	 4
  000b8	04		 DB	 4
  000b9	04		 DB	 4
  000ba	04		 DB	 4
  000bb	03		 DB	 3
?OnSocketNotify@CTCPSocketServiceThread@@AAEJIJ@Z ENDP	; CTCPSocketServiceThread::OnSocketNotify
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?EncryptBuffer@CTCPSocketServiceThread@@AAEGQAEGG@Z
_TEXT	SEGMENT
_dwHold$1 = -92						; size = 4
_dwHold$2 = -88						; size = 4
_i$3 = -84						; size = 4
_dwHold$4 = -80						; size = 4
_dwHold$5 = -76						; size = 4
$T6 = -72						; size = 2
$T7 = -70						; size = 2
_wEncrypCount$ = -68					; size = 2
_pdwXor$ = -64						; size = 4
_pHead$ = -60						; size = 4
_pwSeed$ = -56						; size = 4
_wSnapCount$ = -52					; size = 2
_cbMap$8 = -45						; size = 1
_cbData$ = -44						; size = 1
_wEncryptSize$ = -40					; size = 2
_this$ = -36						; size = 4
_i$9 = -32						; size = 2
_cbCheckCode$ = -25					; size = 1
_dwXorKey$ = -24					; size = 4
_Guid$10 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pcbDataBuffer$ = 8					; size = 4
_wDataSize$ = 12					; size = 2
_wBufferSize$ = 16					; size = 2
?EncryptBuffer@CTCPSocketServiceThread@@AAEGQAEGG@Z PROC ; CTCPSocketServiceThread::EncryptBuffer, COMDAT
; _this$ = ecx

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 529  : 	//效验参数
; 530  : 	ASSERT(wDataSize >= sizeof(TCP_Head));

  00014	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00018	83 f8 08	 cmp	 eax, 8
  0001b	73 14		 jae	 SHORT $LN12@EncryptBuf
  0001d	68 12 02 00 00	 push	 530			; 00000212H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN12@EncryptBuf
  00030	cc		 int	 3
$LN12@EncryptBuf:

; 531  : 	ASSERT(wBufferSize >= (wDataSize + 2 * sizeof(DWORD)));

  00031	0f b7 55 10	 movzx	 edx, WORD PTR _wBufferSize$[ebp]
  00035	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00039	83 c0 08	 add	 eax, 8
  0003c	3b d0		 cmp	 edx, eax
  0003e	73 14		 jae	 SHORT $LN13@EncryptBuf
  00040	68 13 02 00 00	 push	 531			; 00000213H
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0004f	85 c0		 test	 eax, eax
  00051	74 01		 je	 SHORT $LN13@EncryptBuf
  00053	cc		 int	 3
$LN13@EncryptBuf:

; 532  : 	ASSERT(wDataSize <= (sizeof(TCP_Head) + SOCKET_TCP_PACKET));

  00054	0f b7 55 0c	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  00058	81 fa 00 40 00
	00		 cmp	 edx, 16384		; 00004000H
  0005e	76 14		 jbe	 SHORT $LN14@EncryptBuf
  00060	68 14 02 00 00	 push	 532			; 00000214H
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0006f	85 c0		 test	 eax, eax
  00071	74 01		 je	 SHORT $LN14@EncryptBuf
  00073	cc		 int	 3
$LN14@EncryptBuf:

; 533  : 
; 534  : 	//调整长度
; 535  : 	WORD wEncryptSize = wDataSize - sizeof(TCP_Command), wSnapCount = 0;

  00074	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  00078	83 e9 04	 sub	 ecx, 4
  0007b	66 89 4d d8	 mov	 WORD PTR _wEncryptSize$[ebp], cx
  0007f	33 d2		 xor	 edx, edx
  00081	66 89 55 cc	 mov	 WORD PTR _wSnapCount$[ebp], dx

; 536  : 	if ((wEncryptSize % sizeof(DWORD)) != 0)

  00085	0f b7 45 d8	 movzx	 eax, WORD PTR _wEncryptSize$[ebp]
  00089	33 d2		 xor	 edx, edx
  0008b	b9 04 00 00 00	 mov	 ecx, 4
  00090	f7 f1		 div	 ecx
  00092	85 d2		 test	 edx, edx
  00094	74 33		 je	 SHORT $LN8@EncryptBuf

; 537  : 	{
; 538  : 		wSnapCount = sizeof(DWORD) - wEncryptSize % sizeof(DWORD);

  00096	0f b7 45 d8	 movzx	 eax, WORD PTR _wEncryptSize$[ebp]
  0009a	33 d2		 xor	 edx, edx
  0009c	b9 04 00 00 00	 mov	 ecx, 4
  000a1	f7 f1		 div	 ecx
  000a3	b8 04 00 00 00	 mov	 eax, 4
  000a8	2b c2		 sub	 eax, edx
  000aa	66 89 45 cc	 mov	 WORD PTR _wSnapCount$[ebp], ax

; 539  : 		memset(pcbDataBuffer + sizeof(TCP_Info) + wEncryptSize, 0, wSnapCount);

  000ae	0f b7 4d cc	 movzx	 ecx, WORD PTR _wSnapCount$[ebp]
  000b2	51		 push	 ecx
  000b3	6a 00		 push	 0
  000b5	0f b7 55 d8	 movzx	 edx, WORD PTR _wEncryptSize$[ebp]
  000b9	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  000bc	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _memset
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@EncryptBuf:

; 540  : 	}
; 541  : 
; 542  : 	//效验码与字节映射
; 543  : 	BYTE cbCheckCode = 0;

  000c9	c6 45 e7 00	 mov	 BYTE PTR _cbCheckCode$[ebp], 0

; 544  : 	for (WORD i = sizeof(TCP_Info); i < wDataSize; i++)

  000cd	ba 04 00 00 00	 mov	 edx, 4
  000d2	66 89 55 e0	 mov	 WORD PTR _i$9[ebp], dx
  000d6	eb 0c		 jmp	 SHORT $LN4@EncryptBuf
$LN2@EncryptBuf:
  000d8	66 8b 45 e0	 mov	 ax, WORD PTR _i$9[ebp]
  000dc	66 83 c0 01	 add	 ax, 1
  000e0	66 89 45 e0	 mov	 WORD PTR _i$9[ebp], ax
$LN4@EncryptBuf:
  000e4	0f b7 4d e0	 movzx	 ecx, WORD PTR _i$9[ebp]
  000e8	0f b7 55 0c	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  000ec	3b ca		 cmp	 ecx, edx
  000ee	7d 62		 jge	 SHORT $LN3@EncryptBuf

; 545  : 	{
; 546  : 		cbCheckCode += pcbDataBuffer[i];

  000f0	0f b7 45 e0	 movzx	 eax, WORD PTR _i$9[ebp]
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _pcbDataBuffer$[ebp]
  000f7	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  000fb	0f b6 45 e7	 movzx	 eax, BYTE PTR _cbCheckCode$[ebp]
  000ff	03 c2		 add	 eax, edx
  00101	88 45 e7	 mov	 BYTE PTR _cbCheckCode$[ebp], al

; 547  : 		pcbDataBuffer[i] = MapSendByte(pcbDataBuffer[i]);

  00104	0f b7 4d e0	 movzx	 ecx, WORD PTR _i$9[ebp]
  00108	8b 55 08	 mov	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  0010b	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  0010e	88 45 d4	 mov	 BYTE PTR _cbData$[ebp], al

; 450  : 	BYTE cbMap = g_SendByteMap[(BYTE)(cbData + m_cbSendRound)];

  00111	0f b6 4d d4	 movzx	 ecx, BYTE PTR _cbData$[ebp]
  00115	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00118	0f b6 82 70 80
	02 00		 movzx	 eax, BYTE PTR [edx+163952]
  0011f	03 c8		 add	 ecx, eax
  00121	0f b6 c9	 movzx	 ecx, cl
  00124	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?g_SendByteMap@@3QBEB[ecx]
  0012a	88 55 d3	 mov	 BYTE PTR _cbMap$8[ebp], dl

; 451  : 	m_cbSendRound += 3;

  0012d	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00130	0f b6 88 70 80
	02 00		 movzx	 ecx, BYTE PTR [eax+163952]
  00137	83 c1 03	 add	 ecx, 3
  0013a	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	88 8a 70 80 02
	00		 mov	 BYTE PTR [edx+163952], cl

; 547  : 		pcbDataBuffer[i] = MapSendByte(pcbDataBuffer[i]);

  00143	0f b7 45 e0	 movzx	 eax, WORD PTR _i$9[ebp]
  00147	8b 4d 08	 mov	 ecx, DWORD PTR _pcbDataBuffer$[ebp]
  0014a	8a 55 d3	 mov	 dl, BYTE PTR _cbMap$8[ebp]
  0014d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 548  : 	}

  00150	eb 86		 jmp	 SHORT $LN2@EncryptBuf
$LN3@EncryptBuf:

; 549  : 
; 550  : 	//填写信息头
; 551  : 	TCP_Head * pHead = (TCP_Head *)pcbDataBuffer;

  00152	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  00155	89 45 c4	 mov	 DWORD PTR _pHead$[ebp], eax

; 552  : 	pHead->TCPInfo.cbCheckCode = ~cbCheckCode + 1;

  00158	0f b6 4d e7	 movzx	 ecx, BYTE PTR _cbCheckCode$[ebp]
  0015c	f7 d1		 not	 ecx
  0015e	83 c1 01	 add	 ecx, 1
  00161	8b 55 c4	 mov	 edx, DWORD PTR _pHead$[ebp]
  00164	88 4a 01	 mov	 BYTE PTR [edx+1], cl

; 553  : 	pHead->TCPInfo.wPacketSize = wDataSize;

  00167	8b 45 c4	 mov	 eax, DWORD PTR _pHead$[ebp]
  0016a	66 8b 4d 0c	 mov	 cx, WORD PTR _wDataSize$[ebp]
  0016e	66 89 48 02	 mov	 WORD PTR [eax+2], cx

; 554  : 	pHead->TCPInfo.cbDataKind = DK_MAPPED;

  00172	8b 55 c4	 mov	 edx, DWORD PTR _pHead$[ebp]
  00175	c6 02 01	 mov	 BYTE PTR [edx], 1

; 555  : 
; 556  : 	//创建密钥
; 557  : 	DWORD dwXorKey = m_dwSendXorKey;

  00178	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0017b	8b 88 74 80 02
	00		 mov	 ecx, DWORD PTR [eax+163956]
  00181	89 4d e8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx

; 558  : 	if (m_dwSendPacketCount == 0)

  00184	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00187	83 ba 84 80 02
	00 00		 cmp	 DWORD PTR [edx+163972], 0
  0018e	0f 85 b8 00 00
	00		 jne	 $LN9@EncryptBuf

; 559  : 	{
; 560  : 		//生成第一次随机种子
; 561  : 		GUID Guid;
; 562  : 		CoCreateGuid(&Guid);

  00194	8d 45 ec	 lea	 eax, DWORD PTR _Guid$10[ebp]
  00197	50		 push	 eax
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateGuid@4

; 563  : 		dwXorKey = GetTickCount()*GetTickCount();

  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001a4	8b f0		 mov	 esi, eax
  001a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001ac	0f af f0	 imul	 esi, eax
  001af	89 75 e8	 mov	 DWORD PTR _dwXorKey$[ebp], esi

; 564  : 		dwXorKey ^= Guid.Data1;

  001b2	8b 4d e8	 mov	 ecx, DWORD PTR _dwXorKey$[ebp]
  001b5	33 4d ec	 xor	 ecx, DWORD PTR _Guid$10[ebp]
  001b8	89 4d e8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx

; 565  : 		dwXorKey ^= Guid.Data2;

  001bb	0f b7 55 f0	 movzx	 edx, WORD PTR _Guid$10[ebp+4]
  001bf	33 55 e8	 xor	 edx, DWORD PTR _dwXorKey$[ebp]
  001c2	89 55 e8	 mov	 DWORD PTR _dwXorKey$[ebp], edx

; 566  : 		dwXorKey ^= Guid.Data3;

  001c5	0f b7 45 f2	 movzx	 eax, WORD PTR _Guid$10[ebp+6]
  001c9	33 45 e8	 xor	 eax, DWORD PTR _dwXorKey$[ebp]
  001cc	89 45 e8	 mov	 DWORD PTR _dwXorKey$[ebp], eax

; 567  : 		dwXorKey ^= *((DWORD *)Guid.Data4);

  001cf	8b 4d e8	 mov	 ecx, DWORD PTR _dwXorKey$[ebp]
  001d2	33 4d f4	 xor	 ecx, DWORD PTR _Guid$10[ebp+8]
  001d5	89 4d e8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx

; 443  :     DWORD dwHold = wSeed;

  001d8	0f b7 55 e8	 movzx	 edx, WORD PTR _dwXorKey$[ebp]
  001dc	89 55 b4	 mov	 DWORD PTR _dwHold$5[ebp], edx

; 444  :     return (WORD)((dwHold = dwHold * 241103L + 2533101L) >> 16);

  001df	69 45 b4 cf ad
	03 00		 imul	 eax, DWORD PTR _dwHold$5[ebp], 241103
  001e6	05 ed a6 26 00	 add	 eax, 2533101		; 0026a6edH
  001eb	89 45 b4	 mov	 DWORD PTR _dwHold$5[ebp], eax
  001ee	8b 4d b4	 mov	 ecx, DWORD PTR _dwHold$5[ebp]
  001f1	c1 e9 10	 shr	 ecx, 16			; 00000010H

; 568  : 
; 569  : 		//随机映射种子
; 570  : 		dwXorKey = SeedRandMap((WORD)dwXorKey);

  001f4	0f b7 d1	 movzx	 edx, cx
  001f7	89 55 e8	 mov	 DWORD PTR _dwXorKey$[ebp], edx

; 571  : 		dwXorKey |= ((DWORD)SeedRandMap((WORD)(dwXorKey >> 16))) << 16;

  001fa	8b 45 e8	 mov	 eax, DWORD PTR _dwXorKey$[ebp]
  001fd	c1 e8 10	 shr	 eax, 16			; 00000010H

; 443  :     DWORD dwHold = wSeed;

  00200	0f b7 c8	 movzx	 ecx, ax
  00203	89 4d b0	 mov	 DWORD PTR _dwHold$4[ebp], ecx

; 444  :     return (WORD)((dwHold = dwHold * 241103L + 2533101L) >> 16);

  00206	69 55 b0 cf ad
	03 00		 imul	 edx, DWORD PTR _dwHold$4[ebp], 241103
  0020d	81 c2 ed a6 26
	00		 add	 edx, 2533101		; 0026a6edH
  00213	89 55 b0	 mov	 DWORD PTR _dwHold$4[ebp], edx
  00216	8b 45 b0	 mov	 eax, DWORD PTR _dwHold$4[ebp]
  00219	c1 e8 10	 shr	 eax, 16			; 00000010H

; 571  : 		dwXorKey |= ((DWORD)SeedRandMap((WORD)(dwXorKey >> 16))) << 16;

  0021c	0f b7 c8	 movzx	 ecx, ax
  0021f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00222	0b 4d e8	 or	 ecx, DWORD PTR _dwXorKey$[ebp]
  00225	89 4d e8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx

; 572  : 		dwXorKey ^= g_dwPacketKey;

  00228	8b 55 e8	 mov	 edx, DWORD PTR _dwXorKey$[ebp]
  0022b	81 f2 5a a5 5a
	a5		 xor	 edx, -1520786086	; a55aa55aH
  00231	89 55 e8	 mov	 DWORD PTR _dwXorKey$[ebp], edx

; 573  : 		m_dwSendXorKey = dwXorKey;

  00234	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00237	8b 4d e8	 mov	 ecx, DWORD PTR _dwXorKey$[ebp]
  0023a	89 88 74 80 02
	00		 mov	 DWORD PTR [eax+163956], ecx

; 574  : 		m_dwRecvXorKey = dwXorKey;

  00240	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00243	8b 45 e8	 mov	 eax, DWORD PTR _dwXorKey$[ebp]
  00246	89 82 78 80 02
	00		 mov	 DWORD PTR [edx+163960], eax
$LN9@EncryptBuf:

; 575  : 	}
; 576  : 
; 577  : 	//加密数据
; 578  : 	WORD * pwSeed = (WORD *)(pcbDataBuffer + sizeof(TCP_Info));

  0024c	8b 4d 08	 mov	 ecx, DWORD PTR _pcbDataBuffer$[ebp]
  0024f	83 c1 04	 add	 ecx, 4
  00252	89 4d c8	 mov	 DWORD PTR _pwSeed$[ebp], ecx

; 579  : 	DWORD * pdwXor = (DWORD *)(pcbDataBuffer + sizeof(TCP_Info));

  00255	8b 55 08	 mov	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  00258	83 c2 04	 add	 edx, 4
  0025b	89 55 c0	 mov	 DWORD PTR _pdwXor$[ebp], edx

; 580  : 	WORD wEncrypCount = (wEncryptSize + wSnapCount) / sizeof(DWORD);

  0025e	0f b7 45 d8	 movzx	 eax, WORD PTR _wEncryptSize$[ebp]
  00262	0f b7 4d cc	 movzx	 ecx, WORD PTR _wSnapCount$[ebp]
  00266	03 c1		 add	 eax, ecx
  00268	c1 e8 02	 shr	 eax, 2
  0026b	66 89 45 bc	 mov	 WORD PTR _wEncrypCount$[ebp], ax

; 581  : 	for (int i = 0; i < wEncrypCount; i++)

  0026f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00276	eb 09		 jmp	 SHORT $LN7@EncryptBuf
$LN5@EncryptBuf:
  00278	8b 55 ac	 mov	 edx, DWORD PTR _i$3[ebp]
  0027b	83 c2 01	 add	 edx, 1
  0027e	89 55 ac	 mov	 DWORD PTR _i$3[ebp], edx
$LN7@EncryptBuf:
  00281	0f b7 45 bc	 movzx	 eax, WORD PTR _wEncrypCount$[ebp]
  00285	39 45 ac	 cmp	 DWORD PTR _i$3[ebp], eax
  00288	0f 8d 98 00 00
	00		 jge	 $LN6@EncryptBuf

; 582  : 	{
; 583  : 		*pdwXor++ ^= dwXorKey;

  0028e	8b 4d c0	 mov	 ecx, DWORD PTR _pdwXor$[ebp]
  00291	8b 11		 mov	 edx, DWORD PTR [ecx]
  00293	33 55 e8	 xor	 edx, DWORD PTR _dwXorKey$[ebp]
  00296	8b 45 c0	 mov	 eax, DWORD PTR _pdwXor$[ebp]
  00299	89 10		 mov	 DWORD PTR [eax], edx
  0029b	8b 4d c0	 mov	 ecx, DWORD PTR _pdwXor$[ebp]
  0029e	83 c1 04	 add	 ecx, 4
  002a1	89 4d c0	 mov	 DWORD PTR _pdwXor$[ebp], ecx

; 584  : 		dwXorKey = SeedRandMap(*pwSeed++);

  002a4	8b 55 c8	 mov	 edx, DWORD PTR _pwSeed$[ebp]
  002a7	66 8b 02	 mov	 ax, WORD PTR [edx]
  002aa	66 89 45 ba	 mov	 WORD PTR $T7[ebp], ax

; 443  :     DWORD dwHold = wSeed;

  002ae	0f b7 4d ba	 movzx	 ecx, WORD PTR $T7[ebp]
  002b2	89 4d a8	 mov	 DWORD PTR _dwHold$2[ebp], ecx

; 444  :     return (WORD)((dwHold = dwHold * 241103L + 2533101L) >> 16);

  002b5	69 55 a8 cf ad
	03 00		 imul	 edx, DWORD PTR _dwHold$2[ebp], 241103
  002bc	81 c2 ed a6 26
	00		 add	 edx, 2533101		; 0026a6edH
  002c2	89 55 a8	 mov	 DWORD PTR _dwHold$2[ebp], edx
  002c5	8b 45 a8	 mov	 eax, DWORD PTR _dwHold$2[ebp]
  002c8	c1 e8 10	 shr	 eax, 16			; 00000010H

; 584  : 		dwXorKey = SeedRandMap(*pwSeed++);

  002cb	0f b7 c8	 movzx	 ecx, ax
  002ce	89 4d e8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx
  002d1	8b 55 c8	 mov	 edx, DWORD PTR _pwSeed$[ebp]
  002d4	83 c2 02	 add	 edx, 2
  002d7	89 55 c8	 mov	 DWORD PTR _pwSeed$[ebp], edx

; 585  : 		dwXorKey |= ((DWORD)SeedRandMap(*pwSeed++)) << 16;

  002da	8b 45 c8	 mov	 eax, DWORD PTR _pwSeed$[ebp]
  002dd	66 8b 08	 mov	 cx, WORD PTR [eax]
  002e0	66 89 4d b8	 mov	 WORD PTR $T6[ebp], cx

; 443  :     DWORD dwHold = wSeed;

  002e4	0f b7 55 b8	 movzx	 edx, WORD PTR $T6[ebp]
  002e8	89 55 a4	 mov	 DWORD PTR _dwHold$1[ebp], edx

; 444  :     return (WORD)((dwHold = dwHold * 241103L + 2533101L) >> 16);

  002eb	69 45 a4 cf ad
	03 00		 imul	 eax, DWORD PTR _dwHold$1[ebp], 241103
  002f2	05 ed a6 26 00	 add	 eax, 2533101		; 0026a6edH
  002f7	89 45 a4	 mov	 DWORD PTR _dwHold$1[ebp], eax
  002fa	8b 4d a4	 mov	 ecx, DWORD PTR _dwHold$1[ebp]
  002fd	c1 e9 10	 shr	 ecx, 16			; 00000010H

; 585  : 		dwXorKey |= ((DWORD)SeedRandMap(*pwSeed++)) << 16;

  00300	0f b7 d1	 movzx	 edx, cx
  00303	c1 e2 10	 shl	 edx, 16			; 00000010H
  00306	0b 55 e8	 or	 edx, DWORD PTR _dwXorKey$[ebp]
  00309	89 55 e8	 mov	 DWORD PTR _dwXorKey$[ebp], edx
  0030c	8b 45 c8	 mov	 eax, DWORD PTR _pwSeed$[ebp]
  0030f	83 c0 02	 add	 eax, 2
  00312	89 45 c8	 mov	 DWORD PTR _pwSeed$[ebp], eax

; 586  : 		dwXorKey ^= g_dwPacketKey;

  00315	8b 4d e8	 mov	 ecx, DWORD PTR _dwXorKey$[ebp]
  00318	81 f1 5a a5 5a
	a5		 xor	 ecx, -1520786086	; a55aa55aH
  0031e	89 4d e8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx

; 587  : 	}

  00321	e9 52 ff ff ff	 jmp	 $LN5@EncryptBuf
$LN6@EncryptBuf:

; 588  : 
; 589  : 	//插入密钥
; 590  : 	if (m_dwSendPacketCount == 0)

  00326	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00329	83 ba 84 80 02
	00 00		 cmp	 DWORD PTR [edx+163972], 0
  00330	75 46		 jne	 SHORT $LN10@EncryptBuf

; 591  : 	{
; 592  : 		MoveMemory(pcbDataBuffer + sizeof(TCP_Head) + sizeof(DWORD), pcbDataBuffer + sizeof(TCP_Head), wDataSize);

  00332	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00336	50		 push	 eax
  00337	8b 4d 08	 mov	 ecx, DWORD PTR _pcbDataBuffer$[ebp]
  0033a	83 c1 08	 add	 ecx, 8
  0033d	51		 push	 ecx
  0033e	8b 55 08	 mov	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  00341	83 c2 0c	 add	 edx, 12			; 0000000cH
  00344	52		 push	 edx
  00345	e8 00 00 00 00	 call	 _memmove
  0034a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 593  : 		*((DWORD *)(pcbDataBuffer + sizeof(TCP_Head))) = m_dwSendXorKey;

  0034d	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  00350	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00353	8b 91 74 80 02
	00		 mov	 edx, DWORD PTR [ecx+163956]
  00359	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 594  : 		pHead->TCPInfo.wPacketSize += sizeof(DWORD);

  0035c	8b 45 c4	 mov	 eax, DWORD PTR _pHead$[ebp]
  0035f	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00363	83 c1 04	 add	 ecx, 4
  00366	8b 55 c4	 mov	 edx, DWORD PTR _pHead$[ebp]
  00369	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 595  : 		wDataSize += sizeof(DWORD);

  0036d	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00371	83 c0 04	 add	 eax, 4
  00374	66 89 45 0c	 mov	 WORD PTR _wDataSize$[ebp], ax
$LN10@EncryptBuf:

; 596  : 	}
; 597  : 
; 598  : 	//设置变量
; 599  : 	m_dwSendPacketCount++;

  00378	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0037b	8b 91 84 80 02
	00		 mov	 edx, DWORD PTR [ecx+163972]
  00381	83 c2 01	 add	 edx, 1
  00384	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00387	89 90 84 80 02
	00		 mov	 DWORD PTR [eax+163972], edx

; 600  : 	m_dwSendXorKey = dwXorKey;

  0038d	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00390	8b 55 e8	 mov	 edx, DWORD PTR _dwXorKey$[ebp]
  00393	89 91 74 80 02
	00		 mov	 DWORD PTR [ecx+163956], edx

; 601  : 
; 602  :     return wDataSize;

  00399	66 8b 45 0c	 mov	 ax, WORD PTR _wDataSize$[ebp]

; 603  : }

  0039d	5e		 pop	 esi
  0039e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a1	33 cd		 xor	 ecx, ebp
  003a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a8	8b e5		 mov	 esp, ebp
  003aa	5d		 pop	 ebp
  003ab	c2 0c 00	 ret	 12			; 0000000cH
?EncryptBuffer@CTCPSocketServiceThread@@AAEGQAEGG@Z ENDP ; CTCPSocketServiceThread::EncryptBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?CrevasseBuffer@CTCPSocketServiceThread@@AAEGQAEG@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_pHead$ = -68						; size = 4
_pcbKey$2 = -64						; size = 4
$T3 = -60						; size = 4
_dwHold$4 = -56						; size = 4
_dwHold$5 = -52						; size = 4
_pdwXor$ = -48						; size = 4
_i$6 = -44						; size = 4
_dwXorKey$ = -40					; size = 4
_pwSeed$ = -36						; size = 4
_this$ = -32						; size = 4
$T7 = -28						; size = 2
$T8 = -26						; size = 2
_wEncrypCount$ = -24					; size = 2
_i$9 = -20						; size = 2
_wSnapCount$ = -16					; size = 2
_cbMap$10 = -9						; size = 1
_cbData$ = -8						; size = 1
_cbCheckCode$ = -1					; size = 1
_pcbDataBuffer$ = 8					; size = 4
_wDataSize$ = 12					; size = 2
?CrevasseBuffer@CTCPSocketServiceThread@@AAEGQAEG@Z PROC ; CTCPSocketServiceThread::CrevasseBuffer, COMDAT
; _this$ = ecx

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 468  : 	//效验参数
; 469  : 	ASSERT(wDataSize >= sizeof(TCP_Head));

  00009	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0000d	83 f8 08	 cmp	 eax, 8
  00010	73 14		 jae	 SHORT $LN14@CrevasseBu
  00012	68 d5 01 00 00	 push	 469			; 000001d5H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN14@CrevasseBu
  00025	cc		 int	 3
$LN14@CrevasseBu:

; 470  : 	ASSERT(((TCP_Head *)pcbDataBuffer)->TCPInfo.wPacketSize == wDataSize);

  00026	8b 55 08	 mov	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  00029	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0002d	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  00031	3b c1		 cmp	 eax, ecx
  00033	74 14		 je	 SHORT $LN15@CrevasseBu
  00035	68 d6 01 00 00	 push	 470			; 000001d6H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00044	85 c0		 test	 eax, eax
  00046	74 01		 je	 SHORT $LN15@CrevasseBu
  00048	cc		 int	 3
$LN15@CrevasseBu:

; 471  : 
; 472  : 	//调整长度
; 473  : 	WORD wSnapCount = 0;

  00049	33 c0		 xor	 eax, eax
  0004b	66 89 45 f0	 mov	 WORD PTR _wSnapCount$[ebp], ax

; 474  : 	if ((wDataSize % sizeof(DWORD)) != 0)

  0004f	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00053	33 d2		 xor	 edx, edx
  00055	b9 04 00 00 00	 mov	 ecx, 4
  0005a	f7 f1		 div	 ecx
  0005c	85 d2		 test	 edx, edx
  0005e	74 2f		 je	 SHORT $LN8@CrevasseBu

; 475  : 	{
; 476  : 		wSnapCount = sizeof(DWORD) - wDataSize % sizeof(DWORD);

  00060	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00064	33 d2		 xor	 edx, edx
  00066	b9 04 00 00 00	 mov	 ecx, 4
  0006b	f7 f1		 div	 ecx
  0006d	b8 04 00 00 00	 mov	 eax, 4
  00072	2b c2		 sub	 eax, edx
  00074	66 89 45 f0	 mov	 WORD PTR _wSnapCount$[ebp], ax

; 477  : 		memset(pcbDataBuffer + wDataSize, 0, wSnapCount);

  00078	0f b7 4d f0	 movzx	 ecx, WORD PTR _wSnapCount$[ebp]
  0007c	51		 push	 ecx
  0007d	6a 00		 push	 0
  0007f	0f b7 55 0c	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  00083	03 55 08	 add	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _memset
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@CrevasseBu:

; 478  : 	}
; 479  : 
; 480  : 	//提取密钥
; 481  : 	if (m_dwRecvPacketCount == 0)

  0008f	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	83 b8 88 80 02
	00 00		 cmp	 DWORD PTR [eax+163976], 0
  00099	0f 85 96 00 00
	00		 jne	 $LN9@CrevasseBu

; 482  : 	{
; 483  : 		ASSERT(wDataSize >= (sizeof(TCP_Head) + sizeof(DWORD)));

  0009f	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  000a3	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  000a6	73 14		 jae	 SHORT $LN16@CrevasseBu
  000a8	68 e3 01 00 00	 push	 483			; 000001e3H
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000b2	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b7	85 c0		 test	 eax, eax
  000b9	74 01		 je	 SHORT $LN16@CrevasseBu
  000bb	cc		 int	 3
$LN16@CrevasseBu:

; 484  : 		if (wDataSize < (sizeof(TCP_Head) + sizeof(DWORD))) throw TEXT("数据包解密长度错误");

  000bc	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000c0	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  000c3	73 15		 jae	 SHORT $LN10@CrevasseBu
  000c5	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_C@_0BD@DINLBKIB@?J?$PN?$LO?$NN?$LA?$PM?$LN?b?C?$NM?$LD?$KE?$LG?H?$LE?m?N?s@
  000cc	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000d1	8d 4d c4	 lea	 ecx, DWORD PTR $T3[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@CrevasseBu:

; 485  : 		m_dwRecvXorKey = *(DWORD *)(pcbDataBuffer + sizeof(TCP_Head));

  000da	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000dd	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  000e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e3	89 8a 78 80 02
	00		 mov	 DWORD PTR [edx+163960], ecx

; 486  : 		m_dwSendXorKey = m_dwRecvXorKey;

  000e9	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	8b 88 78 80 02
	00		 mov	 ecx, DWORD PTR [eax+163960]
  000f5	89 8a 74 80 02
	00		 mov	 DWORD PTR [edx+163956], ecx

; 487  : 		MoveMemory(pcbDataBuffer + sizeof(TCP_Head), pcbDataBuffer + sizeof(TCP_Head) + sizeof(DWORD),

  000fb	0f b7 55 0c	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  000ff	83 ea 0c	 sub	 edx, 12			; 0000000cH
  00102	52		 push	 edx
  00103	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  00106	83 c0 0c	 add	 eax, 12			; 0000000cH
  00109	50		 push	 eax
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _pcbDataBuffer$[ebp]
  0010d	83 c1 08	 add	 ecx, 8
  00110	51		 push	 ecx
  00111	e8 00 00 00 00	 call	 _memmove
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH

; 488  : 			wDataSize - sizeof(TCP_Head) - sizeof(DWORD));
; 489  : 		wDataSize -= sizeof(DWORD);

  00119	0f b7 55 0c	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  0011d	83 ea 04	 sub	 edx, 4
  00120	66 89 55 0c	 mov	 WORD PTR _wDataSize$[ebp], dx

; 490  : 		((TCP_Head *)pcbDataBuffer)->TCPInfo.wPacketSize -= sizeof(DWORD);

  00124	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  00127	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0012b	83 e9 04	 sub	 ecx, 4
  0012e	8b 55 08	 mov	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  00131	66 89 4a 02	 mov	 WORD PTR [edx+2], cx
$LN9@CrevasseBu:

; 491  : 	}
; 492  : 
; 493  : 	//解密数据
; 494  : 	DWORD dwXorKey = m_dwRecvXorKey;

  00135	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00138	8b 88 78 80 02
	00		 mov	 ecx, DWORD PTR [eax+163960]
  0013e	89 4d d8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx

; 495  : 	DWORD * pdwXor = (DWORD *)(pcbDataBuffer + sizeof(TCP_Info));

  00141	8b 55 08	 mov	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  00144	83 c2 04	 add	 edx, 4
  00147	89 55 d0	 mov	 DWORD PTR _pdwXor$[ebp], edx

; 496  : 	WORD  * pwSeed = (WORD *)(pcbDataBuffer + sizeof(TCP_Info));

  0014a	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  0014d	83 c0 04	 add	 eax, 4
  00150	89 45 dc	 mov	 DWORD PTR _pwSeed$[ebp], eax

; 497  : 	WORD wEncrypCount = (wDataSize + wSnapCount - sizeof(TCP_Info)) / 4;

  00153	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  00157	0f b7 55 f0	 movzx	 edx, WORD PTR _wSnapCount$[ebp]
  0015b	8d 44 11 fc	 lea	 eax, DWORD PTR [ecx+edx-4]
  0015f	c1 e8 02	 shr	 eax, 2
  00162	66 89 45 e8	 mov	 WORD PTR _wEncrypCount$[ebp], ax

; 498  : 	for (WORD i = 0; i < wEncrypCount; i++)

  00166	33 c9		 xor	 ecx, ecx
  00168	66 89 4d ec	 mov	 WORD PTR _i$9[ebp], cx
  0016c	eb 0c		 jmp	 SHORT $LN4@CrevasseBu
$LN2@CrevasseBu:
  0016e	66 8b 55 ec	 mov	 dx, WORD PTR _i$9[ebp]
  00172	66 83 c2 01	 add	 dx, 1
  00176	66 89 55 ec	 mov	 WORD PTR _i$9[ebp], dx
$LN4@CrevasseBu:
  0017a	0f b7 45 ec	 movzx	 eax, WORD PTR _i$9[ebp]
  0017e	0f b7 4d e8	 movzx	 ecx, WORD PTR _wEncrypCount$[ebp]
  00182	3b c1		 cmp	 eax, ecx
  00184	0f 8d ec 00 00
	00		 jge	 $LN3@CrevasseBu

; 499  : 	{
; 500  : 		if ((i == (wEncrypCount - 1)) && (wSnapCount > 0))

  0018a	0f b7 55 ec	 movzx	 edx, WORD PTR _i$9[ebp]
  0018e	0f b7 45 e8	 movzx	 eax, WORD PTR _wEncrypCount$[ebp]
  00192	83 e8 01	 sub	 eax, 1
  00195	3b d0		 cmp	 edx, eax
  00197	75 33		 jne	 SHORT $LN11@CrevasseBu
  00199	0f b7 4d f0	 movzx	 ecx, WORD PTR _wSnapCount$[ebp]
  0019d	85 c9		 test	 ecx, ecx
  0019f	7e 2b		 jle	 SHORT $LN11@CrevasseBu

; 501  : 		{
; 502  : 			BYTE * pcbKey = ((BYTE *)&m_dwRecvXorKey) + sizeof(DWORD) - wSnapCount;

  001a1	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  001a4	81 c2 7c 80 02
	00		 add	 edx, 163964		; 0002807cH
  001aa	0f b7 45 f0	 movzx	 eax, WORD PTR _wSnapCount$[ebp]
  001ae	2b d0		 sub	 edx, eax
  001b0	89 55 c0	 mov	 DWORD PTR _pcbKey$2[ebp], edx

; 503  : 			CopyMemory(pcbDataBuffer + wDataSize, pcbKey, wSnapCount);

  001b3	0f b7 4d f0	 movzx	 ecx, WORD PTR _wSnapCount$[ebp]
  001b7	51		 push	 ecx
  001b8	8b 55 c0	 mov	 edx, DWORD PTR _pcbKey$2[ebp]
  001bb	52		 push	 edx
  001bc	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  001c0	03 45 08	 add	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _memcpy
  001c9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@CrevasseBu:

; 504  : 		}
; 505  : 		dwXorKey = SeedRandMap(*pwSeed++);

  001cc	8b 4d dc	 mov	 ecx, DWORD PTR _pwSeed$[ebp]
  001cf	66 8b 11	 mov	 dx, WORD PTR [ecx]
  001d2	66 89 55 e6	 mov	 WORD PTR $T8[ebp], dx

; 443  :     DWORD dwHold = wSeed;

  001d6	0f b7 45 e6	 movzx	 eax, WORD PTR $T8[ebp]
  001da	89 45 cc	 mov	 DWORD PTR _dwHold$5[ebp], eax

; 444  :     return (WORD)((dwHold = dwHold * 241103L + 2533101L) >> 16);

  001dd	69 4d cc cf ad
	03 00		 imul	 ecx, DWORD PTR _dwHold$5[ebp], 241103
  001e4	81 c1 ed a6 26
	00		 add	 ecx, 2533101		; 0026a6edH
  001ea	89 4d cc	 mov	 DWORD PTR _dwHold$5[ebp], ecx
  001ed	8b 55 cc	 mov	 edx, DWORD PTR _dwHold$5[ebp]
  001f0	c1 ea 10	 shr	 edx, 16			; 00000010H

; 504  : 		}
; 505  : 		dwXorKey = SeedRandMap(*pwSeed++);

  001f3	0f b7 c2	 movzx	 eax, dx
  001f6	89 45 d8	 mov	 DWORD PTR _dwXorKey$[ebp], eax
  001f9	8b 4d dc	 mov	 ecx, DWORD PTR _pwSeed$[ebp]
  001fc	83 c1 02	 add	 ecx, 2
  001ff	89 4d dc	 mov	 DWORD PTR _pwSeed$[ebp], ecx

; 506  : 		dwXorKey |= ((DWORD)SeedRandMap(*pwSeed++)) << 16;

  00202	8b 55 dc	 mov	 edx, DWORD PTR _pwSeed$[ebp]
  00205	66 8b 02	 mov	 ax, WORD PTR [edx]
  00208	66 89 45 e4	 mov	 WORD PTR $T7[ebp], ax

; 443  :     DWORD dwHold = wSeed;

  0020c	0f b7 4d e4	 movzx	 ecx, WORD PTR $T7[ebp]
  00210	89 4d c8	 mov	 DWORD PTR _dwHold$4[ebp], ecx

; 444  :     return (WORD)((dwHold = dwHold * 241103L + 2533101L) >> 16);

  00213	69 55 c8 cf ad
	03 00		 imul	 edx, DWORD PTR _dwHold$4[ebp], 241103
  0021a	81 c2 ed a6 26
	00		 add	 edx, 2533101		; 0026a6edH
  00220	89 55 c8	 mov	 DWORD PTR _dwHold$4[ebp], edx
  00223	8b 45 c8	 mov	 eax, DWORD PTR _dwHold$4[ebp]
  00226	c1 e8 10	 shr	 eax, 16			; 00000010H

; 506  : 		dwXorKey |= ((DWORD)SeedRandMap(*pwSeed++)) << 16;

  00229	0f b7 c8	 movzx	 ecx, ax
  0022c	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0022f	0b 4d d8	 or	 ecx, DWORD PTR _dwXorKey$[ebp]
  00232	89 4d d8	 mov	 DWORD PTR _dwXorKey$[ebp], ecx
  00235	8b 55 dc	 mov	 edx, DWORD PTR _pwSeed$[ebp]
  00238	83 c2 02	 add	 edx, 2
  0023b	89 55 dc	 mov	 DWORD PTR _pwSeed$[ebp], edx

; 507  : 		dwXorKey ^= g_dwPacketKey;

  0023e	8b 45 d8	 mov	 eax, DWORD PTR _dwXorKey$[ebp]
  00241	35 5a a5 5a a5	 xor	 eax, -1520786086	; a55aa55aH
  00246	89 45 d8	 mov	 DWORD PTR _dwXorKey$[ebp], eax

; 508  : 		*pdwXor++ ^= m_dwRecvXorKey;

  00249	8b 4d d0	 mov	 ecx, DWORD PTR _pdwXor$[ebp]
  0024c	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0024f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00251	33 82 78 80 02
	00		 xor	 eax, DWORD PTR [edx+163960]
  00257	8b 4d d0	 mov	 ecx, DWORD PTR _pdwXor$[ebp]
  0025a	89 01		 mov	 DWORD PTR [ecx], eax
  0025c	8b 55 d0	 mov	 edx, DWORD PTR _pdwXor$[ebp]
  0025f	83 c2 04	 add	 edx, 4
  00262	89 55 d0	 mov	 DWORD PTR _pdwXor$[ebp], edx

; 509  : 		m_dwRecvXorKey = dwXorKey;

  00265	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00268	8b 4d d8	 mov	 ecx, DWORD PTR _dwXorKey$[ebp]
  0026b	89 88 78 80 02
	00		 mov	 DWORD PTR [eax+163960], ecx

; 510  : 	}

  00271	e9 f8 fe ff ff	 jmp	 $LN2@CrevasseBu
$LN3@CrevasseBu:

; 511  : 
; 512  : 	//效验码与字节映射
; 513  : 	TCP_Head * pHead = (TCP_Head *)pcbDataBuffer;

  00276	8b 55 08	 mov	 edx, DWORD PTR _pcbDataBuffer$[ebp]
  00279	89 55 bc	 mov	 DWORD PTR _pHead$[ebp], edx

; 514  : 	BYTE cbCheckCode = pHead->TCPInfo.cbCheckCode;

  0027c	8b 45 bc	 mov	 eax, DWORD PTR _pHead$[ebp]
  0027f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00282	88 4d ff	 mov	 BYTE PTR _cbCheckCode$[ebp], cl

; 515  : 	for (int i = sizeof(TCP_Info); i < wDataSize; i++)

  00285	c7 45 d4 04 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 4
  0028c	eb 09		 jmp	 SHORT $LN7@CrevasseBu
$LN5@CrevasseBu:
  0028e	8b 55 d4	 mov	 edx, DWORD PTR _i$6[ebp]
  00291	83 c2 01	 add	 edx, 1
  00294	89 55 d4	 mov	 DWORD PTR _i$6[ebp], edx
$LN7@CrevasseBu:
  00297	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0029b	39 45 d4	 cmp	 DWORD PTR _i$6[ebp], eax
  0029e	7d 5a		 jge	 SHORT $LN6@CrevasseBu

; 516  : 	{
; 517  : 		pcbDataBuffer[i] = MapRecvByte(pcbDataBuffer[i]);

  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _pcbDataBuffer$[ebp]
  002a3	03 4d d4	 add	 ecx, DWORD PTR _i$6[ebp]
  002a6	8a 11		 mov	 dl, BYTE PTR [ecx]
  002a8	88 55 f8	 mov	 BYTE PTR _cbData$[ebp], dl

; 459  : 	BYTE cbMap = g_RecvByteMap[cbData] - m_cbRecvRound;

  002ab	0f b6 45 f8	 movzx	 eax, BYTE PTR _cbData$[ebp]
  002af	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?g_RecvByteMap@@3QBEB[eax]
  002b6	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  002b9	0f b6 82 71 80
	02 00		 movzx	 eax, BYTE PTR [edx+163953]
  002c0	2b c8		 sub	 ecx, eax
  002c2	88 4d f7	 mov	 BYTE PTR _cbMap$10[ebp], cl

; 460  : 	m_cbRecvRound += 3;

  002c5	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c8	0f b6 91 71 80
	02 00		 movzx	 edx, BYTE PTR [ecx+163953]
  002cf	83 c2 03	 add	 edx, 3
  002d2	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  002d5	88 90 71 80 02
	00		 mov	 BYTE PTR [eax+163953], dl

; 516  : 	{
; 517  : 		pcbDataBuffer[i] = MapRecvByte(pcbDataBuffer[i]);

  002db	8b 4d 08	 mov	 ecx, DWORD PTR _pcbDataBuffer$[ebp]
  002de	03 4d d4	 add	 ecx, DWORD PTR _i$6[ebp]
  002e1	8a 55 f7	 mov	 dl, BYTE PTR _cbMap$10[ebp]
  002e4	88 11		 mov	 BYTE PTR [ecx], dl

; 518  : 		cbCheckCode += pcbDataBuffer[i];

  002e6	8b 45 08	 mov	 eax, DWORD PTR _pcbDataBuffer$[ebp]
  002e9	03 45 d4	 add	 eax, DWORD PTR _i$6[ebp]
  002ec	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  002ef	0f b6 55 ff	 movzx	 edx, BYTE PTR _cbCheckCode$[ebp]
  002f3	03 d1		 add	 edx, ecx
  002f5	88 55 ff	 mov	 BYTE PTR _cbCheckCode$[ebp], dl

; 519  : 	}

  002f8	eb 94		 jmp	 SHORT $LN5@CrevasseBu
$LN6@CrevasseBu:

; 520  : 	if (cbCheckCode != 0) throw TEXT("数据包效验码错误");

  002fa	0f b6 45 ff	 movzx	 eax, BYTE PTR _cbCheckCode$[ebp]
  002fe	85 c0		 test	 eax, eax
  00300	74 15		 je	 SHORT $LN12@CrevasseBu
  00302	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ??_C@_0BB@GKKJNMOA@?J?$PN?$LO?$NN?$LA?$PM?P?$KH?Q?i?B?k?$LE?m?N?s@
  00309	68 00 00 00 00	 push	 OFFSET __TI2PAD
  0030e	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  00311	51		 push	 ecx
  00312	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@CrevasseBu:

; 521  : 
; 522  : 	m_dwRecvPacketCount++;

  00317	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0031a	8b 82 88 80 02
	00		 mov	 eax, DWORD PTR [edx+163976]
  00320	83 c0 01	 add	 eax, 1
  00323	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00326	89 81 88 80 02
	00		 mov	 DWORD PTR [ecx+163976], eax

; 523  :     return wDataSize;

  0032c	66 8b 45 0c	 mov	 ax, WORD PTR _wDataSize$[ebp]
$LN13@CrevasseBu:

; 524  : }

  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c2 08 00	 ret	 8
?CrevasseBuffer@CTCPSocketServiceThread@@AAEGQAEG@Z ENDP ; CTCPSocketServiceThread::CrevasseBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z
_TEXT	SEGMENT
$T2 = -52						; size = 4
$T3 = -48						; size = 4
tv162 = -44						; size = 4
_dwApplySize$4 = -40					; size = 4
tv78 = -36						; size = 4
_dwNeedSize$5 = -32					; size = 4
_pcbDeleteBuffer$6 = -28				; size = 4
_pcbDataBuffer$7 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_pData$ = 8						; size = 4
_wDataSize$ = 12					; size = 2
?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z PROC ; CTCPSocketServiceThread::AmortizeBuffer, COMDAT
; _this$ = ecx

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 24	 sub	 esp, 36			; 00000024H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :     // 申请缓冲
; 399  :     if ((m_dwBufferData + wDataSize) > m_dwBufferSize)

  0002f	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00033	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	03 81 64 80 02
	00		 add	 eax, DWORD PTR [ecx+163940]
  0003c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	3b 82 68 80 02
	00		 cmp	 eax, DWORD PTR [edx+163944]
  00045	0f 86 26 01 00
	00		 jbe	 $LN2@AmortizeBu

; 400  :     {
; 401  :         // 变量定义
; 402  :         LPBYTE pcbDataBuffer = NULL;

  0004b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pcbDataBuffer$7[ebp], 0

; 403  :         LPBYTE pcbDeleteBuffer = m_pcbDataBuffer;

  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 88 6c 80 02
	00		 mov	 ecx, DWORD PTR [eax+163948]
  0005b	89 4d e4	 mov	 DWORD PTR _pcbDeleteBuffer$6[ebp], ecx

; 404  : 
; 405  :         // 计算大小
; 406  :         DWORD dwNeedSize = m_dwBufferData + wDataSize;

  0005e	0f b7 55 0c	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  00062	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00065	03 90 64 80 02
	00		 add	 edx, DWORD PTR [eax+163940]
  0006b	89 55 e0	 mov	 DWORD PTR _dwNeedSize$5[ebp], edx

; 407  :         DWORD dwApplySize = __max(dwNeedSize, m_dwBufferSize * 2L);

  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 91 68 80 02
	00		 mov	 edx, DWORD PTR [ecx+163944]
  00077	d1 e2		 shl	 edx, 1
  00079	39 55 e0	 cmp	 DWORD PTR _dwNeedSize$5[ebp], edx
  0007c	76 08		 jbe	 SHORT $LN7@AmortizeBu
  0007e	8b 45 e0	 mov	 eax, DWORD PTR _dwNeedSize$5[ebp]
  00081	89 45 dc	 mov	 DWORD PTR tv78[ebp], eax
  00084	eb 0e		 jmp	 SHORT $LN8@AmortizeBu
$LN7@AmortizeBu:
  00086	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	8b 91 68 80 02
	00		 mov	 edx, DWORD PTR [ecx+163944]
  0008f	d1 e2		 shl	 edx, 1
  00091	89 55 dc	 mov	 DWORD PTR tv78[ebp], edx
$LN8@AmortizeBu:
  00094	8b 45 dc	 mov	 eax, DWORD PTR tv78[ebp]
  00097	89 45 d8	 mov	 DWORD PTR _dwApplySize$4[ebp], eax

; 408  : 
; 409  :         // 申请缓冲
; 410  :         try

  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 411  :         {
; 412  :             pcbDataBuffer = new BYTE[dwApplySize];

  000a1	8b 4d d8	 mov	 ecx, DWORD PTR _dwApplySize$4[ebp]
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000aa	83 c4 04	 add	 esp, 4
  000ad	89 45 d4	 mov	 DWORD PTR tv162[ebp], eax
  000b0	8b 55 d4	 mov	 edx, DWORD PTR tv162[ebp]
  000b3	89 55 d0	 mov	 DWORD PTR $T3[ebp], edx
  000b6	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  000b9	89 45 e8	 mov	 DWORD PTR _pcbDataBuffer$7[ebp], eax

; 413  :         }

  000bc	eb 06		 jmp	 SHORT $LN10@AmortizeBu
__catch$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$0:

; 414  :         catch (...) {}

  000be	b8 00 00 00 00	 mov	 eax, $LN15@AmortizeBu
  000c3	c3		 ret	 0
$LN10@AmortizeBu:
  000c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000cb	eb 07		 jmp	 SHORT __tryend$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$1
$LN15@AmortizeBu:
  000cd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$1:

; 415  : 
; 416  :         // 失败判断
; 417  :         if (pcbDataBuffer == NULL)

  000d4	83 7d e8 00	 cmp	 DWORD PTR _pcbDataBuffer$7[ebp], 0
  000d8	75 0f		 jne	 SHORT $LN4@AmortizeBu

; 418  :         {
; 419  :             PerformCloseSocket(SHUT_REASON_EXCEPTION);

  000da	6a 04		 push	 4
  000dc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 420  :             return;

  000e4	e9 d2 00 00 00	 jmp	 $LN1@AmortizeBu
$LN4@AmortizeBu:

; 421  :         }
; 422  : 
; 423  :         // 设置变量
; 424  :         m_dwBufferSize = dwApplySize;

  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 55 d8	 mov	 edx, DWORD PTR _dwApplySize$4[ebp]
  000ef	89 91 68 80 02
	00		 mov	 DWORD PTR [ecx+163944], edx

; 425  :         m_pcbDataBuffer = pcbDataBuffer;

  000f5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 4d e8	 mov	 ecx, DWORD PTR _pcbDataBuffer$7[ebp]
  000fb	89 88 6c 80 02
	00		 mov	 DWORD PTR [eax+163948], ecx

; 426  :         CopyMemory(m_pcbDataBuffer, pcbDeleteBuffer, m_dwBufferData);

  00101	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00104	8b 82 64 80 02
	00		 mov	 eax, DWORD PTR [edx+163940]
  0010a	50		 push	 eax
  0010b	8b 4d e4	 mov	 ecx, DWORD PTR _pcbDeleteBuffer$6[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00112	8b 82 6c 80 02
	00		 mov	 eax, DWORD PTR [edx+163948]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 _memcpy
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 427  : 
; 428  :         // 删除缓冲
; 429  :         SafeDeleteArray(pcbDeleteBuffer);

  00121	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00128	8b 4d e4	 mov	 ecx, DWORD PTR _pcbDeleteBuffer$6[ebp]
  0012b	89 4d cc	 mov	 DWORD PTR $T2[ebp], ecx
  0012e	8b 55 cc	 mov	 edx, DWORD PTR $T2[ebp]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00137	83 c4 04	 add	 esp, 4
  0013a	eb 1e		 jmp	 SHORT $LN12@AmortizeBu
__catch$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$2:
  0013c	33 c0		 xor	 eax, eax
  0013e	75 14		 jne	 SHORT $LN9@AmortizeBu
  00140	68 ad 01 00 00	 push	 429			; 000001adH
  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0014a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0014f	85 c0		 test	 eax, eax
  00151	74 01		 je	 SHORT $LN9@AmortizeBu
  00153	cc		 int	 3
$LN9@AmortizeBu:
  00154	b8 00 00 00 00	 mov	 eax, $LN17@AmortizeBu
  00159	c3		 ret	 0
$LN12@AmortizeBu:
  0015a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00161	eb 07		 jmp	 SHORT __tryend$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$3
$LN17@AmortizeBu:
  00163	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z$3:
  0016a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pcbDeleteBuffer$6[ebp], 0
$LN2@AmortizeBu:

; 430  :     }
; 431  : 
; 432  :     // 设置变量
; 433  :     m_bNeedBuffer = true;

  00171	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00174	c6 82 62 80 02
	00 01		 mov	 BYTE PTR [edx+163938], 1

; 434  :     m_dwBufferData += wDataSize;

  0017b	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0017f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00182	03 81 64 80 02
	00		 add	 eax, DWORD PTR [ecx+163940]
  00188	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0018b	89 82 64 80 02
	00		 mov	 DWORD PTR [edx+163940], eax

; 435  :     CopyMemory(m_pcbDataBuffer + m_dwBufferData - wDataSize, pData, wDataSize);

  00191	0f b7 45 0c	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00195	50		 push	 eax
  00196	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  00199	51		 push	 ecx
  0019a	0f b7 55 0c	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  0019e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001a1	8b 88 6c 80 02
	00		 mov	 ecx, DWORD PTR [eax+163948]
  001a7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001aa	03 88 64 80 02
	00		 add	 ecx, DWORD PTR [eax+163940]
  001b0	2b ca		 sub	 ecx, edx
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 _memcpy
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@AmortizeBu:

; 436  : 
; 437  :     return;
; 438  : }

  001bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c5	59		 pop	 ecx
  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z ENDP ; CTCPSocketServiceThread::AmortizeBuffer
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?SendBuffer@CTCPSocketServiceThread@@AAEKPAXG@Z
_TEXT	SEGMENT
_nSendCount$1 = -12					; size = 4
_this$ = -8						; size = 4
_wTotalCount$ = -4					; size = 2
_pBuffer$ = 8						; size = 4
_wSendSize$ = 12					; size = 2
?SendBuffer@CTCPSocketServiceThread@@AAEKPAXG@Z PROC	; CTCPSocketServiceThread::SendBuffer, COMDAT
; _this$ = ecx

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  :     // 变量定义
; 353  :     WORD wTotalCount = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	66 89 45 fc	 mov	 WORD PTR _wTotalCount$[ebp], ax

; 354  : 
; 355  :     // 设置变量
; 356  :     m_dwSendTickCount = GetTickCount() / 1000L;

  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00015	33 d2		 xor	 edx, edx
  00017	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0001c	f7 f1		 div	 ecx
  0001e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00021	89 82 7c 80 02
	00		 mov	 DWORD PTR [edx+163964], eax
$LN2@SendBuffer:

; 357  : 
; 358  :     // 发送数据
; 359  :     while ((m_bNeedBuffer == false) && (wTotalCount < wSendSize))

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	0f b6 88 62 80
	02 00		 movzx	 ecx, BYTE PTR [eax+163938]
  00031	85 c9		 test	 ecx, ecx
  00033	0f 85 85 00 00
	00		 jne	 $LN3@SendBuffer
  00039	0f b7 55 fc	 movzx	 edx, WORD PTR _wTotalCount$[ebp]
  0003d	0f b7 45 0c	 movzx	 eax, WORD PTR _wSendSize$[ebp]
  00041	3b d0		 cmp	 edx, eax
  00043	7d 79		 jge	 SHORT $LN3@SendBuffer

; 360  :     {
; 361  :         // 发生数据
; 362  :         INT nSendCount = send(m_hSocket, (char *)pBuffer + wTotalCount, wSendSize - wTotalCount, 0);

  00045	6a 00		 push	 0
  00047	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wSendSize$[ebp]
  0004b	0f b7 55 fc	 movzx	 edx, WORD PTR _wTotalCount$[ebp]
  0004f	2b ca		 sub	 ecx, edx
  00051	51		 push	 ecx
  00052	0f b7 45 fc	 movzx	 eax, WORD PTR _wTotalCount$[ebp]
  00056	03 45 08	 add	 eax, DWORD PTR _pBuffer$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00060	52		 push	 edx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16
  00067	89 45 f4	 mov	 DWORD PTR _nSendCount$1[ebp], eax

; 363  : 
; 364  :         // 错误判断
; 365  :         if (nSendCount == SOCKET_ERROR)

  0006a	83 7d f4 ff	 cmp	 DWORD PTR _nSendCount$1[ebp], -1
  0006e	75 3e		 jne	 SHORT $LN4@SendBuffer

; 366  :         {
; 367  :             // 缓冲判断
; 368  :             if (WSAGetLastError() == WSAEWOULDBLOCK)

  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00076	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0007b	75 21		 jne	 SHORT $LN6@SendBuffer

; 369  :             {
; 370  :                 AmortizeBuffer((LPBYTE)pBuffer + wTotalCount, wSendSize - wTotalCount);

  0007d	0f b7 45 0c	 movzx	 eax, WORD PTR _wSendSize$[ebp]
  00081	0f b7 4d fc	 movzx	 ecx, WORD PTR _wTotalCount$[ebp]
  00085	2b c1		 sub	 eax, ecx
  00087	50		 push	 eax
  00088	0f b7 55 fc	 movzx	 edx, WORD PTR _wTotalCount$[ebp]
  0008c	03 55 08	 add	 edx, DWORD PTR _pBuffer$[ebp]
  0008f	52		 push	 edx
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z ; CTCPSocketServiceThread::AmortizeBuffer

; 371  :                 return wSendSize;

  00098	0f b7 45 0c	 movzx	 eax, WORD PTR _wSendSize$[ebp]
  0009c	eb 4b		 jmp	 SHORT $LN1@SendBuffer
$LN6@SendBuffer:

; 372  :             }
; 373  : 
; 374  :             // 关闭连接
; 375  :             PerformCloseSocket(SHUT_REASON_EXCEPTION);

  0009e	6a 04		 push	 4
  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 376  : 
; 377  :             return 0L;

  000a8	33 c0		 xor	 eax, eax
  000aa	eb 3d		 jmp	 SHORT $LN1@SendBuffer

; 378  :         }
; 379  :         else

  000ac	eb 0b		 jmp	 SHORT $LN5@SendBuffer
$LN4@SendBuffer:

; 380  :         {
; 381  :             // 设置变量
; 382  :             wTotalCount += nSendCount;

  000ae	0f b7 45 fc	 movzx	 eax, WORD PTR _wTotalCount$[ebp]
  000b2	03 45 f4	 add	 eax, DWORD PTR _nSendCount$1[ebp]
  000b5	66 89 45 fc	 mov	 WORD PTR _wTotalCount$[ebp], ax
$LN5@SendBuffer:

; 383  :         }
; 384  :     }

  000b9	e9 69 ff ff ff	 jmp	 $LN2@SendBuffer
$LN3@SendBuffer:

; 385  : 
; 386  :     // 缓冲数据
; 387  :     if (wTotalCount > wSendSize)

  000be	0f b7 4d fc	 movzx	 ecx, WORD PTR _wTotalCount$[ebp]
  000c2	0f b7 55 0c	 movzx	 edx, WORD PTR _wSendSize$[ebp]
  000c6	3b ca		 cmp	 ecx, edx
  000c8	7e 1b		 jle	 SHORT $LN7@SendBuffer

; 388  :     {
; 389  :         AmortizeBuffer((LPBYTE)pBuffer + wTotalCount, wSendSize - wTotalCount);

  000ca	0f b7 45 0c	 movzx	 eax, WORD PTR _wSendSize$[ebp]
  000ce	0f b7 4d fc	 movzx	 ecx, WORD PTR _wTotalCount$[ebp]
  000d2	2b c1		 sub	 eax, ecx
  000d4	50		 push	 eax
  000d5	0f b7 55 fc	 movzx	 edx, WORD PTR _wTotalCount$[ebp]
  000d9	03 55 08	 add	 edx, DWORD PTR _pBuffer$[ebp]
  000dc	52		 push	 edx
  000dd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	e8 00 00 00 00	 call	 ?AmortizeBuffer@CTCPSocketServiceThread@@AAEXPAXG@Z ; CTCPSocketServiceThread::AmortizeBuffer
$LN7@SendBuffer:

; 390  :     }
; 391  : 
; 392  :     return wSendSize;

  000e5	0f b7 45 0c	 movzx	 eax, WORD PTR _wSendSize$[ebp]
$LN1@SendBuffer:

; 393  : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
?SendBuffer@CTCPSocketServiceThread@@AAEKPAXG@Z ENDP	; CTCPSocketServiceThread::SendBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?PerformSendData@CTCPSocketServiceThread@@AAEKGGPAXG@Z
_TEXT	SEGMENT
_pHead$ = -16400					; size = 4
_wSendSize$ = -16396					; size = 2
_this$ = -16392						; size = 4
_cbDataBuffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
_pData$ = 16						; size = 4
_wDataSize$ = 20					; size = 2
?PerformSendData@CTCPSocketServiceThread@@AAEKGGPAXG@Z PROC ; CTCPSocketServiceThread::PerformSendData, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 40 00 00	 mov	 eax, 16400		; 00004010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	89 8d f8 bf ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 277  :     // 效验状态
; 278  :     if (m_hSocket == INVALID_SOCKET)

  0001d	8b 85 f8 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 78 14 ff	 cmp	 DWORD PTR [eax+20], -1
  00027	75 07		 jne	 SHORT $LN2@PerformSen

; 279  :         return 0L;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 ed 00 00 00	 jmp	 $LN1@PerformSen
$LN2@PerformSen:

; 280  :     if (m_TCPSocketStatus != SOCKET_STATUS_CONNECT)

  00030	8b 8d f8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00036	0f b6 51 18	 movzx	 edx, BYTE PTR [ecx+24]
  0003a	83 fa 02	 cmp	 edx, 2
  0003d	74 07		 je	 SHORT $LN3@PerformSen

; 281  :         return 0L;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 d7 00 00 00	 jmp	 $LN1@PerformSen
$LN3@PerformSen:

; 282  : 
; 283  :     // 效验大小
; 284  :     ASSERT(wDataSize <= SOCKET_TCP_PACKET);

  00046	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0004a	3d f8 3f 00 00	 cmp	 eax, 16376		; 00003ff8H
  0004f	76 14		 jbe	 SHORT $LN7@PerformSen
  00051	68 1c 01 00 00	 push	 284			; 0000011cH
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0005b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00060	85 c0		 test	 eax, eax
  00062	74 01		 je	 SHORT $LN7@PerformSen
  00064	cc		 int	 3
$LN7@PerformSen:

; 285  :     if (wDataSize > SOCKET_TCP_PACKET)

  00065	0f b7 55 14	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  00069	81 fa f8 3f 00
	00		 cmp	 edx, 16376		; 00003ff8H
  0006f	76 07		 jbe	 SHORT $LN4@PerformSen

; 286  :         return 0L;

  00071	33 c0		 xor	 eax, eax
  00073	e9 a5 00 00 00	 jmp	 $LN1@PerformSen
$LN4@PerformSen:

; 287  : 
; 288  :     // 构造数据
; 289  :     BYTE cbDataBuffer[SOCKET_TCP_BUFFER];
; 290  :     TCP_Head * pHead = (TCP_Head *)cbDataBuffer;

  00078	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _cbDataBuffer$[ebp]
  0007e	89 85 f0 bf ff
	ff		 mov	 DWORD PTR _pHead$[ebp], eax

; 291  : 
; 292  :     // 设置变量
; 293  :     pHead->CommandInfo.wSubCmdID = wSubCmdID;

  00084	8b 8d f0 bf ff
	ff		 mov	 ecx, DWORD PTR _pHead$[ebp]
  0008a	66 8b 55 0c	 mov	 dx, WORD PTR _wSubCmdID$[ebp]
  0008e	66 89 51 06	 mov	 WORD PTR [ecx+6], dx

; 294  :     pHead->CommandInfo.wMainCmdID = wMainCmdID;

  00092	8b 85 f0 bf ff
	ff		 mov	 eax, DWORD PTR _pHead$[ebp]
  00098	66 8b 4d 08	 mov	 cx, WORD PTR _wMainCmdID$[ebp]
  0009c	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 295  : 
; 296  :     // 附加数据
; 297  :     if (wDataSize > 0)

  000a0	0f b7 55 14	 movzx	 edx, WORD PTR _wDataSize$[ebp]
  000a4	85 d2		 test	 edx, edx
  000a6	7e 35		 jle	 SHORT $LN5@PerformSen

; 298  :     {
; 299  :         ASSERT(pData != NULL);

  000a8	83 7d 10 00	 cmp	 DWORD PTR _pData$[ebp], 0
  000ac	75 14		 jne	 SHORT $LN8@PerformSen
  000ae	68 2b 01 00 00	 push	 299			; 0000012bH
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000b8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000bd	85 c0		 test	 eax, eax
  000bf	74 01		 je	 SHORT $LN8@PerformSen
  000c1	cc		 int	 3
$LN8@PerformSen:

; 300  :         CopyMemory(pHead + 1, pData, wDataSize);

  000c2	0f b7 4d 14	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  000c6	51		 push	 ecx
  000c7	8b 55 10	 mov	 edx, DWORD PTR _pData$[ebp]
  000ca	52		 push	 edx
  000cb	8b 85 f0 bf ff
	ff		 mov	 eax, DWORD PTR _pHead$[ebp]
  000d1	83 c0 08	 add	 eax, 8
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _memcpy
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@PerformSen:

; 301  :     }
; 302  : 
; 303  :     // 加密数据
; 304  :     WORD wSendSize = EncryptBuffer(cbDataBuffer, sizeof(TCP_Head) + wDataSize, sizeof(cbDataBuffer));

  000dd	68 00 40 00 00	 push	 16384			; 00004000H
  000e2	0f b7 4d 14	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  000e6	83 c1 08	 add	 ecx, 8
  000e9	51		 push	 ecx
  000ea	8d 95 fc bf ff
	ff		 lea	 edx, DWORD PTR _cbDataBuffer$[ebp]
  000f0	52		 push	 edx
  000f1	8b 8d f8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	e8 00 00 00 00	 call	 ?EncryptBuffer@CTCPSocketServiceThread@@AAEGQAEGG@Z ; CTCPSocketServiceThread::EncryptBuffer
  000fc	66 89 85 f4 bf
	ff ff		 mov	 WORD PTR _wSendSize$[ebp], ax

; 305  : 
; 306  :     // 发送数据
; 307  :     return SendBuffer(cbDataBuffer, wSendSize);

  00103	0f b7 85 f4 bf
	ff ff		 movzx	 eax, WORD PTR _wSendSize$[ebp]
  0010a	50		 push	 eax
  0010b	8d 8d fc bf ff
	ff		 lea	 ecx, DWORD PTR _cbDataBuffer$[ebp]
  00111	51		 push	 ecx
  00112	8b 8d f8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00118	e8 00 00 00 00	 call	 ?SendBuffer@CTCPSocketServiceThread@@AAEKPAXG@Z ; CTCPSocketServiceThread::SendBuffer
$LN1@PerformSen:

; 308  : }

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00120	33 cd		 xor	 ecx, ebp
  00122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 10 00	 ret	 16			; 00000010H
?PerformSendData@CTCPSocketServiceThread@@AAEKGGPAXG@Z ENDP ; CTCPSocketServiceThread::PerformSendData
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?PerformSendData@CTCPSocketServiceThread@@AAEKGG@Z
_TEXT	SEGMENT
_pHead$ = -16400					; size = 4
_wSendSize$ = -16396					; size = 2
_this$ = -16392						; size = 4
_cbDataBuffer$ = -16388					; size = 16384
__$ArrayPad$ = -4					; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
?PerformSendData@CTCPSocketServiceThread@@AAEKGG@Z PROC	; CTCPSocketServiceThread::PerformSendData, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 40 00 00	 mov	 eax, 16400		; 00004010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	89 8d f8 bf ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 253  :     // 效验状态
; 254  :     if (m_hSocket == INVALID_SOCKET)

  0001d	8b 85 f8 bf ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 78 14 ff	 cmp	 DWORD PTR [eax+20], -1
  00027	75 04		 jne	 SHORT $LN2@PerformSen

; 255  :         return false;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 75		 jmp	 SHORT $LN1@PerformSen
$LN2@PerformSen:

; 256  :     if (m_TCPSocketStatus != SOCKET_STATUS_CONNECT)

  0002d	8b 8d f8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00033	0f b6 51 18	 movzx	 edx, BYTE PTR [ecx+24]
  00037	83 fa 02	 cmp	 edx, 2
  0003a	74 04		 je	 SHORT $LN3@PerformSen

; 257  :         return false;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 62		 jmp	 SHORT $LN1@PerformSen
$LN3@PerformSen:

; 258  : 
; 259  :     // 变量定义
; 260  :     BYTE cbDataBuffer[SOCKET_TCP_BUFFER];
; 261  :     TCP_Head * pHead = (TCP_Head *)cbDataBuffer;

  00040	8d 85 fc bf ff
	ff		 lea	 eax, DWORD PTR _cbDataBuffer$[ebp]
  00046	89 85 f0 bf ff
	ff		 mov	 DWORD PTR _pHead$[ebp], eax

; 262  : 
; 263  :     // 设置变量
; 264  :     pHead->CommandInfo.wSubCmdID = wSubCmdID;

  0004c	8b 8d f0 bf ff
	ff		 mov	 ecx, DWORD PTR _pHead$[ebp]
  00052	66 8b 55 0c	 mov	 dx, WORD PTR _wSubCmdID$[ebp]
  00056	66 89 51 06	 mov	 WORD PTR [ecx+6], dx

; 265  :     pHead->CommandInfo.wMainCmdID = wMainCmdID;

  0005a	8b 85 f0 bf ff
	ff		 mov	 eax, DWORD PTR _pHead$[ebp]
  00060	66 8b 4d 08	 mov	 cx, WORD PTR _wMainCmdID$[ebp]
  00064	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 266  : 
; 267  :     // 加密数据
; 268  :     WORD wSendSize = EncryptBuffer(cbDataBuffer, sizeof(TCP_Head), sizeof(cbDataBuffer));

  00068	68 00 40 00 00	 push	 16384			; 00004000H
  0006d	6a 08		 push	 8
  0006f	8d 95 fc bf ff
	ff		 lea	 edx, DWORD PTR _cbDataBuffer$[ebp]
  00075	52		 push	 edx
  00076	8b 8d f8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?EncryptBuffer@CTCPSocketServiceThread@@AAEGQAEGG@Z ; CTCPSocketServiceThread::EncryptBuffer
  00081	66 89 85 f4 bf
	ff ff		 mov	 WORD PTR _wSendSize$[ebp], ax

; 269  : 
; 270  :     // 发送数据
; 271  :     return SendBuffer(cbDataBuffer, wSendSize);

  00088	0f b7 85 f4 bf
	ff ff		 movzx	 eax, WORD PTR _wSendSize$[ebp]
  0008f	50		 push	 eax
  00090	8d 8d fc bf ff
	ff		 lea	 ecx, DWORD PTR _cbDataBuffer$[ebp]
  00096	51		 push	 ecx
  00097	8b 8d f8 bf ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?SendBuffer@CTCPSocketServiceThread@@AAEKPAXG@Z ; CTCPSocketServiceThread::SendBuffer
$LN1@PerformSen:

; 272  : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?PerformSendData@CTCPSocketServiceThread@@AAEKGG@Z ENDP	; CTCPSocketServiceThread::PerformSendData
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z
_TEXT	SEGMENT
$T2 = -64						; size = 4
_nErrorCode$3 = -60					; size = 4
$T4 = -56						; size = 4
$T5 = -52						; size = 4
$T6 = -48						; size = 4
$T7 = -44						; size = 4
_this$ = -40						; size = 4
_SocketAddr$8 = -36					; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_dwServerIP$ = 8					; size = 4
_wPort$ = 12						; size = 2
?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z PROC	; CTCPSocketServiceThread::PerformConnect, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 30	 sub	 esp, 48			; 00000030H
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002f	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 195  :     // 效验参数
; 196  :     ASSERT(m_hSocket == INVALID_SOCKET);

  00032	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 78 14 ff	 cmp	 DWORD PTR [eax+20], -1
  00039	74 14		 je	 SHORT $LN10@PerformCon
  0003b	68 c4 00 00 00	 push	 196			; 000000c4H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00045	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0004a	85 c0		 test	 eax, eax
  0004c	74 01		 je	 SHORT $LN10@PerformCon
  0004e	cc		 int	 3
$LN10@PerformCon:

; 197  :     ASSERT(m_TCPSocketStatus == SOCKET_STATUS_IDLE);

  0004f	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00052	0f b6 42 18	 movzx	 eax, BYTE PTR [edx+24]
  00056	85 c0		 test	 eax, eax
  00058	74 14		 je	 SHORT $LN11@PerformCon
  0005a	68 c5 00 00 00	 push	 197			; 000000c5H
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00064	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00069	85 c0		 test	 eax, eax
  0006b	74 01		 je	 SHORT $LN11@PerformCon
  0006d	cc		 int	 3
$LN11@PerformCon:

; 198  :     ASSERT((dwServerIP != INADDR_NONE) && (dwServerIP != 0));

  0006e	83 7d 08 ff	 cmp	 DWORD PTR _dwServerIP$[ebp], -1
  00072	74 06		 je	 SHORT $LN12@PerformCon
  00074	83 7d 08 00	 cmp	 DWORD PTR _dwServerIP$[ebp], 0
  00078	75 14		 jne	 SHORT $LN13@PerformCon
$LN12@PerformCon:
  0007a	68 c6 00 00 00	 push	 198			; 000000c6H
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00084	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00089	85 c0		 test	 eax, eax
  0008b	74 01		 je	 SHORT $LN13@PerformCon
  0008d	cc		 int	 3
$LN13@PerformCon:

; 199  : 
; 200  :     try

  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 201  :     {
; 202  :         // 效验状态
; 203  :         if (m_hSocket != INVALID_SOCKET) throw CONNECT_EXCEPTION;

  00095	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00098	83 78 14 ff	 cmp	 DWORD PTR [eax+20], -1
  0009c	74 15		 je	 SHORT $LN3@PerformCon
  0009e	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR $T7[ebp], 2
  000a5	68 00 00 00 00	 push	 OFFSET __TI1H
  000aa	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PerformCon:

; 204  :         if (m_TCPSocketStatus != SOCKET_STATUS_IDLE) throw CONNECT_EXCEPTION;

  000b3	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000b6	0f b6 42 18	 movzx	 eax, BYTE PTR [edx+24]
  000ba	85 c0		 test	 eax, eax
  000bc	74 15		 je	 SHORT $LN4@PerformCon
  000be	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR $T6[ebp], 2
  000c5	68 00 00 00 00	 push	 OFFSET __TI1H
  000ca	8d 4d d0	 lea	 ecx, DWORD PTR $T6[ebp]
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PerformCon:

; 205  :         if ((dwServerIP == INADDR_NONE) || (dwServerIP == 0)) throw CONNECT_EXCEPTION;

  000d3	83 7d 08 ff	 cmp	 DWORD PTR _dwServerIP$[ebp], -1
  000d7	74 06		 je	 SHORT $LN6@PerformCon
  000d9	83 7d 08 00	 cmp	 DWORD PTR _dwServerIP$[ebp], 0
  000dd	75 15		 jne	 SHORT $LN5@PerformCon
$LN6@PerformCon:
  000df	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR $T5[ebp], 2
  000e6	68 00 00 00 00	 push	 OFFSET __TI1H
  000eb	8d 55 cc	 lea	 edx, DWORD PTR $T5[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@PerformCon:

; 206  : 
; 207  :         // 设置参数
; 208  :         m_wRecvSize = 0;

  000f4	33 c0		 xor	 eax, eax
  000f6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	66 89 41 60	 mov	 WORD PTR [ecx+96], ax

; 209  :         m_cbSendRound = 0;

  000fd	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00100	c6 82 70 80 02
	00 00		 mov	 BYTE PTR [edx+163952], 0

; 210  :         m_cbRecvRound = 0;

  00107	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	c6 80 71 80 02
	00 00		 mov	 BYTE PTR [eax+163953], 0

; 211  :         m_dwSendXorKey = 0xA8C543FF;

  00111	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	c7 81 74 80 02
	00 ff 43 c5 a8	 mov	 DWORD PTR [ecx+163956], -1463467009 ; a8c543ffH

; 212  :         m_dwRecvXorKey = 0xA8C543FF;

  0011e	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00121	c7 82 78 80 02
	00 ff 43 c5 a8	 mov	 DWORD PTR [edx+163960], -1463467009 ; a8c543ffH

; 213  :         m_dwSendTickCount = GetTickCount() / 1000L;

  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00131	33 d2		 xor	 edx, edx
  00133	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00138	f7 f1		 div	 ecx
  0013a	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	89 82 7c 80 02
	00		 mov	 DWORD PTR [edx+163964], eax

; 214  :         m_dwRecvTickCount = GetTickCount() / 1000L;

  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00149	33 d2		 xor	 edx, edx
  0014b	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00150	f7 f1		 div	 ecx
  00152	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00155	89 82 80 80 02
	00		 mov	 DWORD PTR [edx+163968], eax

; 215  : 
; 216  :         // 建立 SOCKET
; 217  :         m_hSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

  0015b	6a 06		 push	 6
  0015d	6a 01		 push	 1
  0015f	6a 02		 push	 2
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  00167	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 218  :         if (m_hSocket == INVALID_SOCKET) throw CONNECT_EXCEPTION;

  0016d	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00170	83 7a 14 ff	 cmp	 DWORD PTR [edx+20], -1
  00174	75 15		 jne	 SHORT $LN7@PerformCon
  00176	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR $T4[ebp], 2
  0017d	68 00 00 00 00	 push	 OFFSET __TI1H
  00182	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PerformCon:

; 219  : 
; 220  :         // 变量定义
; 221  :         SOCKADDR_IN SocketAddr;
; 222  :         ZeroMemory(&SocketAddr, sizeof(SocketAddr));

  0018b	33 c9		 xor	 ecx, ecx
  0018d	89 4d dc	 mov	 DWORD PTR _SocketAddr$8[ebp], ecx
  00190	89 4d e0	 mov	 DWORD PTR _SocketAddr$8[ebp+4], ecx
  00193	89 4d e4	 mov	 DWORD PTR _SocketAddr$8[ebp+8], ecx
  00196	89 4d e8	 mov	 DWORD PTR _SocketAddr$8[ebp+12], ecx

; 223  : 
; 224  :         // 设置变量
; 225  :         SocketAddr.sin_family = AF_INET;

  00199	ba 02 00 00 00	 mov	 edx, 2
  0019e	66 89 55 dc	 mov	 WORD PTR _SocketAddr$8[ebp], dx

; 226  :         SocketAddr.sin_port = htons(wPort);

  001a2	0f b7 45 0c	 movzx	 eax, WORD PTR _wPort$[ebp]
  001a6	50		 push	 eax
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  001ad	66 89 45 de	 mov	 WORD PTR _SocketAddr$8[ebp+2], ax

; 227  :         SocketAddr.sin_addr.S_un.S_addr = dwServerIP;

  001b1	8b 4d 08	 mov	 ecx, DWORD PTR _dwServerIP$[ebp]
  001b4	89 4d e0	 mov	 DWORD PTR _SocketAddr$8[ebp+4], ecx

; 228  : 
; 229  :         // 绑定窗口
; 230  :         WSAAsyncSelect(m_hSocket, m_hWnd, WM_SOCKET_NOTIFY, FD_READ | FD_CONNECT | FD_CLOSE | FD_WRITE);

  001b7	6a 33		 push	 51			; 00000033H
  001b9	68 64 04 00 00	 push	 1124			; 00000464H
  001be	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  001c1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001c4	50		 push	 eax
  001c5	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001cb	52		 push	 edx
  001cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 231  : 
; 232  :         // 连接服务器
; 233  :         INT nErrorCode = connect(m_hSocket, (SOCKADDR *)&SocketAddr, sizeof(SocketAddr));

  001d2	6a 10		 push	 16			; 00000010H
  001d4	8d 45 dc	 lea	 eax, DWORD PTR _SocketAddr$8[ebp]
  001d7	50		 push	 eax
  001d8	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001db	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001de	52		 push	 edx
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__connect@12
  001e5	89 45 c4	 mov	 DWORD PTR _nErrorCode$3[ebp], eax

; 234  :         if ((nErrorCode == SOCKET_ERROR) && (WSAGetLastError() != WSAEWOULDBLOCK)) throw CONNECT_EXCEPTION;

  001e8	83 7d c4 ff	 cmp	 DWORD PTR _nErrorCode$3[ebp], -1
  001ec	75 22		 jne	 SHORT $LN8@PerformCon
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  001f4	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  001f9	74 15		 je	 SHORT $LN8@PerformCon
  001fb	c7 45 c0 02 00
	00 00		 mov	 DWORD PTR $T2[ebp], 2
  00202	68 00 00 00 00	 push	 OFFSET __TI1H
  00207	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@PerformCon:

; 235  : 
; 236  :         // 设置变量
; 237  :         m_TCPSocketStatus = SOCKET_STATUS_WAIT;

  00210	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	c6 41 18 01	 mov	 BYTE PTR [ecx+24], 1

; 238  : 
; 239  :         return CONNECT_SUCCESS;

  00217	33 c0		 xor	 eax, eax
  00219	eb 25		 jmp	 SHORT $LN9@PerformCon
__catch$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z$0:

; 240  :     }
; 241  :     catch (...)
; 242  :     {
; 243  :         // 关闭连接
; 244  :         PerformCloseSocket(SHUT_REASON_INSIDE);

  0021b	6a 00		 push	 0
  0021d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00220	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 245  :     }

  00225	b8 00 00 00 00	 mov	 eax, $LN17@PerformCon
  0022a	c3		 ret	 0
  0022b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00232	eb 07		 jmp	 SHORT __tryend$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z$1
$LN17@PerformCon:
  00234	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z$1:

; 246  : 
; 247  :     return CONNECT_EXCEPTION;

  0023b	b8 02 00 00 00	 mov	 eax, 2
$LN9@PerformCon:

; 248  : }

  00240	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00243	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024a	59		 pop	 ecx
  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	5b		 pop	 ebx
  0024e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00251	33 cd		 xor	 ecx, ebp
  00253	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00258	8b e5		 mov	 esp, ebp
  0025a	5d		 pop	 ebp
  0025b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PerformConnect@CTCPSocketServiceThread@@AAEKKG@Z ENDP	; CTCPSocketServiceThread::PerformConnect
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z
_TEXT	SEGMENT
_pTCPSocketStatusService$1 = -8				; size = 4
_this$ = -4						; size = 4
_cbShutReason$ = 8					; size = 1
?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z PROC ; CTCPSocketServiceThread::PerformCloseSocket, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 313  :     // 内核变量
; 314  :     m_wRecvSize = 0;

  00009	33 c0		 xor	 eax, eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	66 89 41 60	 mov	 WORD PTR [ecx+96], ax

; 315  :     m_dwBufferData = 0L;

  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	c7 82 64 80 02
	00 00 00 00 00	 mov	 DWORD PTR [edx+163940], 0

; 316  :     m_bNeedBuffer = false;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c6 80 62 80 02
	00 00		 mov	 BYTE PTR [eax+163938], 0

; 317  :     m_TCPSocketStatus = SOCKET_STATUS_IDLE;

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0

; 318  : 
; 319  :     // 加密数据
; 320  :     m_cbSendRound = 0;

  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	c6 82 70 80 02
	00 00		 mov	 BYTE PTR [edx+163952], 0

; 321  :     m_cbRecvRound = 0;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c6 80 71 80 02
	00 00		 mov	 BYTE PTR [eax+163953], 0

; 322  :     m_dwSendXorKey = 0;

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	c7 81 74 80 02
	00 00 00 00 00	 mov	 DWORD PTR [ecx+163956], 0

; 323  :     m_dwRecvXorKey = 0;

  00051	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00054	c7 82 78 80 02
	00 00 00 00 00	 mov	 DWORD PTR [edx+163960], 0

; 324  : 
; 325  :     // 计数变量
; 326  :     m_dwSendTickCount = 0;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	c7 80 7c 80 02
	00 00 00 00 00	 mov	 DWORD PTR [eax+163964], 0

; 327  :     m_dwRecvTickCount = 0;

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	c7 81 80 80 02
	00 00 00 00 00	 mov	 DWORD PTR [ecx+163968], 0

; 328  :     m_dwSendPacketCount = 0;

  00078	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	c7 82 84 80 02
	00 00 00 00 00	 mov	 DWORD PTR [edx+163972], 0

; 329  :     m_dwRecvPacketCount = 0;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 80 88 80 02
	00 00 00 00 00	 mov	 DWORD PTR [eax+163976], 0

; 330  : 
; 331  :     // 关闭判断
; 332  :     if (m_hSocket != INVALID_SOCKET)

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	83 79 14 ff	 cmp	 DWORD PTR [ecx+20], -1
  00099	74 35		 je	 SHORT $LN1@PerformClo

; 333  :     {
; 334  :         // 关闭连接
; 335  :         closesocket(m_hSocket);

  0009b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 336  :         m_hSocket = INVALID_SOCKET;

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1

; 337  : 
; 338  :         // 关闭通知
; 339  :         if (cbShutReason != SHUT_REASON_INSIDE)

  000b2	0f b6 55 08	 movzx	 edx, BYTE PTR _cbShutReason$[ebp]
  000b6	85 d2		 test	 edx, edx
  000b8	74 16		 je	 SHORT $LN1@PerformClo

; 340  :         {
; 341  :             CTCPSocketService * pTCPSocketStatusService = CONTAINING_RECORD(this, CTCPSocketService, m_TCPSocketServiceThread);

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 e8 0c	 sub	 eax, 12			; 0000000cH
  000c0	89 45 f8	 mov	 DWORD PTR _pTCPSocketStatusService$1[ebp], eax

; 342  :             pTCPSocketStatusService->OnSocketShut(cbShutReason);

  000c3	0f b6 4d 08	 movzx	 ecx, BYTE PTR _cbShutReason$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 4d f8	 mov	 ecx, DWORD PTR _pTCPSocketStatusService$1[ebp]
  000cb	e8 00 00 00 00	 call	 ?OnSocketShut@CTCPSocketService@@IAE_NE@Z ; CTCPSocketService::OnSocketShut
$LN1@PerformClo:

; 343  :         }
; 344  :     }
; 345  : 
; 346  :     return;
; 347  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ENDP ; CTCPSocketServiceThread::PerformCloseSocket
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z
_TEXT	SEGMENT
_ThreadLock$ = -32					; size = 12
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_wIdentifier$ = 8					; size = 2
_pBuffer$ = 12						; size = 4
_wDataSize$ = 16					; size = 2
?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z PROC ; CTCPSocketServiceThread::PostThreadRequest, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 108  :     // 投递请求
; 109  :     CWHDataLocker ThreadLock(m_CriticalSection);

  00028	6a 01		 push	 1
  0002a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 3c	 add	 eax, 60			; 0000003cH
  00030	50		 push	 eax
  00031	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 110  :     m_DataQueue.InsertData(wIdentifier, pBuffer, wDataSize);

  00041	0f b7 4d 10	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 0c	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00049	52		 push	 edx
  0004a	0f b7 45 08	 movzx	 eax, WORD PTR _wIdentifier$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?InsertData@CWHDataQueue@@QAE_NGPAXG@Z

; 111  : 
; 112  :     // 发送消息
; 113  :     ASSERT(m_hWnd != NULL);

  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00062	75 11		 jne	 SHORT $LN4@PostThread
  00064	6a 71		 push	 113			; 00000071H
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN4@PostThread
  00074	cc		 int	 3
$LN4@PostThread:

; 114  :     if (m_hWnd != NULL) PostMessage(m_hWnd, WM_SERVICE_REQUEST, wDataSize, GetCurrentThreadId());

  00075	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0007c	74 1e		 je	 SHORT $LN2@PostThread
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  00084	50		 push	 eax
  00085	0f b7 4d 10	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  00089	51		 push	 ecx
  0008a	68 65 04 00 00	 push	 1125			; 00000465H
  0008f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$LN2@PostThread:

; 115  : 
; 116  :     return true;

  0009c	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
  000a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  000b0	8a 45 f3	 mov	 al, BYTE PTR $T2[ebp]

; 117  : }

  000b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bd	59		 pop	 ecx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PostThreadRequest@CTCPSocketServiceThread@@QAE_NGQAXG@Z ENDP ; CTCPSocketServiceThread::PostThreadRequest
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?ConcludeThread@CTCPSocketServiceThread@@UAE_NK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwWaitSeconds$ = 8					; size = 4
?ConcludeThread@CTCPSocketServiceThread@@UAE_NK@Z PROC	; CTCPSocketServiceThread::ConcludeThread, COMDAT
; _this$ = ecx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 96   :     // 退出消息
; 97   :     if (IsRuning() == true)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	ff d0		 call	 eax
  00014	0f b6 c8	 movzx	 ecx, al
  00017	83 f9 01	 cmp	 ecx, 1
  0001a	75 0f		 jne	 SHORT $LN2@ConcludeTh

; 98   :     {
; 99   :         PostThreadMessage(WM_QUIT, 0, 0);

  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	6a 12		 push	 18			; 00000012H
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PostThreadMessageA@CWHThread@@QAEJIIJ@Z
$LN2@ConcludeTh:

; 100  :     }
; 101  : 
; 102  :     return __super::ConcludeThread(dwWaitSeconds);

  0002b	8b 55 08	 mov	 edx, DWORD PTR _dwWaitSeconds$[ebp]
  0002e	52		 push	 edx
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ConcludeThread@CWHThread@@UAE_NK@Z

; 103  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?ConcludeThread@CTCPSocketServiceThread@@UAE_NK@Z ENDP	; CTCPSocketServiceThread::ConcludeThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ
_TEXT	SEGMENT
_ThreadLock$ = -32					; size = 12
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ PROC ; CTCPSocketServiceThread::OnEventThreadConclude, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 144  :     // 关闭窗口
; 145  :     if (m_hWnd != NULL)

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002f	74 17		 je	 SHORT $LN2@OnEventThr

; 146  :     {
; 147  :         DestroyWindow(m_hWnd);

  00031	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00037	52		 push	 edx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4

; 148  :         m_hWnd = NULL;

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN2@OnEventThr:

; 149  :     }
; 150  : 
; 151  :     // 关闭连接
; 152  :     PerformCloseSocket(SHUT_REASON_INSIDE);

  00048	6a 00		 push	 0
  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?PerformCloseSocket@CTCPSocketServiceThread@@AAEXE@Z ; CTCPSocketServiceThread::PerformCloseSocket

; 153  : 
; 154  :     // 清理队列
; 155  :     CWHDataLocker ThreadLock(m_CriticalSection);

  00052	6a 01		 push	 1
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0005a	51		 push	 ecx
  0005b	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 156  :     m_DataQueue.RemoveData(false);

  0006b	6a 00		 push	 0
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RemoveData@CWHDataQueue@@QAEX_N@Z

; 157  : 
; 158  :     return true;

  00079	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  0008d	8a 45 f3	 mov	 al, BYTE PTR $T2[ebp]

; 159  : }

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnEventThreadConclude@CTCPSocketServiceThread@@UAE_NXZ ENDP ; CTCPSocketServiceThread::OnEventThreadConclude
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnEventThreadStrat@CTCPSocketServiceThread@@UAE_NXZ
_TEXT	SEGMENT
_WndClass$ = -48					; size = 40
_this$ = -8						; size = 4
_hParentWnd$ = -4					; size = 4
?OnEventThreadStrat@CTCPSocketServiceThread@@UAE_NXZ PROC ; CTCPSocketServiceThread::OnEventThreadStrat, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 122  :     // 变量定义
; 123  :     WNDCLASS WndClass;
; 124  :     ZeroMemory(&WndClass, sizeof(WndClass));

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 d0	 mov	 DWORD PTR _WndClass$[ebp], eax
  0000e	89 45 d4	 mov	 DWORD PTR _WndClass$[ebp+4], eax
  00011	89 45 d8	 mov	 DWORD PTR _WndClass$[ebp+8], eax
  00014	89 45 dc	 mov	 DWORD PTR _WndClass$[ebp+12], eax
  00017	89 45 e0	 mov	 DWORD PTR _WndClass$[ebp+16], eax
  0001a	89 45 e4	 mov	 DWORD PTR _WndClass$[ebp+20], eax
  0001d	89 45 e8	 mov	 DWORD PTR _WndClass$[ebp+24], eax
  00020	89 45 ec	 mov	 DWORD PTR _WndClass$[ebp+28], eax
  00023	89 45 f0	 mov	 DWORD PTR _WndClass$[ebp+32], eax
  00026	89 45 f4	 mov	 DWORD PTR _WndClass$[ebp+36], eax

; 125  : 
; 126  :     // 设置变量
; 127  :     WndClass.lpfnWndProc = DefWindowProc;

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__DefWindowProcA@16
  0002f	89 4d d4	 mov	 DWORD PTR _WndClass$[ebp+4], ecx

; 128  :     WndClass.hInstance = AfxGetInstanceHandle();

  00032	e8 00 00 00 00	 call	 ?AfxGetInstanceHandle@@YGPAUHINSTANCE__@@XZ ; AfxGetInstanceHandle
  00037	89 45 e0	 mov	 DWORD PTR _WndClass$[ebp+16], eax

; 129  :     WndClass.lpszClassName = TEXT("TCPSocketStatusServiceThread");

  0003a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _WndClass$[ebp+36], OFFSET ??_C@_0BN@IDFIFOBN@TCPSocketStatusServiceThread@

; 130  : 
; 131  :     // 注册窗口
; 132  :     RegisterClass(&WndClass);

  00041	8d 55 d0	 lea	 edx, DWORD PTR _WndClass$[ebp]
  00044	52		 push	 edx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4

; 133  : 
; 134  :     // 创建窗口
; 135  :     HWND hParentWnd = GetDesktopWindow();

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDesktopWindow@0
  00051	89 45 fc	 mov	 DWORD PTR _hParentWnd$[ebp], eax

; 136  :     m_hWnd = CreateWindow(WndClass.lpszClassName, NULL, WS_CHILD, 0, 0, 0, 0, hParentWnd, NULL, WndClass.hInstance, NULL);

  00054	6a 00		 push	 0
  00056	8b 45 e0	 mov	 eax, DWORD PTR _WndClass$[ebp+16]
  00059	50		 push	 eax
  0005a	6a 00		 push	 0
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _hParentWnd$[ebp]
  0005f	51		 push	 ecx
  00060	6a 00		 push	 0
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	68 00 00 00 40	 push	 1073741824		; 40000000H
  0006d	6a 00		 push	 0
  0006f	8b 55 f4	 mov	 edx, DWORD PTR _WndClass$[ebp+36]
  00072	52		 push	 edx
  00073	6a 00		 push	 0
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 137  : 
; 138  :     return true;

  00081	b0 01		 mov	 al, 1

; 139  : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?OnEventThreadStrat@CTCPSocketServiceThread@@UAE_NXZ ENDP ; CTCPSocketServiceThread::OnEventThreadStrat
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?OnEventThreadRun@CTCPSocketServiceThread@@UAE_NXZ
_TEXT	SEGMENT
_Message$ = -36						; size = 28
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?OnEventThreadRun@CTCPSocketServiceThread@@UAE_NXZ PROC	; CTCPSocketServiceThread::OnEventThreadRun, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :     // 获取消息
; 165  :     MSG Message;
; 166  :     if (GetMessage(&Message, NULL, 0, 0) == FALSE)

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	8d 45 dc	 lea	 eax, DWORD PTR _Message$[ebp]
  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessageA@16
  00019	85 c0		 test	 eax, eax
  0001b	75 04		 jne	 SHORT $LN4@OnEventThr

; 167  :         return false;

  0001d	32 c0		 xor	 al, al
  0001f	eb 5e		 jmp	 SHORT $LN1@OnEventThr
$LN4@OnEventThr:

; 168  : 
; 169  :     // 消息处理
; 170  :     switch (Message.message)

  00021	8b 4d e0	 mov	 ecx, DWORD PTR _Message$[ebp+4]
  00024	89 4d fc	 mov	 DWORD PTR tv70[ebp], ecx
  00027	81 7d fc 64 04
	00 00		 cmp	 DWORD PTR tv70[ebp], 1124 ; 00000464H
  0002e	74 0b		 je	 SHORT $LN5@OnEventThr
  00030	81 7d fc 65 04
	00 00		 cmp	 DWORD PTR tv70[ebp], 1125 ; 00000465H
  00037	74 16		 je	 SHORT $LN6@OnEventThr
  00039	eb 28		 jmp	 SHORT $LN7@OnEventThr
$LN5@OnEventThr:

; 171  :     {
; 172  :         case WM_SOCKET_NOTIFY:		// 网络消息
; 173  :         {
; 174  :             OnSocketNotify(Message.wParam, Message.lParam);

  0003b	8b 55 e8	 mov	 edx, DWORD PTR _Message$[ebp+12]
  0003e	52		 push	 edx
  0003f	8b 45 e4	 mov	 eax, DWORD PTR _Message$[ebp+8]
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?OnSocketNotify@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnSocketNotify

; 175  :             return true;

  0004b	b0 01		 mov	 al, 1
  0004d	eb 30		 jmp	 SHORT $LN1@OnEventThr
$LN6@OnEventThr:

; 176  :         }
; 177  :         case WM_SERVICE_REQUEST:	// 服务请求
; 178  :         {
; 179  :             OnServiceRequest(Message.wParam, Message.lParam);

  0004f	8b 4d e8	 mov	 ecx, DWORD PTR _Message$[ebp+12]
  00052	51		 push	 ecx
  00053	8b 55 e4	 mov	 edx, DWORD PTR _Message$[ebp+8]
  00056	52		 push	 edx
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?OnServiceRequest@CTCPSocketServiceThread@@AAEJIJ@Z ; CTCPSocketServiceThread::OnServiceRequest

; 180  :             return true;

  0005f	b0 01		 mov	 al, 1
  00061	eb 1c		 jmp	 SHORT $LN1@OnEventThr
$LN7@OnEventThr:

; 181  :         }
; 182  :         default:					// 默认处理
; 183  :         {
; 184  :             DefWindowProc(Message.hwnd, Message.message, Message.wParam, Message.lParam);

  00063	8b 45 e8	 mov	 eax, DWORD PTR _Message$[ebp+12]
  00066	50		 push	 eax
  00067	8b 4d e4	 mov	 ecx, DWORD PTR _Message$[ebp+8]
  0006a	51		 push	 ecx
  0006b	8b 55 e0	 mov	 edx, DWORD PTR _Message$[ebp+4]
  0006e	52		 push	 edx
  0006f	8b 45 dc	 mov	 eax, DWORD PTR _Message$[ebp]
  00072	50		 push	 eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16

; 185  :             return true;

  00079	b0 01		 mov	 al, 1
  0007b	eb 02		 jmp	 SHORT $LN1@OnEventThr

; 186  :         }
; 187  :     }
; 188  : 
; 189  :     return false;

  0007d	32 c0		 xor	 al, al
$LN1@OnEventThr:

; 190  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?OnEventThreadRun@CTCPSocketServiceThread@@UAE_NXZ ENDP	; CTCPSocketServiceThread::OnEventThreadRun
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ??1CTCPSocketServiceThread@@UAE@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CTCPSocketServiceThread@@UAE@XZ PROC			; CTCPSocketServiceThread::~CTCPSocketServiceThread, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTCPSocketServiceThread@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 08	 sub	 esp, 8
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CTCPSocketServiceThread@@6B@
  00038	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2

; 80   :     // 关闭连接
; 81   :     if (m_hSocket != INVALID_SOCKET)

  0003f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 79 14 ff	 cmp	 DWORD PTR [ecx+20], -1
  00046	74 17		 je	 SHORT $LN2@CTCPSocket

; 82   :     {
; 83   :         closesocket(m_hSocket);

  00048	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 84   :         m_hSocket = INVALID_SOCKET;

  00055	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
$LN2@CTCPSocket:

; 85   :     }
; 86   : 
; 87   :     // 删除缓冲
; 88   :     SafeDeleteArray(m_pcbDataBuffer);

  0005f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00063	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 82 6c 80 02
	00		 mov	 eax, DWORD PTR [edx+163948]
  0006c	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  0006f	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00078	83 c4 04	 add	 esp, 4
  0007b	eb 1b		 jmp	 SHORT $LN6@CTCPSocket
__catch$??1CTCPSocketServiceThread@@UAE@XZ$0:
  0007d	33 d2		 xor	 edx, edx
  0007f	75 11		 jne	 SHORT $LN5@CTCPSocket
  00081	6a 58		 push	 88			; 00000058H
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OMLOGCA@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00088	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008d	85 c0		 test	 eax, eax
  0008f	74 01		 je	 SHORT $LN5@CTCPSocket
  00091	cc		 int	 3
$LN5@CTCPSocket:
  00092	b8 00 00 00 00	 mov	 eax, $LN12@CTCPSocket
  00097	c3		 ret	 0
$LN6@CTCPSocket:
  00098	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0009f	eb 07		 jmp	 SHORT __tryend$??1CTCPSocketServiceThread@@UAE@XZ$1
$LN12@CTCPSocket:
  000a1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
__tryend$??1CTCPSocketServiceThread@@UAE@XZ$1:
  000a8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	c7 81 6c 80 02
	00 00 00 00 00	 mov	 DWORD PTR [ecx+163948], 0

; 89   : 
; 90   :     return;
; 91   : }

  000b5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000b9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	83 c1 3c	 add	 ecx, 60			; 0000003cH
  000bf	e8 00 00 00 00	 call	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
  000c4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataQueue@@UAE@XZ
  000d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHThread@@MAE@XZ
  000e4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ee	59		 pop	 ecx
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CTCPSocketServiceThread@@UAE@XZ$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHThread@@MAE@XZ
__unwindfunclet$??1CTCPSocketServiceThread@@UAE@XZ$3:
  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataQueue@@UAE@XZ
__unwindfunclet$??1CTCPSocketServiceThread@@UAE@XZ$4:
  00015	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001b	e9 00 00 00 00	 jmp	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
__ehhandler$??1CTCPSocketServiceThread@@UAE@XZ:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTCPSocketServiceThread@@UAE@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTCPSocketServiceThread@@UAE@XZ ENDP			; CTCPSocketServiceThread::~CTCPSocketServiceThread
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ??0CTCPSocketServiceThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTCPSocketServiceThread@@QAE@XZ PROC			; CTCPSocketServiceThread::CTCPSocketServiceThread, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTCPSocketServiceThread@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHThread@@IAE@XZ
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CTCPSocketServiceThread@@6B@
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataQueue@@QAE@XZ
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00055	e8 00 00 00 00	 call	 ??0CCriticalSection@@QAE@XZ ; CCriticalSection::CCriticalSection

; 47   :     // 内核变量
; 48   :     m_hWnd = NULL;

  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 49   :     m_hSocket = INVALID_SOCKET;

  00064	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00067	c7 42 14 ff ff
	ff ff		 mov	 DWORD PTR [edx+20], -1

; 50   :     m_TCPSocketStatus = SOCKET_STATUS_IDLE;

  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	c6 40 18 00	 mov	 BYTE PTR [eax+24], 0

; 51   : 
; 52   :     // 接收变量
; 53   :     m_wRecvSize = 0;

  00075	33 c9		 xor	 ecx, ecx
  00077	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	66 89 4a 60	 mov	 WORD PTR [edx+96], cx

; 54   :     ZeroMemory(m_cbRecvBuf, sizeof(m_cbRecvBuf));

  0007e	68 00 80 02 00	 push	 163840			; 00028000H
  00083	6a 00		 push	 0
  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	83 c0 62	 add	 eax, 98			; 00000062H
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _memset
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :     // 缓冲变量
; 57   :     m_dwBufferData = 0L;

  00094	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	c7 81 64 80 02
	00 00 00 00 00	 mov	 DWORD PTR [ecx+163940], 0

; 58   :     m_dwBufferSize = 0L;

  000a1	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000a4	c7 82 68 80 02
	00 00 00 00 00	 mov	 DWORD PTR [edx+163944], 0

; 59   :     m_bNeedBuffer = false;

  000ae	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	c6 80 62 80 02
	00 00		 mov	 BYTE PTR [eax+163938], 0

; 60   :     m_pcbDataBuffer = NULL;

  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	c7 81 6c 80 02
	00 00 00 00 00	 mov	 DWORD PTR [ecx+163948], 0

; 61   : 
; 62   :     // 加密数据
; 63   :     m_cbSendRound = 0;

  000c5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c8	c6 82 70 80 02
	00 00		 mov	 BYTE PTR [edx+163952], 0

; 64   :     m_cbRecvRound = 0;

  000cf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	c6 80 71 80 02
	00 00		 mov	 BYTE PTR [eax+163953], 0

; 65   :     m_dwSendXorKey = 0;

  000d9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	c7 81 74 80 02
	00 00 00 00 00	 mov	 DWORD PTR [ecx+163956], 0

; 66   :     m_dwRecvXorKey = 0;

  000e6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	c7 82 78 80 02
	00 00 00 00 00	 mov	 DWORD PTR [edx+163960], 0

; 67   : 
; 68   :     // 计数变量
; 69   :     m_dwSendTickCount = 0;

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	c7 80 7c 80 02
	00 00 00 00 00	 mov	 DWORD PTR [eax+163964], 0

; 70   :     m_dwRecvTickCount = 0;

  00100	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	c7 81 80 80 02
	00 00 00 00 00	 mov	 DWORD PTR [ecx+163968], 0

; 71   :     m_dwSendPacketCount = 0;

  0010d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00110	c7 82 84 80 02
	00 00 00 00 00	 mov	 DWORD PTR [edx+163972], 0

; 72   :     m_dwRecvPacketCount = 0;

  0011a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	c7 80 88 80 02
	00 00 00 00 00	 mov	 DWORD PTR [eax+163976], 0

; 73   : 
; 74   :     return;
; 75   : }

  00127	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00131	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00134	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013b	59		 pop	 ecx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTCPSocketServiceThread@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHThread@@MAE@XZ
__unwindfunclet$??0CTCPSocketServiceThread@@QAE@XZ$1:
  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataQueue@@UAE@XZ
__ehhandler$??0CTCPSocketServiceThread@@QAE@XZ:
  00015	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00019	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTCPSocketServiceThread@@QAE@XZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTCPSocketServiceThread@@QAE@XZ ENDP			; CTCPSocketServiceThread::CTCPSocketServiceThread
; Function compile flags: /Odtp
;	COMDAT ??0ITCPSocketService@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITCPSocketService@@QAE@XZ PROC			; ITCPSocketService::ITCPSocketService, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IServiceModule@@6B@
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ITCPSocketService@@6B@
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0ITCPSocketService@@QAE@XZ ENDP			; ITCPSocketService::ITCPSocketService
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0IServiceModule@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServiceModule@@QAE@XZ PROC				; IServiceModule::IServiceModule, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IServiceModule@@6B@
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0IServiceModule@@QAE@XZ ENDP				; IServiceModule::IServiceModule
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwVersion$ = -40					; size = 4
_dwVersion$ = -36					; size = 4
_dwVersion$ = -32					; size = 4
_dwVersion$ = -28					; size = 4
_dwVersion$ = -24					; size = 4
_dwVersion$ = -20					; size = 4
_dwVersion$ = -16					; size = 4
_dwVersion$ = -12					; size = 4
$T1 = -8						; size = 1
$T2 = -7						; size = 1
$T3 = -6						; size = 1
$T4 = -5						; size = 1
$T5 = -4						; size = 1
$T6 = -3						; size = 1
$T7 = -2						; size = 1
$T8 = -1						; size = 1
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00006	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 57   : 	return ((BYTE *)&dwVersion)[1];

  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	c1 e1 00	 shl	 ecx, 0
  00014	8a 54 0d f4	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  00018	88 55 ff	 mov	 BYTE PTR $T8[ebp], dl

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00021	b9 01 00 00 00	 mov	 ecx, 1
  00026	c1 e1 00	 shl	 ecx, 0
  00029	8a 54 0d f0	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  0002d	88 55 fe	 mov	 BYTE PTR $T7[ebp], dl

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00030	0f b6 45 ff	 movzx	 eax, BYTE PTR $T8[ebp]
  00034	0f b6 4d fe	 movzx	 ecx, BYTE PTR $T7[ebp]
  00038	3b c1		 cmp	 eax, ecx
  0003a	7e 07		 jle	 SHORT $LN2@InterfaceV
  0003c	32 c0		 xor	 al, al
  0003e	e9 ae 00 00 00	 jmp	 $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  00043	8b 55 08	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  00046	89 55 ec	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	d1 e0		 shl	 eax, 1
  00050	8a 4c 05 ec	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  00054	88 4d fd	 mov	 BYTE PTR $T6[ebp], cl

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  00057	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  0005a	89 55 e8	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 51   : 	return ((BYTE *)&dwVersion)[2];

  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	d1 e0		 shl	 eax, 1
  00064	8a 4c 05 e8	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  00068	88 4d fc	 mov	 BYTE PTR $T5[ebp], cl

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0006b	0f b6 55 fd	 movzx	 edx, BYTE PTR $T6[ebp]
  0006f	0f b6 45 fc	 movzx	 eax, BYTE PTR $T5[ebp]
  00073	3b d0		 cmp	 edx, eax
  00075	74 04		 je	 SHORT $LN3@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 76		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _dwQueryVer$[ebp]
  0007e	89 4d e4	 mov	 DWORD PTR _dwVersion$[ebp], ecx

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00081	ba 01 00 00 00	 mov	 edx, 1
  00086	6b c2 00	 imul	 eax, edx, 0
  00089	8a 4c 05 e4	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  0008d	88 4d fb	 mov	 BYTE PTR $T4[ebp], cl

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00090	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  00093	89 55 e0	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	6b c8 00	 imul	 ecx, eax, 0
  0009e	8a 54 0d e0	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  000a2	88 55 fa	 mov	 BYTE PTR $T3[ebp], dl

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  000a5	0f b6 45 fb	 movzx	 eax, BYTE PTR $T4[ebp]
  000a9	0f b6 4d fa	 movzx	 ecx, BYTE PTR $T3[ebp]
  000ad	3b c1		 cmp	 eax, ecx
  000af	74 04		 je	 SHORT $LN4@InterfaceV
  000b1	32 c0		 xor	 al, al
  000b3	eb 3c		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000b5	8b 55 08	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  000b8	89 55 dc	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 45   : 	return ((BYTE *)&dwVersion)[3];

  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	6b c8 03	 imul	 ecx, eax, 3
  000c3	8a 54 0d dc	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  000c7	88 55 f9	 mov	 BYTE PTR $T2[ebp], dl

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000ca	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  000cd	89 45 d8	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 45   : 	return ((BYTE *)&dwVersion)[3];

  000d0	b9 01 00 00 00	 mov	 ecx, 1
  000d5	6b d1 03	 imul	 edx, ecx, 3
  000d8	8a 44 15 d8	 mov	 al, BYTE PTR _dwVersion$[ebp+edx]
  000dc	88 45 f8	 mov	 BYTE PTR $T1[ebp], al

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000df	0f b6 4d f9	 movzx	 ecx, BYTE PTR $T2[ebp]
  000e3	0f b6 55 f8	 movzx	 edx, BYTE PTR $T1[ebp]
  000e7	3b ca		 cmp	 ecx, edx
  000e9	74 04		 je	 SHORT $LN5@InterfaceV
  000eb	32 c0		 xor	 al, al
  000ed	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000ef	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	6b c8 00	 imul	 ecx, eax, 0
  0000b	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	c1 e0 00	 shl	 eax, 0
  0000b	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	d1 e0		 shl	 eax, 1
  0000a	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	6b c8 03	 imul	 ecx, eax, 3
  0000b	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
tv66 = -24						; size = 4
tv86 = -20						; size = 4
__Count$ = -16						; size = 4
__Ptrdest$ = -12					; size = 4
tv79 = -8						; size = 4
tv89 = -2						; size = 2
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0000f	83 c1 02	 add	 ecx, 2
  00012	89 4d ec	 mov	 DWORD PTR tv86[ebp], ecx
$LL6@Maklocwcs:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv79[ebp]
  00018	66 8b 02	 mov	 ax, WORD PTR [edx]
  0001b	66 89 45 fe	 mov	 WORD PTR tv89[ebp], ax
  0001f	83 45 f8 02	 add	 DWORD PTR tv79[ebp], 2
  00023	66 83 7d fe 00	 cmp	 WORD PTR tv89[ebp], 0
  00028	75 eb		 jne	 SHORT $LL6@Maklocwcs
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0002d	2b 4d ec	 sub	 ecx, DWORD PTR tv86[ebp]
  00030	d1 f9		 sar	 ecx, 1
  00032	89 4d e8	 mov	 DWORD PTR tv66[ebp], ecx
  00035	8b 55 e8	 mov	 edx, DWORD PTR tv66[ebp]
  00038	83 c2 01	 add	 edx, 1
  0003b	89 55 f0	 mov	 DWORD PTR __Count$[ebp], edx

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0003e	6a 65		 push	 101			; 00000065H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00045	6a 02		 push	 2
  00047	6a 02		 push	 2
  00049	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	89 45 f4	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  00059	83 7d f4 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005d	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  0005f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00064	8b 4d f0	 mov	 ecx, DWORD PTR __Count$[ebp]
  00067	d1 e1		 shl	 ecx, 1
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _memcpy
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum

; 106  : 	return (_Ptrdest);

  0007a	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -64						; size = 8
__Mbst1$ = -56						; size = 8
tv69 = -48						; size = 4
tv146 = -44						; size = 4
__Count1$ = -40						; size = 4
__Ptrdest$ = -36					; size = 4
__Ptr1$ = -32						; size = 4
__Ptrnext$ = -28					; size = 4
tv143 = -24						; size = 4
__Count$ = -20						; size = 4
__Bytes$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Wc$ = -8						; size = 2
tv149 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00006	33 c0		 xor	 eax, eax
  00008	89 45 c8	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000b	89 45 cc	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00011	89 4d e8	 mov	 DWORD PTR tv143[ebp], ecx
  00014	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00017	83 c2 01	 add	 edx, 1
  0001a	89 55 d4	 mov	 DWORD PTR tv146[ebp], edx
$LL12@Maklocstr:
  0001d	8b 45 e8	 mov	 eax, DWORD PTR tv143[ebp]
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	88 4d ff	 mov	 BYTE PTR tv149[ebp], cl
  00025	83 45 e8 01	 add	 DWORD PTR tv143[ebp], 1
  00029	80 7d ff 00	 cmp	 BYTE PTR tv149[ebp], 0
  0002d	75 ee		 jne	 SHORT $LL12@Maklocstr
  0002f	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00032	2b 55 d4	 sub	 edx, DWORD PTR tv146[ebp]
  00035	89 55 d0	 mov	 DWORD PTR tv69[ebp], edx
  00038	8b 45 d0	 mov	 eax, DWORD PTR tv69[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 d8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00041	8b 4d d8	 mov	 ecx, DWORD PTR __Count1$[ebp]
  00044	89 4d ec	 mov	 DWORD PTR __Count$[ebp], ecx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  0004e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00051	89 55 e0	 mov	 DWORD PTR __Ptr1$[ebp], edx
  00054	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  00059	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0005c	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  0005f	8b 4d e0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00062	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00065	89 4d e0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00068	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0006b	83 c2 01	 add	 edx, 1
  0006e	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00071	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00075	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00077	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d c8	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 ec	 mov	 edx, DWORD PTR __Count$[ebp]
  00082	52		 push	 edx
  00083	8b 45 e0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00086	50		 push	 eax
  00087	8d 4d f8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 __Mbrtowc
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  00096	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0009a	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0009c	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  0009e	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  000a0	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000a3	83 c2 01	 add	 edx, 1
  000a6	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  000a9	68 ba 02 00 00	 push	 698			; 000002baH
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b3	6a 02		 push	 2
  000b5	6a 02		 push	 2
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000ba	50		 push	 eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000c7	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000cb	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000cd	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000d2	8b 4d dc	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  000d5	89 4d e4	 mov	 DWORD PTR __Ptrnext$[ebp], ecx

; 703  : 	mbstate_t _Mbst2 = {};

  000d8	33 d2		 xor	 edx, edx
  000da	89 55 c0	 mov	 DWORD PTR __Mbst2$[ebp], edx
  000dd	89 55 c4	 mov	 DWORD PTR __Mbst2$[ebp+4], edx

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e0	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000e2	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  000e5	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000e8	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000ee	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000f1	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000f4	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000f7	83 ea 01	 sub	 edx, 1
  000fa	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000fd	8b 45 e4	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  00100	83 c0 02	 add	 eax, 2
  00103	89 45 e4	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  00106	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  0010a	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  0010c	8b 4d 10	 mov	 ecx, DWORD PTR __Cvt$[ebp]
  0010f	51		 push	 ecx
  00110	8d 55 c0	 lea	 edx, DWORD PTR __Mbst2$[ebp]
  00113	52		 push	 edx
  00114	8b 45 d8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 e4	 mov	 edx, DWORD PTR __Ptrnext$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 __Mbrtowc
  00125	83 c4 14	 add	 esp, 20			; 00000014H
  00128	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  0012b	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0012f	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00131	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00133	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00135	33 c0		 xor	 eax, eax
  00137	8b 4d e4	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0013a	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memcpy
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_msg$ = -36						; size = 28
_bResult$ = -8						; size = 4
_bQuit$ = -4						; size = 4
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00006	6a 01		 push	 1
  00008	6a 12		 push	 18			; 00000012H
  0000a	6a 12		 push	 18			; 00000012H
  0000c	6a 00		 push	 0
  0000e	8d 45 dc	 lea	 eax, DWORD PTR _msg$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  00018	89 45 fc	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00026	52		 push	 edx
  00027	6a 02		 push	 2
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00035	83 7d fc 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  00039	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003b	8b 45 e4	 mov	 eax, DWORD PTR _msg$[ebp+8]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00045	8b 45 f8	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv74 = -12						; size = 4
tv68 = -8						; size = 4
tv76 = -4						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _memcmp
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	89 45 f4	 mov	 DWORD PTR tv74[ebp], eax
  0001b	83 7d f4 00	 cmp	 DWORD PTR tv74[ebp], 0
  0001f	75 09		 jne	 SHORT $LN7@
  00021	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN5@
$LN7@:
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN5@:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00031	83 7d fc 00	 cmp	 DWORD PTR tv76[ebp], 0
  00035	74 09		 je	 SHORT $LN3@
  00037	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0003e	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  00047	8a 45 f8	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv68 = -8						; size = 4
tv70 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _memcmp
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  0001b	83 7d f8 00	 cmp	 DWORD PTR tv68[ebp], 0
  0001f	75 09		 jne	 SHORT $LN3@IsEqualGUI
  00021	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@IsEqualGUI:
  00031	8b 45 fc	 mov	 eax, DWORD PTR tv70[ebp]

; 162  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\tcpsocketservice.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00013	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00017	76 11		 jbe	 SHORT $LN1@vector
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001c	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00022	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00025	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00028	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
