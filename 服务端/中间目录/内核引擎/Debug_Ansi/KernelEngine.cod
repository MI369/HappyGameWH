; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\内核引擎\KernelEngine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__afxForceEXTDLL
PUBLIC	_ExtRawDllMain@12
PUBLIC	__pRawDllMain
_BSS	SEGMENT
__afxForceEXTDLL DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
__pRawDllMain DD FLAT:_ExtRawDllMain@12
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	_DllMain@12
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	__imp__WSACleanup@0:PROC
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	??2CObject@@SGPAXI@Z:PROC			; CObject::operator new
EXTRN	?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:PROC ; AfxGetModuleState
EXTRN	??0CDynLinkLibrary@@QAE@AAUAFX_EXTENSION_MODULE@@H@Z:PROC ; CDynLinkLibrary::CDynLinkLibrary
EXTRN	?AfxInitExtensionModule@@YGHAAUAFX_EXTENSION_MODULE@@PAUHINSTANCE__@@@Z:PROC ; AfxInitExtensionModule
EXTRN	?AfxTermExtensionModule@@YGXAAUAFX_EXTENSION_MODULE@@H@Z:PROC ; AfxTermExtensionModule
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?KernelEngineDLL@@3UAFX_EXTENSION_MODULE@@A DB 014H DUP (?) ; KernelEngineDLL
_BSS	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
tv66 = -28						; size = 4
tv86 = -24						; size = 4
__Ptrdest$ = -20					; size = 4
__Ptrnext$1 = -16					; size = 4
__Count$ = -12						; size = 4
tv83 = -8						; size = 4
tv89 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0000f	83 c1 01	 add	 ecx, 1
  00012	89 4d e8	 mov	 DWORD PTR tv86[ebp], ecx
$LL7@Maklocstr:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv83[ebp]
  00018	8a 02		 mov	 al, BYTE PTR [edx]
  0001a	88 45 ff	 mov	 BYTE PTR tv89[ebp], al
  0001d	83 45 f8 01	 add	 DWORD PTR tv83[ebp], 1
  00021	80 7d ff 00	 cmp	 BYTE PTR tv89[ebp], 0
  00025	75 ee		 jne	 SHORT $LL7@Maklocstr
  00027	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0002a	2b 4d e8	 sub	 ecx, DWORD PTR tv86[ebp]
  0002d	89 4d e4	 mov	 DWORD PTR tv66[ebp], ecx
  00030	8b 55 e4	 mov	 edx, DWORD PTR tv66[ebp]
  00033	83 c2 01	 add	 edx, 1
  00036	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  00039	68 9c 02 00 00	 push	 668			; 0000029cH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00043	6a 02		 push	 2
  00045	6a 01		 push	 1
  00047	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00051	83 c4 14	 add	 esp, 20			; 00000014H
  00054	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00057	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005b	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0005d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00062	8b 4d ec	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  00065	89 4d f0	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00068	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0006a	8b 55 f4	 mov	 edx, DWORD PTR __Count$[ebp]
  0006d	83 ea 01	 sub	 edx, 1
  00070	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx
  00073	8b 45 f0	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00076	83 c0 01	 add	 eax, 1
  00079	89 45 f0	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0007f	83 c1 01	 add	 ecx, 1
  00082	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
$LN4@Maklocstr:
  00085	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00089	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0008b	8b 55 f0	 mov	 edx, DWORD PTR __Ptrnext$1[ebp]
  0008e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	88 0a		 mov	 BYTE PTR [edx], cl
  00095	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00097	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\kernelengine.cpp
;	COMDAT _DllMain@12
_TEXT	SEGMENT
$T1 = -416						; size = 4
tv81 = -412						; size = 4
$T2 = -408						; size = 4
_WSAData$3 = -404					; size = 400
__$ArrayPad$ = -4					; size = 4
_hInstance$ = 8						; size = 4
_dwReason$ = 12						; size = 4
_lpReserved$ = 16					; size = 4
_DllMain@12 PROC					; COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 01 00
	00		 sub	 esp, 416		; 000001a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 13   :     if (dwReason == DLL_PROCESS_ATTACH)

  00013	83 7d 0c 01	 cmp	 DWORD PTR _dwReason$[ebp], 1
  00017	0f 85 83 00 00
	00		 jne	 $LN2@DllMain

; 14   :     {
; 15   :         if (!AfxInitExtensionModule(KernelEngineDLL, hInstance))

  0001d	8b 45 08	 mov	 eax, DWORD PTR _hInstance$[ebp]
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ?KernelEngineDLL@@3UAFX_EXTENSION_MODULE@@A
  00026	e8 00 00 00 00	 call	 ?AfxInitExtensionModule@@YGHAAUAFX_EXTENSION_MODULE@@PAUHINSTANCE__@@@Z ; AfxInitExtensionModule
  0002b	85 c0		 test	 eax, eax
  0002d	75 07		 jne	 SHORT $LN4@DllMain

; 16   :             return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 ab 00 00 00	 jmp	 $LN1@DllMain
$LN4@DllMain:

; 17   :         new CDynLinkLibrary(KernelEngineDLL);

  00036	6a 40		 push	 64			; 00000040H
  00038	e8 00 00 00 00	 call	 ??2CObject@@SGPAXI@Z	; CObject::operator new
  0003d	89 85 68 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00043	83 bd 68 fe ff
	ff 00		 cmp	 DWORD PTR $T2[ebp], 0
  0004a	74 1a		 je	 SHORT $LN12@DllMain
  0004c	6a 00		 push	 0
  0004e	68 00 00 00 00	 push	 OFFSET ?KernelEngineDLL@@3UAFX_EXTENSION_MODULE@@A
  00053	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00059	e8 00 00 00 00	 call	 ??0CDynLinkLibrary@@QAE@AAUAFX_EXTENSION_MODULE@@H@Z ; CDynLinkLibrary::CDynLinkLibrary
  0005e	89 85 64 fe ff
	ff		 mov	 DWORD PTR tv81[ebp], eax
  00064	eb 0a		 jmp	 SHORT $LN13@DllMain
$LN12@DllMain:
  00066	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN13@DllMain:
  00070	8b 8d 64 fe ff
	ff		 mov	 ecx, DWORD PTR tv81[ebp]
  00076	89 8d 60 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx

; 18   : 
; 19   :         // 加载 COM
; 20   :         CoInitialize(NULL);

  0007c	6a 00		 push	 0
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4

; 21   : 
; 22   :         // 加载网络
; 23   :         WSADATA WSAData;
; 24   :         if (WSAStartup(MAKEWORD(2, 2), &WSAData) != 0)

  00084	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _WSAData$3[ebp]
  0008a	52		 push	 edx
  0008b	68 02 02 00 00	 push	 514			; 00000202H
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8
  00096	85 c0		 test	 eax, eax
  00098	74 04		 je	 SHORT $LN5@DllMain

; 25   :             return FALSE;

  0009a	33 c0		 xor	 eax, eax
  0009c	eb 43		 jmp	 SHORT $LN1@DllMain
$LN5@DllMain:

; 26   :     }

  0009e	eb 3c		 jmp	 SHORT $LN3@DllMain
$LN2@DllMain:

; 27   :     else if (dwReason == DLL_THREAD_ATTACH)

  000a0	83 7d 0c 02	 cmp	 DWORD PTR _dwReason$[ebp], 2
  000a4	75 0a		 jne	 SHORT $LN6@DllMain

; 28   :     {
; 29   :         // 加载 COM
; 30   :         CoInitialize(NULL);

  000a6	6a 00		 push	 0
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4
  000ae	eb 2c		 jmp	 SHORT $LN3@DllMain
$LN6@DllMain:

; 31   :     }
; 32   :     else if (dwReason == DLL_THREAD_DETACH)

  000b0	83 7d 0c 03	 cmp	 DWORD PTR _dwReason$[ebp], 3
  000b4	75 08		 jne	 SHORT $LN8@DllMain

; 33   :     {
; 34   :         // 释放 COM
; 35   :         CoUninitialize();

  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0
  000bc	eb 1e		 jmp	 SHORT $LN3@DllMain
$LN8@DllMain:

; 36   :     }
; 37   :     else if (dwReason == DLL_PROCESS_DETACH)

  000be	83 7d 0c 00	 cmp	 DWORD PTR _dwReason$[ebp], 0
  000c2	75 18		 jne	 SHORT $LN3@DllMain

; 38   :     {
; 39   :         // 释放网络
; 40   :         WSACleanup();

  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0

; 41   : 
; 42   :         // 释放 COM
; 43   :         CoUninitialize();

  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0

; 44   : 
; 45   :         AfxTermExtensionModule(KernelEngineDLL);

  000d0	6a 00		 push	 0
  000d2	68 00 00 00 00	 push	 OFFSET ?KernelEngineDLL@@3UAFX_EXTENSION_MODULE@@A
  000d7	e8 00 00 00 00	 call	 ?AfxTermExtensionModule@@YGXAAUAFX_EXTENSION_MODULE@@H@Z ; AfxTermExtensionModule
$LN3@DllMain:

; 46   :     }
; 47   : 
; 48   :     return 1;

  000dc	b8 01 00 00 00	 mov	 eax, 1
$LN1@DllMain:

; 49   : }

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 0c 00	 ret	 12			; 0000000cH
_DllMain@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
tv66 = -24						; size = 4
tv86 = -20						; size = 4
__Count$ = -16						; size = 4
__Ptrdest$ = -12					; size = 4
tv79 = -8						; size = 4
tv89 = -2						; size = 2
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0000f	83 c1 02	 add	 ecx, 2
  00012	89 4d ec	 mov	 DWORD PTR tv86[ebp], ecx
$LL6@Maklocwcs:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv79[ebp]
  00018	66 8b 02	 mov	 ax, WORD PTR [edx]
  0001b	66 89 45 fe	 mov	 WORD PTR tv89[ebp], ax
  0001f	83 45 f8 02	 add	 DWORD PTR tv79[ebp], 2
  00023	66 83 7d fe 00	 cmp	 WORD PTR tv89[ebp], 0
  00028	75 eb		 jne	 SHORT $LL6@Maklocwcs
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0002d	2b 4d ec	 sub	 ecx, DWORD PTR tv86[ebp]
  00030	d1 f9		 sar	 ecx, 1
  00032	89 4d e8	 mov	 DWORD PTR tv66[ebp], ecx
  00035	8b 55 e8	 mov	 edx, DWORD PTR tv66[ebp]
  00038	83 c2 01	 add	 edx, 1
  0003b	89 55 f0	 mov	 DWORD PTR __Count$[ebp], edx

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0003e	6a 65		 push	 101			; 00000065H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00045	6a 02		 push	 2
  00047	6a 02		 push	 2
  00049	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	89 45 f4	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  00059	83 7d f4 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005d	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  0005f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00064	8b 4d f0	 mov	 ecx, DWORD PTR __Count$[ebp]
  00067	d1 e1		 shl	 ecx, 1
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _memcpy
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum

; 106  : 	return (_Ptrdest);

  0007a	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -64						; size = 8
__Mbst1$ = -56						; size = 8
tv69 = -48						; size = 4
tv146 = -44						; size = 4
__Count1$ = -40						; size = 4
__Ptrdest$ = -36					; size = 4
__Ptr1$ = -32						; size = 4
__Ptrnext$ = -28					; size = 4
tv143 = -24						; size = 4
__Count$ = -20						; size = 4
__Bytes$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Wc$ = -8						; size = 2
tv149 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00006	33 c0		 xor	 eax, eax
  00008	89 45 c8	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000b	89 45 cc	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00011	89 4d e8	 mov	 DWORD PTR tv143[ebp], ecx
  00014	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00017	83 c2 01	 add	 edx, 1
  0001a	89 55 d4	 mov	 DWORD PTR tv146[ebp], edx
$LL12@Maklocstr:
  0001d	8b 45 e8	 mov	 eax, DWORD PTR tv143[ebp]
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	88 4d ff	 mov	 BYTE PTR tv149[ebp], cl
  00025	83 45 e8 01	 add	 DWORD PTR tv143[ebp], 1
  00029	80 7d ff 00	 cmp	 BYTE PTR tv149[ebp], 0
  0002d	75 ee		 jne	 SHORT $LL12@Maklocstr
  0002f	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00032	2b 55 d4	 sub	 edx, DWORD PTR tv146[ebp]
  00035	89 55 d0	 mov	 DWORD PTR tv69[ebp], edx
  00038	8b 45 d0	 mov	 eax, DWORD PTR tv69[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 d8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00041	8b 4d d8	 mov	 ecx, DWORD PTR __Count1$[ebp]
  00044	89 4d ec	 mov	 DWORD PTR __Count$[ebp], ecx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  0004e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00051	89 55 e0	 mov	 DWORD PTR __Ptr1$[ebp], edx
  00054	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  00059	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0005c	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  0005f	8b 4d e0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00062	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00065	89 4d e0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00068	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0006b	83 c2 01	 add	 edx, 1
  0006e	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00071	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00075	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00077	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d c8	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 ec	 mov	 edx, DWORD PTR __Count$[ebp]
  00082	52		 push	 edx
  00083	8b 45 e0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00086	50		 push	 eax
  00087	8d 4d f8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 __Mbrtowc
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  00096	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0009a	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0009c	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  0009e	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  000a0	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000a3	83 c2 01	 add	 edx, 1
  000a6	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  000a9	68 ba 02 00 00	 push	 698			; 000002baH
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b3	6a 02		 push	 2
  000b5	6a 02		 push	 2
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000ba	50		 push	 eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000c7	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000cb	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000cd	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000d2	8b 4d dc	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  000d5	89 4d e4	 mov	 DWORD PTR __Ptrnext$[ebp], ecx

; 703  : 	mbstate_t _Mbst2 = {};

  000d8	33 d2		 xor	 edx, edx
  000da	89 55 c0	 mov	 DWORD PTR __Mbst2$[ebp], edx
  000dd	89 55 c4	 mov	 DWORD PTR __Mbst2$[ebp+4], edx

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e0	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000e2	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  000e5	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000e8	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000ee	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000f1	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000f4	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000f7	83 ea 01	 sub	 edx, 1
  000fa	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000fd	8b 45 e4	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  00100	83 c0 02	 add	 eax, 2
  00103	89 45 e4	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  00106	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  0010a	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  0010c	8b 4d 10	 mov	 ecx, DWORD PTR __Cvt$[ebp]
  0010f	51		 push	 ecx
  00110	8d 55 c0	 lea	 edx, DWORD PTR __Mbst2$[ebp]
  00113	52		 push	 edx
  00114	8b 45 d8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 e4	 mov	 edx, DWORD PTR __Ptrnext$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 __Mbrtowc
  00125	83 c4 14	 add	 esp, 20			; 00000014H
  00128	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  0012b	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0012f	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00131	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00133	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00135	33 c0		 xor	 eax, eax
  00137	8b 4d e4	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0013a	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxdllx.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtls_.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxdllx.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtls_.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxdllx.h
;	COMDAT _ExtRawDllMain@12
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_pModuleState$3 = -4					; size = 4
___formal$ = 8						; size = 4
_dwReason$ = 12						; size = 4
___formal$ = 16						; size = 4
_ExtRawDllMain@12 PROC					; COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 51   : 	if (dwReason == DLL_PROCESS_ATTACH)

  00006	83 7d 0c 01	 cmp	 DWORD PTR _dwReason$[ebp], 1
  0000a	75 40		 jne	 SHORT $LN2@ExtRawDllM

; 52   : 	{
; 53   : 		// save critical data pointers before running the constructors
; 54   : 		AFX_MODULE_STATE* pModuleState = AfxGetModuleState();

  0000c	e8 00 00 00 00	 call	 ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState
  00011	89 45 fc	 mov	 DWORD PTR _pModuleState$3[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtls_.h

; 74   : 	{ return m_pHead; }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pModuleState$3[ebp]
  00017	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001a	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxdllx.h

; 55   : 		pModuleState->m_pClassInit = pModuleState->m_classList;

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _pModuleState$3[ebp]
  00020	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00023	89 42 1c	 mov	 DWORD PTR [edx+28], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtls_.h

; 74   : 	{ return m_pHead; }

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _pModuleState$3[ebp]
  00029	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0002c	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxdllx.h

; 56   : 		pModuleState->m_pFactoryInit = pModuleState->m_factoryList;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _pModuleState$3[ebp]
  00032	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00035	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 57   : 		pModuleState->m_classList.m_pHead = NULL;

  00038	8b 55 fc	 mov	 edx, DWORD PTR _pModuleState$3[ebp]
  0003b	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 58   : 		pModuleState->m_factoryList.m_pHead = NULL;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _pModuleState$3[ebp]
  00045	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$LN2@ExtRawDllM:

; 59   : 	}
; 60   : 	return TRUE;    // ok

  0004c	b8 01 00 00 00	 mov	 eax, 1

; 61   : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
_ExtRawDllMain@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtls_.h
;	COMDAT ??B?$CTypedSimpleList@PAVCOleObjectFactory@@@@QAEPAVCOleObjectFactory@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??B?$CTypedSimpleList@PAVCOleObjectFactory@@@@QAEPAVCOleObjectFactory@@XZ PROC ; CTypedSimpleList<COleObjectFactory *>::operator COleObjectFactory *, COMDAT
; _this$ = ecx

; 96   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	{ return m_pHead; }

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx

; 97   : 	return (TYPE)CSimpleList::GetHead(); 

  00011	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 98   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CTypedSimpleList@PAVCOleObjectFactory@@@@QAEPAVCOleObjectFactory@@XZ ENDP ; CTypedSimpleList<COleObjectFactory *>::operator COleObjectFactory *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtls_.h
;	COMDAT ??B?$CTypedSimpleList@PAUCRuntimeClass@@@@QAEPAUCRuntimeClass@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??B?$CTypedSimpleList@PAUCRuntimeClass@@@@QAEPAUCRuntimeClass@@XZ PROC ; CTypedSimpleList<CRuntimeClass *>::operator CRuntimeClass *, COMDAT
; _this$ = ecx

; 96   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	{ return m_pHead; }

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx

; 97   : 	return (TYPE)CSimpleList::GetHead(); 

  00011	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 98   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CTypedSimpleList@PAUCRuntimeClass@@@@QAEPAUCRuntimeClass@@XZ ENDP ; CTypedSimpleList<CRuntimeClass *>::operator CRuntimeClass *
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtls_.h
;	COMDAT ?GetHead@CSimpleList@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHead@CSimpleList@@QBEPAXXZ PROC			; CSimpleList::GetHead, COMDAT
; _this$ = ecx

; 74   : 	{ return m_pHead; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetHead@CSimpleList@@QBEPAXXZ ENDP			; CSimpleList::GetHead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memcpy
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\kernelengine.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\kernelengine.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00013	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00017	76 11		 jbe	 SHORT $LN1@vector
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001c	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00022	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00025	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00028	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
