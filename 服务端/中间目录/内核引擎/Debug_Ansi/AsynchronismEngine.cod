; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\内核引擎\AsynchronismEngine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IServiceModule@@3U_GUID@@B DD 05980504H		; IID_IServiceModule
	DW	0a2f2H
	DW	04b0fH
	DB	09bH
	DB	054H
	DB	051H
	DB	054H
	DB	01eH
	DB	05H
	DB	05cH
	DB	0ffH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IAsynchronismEngineSink@@3U_GUID@@B DD 02edf5c9eH	; IID_IAsynchronismEngineSink
	DW	02cacH
	DW	0461dH
	DB	0a7H
	DB	082H
	DB	02eH
	DB	02fH
	DB	0e1H
	DB	091H
	DB	080H
	DB	0f8H
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0CAsynchronismThread@@QAE@XZ			; CAsynchronismThread::CAsynchronismThread
PUBLIC	??1CAsynchronismThread@@UAE@XZ			; CAsynchronismThread::~CAsynchronismThread
PUBLIC	?SetCompletionPort@CAsynchronismThread@@QAEXPAX@Z ; CAsynchronismThread::SetCompletionPort
PUBLIC	?SetAsynchronismEngineSink@CAsynchronismThread@@QAEXPAUIAsynchronismEngineSink@@@Z ; CAsynchronismThread::SetAsynchronismEngineSink
PUBLIC	?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ	; CAsynchronismThread::OnEventThreadRun
PUBLIC	?OnEventThreadStrat@CAsynchronismThread@@UAE_NXZ ; CAsynchronismThread::OnEventThreadStrat
PUBLIC	?OnEventThreadConclude@CAsynchronismThread@@UAE_NXZ ; CAsynchronismThread::OnEventThreadConclude
PUBLIC	??_GCAsynchronismThread@@UAEPAXI@Z		; CAsynchronismThread::`scalar deleting destructor'
PUBLIC	??0CAsynchronismEngine@@QAE@XZ			; CAsynchronismEngine::CAsynchronismEngine
PUBLIC	??1CAsynchronismEngine@@UAE@XZ			; CAsynchronismEngine::~CAsynchronismEngine
PUBLIC	?Release@CAsynchronismEngine@@UAEXXZ		; CAsynchronismEngine::Release
PUBLIC	?QueryInterface@CAsynchronismEngine@@UAEPAXABU_GUID@@K@Z ; CAsynchronismEngine::QueryInterface
PUBLIC	?StartService@CAsynchronismEngine@@UAE_NXZ	; CAsynchronismEngine::StartService
PUBLIC	?ConcludeService@CAsynchronismEngine@@UAE_NXZ	; CAsynchronismEngine::ConcludeService
PUBLIC	?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z ; CAsynchronismEngine::GetBurthenInfo
PUBLIC	?SetAsynchronismSink@CAsynchronismEngine@@UAE_NPAUIUnknownEx@@@Z ; CAsynchronismEngine::SetAsynchronismSink
PUBLIC	?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z ; CAsynchronismEngine::PostAsynchronismData
PUBLIC	?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z ; CAsynchronismEngine::PostAsynchronismData
PUBLIC	??_GCAsynchronismEngine@@UAEPAXI@Z		; CAsynchronismEngine::`scalar deleting destructor'
PUBLIC	_CreateAsynchronismEngine
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IServiceModule@@6B@				; IServiceModule::`vftable'
PUBLIC	??_7IAsynchronismEngine@@6B@			; IAsynchronismEngine::`vftable'
PUBLIC	??_7CAsynchronismThread@@6B@			; CAsynchronismThread::`vftable'
PUBLIC	??_7CAsynchronismEngine@@6B@			; CAsynchronismEngine::`vftable'
PUBLIC	??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_0EP@JNANJAED@CAsynchronismEngine?3?3OnAsynchro@ ; `string'
PUBLIC	??_C@_0ED@PNLFMBII@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?5P@ ; `string'
PUBLIC	??_C@_0BK@ELGLKPCO@PostAsynchronismData?5?R?l?$LD?$KD@ ; `string'
PUBLIC	__TI2PAD
PUBLIC	__CTA2PAD
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServiceModule@@6B@			; IServiceModule::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServiceModule@@@8			; IServiceModule `RTTI Type Descriptor'
PUBLIC	??_R3IServiceModule@@8				; IServiceModule::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServiceModule@@8				; IServiceModule::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServiceModule@@8			; IServiceModule::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IAsynchronismEngine@@6B@			; IAsynchronismEngine::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIAsynchronismEngine@@@8			; IAsynchronismEngine `RTTI Type Descriptor'
PUBLIC	??_R3IAsynchronismEngine@@8			; IAsynchronismEngine::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IAsynchronismEngine@@8			; IAsynchronismEngine::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IAsynchronismEngine@@8		; IAsynchronismEngine::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CAsynchronismEngine@@6B@			; CAsynchronismEngine::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAsynchronismEngine@@@8			; CAsynchronismEngine `RTTI Type Descriptor'
PUBLIC	??_R3CAsynchronismEngine@@8			; CAsynchronismEngine::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAsynchronismEngine@@8			; CAsynchronismEngine::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAsynchronismEngine@@8		; CAsynchronismEngine::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CAsynchronismThread@@6B@			; CAsynchronismThread::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAsynchronismThread@@@8			; CAsynchronismThread `RTTI Type Descriptor'
PUBLIC	??_R3CAsynchronismThread@@8			; CAsynchronismThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAsynchronismThread@@8			; CAsynchronismThread::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAsynchronismThread@@8		; CAsynchronismThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CWHThread@@8			; CWHThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWHThread@@@8				; CWHThread `RTTI Type Descriptor'
PUBLIC	??_R3CWHThread@@8				; CWHThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWHThread@@8				; CWHThread::`RTTI Base Class Array'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__CreateIoCompletionPort@16:PROC
EXTRN	__imp__GetQueuedCompletionStatus@20:PROC
EXTRN	__imp__PostQueuedCompletionStatus@16:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	??0CCriticalSection@@QAE@XZ:PROC		; CCriticalSection::CCriticalSection
EXTRN	??1CCriticalSection@@UAE@XZ:PROC		; CCriticalSection::~CCriticalSection
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_??0CWHThread@@IAE@XZ:PROC
EXTRN	__imp_??1CWHThread@@MAE@XZ:PROC
EXTRN	__imp_??0CWHDataQueue@@QAE@XZ:PROC
EXTRN	__imp_??1CWHDataQueue@@UAE@XZ:PROC
EXTRN	__imp_?GetBurthenInfo@CWHDataQueue@@QAEXAAUtagBurthenInfo@@@Z:PROC
EXTRN	__imp_?InsertData@CWHDataQueue@@QAE_NGPAXG@Z:PROC
EXTRN	__imp_?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z:PROC
EXTRN	__imp_?RemoveData@CWHDataQueue@@QAEX_N@Z:PROC
EXTRN	__imp_?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z:PROC
EXTRN	__imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z:PROC
EXTRN	__imp_??1CWHDataLocker@@UAE@XZ:PROC
EXTRN	__imp_?UnLock@CWHDataLocker@@QAEXXZ:PROC
EXTRN	??_ECAsynchronismThread@@UAEPAXI@Z:PROC		; CAsynchronismThread::`vector deleting destructor'
EXTRN	??_ECAsynchronismEngine@@UAEPAXI@Z:PROC		; CAsynchronismEngine::`vector deleting destructor'
EXTRN	?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z:PROC ; CTraceServiceManager::TraceString
EXTRN	?ConcludeThread@CWHThread@@UAE_NK@Z:PROC	; CWHThread::ConcludeThread
EXTRN	?IsRuning@CWHThread@@UAE_NXZ:PROC		; CWHThread::IsRuning
EXTRN	?StartThread@CWHThread@@UAE_NXZ:PROC		; CWHThread::StartThread
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_TraceServiceManager@@3VCTraceServiceManager@@A:BYTE ; g_TraceServiceManager
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R2CWHThread@@8
rdata$r	SEGMENT
??_R2CWHThread@@8 DD FLAT:??_R1A@?0A@EA@CWHThread@@8	; CWHThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWHThread@@8
rdata$r	SEGMENT
??_R3CWHThread@@8 DD 00H				; CWHThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWHThread@@@8
data$r	SEGMENT
??_R0?AVCWHThread@@@8 DD FLAT:??_7type_info@@6B@	; CWHThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWHThread@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWHThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWHThread@@8 DD FLAT:??_R0?AVCWHThread@@@8 ; CWHThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAsynchronismThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAsynchronismThread@@8 DD FLAT:??_R0?AVCAsynchronismThread@@@8 ; CAsynchronismThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAsynchronismThread@@8
rdata$r	ENDS
;	COMDAT ??_R2CAsynchronismThread@@8
rdata$r	SEGMENT
??_R2CAsynchronismThread@@8 DD FLAT:??_R1A@?0A@EA@CAsynchronismThread@@8 ; CAsynchronismThread::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWHThread@@8
rdata$r	ENDS
;	COMDAT ??_R3CAsynchronismThread@@8
rdata$r	SEGMENT
??_R3CAsynchronismThread@@8 DD 00H			; CAsynchronismThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CAsynchronismThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAsynchronismThread@@@8
data$r	SEGMENT
??_R0?AVCAsynchronismThread@@@8 DD FLAT:??_7type_info@@6B@ ; CAsynchronismThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAsynchronismThread@@', 00H
data$r	ENDS
;	COMDAT ??_R4CAsynchronismThread@@6B@
rdata$r	SEGMENT
??_R4CAsynchronismThread@@6B@ DD 00H			; CAsynchronismThread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAsynchronismThread@@@8
	DD	FLAT:??_R3CAsynchronismThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAsynchronismEngine@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAsynchronismEngine@@8 DD FLAT:??_R0?AVCAsynchronismEngine@@@8 ; CAsynchronismEngine::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAsynchronismEngine@@8
rdata$r	ENDS
;	COMDAT ??_R2CAsynchronismEngine@@8
rdata$r	SEGMENT
??_R2CAsynchronismEngine@@8 DD FLAT:??_R1A@?0A@EA@CAsynchronismEngine@@8 ; CAsynchronismEngine::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IAsynchronismEngine@@8
	DD	FLAT:??_R1A@?0A@EA@IServiceModule@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CAsynchronismEngine@@8
rdata$r	SEGMENT
??_R3CAsynchronismEngine@@8 DD 00H			; CAsynchronismEngine::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CAsynchronismEngine@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAsynchronismEngine@@@8
data$r	SEGMENT
??_R0?AVCAsynchronismEngine@@@8 DD FLAT:??_7type_info@@6B@ ; CAsynchronismEngine `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAsynchronismEngine@@', 00H
data$r	ENDS
;	COMDAT ??_R4CAsynchronismEngine@@6B@
rdata$r	SEGMENT
??_R4CAsynchronismEngine@@6B@ DD 00H			; CAsynchronismEngine::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAsynchronismEngine@@@8
	DD	FLAT:??_R3CAsynchronismEngine@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IAsynchronismEngine@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IAsynchronismEngine@@8 DD FLAT:??_R0?AUIAsynchronismEngine@@@8 ; IAsynchronismEngine::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IAsynchronismEngine@@8
rdata$r	ENDS
;	COMDAT ??_R2IAsynchronismEngine@@8
rdata$r	SEGMENT
??_R2IAsynchronismEngine@@8 DD FLAT:??_R1A@?0A@EA@IAsynchronismEngine@@8 ; IAsynchronismEngine::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IServiceModule@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IAsynchronismEngine@@8
rdata$r	SEGMENT
??_R3IAsynchronismEngine@@8 DD 00H			; IAsynchronismEngine::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IAsynchronismEngine@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIAsynchronismEngine@@@8
data$r	SEGMENT
??_R0?AUIAsynchronismEngine@@@8 DD FLAT:??_7type_info@@6B@ ; IAsynchronismEngine `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIAsynchronismEngine@@', 00H
data$r	ENDS
;	COMDAT ??_R4IAsynchronismEngine@@6B@
rdata$r	SEGMENT
??_R4IAsynchronismEngine@@6B@ DD 00H			; IAsynchronismEngine::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIAsynchronismEngine@@@8
	DD	FLAT:??_R3IAsynchronismEngine@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServiceModule@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServiceModule@@8 DD FLAT:??_R0?AUIServiceModule@@@8 ; IServiceModule::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R2IServiceModule@@8
rdata$r	SEGMENT
??_R2IServiceModule@@8 DD FLAT:??_R1A@?0A@EA@IServiceModule@@8 ; IServiceModule::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServiceModule@@8
rdata$r	SEGMENT
??_R3IServiceModule@@8 DD 00H				; IServiceModule::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServiceModule@@@8
data$r	SEGMENT
??_R0?AUIServiceModule@@@8 DD FLAT:??_7type_info@@6B@	; IServiceModule `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServiceModule@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServiceModule@@6B@
rdata$r	SEGMENT
??_R4IServiceModule@@6B@ DD 00H				; IServiceModule::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServiceModule@@@8
	DD	FLAT:??_R3IServiceModule@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@ DB 0bdH, 0d3H, 0bfH
	DB	0daH, 0b2H, 0e9H, 0d1H, 0afH, 0caH, 0a7H, 0b0H, 0dcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@ DB 0b4H, 0b4H, 0bdH, 0a8H
	DB	0caH, 0a7H, 0b0H, 0dcH, 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT ??_C@_0BK@ELGLKPCO@PostAsynchronismData?5?R?l?$LD?$KD@
CONST	SEGMENT
??_C@_0BK@ELGLKPCO@PostAsynchronismData?5?R?l?$LD?$KD@ DB 'PostAsynchroni'
	DB	'smData ', 0d2H, 0ecH, 0b3H, 0a3H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@PNLFMBII@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?5P@
CONST	SEGMENT
??_C@_0ED@PNLFMBII@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?5P@ DB '%'
	DB	'04d-%02d-%02d %02d:%02d:%02d PostAsynchronismData wIdentifier'
	DB	'=%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@JNANJAED@CAsynchronismEngine?3?3OnAsynchro@
CONST	SEGMENT
??_C@_0EP@JNANJAED@CAsynchronismEngine?3?3OnAsynchro@ DB 'CAsynchronismEn'
	DB	'gine::OnAsynchronismEngineData [ wIdentifier=%d wDataSize=%ld'
	DB	' ]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0c4H, 0daH, 0baH, 0cbH, 0d2H, 0fdH, 0c7H, 0e6H, '\a'
	DB	'synchronismengine.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CAsynchronismEngine@@6B@
CONST	SEGMENT
??_7CAsynchronismEngine@@6B@ DD FLAT:??_R4CAsynchronismEngine@@6B@ ; CAsynchronismEngine::`vftable'
	DD	FLAT:?Release@CAsynchronismEngine@@UAEXXZ
	DD	FLAT:?QueryInterface@CAsynchronismEngine@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?StartService@CAsynchronismEngine@@UAE_NXZ
	DD	FLAT:?ConcludeService@CAsynchronismEngine@@UAE_NXZ
	DD	FLAT:?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z
	DD	FLAT:?SetAsynchronismSink@CAsynchronismEngine@@UAE_NPAUIUnknownEx@@@Z
	DD	FLAT:?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z
	DD	FLAT:?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z
	DD	FLAT:??_ECAsynchronismEngine@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CAsynchronismThread@@6B@
CONST	SEGMENT
??_7CAsynchronismThread@@6B@ DD FLAT:??_R4CAsynchronismThread@@6B@ ; CAsynchronismThread::`vftable'
	DD	FLAT:??_ECAsynchronismThread@@UAEPAXI@Z
	DD	FLAT:?IsRuning@CWHThread@@UAE_NXZ
	DD	FLAT:?StartThread@CWHThread@@UAE_NXZ
	DD	FLAT:?ConcludeThread@CWHThread@@UAE_NK@Z
	DD	FLAT:?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ
	DD	FLAT:?OnEventThreadStrat@CAsynchronismThread@@UAE_NXZ
	DD	FLAT:?OnEventThreadConclude@CAsynchronismThread@@UAE_NXZ
CONST	ENDS
;	COMDAT ??_7IAsynchronismEngine@@6B@
CONST	SEGMENT
??_7IAsynchronismEngine@@6B@ DD FLAT:??_R4IAsynchronismEngine@@6B@ ; IAsynchronismEngine::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IServiceModule@@6B@
CONST	SEGMENT
??_7IServiceModule@@6B@ DD FLAT:??_R4IServiceModule@@6B@ ; IServiceModule::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_CreateAsynchronismEngine$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_CreateAsynchronismEngine$2
__catchsym$_CreateAsynchronismEngine$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$_CreateAsynchronismEngine$0
__ehfuncinfo$_CreateAsynchronismEngine DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$_CreateAsynchronismEngine
	DD	02H
	DD	FLAT:__tryblocktable$_CreateAsynchronismEngine
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$_CreateAsynchronismEngine DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$_CreateAsynchronismEngine$5
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$_CreateAsynchronismEngine$6
__unwindtable$_CreateAsynchronismEngine DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$_CreateAsynchronismEngine$4
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z$0
__ehfuncinfo$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z$0
__tryblocktable$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z$3
__unwindtable$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z
	DD	01H
	DD	FLAT:__tryblocktable$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z$0
__ehfuncinfo$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CAsynchronismEngine@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CAsynchronismEngine@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CAsynchronismEngine@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CAsynchronismEngine@@QAE@XZ$1
__ehfuncinfo$??0CAsynchronismEngine@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CAsynchronismEngine@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$0
__tryblocktable$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$3
__unwindtable$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ
	DD	01H
	DD	FLAT:__tryblocktable$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
tv66 = -28						; size = 4
tv86 = -24						; size = 4
__Ptrdest$ = -20					; size = 4
__Ptrnext$1 = -16					; size = 4
__Count$ = -12						; size = 4
tv83 = -8						; size = 4
tv89 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0000f	83 c1 01	 add	 ecx, 1
  00012	89 4d e8	 mov	 DWORD PTR tv86[ebp], ecx
$LL7@Maklocstr:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv83[ebp]
  00018	8a 02		 mov	 al, BYTE PTR [edx]
  0001a	88 45 ff	 mov	 BYTE PTR tv89[ebp], al
  0001d	83 45 f8 01	 add	 DWORD PTR tv83[ebp], 1
  00021	80 7d ff 00	 cmp	 BYTE PTR tv89[ebp], 0
  00025	75 ee		 jne	 SHORT $LL7@Maklocstr
  00027	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0002a	2b 4d e8	 sub	 ecx, DWORD PTR tv86[ebp]
  0002d	89 4d e4	 mov	 DWORD PTR tv66[ebp], ecx
  00030	8b 55 e4	 mov	 edx, DWORD PTR tv66[ebp]
  00033	83 c2 01	 add	 edx, 1
  00036	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  00039	68 9c 02 00 00	 push	 668			; 0000029cH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00043	6a 02		 push	 2
  00045	6a 01		 push	 1
  00047	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00051	83 c4 14	 add	 esp, 20			; 00000014H
  00054	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00057	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005b	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0005d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00062	8b 4d ec	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  00065	89 4d f0	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00068	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0006a	8b 55 f4	 mov	 edx, DWORD PTR __Count$[ebp]
  0006d	83 ea 01	 sub	 edx, 1
  00070	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx
  00073	8b 45 f0	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00076	83 c0 01	 add	 eax, 1
  00079	89 45 f0	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0007f	83 c1 01	 add	 ecx, 1
  00082	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
$LN4@Maklocstr:
  00085	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00089	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0008b	8b 55 f0	 mov	 edx, DWORD PTR __Ptrnext$1[ebp]
  0008e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	88 0a		 mov	 BYTE PTR [edx], cl
  00095	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00097	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT _CreateAsynchronismEngine
_TEXT	SEGMENT
tv129 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
tv150 = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
tv151 = -44						; size = 4
tv153 = -40						; size = 4
_pObject$6 = -36					; size = 4
tv75 = -32						; size = 4
$T7 = -28						; size = 4
$T8 = -24						; size = 4
_pAsynchronismEngine$ = -20				; size = 4
__$EHRec$ = -16						; size = 16
_Guid$ = 8						; size = 4
_dwInterfaceVer$ = 12					; size = 4
_CreateAsynchronismEngine PROC				; COMDAT

; 303  : DECLARE_CREATE_MODULE(AsynchronismEngine);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_CreateAsynchronismEngine
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 34	 sub	 esp, 52			; 00000034H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pAsynchronismEngine$[ebp], 0
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003a	68 6c 40 00 00	 push	 16492			; 0000406cH
  0003f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 d8	 mov	 DWORD PTR tv153[ebp], eax
  0004a	8b 45 d8	 mov	 eax, DWORD PTR tv153[ebp]
  0004d	89 45 e4	 mov	 DWORD PTR $T7[ebp], eax
  00050	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00054	83 7d e4 00	 cmp	 DWORD PTR $T7[ebp], 0
  00058	74 13		 je	 SHORT $LN7@CreateAsyn
  0005a	8b 4d e4	 mov	 ecx, DWORD PTR $T7[ebp]
  0005d	e8 00 00 00 00	 call	 ??0CAsynchronismEngine@@QAE@XZ ; CAsynchronismEngine::CAsynchronismEngine
  00062	89 45 d4	 mov	 DWORD PTR tv151[ebp], eax
  00065	8b 4d d4	 mov	 ecx, DWORD PTR tv151[ebp]
  00068	89 4d e0	 mov	 DWORD PTR tv75[ebp], ecx
  0006b	eb 07		 jmp	 SHORT $LN8@CreateAsyn
$LN7@CreateAsyn:
  0006d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN8@CreateAsyn:
  00074	8b 55 e0	 mov	 edx, DWORD PTR tv75[ebp]
  00077	89 55 d0	 mov	 DWORD PTR $T5[ebp], edx
  0007a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0007e	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  00081	89 45 ec	 mov	 DWORD PTR _pAsynchronismEngine$[ebp], eax
  00084	83 7d ec 00	 cmp	 DWORD PTR _pAsynchronismEngine$[ebp], 0
  00088	75 15		 jne	 SHORT $LN3@CreateAsyn
  0008a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_C@_08HBOFLKLL@?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM@
  00091	68 00 00 00 00	 push	 OFFSET __TI2PAD
  00096	8d 4d cc	 lea	 ecx, DWORD PTR $T4[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@CreateAsyn:
  0009f	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d ec	 mov	 ecx, DWORD PTR _pAsynchronismEngine$[ebp]
  000aa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ac	8b 4d ec	 mov	 ecx, DWORD PTR _pAsynchronismEngine$[ebp]
  000af	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b2	ff d0		 call	 eax
  000b4	89 45 c8	 mov	 DWORD PTR tv150[ebp], eax
  000b7	8b 4d c8	 mov	 ecx, DWORD PTR tv150[ebp]
  000ba	89 4d dc	 mov	 DWORD PTR _pObject$6[ebp], ecx
  000bd	83 7d dc 00	 cmp	 DWORD PTR _pObject$6[ebp], 0
  000c1	75 15		 jne	 SHORT $LN4@CreateAsyn
  000c3	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_C@_0N@DLOPLLLM@?$LN?S?$LP?Z?$LC?i?Q?$KP?J?$KH?$LA?$NM@
  000ca	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000cf	8d 55 c4	 lea	 edx, DWORD PTR $T3[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@CreateAsyn:
  000d8	8b 45 dc	 mov	 eax, DWORD PTR _pObject$6[ebp]
  000db	e9 83 00 00 00	 jmp	 $LN6@CreateAsyn
__catch$_CreateAsynchronismEngine$0:
  000e0	b8 00 00 00 00	 mov	 eax, $LN18@CreateAsyn
  000e5	c3		 ret	 0
  000e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ed	eb 07		 jmp	 SHORT __tryend$_CreateAsynchronismEngine$1
$LN18@CreateAsyn:
  000ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_CreateAsynchronismEngine$1:
  000f6	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000fd	8b 45 ec	 mov	 eax, DWORD PTR _pAsynchronismEngine$[ebp]
  00100	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax
  00103	8b 4d c0	 mov	 ecx, DWORD PTR $T2[ebp]
  00106	89 4d e8	 mov	 DWORD PTR $T8[ebp], ecx
  00109	83 7d e8 00	 cmp	 DWORD PTR $T8[ebp], 0
  0010d	74 14		 je	 SHORT $LN9@CreateAsyn
  0010f	6a 01		 push	 1
  00111	8b 55 e8	 mov	 edx, DWORD PTR $T8[ebp]
  00114	8b 02		 mov	 eax, DWORD PTR [edx]
  00116	8b 4d e8	 mov	 ecx, DWORD PTR $T8[ebp]
  00119	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0011c	ff d2		 call	 edx
  0011e	89 45 bc	 mov	 DWORD PTR tv129[ebp], eax
  00121	eb 07		 jmp	 SHORT $LN10@CreateAsyn
$LN9@CreateAsyn:
  00123	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN10@CreateAsyn:
  0012a	eb 1e		 jmp	 SHORT $LN14@CreateAsyn
__catch$_CreateAsynchronismEngine$2:
  0012c	33 c0		 xor	 eax, eax
  0012e	75 14		 jne	 SHORT $LN11@CreateAsyn
  00130	68 2f 01 00 00	 push	 303			; 0000012fH
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0013a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0013f	85 c0		 test	 eax, eax
  00141	74 01		 je	 SHORT $LN11@CreateAsyn
  00143	cc		 int	 3
$LN11@CreateAsyn:
  00144	b8 00 00 00 00	 mov	 eax, $LN20@CreateAsyn
  00149	c3		 ret	 0
$LN14@CreateAsyn:
  0014a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00151	eb 07		 jmp	 SHORT __tryend$_CreateAsynchronismEngine$3
$LN20@CreateAsyn:
  00153	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$_CreateAsynchronismEngine$3:
  0015a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pAsynchronismEngine$[ebp], 0
  00161	33 c0		 xor	 eax, eax
$LN6@CreateAsyn:
  00163	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00166	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016d	59		 pop	 ecx
  0016e	5f		 pop	 edi
  0016f	5e		 pop	 esi
  00170	5b		 pop	 ebx
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_CreateAsynchronismEngine$4:
  00000	68 6c 40 00 00	 push	 16492			; 0000406cH
  00005	8b 45 e4	 mov	 eax, DWORD PTR $T7[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$_CreateAsynchronismEngine:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_CreateAsynchronismEngine
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_CreateAsynchronismEngine ENDP
; Function compile flags: /Odtp
;	COMDAT ??_GCAsynchronismEngine@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCAsynchronismEngine@@UAEPAXI@Z PROC			; CAsynchronismEngine::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CAsynchronismEngine@@UAE@XZ ; CAsynchronismEngine::~CAsynchronismEngine
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 11		 je	 SHORT $LN2@scalar
  00017	68 6c 40 00 00	 push	 16492			; 0000406cH
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00025	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_GCAsynchronismEngine@@UAEPAXI@Z ENDP			; CAsynchronismEngine::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z
_TEXT	SEGMENT
_lcok$ = -36						; size = 12
_this$ = -24						; size = 4
_i$2 = -20						; size = 2
$T3 = -14						; size = 1
$T4 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_wIdentifier$ = 8					; size = 2
_DataBuffer$ = 12					; size = 4
_wDataCount$ = 16					; size = 2
?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z PROC ; CAsynchronismEngine::PostAsynchronismData, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 224  :     ASSERT(wDataCount > 0);

  00028	0f b7 45 10	 movzx	 eax, WORD PTR _wDataCount$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	7f 14		 jg	 SHORT $LN8@PostAsynch
  00030	68 e0 00 00 00	 push	 224			; 000000e0H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0003a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003f	85 c0		 test	 eax, eax
  00041	74 01		 je	 SHORT $LN8@PostAsynch
  00043	cc		 int	 3
$LN8@PostAsynch:

; 225  :     if (wDataCount == 0)

  00044	0f b7 55 10	 movzx	 edx, WORD PTR _wDataCount$[ebp]
  00048	85 d2		 test	 edx, edx
  0004a	75 07		 jne	 SHORT $LN5@PostAsynch

; 226  :         return false;

  0004c	32 c0		 xor	 al, al
  0004e	e9 a1 00 00 00	 jmp	 $LN1@PostAsynch
$LN5@PostAsynch:

; 227  : 
; 228  :     // 插入数据
; 229  :     CWHDataLocker lcok(m_CriticalSection);

  00053	6a 01		 push	 1
  00055	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	83 c0 30	 add	 eax, 48			; 00000030H
  0005b	50		 push	 eax
  0005c	8d 4d dc	 lea	 ecx, DWORD PTR _lcok$[ebp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 230  :     if (m_DataQueue.InsertData(wIdentifier, DataBuffer, wDataCount) == false)

  0006c	0f b7 4d 10	 movzx	 ecx, WORD PTR _wDataCount$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 0c	 mov	 edx, DWORD PTR _DataBuffer$[ebp]
  00074	52		 push	 edx
  00075	0f b7 45 08	 movzx	 eax, WORD PTR _wIdentifier$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	83 c1 10	 add	 ecx, 16			; 00000010H
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?InsertData@CWHDataQueue@@QAE_NGQAUtagDataBuffer@@G@Z
  00086	0f b6 c8	 movzx	 ecx, al
  00089	85 c9		 test	 ecx, ecx
  0008b	75 19		 jne	 SHORT $LN6@PostAsynch

; 231  :         return false;

  0008d	c6 45 f3 00	 mov	 BYTE PTR $T4[ebp], 0
  00091	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00098	8d 4d dc	 lea	 ecx, DWORD PTR _lcok$[ebp]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  000a1	8a 45 f3	 mov	 al, BYTE PTR $T4[ebp]
  000a4	eb 4e		 jmp	 SHORT $LN1@PostAsynch
$LN6@PostAsynch:

; 232  : 
; 233  :     for (WORD i = 0; i < wDataCount; i++)

  000a6	33 d2		 xor	 edx, edx
  000a8	66 89 55 ec	 mov	 WORD PTR _i$2[ebp], dx
  000ac	eb 0c		 jmp	 SHORT $LN4@PostAsynch
$LN2@PostAsynch:
  000ae	66 8b 45 ec	 mov	 ax, WORD PTR _i$2[ebp]
  000b2	66 83 c0 01	 add	 ax, 1
  000b6	66 89 45 ec	 mov	 WORD PTR _i$2[ebp], ax
$LN4@PostAsynch:
  000ba	0f b7 4d ec	 movzx	 ecx, WORD PTR _i$2[ebp]
  000be	0f b7 55 10	 movzx	 edx, WORD PTR _wDataCount$[ebp]
  000c2	3b ca		 cmp	 ecx, edx
  000c4	7d 17		 jge	 SHORT $LN3@PostAsynch

; 234  :     {
; 235  :         PostQueuedCompletionStatus(m_hCompletionPort, 0, (ULONG_PTR)this, NULL);

  000c6	6a 00		 push	 0
  000c8	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	50		 push	 eax
  000cc	6a 00		 push	 0
  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000d4	52		 push	 edx
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQueuedCompletionStatus@16

; 236  :     }

  000db	eb d1		 jmp	 SHORT $LN2@PostAsynch
$LN3@PostAsynch:

; 237  : 
; 238  :     return true;

  000dd	c6 45 f2 01	 mov	 BYTE PTR $T3[ebp], 1
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e8	8d 4d dc	 lea	 ecx, DWORD PTR _lcok$[ebp]
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  000f1	8a 45 f2	 mov	 al, BYTE PTR $T3[ebp]
$LN1@PostAsynch:

; 239  : }

  000f4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fe	59		 pop	 ecx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _lcok$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PostAsynchronismData@CAsynchronismEngine@@UAE_NGQAUtagDataBuffer@@G@Z ENDP ; CAsynchronismEngine::PostAsynchronismData
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z
_TEXT	SEGMENT
_ThreadLock$2 = -320					; size = 12
tv165 = -308						; size = 4
tv158 = -304						; size = 4
_this$ = -300						; size = 4
$T3 = -295						; size = 1
$T4 = -294						; size = 1
tv164 = -293						; size = 1
_SystemTime$5 = -292					; size = 16
_buffer$6 = -276					; size = 256
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_wIdentifier$ = 8					; size = 2
_pData$ = 12						; size = 4
_wDataSize$ = 16					; size = 2
?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z PROC ; CAsynchronismEngine::PostAsynchronismData, COMDAT
; _this$ = ecx

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00032	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 188  : 	try

  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 189  : 	{
; 190  : 		// 运行判断
; 191  : 		/*ASSERT(m_bService == true);
; 192  : 		ASSERT(m_hCompletionPort != NULL);*/
; 193  : 		if ((m_hCompletionPort == NULL) || (m_bService == false))

  0003f	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00049	74 0e		 je	 SHORT $LN4@PostAsynch
  0004b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00051	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  00055	85 d2		 test	 edx, edx
  00057	75 07		 jne	 SHORT $LN3@PostAsynch
$LN4@PostAsynch:

; 194  : 			return false;

  00059	32 c0		 xor	 al, al
  0005b	e9 6b 01 00 00	 jmp	 $LN1@PostAsynch
$LN3@PostAsynch:

; 195  : 
; 196  : 		// 插入数据
; 197  : 		CWHDataLocker ThreadLock(m_CriticalSection);

  00060	6a 01		 push	 1
  00062	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00068	83 c0 30	 add	 eax, 48			; 00000030H
  0006b	50		 push	 eax
  0006c	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  00078	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv165[ebp], eax
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 198  : 		if (m_DataQueue.InsertData(wIdentifier, pData, wDataSize) == false)

  00082	0f b7 4d 10	 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  00086	51		 push	 ecx
  00087	8b 55 0c	 mov	 edx, DWORD PTR _pData$[ebp]
  0008a	52		 push	 edx
  0008b	0f b7 45 08	 movzx	 eax, WORD PTR _wIdentifier$[ebp]
  0008f	50		 push	 eax
  00090	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00096	83 c1 10	 add	 ecx, 16			; 00000010H
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?InsertData@CWHDataQueue@@QAE_NGPAXG@Z
  0009f	88 85 db fe ff
	ff		 mov	 BYTE PTR tv164[ebp], al
  000a5	0f b6 8d db fe
	ff ff		 movzx	 ecx, BYTE PTR tv164[ebp]
  000ac	85 c9		 test	 ecx, ecx
  000ae	75 45		 jne	 SHORT $LN5@PostAsynch

; 199  : 		{
; 200  : 			ASSERT(FALSE);

  000b0	33 d2		 xor	 edx, edx
  000b2	75 1f		 jne	 SHORT $LN7@PostAsynch
  000b4	68 c8 00 00 00	 push	 200			; 000000c8H
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000be	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000c3	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv158[ebp], eax
  000c9	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR tv158[ebp], 0
  000d0	74 01		 je	 SHORT $LN7@PostAsynch
  000d2	cc		 int	 3
$LN7@PostAsynch:

; 201  : 			return false;

  000d3	c6 85 da fe ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  000da	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000de	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  000ea	8a 85 da fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  000f0	e9 d6 00 00 00	 jmp	 $LN1@PostAsynch
$LN5@PostAsynch:

; 202  : 		}
; 203  : 		SYSTEMTIME SystemTime;
; 204  : 		GetLocalTime(&SystemTime);

  000f5	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _SystemTime$5[ebp]
  000fb	51		 push	 ecx
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 205  : 		TCHAR buffer[256];
; 206  : 		_sntprintf(buffer, CountArray(buffer), TEXT("%04d-%02d-%02d %02d:%02d:%02d PostAsynchronismData wIdentifier=%d\n"),

  00102	0f b7 55 08	 movzx	 edx, WORD PTR _wIdentifier$[ebp]
  00106	52		 push	 edx
  00107	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _SystemTime$5[ebp+12]
  0010e	50		 push	 eax
  0010f	0f b7 8d e6 fe
	ff ff		 movzx	 ecx, WORD PTR _SystemTime$5[ebp+10]
  00116	51		 push	 ecx
  00117	0f b7 95 e4 fe
	ff ff		 movzx	 edx, WORD PTR _SystemTime$5[ebp+8]
  0011e	52		 push	 edx
  0011f	0f b7 85 e2 fe
	ff ff		 movzx	 eax, WORD PTR _SystemTime$5[ebp+6]
  00126	50		 push	 eax
  00127	0f b7 8d de fe
	ff ff		 movzx	 ecx, WORD PTR _SystemTime$5[ebp+2]
  0012e	51		 push	 ecx
  0012f	0f b7 95 dc fe
	ff ff		 movzx	 edx, WORD PTR _SystemTime$5[ebp]
  00136	52		 push	 edx
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@PNLFMBII@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?5P@
  0013c	68 00 01 00 00	 push	 256			; 00000100H
  00141	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _buffer$6[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 __snprintf
  0014d	83 c4 28	 add	 esp, 40			; 00000028H

; 207  : 			SystemTime.wYear, SystemTime.wMonth, SystemTime.wDay, SystemTime.wHour, SystemTime.wMinute, SystemTime.wSecond, wIdentifier);
; 208  : 		OutputDebugString(buffer);

  00150	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$6[ebp]
  00156	51		 push	 ecx
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4

; 209  : 
; 210  : 		// 投递通知
; 211  : 		PostQueuedCompletionStatus(m_hCompletionPort, wDataSize, (ULONG_PTR)this, NULL);

  0015d	6a 00		 push	 0
  0015f	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00165	52		 push	 edx
  00166	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0016a	50		 push	 eax
  0016b	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00171	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00174	52		 push	 edx
  00175	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQueuedCompletionStatus@16

; 212  : 	}

  0017b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0017f	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  0018b	eb 24		 jmp	 SHORT $LN8@PostAsynch
__catch$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z$0:

; 213  : 	catch (...)
; 214  : 	{
; 215  : 		g_TraceServiceManager.TraceString("PostAsynchronismData 异常", TraceLevel_Exception);

  0018d	6a 03		 push	 3
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@ELGLKPCO@PostAsynchronismData?5?R?l?$LD?$KD@
  00194	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TraceServiceManager@@3VCTraceServiceManager@@A ; g_TraceServiceManager
  00199	e8 00 00 00 00	 call	 ?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z ; CTraceServiceManager::TraceString

; 216  : 		return false;

  0019e	c6 85 d9 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  001a5	b8 00 00 00 00	 mov	 eax, $LN12@PostAsynch
  001aa	c3		 ret	 0

; 217  : 	}

  001ab	b8 00 00 00 00	 mov	 eax, $LN8@PostAsynch
  001b0	c3		 ret	 0
$LN8@PostAsynch:
  001b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001b8	eb 0f		 jmp	 SHORT $LN11@PostAsynch
$LN12@PostAsynch:
  001ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 216  : 		return false;

  001c1	8a 85 d9 fe ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  001c7	eb 02		 jmp	 SHORT $LN1@PostAsynch
$LN11@PostAsynch:

; 218  :     return true;

  001c9	b0 01		 mov	 al, 1
$LN1@PostAsynch:

; 219  : }

  001cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d5	59		 pop	 ecx
  001d6	5f		 pop	 edi
  001d7	5e		 pop	 esi
  001d8	5b		 pop	 ebx
  001d9	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001dc	33 cd		 xor	 ecx, ebp
  001de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z$2:
  00000	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 8a bc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-324]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PostAsynchronismData@CAsynchronismEngine@@UAE_NGPAXG@Z ENDP ; CAsynchronismEngine::PostAsynchronismData
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?SetAsynchronismSink@CAsynchronismEngine@@UAE_NPAUIUnknownEx@@@Z
_TEXT	SEGMENT
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_pIUnknownEx$ = 8					; size = 4
?SetAsynchronismSink@CAsynchronismEngine@@UAE_NPAUIUnknownEx@@@Z PROC ; CAsynchronismEngine::SetAsynchronismSink, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 167  :     // 运行判断
; 168  :     ASSERT(m_bService == false);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00010	85 c9		 test	 ecx, ecx
  00012	74 14		 je	 SHORT $LN5@SetAsynchr
  00014	68 a8 00 00 00	 push	 168			; 000000a8H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00023	85 c0		 test	 eax, eax
  00025	74 01		 je	 SHORT $LN5@SetAsynchr
  00027	cc		 int	 3
$LN5@SetAsynchr:

; 169  :     if (m_bService == true)

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0002f	83 f9 01	 cmp	 ecx, 1
  00032	75 04		 jne	 SHORT $LN2@SetAsynchr

; 170  :         return false;

  00034	32 c0		 xor	 al, al
  00036	eb 59		 jmp	 SHORT $LN1@SetAsynchr
$LN2@SetAsynchr:

; 171  : 
; 172  :     // 查询接口
; 173  :     m_pIAsynchronismEngineSink = QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx, IAsynchronismEngineSink);

  00038	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  0003c	75 09		 jne	 SHORT $LN6@SetAsynchr
  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
  00045	eb 1a		 jmp	 SHORT $LN7@SetAsynchr
$LN6@SetAsynchr:
  00047	68 00 01 01 06	 push	 100729088		; 06010100H
  0004c	68 00 00 00 00	 push	 OFFSET ?IID_IAsynchronismEngineSink@@3U_GUID@@B
  00051	8b 55 08	 mov	 edx, DWORD PTR _pIUnknownEx$[ebp]
  00054	8b 02		 mov	 eax, DWORD PTR [edx]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  00059	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005c	ff d2		 call	 edx
  0005e	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
$LN7@SetAsynchr:
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  00067	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 174  : 
; 175  :     // 错误判断
; 176  :     if (m_pIAsynchronismEngineSink == NULL)

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00071	75 1c		 jne	 SHORT $LN3@SetAsynchr

; 177  :     {
; 178  :         ASSERT(FALSE);

  00073	33 c0		 xor	 eax, eax
  00075	75 14		 jne	 SHORT $LN8@SetAsynchr
  00077	68 b2 00 00 00	 push	 178			; 000000b2H
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00081	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00086	85 c0		 test	 eax, eax
  00088	74 01		 je	 SHORT $LN8@SetAsynchr
  0008a	cc		 int	 3
$LN8@SetAsynchr:

; 179  :         return false;

  0008b	32 c0		 xor	 al, al
  0008d	eb 02		 jmp	 SHORT $LN1@SetAsynchr
$LN3@SetAsynchr:

; 180  :     }
; 181  : 
; 182  :     return true;

  0008f	b0 01		 mov	 al, 1
$LN1@SetAsynchr:

; 183  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?SetAsynchronismSink@CAsynchronismEngine@@UAE_NPAUIUnknownEx@@@Z ENDP ; CAsynchronismEngine::SetAsynchronismSink
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z
_TEXT	SEGMENT
_lock$ = -32						; size = 12
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_BurthenInfo$ = 8					; size = 4
?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z PROC ; CAsynchronismEngine::GetBurthenInfo, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 157  :     CWHDataLocker lock(m_CriticalSection);// 

  00028	6a 01		 push	 1
  0002a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 30	 add	 eax, 48			; 00000030H
  00030	50		 push	 eax
  00031	8d 4d e0	 lea	 ecx, DWORD PTR _lock$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 158  :     m_DataQueue.GetBurthenInfo(BurthenInfo);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _BurthenInfo$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 10	 add	 ecx, 16			; 00000010H
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBurthenInfo@CWHDataQueue@@QAEXAAUtagBurthenInfo@@@Z

; 159  : 
; 160  :     return true;

  00051	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8d 4d e0	 lea	 ecx, DWORD PTR _lock$[ebp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  00065	8a 45 f3	 mov	 al, BYTE PTR $T2[ebp]

; 161  : }

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _lock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetBurthenInfo@CAsynchronismEngine@@UAE_NAAUtagBurthenInfo@@@Z ENDP ; CAsynchronismEngine::GetBurthenInfo
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?ConcludeService@CAsynchronismEngine@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ConcludeService@CAsynchronismEngine@@UAE_NXZ PROC	; CAsynchronismEngine::ConcludeService, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :     // 设置变量
; 272  :     m_bService = false;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 273  : 
; 274  :     // 投递通知
; 275  :     if (m_hCompletionPort != NULL)

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00015	74 13		 je	 SHORT $LN2@ConcludeSe

; 276  :     {
; 277  :         PostQueuedCompletionStatus(m_hCompletionPort, 0, NULL, NULL);

  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQueuedCompletionStatus@16
$LN2@ConcludeSe:

; 278  :     }
; 279  : 
; 280  :     // 停止线程
; 281  :     m_AsynchronismThread.ConcludeThread(INFINITE);

  0002a	6a ff		 push	 -1
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 54	 add	 ecx, 84			; 00000054H
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00038	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0003b	ff d2		 call	 edx

; 282  : 
; 283  :     // 关闭对象
; 284  :     if (m_hCompletionPort != NULL) CloseHandle(m_hCompletionPort);

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00044	74 0d		 je	 SHORT $LN3@ConcludeSe
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN3@ConcludeSe:

; 285  : 
; 286  :     // 设置变量
; 287  :     m_hCompletionPort = NULL;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 288  :     m_pIAsynchronismEngineSink = NULL;

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 289  : 
; 290  :     // 设置对象
; 291  :     m_AsynchronismThread.SetCompletionPort(NULL);

  00067	6a 00		 push	 0
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 54	 add	 ecx, 84			; 00000054H
  0006f	e8 00 00 00 00	 call	 ?SetCompletionPort@CAsynchronismThread@@QAEXPAX@Z ; CAsynchronismThread::SetCompletionPort

; 292  :     m_AsynchronismThread.SetAsynchronismEngineSink(NULL);

  00074	6a 00		 push	 0
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	83 c1 54	 add	 ecx, 84			; 00000054H
  0007c	e8 00 00 00 00	 call	 ?SetAsynchronismEngineSink@CAsynchronismThread@@QAEXPAUIAsynchronismEngineSink@@@Z ; CAsynchronismThread::SetAsynchronismEngineSink

; 293  : 
; 294  :     // 设置数据
; 295  :     m_DataQueue.RemoveData(false);

  00081	6a 00		 push	 0
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	83 c1 10	 add	 ecx, 16			; 00000010H
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?RemoveData@CWHDataQueue@@QAEX_N@Z

; 296  : 
; 297  :     return true;

  0008f	b0 01		 mov	 al, 1

; 298  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?ConcludeService@CAsynchronismEngine@@UAE_NXZ ENDP	; CAsynchronismEngine::ConcludeService
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?StartService@CAsynchronismEngine@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartService@CAsynchronismEngine@@UAE_NXZ PROC		; CAsynchronismEngine::StartService, COMDAT
; _this$ = ecx

; 243  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 244  :     // 运行判断
; 245  :     ASSERT(m_bService == false);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 14		 je	 SHORT $LN6@StartServi
  00012	68 f5 00 00 00	 push	 245			; 000000f5H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN6@StartServi
  00025	cc		 int	 3
$LN6@StartServi:

; 246  :     if (m_bService == true)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0002d	83 f9 01	 cmp	 ecx, 1
  00030	75 04		 jne	 SHORT $LN2@StartServi

; 247  :         return false;

  00032	32 c0		 xor	 al, al
  00034	eb 7b		 jmp	 SHORT $LN1@StartServi
$LN2@StartServi:

; 248  : 
; 249  :     // 完成端口
; 250  :     m_hCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, NULL, 1);

  00036	6a 01		 push	 1
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a ff		 push	 -1
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateIoCompletionPort@16
  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 251  :     if (m_hCompletionPort == NULL)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00051	75 04		 jne	 SHORT $LN3@StartServi

; 252  :         return false;

  00053	32 c0		 xor	 al, al
  00055	eb 5a		 jmp	 SHORT $LN1@StartServi
$LN3@StartServi:

; 253  : 
; 254  :     // 设置对象
; 255  :     m_AsynchronismThread.SetCompletionPort(m_hCompletionPort);

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005d	52		 push	 edx
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 54	 add	 ecx, 84			; 00000054H
  00064	e8 00 00 00 00	 call	 ?SetCompletionPort@CAsynchronismThread@@QAEXPAX@Z ; CAsynchronismThread::SetCompletionPort

; 256  :     m_AsynchronismThread.SetAsynchronismEngineSink(m_pIAsynchronismEngineSink);

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006f	51		 push	 ecx
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 54	 add	 ecx, 84			; 00000054H
  00076	e8 00 00 00 00	 call	 ?SetAsynchronismEngineSink@CAsynchronismThread@@QAEXPAUIAsynchronismEngineSink@@@Z ; CAsynchronismThread::SetAsynchronismEngineSink

; 257  : 
; 258  :     // 启动线程
; 259  :     if (m_AsynchronismThread.StartThread() == false)

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 c1 54	 add	 ecx, 84			; 00000054H
  00081	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00084	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00087	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0008a	ff d2		 call	 edx
  0008c	0f b6 c0	 movzx	 eax, al
  0008f	85 c0		 test	 eax, eax
  00091	75 1c		 jne	 SHORT $LN4@StartServi

; 260  :     {
; 261  :         ASSERT(FALSE);

  00093	33 c9		 xor	 ecx, ecx
  00095	75 14		 jne	 SHORT $LN7@StartServi
  00097	68 05 01 00 00	 push	 261			; 00000105H
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000a1	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a6	85 c0		 test	 eax, eax
  000a8	74 01		 je	 SHORT $LN7@StartServi
  000aa	cc		 int	 3
$LN7@StartServi:

; 262  :         return false;

  000ab	32 c0		 xor	 al, al
  000ad	eb 02		 jmp	 SHORT $LN1@StartServi
$LN4@StartServi:

; 263  :     }
; 264  : 
; 265  :     return true;

  000af	b0 01		 mov	 al, 1
$LN1@StartServi:

; 266  : }

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?StartService@CAsynchronismEngine@@UAE_NXZ ENDP		; CAsynchronismEngine::StartService
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?QueryInterface@CAsynchronismEngine@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
tv202 = -40						; size = 4
tv185 = -36						; size = 4
tv152 = -32						; size = 4
tv190 = -28						; size = 4
tv201 = -24						; size = 4
tv173 = -20						; size = 4
tv184 = -16						; size = 4
tv146 = -12						; size = 4
tv154 = -8						; size = 4
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CAsynchronismEngine@@UAEPAXABU_GUID@@K@Z PROC ; CAsynchronismEngine::QueryInterface, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	68 00 00 00 00	 push	 OFFSET ?IID_IServiceModule@@3U_GUID@@B
  00010	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memcmp
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	89 45 e0	 mov	 DWORD PTR tv152[ebp], eax
  0001f	83 7d e0 00	 cmp	 DWORD PTR tv152[ebp], 0
  00023	75 09		 jne	 SHORT $LN12@QueryInter
  00025	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv154[ebp], 1
  0002c	eb 07		 jmp	 SHORT $LN10@QueryInter
$LN12@QueryInter:
  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
$LN10@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00035	83 7d f8 00	 cmp	 DWORD PTR tv154[ebp], 0
  00039	74 09		 je	 SHORT $LN8@QueryInter
  0003b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv146[ebp], 1
  00042	eb 07		 jmp	 SHORT $LN6@QueryInter
$LN8@QueryInter:
  00044	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN6@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp

; 148  :     QUERYINTERFACE(IServiceModule, Guid, dwQueryVer);

  0004b	0f b6 4d f4	 movzx	 ecx, BYTE PTR tv146[ebp]
  0004f	85 c9		 test	 ecx, ecx
  00051	74 20		 je	 SHORT $LN2@QueryInter
  00053	68 00 01 01 06	 push	 100729088		; 06010100H
  00058	8b 55 0c	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00061	83 c4 08	 add	 esp, 8
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	74 08		 je	 SHORT $LN2@QueryInter
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	e9 d0 00 00 00	 jmp	 $LN1@QueryInter
$LN2@QueryInter:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00073	6a 10		 push	 16			; 00000010H
  00075	68 00 00 00 00	 push	 OFFSET ?IID_IAsynchronismEngine@@3U_GUID@@B
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _Guid$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _memcmp
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	89 45 dc	 mov	 DWORD PTR tv185[ebp], eax
  00089	83 7d dc 00	 cmp	 DWORD PTR tv185[ebp], 0
  0008d	75 09		 jne	 SHORT $LN42@QueryInter
  0008f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv184[ebp], 1
  00096	eb 07		 jmp	 SHORT $LN40@QueryInter
$LN42@QueryInter:
  00098	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN40@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0009f	83 7d f0 00	 cmp	 DWORD PTR tv184[ebp], 0
  000a3	74 09		 je	 SHORT $LN38@QueryInter
  000a5	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv173[ebp], 1
  000ac	eb 07		 jmp	 SHORT $LN36@QueryInter
$LN38@QueryInter:
  000ae	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN36@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp

; 149  :     QUERYINTERFACE(IAsynchronismEngine, Guid, dwQueryVer);

  000b5	0f b6 55 ec	 movzx	 edx, BYTE PTR tv173[ebp]
  000b9	85 d2		 test	 edx, edx
  000bb	74 1d		 je	 SHORT $LN3@QueryInter
  000bd	68 00 01 01 06	 push	 100729088		; 06010100H
  000c2	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  000cb	83 c4 08	 add	 esp, 8
  000ce	0f b6 c8	 movzx	 ecx, al
  000d1	85 c9		 test	 ecx, ecx
  000d3	74 05		 je	 SHORT $LN3@QueryInter
  000d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	eb 69		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  000da	6a 10		 push	 16			; 00000010H
  000dc	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  000e1	8b 55 08	 mov	 edx, DWORD PTR _Guid$[ebp]
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 _memcmp
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ed	89 45 d8	 mov	 DWORD PTR tv202[ebp], eax
  000f0	83 7d d8 00	 cmp	 DWORD PTR tv202[ebp], 0
  000f4	75 09		 jne	 SHORT $LN72@QueryInter
  000f6	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv201[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN70@QueryInter
$LN72@QueryInter:
  000ff	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN70@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00106	83 7d e8 00	 cmp	 DWORD PTR tv201[ebp], 0
  0010a	74 09		 je	 SHORT $LN68@QueryInter
  0010c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv190[ebp], 1
  00113	eb 07		 jmp	 SHORT $LN66@QueryInter
$LN68@QueryInter:
  00115	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN66@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp

; 150  :     QUERYINTERFACE_IUNKNOWNEX(IAsynchronismEngine, Guid, dwQueryVer);

  0011c	0f b6 45 e4	 movzx	 eax, BYTE PTR tv190[ebp]
  00120	85 c0		 test	 eax, eax
  00122	74 1d		 je	 SHORT $LN4@QueryInter
  00124	68 00 01 01 06	 push	 100729088		; 06010100H
  00129	8b 4d 0c	 mov	 ecx, DWORD PTR _dwQueryVer$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00132	83 c4 08	 add	 esp, 8
  00135	0f b6 d0	 movzx	 edx, al
  00138	85 d2		 test	 edx, edx
  0013a	74 05		 je	 SHORT $LN4@QueryInter
  0013c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN4@QueryInter:

; 151  :     return NULL;

  00141	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 152  : }

  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 08 00	 ret	 8
?QueryInterface@CAsynchronismEngine@@UAEPAXABU_GUID@@K@Z ENDP ; CAsynchronismEngine::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.h
;	COMDAT ?Release@CAsynchronismEngine@@UAEXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
$T1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -4						; size = 4
?Release@CAsynchronismEngine@@UAEXXZ PROC		; CAsynchronismEngine::Release, COMDAT
; _this$ = ecx

; 79   :     virtual VOID Release() { delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0000f	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00012	89 4d fc	 mov	 DWORD PTR $T2[ebp], ecx
  00015	83 7d fc 00	 cmp	 DWORD PTR $T2[ebp], 0
  00019	74 14		 je	 SHORT $LN3@Release
  0001b	6a 01		 push	 1
  0001d	8b 55 fc	 mov	 edx, DWORD PTR $T2[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  00025	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00028	ff d2		 call	 edx
  0002a	89 45 f0	 mov	 DWORD PTR tv70[ebp], eax
  0002d	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  0002f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN1@Release:
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?Release@CAsynchronismEngine@@UAEXXZ ENDP		; CAsynchronismEngine::Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ??1CAsynchronismEngine@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAsynchronismEngine@@UAE@XZ PROC			; CAsynchronismEngine::~CAsynchronismEngine, COMDAT
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CAsynchronismEngine@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAsynchronismEngine@@6B@

; 139  :     // 终止服务
; 140  :     ConcludeService();

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?ConcludeService@CAsynchronismEngine@@UAE_NXZ ; CAsynchronismEngine::ConcludeService

; 141  : 
; 142  :     return;
; 143  : }

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 54	 add	 ecx, 84			; 00000054H
  0003d	e8 00 00 00 00	 call	 ??1CAsynchronismThread@@UAE@XZ ; CAsynchronismThread::~CAsynchronismThread
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 30	 add	 ecx, 48			; 00000030H
  00048	e8 00 00 00 00	 call	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 10	 add	 ecx, 16			; 00000010H
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataQueue@@UAE@XZ
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CAsynchronismEngine@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CAsynchronismEngine@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CAsynchronismEngine@@UAE@XZ ENDP			; CAsynchronismEngine::~CAsynchronismEngine
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ??0CAsynchronismEngine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CAsynchronismEngine@@QAE@XZ PROC			; CAsynchronismEngine::CAsynchronismEngine, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CAsynchronismEngine@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IServiceModule@@6B@
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7IAsynchronismEngine@@6B@
  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAsynchronismEngine@@6B@
  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	83 c1 10	 add	 ecx, 16			; 00000010H
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataQueue@@QAE@XZ
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	83 c1 30	 add	 ecx, 48			; 00000030H
  00063	e8 00 00 00 00	 call	 ??0CCriticalSection@@QAE@XZ ; CCriticalSection::CCriticalSection
  00068	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	83 c1 54	 add	 ecx, 84			; 00000054H
  00072	e8 00 00 00 00	 call	 ??0CAsynchronismThread@@QAE@XZ ; CAsynchronismThread::CAsynchronismThread

; 128  :     // 设置变量
; 129  :     m_bService = false;

  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 130  :     m_hCompletionPort = NULL;

  0007e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00081	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 131  :     m_pIAsynchronismEngineSink = NULL;

  00088	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 132  : 
; 133  :     return;
; 134  : }

  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CAsynchronismEngine@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataQueue@@UAE@XZ
__unwindfunclet$??0CAsynchronismEngine@@QAE@XZ$1:
  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 30	 add	 ecx, 48			; 00000030H
  00012	e9 00 00 00 00	 jmp	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
__ehhandler$??0CAsynchronismEngine@@QAE@XZ:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CAsynchronismEngine@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CAsynchronismEngine@@QAE@XZ ENDP			; CAsynchronismEngine::CAsynchronismEngine
; Function compile flags: /Odtp
;	COMDAT ??_GCAsynchronismThread@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCAsynchronismThread@@UAEPAXI@Z PROC			; CAsynchronismThread::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CAsynchronismThread@@UAE@XZ ; CAsynchronismThread::~CAsynchronismThread
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 11		 je	 SHORT $LN2@scalar
  00017	68 18 40 00 00	 push	 16408			; 00004018H
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00025	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_GCAsynchronismThread@@UAEPAXI@Z ENDP			; CAsynchronismThread::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?OnEventThreadConclude@CAsynchronismThread@@UAE_NXZ
_TEXT	SEGMENT
_pAsynchronismEngine$ = -12				; size = 4
_this$ = -8						; size = 4
_bSuccess$ = -1						; size = 1
?OnEventThreadConclude@CAsynchronismThread@@UAE_NXZ PROC ; CAsynchronismThread::OnEventThreadConclude, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 112  :     // 设置变量
; 113  :     CAsynchronismEngine * pAsynchronismEngine = CONTAINING_RECORD(this, CAsynchronismEngine, m_AsynchronismThread);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 e8 54	 sub	 eax, 84			; 00000054H
  0000f	89 45 f4	 mov	 DWORD PTR _pAsynchronismEngine$[ebp], eax

; 114  :     pAsynchronismEngine->m_bService = false;

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _pAsynchronismEngine$[ebp]
  00015	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 115  : 
; 116  :     // 事件通知
; 117  :     ASSERT(m_pIAsynchronismEngineSink != NULL);

  00019	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00020	75 11		 jne	 SHORT $LN3@OnEventThr
  00022	6a 75		 push	 117			; 00000075H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $LN3@OnEventThr
  00032	cc		 int	 3
$LN3@OnEventThr:

; 118  :     bool bSuccess = m_pIAsynchronismEngineSink->OnAsynchronismEngineConclude();

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 12		 mov	 edx, DWORD PTR [edx]
  0003e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00041	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00044	ff d0		 call	 eax
  00046	88 45 ff	 mov	 BYTE PTR _bSuccess$[ebp], al

; 119  : 
; 120  :     return bSuccess;

  00049	8a 45 ff	 mov	 al, BYTE PTR _bSuccess$[ebp]

; 121  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?OnEventThreadConclude@CAsynchronismThread@@UAE_NXZ ENDP ; CAsynchronismThread::OnEventThreadConclude
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?OnEventThreadStrat@CAsynchronismThread@@UAE_NXZ
_TEXT	SEGMENT
_pAsynchronismEngine$ = -12				; size = 4
_this$ = -8						; size = 4
_bSuccess$ = -1						; size = 1
?OnEventThreadStrat@CAsynchronismThread@@UAE_NXZ PROC	; CAsynchronismThread::OnEventThreadStrat, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 98   :     // 事件通知
; 99   :     ASSERT(m_pIAsynchronismEngineSink != NULL);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	75 11		 jne	 SHORT $LN3@OnEventThr
  00012	6a 63		 push	 99			; 00000063H
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00019	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0001e	85 c0		 test	 eax, eax
  00020	74 01		 je	 SHORT $LN3@OnEventThr
  00022	cc		 int	 3
$LN3@OnEventThr:

; 100  :     bool bSuccess = m_pIAsynchronismEngineSink->OnAsynchronismEngineStart();

  00023	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00031	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00034	ff d0		 call	 eax
  00036	88 45 ff	 mov	 BYTE PTR _bSuccess$[ebp], al

; 101  : 
; 102  :     // 设置变量
; 103  :     CAsynchronismEngine * pAsynchronismEngine = CONTAINING_RECORD(this, CAsynchronismEngine, m_AsynchronismThread);

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 e9 54	 sub	 ecx, 84			; 00000054H
  0003f	89 4d f4	 mov	 DWORD PTR _pAsynchronismEngine$[ebp], ecx

; 104  :     pAsynchronismEngine->m_bService = true;

  00042	8b 55 f4	 mov	 edx, DWORD PTR _pAsynchronismEngine$[ebp]
  00045	c6 42 04 01	 mov	 BYTE PTR [edx+4], 1

; 105  : 
; 106  :     return bSuccess;

  00049	8a 45 ff	 mov	 al, BYTE PTR _bSuccess$[ebp]

; 107  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?OnEventThreadStrat@CAsynchronismThread@@UAE_NXZ ENDP	; CAsynchronismThread::OnEventThreadStrat
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ
_TEXT	SEGMENT
_ThreadLock$2 = -312					; size = 12
_dwThancferred$ = -300					; size = 4
_pOverLapped$ = -296					; size = 4
_DataHead$3 = -292					; size = 4
_pAsynchronismEngine$ = -288				; size = 4
$T4 = -281						; size = 1
_this$ = -280						; size = 4
_szDescribe$5 = -276					; size = 256
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ PROC	; CAsynchronismThread::OnEventThreadRun, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00032	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 46   :     // 效验参数
; 47   :     ASSERT(m_hCompletionPort != NULL);

  00038	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00042	75 11		 jne	 SHORT $LN6@OnEventThr
  00044	6a 2f		 push	 47			; 0000002fH
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0004b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00050	85 c0		 test	 eax, eax
  00052	74 01		 je	 SHORT $LN6@OnEventThr
  00054	cc		 int	 3
$LN6@OnEventThr:

; 48   :     ASSERT(m_pIAsynchronismEngineSink != NULL);

  00055	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0005b	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0005f	75 11		 jne	 SHORT $LN7@OnEventThr
  00061	6a 30		 push	 48			; 00000030H
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JCKMPFEG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00068	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0006d	85 c0		 test	 eax, eax
  0006f	74 01		 je	 SHORT $LN7@OnEventThr
  00071	cc		 int	 3
$LN7@OnEventThr:

; 49   : 
; 50   :     // 变量定义
; 51   :     DWORD dwThancferred = 0;

  00072	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwThancferred$[ebp], 0

; 52   :     OVERLAPPED * pOverLapped = NULL;

  0007c	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pOverLapped$[ebp], 0

; 53   :     CAsynchronismEngine * pAsynchronismEngine = NULL;

  00086	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pAsynchronismEngine$[ebp], 0

; 54   : 
; 55   :     // 完成端口
; 56   :     if (GetQueuedCompletionStatus(m_hCompletionPort, &dwThancferred, (PULONG_PTR)&pAsynchronismEngine, &pOverLapped, INFINITE))

  00090	6a ff		 push	 -1
  00092	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _pOverLapped$[ebp]
  00098	51		 push	 ecx
  00099	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _pAsynchronismEngine$[ebp]
  0009f	52		 push	 edx
  000a0	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _dwThancferred$[ebp]
  000a6	50		 push	 eax
  000a7	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000b0	52		 push	 edx
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetQueuedCompletionStatus@20
  000b7	85 c0		 test	 eax, eax
  000b9	0f 84 48 01 00
	00		 je	 $LN2@OnEventThr

; 57   :     {
; 58   :         // 退出判断
; 59   :         if (pAsynchronismEngine == NULL)

  000bf	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _pAsynchronismEngine$[ebp], 0
  000c6	75 07		 jne	 SHORT $LN3@OnEventThr

; 60   :             return false;

  000c8	32 c0		 xor	 al, al
  000ca	e9 3a 01 00 00	 jmp	 $LN1@OnEventThr
$LN3@OnEventThr:

; 61   : 
; 62   :         // 队列锁定
; 63   :         CWHDataLocker ThreadLock(pAsynchronismEngine->m_CriticalSection);

  000cf	6a 01		 push	 1
  000d1	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _pAsynchronismEngine$[ebp]
  000d7	83 c0 30	 add	 eax, 48			; 00000030H
  000da	50		 push	 eax
  000db	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  000e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 64   : 
; 65   :         // 提取数据
; 66   :         tagDataHead DataHead;
; 67   : 		ZeroMemory(m_cbBuffer, sizeof(m_cbBuffer));

  000ee	68 00 40 00 00	 push	 16384			; 00004000H
  000f3	6a 00		 push	 0
  000f5	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	83 c1 18	 add	 ecx, 24			; 00000018H
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 _memset
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH

; 68   :         pAsynchronismEngine->m_DataQueue.DistillData(DataHead, m_cbBuffer, sizeof(m_cbBuffer));

  00107	68 00 40 00 00	 push	 16384			; 00004000H
  0010c	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00112	83 c2 18	 add	 edx, 24			; 00000018H
  00115	52		 push	 edx
  00116	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _DataHead$3[ebp]
  0011c	50		 push	 eax
  0011d	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _pAsynchronismEngine$[ebp]
  00123	83 c1 10	 add	 ecx, 16			; 00000010H
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DistillData@CWHDataQueue@@QAE_NAAUtagDataHead@@PAXG@Z

; 69   : 
; 70   :         // 队列解锁
; 71   :         ThreadLock.UnLock();

  0012c	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?UnLock@CWHDataLocker@@QAEXXZ

; 72   : 
; 73   :         // 数据处理
; 74   :         try

  00138	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 75   :         {
; 76   :             m_pIAsynchronismEngineSink->OnAsynchronismEngineData(DataHead.wIdentifier, m_cbBuffer, DataHead.wDataSize);

  0013c	0f b7 8d dc fe
	ff ff		 movzx	 ecx, WORD PTR _DataHead$3[ebp]
  00143	51		 push	 ecx
  00144	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0014a	83 c2 18	 add	 edx, 24			; 00000018H
  0014d	52		 push	 edx
  0014e	0f b7 85 de fe
	ff ff		 movzx	 eax, WORD PTR _DataHead$3[ebp+2]
  00155	50		 push	 eax
  00156	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00162	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00165	8b 10		 mov	 edx, DWORD PTR [eax]
  00167	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0016a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0016d	ff d0		 call	 eax

; 77   :         }

  0016f	eb 64		 jmp	 SHORT $LN8@OnEventThr
__catch$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$0:

; 78   :         catch (...)
; 79   :         {
; 80   :             // 构造信息
; 81   :             TCHAR szDescribe[256] = TEXT("");

  00171	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ??_C@_00CNPNBAHC@@
  00177	88 8d ec fe ff
	ff		 mov	 BYTE PTR _szDescribe$5[ebp], cl
  0017d	68 ff 00 00 00	 push	 255			; 000000ffH
  00182	6a 00		 push	 0
  00184	8d 95 ed fe ff
	ff		 lea	 edx, DWORD PTR _szDescribe$5[ebp+1]
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _memset
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 82   :             _sntprintf(szDescribe, CountArray(szDescribe), TEXT("CAsynchronismEngine::OnAsynchronismEngineData [ wIdentifier=%d wDataSize=%ld ]"),

  00193	0f b7 85 dc fe
	ff ff		 movzx	 eax, WORD PTR _DataHead$3[ebp]
  0019a	50		 push	 eax
  0019b	0f b7 8d de fe
	ff ff		 movzx	 ecx, WORD PTR _DataHead$3[ebp+2]
  001a2	51		 push	 ecx
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JNANJAED@CAsynchronismEngine?3?3OnAsynchro@
  001a8	68 00 01 00 00	 push	 256			; 00000100H
  001ad	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _szDescribe$5[ebp]
  001b3	52		 push	 edx
  001b4	e8 00 00 00 00	 call	 __snprintf
  001b9	83 c4 14	 add	 esp, 20			; 00000014H

; 83   :                 DataHead.wIdentifier, DataHead.wDataSize);
; 84   : 
; 85   :             // 输出信息
; 86   :             g_TraceServiceManager.TraceString(szDescribe, TraceLevel_Exception);

  001bc	6a 03		 push	 3
  001be	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szDescribe$5[ebp]
  001c4	50		 push	 eax
  001c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TraceServiceManager@@3VCTraceServiceManager@@A ; g_TraceServiceManager
  001ca	e8 00 00 00 00	 call	 ?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z ; CTraceServiceManager::TraceString

; 87   :         }

  001cf	b8 00 00 00 00	 mov	 eax, $LN12@OnEventThr
  001d4	c3		 ret	 0
$LN8@OnEventThr:
  001d5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001dc	eb 07		 jmp	 SHORT __tryend$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$1
$LN12@OnEventThr:
  001de	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$1:

; 88   : 
; 89   :         return true;

  001e5	c6 85 e7 fe ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
  001ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001f3	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  001f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  001ff	8a 85 e7 fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  00205	eb 02		 jmp	 SHORT $LN1@OnEventThr
$LN2@OnEventThr:

; 90   :     }
; 91   : 
; 92   :     return false;

  00207	32 c0		 xor	 al, al
$LN1@OnEventThr:

; 93   : }

  00209	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0020c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00213	59		 pop	 ecx
  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021a	33 cd		 xor	 ecx, ebp
  0021c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ$2:
  00000	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _ThreadLock$2[ebp]
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 8a c4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-316]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnEventThreadRun@CAsynchronismThread@@UAE_NXZ ENDP	; CAsynchronismThread::OnEventThreadRun
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?SetAsynchronismEngineSink@CAsynchronismThread@@QAEXPAUIAsynchronismEngineSink@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIAsynchronismEngineSink$ = 8				; size = 4
?SetAsynchronismEngineSink@CAsynchronismThread@@QAEXPAUIAsynchronismEngineSink@@@Z PROC ; CAsynchronismThread::SetAsynchronismEngineSink, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   :     // 设置变量
; 38   :     m_pIAsynchronismEngineSink = pIAsynchronismEngineSink;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pIAsynchronismEngineSink$[ebp]
  0000d	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 39   : 
; 40   :     return;
; 41   : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetAsynchronismEngineSink@CAsynchronismThread@@QAEXPAUIAsynchronismEngineSink@@@Z ENDP ; CAsynchronismThread::SetAsynchronismEngineSink
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?SetCompletionPort@CAsynchronismThread@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hCompletionPort$ = 8					; size = 4
?SetCompletionPort@CAsynchronismThread@@QAEXPAX@Z PROC	; CAsynchronismThread::SetCompletionPort, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   :     // 设置变量
; 29   :     m_hCompletionPort = hCompletionPort;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _hCompletionPort$[ebp]
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 30   : 
; 31   :     return;
; 32   : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetCompletionPort@CAsynchronismThread@@QAEXPAX@Z ENDP	; CAsynchronismThread::SetCompletionPort
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ??1CAsynchronismThread@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAsynchronismThread@@UAE@XZ PROC			; CAsynchronismThread::~CAsynchronismThread, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAsynchronismThread@@6B@

; 23   : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHThread@@MAE@XZ
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??1CAsynchronismThread@@UAE@XZ ENDP			; CAsynchronismThread::~CAsynchronismThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ??0CAsynchronismThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAsynchronismThread@@QAE@XZ PROC			; CAsynchronismThread::CAsynchronismThread, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHThread@@IAE@XZ
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAsynchronismThread@@6B@

; 10   :     // 运行变量
; 11   :     m_hCompletionPort = NULL;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 12   :     m_pIAsynchronismEngineSink = NULL;

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 13   : 
; 14   :     // 辅助变量
; 15   :     ZeroMemory(m_cbBuffer, sizeof(m_cbBuffer));

  0002d	68 00 40 00 00	 push	 16384			; 00004000H
  00032	6a 00		 push	 0
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c0 18	 add	 eax, 24			; 00000018H
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16   : 
; 17   :     return;
; 18   : }

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0CAsynchronismThread@@QAE@XZ ENDP			; CAsynchronismThread::CAsynchronismThread
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0IAsynchronismEngine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IAsynchronismEngine@@QAE@XZ PROC			; IAsynchronismEngine::IAsynchronismEngine, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IServiceModule@@6B@
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7IAsynchronismEngine@@6B@
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0IAsynchronismEngine@@QAE@XZ ENDP			; IAsynchronismEngine::IAsynchronismEngine
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0IServiceModule@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServiceModule@@QAE@XZ PROC				; IServiceModule::IServiceModule, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IServiceModule@@6B@
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0IServiceModule@@QAE@XZ ENDP				; IServiceModule::IServiceModule
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwVersion$ = -40					; size = 4
_dwVersion$ = -36					; size = 4
_dwVersion$ = -32					; size = 4
_dwVersion$ = -28					; size = 4
_dwVersion$ = -24					; size = 4
_dwVersion$ = -20					; size = 4
_dwVersion$ = -16					; size = 4
_dwVersion$ = -12					; size = 4
$T1 = -8						; size = 1
$T2 = -7						; size = 1
$T3 = -6						; size = 1
$T4 = -5						; size = 1
$T5 = -4						; size = 1
$T6 = -3						; size = 1
$T7 = -2						; size = 1
$T8 = -1						; size = 1
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00006	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 57   : 	return ((BYTE *)&dwVersion)[1];

  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	c1 e1 00	 shl	 ecx, 0
  00014	8a 54 0d f4	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  00018	88 55 ff	 mov	 BYTE PTR $T8[ebp], dl

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00021	b9 01 00 00 00	 mov	 ecx, 1
  00026	c1 e1 00	 shl	 ecx, 0
  00029	8a 54 0d f0	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  0002d	88 55 fe	 mov	 BYTE PTR $T7[ebp], dl

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00030	0f b6 45 ff	 movzx	 eax, BYTE PTR $T8[ebp]
  00034	0f b6 4d fe	 movzx	 ecx, BYTE PTR $T7[ebp]
  00038	3b c1		 cmp	 eax, ecx
  0003a	7e 07		 jle	 SHORT $LN2@InterfaceV
  0003c	32 c0		 xor	 al, al
  0003e	e9 ae 00 00 00	 jmp	 $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  00043	8b 55 08	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  00046	89 55 ec	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	d1 e0		 shl	 eax, 1
  00050	8a 4c 05 ec	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  00054	88 4d fd	 mov	 BYTE PTR $T6[ebp], cl

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  00057	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  0005a	89 55 e8	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 51   : 	return ((BYTE *)&dwVersion)[2];

  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	d1 e0		 shl	 eax, 1
  00064	8a 4c 05 e8	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  00068	88 4d fc	 mov	 BYTE PTR $T5[ebp], cl

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0006b	0f b6 55 fd	 movzx	 edx, BYTE PTR $T6[ebp]
  0006f	0f b6 45 fc	 movzx	 eax, BYTE PTR $T5[ebp]
  00073	3b d0		 cmp	 edx, eax
  00075	74 04		 je	 SHORT $LN3@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 76		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _dwQueryVer$[ebp]
  0007e	89 4d e4	 mov	 DWORD PTR _dwVersion$[ebp], ecx

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00081	ba 01 00 00 00	 mov	 edx, 1
  00086	6b c2 00	 imul	 eax, edx, 0
  00089	8a 4c 05 e4	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  0008d	88 4d fb	 mov	 BYTE PTR $T4[ebp], cl

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00090	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  00093	89 55 e0	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	6b c8 00	 imul	 ecx, eax, 0
  0009e	8a 54 0d e0	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  000a2	88 55 fa	 mov	 BYTE PTR $T3[ebp], dl

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  000a5	0f b6 45 fb	 movzx	 eax, BYTE PTR $T4[ebp]
  000a9	0f b6 4d fa	 movzx	 ecx, BYTE PTR $T3[ebp]
  000ad	3b c1		 cmp	 eax, ecx
  000af	74 04		 je	 SHORT $LN4@InterfaceV
  000b1	32 c0		 xor	 al, al
  000b3	eb 3c		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000b5	8b 55 08	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  000b8	89 55 dc	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 45   : 	return ((BYTE *)&dwVersion)[3];

  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	6b c8 03	 imul	 ecx, eax, 3
  000c3	8a 54 0d dc	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  000c7	88 55 f9	 mov	 BYTE PTR $T2[ebp], dl

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000ca	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  000cd	89 45 d8	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 45   : 	return ((BYTE *)&dwVersion)[3];

  000d0	b9 01 00 00 00	 mov	 ecx, 1
  000d5	6b d1 03	 imul	 edx, ecx, 3
  000d8	8a 44 15 d8	 mov	 al, BYTE PTR _dwVersion$[ebp+edx]
  000dc	88 45 f8	 mov	 BYTE PTR $T1[ebp], al

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000df	0f b6 4d f9	 movzx	 ecx, BYTE PTR $T2[ebp]
  000e3	0f b6 55 f8	 movzx	 edx, BYTE PTR $T1[ebp]
  000e7	3b ca		 cmp	 ecx, edx
  000e9	74 04		 je	 SHORT $LN5@InterfaceV
  000eb	32 c0		 xor	 al, al
  000ed	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000ef	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	6b c8 00	 imul	 ecx, eax, 0
  0000b	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	c1 e0 00	 shl	 eax, 0
  0000b	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	d1 e0		 shl	 eax, 1
  0000a	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	6b c8 03	 imul	 ecx, eax, 3
  0000b	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
tv66 = -24						; size = 4
tv86 = -20						; size = 4
__Count$ = -16						; size = 4
__Ptrdest$ = -12					; size = 4
tv79 = -8						; size = 4
tv89 = -2						; size = 2
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0000f	83 c1 02	 add	 ecx, 2
  00012	89 4d ec	 mov	 DWORD PTR tv86[ebp], ecx
$LL6@Maklocwcs:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv79[ebp]
  00018	66 8b 02	 mov	 ax, WORD PTR [edx]
  0001b	66 89 45 fe	 mov	 WORD PTR tv89[ebp], ax
  0001f	83 45 f8 02	 add	 DWORD PTR tv79[ebp], 2
  00023	66 83 7d fe 00	 cmp	 WORD PTR tv89[ebp], 0
  00028	75 eb		 jne	 SHORT $LL6@Maklocwcs
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0002d	2b 4d ec	 sub	 ecx, DWORD PTR tv86[ebp]
  00030	d1 f9		 sar	 ecx, 1
  00032	89 4d e8	 mov	 DWORD PTR tv66[ebp], ecx
  00035	8b 55 e8	 mov	 edx, DWORD PTR tv66[ebp]
  00038	83 c2 01	 add	 edx, 1
  0003b	89 55 f0	 mov	 DWORD PTR __Count$[ebp], edx

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0003e	6a 65		 push	 101			; 00000065H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00045	6a 02		 push	 2
  00047	6a 02		 push	 2
  00049	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	89 45 f4	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  00059	83 7d f4 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005d	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  0005f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00064	8b 4d f0	 mov	 ecx, DWORD PTR __Count$[ebp]
  00067	d1 e1		 shl	 ecx, 1
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _memcpy
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum

; 106  : 	return (_Ptrdest);

  0007a	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -64						; size = 8
__Mbst1$ = -56						; size = 8
tv69 = -48						; size = 4
tv146 = -44						; size = 4
__Count1$ = -40						; size = 4
__Ptrdest$ = -36					; size = 4
__Ptr1$ = -32						; size = 4
__Ptrnext$ = -28					; size = 4
tv143 = -24						; size = 4
__Count$ = -20						; size = 4
__Bytes$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Wc$ = -8						; size = 2
tv149 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00006	33 c0		 xor	 eax, eax
  00008	89 45 c8	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000b	89 45 cc	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00011	89 4d e8	 mov	 DWORD PTR tv143[ebp], ecx
  00014	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00017	83 c2 01	 add	 edx, 1
  0001a	89 55 d4	 mov	 DWORD PTR tv146[ebp], edx
$LL12@Maklocstr:
  0001d	8b 45 e8	 mov	 eax, DWORD PTR tv143[ebp]
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	88 4d ff	 mov	 BYTE PTR tv149[ebp], cl
  00025	83 45 e8 01	 add	 DWORD PTR tv143[ebp], 1
  00029	80 7d ff 00	 cmp	 BYTE PTR tv149[ebp], 0
  0002d	75 ee		 jne	 SHORT $LL12@Maklocstr
  0002f	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00032	2b 55 d4	 sub	 edx, DWORD PTR tv146[ebp]
  00035	89 55 d0	 mov	 DWORD PTR tv69[ebp], edx
  00038	8b 45 d0	 mov	 eax, DWORD PTR tv69[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 d8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00041	8b 4d d8	 mov	 ecx, DWORD PTR __Count1$[ebp]
  00044	89 4d ec	 mov	 DWORD PTR __Count$[ebp], ecx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  0004e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00051	89 55 e0	 mov	 DWORD PTR __Ptr1$[ebp], edx
  00054	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  00059	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0005c	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  0005f	8b 4d e0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00062	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00065	89 4d e0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00068	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0006b	83 c2 01	 add	 edx, 1
  0006e	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00071	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00075	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00077	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d c8	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 ec	 mov	 edx, DWORD PTR __Count$[ebp]
  00082	52		 push	 edx
  00083	8b 45 e0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00086	50		 push	 eax
  00087	8d 4d f8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 __Mbrtowc
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  00096	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0009a	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0009c	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  0009e	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  000a0	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000a3	83 c2 01	 add	 edx, 1
  000a6	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  000a9	68 ba 02 00 00	 push	 698			; 000002baH
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b3	6a 02		 push	 2
  000b5	6a 02		 push	 2
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000ba	50		 push	 eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000c7	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000cb	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000cd	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000d2	8b 4d dc	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  000d5	89 4d e4	 mov	 DWORD PTR __Ptrnext$[ebp], ecx

; 703  : 	mbstate_t _Mbst2 = {};

  000d8	33 d2		 xor	 edx, edx
  000da	89 55 c0	 mov	 DWORD PTR __Mbst2$[ebp], edx
  000dd	89 55 c4	 mov	 DWORD PTR __Mbst2$[ebp+4], edx

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e0	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000e2	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  000e5	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000e8	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000ee	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000f1	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000f4	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000f7	83 ea 01	 sub	 edx, 1
  000fa	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000fd	8b 45 e4	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  00100	83 c0 02	 add	 eax, 2
  00103	89 45 e4	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  00106	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  0010a	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  0010c	8b 4d 10	 mov	 ecx, DWORD PTR __Cvt$[ebp]
  0010f	51		 push	 ecx
  00110	8d 55 c0	 lea	 edx, DWORD PTR __Mbst2$[ebp]
  00113	52		 push	 edx
  00114	8b 45 d8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 e4	 mov	 edx, DWORD PTR __Ptrnext$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 __Mbrtowc
  00125	83 c4 14	 add	 esp, 20			; 00000014H
  00128	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  0012b	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0012f	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00131	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00133	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00135	33 c0		 xor	 eax, eax
  00137	8b 4d e4	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0013a	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memcpy
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_msg$ = -36						; size = 28
_bResult$ = -8						; size = 4
_bQuit$ = -4						; size = 4
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00006	6a 01		 push	 1
  00008	6a 12		 push	 18			; 00000012H
  0000a	6a 12		 push	 18			; 00000012H
  0000c	6a 00		 push	 0
  0000e	8d 45 dc	 lea	 eax, DWORD PTR _msg$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  00018	89 45 fc	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00026	52		 push	 edx
  00027	6a 02		 push	 2
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00035	83 7d fc 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  00039	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003b	8b 45 e4	 mov	 eax, DWORD PTR _msg$[ebp+8]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00045	8b 45 f8	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Format$ = -16						; size = 4
__ArgList$ = -12					; size = 4
tv86 = -8						; size = 4
__Result$1 = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 f4	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0000c	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR __Format$[ebp], ecx

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00012	8b 55 f4	 mov	 edx, DWORD PTR __ArgList$[ebp]
  00015	52		 push	 edx
  00016	6a 00		 push	 0
  00018	8b 45 f0	 mov	 eax, DWORD PTR __Format$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	83 c9 01	 or	 ecx, 1
  0002e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00031	52		 push	 edx
  00032	51		 push	 ecx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00039	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003c	89 45 fc	 mov	 DWORD PTR __Result$1[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  0003f	83 7d fc 00	 cmp	 DWORD PTR __Result$1[ebp], 0
  00043	7d 09		 jge	 SHORT $LN7@snprintf
  00045	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv86[ebp], -1
  0004c	eb 06		 jmp	 SHORT $LN3@snprintf
$LN7@snprintf:
  0004e	8b 45 fc	 mov	 eax, DWORD PTR __Result$1[ebp]
  00051	89 45 f8	 mov	 DWORD PTR tv86[ebp], eax
$LN3@snprintf:

; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  00054	8b 4d f8	 mov	 ecx, DWORD PTR tv86[ebp]
  00057	89 4d ec	 mov	 DWORD PTR __Result$[ebp], ecx

; 1975 :         __crt_va_end(_ArgList);

  0005a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1976 :         return _Result;

  00061	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1977 :     }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
tv80 = -8						; size = 4
__Result$1 = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1409 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00013	52		 push	 edx
  00014	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	83 c9 01	 or	 ecx, 1
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	51		 push	 ecx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0002d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00030	89 45 fc	 mov	 DWORD PTR __Result$1[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00033	83 7d fc 00	 cmp	 DWORD PTR __Result$1[ebp], 0
  00037	7d 09		 jge	 SHORT $LN5@vsnprintf
  00039	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv80[ebp], -1
  00040	eb 06		 jmp	 SHORT $LN3@vsnprintf
$LN5@vsnprintf:
  00042	8b 45 fc	 mov	 eax, DWORD PTR __Result$1[ebp]
  00045	89 45 f8	 mov	 DWORD PTR tv80[ebp], eax
$LN3@vsnprintf:

; 1410 :         #pragma warning(push)
; 1411 :         #pragma warning(disable: 4996) // Deprecation
; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00048	8b 45 f8	 mov	 eax, DWORD PTR tv80[ebp]

; 1413 :         #pragma warning(pop)
; 1414 :     }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00006	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	83 ca 01	 or	 edx, 1
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00027	50		 push	 eax
  00028	52		 push	 edx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00044	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  00047	89 4d f8	 mov	 DWORD PTR tv74[ebp], ecx
$LN4@vsnprintf_:
  0004a	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv74 = -12						; size = 4
tv68 = -8						; size = 4
tv76 = -4						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _memcmp
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	89 45 f4	 mov	 DWORD PTR tv74[ebp], eax
  0001b	83 7d f4 00	 cmp	 DWORD PTR tv74[ebp], 0
  0001f	75 09		 jne	 SHORT $LN7@
  00021	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN5@
$LN7@:
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN5@:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00031	83 7d fc 00	 cmp	 DWORD PTR tv76[ebp], 0
  00035	74 09		 je	 SHORT $LN3@
  00037	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0003e	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  00047	8a 45 f8	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv68 = -8						; size = 4
tv70 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _memcmp
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  0001b	83 7d f8 00	 cmp	 DWORD PTR tv68[ebp], 0
  0001f	75 09		 jne	 SHORT $LN3@IsEqualGUI
  00021	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@IsEqualGUI:
  00031	8b 45 fc	 mov	 eax, DWORD PTR tv70[ebp]

; 162  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\asynchronismengine.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00013	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00017	76 11		 jbe	 SHORT $LN1@vector
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001c	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00022	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00025	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00028	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
