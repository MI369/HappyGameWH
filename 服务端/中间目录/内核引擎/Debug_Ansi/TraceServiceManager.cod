; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\内核引擎\TraceServiceManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_ITraceService@@3U_GUID@@B DD 0e5f636c6H		; IID_ITraceService
	DW	0abb5H
	DW	04752H
	DB	0bbH
	DB	0c8H
	DB	0cdH
	DB	0b1H
	DB	076H
	DB	058H
	DB	0f5H
	DB	02dH
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0CTraceServiceManager@@QAE@XZ			; CTraceServiceManager::CTraceServiceManager
PUBLIC	??1CTraceServiceManager@@UAE@XZ			; CTraceServiceManager::~CTraceServiceManager
PUBLIC	?Release@CTraceServiceManager@@UAEXXZ		; CTraceServiceManager::Release
PUBLIC	?QueryInterface@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z ; CTraceServiceManager::QueryInterface
PUBLIC	?IsEnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@@Z ; CTraceServiceManager::IsEnableTrace
PUBLIC	?EnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@_N@Z ; CTraceServiceManager::EnableTrace
PUBLIC	?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z ; CTraceServiceManager::SetTraceService
PUBLIC	?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z ; CTraceServiceManager::GetTraceService
PUBLIC	?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z ; CTraceServiceManager::TraceString
PUBLIC	??_GCTraceServiceManager@@UAEPAXI@Z		; CTraceServiceManager::`scalar deleting destructor'
PUBLIC	_CreateTraceServiceManager
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7ITraceServiceManager@@6B@			; ITraceServiceManager::`vftable'
PUBLIC	??_7CTraceServiceManager@@6B@			; CTraceServiceManager::`vftable'
PUBLIC	?g_TraceServiceManager@@3VCTraceServiceManager@@A ; g_TraceServiceManager
PUBLIC	??_C@_0FA@OMIBONB@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ITraceServiceManager@@6B@			; ITraceServiceManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUITraceServiceManager@@@8		; ITraceServiceManager `RTTI Type Descriptor'
PUBLIC	??_R3ITraceServiceManager@@8			; ITraceServiceManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITraceServiceManager@@8			; ITraceServiceManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITraceServiceManager@@8		; ITraceServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTraceServiceManager@@6B@			; CTraceServiceManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTraceServiceManager@@@8		; CTraceServiceManager `RTTI Type Descriptor'
PUBLIC	??_R3CTraceServiceManager@@8			; CTraceServiceManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTraceServiceManager@@8			; CTraceServiceManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTraceServiceManager@@8		; CTraceServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	??0CCriticalSection@@QAE@XZ:PROC		; CCriticalSection::CCriticalSection
EXTRN	??1CCriticalSection@@UAE@XZ:PROC		; CCriticalSection::~CCriticalSection
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z:PROC
EXTRN	__imp_??1CWHDataLocker@@UAE@XZ:PROC
EXTRN	??_ECTraceServiceManager@@UAEPAXI@Z:PROC	; CTraceServiceManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_TraceServiceManager@@3VCTraceServiceManager@@A DB 034H DUP (?) ; g_TraceServiceManager
_BSS	ENDS
CRT$XCU	SEGMENT
?g_TraceServiceManager$initializer$@@3P6AXXZA DD FLAT:??__Eg_TraceServiceManager@@YAXXZ ; g_TraceServiceManager$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CTraceServiceManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTraceServiceManager@@8 DD FLAT:??_R0?AVCTraceServiceManager@@@8 ; CTraceServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTraceServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CTraceServiceManager@@8
rdata$r	SEGMENT
??_R2CTraceServiceManager@@8 DD FLAT:??_R1A@?0A@EA@CTraceServiceManager@@8 ; CTraceServiceManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ITraceServiceManager@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CTraceServiceManager@@8
rdata$r	SEGMENT
??_R3CTraceServiceManager@@8 DD 00H			; CTraceServiceManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CTraceServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTraceServiceManager@@@8
data$r	SEGMENT
??_R0?AVCTraceServiceManager@@@8 DD FLAT:??_7type_info@@6B@ ; CTraceServiceManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTraceServiceManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CTraceServiceManager@@6B@
rdata$r	SEGMENT
??_R4CTraceServiceManager@@6B@ DD 00H			; CTraceServiceManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTraceServiceManager@@@8
	DD	FLAT:??_R3CTraceServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITraceServiceManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITraceServiceManager@@8 DD FLAT:??_R0?AUITraceServiceManager@@@8 ; ITraceServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITraceServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R2ITraceServiceManager@@8
rdata$r	SEGMENT
??_R2ITraceServiceManager@@8 DD FLAT:??_R1A@?0A@EA@ITraceServiceManager@@8 ; ITraceServiceManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3ITraceServiceManager@@8
rdata$r	SEGMENT
??_R3ITraceServiceManager@@8 DD 00H			; ITraceServiceManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITraceServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITraceServiceManager@@@8
data$r	SEGMENT
??_R0?AUITraceServiceManager@@@8 DD FLAT:??_7type_info@@6B@ ; ITraceServiceManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITraceServiceManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4ITraceServiceManager@@6B@
rdata$r	SEGMENT
??_R4ITraceServiceManager@@6B@ DD 00H			; ITraceServiceManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUITraceServiceManager@@@8
	DD	FLAT:??_R3ITraceServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@OMIBONB@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0FA@OMIBONB@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0c4H, 0daH, 0baH, 0cbH, 0d2H, 0fdH, 0c7H, 0e6H, '\t'
	DB	'raceservicemanager.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CTraceServiceManager@@6B@
CONST	SEGMENT
??_7CTraceServiceManager@@6B@ DD FLAT:??_R4CTraceServiceManager@@6B@ ; CTraceServiceManager::`vftable'
	DD	FLAT:?Release@CTraceServiceManager@@UAEXXZ
	DD	FLAT:?QueryInterface@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?IsEnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@@Z
	DD	FLAT:?EnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@_N@Z
	DD	FLAT:?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z
	DD	FLAT:?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z
	DD	FLAT:??_ECTraceServiceManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7ITraceServiceManager@@6B@
CONST	SEGMENT
??_7ITraceServiceManager@@6B@ DD FLAT:??_R4ITraceServiceManager@@6B@ ; ITraceServiceManager::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z$0
__ehfuncinfo$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z$0
__ehfuncinfo$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z$0
__ehfuncinfo$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
tv66 = -28						; size = 4
tv86 = -24						; size = 4
__Ptrdest$ = -20					; size = 4
__Ptrnext$1 = -16					; size = 4
__Count$ = -12						; size = 4
tv83 = -8						; size = 4
tv89 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0000f	83 c1 01	 add	 ecx, 1
  00012	89 4d e8	 mov	 DWORD PTR tv86[ebp], ecx
$LL7@Maklocstr:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv83[ebp]
  00018	8a 02		 mov	 al, BYTE PTR [edx]
  0001a	88 45 ff	 mov	 BYTE PTR tv89[ebp], al
  0001d	83 45 f8 01	 add	 DWORD PTR tv83[ebp], 1
  00021	80 7d ff 00	 cmp	 BYTE PTR tv89[ebp], 0
  00025	75 ee		 jne	 SHORT $LL7@Maklocstr
  00027	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0002a	2b 4d e8	 sub	 ecx, DWORD PTR tv86[ebp]
  0002d	89 4d e4	 mov	 DWORD PTR tv66[ebp], ecx
  00030	8b 55 e4	 mov	 edx, DWORD PTR tv66[ebp]
  00033	83 c2 01	 add	 edx, 1
  00036	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  00039	68 9c 02 00 00	 push	 668			; 0000029cH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00043	6a 02		 push	 2
  00045	6a 01		 push	 1
  00047	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00051	83 c4 14	 add	 esp, 20			; 00000014H
  00054	89 45 ec	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00057	83 7d ec 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005b	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0005d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00062	8b 4d ec	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  00065	89 4d f0	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  00068	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0006a	8b 55 f4	 mov	 edx, DWORD PTR __Count$[ebp]
  0006d	83 ea 01	 sub	 edx, 1
  00070	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx
  00073	8b 45 f0	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00076	83 c0 01	 add	 eax, 1
  00079	89 45 f0	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0007f	83 c1 01	 add	 ecx, 1
  00082	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
$LN4@Maklocstr:
  00085	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00089	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0008b	8b 55 f0	 mov	 edx, DWORD PTR __Ptrnext$1[ebp]
  0008e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00091	8a 08		 mov	 cl, BYTE PTR [eax]
  00093	88 0a		 mov	 BYTE PTR [edx], cl
  00095	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00097	8b 45 ec	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT _CreateTraceServiceManager
_TEXT	SEGMENT
_Guid$ = 8						; size = 4
_dwInterfaceVer$ = 12					; size = 4
_CreateTraceServiceManager PROC				; COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  :     return g_TraceServiceManager.QueryInterface(Guid, dwInterfaceVer);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _Guid$[ebp]
  0000a	51		 push	 ecx
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TraceServiceManager@@3VCTraceServiceManager@@A ; g_TraceServiceManager
  00010	e8 00 00 00 00	 call	 ?QueryInterface@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z ; CTraceServiceManager::QueryInterface

; 120  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_CreateTraceServiceManager ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fg_TraceServiceManager@@YAXXZ
text$yd	SEGMENT
??__Fg_TraceServiceManager@@YAXXZ PROC			; `dynamic atexit destructor for 'g_TraceServiceManager'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TraceServiceManager@@3VCTraceServiceManager@@A ; g_TraceServiceManager
  00008	e8 00 00 00 00	 call	 ??1CTraceServiceManager@@UAE@XZ ; CTraceServiceManager::~CTraceServiceManager
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??__Fg_TraceServiceManager@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_TraceServiceManager''
text$yd	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ??__Eg_TraceServiceManager@@YAXXZ
text$di	SEGMENT
??__Eg_TraceServiceManager@@YAXXZ PROC			; `dynamic initializer for 'g_TraceServiceManager'', COMDAT

; 114  : CTraceServiceManager g_TraceServiceManager;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_TraceServiceManager@@3VCTraceServiceManager@@A ; g_TraceServiceManager
  00008	e8 00 00 00 00	 call	 ??0CTraceServiceManager@@QAE@XZ ; CTraceServiceManager::CTraceServiceManager
  0000d	68 00 00 00 00	 push	 OFFSET ??__Fg_TraceServiceManager@@YAXXZ ; `dynamic atexit destructor for 'g_TraceServiceManager''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??__Eg_TraceServiceManager@@YAXXZ ENDP			; `dynamic initializer for 'g_TraceServiceManager''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCTraceServiceManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTraceServiceManager@@UAEPAXI@Z PROC		; CTraceServiceManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CTraceServiceManager@@UAE@XZ ; CTraceServiceManager::~CTraceServiceManager
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 34		 push	 52			; 00000034H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCTraceServiceManager@@UAEPAXI@Z ENDP		; CTraceServiceManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z
_TEXT	SEGMENT
_ThreadLock$ = -32					; size = 12
_this$ = -20						; size = 4
$T2 = -14						; size = 1
$T3 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pszString$ = 8						; size = 4
_TraceLevel$ = 12					; size = 4
?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z PROC ; CTraceServiceManager::TraceString, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :     // 效验参数
; 96   :     ASSERT(TraceLevel <= TraceLevel_Debug);

  00028	83 7d 0c 04	 cmp	 DWORD PTR _TraceLevel$[ebp], 4
  0002c	7e 11		 jle	 SHORT $LN6@TraceStrin
  0002e	6a 60		 push	 96			; 00000060H
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@OMIBONB@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00035	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003a	85 c0		 test	 eax, eax
  0003c	74 01		 je	 SHORT $LN6@TraceStrin
  0003e	cc		 int	 3
$LN6@TraceStrin:

; 97   :     if (TraceLevel > TraceLevel_Debug)

  0003f	83 7d 0c 04	 cmp	 DWORD PTR _TraceLevel$[ebp], 4
  00043	7e 04		 jle	 SHORT $LN2@TraceStrin

; 98   :         return false;

  00045	32 c0		 xor	 al, al
  00047	eb 7a		 jmp	 SHORT $LN1@TraceStrin
$LN2@TraceStrin:

; 99   : 
; 100  :     // 同步锁定
; 101  :     CWHDataLocker ThreadLock(m_CriticalSection);

  00049	6a 01		 push	 1
  0004b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 10	 add	 ecx, 16			; 00000010H
  00051	51		 push	 ecx
  00052	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 102  : 
; 103  :     // 状态判断
; 104  :     if ((m_pITraceService == NULL) || (m_bTraceFlag[TraceLevel] == false))

  00062	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00065	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00069	74 0e		 je	 SHORT $LN4@TraceStrin
  0006b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	03 45 0c	 add	 eax, DWORD PTR _TraceLevel$[ebp]
  00071	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00075	85 c9		 test	 ecx, ecx
  00077	75 19		 jne	 SHORT $LN3@TraceStrin
$LN4@TraceStrin:

; 105  :         return false;

  00079	c6 45 f3 00	 mov	 BYTE PTR $T3[ebp], 0
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  0008d	8a 45 f3	 mov	 al, BYTE PTR $T3[ebp]
  00090	eb 31		 jmp	 SHORT $LN1@TraceStrin
$LN3@TraceStrin:

; 106  : 
; 107  :     // 输出消息
; 108  :     return m_pITraceService->TraceString(pszString, TraceLevel);

  00092	8b 55 0c	 mov	 edx, DWORD PTR _TraceLevel$[ebp]
  00095	52		 push	 edx
  00096	8b 45 08	 mov	 eax, DWORD PTR _pszString$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 12		 mov	 edx, DWORD PTR [edx]
  000a5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000a8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ab	ff d0		 call	 eax
  000ad	88 45 f2	 mov	 BYTE PTR $T2[ebp], al
  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  000c0	8a 45 f2	 mov	 al, BYTE PTR $T2[ebp]
$LN1@TraceStrin:

; 109  : }

  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TraceString@CTraceServiceManager@@UAE_NPBDW4enTraceLevel@@@Z ENDP ; CTraceServiceManager::TraceString
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
_ThreadLock$ = -36					; size = 12
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z PROC ; CTraceServiceManager::GetTraceService, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 83   :     // 同步锁定
; 84   :     CWHDataLocker ThreadLock(m_CriticalSection);

  00028	6a 01		 push	 1
  0002a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	50		 push	 eax
  00031	8d 4d dc	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 85   : 
; 86   :     // 获取接口
; 87   :     if (m_pITraceService == NULL)

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00048	75 1c		 jne	 SHORT $LN2@GetTraceSe

; 88   :         return NULL;

  0004a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8d 4d dc	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  00061	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00064	eb 31		 jmp	 SHORT $LN1@GetTraceSe
$LN2@GetTraceSe:

; 89   :     return m_pITraceService->QueryInterface(Guid, dwQueryVer);

  00066	8b 55 0c	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00074	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 12		 mov	 edx, DWORD PTR [edx]
  00079	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007f	ff d0		 call	 eax
  00081	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00084	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008b	8d 4d dc	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  00094	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@GetTraceSe:

; 90   : }

  00097	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTraceService@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z ENDP ; CTraceServiceManager::GetTraceService
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z
_TEXT	SEGMENT
_ThreadLock$ = -40					; size = 12
tv90 = -28						; size = 4
tv80 = -24						; size = 4
_this$ = -20						; size = 4
$T2 = -14						; size = 1
$T3 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_pIUnknownEx$ = 8					; size = 4
?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z PROC ; CTraceServiceManager::SetTraceService, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 63   :     // 同步锁定
; 64   :     CWHDataLocker ThreadLock(m_CriticalSection);

  00028	6a 01		 push	 1
  0002a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	50		 push	 eax
  00031	8d 4d d8	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWHDataLocker@@QAE@AAVCCriticalSection@@_N@Z
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 65   : 
; 66   :     // 注销接口
; 67   :     if (pIUnknownEx == NULL)

  00041	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00045	75 23		 jne	 SHORT $LN2@SetTraceSe

; 68   :     {
; 69   :         m_pITraceService = NULL;

  00047	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 70   :         return true;

  00051	c6 45 f3 01	 mov	 BYTE PTR $T3[ebp], 1
  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8d 4d d8	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  00065	8a 45 f3	 mov	 al, BYTE PTR $T3[ebp]
  00068	eb 7e		 jmp	 SHORT $LN1@SetTraceSe
$LN2@SetTraceSe:

; 71   :     }
; 72   : 
; 73   :     // 设置接口
; 74   :     m_pITraceService = QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx, ITraceService);

  0006a	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  0006e	75 09		 jne	 SHORT $LN4@SetTraceSe
  00070	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
  00077	eb 1a		 jmp	 SHORT $LN5@SetTraceSe
$LN4@SetTraceSe:
  00079	68 00 01 01 06	 push	 100729088		; 06010100H
  0007e	68 00 00 00 00	 push	 OFFSET ?IID_ITraceService@@3U_GUID@@B
  00083	8b 55 08	 mov	 edx, DWORD PTR _pIUnknownEx$[ebp]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  0008b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008e	ff d2		 call	 edx
  00090	89 45 e8	 mov	 DWORD PTR tv80[ebp], eax
$LN5@SetTraceSe:
  00093	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 4d e8	 mov	 ecx, DWORD PTR tv80[ebp]
  00099	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 75   :     ASSERT(m_pITraceService != NULL);

  0009c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0009f	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  000a3	75 11		 jne	 SHORT $LN6@SetTraceSe
  000a5	6a 4b		 push	 75			; 0000004bH
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@OMIBONB@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000ac	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b1	85 c0		 test	 eax, eax
  000b3	74 01		 je	 SHORT $LN6@SetTraceSe
  000b5	cc		 int	 3
$LN6@SetTraceSe:

; 76   : 
; 77   :     return (m_pITraceService != NULL);

  000b6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  000bd	74 09		 je	 SHORT $LN7@SetTraceSe
  000bf	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  000c6	eb 07		 jmp	 SHORT $LN8@SetTraceSe
$LN7@SetTraceSe:
  000c8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@SetTraceSe:
  000cf	8a 55 e4	 mov	 dl, BYTE PTR tv90[ebp]
  000d2	88 55 f2	 mov	 BYTE PTR $T2[ebp], dl
  000d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	8d 4d d8	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
  000e5	8a 45 f2	 mov	 al, BYTE PTR $T2[ebp]
$LN1@SetTraceSe:

; 78   : }

  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _ThreadLock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CWHDataLocker@@UAE@XZ
__ehhandler$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetTraceService@CTraceServiceManager@@UAE_NPAUIUnknownEx@@@Z ENDP ; CTraceServiceManager::SetTraceService
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?EnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_TraceLevel$ = 8					; size = 4
_bEnableTrace$ = 12					; size = 1
?EnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@_N@Z PROC ; CTraceServiceManager::EnableTrace, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   :     // 效验参数
; 50   :     ASSERT(TraceLevel <= TraceLevel_Debug);

  00007	83 7d 08 04	 cmp	 DWORD PTR _TraceLevel$[ebp], 4
  0000b	7e 11		 jle	 SHORT $LN4@EnableTrac
  0000d	6a 32		 push	 50			; 00000032H
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@OMIBONB@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00014	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00019	85 c0		 test	 eax, eax
  0001b	74 01		 je	 SHORT $LN4@EnableTrac
  0001d	cc		 int	 3
$LN4@EnableTrac:

; 51   :     if (TraceLevel > TraceLevel_Debug)

  0001e	83 7d 08 04	 cmp	 DWORD PTR _TraceLevel$[ebp], 4
  00022	7e 04		 jle	 SHORT $LN2@EnableTrac

; 52   :         return false;

  00024	32 c0		 xor	 al, al
  00026	eb 0e		 jmp	 SHORT $LN1@EnableTrac
$LN2@EnableTrac:

; 53   : 
; 54   :     // 设置参数
; 55   :     m_bTraceFlag[TraceLevel] = bEnableTrace;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR _TraceLevel$[ebp]
  0002e	8a 55 0c	 mov	 dl, BYTE PTR _bEnableTrace$[ebp]
  00031	88 51 04	 mov	 BYTE PTR [ecx+4], dl

; 56   : 
; 57   :     return true;

  00034	b0 01		 mov	 al, 1
$LN1@EnableTrac:

; 58   : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?EnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@_N@Z ENDP ; CTraceServiceManager::EnableTrace
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?IsEnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_TraceLevel$ = 8					; size = 4
?IsEnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@@Z PROC ; CTraceServiceManager::IsEnableTrace, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   :     // 效验参数
; 39   :     ASSERT(TraceLevel <= TraceLevel_Debug);

  00007	83 7d 08 04	 cmp	 DWORD PTR _TraceLevel$[ebp], 4
  0000b	7e 11		 jle	 SHORT $LN4@IsEnableTr
  0000d	6a 27		 push	 39			; 00000027H
  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@OMIBONB@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00014	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00019	85 c0		 test	 eax, eax
  0001b	74 01		 je	 SHORT $LN4@IsEnableTr
  0001d	cc		 int	 3
$LN4@IsEnableTr:

; 40   :     if (TraceLevel > TraceLevel_Debug)

  0001e	83 7d 08 04	 cmp	 DWORD PTR _TraceLevel$[ebp], 4
  00022	7e 04		 jle	 SHORT $LN2@IsEnableTr

; 41   :         return false;

  00024	32 c0		 xor	 al, al
  00026	eb 09		 jmp	 SHORT $LN1@IsEnableTr
$LN2@IsEnableTr:

; 42   : 
; 43   :     return m_bTraceFlag[TraceLevel];

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	03 4d 08	 add	 ecx, DWORD PTR _TraceLevel$[ebp]
  0002e	8a 41 04	 mov	 al, BYTE PTR [ecx+4]
$LN1@IsEnableTr:

; 44   : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?IsEnableTrace@CTraceServiceManager@@UAE_NW4enTraceLevel@@@Z ENDP ; CTraceServiceManager::IsEnableTrace
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?QueryInterface@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
tv171 = -28						; size = 4
tv138 = -24						; size = 4
_this$ = -20						; size = 4
tv159 = -16						; size = 4
tv170 = -12						; size = 4
tv132 = -8						; size = 4
tv140 = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z PROC ; CTraceServiceManager::QueryInterface, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	68 00 00 00 00	 push	 OFFSET ?IID_ITraceServiceManager@@3U_GUID@@B
  00010	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memcmp
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	89 45 e8	 mov	 DWORD PTR tv138[ebp], eax
  0001f	83 7d e8 00	 cmp	 DWORD PTR tv138[ebp], 0
  00023	75 09		 jne	 SHORT $LN11@QueryInter
  00025	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  0002c	eb 07		 jmp	 SHORT $LN9@QueryInter
$LN11@QueryInter:
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN9@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00035	83 7d fc 00	 cmp	 DWORD PTR tv140[ebp], 0
  00039	74 09		 je	 SHORT $LN7@QueryInter
  0003b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv132[ebp], 1
  00042	eb 07		 jmp	 SHORT $LN5@QueryInter
$LN7@QueryInter:
  00044	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN5@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp

; 30   :     QUERYINTERFACE(ITraceServiceManager, Guid, dwQueryVer);

  0004b	0f b6 4d f8	 movzx	 ecx, BYTE PTR tv132[ebp]
  0004f	85 c9		 test	 ecx, ecx
  00051	74 1d		 je	 SHORT $LN2@QueryInter
  00053	68 00 01 01 06	 push	 100729088		; 06010100H
  00058	8b 55 0c	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00061	83 c4 08	 add	 esp, 8
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	74 05		 je	 SHORT $LN2@QueryInter
  0006b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	eb 69		 jmp	 SHORT $LN1@QueryInter
$LN2@QueryInter:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00070	6a 10		 push	 16			; 00000010H
  00072	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00077	8b 4d 08	 mov	 ecx, DWORD PTR _Guid$[ebp]
  0007a	51		 push	 ecx
  0007b	e8 00 00 00 00	 call	 _memcmp
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	89 45 e4	 mov	 DWORD PTR tv171[ebp], eax
  00086	83 7d e4 00	 cmp	 DWORD PTR tv171[ebp], 0
  0008a	75 09		 jne	 SHORT $LN41@QueryInter
  0008c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv170[ebp], 1
  00093	eb 07		 jmp	 SHORT $LN39@QueryInter
$LN41@QueryInter:
  00095	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv170[ebp], 0
$LN39@QueryInter:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  0009c	83 7d f4 00	 cmp	 DWORD PTR tv170[ebp], 0
  000a0	74 09		 je	 SHORT $LN37@QueryInter
  000a2	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv159[ebp], 1
  000a9	eb 07		 jmp	 SHORT $LN35@QueryInter
$LN37@QueryInter:
  000ab	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN35@QueryInter:
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp

; 31   :     QUERYINTERFACE_IUNKNOWNEX(ITraceServiceManager, Guid, dwQueryVer);

  000b2	0f b6 55 f0	 movzx	 edx, BYTE PTR tv159[ebp]
  000b6	85 d2		 test	 edx, edx
  000b8	74 1d		 je	 SHORT $LN3@QueryInter
  000ba	68 00 01 01 06	 push	 100729088		; 06010100H
  000bf	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  000c8	83 c4 08	 add	 esp, 8
  000cb	0f b6 c8	 movzx	 ecx, al
  000ce	85 c9		 test	 ecx, ecx
  000d0	74 05		 je	 SHORT $LN3@QueryInter
  000d2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:

; 32   :     return NULL;

  000d7	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 33   : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
?QueryInterface@CTraceServiceManager@@UAEPAXABU_GUID@@K@Z ENDP ; CTraceServiceManager::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.h
;	COMDAT ?Release@CTraceServiceManager@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@CTraceServiceManager@@UAEXXZ PROC		; CTraceServiceManager::Release, COMDAT
; _this$ = ecx

; 32   :     virtual VOID Release() { return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?Release@CTraceServiceManager@@UAEXXZ ENDP		; CTraceServiceManager::Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ??1CTraceServiceManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CTraceServiceManager@@UAE@XZ PROC			; CTraceServiceManager::~CTraceServiceManager, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CTraceServiceManager@@6B@

; 25   : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 10	 add	 ecx, 16			; 00000010H
  00016	e8 00 00 00 00	 call	 ??1CCriticalSection@@UAE@XZ ; CCriticalSection::~CCriticalSection
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??1CTraceServiceManager@@UAE@XZ ENDP			; CTraceServiceManager::~CTraceServiceManager
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ??0CTraceServiceManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTraceServiceManager@@QAE@XZ PROC			; CTraceServiceManager::CTraceServiceManager, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ITraceServiceManager@@6B@
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CTraceServiceManager@@6B@
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 c1 10	 add	 ecx, 16			; 00000010H
  00028	e8 00 00 00 00	 call	 ??0CCriticalSection@@QAE@XZ ; CCriticalSection::CCriticalSection

; 9    :     // 设置标志
; 10   :     m_bTraceFlag[TraceLevel_Info] = true;

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	6b c8 00	 imul	 ecx, eax, 0
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	c6 44 0a 04 01	 mov	 BYTE PTR [edx+ecx+4], 1

; 11   :     m_bTraceFlag[TraceLevel_Debug] = true;

  0003d	b8 01 00 00 00	 mov	 eax, 1
  00042	c1 e0 02	 shl	 eax, 2
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	c6 44 01 04 01	 mov	 BYTE PTR [ecx+eax+4], 1

; 12   :     m_bTraceFlag[TraceLevel_Normal] = true;

  0004d	ba 01 00 00 00	 mov	 edx, 1
  00052	c1 e2 00	 shl	 edx, 0
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c6 44 10 04 01	 mov	 BYTE PTR [eax+edx+4], 1

; 13   :     m_bTraceFlag[TraceLevel_Warning] = true;

  0005d	b9 01 00 00 00	 mov	 ecx, 1
  00062	d1 e1		 shl	 ecx, 1
  00064	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00067	c6 44 0a 04 01	 mov	 BYTE PTR [edx+ecx+4], 1

; 14   :     m_bTraceFlag[TraceLevel_Exception] = true;

  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	6b c8 03	 imul	 ecx, eax, 3
  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	c6 44 0a 04 01	 mov	 BYTE PTR [edx+ecx+4], 1

; 15   : 
; 16   :     // 设置接口
; 17   :     m_pITraceService = NULL;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 18   : 
; 19   :     return;
; 20   : }

  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
??0CTraceServiceManager@@QAE@XZ ENDP			; CTraceServiceManager::CTraceServiceManager
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0ITraceServiceManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITraceServiceManager@@QAE@XZ PROC			; ITraceServiceManager::ITraceServiceManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ITraceServiceManager@@6B@
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0ITraceServiceManager@@QAE@XZ ENDP			; ITraceServiceManager::ITraceServiceManager
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00015	8d 45 d0	 lea	 eax, DWORD PTR $T1[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00022	8b 7d cc	 mov	 edi, DWORD PTR _this$[ebp]
  00025	83 c7 18	 add	 edi, 24			; 00000018H
  00028	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002d	8b f0		 mov	 esi, eax
  0002f	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	85 c9		 test	 ecx, ecx
  00038	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00061	83 c4 04	 add	 esp, 4
  00064	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  0006f	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00074	83 c4 04	 add	 esp, 4
  00077	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 224  : 			}
; 225  : 		else

  0007d	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  0007f	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	83 c0 18	 add	 eax, 24			; 00000018H
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a0	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	83 c2 18	 add	 edx, 24			; 00000018H
  000a6	52		 push	 edx
  000a7	6a 00		 push	 0
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	83 c2 18	 add	 edx, 24			; 00000018H
  000c7	52		 push	 edx
  000c8	6a 00		 push	 0
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000cf	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwVersion$ = -40					; size = 4
_dwVersion$ = -36					; size = 4
_dwVersion$ = -32					; size = 4
_dwVersion$ = -28					; size = 4
_dwVersion$ = -24					; size = 4
_dwVersion$ = -20					; size = 4
_dwVersion$ = -16					; size = 4
_dwVersion$ = -12					; size = 4
$T1 = -8						; size = 1
$T2 = -7						; size = 1
$T3 = -6						; size = 1
$T4 = -5						; size = 1
$T5 = -4						; size = 1
$T6 = -3						; size = 1
$T7 = -2						; size = 1
$T8 = -1						; size = 1
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00006	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 57   : 	return ((BYTE *)&dwVersion)[1];

  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	c1 e1 00	 shl	 ecx, 0
  00014	8a 54 0d f4	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  00018	88 55 ff	 mov	 BYTE PTR $T8[ebp], dl

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00021	b9 01 00 00 00	 mov	 ecx, 1
  00026	c1 e1 00	 shl	 ecx, 0
  00029	8a 54 0d f0	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  0002d	88 55 fe	 mov	 BYTE PTR $T7[ebp], dl

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00030	0f b6 45 ff	 movzx	 eax, BYTE PTR $T8[ebp]
  00034	0f b6 4d fe	 movzx	 ecx, BYTE PTR $T7[ebp]
  00038	3b c1		 cmp	 eax, ecx
  0003a	7e 07		 jle	 SHORT $LN2@InterfaceV
  0003c	32 c0		 xor	 al, al
  0003e	e9 ae 00 00 00	 jmp	 $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  00043	8b 55 08	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  00046	89 55 ec	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	d1 e0		 shl	 eax, 1
  00050	8a 4c 05 ec	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  00054	88 4d fd	 mov	 BYTE PTR $T6[ebp], cl

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  00057	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  0005a	89 55 e8	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 51   : 	return ((BYTE *)&dwVersion)[2];

  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	d1 e0		 shl	 eax, 1
  00064	8a 4c 05 e8	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  00068	88 4d fc	 mov	 BYTE PTR $T5[ebp], cl

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0006b	0f b6 55 fd	 movzx	 edx, BYTE PTR $T6[ebp]
  0006f	0f b6 45 fc	 movzx	 eax, BYTE PTR $T5[ebp]
  00073	3b d0		 cmp	 edx, eax
  00075	74 04		 je	 SHORT $LN3@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 76		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _dwQueryVer$[ebp]
  0007e	89 4d e4	 mov	 DWORD PTR _dwVersion$[ebp], ecx

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00081	ba 01 00 00 00	 mov	 edx, 1
  00086	6b c2 00	 imul	 eax, edx, 0
  00089	8a 4c 05 e4	 mov	 cl, BYTE PTR _dwVersion$[ebp+eax]
  0008d	88 4d fb	 mov	 BYTE PTR $T4[ebp], cl

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00090	8b 55 0c	 mov	 edx, DWORD PTR _dwInterfaceVer$[ebp]
  00093	89 55 e0	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	6b c8 00	 imul	 ecx, eax, 0
  0009e	8a 54 0d e0	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  000a2	88 55 fa	 mov	 BYTE PTR $T3[ebp], dl

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  000a5	0f b6 45 fb	 movzx	 eax, BYTE PTR $T4[ebp]
  000a9	0f b6 4d fa	 movzx	 ecx, BYTE PTR $T3[ebp]
  000ad	3b c1		 cmp	 eax, ecx
  000af	74 04		 je	 SHORT $LN4@InterfaceV
  000b1	32 c0		 xor	 al, al
  000b3	eb 3c		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000b5	8b 55 08	 mov	 edx, DWORD PTR _dwQueryVer$[ebp]
  000b8	89 55 dc	 mov	 DWORD PTR _dwVersion$[ebp], edx

; 45   : 	return ((BYTE *)&dwVersion)[3];

  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	6b c8 03	 imul	 ecx, eax, 3
  000c3	8a 54 0d dc	 mov	 dl, BYTE PTR _dwVersion$[ebp+ecx]
  000c7	88 55 f9	 mov	 BYTE PTR $T2[ebp], dl

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000ca	8b 45 0c	 mov	 eax, DWORD PTR _dwInterfaceVer$[ebp]
  000cd	89 45 d8	 mov	 DWORD PTR _dwVersion$[ebp], eax

; 45   : 	return ((BYTE *)&dwVersion)[3];

  000d0	b9 01 00 00 00	 mov	 ecx, 1
  000d5	6b d1 03	 imul	 edx, ecx, 3
  000d8	8a 44 15 d8	 mov	 al, BYTE PTR _dwVersion$[ebp+edx]
  000dc	88 45 f8	 mov	 BYTE PTR $T1[ebp], al

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  000df	0f b6 4d f9	 movzx	 ecx, BYTE PTR $T2[ebp]
  000e3	0f b6 55 f8	 movzx	 edx, BYTE PTR $T1[ebp]
  000e7	3b ca		 cmp	 ecx, edx
  000e9	74 04		 je	 SHORT $LN5@InterfaceV
  000eb	32 c0		 xor	 al, al
  000ed	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000ef	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	6b c8 00	 imul	 ecx, eax, 0
  0000b	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	c1 e0 00	 shl	 eax, 0
  0000b	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	d1 e0		 shl	 eax, 1
  0000a	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	6b c8 03	 imul	 ecx, eax, 3
  0000b	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
tv66 = -24						; size = 4
tv86 = -20						; size = 4
__Count$ = -16						; size = 4
__Ptrdest$ = -12					; size = 4
tv79 = -8						; size = 4
tv89 = -2						; size = 2
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0000f	83 c1 02	 add	 ecx, 2
  00012	89 4d ec	 mov	 DWORD PTR tv86[ebp], ecx
$LL6@Maklocwcs:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv79[ebp]
  00018	66 8b 02	 mov	 ax, WORD PTR [edx]
  0001b	66 89 45 fe	 mov	 WORD PTR tv89[ebp], ax
  0001f	83 45 f8 02	 add	 DWORD PTR tv79[ebp], 2
  00023	66 83 7d fe 00	 cmp	 WORD PTR tv89[ebp], 0
  00028	75 eb		 jne	 SHORT $LL6@Maklocwcs
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0002d	2b 4d ec	 sub	 ecx, DWORD PTR tv86[ebp]
  00030	d1 f9		 sar	 ecx, 1
  00032	89 4d e8	 mov	 DWORD PTR tv66[ebp], ecx
  00035	8b 55 e8	 mov	 edx, DWORD PTR tv66[ebp]
  00038	83 c2 01	 add	 edx, 1
  0003b	89 55 f0	 mov	 DWORD PTR __Count$[ebp], edx

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0003e	6a 65		 push	 101			; 00000065H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00045	6a 02		 push	 2
  00047	6a 02		 push	 2
  00049	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	89 45 f4	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  00059	83 7d f4 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0005d	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  0005f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00064	8b 4d f0	 mov	 ecx, DWORD PTR __Count$[ebp]
  00067	d1 e1		 shl	 ecx, 1
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _memcpy
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum

; 106  : 	return (_Ptrdest);

  0007a	8b 45 f4	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -64						; size = 8
__Mbst1$ = -56						; size = 8
tv69 = -48						; size = 4
tv146 = -44						; size = 4
__Count1$ = -40						; size = 4
__Ptrdest$ = -36					; size = 4
__Ptr1$ = -32						; size = 4
__Ptrnext$ = -28					; size = 4
tv143 = -24						; size = 4
__Count$ = -20						; size = 4
__Bytes$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Wc$ = -8						; size = 2
tv149 = -1						; size = 1
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00006	33 c0		 xor	 eax, eax
  00008	89 45 c8	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000b	89 45 cc	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00011	89 4d e8	 mov	 DWORD PTR tv143[ebp], ecx
  00014	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00017	83 c2 01	 add	 edx, 1
  0001a	89 55 d4	 mov	 DWORD PTR tv146[ebp], edx
$LL12@Maklocstr:
  0001d	8b 45 e8	 mov	 eax, DWORD PTR tv143[ebp]
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	88 4d ff	 mov	 BYTE PTR tv149[ebp], cl
  00025	83 45 e8 01	 add	 DWORD PTR tv143[ebp], 1
  00029	80 7d ff 00	 cmp	 BYTE PTR tv149[ebp], 0
  0002d	75 ee		 jne	 SHORT $LL12@Maklocstr
  0002f	8b 55 e8	 mov	 edx, DWORD PTR tv143[ebp]
  00032	2b 55 d4	 sub	 edx, DWORD PTR tv146[ebp]
  00035	89 55 d0	 mov	 DWORD PTR tv69[ebp], edx
  00038	8b 45 d0	 mov	 eax, DWORD PTR tv69[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 d8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00041	8b 4d d8	 mov	 ecx, DWORD PTR __Count1$[ebp]
  00044	89 4d ec	 mov	 DWORD PTR __Count$[ebp], ecx
  00047	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  0004e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00051	89 55 e0	 mov	 DWORD PTR __Ptr1$[ebp], edx
  00054	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  00059	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0005c	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  0005f	8b 4d e0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00062	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00065	89 4d e0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00068	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0006b	83 c2 01	 add	 edx, 1
  0006e	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00071	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00075	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00077	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d c8	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 ec	 mov	 edx, DWORD PTR __Count$[ebp]
  00082	52		 push	 edx
  00083	8b 45 e0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00086	50		 push	 eax
  00087	8d 4d f8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 __Mbrtowc
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  00096	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0009a	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0009c	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  0009e	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  000a0	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000a3	83 c2 01	 add	 edx, 1
  000a6	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  000a9	68 ba 02 00 00	 push	 698			; 000002baH
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b3	6a 02		 push	 2
  000b5	6a 02		 push	 2
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  000ba	50		 push	 eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000c7	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000cb	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000cd	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000d2	8b 4d dc	 mov	 ecx, DWORD PTR __Ptrdest$[ebp]
  000d5	89 4d e4	 mov	 DWORD PTR __Ptrnext$[ebp], ecx

; 703  : 	mbstate_t _Mbst2 = {};

  000d8	33 d2		 xor	 edx, edx
  000da	89 55 c0	 mov	 DWORD PTR __Mbst2$[ebp], edx
  000dd	89 55 c4	 mov	 DWORD PTR __Mbst2$[ebp+4], edx

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e0	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000e2	8b 45 ec	 mov	 eax, DWORD PTR __Count$[ebp]
  000e5	2b 45 f0	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000e8	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000ee	03 4d f0	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000f1	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000f4	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000f7	83 ea 01	 sub	 edx, 1
  000fa	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000fd	8b 45 e4	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  00100	83 c0 02	 add	 eax, 2
  00103	89 45 e4	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  00106	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  0010a	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  0010c	8b 4d 10	 mov	 ecx, DWORD PTR __Cvt$[ebp]
  0010f	51		 push	 ecx
  00110	8d 55 c0	 lea	 edx, DWORD PTR __Mbst2$[ebp]
  00113	52		 push	 edx
  00114	8b 45 d8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 e4	 mov	 edx, DWORD PTR __Ptrnext$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 __Mbrtowc
  00125	83 c4 14	 add	 esp, 20			; 00000014H
  00128	89 45 f0	 mov	 DWORD PTR __Bytes$[ebp], eax
  0012b	83 7d f0 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0012f	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00131	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00133	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00135	33 c0		 xor	 eax, eax
  00137	8b 4d e4	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0013a	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0013d	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memcpy
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_msg$ = -36						; size = 28
_bResult$ = -8						; size = 4
_bQuit$ = -4						; size = 4
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00006	6a 01		 push	 1
  00008	6a 12		 push	 18			; 00000012H
  0000a	6a 12		 push	 18			; 00000012H
  0000c	6a 00		 push	 0
  0000e	8d 45 dc	 lea	 eax, DWORD PTR _msg$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  00018	89 45 fc	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00026	52		 push	 edx
  00027	6a 02		 push	 2
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	89 45 f8	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00035	83 7d fc 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  00039	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003b	8b 45 e4	 mov	 eax, DWORD PTR _msg$[ebp+8]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00045	8b 45 f8	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv74 = -12						; size = 4
tv68 = -8						; size = 4
tv76 = -4						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _memcmp
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	89 45 f4	 mov	 DWORD PTR tv74[ebp], eax
  0001b	83 7d f4 00	 cmp	 DWORD PTR tv74[ebp], 0
  0001f	75 09		 jne	 SHORT $LN7@
  00021	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN5@
$LN7@:
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN5@:

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00031	83 7d fc 00	 cmp	 DWORD PTR tv76[ebp], 0
  00035	74 09		 je	 SHORT $LN3@
  00037	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0003e	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  00047	8a 45 f8	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv68 = -8						; size = 4
tv70 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00006	6a 10		 push	 16			; 00000010H
  00008	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 _memcmp
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
  00018	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  0001b	83 7d f8 00	 cmp	 DWORD PTR tv68[ebp], 0
  0001f	75 09		 jne	 SHORT $LN3@IsEqualGUI
  00021	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@IsEqualGUI:
  00031	8b 45 fc	 mov	 eax, DWORD PTR tv70[ebp]

; 162  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\内核引擎\traceservicemanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00013	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00017	76 11		 jbe	 SHORT $LN1@vector
  00019	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001c	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00022	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00025	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00028	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
