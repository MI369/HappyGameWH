; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\比赛服务\DistributeManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?BLOCK_SIZE@CDistributeNodePool@@2HB		; CDistributeNodePool::BLOCK_SIZE
PUBLIC	?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A ; CDistributeNodePool::m_pHeadOfFreeList
_BSS	SEGMENT
?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A DD 01H DUP (?) ; CDistributeNodePool::m_pHeadOfFreeList
_BSS	ENDS
CONST	SEGMENT
?IID_IMatchServiceManager@@3U_GUID@@B DD 07d381e8aH	; IID_IMatchServiceManager
	DW	08c10H
	DW	04443H
	DB	0b5H
	DB	0adH
	DB	075H
	DB	04bH
	DB	0e5H
	DB	050H
	DB	0c5H
	DB	053H
?BLOCK_SIZE@CDistributeNodePool@@2HB DD 014H		; CDistributeNodePool::BLOCK_SIZE
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?data@CPlex@@QAEPAXXZ				; CPlex::data
PUBLIC	??$HashKey@K@@YGIK@Z				; HashKey<unsigned long>
PUBLIC	??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z	; SerializeElements<unsigned long>
PUBLIC	??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z	; DumpElements<unsigned long>
PUBLIC	??$CompareElements@KK@@YGHPBK0@Z		; CompareElements<unsigned long,unsigned long>
PUBLIC	??0tagDistributeNode@@QAE@XZ			; tagDistributeNode::tagDistributeNode
PUBLIC	??1tagDistributeNode@@QAE@XZ			; tagDistributeNode::~tagDistributeNode
PUBLIC	??_GtagDistributeNode@@QAEPAXI@Z		; tagDistributeNode::`scalar deleting destructor'
PUBLIC	??0CDistributeNodePool@@QAE@XZ			; CDistributeNodePool::CDistributeNodePool
PUBLIC	??1CDistributeNodePool@@QAE@XZ			; CDistributeNodePool::~CDistributeNodePool
PUBLIC	?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ ; CDistributeNodePool::AllocNode
PUBLIC	?FreeNode@CDistributeNodePool@@QAEXPAX@Z	; CDistributeNodePool::FreeNode
PUBLIC	??0?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
PUBLIC	??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
PUBLIC	?GetCount@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABQAUtagSameTableInfo@@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Add
PUBLIC	?Append@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABV1@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Append
PUBLIC	?GetAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetAt
PUBLIC	?ElementAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHABQAUtagSameTableInfo@@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAt
PUBLIC	?RemoveAll@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXXZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAll
PUBLIC	??A?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::AllocMemory
PUBLIC	??_G?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAEPAXI@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`scalar deleting destructor'
PUBLIC	??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
PUBLIC	?Lookup@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEHKAAPAUtagSameTableInfo@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Lookup
PUBLIC	??A?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEAAPAUtagSameTableInfo@@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::operator[]
PUBLIC	?SetAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXKPAUtagSameTableInfo@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::SetAt
PUBLIC	?RemoveKey@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEHK@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveKey
PUBLIC	?RemoveAll@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveAll
PUBLIC	?GetStartPosition@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetStartPosition
PUBLIC	?GetNextAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagSameTableInfo@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetNextAssoc
PUBLIC	?InitHashTable@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::InitHashTable
PUBLIC	?NewAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEPAVCAssoc@1@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::NewAssoc
PUBLIC	?FreeAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEXPAVCAssoc@1@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::FreeAssoc
PUBLIC	?GetAssocAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetAssocAt
PUBLIC	??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::~CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
PUBLIC	?Serialize@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEXAAVCArchive@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Serialize
PUBLIC	?Dump@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXAAVCDumpContext@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Dump
PUBLIC	?AssertValid@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXXZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::AssertValid
PUBLIC	??_G?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEPAXI@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`scalar deleting destructor'
PUBLIC	??0CDistributeManager@@QAE@XZ			; CDistributeManager::CDistributeManager
PUBLIC	??1CDistributeManager@@UAE@XZ			; CDistributeManager::~CDistributeManager
PUBLIC	?RemoveAll@CDistributeManager@@QAEXXZ		; CDistributeManager::RemoveAll
PUBLIC	?InsertDistributeNode@CDistributeManager@@QAEHABUtagDistributeInfo@@@Z ; CDistributeManager::InsertDistributeNode
PUBLIC	?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z ; CDistributeManager::RemoveDistributeNode
PUBLIC	?RemoveDistributeNode@CDistributeManager@@QAEXPAUIServerUserItem@@@Z ; CDistributeManager::RemoveDistributeNode
PUBLIC	?PerformDistribute@CDistributeManager@@QAEGAAV?$CWHArray@UtagDistributeInfo@@ABU1@@@G@Z ; CDistributeManager::PerformDistribute
PUBLIC	?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z ; CDistributeManager::SearchNode
PUBLIC	?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z ; CDistributeManager::GetUserSameTableInfo
PUBLIC	?RemoveUserSameTableInfo@CDistributeManager@@QAEXK@Z ; CDistributeManager::RemoveUserSameTableInfo
PUBLIC	?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ ; CDistributeManager::ActiveSameTableInfo
PUBLIC	?RemoveSameTableInfo@CDistributeManager@@IAEXPAUtagSameTableInfo@@@Z ; CDistributeManager::RemoveSameTableInfo
PUBLIC	?FilterRuleExitsIPAddr@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z ; CDistributeManager::FilterRuleExitsIPAddr
PUBLIC	?FilterRuleIsAllAndroid@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@QAUIServerUserItem@@@Z ; CDistributeManager::FilterRuleIsAllAndroid
PUBLIC	?FilterRuleIsLastSameTable@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z ; CDistributeManager::FilterRuleIsLastSameTable
PUBLIC	??_GCDistributeManager@@UAEPAXI@Z		; CDistributeManager::`scalar deleting destructor'
PUBLIC	?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
PUBLIC	?Add@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEHABUtagDistributeInfo@@@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::Add
PUBLIC	?GetAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetAt
PUBLIC	?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXHABUtagDistributeInfo@@@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetAtGrow
PUBLIC	??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
PUBLIC	??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::AllocMemory
PUBLIC	??0CPair@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAE@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CPair::CPair
PUBLIC	??0CAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CAssoc::CAssoc
PUBLIC	??$SerializeElements@PAUtagSameTableInfo@@@@YGXAAVCArchive@@PAPAUtagSameTableInfo@@H@Z ; SerializeElements<tagSameTableInfo *>
PUBLIC	??$DumpElements@PAUtagSameTableInfo@@@@YGXAAVCDumpContext@@PBQAUtagSameTableInfo@@H@Z ; DumpElements<tagSameTableInfo *>
PUBLIC	??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_05PLCFPPOI@with?5@			; `string'
PUBLIC	??_C@_09HCLNAIDE@?5elements@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_03OHJIHPJH@?6?7?$FL@			; `string'
PUBLIC	??_C@_04OAFLPOMH@?$FN?5?$DN?5@			; `string'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_7?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`vftable'
PUBLIC	??_7?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`vftable'
PUBLIC	??_7CDistributeManager@@6B@			; CDistributeManager::`vftable'
PUBLIC	?__LINE__Var@?0???1CDistributeNodePool@@QAE@XZ@4JA ; `CDistributeNodePool::~CDistributeNodePool'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@GOEFAIJG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0???1CDistributeManager@@UAE@XZ@4JA ; `CDistributeManager::~CDistributeManager'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ@4JA ; `CDistributeManager::ActiveSameTableInfo'::`1'::__LINE__Var
PUBLIC	__TI2PAD
PUBLIC	__CTA2PAD
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_C@_0BH@OJNKCMBI@?D?Z?$LE?f?$LC?$LL?W?c?0?$LG?T?O?s?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM?$CB@ ; `string'
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_R4?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@@8 ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8	; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8	; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8 ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CMap@KKPAUtagSameTableInfo@@PAU1@@@@8	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8 ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDistributeManager@@6B@			; CDistributeManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDistributeManager@@@8			; CDistributeManager `RTTI Type Descriptor'
PUBLIC	??_R3CDistributeManager@@8			; CDistributeManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDistributeManager@@8			; CDistributeManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDistributeManager@@8		; CDistributeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__ldiv:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:PROC ; AfxAssertValidObject
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	??1CObject@@UAE@XZ:PROC				; CObject::~CObject
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	??0CObject@@IAE@XZ:PROC				; CObject::CObject
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?AssertValid@CObject@@UBEXXZ:PROC		; CObject::AssertValid
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:PROC	; CObject::Dump
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:PROC		; AfxIsValidAddress
EXTRN	??_U@YAPAXIPBDH@Z:PROC				; operator new[]
EXTRN	?IsStoring@CArchive@@QBEHXZ:PROC		; CArchive::IsStoring
EXTRN	?EnsureRead@CArchive@@QAEXPAXI@Z:PROC		; CArchive::EnsureRead
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?GetDepth@CDumpContext@@QBEHXZ:PROC		; CDumpContext::GetDepth
EXTRN	??6CDumpContext@@QAEAAV0@PBD@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@H@Z:PROC		; CDumpContext::operator<<
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	??_E?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAEPAXI@Z:PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`vector deleting destructor'
EXTRN	??_E?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEPAXI@Z:PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`vector deleting destructor'
EXTRN	??_ECDistributeManager@@UAEPAXI@Z:PROC		; CDistributeManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CDistributeManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDistributeManager@@8 DD FLAT:??_R0?AVCDistributeManager@@@8 ; CDistributeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDistributeManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CDistributeManager@@8
rdata$r	SEGMENT
??_R2CDistributeManager@@8 DD FLAT:??_R1A@?0A@EA@CDistributeManager@@8 ; CDistributeManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDistributeManager@@8
rdata$r	SEGMENT
??_R3CDistributeManager@@8 DD 00H			; CDistributeManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDistributeManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDistributeManager@@@8
data$r	SEGMENT
??_R0?AVCDistributeManager@@@8 DD FLAT:??_7type_info@@6B@ ; CDistributeManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDistributeManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDistributeManager@@6B@
rdata$r	SEGMENT
??_R4CDistributeManager@@6B@ DD 00H			; CDistributeManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDistributeManager@@@8
	DD	FLAT:??_R3CDistributeManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8 DD FLAT:??_R0?AV?$CMap@KKPAUtagSameTableInfo@@PAU1@@@@8 ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8
rdata$r	SEGMENT
??_R2?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8 ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8
rdata$r	SEGMENT
??_R3?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8 DD 00H	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CMap@KKPAUtagSameTableInfo@@PAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CMap@KKPAUtagSameTableInfo@@PAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CMap@KKPAUtagSameTableInfo@@PAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@ DD 00H	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CMap@KKPAUtagSameTableInfo@@PAU1@@@@8
	DD	FLAT:??_R3?$CMap@KKPAUtagSameTableInfo@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8 DD FLAT:??_R0?AV?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@@8 ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8 ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8 DD 00H	; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@ DD 00H ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@@8
	DD	FLAT:??_R3?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OJNKCMBI@?D?Z?$LE?f?$LC?$LL?W?c?0?$LG?T?O?s?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM?$CB@
CONST	SEGMENT
??_C@_0BH@OJNKCMBI@?D?Z?$LE?f?$LC?$LL?W?c?0?$LG?T?O?s?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM?$CB@ DB 0c4H
	DB	0daH, 0b4H, 0e6H, 0b2H, 0bbH, 0d7H, 0e3H, ',', 0b6H, 0d4H, 0cfH
	DB	0f3H, 0b4H, 0b4H, 0bdH, 0a8H, 0caH, 0a7H, 0b0H, 0dcH, '!', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?0??ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ@4JA DD 0173H ; `CDistributeManager::ActiveSameTableInfo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0???1CDistributeManager@@UAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1CDistributeManager@@UAE@XZ@4JA DD 05cH ; `CDistributeManager::~CDistributeManager'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EO@GOEFAIJG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EO@GOEFAIJG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0b1H, 0c8H, 0c8H, 0fcH, 0b7H, 0feH, 0ceH, 0f1H, '\d'
	DB	'istributemanager.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???1CDistributeNodePool@@QAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1CDistributeNodePool@@QAE@XZ@4JA DD 016H ; `CDistributeNodePool::~CDistributeNodePool'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CDistributeManager@@6B@
CONST	SEGMENT
??_7CDistributeManager@@6B@ DD FLAT:??_R4CDistributeManager@@6B@ ; CDistributeManager::`vftable'
	DD	FLAT:??_ECDistributeManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@
CONST	SEGMENT
??_7?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@ DD FLAT:??_R4?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXXZ
	DD	FLAT:?Dump@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@ DD FLAT:??_R4?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
CONST	SEGMENT
??_C@_04OAFLPOMH@?$FN?5?$DN?5@ DB '] = ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHJIHPJH@?6?7?$FL@
CONST	SEGMENT
??_C@_03OHJIHPJH@?6?7?$FL@ DB 0aH, 09H, '[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCLNAIDE@?5elements@
CONST	SEGMENT
??_C@_09HCLNAIDE@?5elements@ DB ' elements', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLCFPPOI@with?5@
CONST	SEGMENT
??_C@_05PLCFPPOI@with?5@ DB 'with ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\afxtempl.h', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ$0
__unwindtable$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ$2
__ehfuncinfo$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CDistributeManager@@UAE@XZ$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CDistributeManager@@UAE@XZ$0
__tryblocktable$??1CDistributeManager@@UAE@XZ DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??1CDistributeManager@@UAE@XZ$6
__ehfuncinfo$??1CDistributeManager@@UAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CDistributeManager@@UAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CDistributeManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1CDistributeManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDistributeManager@@UAE@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDistributeManager@@UAE@XZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDistributeManager@@UAE@XZ$4
	DD	02H
	DD	FLAT:__unwindfunclet$??1CDistributeManager@@UAE@XZ$5
	DD	03H
	DD	00H
	DD	03H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDistributeManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDistributeManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDistributeManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CDistributeManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CDistributeManager@@QAE@XZ$3
__ehfuncinfo$??0CDistributeManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CDistributeManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z$0
__ehfuncinfo$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ$0
__ehfuncinfo$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CDistributeNodePool@@QAE@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CDistributeNodePool@@QAE@XZ$0
__unwindtable$??1CDistributeNodePool@@QAE@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??1CDistributeNodePool@@QAE@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??1CDistributeNodePool@@QAE@XZ$2
__ehfuncinfo$??1CDistributeNodePool@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CDistributeNodePool@@QAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CDistributeNodePool@@QAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@PAUtagSameTableInfo@@@@YGXAAVCDumpContext@@PBQAUtagSameTableInfo@@H@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAUtagSameTableInfo@@@@YGXAAVCDumpContext@@PBQAUtagSameTableInfo@@H@Z PROC ; DumpElements<tagSameTableInfo *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAUtagSameTableInfo@@@@YGXAAVCDumpContext@@PBQAUtagSameTableInfo@@H@Z ENDP ; DumpElements<tagSameTableInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAUtagSameTableInfo@@@@YGXAAVCArchive@@PAPAUtagSameTableInfo@@H@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAUtagSameTableInfo@@@@YGXAAVCArchive@@PAPAUtagSameTableInfo@@H@Z PROC ; SerializeElements<tagSameTableInfo *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAUtagSameTableInfo@@@@YGXAAVCArchive@@PAPAUtagSameTableInfo@@H@Z ENDP ; SerializeElements<tagSameTableInfo *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??0CAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@K@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CAssoc::CAssoc, COMDAT
; _this$ = ecx

; 1267 : 		CAssoc( ARG_KEY key ) : CPair( key ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CPair@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAE@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CPair::CPair
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0CAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@K@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CAssoc::CAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CPair@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyval$ = 8						; size = 4
??0CPair@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAE@K@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CPair::CPair, COMDAT
; _this$ = ecx

; 1256 : 		CPair( ARG_KEY keyval ) : key( keyval )	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _keyval$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??0CPair@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAE@K@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CPair::CPair
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e d7 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	6b 45 08 14	 imul	 eax, DWORD PTR _nNewCount$[ebp], 20
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009c	83 c4 04	 add	 esp, 4
  0009f	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a2	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a5	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	6b 48 10 14	 imul	 ecx, DWORD PTR [eax+16], 20
  000af	51		 push	 ecx
  000b0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b6	50		 push	 eax
  000b7	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _memcpy
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000c9	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000cc	6b d1 14	 imul	 edx, ecx, 20
  000cf	52		 push	 edx
  000d0	6a 00		 push	 0
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	6b 48 10 14	 imul	 ecx, DWORD PTR [eax+16], 20
  000d9	03 4d f4	 add	 ecx, DWORD PTR _pNewData$3[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 _memset
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000eb	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000ee	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f1	52		 push	 edx
  000f2	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000f7	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00100	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  00109	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[], COMDAT
; _this$ = ecx

; 121  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 122  : 	return GetAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetAt

; 123  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXHABUtagDistributeInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXHABUtagDistributeInfo@@@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	6b 45 08 14	 imul	 eax, DWORD PTR _nIndex$[ebp], 20
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00058	03 d0		 add	 edx, eax
  0005a	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 0a		 mov	 DWORD PTR [edx], ecx
  00061	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00064	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00067	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006a	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0006d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00070	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00073	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00076	89 42 10	 mov	 DWORD PTR [edx+16], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXHABUtagDistributeInfo@@@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 38		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1a		 jge	 SHORT $LN3@SetSize
  00064	6b 45 f8 14	 imul	 eax, DWORD PTR _i$3[ebp], 20
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0006e	50		 push	 eax
  0006f	6a 14		 push	 20			; 00000014H
  00071	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00076	83 c4 08	 add	 esp, 8
  00079	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007c	eb d5		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  0007e	eb 4b		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00086	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00089	7d 40		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008b	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  0008e	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00091	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00093	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00096	83 c0 01	 add	 eax, 1
  00099	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a2	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a5	7d 02		 jge	 SHORT $LN6@SetSize
  000a7	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000af	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b2	6b d1 14	 imul	 edx, ecx, 20
  000b5	52		 push	 edx
  000b6	6a 00		 push	 0
  000b8	6b 45 08 14	 imul	 eax, DWORD PTR _nNewSize$[ebp], 20
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _memset
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d1	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 04 00	 ret	 4
?SetSize@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXH@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	6b 45 08 14	 imul	 eax, DWORD PTR _nIndex$[ebp], 20
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	03 41 04	 add	 eax, DWORD PTR [ecx+4]
$LN3@ElementAt:

; 237  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetAt, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 223  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN5@GetAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN6@GetAt
$LN5@GetAt:
  0001d	68 df 00 00 00	 push	 223			; 000000dfH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN6@GetAt
  00030	cc		 int	 3
$LN6@GetAt:

; 224  : 	if ((nIndex<0)||(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7c 0b		 jl	 SHORT $LN3@GetAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@GetAt
$LN3@GetAt:
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetAt:

; 225  : 	
; 226  : 	return m_pData[nIndex];

  00047	6b 45 08 14	 imul	 eax, DWORD PTR _nIndex$[ebp], 20
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	03 41 04	 add	 eax, DWORD PTR [ecx+4]
$LN4@GetAt:

; 227  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?GetAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEHABUtagDistributeInfo@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEHABUtagDistributeInfo@@@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEXHABUtagDistributeInfo@@@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEHABUtagDistributeInfo@@@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCDistributeManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDistributeManager@@UAEPAXI@Z PROC			; CDistributeManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CDistributeManager@@UAE@XZ ; CDistributeManager::~CDistributeManager
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 5c		 push	 92			; 0000005cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCDistributeManager@@UAEPAXI@Z ENDP			; CDistributeManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?FilterRuleIsLastSameTable@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z
_TEXT	SEGMENT
tv79 = -84						; size = 4
_i$1 = -16						; size = 2
_nIndex$2 = -12						; size = 4
_pSameTableInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_DistributeInfoArray$ = 8				; size = 4
_dwUserID$ = 12						; size = 4
?FilterRuleIsLastSameTable@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z PROC ; CDistributeManager::FilterRuleIsLastSameTable, COMDAT
; _this$ = ecx

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 454  : 	//参数校验
; 455  : 	if(DistributeInfoArray.GetCount()==0) return FALSE;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  00014	85 c0		 test	 eax, eax
  00016	75 07		 jne	 SHORT $LN8@FilterRule
  00018	33 c0		 xor	 eax, eax
  0001a	e9 99 00 00 00	 jmp	 $LN1@FilterRule
$LN8@FilterRule:

; 456  : 
; 457  : 	//变量定义
; 458  : 	tagSameTableInfo * pSameTableInfo=NULL;

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pSameTableInfo$[ebp], 0

; 459  : 
; 460  : 	for(INT_PTR nIndex=0;nIndex<DistributeInfoArray.GetCount();nIndex++)

  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nIndex$2[ebp], 0
  0002d	eb 09		 jmp	 SHORT $LN4@FilterRule
$LN2@FilterRule:
  0002f	8b 45 f4	 mov	 eax, DWORD PTR _nIndex$2[ebp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 45 f4	 mov	 DWORD PTR _nIndex$2[ebp], eax
$LN4@FilterRule:
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  0003b	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  00040	39 45 f4	 cmp	 DWORD PTR _nIndex$2[ebp], eax
  00043	7d 71		 jge	 SHORT $LN3@FilterRule

; 461  : 	{
; 462  : 		pSameTableInfo = GetUserSameTableInfo(DistributeInfoArray[nIndex].pIServerUserItem->GetUserID());

  00045	8b 45 f4	 mov	 eax, DWORD PTR _nIndex$2[ebp]
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  0004c	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  00051	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00054	89 4d ac	 mov	 DWORD PTR tv79[ebp], ecx
  00057	8b 55 ac	 mov	 edx, DWORD PTR tv79[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 4d ac	 mov	 ecx, DWORD PTR tv79[ebp]
  0005f	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  00062	ff d2		 call	 edx
  00064	50		 push	 eax
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z ; CDistributeManager::GetUserSameTableInfo
  0006d	89 45 f8	 mov	 DWORD PTR _pSameTableInfo$[ebp], eax

; 463  : 		if(pSameTableInfo!=NULL)

  00070	83 7d f8 00	 cmp	 DWORD PTR _pSameTableInfo$[ebp], 0
  00074	74 3b		 je	 SHORT $LN9@FilterRule

; 464  : 		{
; 465  : 			for(WORD i=0;i<pSameTableInfo->wPlayerCount;i++)

  00076	33 c0		 xor	 eax, eax
  00078	66 89 45 f0	 mov	 WORD PTR _i$1[ebp], ax
  0007c	eb 0c		 jmp	 SHORT $LN7@FilterRule
$LN5@FilterRule:
  0007e	66 8b 45 f0	 mov	 ax, WORD PTR _i$1[ebp]
  00082	66 83 c0 01	 add	 ax, 1
  00086	66 89 45 f0	 mov	 WORD PTR _i$1[ebp], ax
$LN7@FilterRule:
  0008a	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _pSameTableInfo$[ebp]
  00091	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00094	3b c2		 cmp	 eax, edx
  00096	7d 19		 jge	 SHORT $LN9@FilterRule

; 466  : 			{
; 467  : 				if(pSameTableInfo->wPlayerIDSet[i]==dwUserID) return TRUE;				

  00098	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _pSameTableInfo$[ebp]
  0009f	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  000a3	3b 55 0c	 cmp	 edx, DWORD PTR _dwUserID$[ebp]
  000a6	75 07		 jne	 SHORT $LN10@FilterRule
  000a8	b8 01 00 00 00	 mov	 eax, 1
  000ad	eb 09		 jmp	 SHORT $LN1@FilterRule
$LN10@FilterRule:

; 468  : 			}

  000af	eb cd		 jmp	 SHORT $LN5@FilterRule
$LN9@FilterRule:

; 469  : 		}
; 470  : 	}

  000b1	e9 79 ff ff ff	 jmp	 $LN2@FilterRule
$LN3@FilterRule:

; 471  : 	
; 472  : 	return FALSE;

  000b6	33 c0		 xor	 eax, eax
$LN1@FilterRule:

; 473  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
?FilterRuleIsLastSameTable@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z ENDP ; CDistributeManager::FilterRuleIsLastSameTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?FilterRuleIsAllAndroid@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@QAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv95 = -80						; size = 4
tv78 = -80						; size = 4
_nIndex$1 = -12						; size = 4
_wAndroidCount$ = -8					; size = 2
_this$ = -4						; size = 4
_DistributeInfoArray$ = 8				; size = 4
_pIServerUserItem$ = 12					; size = 4
?FilterRuleIsAllAndroid@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@QAUIServerUserItem@@@Z PROC ; CDistributeManager::FilterRuleIsAllAndroid, COMDAT
; _this$ = ecx

; 434  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	//参数校验
; 436  : 	if(pIServerUserItem==NULL || DistributeInfoArray.GetCount()==0) return FALSE;

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00010	74 0c		 je	 SHORT $LN6@FilterRule
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  00015	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  0001a	85 c0		 test	 eax, eax
  0001c	75 07		 jne	 SHORT $LN5@FilterRule
$LN6@FilterRule:
  0001e	33 c0		 xor	 eax, eax
  00020	e9 97 00 00 00	 jmp	 $LN1@FilterRule
$LN5@FilterRule:

; 437  : 
; 438  : 	//变量定义
; 439  : 	WORD wAndroidCount=0;

  00025	33 c0		 xor	 eax, eax
  00027	66 89 45 f8	 mov	 WORD PTR _wAndroidCount$[ebp], ax

; 440  : 
; 441  : 	//统计机器
; 442  : 	for(INT_PTR nIndex=0;nIndex<DistributeInfoArray.GetCount();nIndex++)

  0002b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nIndex$1[ebp], 0
  00032	eb 09		 jmp	 SHORT $LN4@FilterRule
$LN2@FilterRule:
  00034	8b 45 f4	 mov	 eax, DWORD PTR _nIndex$1[ebp]
  00037	83 c0 01	 add	 eax, 1
  0003a	89 45 f4	 mov	 DWORD PTR _nIndex$1[ebp], eax
$LN4@FilterRule:
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  00040	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  00045	39 45 f4	 cmp	 DWORD PTR _nIndex$1[ebp], eax
  00048	7d 38		 jge	 SHORT $LN3@FilterRule

; 443  : 	{
; 444  : 		if(DistributeInfoArray[nIndex].pIServerUserItem->IsAndroidUser()==true)

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _nIndex$1[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  00051	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  00056	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00059	89 4d b0	 mov	 DWORD PTR tv78[ebp], ecx
  0005c	8b 55 b0	 mov	 edx, DWORD PTR tv78[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	8b 4d b0	 mov	 ecx, DWORD PTR tv78[ebp]
  00064	8b 90 d0 00 00
	00		 mov	 edx, DWORD PTR [eax+208]
  0006a	ff d2		 call	 edx
  0006c	0f b6 c0	 movzx	 eax, al
  0006f	83 f8 01	 cmp	 eax, 1
  00072	75 0c		 jne	 SHORT $LN7@FilterRule

; 445  : 			++wAndroidCount;

  00074	66 8b 45 f8	 mov	 ax, WORD PTR _wAndroidCount$[ebp]
  00078	66 83 c0 01	 add	 ax, 1
  0007c	66 89 45 f8	 mov	 WORD PTR _wAndroidCount$[ebp], ax
$LN7@FilterRule:

; 446  : 	}

  00080	eb b2		 jmp	 SHORT $LN2@FilterRule
$LN3@FilterRule:

; 447  : 
; 448  : 	return (wAndroidCount==DistributeInfoArray.GetCount()) && pIServerUserItem->IsAndroidUser();

  00082	0f b7 75 f8	 movzx	 esi, WORD PTR _wAndroidCount$[ebp]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  00089	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  0008e	3b f0		 cmp	 esi, eax
  00090	75 20		 jne	 SHORT $LN9@FilterRule
  00092	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00095	8b 10		 mov	 edx, DWORD PTR [eax]
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0009a	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  000a0	ff d0		 call	 eax
  000a2	0f b6 c8	 movzx	 ecx, al
  000a5	85 c9		 test	 ecx, ecx
  000a7	74 09		 je	 SHORT $LN9@FilterRule
  000a9	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv95[ebp], 1
  000b0	eb 07		 jmp	 SHORT $LN10@FilterRule
$LN9@FilterRule:
  000b2	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN10@FilterRule:
  000b9	8b 45 b0	 mov	 eax, DWORD PTR tv95[ebp]
$LN1@FilterRule:

; 449  : }

  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
?FilterRuleIsAllAndroid@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@QAUIServerUserItem@@@Z ENDP ; CDistributeManager::FilterRuleIsAllAndroid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?FilterRuleExitsIPAddr@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z
_TEXT	SEGMENT
_nIndex$1 = -8						; size = 4
_this$ = -4						; size = 4
_DistributeInfoArray$ = 8				; size = 4
_dwClientAddr$ = 12					; size = 4
?FilterRuleExitsIPAddr@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z PROC ; CDistributeManager::FilterRuleExitsIPAddr, COMDAT
; _this$ = ecx

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 422  : 	//查找同IP
; 423  : 	for(INT_PTR nIndex=0;nIndex<DistributeInfoArray.GetCount();nIndex++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nIndex$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@FilterRule
$LN2@FilterRule:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _nIndex$1[ebp], eax
$LN4@FilterRule:
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  00021	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  00026	39 45 f8	 cmp	 DWORD PTR _nIndex$1[ebp], eax
  00029	7d 1d		 jge	 SHORT $LN3@FilterRule

; 424  : 	{
; 425  : 		if(DistributeInfoArray[nIndex].dwClientAddr==dwClientAddr)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$1[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  00032	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEABUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwClientAddr$[ebp]
  0003d	75 07		 jne	 SHORT $LN5@FilterRule

; 426  : 			return TRUE;

  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	eb 04		 jmp	 SHORT $LN1@FilterRule
$LN5@FilterRule:

; 427  : 	}

  00046	eb cd		 jmp	 SHORT $LN2@FilterRule
$LN3@FilterRule:

; 428  : 
; 429  : 	return FALSE;

  00048	33 c0		 xor	 eax, eax
$LN1@FilterRule:

; 430  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
?FilterRuleExitsIPAddr@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z ENDP ; CDistributeManager::FilterRuleExitsIPAddr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?RemoveSameTableInfo@CDistributeManager@@IAEXPAUtagSameTableInfo@@@Z
_TEXT	SEGMENT
_nIndex$1 = -8						; size = 4
_this$ = -4						; size = 4
_pSameTableInfo$ = 8					; size = 4
?RemoveSameTableInfo@CDistributeManager@@IAEXPAUtagSameTableInfo@@@Z PROC ; CDistributeManager::RemoveSameTableInfo, COMDAT
; _this$ = ecx

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 405  : 	ZeroMemory(pSameTableInfo,sizeof(tagSameTableInfo));

  0000c	6a 44		 push	 68			; 00000044H
  0000e	6a 00		 push	 0
  00010	8b 45 08	 mov	 eax, DWORD PTR _pSameTableInfo$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 406  : 	m_SameTableBuffer.Add(pSameTableInfo);

  0001c	8d 45 08	 lea	 eax, DWORD PTR _pSameTableInfo$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00026	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABQAUtagSameTableInfo@@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Add

; 407  : 
; 408  : 	//查找对象
; 409  : 	for(INT_PTR nIndex=0;nIndex<m_SameTableActive.GetCount();nIndex++)

  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nIndex$1[ebp], 0
  00032	eb 09		 jmp	 SHORT $LN4@RemoveSame
$LN2@RemoveSame:
  00034	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$1[ebp]
  00037	83 c0 01	 add	 eax, 1
  0003a	89 45 f8	 mov	 DWORD PTR _nIndex$1[ebp], eax
$LN4@RemoveSame:
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 20	 add	 ecx, 32			; 00000020H
  00043	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetCount
  00048	39 45 f8	 cmp	 DWORD PTR _nIndex$1[ebp], eax
  0004b	7d 2b		 jge	 SHORT $LN1@RemoveSame

; 410  : 	{
; 411  : 		if(m_SameTableActive[nIndex]==pSameTableInfo)

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$1[ebp]
  00050	50		 push	 eax
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 20	 add	 ecx, 32			; 00000020H
  00057	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::operator[]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	3b 4d 08	 cmp	 ecx, DWORD PTR _pSameTableInfo$[ebp]
  00061	75 13		 jne	 SHORT $LN5@RemoveSame

; 412  : 		{
; 413  : 			m_SameTableActive.RemoveAt(nIndex);

  00063	6a 01		 push	 1
  00065	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$1[ebp]
  00068	50		 push	 eax
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 20	 add	 ecx, 32			; 00000020H
  0006f	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAt

; 414  : 			break;

  00074	eb 02		 jmp	 SHORT $LN1@RemoveSame
$LN5@RemoveSame:

; 415  : 		}
; 416  : 	}

  00076	eb bc		 jmp	 SHORT $LN2@RemoveSame
$LN1@RemoveSame:

; 417  : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
?RemoveSameTableInfo@CDistributeManager@@IAEXPAUtagSameTableInfo@@@Z ENDP ; CDistributeManager::RemoveSameTableInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ
_TEXT	SEGMENT
tv133 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
_pSameTableInfo$4 = -28					; size = 4
_pSameTableInfo$5 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ PROC ; CDistributeManager::ActiveSameTableInfo, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 58	 sub	 esp, 88			; 00000058H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 372  : 	//查找缓冲
; 373  : 	if(m_SameTableBuffer.GetCount()>0)

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00035	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetCount
  0003a	85 c0		 test	 eax, eax
  0003c	7e 38		 jle	 SHORT $LN2@ActiveSame

; 374  : 	{
; 375  : 		tagSameTableInfo * pSameTableInfo = m_SameTableBuffer.GetAt(0);

  0003e	6a 00		 push	 0
  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00046	e8 00 00 00 00	 call	 ?GetAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetAt
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]
  0004d	89 45 e8	 mov	 DWORD PTR _pSameTableInfo$5[ebp], eax

; 376  : 		m_SameTableBuffer.RemoveAt(0);

  00050	6a 01		 push	 1
  00052	6a 00		 push	 0
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0005a	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAt

; 377  : 		m_SameTableActive.Add(pSameTableInfo);

  0005f	8d 45 e8	 lea	 eax, DWORD PTR _pSameTableInfo$5[ebp]
  00062	50		 push	 eax
  00063	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	83 c1 20	 add	 ecx, 32			; 00000020H
  00069	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABQAUtagSameTableInfo@@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Add

; 378  : 		return pSameTableInfo;

  0006e	8b 45 e8	 mov	 eax, DWORD PTR _pSameTableInfo$5[ebp]
  00071	e9 94 00 00 00	 jmp	 $LN5@ActiveSame
$LN2@ActiveSame:

; 379  : 	}
; 380  : 
; 381  : 	//创建对象
; 382  : 	try

  00076	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 383  : 	{
; 384  : 		//创建对象
; 385  : 		tagSameTableInfo * pSameTableInfo = new tagSameTableInfo;

  0007d	6a 44		 push	 68			; 00000044H
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4
  00087	89 45 98	 mov	 DWORD PTR tv133[ebp], eax
  0008a	8b 45 98	 mov	 eax, DWORD PTR tv133[ebp]
  0008d	89 45 a0	 mov	 DWORD PTR $T3[ebp], eax
  00090	8b 4d a0	 mov	 ecx, DWORD PTR $T3[ebp]
  00093	89 4d e4	 mov	 DWORD PTR _pSameTableInfo$4[ebp], ecx

; 386  : 		if(pSameTableInfo==NULL) throw(TEXT("内存不足,对象创建失败!"));

  00096	83 7d e4 00	 cmp	 DWORD PTR _pSameTableInfo$4[ebp], 0
  0009a	75 15		 jne	 SHORT $LN4@ActiveSame
  0009c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_C@_0BH@OJNKCMBI@?D?Z?$LE?f?$LC?$LL?W?c?0?$LG?T?O?s?$LE?$LE?$LN?$KI?J?$KH?$LA?$NM?$CB@
  000a3	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000a8	8d 45 9c	 lea	 eax, DWORD PTR $T2[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@ActiveSame:

; 387  : 
; 388  : 		//设置对象
; 389  : 		ZeroMemory(pSameTableInfo,sizeof(tagSameTableInfo));

  000b1	6a 44		 push	 68			; 00000044H
  000b3	6a 00		 push	 0
  000b5	8b 45 e4	 mov	 eax, DWORD PTR _pSameTableInfo$4[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _memset
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 390  : 		m_SameTableActive.Add(pSameTableInfo);

  000c1	8d 45 e4	 lea	 eax, DWORD PTR _pSameTableInfo$4[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	83 c1 20	 add	 ecx, 32			; 00000020H
  000cb	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABQAUtagSameTableInfo@@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Add

; 391  : 
; 392  : 		return pSameTableInfo;

  000d0	8b 45 e4	 mov	 eax, DWORD PTR _pSameTableInfo$4[ebp]
  000d3	eb 35		 jmp	 SHORT $LN5@ActiveSame
__catch$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ$0:

; 393  : 	}
; 394  : 	catch(...)
; 395  : 	{
; 396  : 		ASSERT(FALSE);

  000d5	33 c0		 xor	 eax, eax
  000d7	75 19		 jne	 SHORT $LN6@ActiveSame
  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ@4JA
  000df	83 c1 19	 add	 ecx, 25			; 00000019H
  000e2	51		 push	 ecx
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GOEFAIJG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000e8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ed	85 c0		 test	 eax, eax
  000ef	74 01		 je	 SHORT $LN6@ActiveSame
  000f1	cc		 int	 3
$LN6@ActiveSame:

; 397  : 	}

  000f2	b8 00 00 00 00	 mov	 eax, $LN10@ActiveSame
  000f7	c3		 ret	 0
  000f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ff	eb 07		 jmp	 SHORT __tryend$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ$1
$LN10@ActiveSame:
  00101	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ$1:

; 398  : 
; 399  : 	return NULL;

  00108	33 c0		 xor	 eax, eax
$LN5@ActiveSame:

; 400  : }

  0010a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00114	59		 pop	 ecx
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ ENDP ; CDistributeManager::ActiveSameTableInfo
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?RemoveUserSameTableInfo@CDistributeManager@@QAEXK@Z
_TEXT	SEGMENT
_pSameTableInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?RemoveUserSameTableInfo@CDistributeManager@@QAEXK@Z PROC ; CDistributeManager::RemoveUserSameTableInfo, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  : 	//变量定义
; 360  : 	tagSameTableInfo * pSameTableInfo;
; 361  : 	if(m_SameTableMap.Lookup(dwUserID,pSameTableInfo)==TRUE)

  0000c	8d 45 f8	 lea	 eax, DWORD PTR _pSameTableInfo$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 34	 add	 ecx, 52			; 00000034H
  0001a	e8 00 00 00 00	 call	 ?Lookup@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEHKAAPAUtagSameTableInfo@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Lookup
  0001f	83 f8 01	 cmp	 eax, 1
  00022	75 1b		 jne	 SHORT $LN1@RemoveUser

; 362  : 	{
; 363  : 		//移除信息
; 364  : 		m_SameTableMap.RemoveKey(dwUserID);

  00024	8b 45 08	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 34	 add	 ecx, 52			; 00000034H
  0002e	e8 00 00 00 00	 call	 ?RemoveKey@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEHK@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveKey

; 365  : 		RemoveSameTableInfo(pSameTableInfo);		

  00033	8b 45 f8	 mov	 eax, DWORD PTR _pSameTableInfo$[ebp]
  00036	50		 push	 eax
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?RemoveSameTableInfo@CDistributeManager@@IAEXPAUtagSameTableInfo@@@Z ; CDistributeManager::RemoveSameTableInfo
$LN1@RemoveUser:

; 366  : 	}
; 367  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?RemoveUserSameTableInfo@CDistributeManager@@QAEXK@Z ENDP ; CDistributeManager::RemoveUserSameTableInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z
_TEXT	SEGMENT
_pSameTableInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z PROC ; CDistributeManager::GetUserSameTableInfo, COMDAT
; _this$ = ecx

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 345  : 	//变量定义
; 346  : 	tagSameTableInfo * pSameTableInfo;
; 347  : 	if(m_SameTableMap.Lookup(dwUserID,pSameTableInfo)==FALSE)

  0000c	8d 45 f8	 lea	 eax, DWORD PTR _pSameTableInfo$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 34	 add	 ecx, 52			; 00000034H
  0001a	e8 00 00 00 00	 call	 ?Lookup@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEHKAAPAUtagSameTableInfo@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Lookup
  0001f	85 c0		 test	 eax, eax
  00021	75 1f		 jne	 SHORT $LN2@GetUserSam

; 348  : 	{
; 349  : 		pSameTableInfo = ActiveSameTableInfo();

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?ActiveSameTableInfo@CDistributeManager@@IAEPAUtagSameTableInfo@@XZ ; CDistributeManager::ActiveSameTableInfo
  0002b	89 45 f8	 mov	 DWORD PTR _pSameTableInfo$[ebp], eax

; 350  : 		m_SameTableMap[dwUserID] = pSameTableInfo;

  0002e	8b 45 08	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 34	 add	 ecx, 52			; 00000034H
  00038	e8 00 00 00 00	 call	 ??A?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEAAPAUtagSameTableInfo@@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::operator[]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _pSameTableInfo$[ebp]
  00040	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@GetUserSam:

; 351  : 	}
; 352  : 
; 353  : 	return pSameTableInfo;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _pSameTableInfo$[ebp]

; 354  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z ENDP ; CDistributeManager::GetUserSameTableInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z
_TEXT	SEGMENT
_pMoveNode$ = -8					; size = 4
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z PROC ; CDistributeManager::SearchNode, COMDAT
; _this$ = ecx

; 322  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 323  : 	if (m_pHeadNode==NULL) return NULL;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00013	75 04		 jne	 SHORT $LN4@SearchNode
  00015	33 c0		 xor	 eax, eax
  00017	eb 2c		 jmp	 SHORT $LN1@SearchNode
$LN4@SearchNode:

; 324  : 
; 325  : 	//设置变量
; 326  : 	tagDistributeNode *pMoveNode=m_pHeadNode;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0001f	89 4d f8	 mov	 DWORD PTR _pMoveNode$[ebp], ecx
$LN2@SearchNode:

; 327  : 
; 328  : 	//查找结点
; 329  : 	while (pMoveNode!=NULL)

  00022	83 7d f8 00	 cmp	 DWORD PTR _pMoveNode$[ebp], 0
  00026	74 1b		 je	 SHORT $LN3@SearchNode

; 330  : 	{
; 331  : 		//接口判断
; 332  : 		if (pMoveNode->DistributeInfo.pIServerUserItem==pIServerUserItem)

  00028	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  0002b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002e	3b 4d 08	 cmp	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00031	75 05		 jne	 SHORT $LN5@SearchNode

; 333  : 			return pMoveNode;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  00036	eb 0d		 jmp	 SHORT $LN1@SearchNode
$LN5@SearchNode:

; 334  : 
; 335  : 		//向前推进
; 336  : 		pMoveNode=pMoveNode->pNextDistributeNode;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	89 4d f8	 mov	 DWORD PTR _pMoveNode$[ebp], ecx

; 337  : 	}

  00041	eb df		 jmp	 SHORT $LN2@SearchNode
$LN3@SearchNode:

; 338  : 
; 339  : 	return NULL;

  00043	33 c0		 xor	 eax, eax
$LN1@SearchNode:

; 340  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z ENDP ; CDistributeManager::SearchNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?PerformDistribute@CDistributeManager@@QAEGAAV?$CWHArray@UtagDistributeInfo@@ABU1@@@G@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
_bFirstSuccess$1 = -24					; size = 4
_dwCurrentStamp$ = -20					; size = 4
_wRandNodeIndex$2 = -16					; size = 2
_pMoveStartNode$ = -12					; size = 4
_pMoveNode$ = -8					; size = 4
_this$ = -4						; size = 4
_DistributeInfoArray$ = 8				; size = 4
_wNeedCount$ = 12					; size = 2
?PerformDistribute@CDistributeManager@@QAEGAAV?$CWHArray@UtagDistributeInfo@@ABU1@@@G@Z PROC ; CDistributeManager::PerformDistribute, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 	//定义变量
; 250  : 	tagDistributeNode  * pMoveNode=NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pMoveNode$[ebp], 0

; 251  : 	tagDistributeNode  * pMoveStartNode=NULL;

  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pMoveStartNode$[ebp], 0

; 252  : 	if (m_pHeadNode!=NULL && m_wNodeCount>1)

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00021	74 6a		 je	 SHORT $LN7@PerformDis
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  0002a	83 f9 01	 cmp	 ecx, 1
  0002d	7e 5e		 jle	 SHORT $LN7@PerformDis

; 253  : 	{
; 254  : 		pMoveNode = m_pHeadNode;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00035	89 4d f8	 mov	 DWORD PTR _pMoveNode$[ebp], ecx

; 255  : 		WORD wRandNodeIndex=rand()%m_wNodeCount;		

  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	0f b7 49 04	 movzx	 ecx, WORD PTR [ecx+4]
  00045	99		 cdq
  00046	f7 f9		 idiv	 ecx
  00048	66 89 55 f0	 mov	 WORD PTR _wRandNodeIndex$2[ebp], dx
$LN2@PerformDis:

; 256  : 		while(wRandNodeIndex-->0)

  0004c	0f b7 45 f0	 movzx	 eax, WORD PTR _wRandNodeIndex$2[ebp]
  00050	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
  00053	66 8b 4d f0	 mov	 cx, WORD PTR _wRandNodeIndex$2[ebp]
  00057	66 83 e9 01	 sub	 cx, 1
  0005b	66 89 4d f0	 mov	 WORD PTR _wRandNodeIndex$2[ebp], cx
  0005f	83 7d a4 00	 cmp	 DWORD PTR tv78[ebp], 0
  00063	7e 1c		 jle	 SHORT $LN3@PerformDis

; 257  : 		{
; 258  : 			if(pMoveNode==NULL)

  00065	83 7d f8 00	 cmp	 DWORD PTR _pMoveNode$[ebp], 0
  00069	75 0b		 jne	 SHORT $LN8@PerformDis

; 259  : 			{
; 260  : 				pMoveNode = m_pHeadNode;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00071	89 4d f8	 mov	 DWORD PTR _pMoveNode$[ebp], ecx

; 261  : 				break;

  00074	eb 0b		 jmp	 SHORT $LN3@PerformDis
$LN8@PerformDis:

; 262  : 			}
; 263  : 			pMoveNode = pMoveNode->pNextDistributeNode; 

  00076	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  00079	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007c	89 4d f8	 mov	 DWORD PTR _pMoveNode$[ebp], ecx

; 264  : 		}

  0007f	eb cb		 jmp	 SHORT $LN2@PerformDis
$LN3@PerformDis:

; 265  : 
; 266  : 		//设置变量
; 267  : 		if(pMoveNode!=NULL) pMoveStartNode = pMoveNode;

  00081	83 7d f8 00	 cmp	 DWORD PTR _pMoveNode$[ebp], 0
  00085	74 06		 je	 SHORT $LN7@PerformDis
  00087	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  0008a	89 45 f4	 mov	 DWORD PTR _pMoveStartNode$[ebp], eax
$LN7@PerformDis:

; 268  : 	}
; 269  : 
; 270  : 	//
; 271  : 	if(pMoveNode==NULL) return 0;

  0008d	83 7d f8 00	 cmp	 DWORD PTR _pMoveNode$[ebp], 0
  00091	75 07		 jne	 SHORT $LN10@PerformDis
  00093	33 c0		 xor	 eax, eax
  00095	e9 53 01 00 00	 jmp	 $LN1@PerformDis
$LN10@PerformDis:

; 272  : 
; 273  : 	//获取时间戳
; 274  : 	DWORD dwCurrentStamp = (DWORD)time(NULL);

  0009a	6a 00		 push	 0
  0009c	e8 00 00 00 00	 call	 _time
  000a1	83 c4 04	 add	 esp, 4
  000a4	89 45 ec	 mov	 DWORD PTR _dwCurrentStamp$[ebp], eax
$LN6@PerformDis:

; 275  : 
; 276  : 	//获取用户
; 277  : 	do
; 278  : 	{
; 279  : 		//定义变量
; 280  : 		BOOL bFirstSuccess=TRUE;

  000a7	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bFirstSuccess$1[ebp], 1

; 281  : 
; 282  : 		//等待时间
; 283  : 		if (dwCurrentStamp-pMoveNode->DistributeInfo.dwInsertStamp< DISTRIBUTE_WAIT_TIMESTAMP)

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _dwCurrentStamp$[ebp]
  000b4	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000b7	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  000ba	73 07		 jae	 SHORT $LN11@PerformDis

; 284  : 			bFirstSuccess=FALSE;

  000bc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bFirstSuccess$1[ebp], 0
$LN11@PerformDis:

; 285  : 
; 286  : 		//等级过滤
; 287  : 		if (DistributeInfoArray.GetCount()>0 && DistributeInfoArray[0].wDistribute!=pMoveNode->DistributeInfo.wDistribute)

  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  000c6	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  000cb	85 c0		 test	 eax, eax
  000cd	7e 1f		 jle	 SHORT $LN12@PerformDis
  000cf	6a 00		 push	 0
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  000d4	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  000d9	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000dc	8b 4d f8	 mov	 ecx, DWORD PTR _pMoveNode$[ebp]
  000df	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  000e3	3b c2		 cmp	 eax, edx
  000e5	74 07		 je	 SHORT $LN12@PerformDis

; 288  : 			bFirstSuccess=FALSE;

  000e7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bFirstSuccess$1[ebp], 0
$LN12@PerformDis:

; 289  : 
; 290  : 		//机器过滤
; 291  : 		if (bFirstSuccess==TRUE && DistributeInfoArray.GetCount()==wNeedCount-1 && 

  000ee	83 7d e8 01	 cmp	 DWORD PTR _bFirstSuccess$1[ebp], 1
  000f2	75 31		 jne	 SHORT $LN13@PerformDis
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  000f7	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  000fc	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wNeedCount$[ebp]
  00100	83 e9 01	 sub	 ecx, 1
  00103	3b c1		 cmp	 eax, ecx
  00105	75 1e		 jne	 SHORT $LN13@PerformDis
  00107	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  0010a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0010d	51		 push	 ecx
  0010e	8b 55 08	 mov	 edx, DWORD PTR _DistributeInfoArray$[ebp]
  00111	52		 push	 edx
  00112	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	e8 00 00 00 00	 call	 ?FilterRuleIsAllAndroid@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@QAUIServerUserItem@@@Z ; CDistributeManager::FilterRuleIsAllAndroid
  0011a	85 c0		 test	 eax, eax
  0011c	74 07		 je	 SHORT $LN13@PerformDis

; 292  : 			FilterRuleIsAllAndroid(DistributeInfoArray,pMoveNode->DistributeInfo.pIServerUserItem))
; 293  : 			bFirstSuccess=FALSE;

  0011e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bFirstSuccess$1[ebp], 0
$LN13@PerformDis:

; 294  : 
; 295  : 		//同IP过滤
; 296  : 		if (bFirstSuccess==TRUE && (m_cbDistributeRule&DISTRIBUTE_SAME_ADDRESS)==0 &&  

  00125	83 7d e8 01	 cmp	 DWORD PTR _bFirstSuccess$1[ebp], 1
  00129	75 2b		 jne	 SHORT $LN14@PerformDis
  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	0f b6 48 58	 movzx	 ecx, BYTE PTR [eax+88]
  00132	83 e1 04	 and	 ecx, 4
  00135	75 1f		 jne	 SHORT $LN14@PerformDis
  00137	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  0013a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0013d	51		 push	 ecx
  0013e	8b 55 08	 mov	 edx, DWORD PTR _DistributeInfoArray$[ebp]
  00141	52		 push	 edx
  00142	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	e8 00 00 00 00	 call	 ?FilterRuleExitsIPAddr@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z ; CDistributeManager::FilterRuleExitsIPAddr
  0014a	83 f8 01	 cmp	 eax, 1
  0014d	75 07		 jne	 SHORT $LN14@PerformDis

; 297  : 			FilterRuleExitsIPAddr(DistributeInfoArray,pMoveNode->DistributeInfo.dwClientAddr)==TRUE)
; 298  : 			bFirstSuccess=FALSE;

  0014f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bFirstSuccess$1[ebp], 0
$LN14@PerformDis:

; 299  : 
; 300  : 		//同桌过滤
; 301  : 		if(bFirstSuccess==TRUE && (m_cbDistributeRule&DISTRIBUTE_LAST_TABLE)==0 &&  

  00156	83 7d e8 01	 cmp	 DWORD PTR _bFirstSuccess$1[ebp], 1
  0015a	75 38		 jne	 SHORT $LN15@PerformDis
  0015c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	0f b6 48 58	 movzx	 ecx, BYTE PTR [eax+88]
  00163	83 e1 02	 and	 ecx, 2
  00166	75 2c		 jne	 SHORT $LN15@PerformDis
  00168	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  0016b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0016e	8b 55 f8	 mov	 edx, DWORD PTR _pMoveNode$[ebp]
  00171	8b 01		 mov	 eax, DWORD PTR [ecx]
  00173	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00176	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  00179	ff d2		 call	 edx
  0017b	50		 push	 eax
  0017c	8b 45 08	 mov	 eax, DWORD PTR _DistributeInfoArray$[ebp]
  0017f	50		 push	 eax
  00180	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	e8 00 00 00 00	 call	 ?FilterRuleIsLastSameTable@CDistributeManager@@IAEHABV?$CWHArray@UtagDistributeInfo@@ABU1@@@K@Z ; CDistributeManager::FilterRuleIsLastSameTable
  00188	83 f8 01	 cmp	 eax, 1
  0018b	75 07		 jne	 SHORT $LN15@PerformDis

; 302  : 			FilterRuleIsLastSameTable(DistributeInfoArray,pMoveNode->DistributeInfo.pIServerUserItem->GetUserID())==TRUE)
; 303  : 			bFirstSuccess=FALSE;

  0018d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bFirstSuccess$1[ebp], 0
$LN15@PerformDis:

; 304  : 
; 305  : 		//获取成功
; 306  : 		if (bFirstSuccess==TRUE) DistributeInfoArray.Add(pMoveNode->DistributeInfo);

  00194	83 7d e8 01	 cmp	 DWORD PTR _bFirstSuccess$1[ebp], 1
  00198	75 0f		 jne	 SHORT $LN16@PerformDis
  0019a	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  0019d	83 c0 08	 add	 eax, 8
  001a0	50		 push	 eax
  001a1	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  001a4	e8 00 00 00 00	 call	 ?Add@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEHABUtagDistributeInfo@@@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::Add
$LN16@PerformDis:

; 307  : 
; 308  : 		//向前推进
; 309  : 		pMoveNode=pMoveNode->pNextDistributeNode;

  001a9	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  001ac	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001af	89 4d f8	 mov	 DWORD PTR _pMoveNode$[ebp], ecx

; 310  : 		if (pMoveNode==NULL) pMoveNode=m_pHeadNode;

  001b2	83 7d f8 00	 cmp	 DWORD PTR _pMoveNode$[ebp], 0
  001b6	75 09		 jne	 SHORT $LN17@PerformDis
  001b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bb	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  001be	89 4d f8	 mov	 DWORD PTR _pMoveNode$[ebp], ecx
$LN17@PerformDis:

; 311  : 
; 312  : 		//成功判断
; 313  : 		if (DistributeInfoArray.GetCount()==wNeedCount) break;

  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  001c4	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  001c9	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wNeedCount$[ebp]
  001cd	3b c1		 cmp	 eax, ecx
  001cf	75 02		 jne	 SHORT $LN4@PerformDis
  001d1	eb 12		 jmp	 SHORT $LN5@PerformDis
$LN4@PerformDis:

; 314  : 
; 315  : 	}while (pMoveNode && pMoveNode!=pMoveStartNode);

  001d3	83 7d f8 00	 cmp	 DWORD PTR _pMoveNode$[ebp], 0
  001d7	74 0c		 je	 SHORT $LN5@PerformDis
  001d9	8b 45 f8	 mov	 eax, DWORD PTR _pMoveNode$[ebp]
  001dc	3b 45 f4	 cmp	 eax, DWORD PTR _pMoveStartNode$[ebp]
  001df	0f 85 c2 fe ff
	ff		 jne	 $LN6@PerformDis
$LN5@PerformDis:

; 316  : 
; 317  : 	return (WORD)DistributeInfoArray.GetCount();

  001e5	8b 4d 08	 mov	 ecx, DWORD PTR _DistributeInfoArray$[ebp]
  001e8	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
$LN1@PerformDis:

; 318  : }

  001ed	5f		 pop	 edi
  001ee	5e		 pop	 esi
  001ef	5b		 pop	 ebx
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c2 08 00	 ret	 8
?PerformDistribute@CDistributeManager@@QAEGAAV?$CWHArray@UtagDistributeInfo@@ABU1@@@G@Z ENDP ; CDistributeManager::PerformDistribute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?RemoveDistributeNode@CDistributeManager@@QAEXPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_pDistributeNode$ = -8					; size = 4
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?RemoveDistributeNode@CDistributeManager@@QAEXPAUIServerUserItem@@@Z PROC ; CDistributeManager::RemoveDistributeNode, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 165  : 	//查找结点
; 166  : 	tagDistributeNode  *pDistributeNode=SearchNode(pIServerUserItem);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z ; CDistributeManager::SearchNode
  00018	89 45 f8	 mov	 DWORD PTR _pDistributeNode$[ebp], eax

; 167  : 	if (pDistributeNode!=NULL) 

  0001b	83 7d f8 00	 cmp	 DWORD PTR _pDistributeNode$[ebp], 0
  0001f	74 0c		 je	 SHORT $LN1@RemoveDist

; 168  : 	{
; 169  : 		RemoveDistributeNode(pDistributeNode);

  00021	8b 45 f8	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z ; CDistributeManager::RemoveDistributeNode
$LN1@RemoveDist:

; 170  : 	}
; 171  : 
; 172  : 	return;
; 173  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?RemoveDistributeNode@CDistributeManager@@QAEXPAUIServerUserItem@@@Z ENDP ; CDistributeManager::RemoveDistributeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z
_TEXT	SEGMENT
_pNextNode$ = -12					; size = 4
_pPrepNode$ = -8					; size = 4
_this$ = -4						; size = 4
_pDistributeNode$ = 8					; size = 4
?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z PROC ; CDistributeManager::RemoveDistributeNode, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	//参数校验
; 179  : 	if (pDistributeNode==NULL) return;

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pDistributeNode$[ebp], 0
  00010	75 05		 jne	 SHORT $LN2@RemoveDist
  00012	e9 e7 00 00 00	 jmp	 $LN1@RemoveDist
$LN2@RemoveDist:

; 180  : 
; 181  : 	//查找用户
; 182  : 	if (SearchNode(pDistributeNode->DistributeInfo.pIServerUserItem)==NULL) return;

  00017	8b 45 08	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  0001a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001d	51		 push	 ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z ; CDistributeManager::SearchNode
  00026	85 c0		 test	 eax, eax
  00028	75 05		 jne	 SHORT $LN3@RemoveDist
  0002a	e9 cf 00 00 00	 jmp	 $LN1@RemoveDist
$LN3@RemoveDist:

; 183  : 
; 184  : 	//变量定义
; 185  : 	tagDistributeNode  *pPrepNode=pDistributeNode->pPrepDistributeNode;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	89 4d f8	 mov	 DWORD PTR _pPrepNode$[ebp], ecx

; 186  : 	tagDistributeNode  *pNextNode=pDistributeNode->pNextDistributeNode;

  00037	8b 45 08	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  0003a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003d	89 4d f4	 mov	 DWORD PTR _pNextNode$[ebp], ecx

; 187  : 
; 188  : 	//调整结点
; 189  : 	if (pPrepNode!=NULL)

  00040	83 7d f8 00	 cmp	 DWORD PTR _pPrepNode$[ebp], 0
  00044	74 30		 je	 SHORT $LN4@RemoveDist

; 190  : 	{
; 191  : 		//中间结点
; 192  : 		if (pNextNode!=NULL)

  00046	83 7d f4 00	 cmp	 DWORD PTR _pNextNode$[ebp], 0
  0004a	74 13		 je	 SHORT $LN6@RemoveDist

; 193  : 		{
; 194  : 			pPrepNode->pNextDistributeNode=pNextNode;

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pPrepNode$[ebp]
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _pNextNode$[ebp]
  00052	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 195  : 			pNextNode->pPrepDistributeNode=pPrepNode;

  00055	8b 45 f4	 mov	 eax, DWORD PTR _pNextNode$[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _pPrepNode$[ebp]
  0005b	89 08		 mov	 DWORD PTR [eax], ecx

; 196  : 		}
; 197  : 		else

  0005d	eb 15		 jmp	 SHORT $LN7@RemoveDist
$LN6@RemoveDist:

; 198  : 		{
; 199  : 			//尾部结点
; 200  : 			if (pPrepNode->pNextDistributeNode==pDistributeNode)

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _pPrepNode$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	3b 4d 08	 cmp	 ecx, DWORD PTR _pDistributeNode$[ebp]
  00068	75 0a		 jne	 SHORT $LN7@RemoveDist

; 201  : 			{
; 202  : 				pPrepNode->pNextDistributeNode=NULL;

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _pPrepNode$[ebp]
  0006d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN7@RemoveDist:

; 203  : 			}
; 204  : 		}
; 205  : 	}
; 206  : 	else

  00074	eb 24		 jmp	 SHORT $LN5@RemoveDist
$LN4@RemoveDist:

; 207  : 	{
; 208  : 		//头部结点
; 209  : 		if (pNextNode!=NULL)

  00076	83 7d f4 00	 cmp	 DWORD PTR _pNextNode$[ebp], 0
  0007a	74 14		 je	 SHORT $LN9@RemoveDist

; 210  : 		{
; 211  : 			pNextNode->pPrepDistributeNode=NULL;

  0007c	8b 45 f4	 mov	 eax, DWORD PTR _pNextNode$[ebp]
  0007f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 212  : 			m_pHeadNode=pNextNode;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 4d f4	 mov	 ecx, DWORD PTR _pNextNode$[ebp]
  0008b	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 213  : 		}
; 214  : 		else

  0008e	eb 0a		 jmp	 SHORT $LN5@RemoveDist
$LN9@RemoveDist:

; 215  : 		{
; 216  : 			m_pHeadNode=NULL;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0
$LN5@RemoveDist:

; 217  : 		}
; 218  : 	}
; 219  : 
; 220  :     //更新数目
; 221  : 	if (pDistributeNode->DistributeInfo.pIServerUserItem->IsAndroidUser())

  0009a	8b 45 08	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  0009d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a0	8b 55 08	 mov	 edx, DWORD PTR _pDistributeNode$[ebp]
  000a3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a5	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  000a8	8b 90 d0 00 00
	00		 mov	 edx, DWORD PTR [eax+208]
  000ae	ff d2		 call	 edx
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	85 c0		 test	 eax, eax
  000b5	74 14		 je	 SHORT $LN11@RemoveDist

; 222  : 		--m_wAndroidCount;

  000b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  000be	66 83 e9 01	 sub	 cx, 1
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 223  : 	else

  000c9	eb 12		 jmp	 SHORT $LN12@RemoveDist
$LN11@RemoveDist:

; 224  : 		--m_wRealCount;

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  000d2	66 83 e9 01	 sub	 cx, 1
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN12@RemoveDist:

; 225  : 	--m_wNodeCount;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  000e4	66 83 e9 01	 sub	 cx, 1
  000e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000eb	66 89 4a 04	 mov	 WORD PTR [edx+4], cx

; 226  : 
; 227  : 	//安全释放
; 228  : 	m_DistributeNodePool.FreeNode(pDistributeNode);

  000ef	8b 45 08	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	83 c1 50	 add	 ecx, 80			; 00000050H
  000f9	e8 00 00 00 00	 call	 ?FreeNode@CDistributeNodePool@@QAEXPAX@Z ; CDistributeNodePool::FreeNode
$LN1@RemoveDist:

; 229  : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 04 00	 ret	 4
?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z ENDP ; CDistributeManager::RemoveDistributeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?InsertDistributeNode@CDistributeManager@@QAEHABUtagDistributeInfo@@@Z
_TEXT	SEGMENT
_pDistributeNode$1 = -8					; size = 4
_this$ = -4						; size = 4
_DistributeInfo$ = 8					; size = 4
?InsertDistributeNode@CDistributeManager@@QAEHABUtagDistributeInfo@@@Z PROC ; CDistributeManager::InsertDistributeNode, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	//查找用户
; 113  : 	if (SearchNode(DistributeInfo.pIServerUserItem)!=NULL) return true;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _DistributeInfo$[ebp]
  0000f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00012	51		 push	 ecx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z ; CDistributeManager::SearchNode
  0001b	85 c0		 test	 eax, eax
  0001d	74 0a		 je	 SHORT $LN2@InsertDist
  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	e9 55 01 00 00	 jmp	 $LN1@InsertDist
$LN2@InsertDist:

; 114  : 
; 115  : 	//头部判断
; 116  : 	if (m_pHeadNode==NULL)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00030	75 66		 jne	 SHORT $LN3@InsertDist

; 117  : 	{
; 118  : 		//分配结点
; 119  : 		m_pHeadNode = m_DistributeNodePool.AllocNode();

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 50	 add	 ecx, 80			; 00000050H
  00038	e8 00 00 00 00	 call	 ?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ ; CDistributeNodePool::AllocNode
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 120  : 		if(m_pHeadNode==NULL) return false;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  0004a	75 07		 jne	 SHORT $LN5@InsertDist
  0004c	33 c0		 xor	 eax, eax
  0004e	e9 2b 01 00 00	 jmp	 $LN1@InsertDist
$LN5@InsertDist:

; 121  : 
; 122  : 		//设置变量
; 123  : 		m_pHeadNode->pNextDistributeNode=NULL;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00059	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 124  : 		m_pHeadNode->pPrepDistributeNode=NULL;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00066	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 125  : 		CopyMemory(&m_pHeadNode->DistributeInfo,&DistributeInfo,sizeof(DistributeInfo));

  0006c	6a 14		 push	 20			; 00000014H
  0006e	8b 45 08	 mov	 eax, DWORD PTR _DistributeInfo$[ebp]
  00071	50		 push	 eax
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00078	83 c2 08	 add	 edx, 8
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 _memcpy
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 126  : 		m_pHeadNode->DistributeInfo.pPertainNode=m_pHeadNode;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0008a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00090	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 127  : 	}
; 128  : 	else

  00093	e9 8c 00 00 00	 jmp	 $LN4@InsertDist
$LN3@InsertDist:

; 129  : 	{
; 130  : 		//分配结点
; 131  : 		tagDistributeNode * pDistributeNode=m_DistributeNodePool.AllocNode();

  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	83 c1 50	 add	 ecx, 80			; 00000050H
  0009e	e8 00 00 00 00	 call	 ?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ ; CDistributeNodePool::AllocNode
  000a3	89 45 f8	 mov	 DWORD PTR _pDistributeNode$1[ebp], eax

; 132  : 		if (pDistributeNode==NULL) return false;

  000a6	83 7d f8 00	 cmp	 DWORD PTR _pDistributeNode$1[ebp], 0
  000aa	75 07		 jne	 SHORT $LN6@InsertDist
  000ac	33 c0		 xor	 eax, eax
  000ae	e9 cb 00 00 00	 jmp	 $LN1@InsertDist
$LN6@InsertDist:

; 133  : 
; 134  : 		//设置结点
; 135  : 		pDistributeNode->pNextDistributeNode=NULL;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _pDistributeNode$1[ebp]
  000b6	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 136  : 		pDistributeNode->pPrepDistributeNode=NULL;

  000bd	8b 45 f8	 mov	 eax, DWORD PTR _pDistributeNode$1[ebp]
  000c0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 137  : 		CopyMemory(&pDistributeNode->DistributeInfo,&DistributeInfo,sizeof(DistributeInfo));

  000c6	6a 14		 push	 20			; 00000014H
  000c8	8b 45 08	 mov	 eax, DWORD PTR _DistributeInfo$[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d f8	 mov	 ecx, DWORD PTR _pDistributeNode$1[ebp]
  000cf	83 c1 08	 add	 ecx, 8
  000d2	51		 push	 ecx
  000d3	e8 00 00 00 00	 call	 _memcpy
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 138  : 		pDistributeNode->DistributeInfo.pPertainNode=pDistributeNode;

  000db	8b 45 f8	 mov	 eax, DWORD PTR _pDistributeNode$1[ebp]
  000de	8b 4d f8	 mov	 ecx, DWORD PTR _pDistributeNode$1[ebp]
  000e1	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 139  : 		
; 140  : 		//表头结点
; 141  : 		if (m_pHeadNode->pNextDistributeNode!=NULL)

  000e4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000ea	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  000ee	74 1d		 je	 SHORT $LN7@InsertDist

; 142  : 		{
; 143  : 			m_pHeadNode->pNextDistributeNode->pPrepDistributeNode=pDistributeNode;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  000f6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f9	8b 45 f8	 mov	 eax, DWORD PTR _pDistributeNode$1[ebp]
  000fc	89 02		 mov	 DWORD PTR [edx], eax

; 144  : 			pDistributeNode->pNextDistributeNode=m_pHeadNode->pNextDistributeNode;

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00101	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00104	8b 55 f8	 mov	 edx, DWORD PTR _pDistributeNode$1[ebp]
  00107	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010a	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN7@InsertDist:

; 145  : 		}
; 146  : 		
; 147  : 		pDistributeNode->pPrepDistributeNode=m_pHeadNode;

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _pDistributeNode$1[ebp]
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00116	89 10		 mov	 DWORD PTR [eax], edx

; 148  : 		m_pHeadNode->pNextDistributeNode=pDistributeNode;

  00118	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0011e	8b 55 f8	 mov	 edx, DWORD PTR _pDistributeNode$1[ebp]
  00121	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN4@InsertDist:

; 149  : 	}
; 150  : 
; 151  : 	//更新数目
; 152  : 	if (DistributeInfo.pIServerUserItem->IsAndroidUser())

  00124	8b 45 08	 mov	 eax, DWORD PTR _DistributeInfo$[ebp]
  00127	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0012a	8b 55 08	 mov	 edx, DWORD PTR _DistributeInfo$[ebp]
  0012d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0012f	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00132	8b 90 d0 00 00
	00		 mov	 edx, DWORD PTR [eax+208]
  00138	ff d2		 call	 edx
  0013a	0f b6 c0	 movzx	 eax, al
  0013d	85 c0		 test	 eax, eax
  0013f	74 14		 je	 SHORT $LN8@InsertDist

; 153  : 		++m_wAndroidCount;

  00141	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00144	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  00148	66 83 c1 01	 add	 cx, 1
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014f	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 154  : 	else

  00153	eb 12		 jmp	 SHORT $LN9@InsertDist
$LN8@InsertDist:

; 155  : 		++m_wRealCount;

  00155	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00158	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  0015c	66 83 c1 01	 add	 cx, 1
  00160	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00163	66 89 4a 06	 mov	 WORD PTR [edx+6], cx
$LN9@InsertDist:

; 156  : 
; 157  : 	++m_wNodeCount;

  00167	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  0016e	66 83 c1 01	 add	 cx, 1
  00172	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00175	66 89 4a 04	 mov	 WORD PTR [edx+4], cx

; 158  : 
; 159  : 	return true;

  00179	b8 01 00 00 00	 mov	 eax, 1
$LN1@InsertDist:

; 160  : }

  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 04 00	 ret	 4
?InsertDistributeNode@CDistributeManager@@QAEHABUtagDistributeInfo@@@Z ENDP ; CDistributeManager::InsertDistributeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?RemoveAll@CDistributeManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveAll@CDistributeManager@@QAEXXZ PROC		; CDistributeManager::RemoveAll, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@RemoveAll:

; 234  : 	//释放内存
; 235  : 	while(m_pHeadNode!=NULL) RemoveDistributeNode(m_pHeadNode);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 54 00	 cmp	 DWORD PTR [eax+84], 0
  00013	74 11		 je	 SHORT $LN3@RemoveAll
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  0001b	51		 push	 ecx
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z ; CDistributeManager::RemoveDistributeNode
  00024	eb e6		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 236  : 
; 237  : 	//重置变量
; 238  : 	m_pHeadNode=NULL;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 239  : 	m_wNodeCount=0;

  00030	33 c0		 xor	 eax, eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 240  : 	m_wAndroidCount=0;

  00039	33 c0		 xor	 eax, eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 241  : 	m_wRealCount=0;

  00042	33 c0		 xor	 eax, eax
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 242  : 
; 243  : 	return;
; 244  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?RemoveAll@CDistributeManager@@QAEXXZ ENDP		; CDistributeManager::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ??1CDistributeManager@@UAE@XZ
_TEXT	SEGMENT
tv157 = -96						; size = 4
$T2 = -92						; size = 4
_nIndex$3 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CDistributeManager@@UAE@XZ PROC			; CDistributeManager::~CDistributeManager, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDistributeManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 50	 sub	 esp, 80			; 00000050H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDistributeManager@@6B@
  00038	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 93   : 	//移除节点
; 94   : 	RemoveAll();

  0003f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?RemoveAll@CDistributeManager@@QAEXXZ ; CDistributeManager::RemoveAll

; 95   : 
; 96   : 	//释放对象
; 97   : 	m_SameTableBuffer.Append(m_SameTableActive);

  00047	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 c0 20	 add	 eax, 32			; 00000020H
  0004d	50		 push	 eax
  0004e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00054	e8 00 00 00 00	 call	 ?Append@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABV1@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Append

; 98   : 	for(INT_PTR nIndex=0;nIndex<m_SameTableBuffer.GetCount();nIndex++)

  00059	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nIndex$3[ebp], 0
  00060	eb 09		 jmp	 SHORT $LN4@CDistribut
$LN2@CDistribut:
  00062	8b 45 e8	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  00065	83 c0 01	 add	 eax, 1
  00068	89 45 e8	 mov	 DWORD PTR _nIndex$3[ebp], eax
$LN4@CDistribut:
  0006b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00071	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetCount
  00076	39 45 e8	 cmp	 DWORD PTR _nIndex$3[ebp], eax
  00079	7d 7b		 jge	 SHORT $LN3@CDistribut

; 99   : 	{
; 100  : 		SafeDelete(m_SameTableBuffer[nIndex]);

  0007b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0007f	8b 45 e8	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  00082	50		 push	 eax
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00089	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::operator[]
  0008e	89 45 a0	 mov	 DWORD PTR tv157[ebp], eax
  00091	8b 4d a0	 mov	 ecx, DWORD PTR tv157[ebp]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	89 55 a4	 mov	 DWORD PTR $T2[ebp], edx
  00099	6a 44		 push	 68			; 00000044H
  0009b	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a4	83 c4 08	 add	 esp, 8
  000a7	eb 23		 jmp	 SHORT $LN8@CDistribut
__catch$??1CDistributeManager@@UAE@XZ$0:
  000a9	33 c0		 xor	 eax, eax
  000ab	75 19		 jne	 SHORT $LN7@CDistribut
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CDistributeManager@@UAE@XZ@4JA
  000b3	83 c1 08	 add	 ecx, 8
  000b6	51		 push	 ecx
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GOEFAIJG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000bc	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000c1	85 c0		 test	 eax, eax
  000c3	74 01		 je	 SHORT $LN7@CDistribut
  000c5	cc		 int	 3
$LN7@CDistribut:
  000c6	b8 00 00 00 00	 mov	 eax, $LN15@CDistribut
  000cb	c3		 ret	 0
$LN8@CDistribut:
  000cc	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000d3	eb 07		 jmp	 SHORT __tryend$??1CDistributeManager@@UAE@XZ$1
$LN15@CDistribut:
  000d5	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
__tryend$??1CDistributeManager@@UAE@XZ$1:
  000dc	8b 45 e8	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  000df	50		 push	 eax
  000e0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000e6	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::operator[]
  000eb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 101  : 	}

  000f1	e9 6c ff ff ff	 jmp	 $LN2@CDistribut
$LN3@CDistribut:

; 102  : 
; 103  : 	//移除元素
; 104  : 	m_SameTableBuffer.RemoveAll();

  000f6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000fc	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXXZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAll

; 105  : 	m_SameTableActive.RemoveAll();

  00101	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	83 c1 20	 add	 ecx, 32			; 00000020H
  00107	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXXZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAll

; 106  : }

  0010c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00110	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	83 c1 50	 add	 ecx, 80			; 00000050H
  00116	e8 00 00 00 00	 call	 ??1CDistributeNodePool@@QAE@XZ ; CDistributeNodePool::~CDistributeNodePool
  0011b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0011f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	83 c1 34	 add	 ecx, 52			; 00000034H
  00125	e8 00 00 00 00	 call	 ??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::~CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
  0012a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0012e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	83 c1 20	 add	 ecx, 32			; 00000020H
  00134	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
  00139	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00140	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00143	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00146	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
  0014b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0014e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00155	59		 pop	 ecx
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDistributeManager@@UAE@XZ$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
__unwindfunclet$??1CDistributeManager@@UAE@XZ$3:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
__unwindfunclet$??1CDistributeManager@@UAE@XZ$4:
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 34	 add	 ecx, 52			; 00000034H
  0001c	e9 00 00 00 00	 jmp	 ??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::~CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
__unwindfunclet$??1CDistributeManager@@UAE@XZ$5:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 50	 add	 ecx, 80			; 00000050H
  00027	e9 00 00 00 00	 jmp	 ??1CDistributeNodePool@@QAE@XZ ; CDistributeNodePool::~CDistributeNodePool
__ehhandler$??1CDistributeManager@@UAE@XZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00033	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDistributeManager@@UAE@XZ
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDistributeManager@@UAE@XZ ENDP			; CDistributeManager::~CDistributeManager
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ??0CDistributeManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDistributeManager@@QAE@XZ PROC			; CDistributeManager::CDistributeManager, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDistributeManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDistributeManager@@6B@
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0003a	e8 00 00 00 00	 call	 ??0?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 20	 add	 ecx, 32			; 00000020H
  0004c	e8 00 00 00 00	 call	 ??0?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
  00051	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00055	6a 0a		 push	 10			; 0000000aH
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 34	 add	 ecx, 52			; 00000034H
  0005d	e8 00 00 00 00	 call	 ??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
  00062	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 50	 add	 ecx, 80			; 00000050H
  0006c	e8 00 00 00 00	 call	 ??0CDistributeNodePool@@QAE@XZ ; CDistributeNodePool::CDistributeNodePool
  00071	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 79   : 	//设置变量
; 80   : 	m_pHeadNode=NULL;

  00075	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [eax+84], 0

; 81   : 	m_wNodeCount=0;

  0007f	33 c0		 xor	 eax, eax
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 82   : 	m_wAndroidCount=0;

  00088	33 c0		 xor	 eax, eax
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 83   : 	m_wRealCount=0;

  00091	33 c0		 xor	 eax, eax
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 84   : 	m_cbDistributeRule=0;

  0009a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	c6 40 58 00	 mov	 BYTE PTR [eax+88], 0

; 85   : 
; 86   : 	//设置字典
; 87   : 	m_SameTableMap.InitHashTable(10003);

  000a1	6a 01		 push	 1
  000a3	68 13 27 00 00	 push	 10003			; 00002713H
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	83 c1 34	 add	 ecx, 52			; 00000034H
  000ae	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::InitHashTable

; 88   : }

  000b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ba	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDistributeManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
__unwindfunclet$??0CDistributeManager@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
__unwindfunclet$??0CDistributeManager@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 34	 add	 ecx, 52			; 00000034H
  0001c	e9 00 00 00 00	 jmp	 ??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::~CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
__unwindfunclet$??0CDistributeManager@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 50	 add	 ecx, 80			; 00000050H
  00027	e9 00 00 00 00	 jmp	 ??1CDistributeNodePool@@QAE@XZ ; CDistributeNodePool::~CDistributeNodePool
__ehhandler$??0CDistributeManager@@QAE@XZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00033	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDistributeManager@@QAE@XZ
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDistributeManager@@QAE@XZ ENDP			; CDistributeManager::CDistributeManager
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEPAXI@Z PROC	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::~CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 21		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 0e		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	6a 1c		 push	 28			; 0000001cH
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEPAXI@Z ENDP	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AssertValid@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXXZ PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::AssertValid, COMDAT
; _this$ = ecx

; 1820 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1821 : 	CObject::AssertValid();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 1822 : 
; 1823 : 	ASSERT(m_nHashTableSize > 0);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001b	77 14		 ja	 SHORT $LN3@AssertVali
  0001d	68 1f 07 00 00	 push	 1823			; 0000071fH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN3@AssertVali
  00030	cc		 int	 3
$LN3@AssertVali:

; 1824 : 	ASSERT(m_nCount == 0 || m_pHashTable != NULL);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00038	74 1d		 je	 SHORT $LN1@AssertVali
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00041	75 14		 jne	 SHORT $LN1@AssertVali
  00043	68 20 07 00 00	 push	 1824			; 00000720H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN1@AssertVali
  00056	cc		 int	 3
$LN1@AssertVali:

; 1825 : 		// non-empty map should have hash table
; 1826 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?AssertValid@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXXZ ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Dump@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_pos$1 = -16						; size = 4
_val$2 = -12						; size = 4
_key$3 = -8						; size = 4
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXAAVCDumpContext@@@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Dump, COMDAT
; _this$ = ecx

; 1794 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1795 : 	CObject::Dump(dc);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 1796 : 
; 1797 : 	dc << "with " << m_nCount << " elements";

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_09HCLNAIDE@?5elements@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_05PLCFPPOI@with?5@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1798 : 	if (dc.GetDepth() > 0)

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00047	85 c0		 test	 eax, eax
  00049	7e 71		 jle	 SHORT $LN4@Dump

; 1799 : 	{
; 1800 : 		// Dump in format "[key] -> value"
; 1801 : 		KEY key[1];
; 1802 : 		VALUE val[1];
; 1803 : 
; 1804 : 		POSITION pos = GetStartPosition();

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetStartPosition
  00053	89 45 f0	 mov	 DWORD PTR _pos$1[ebp], eax
$LN2@Dump:

; 1805 : 		while (pos != NULL)

  00056	83 7d f0 00	 cmp	 DWORD PTR _pos$1[ebp], 0
  0005a	74 60		 je	 SHORT $LN4@Dump

; 1806 : 		{
; 1807 : 			GetNextAssoc(pos, key[0], val[0]);

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8d 54 0d f4	 lea	 edx, DWORD PTR _val$2[ebp+ecx]
  00068	52		 push	 edx
  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	6b c8 00	 imul	 ecx, eax, 0
  00071	8d 54 0d f8	 lea	 edx, DWORD PTR _key$3[ebp+ecx]
  00075	52		 push	 edx
  00076	8d 45 f0	 lea	 eax, DWORD PTR _pos$1[ebp]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagSameTableInfo@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetNextAssoc

; 1808 : 			dc << "\n\t[";

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_03OHJIHPJH@?6?7?$FL@
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0008a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1809 : 			DumpElements<KEY>(dc, key, 1);

  0008f	6a 01		 push	 1
  00091	8d 45 f8	 lea	 eax, DWORD PTR _key$3[ebp]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z ; DumpElements<unsigned long>

; 1810 : 			dc << "] = ";

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000a6	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1811 : 			DumpElements<VALUE>(dc, val, 1);

  000ab	6a 01		 push	 1
  000ad	8d 45 f4	 lea	 eax, DWORD PTR _val$2[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ??$DumpElements@PAUtagSameTableInfo@@@@YGXAAVCDumpContext@@PBQAUtagSameTableInfo@@H@Z ; DumpElements<tagSameTableInfo *>

; 1812 : 		}

  000ba	eb 9a		 jmp	 SHORT $LN2@Dump
$LN4@Dump:

; 1813 : 	}
; 1814 : 
; 1815 : 	dc << "\n";

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000c4	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1816 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?Dump@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UBEXAAVCDumpContext@@@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
tv154 = -100						; size = 4
_newValue$1 = -32					; size = 4
_newKey$2 = -28						; size = 4
_nNewCount$3 = -24					; size = 4
_pValue$4 = -20						; size = 4
_pKey$5 = -16						; size = 4
_pAssoc$6 = -12						; size = 4
_nHash$7 = -8						; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEXAAVCArchive@@@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Serialize, COMDAT
; _this$ = ecx

; 1743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1744 : 	ASSERT_VALID(this);

  0000c	68 d0 06 00 00	 push	 1744			; 000006d0H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1745 : 
; 1746 : 	CObject::Serialize(ar);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 1747 : 
; 1748 : 	if (ar.IsStoring())

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00033	85 c0		 test	 eax, eax
  00035	0f 84 b3 00 00
	00		 je	 $LN10@Serialize

; 1749 : 	{
; 1750 : 		ar.WriteCount(m_nCount);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00041	51		 push	 ecx
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00045	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1751 : 		if (m_nCount == 0)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00051	75 05		 jne	 SHORT $LN12@Serialize

; 1752 : 			return;  // nothing more to do

  00053	e9 f8 00 00 00	 jmp	 $LN1@Serialize
$LN12@Serialize:

; 1753 : 
; 1754 : 		ASSERT(m_pHashTable != NULL);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005f	75 14		 jne	 SHORT $LN15@Serialize
  00061	68 da 06 00 00	 push	 1754			; 000006daH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN15@Serialize
  00074	cc		 int	 3
$LN15@Serialize:

; 1755 : 		if (m_pHashTable != NULL)

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0007c	74 6e		 je	 SHORT $LN13@Serialize

; 1756 : 		{
; 1757 : 			for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$7[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN4@Serialize
$LN2@Serialize:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _nHash$7[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _nHash$7[ebp], eax
$LN4@Serialize:
  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$7[ebp]
  00096	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00099	73 51		 jae	 SHORT $LN13@Serialize

; 1758 : 			{
; 1759 : 				CAssoc* pAssoc;
; 1760 : 				for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	8b 55 f8	 mov	 edx, DWORD PTR _nHash$7[ebp]
  000a4	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000a7	89 45 f4	 mov	 DWORD PTR _pAssoc$6[ebp], eax
  000aa	eb 09		 jmp	 SHORT $LN7@Serialize
$LN5@Serialize:
  000ac	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	89 4d f4	 mov	 DWORD PTR _pAssoc$6[ebp], ecx
$LN7@Serialize:
  000b5	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$6[ebp], 0
  000b9	74 2f		 je	 SHORT $LN6@Serialize

; 1761 : 				{
; 1762 : 					KEY* pKey;
; 1763 : 					VALUE* pValue;
; 1764 : 					/*
; 1765 : 					* in some cases the & operator might be overloaded, and we cannot use it to
; 1766 : 					* obtain the address of a given object.  We then use the following trick to
; 1767 : 					* get the address
; 1768 : 					*/
; 1769 : 					pKey = reinterpret_cast< KEY* >( &reinterpret_cast< int& >( const_cast< KEY& > ( static_cast< const KEY& >( pAssoc->key ) ) ) );

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000be	89 45 f0	 mov	 DWORD PTR _pKey$5[ebp], eax

; 1770 : 					pValue = reinterpret_cast< VALUE* >( &reinterpret_cast< int& >( static_cast< VALUE& >( pAssoc->value ) ) );

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000c4	83 c0 04	 add	 eax, 4
  000c7	89 45 ec	 mov	 DWORD PTR _pValue$4[ebp], eax

; 1771 : 					SerializeElements<KEY>(ar, pKey, 1);

  000ca	6a 01		 push	 1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pKey$5[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ; SerializeElements<unsigned long>

; 1772 : 					SerializeElements<VALUE>(ar, pValue, 1);

  000d9	6a 01		 push	 1
  000db	8b 45 ec	 mov	 eax, DWORD PTR _pValue$4[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagSameTableInfo@@@@YGXAAVCArchive@@PAPAUtagSameTableInfo@@H@Z ; SerializeElements<tagSameTableInfo *>

; 1773 : 				}

  000e8	eb c2		 jmp	 SHORT $LN5@Serialize
$LN6@Serialize:

; 1774 : 			}

  000ea	eb 9b		 jmp	 SHORT $LN2@Serialize
$LN13@Serialize:

; 1775 : 		}
; 1776 : 	}
; 1777 : 	else

  000ec	eb 62		 jmp	 SHORT $LN1@Serialize
$LN10@Serialize:

; 1778 : 	{
; 1779 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000f1	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  000f6	89 45 e8	 mov	 DWORD PTR _nNewCount$3[ebp], eax
$LN8@Serialize:

; 1780 : 		while (nNewCount--)

  000f9	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$3[ebp]
  000fc	89 45 9c	 mov	 DWORD PTR tv154[ebp], eax
  000ff	8b 4d e8	 mov	 ecx, DWORD PTR _nNewCount$3[ebp]
  00102	83 e9 01	 sub	 ecx, 1
  00105	89 4d e8	 mov	 DWORD PTR _nNewCount$3[ebp], ecx
  00108	83 7d 9c 00	 cmp	 DWORD PTR tv154[ebp], 0
  0010c	74 42		 je	 SHORT $LN1@Serialize

; 1781 : 		{
; 1782 : 			KEY newKey[1];
; 1783 : 			VALUE newValue[1];
; 1784 : 			SerializeElements<KEY>(ar, newKey, 1);

  0010e	6a 01		 push	 1
  00110	8d 45 e4	 lea	 eax, DWORD PTR _newKey$2[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ; SerializeElements<unsigned long>

; 1785 : 			SerializeElements<VALUE>(ar, newValue, 1);

  0011d	6a 01		 push	 1
  0011f	8d 45 e0	 lea	 eax, DWORD PTR _newValue$1[ebp]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagSameTableInfo@@@@YGXAAVCArchive@@PAPAUtagSameTableInfo@@H@Z ; SerializeElements<tagSameTableInfo *>

; 1786 : 			SetAt(newKey[0], newValue[0]);

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	8b 54 0d e0	 mov	 edx, DWORD PTR _newValue$1[ebp+ecx]
  00138	52		 push	 edx
  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	6b c8 00	 imul	 ecx, eax, 0
  00141	8b 54 0d e4	 mov	 edx, DWORD PTR _newKey$2[ebp+ecx]
  00145	52		 push	 edx
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	e8 00 00 00 00	 call	 ?SetAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXKPAUtagSameTableInfo@@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::SetAt

; 1787 : 		}

  0014e	eb a9		 jmp	 SHORT $LN8@Serialize
$LN1@Serialize:

; 1788 : 	}
; 1789 : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 04 00	 ret	 4
?Serialize@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAEXAAVCArchive@@@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ PROC	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::~CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>, COMDAT
; _this$ = ecx

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@

; 1473 : 	RemoveAll();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveAll

; 1474 : 	ASSERT(m_nCount == 0);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $LN1@CMap
  00045	68 c2 05 00 00	 push	 1474			; 000005c2H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN1@CMap
  00058	cc		 int	 3
$LN1@CMap:

; 1475 : }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CMap@KKPAUtagSameTableInfo@@PAU1@@@UAE@XZ ENDP	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::~CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetAssocAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z
_TEXT	SEGMENT
_pAssoc$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_nHashBucket$ = 12					; size = 4
_nHashValue$ = 16					; size = 4
?GetAssocAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetAssocAt, COMDAT
; _this$ = ecx

; 1532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 : 	nHashValue = HashKey<ARG_KEY>(key);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$HashKey@K@@YGIK@Z	; HashKey<unsigned long>
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00018	89 01		 mov	 DWORD PTR [ecx], eax

; 1534 : 	nHashBucket = nHashValue % m_nHashTableSize;

  0001a	8b 45 10	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	33 d2		 xor	 edx, edx
  00024	f7 71 08	 div	 DWORD PTR [ecx+8]
  00027	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1535 : 
; 1536 : 	if (m_pHashTable == NULL)

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00033	75 04		 jne	 SHORT $LN5@GetAssocAt

; 1537 : 		return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 49		 jmp	 SHORT $LN1@GetAssocAt
$LN5@GetAssocAt:

; 1538 : 
; 1539 : 	// see if it exists
; 1540 : 	CAssoc* pAssoc;
; 1541 : 	for (pAssoc = m_pHashTable[nHashBucket]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  00039	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00047	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0004a	eb 09		 jmp	 SHORT $LN4@GetAssocAt
$LN2@GetAssocAt:
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@GetAssocAt:
  00055	83 7d f8 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  00059	74 25		 je	 SHORT $LN3@GetAssocAt

; 1542 : 	{
; 1543 : 		if (pAssoc->nHashValue == nHashValue && CompareElements(&pAssoc->key, &key))

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00061	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00064	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00066	75 16		 jne	 SHORT $LN6@GetAssocAt
  00068	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ??$CompareElements@KK@@YGHPBK0@Z ; CompareElements<unsigned long,unsigned long>
  00075	85 c0		 test	 eax, eax
  00077	74 05		 je	 SHORT $LN6@GetAssocAt

; 1544 : 			return pAssoc;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0007c	eb 04		 jmp	 SHORT $LN1@GetAssocAt
$LN6@GetAssocAt:

; 1545 : 	}

  0007e	eb cc		 jmp	 SHORT $LN2@GetAssocAt
$LN3@GetAssocAt:

; 1546 : 	return NULL;

  00080	33 c0		 xor	 eax, eax
$LN1@GetAssocAt:

; 1547 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?GetAssocAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetAssocAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?FreeAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEXPAVCAssoc@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pAssoc$ = 8						; size = 4
?FreeAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEXPAVCAssoc@1@@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::FreeAssoc, COMDAT
; _this$ = ecx

; 1516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1517 : 	pAssoc->CAssoc::~CAssoc();
; 1518 : 	pAssoc->pNext = m_pFreeList;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00015	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1519 : 	m_pFreeList = pAssoc;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0001e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1520 : 	m_nCount--;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00027	83 e9 01	 sub	 ecx, 1
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1521 : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00037	7d 14		 jge	 SHORT $LN4@FreeAssoc
  00039	68 f1 05 00 00	 push	 1521			; 000005f1H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00043	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00048	85 c0		 test	 eax, eax
  0004a	74 01		 je	 SHORT $LN4@FreeAssoc
  0004c	cc		 int	 3
$LN4@FreeAssoc:

; 1522 : 
; 1523 : 	// if no more elements, cleanup completely
; 1524 : 	if (m_nCount == 0)

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00054	75 08		 jne	 SHORT $LN1@FreeAssoc

; 1525 : 		RemoveAll();

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveAll
$LN1@FreeAssoc:

; 1526 : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?FreeAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEXPAVCAssoc@1@@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::FreeAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?NewAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEPAVCAssoc@1@K@Z
_TEXT	SEGMENT
tv88 = -100						; size = 4
$T1 = -96						; size = 4
_pTemp$ = -28						; size = 4
_pAssoc$ = -24						; size = 4
___afx_condVal$2 = -20					; size = 4
_i$3 = -16						; size = 4
_pAssoc$4 = -12						; size = 4
_newBlock$5 = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?NewAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEPAVCAssoc@1@K@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::NewAssoc, COMDAT
; _this$ = ecx

; 1480 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1481 : 	if (m_pFreeList == NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	75 72		 jne	 SHORT $LN7@NewAssoc

; 1482 : 	{
; 1483 : 		// add another block
; 1484 : 		CPlex* newBlock = CPlex::Create(m_pBlocks, m_nBlockSize, sizeof(CMap::CAssoc));

  00015	6a 10		 push	 16			; 00000010H
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 14	 add	 edx, 20			; 00000014H
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create
  0002a	89 45 f8	 mov	 DWORD PTR _newBlock$5[ebp], eax

; 1485 : 		// chain them into free list
; 1486 : 		CMap::CAssoc* pAssoc = (CMap::CAssoc*) newBlock->data();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _newBlock$5[ebp]
  00030	e8 00 00 00 00	 call	 ?data@CPlex@@QAEPAXXZ	; CPlex::data
  00035	89 45 f4	 mov	 DWORD PTR _pAssoc$4[ebp], eax

; 1487 : 		// free in reverse order to make it easier to debug
; 1488 : 		pAssoc += m_nBlockSize - 1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	c1 e1 04	 shl	 ecx, 4
  00044	03 4d f4	 add	 ecx, DWORD PTR _pAssoc$4[ebp]
  00047	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx

; 1489 : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pAssoc--)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d f0	 mov	 DWORD PTR _i$3[ebp], ecx
  00056	eb 12		 jmp	 SHORT $LN4@NewAssoc
$LN2@NewAssoc:
  00058	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00064	83 e9 10	 sub	 ecx, 16			; 00000010H
  00067	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx
$LN4@NewAssoc:
  0006a	83 7d f0 00	 cmp	 DWORD PTR _i$3[ebp], 0
  0006e	7c 17		 jl	 SHORT $LN7@NewAssoc

; 1490 : 		{
; 1491 : 			pAssoc->pNext = m_pFreeList;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$4[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1492 : 			m_pFreeList = pAssoc;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00082	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1493 : 		}

  00085	eb d1		 jmp	 SHORT $LN2@NewAssoc
$LN7@NewAssoc:

; 1494 : 	}
; 1495 : 	ENSURE(m_pFreeList != NULL);  // we must have something

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008e	74 09		 je	 SHORT $LN11@NewAssoc
  00090	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00097	eb 07		 jmp	 SHORT $LN12@NewAssoc
$LN11@NewAssoc:
  00099	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN12@NewAssoc:
  000a0	8b 4d 9c	 mov	 ecx, DWORD PTR tv88[ebp]
  000a3	89 4d ec	 mov	 DWORD PTR ___afx_condVal$2[ebp], ecx
  000a6	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000aa	75 14		 jne	 SHORT $LN13@NewAssoc
  000ac	68 d7 05 00 00	 push	 1495			; 000005d7H
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b6	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000bb	85 c0		 test	 eax, eax
  000bd	74 01		 je	 SHORT $LN13@NewAssoc
  000bf	cc		 int	 3
$LN13@NewAssoc:
  000c0	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000c4	75 05		 jne	 SHORT $LN5@NewAssoc
  000c6	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@NewAssoc:
  000cb	33 c0		 xor	 eax, eax
  000cd	75 b8		 jne	 SHORT $LN7@NewAssoc

; 1496 : 
; 1497 : 	CMap::CAssoc* pAssoc = m_pFreeList;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d5	89 4d e8	 mov	 DWORD PTR _pAssoc$[ebp], ecx

; 1498 : 
; 1499 : 	// zero the memory
; 1500 : 	CMap::CAssoc* pTemp = pAssoc->pNext;

  000d8	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000db	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000de	89 4d e4	 mov	 DWORD PTR _pTemp$[ebp], ecx

; 1501 : 	memset( pAssoc, 0, sizeof(CMap::CAssoc) );

  000e1	6a 10		 push	 16			; 00000010H
  000e3	6a 00		 push	 0
  000e5	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _memset
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1502 : 	pAssoc->pNext = pTemp;

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _pTemp$[ebp]
  000f7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1503 : 
; 1504 : 	m_pFreeList = m_pFreeList->pNext;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00100	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00106	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1505 : 	m_nCount++;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010f	83 c1 01	 add	 ecx, 1
  00112	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00115	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1506 : 	ASSERT(m_nCount > 0);  // make sure we don't overflow

  00118	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0011f	7f 14		 jg	 SHORT $LN14@NewAssoc
  00121	68 e2 05 00 00	 push	 1506			; 000005e2H
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0012b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00130	85 c0		 test	 eax, eax
  00132	74 01		 je	 SHORT $LN14@NewAssoc
  00134	cc		 int	 3
$LN14@NewAssoc:

; 1507 : #pragma push_macro("new")
; 1508 : #undef new
; 1509 : 	::new(pAssoc) CMap::CAssoc(key);

  00135	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00138	50		 push	 eax
  00139	6a 10		 push	 16			; 00000010H
  0013b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00140	83 c4 08	 add	 esp, 8
  00143	89 45 a0	 mov	 DWORD PTR $T1[ebp], eax
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00149	51		 push	 ecx
  0014a	8b 4d a0	 mov	 ecx, DWORD PTR $T1[ebp]
  0014d	e8 00 00 00 00	 call	 ??0CAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CAssoc::CAssoc

; 1510 : #pragma pop_macro("new")
; 1511 : 	return pAssoc;

  00152	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
$LN10@NewAssoc:

; 1512 : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
?NewAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEPAVCAssoc@1@K@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::NewAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?InitHashTable@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXIH@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
___afx_condVal$3 = -8					; size = 4
_this$ = -4						; size = 4
_nHashSize$ = 8						; size = 4
_bAllocNow$ = 12					; size = 4
?InitHashTable@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXIH@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::InitHashTable, COMDAT
; _this$ = ecx

; 1420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 : 	ASSERT_VALID(this);

  0000c	68 8d 05 00 00	 push	 1421			; 0000058dH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1422 : 	ASSERT(m_nCount == 0);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00026	74 14		 je	 SHORT $LN9@InitHashTa
  00028	68 8e 05 00 00	 push	 1422			; 0000058eH
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $LN9@InitHashTa
  0003b	cc		 int	 3
$LN9@InitHashTa:

; 1423 : 	ASSERT(nHashSize > 0);

  0003c	83 7d 08 00	 cmp	 DWORD PTR _nHashSize$[ebp], 0
  00040	77 14		 ja	 SHORT $LN10@InitHashTa
  00042	68 8f 05 00 00	 push	 1423			; 0000058fH
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00051	85 c0		 test	 eax, eax
  00053	74 01		 je	 SHORT $LN10@InitHashTa
  00055	cc		 int	 3
$LN10@InitHashTa:

; 1424 : 
; 1425 : 	if (m_pHashTable != NULL)

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005d	74 1f		 je	 SHORT $LN5@InitHashTa

; 1426 : 	{
; 1427 : 		// free hash table
; 1428 : 		delete[] m_pHashTable;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	89 4d b4	 mov	 DWORD PTR $T2[ebp], ecx
  00068	8b 55 b4	 mov	 edx, DWORD PTR $T2[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00071	83 c4 04	 add	 esp, 4

; 1429 : 		m_pHashTable = NULL;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN5@InitHashTa:

; 1430 : 	}
; 1431 : 
; 1432 : 	if (bAllocNow)

  0007e	83 7d 0c 00	 cmp	 DWORD PTR _bAllocNow$[ebp], 0
  00082	0f 84 92 00 00
	00		 je	 $LN6@InitHashTa

; 1433 : 	{
; 1434 : 		m_pHashTable = new CAssoc* [nHashSize];

  00088	68 9a 05 00 00	 push	 1434			; 0000059aH
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00092	33 c9		 xor	 ecx, ecx
  00094	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00097	ba 04 00 00 00	 mov	 edx, 4
  0009c	f7 e2		 mul	 edx
  0009e	0f 90 c1	 seto	 cl
  000a1	f7 d9		 neg	 ecx
  000a3	0b c8		 or	 ecx, eax
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  000b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN4@InitHashTa:

; 1435 : 		ENSURE(m_pHashTable != NULL);

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000c1	74 09		 je	 SHORT $LN11@InitHashTa
  000c3	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  000ca	eb 07		 jmp	 SHORT $LN12@InitHashTa
$LN11@InitHashTa:
  000cc	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN12@InitHashTa:
  000d3	8b 4d ac	 mov	 ecx, DWORD PTR tv137[ebp]
  000d6	89 4d f8	 mov	 DWORD PTR ___afx_condVal$3[ebp], ecx
  000d9	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000dd	75 14		 jne	 SHORT $LN13@InitHashTa
  000df	68 9b 05 00 00	 push	 1435			; 0000059bH
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000e9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ee	85 c0		 test	 eax, eax
  000f0	74 01		 je	 SHORT $LN13@InitHashTa
  000f2	cc		 int	 3
$LN13@InitHashTa:
  000f3	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000f7	75 05		 jne	 SHORT $LN2@InitHashTa
  000f9	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@InitHashTa:
  000fe	33 c0		 xor	 eax, eax
  00100	75 b8		 jne	 SHORT $LN4@InitHashTa

; 1436 : 		memset(m_pHashTable, 0, sizeof(CAssoc*) * nHashSize);

  00102	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00105	c1 e0 02	 shl	 eax, 2
  00108	50		 push	 eax
  00109	6a 00		 push	 0
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _memset
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@InitHashTa:

; 1437 : 	}
; 1438 : 	m_nHashTableSize = nHashSize;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _nHashSize$[ebp]
  00120	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@InitHashTa:

; 1439 : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
?InitHashTable@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXIH@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::InitHashTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNextAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagSameTableInfo@@@Z
_TEXT	SEGMENT
tv133 = -100						; size = 4
tv83 = -100						; size = 4
tv73 = -100						; size = 4
_nBucket$1 = -32					; size = 4
_pAssocNext$ = -28					; size = 4
___afx_condVal$2 = -24					; size = 4
_nBucket$3 = -20					; size = 4
___afx_condVal$4 = -16					; size = 4
_pAssocRet$ = -12					; size = 4
___afx_condVal$5 = -8					; size = 4
_this$ = -4						; size = 4
_rNextPosition$ = 8					; size = 4
_rKey$ = 12						; size = 4
_rValue$ = 16						; size = 4
?GetNextAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagSameTableInfo@@@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetNextAssoc, COMDAT
; _this$ = ecx

; 1640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 	ASSERT_VALID(this);

  0000c	68 69 06 00 00	 push	 1641			; 00000669H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@GetNextAss:

; 1642 : 	ENSURE(m_pHashTable != NULL);  // never call on empty map

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN25@GetNextAss
  00028	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN26@GetNextAss
$LN25@GetNextAss:
  00031	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN26@GetNextAss:
  00038	8b 4d 9c	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$5[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  00042	75 14		 jne	 SHORT $LN27@GetNextAss
  00044	68 6a 06 00 00	 push	 1642			; 0000066aH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN27@GetNextAss
  00057	cc		 int	 3
$LN27@GetNextAss:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@GetNextAss
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetNextAss:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@GetNextAss

; 1643 : 
; 1644 : 	CAssoc* pAssocRet = (CAssoc*)rNextPosition;

  00067	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	89 4d f4	 mov	 DWORD PTR _pAssocRet$[ebp], ecx
$LN7@GetNextAss:

; 1645 : 	ENSURE(pAssocRet != NULL);

  0006f	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  00073	74 09		 je	 SHORT $LN28@GetNextAss
  00075	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  0007c	eb 07		 jmp	 SHORT $LN29@GetNextAss
$LN28@GetNextAss:
  0007e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN29@GetNextAss:
  00085	8b 45 9c	 mov	 eax, DWORD PTR tv83[ebp]
  00088	89 45 f0	 mov	 DWORD PTR ___afx_condVal$4[ebp], eax
  0008b	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  0008f	75 14		 jne	 SHORT $LN30@GetNextAss
  00091	68 6d 06 00 00	 push	 1645			; 0000066dH
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a0	85 c0		 test	 eax, eax
  000a2	74 01		 je	 SHORT $LN30@GetNextAss
  000a4	cc		 int	 3
$LN30@GetNextAss:
  000a5	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  000a9	75 05		 jne	 SHORT $LN5@GetNextAss
  000ab	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@GetNextAss:
  000b0	33 c0		 xor	 eax, eax
  000b2	75 bb		 jne	 SHORT $LN7@GetNextAss

; 1646 : 
; 1647 : 	if (pAssocRet == (CAssoc*) BEFORE_START_POSITION)

  000b4	83 7d f4 ff	 cmp	 DWORD PTR _pAssocRet$[ebp], -1
  000b8	75 7b		 jne	 SHORT $LN19@GetNextAss

; 1648 : 	{
; 1649 : 		// find the first association
; 1650 : 		for (UINT nBucket = 0; nBucket < m_nHashTableSize; nBucket++)

  000ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBucket$3[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN10@GetNextAss
$LN8@GetNextAss:
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _nBucket$3[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _nBucket$3[ebp], eax
$LN10@GetNextAss:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _nBucket$3[ebp]
  000d2	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d5	73 19		 jae	 SHORT $LN13@GetNextAss

; 1651 : 		{
; 1652 : 			if ((pAssocRet = m_pHashTable[nBucket]) != NULL)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _nBucket$3[ebp]
  000e0	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000e3	89 45 f4	 mov	 DWORD PTR _pAssocRet$[ebp], eax
  000e6	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000ea	74 02		 je	 SHORT $LN20@GetNextAss

; 1653 : 			{
; 1654 : 				break;

  000ec	eb 02		 jmp	 SHORT $LN13@GetNextAss
$LN20@GetNextAss:

; 1655 : 			}
; 1656 : 		}

  000ee	eb d3		 jmp	 SHORT $LN8@GetNextAss
$LN13@GetNextAss:

; 1657 : 		ENSURE(pAssocRet != NULL);  // must find something

  000f0	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000f4	74 09		 je	 SHORT $LN31@GetNextAss
  000f6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN32@GetNextAss
$LN31@GetNextAss:
  000ff	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN32@GetNextAss:
  00106	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  00109	89 45 e8	 mov	 DWORD PTR ___afx_condVal$2[ebp], eax
  0010c	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  00110	75 14		 jne	 SHORT $LN33@GetNextAss
  00112	68 79 06 00 00	 push	 1657			; 00000679H
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0011c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00121	85 c0		 test	 eax, eax
  00123	74 01		 je	 SHORT $LN33@GetNextAss
  00125	cc		 int	 3
$LN33@GetNextAss:
  00126	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  0012a	75 05		 jne	 SHORT $LN11@GetNextAss
  0012c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN11@GetNextAss:
  00131	33 c0		 xor	 eax, eax
  00133	75 bb		 jne	 SHORT $LN13@GetNextAss
$LN19@GetNextAss:

; 1658 : 	}
; 1659 : 
; 1660 : 	// find next association
; 1661 : 	ASSERT(AfxIsValidAddress(pAssocRet, sizeof(CAssoc)));

  00135	6a 01		 push	 1
  00137	6a 10		 push	 16			; 00000010H
  00139	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00142	85 c0		 test	 eax, eax
  00144	75 14		 jne	 SHORT $LN34@GetNextAss
  00146	68 7d 06 00 00	 push	 1661			; 0000067dH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00150	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00155	85 c0		 test	 eax, eax
  00157	74 01		 je	 SHORT $LN34@GetNextAss
  00159	cc		 int	 3
$LN34@GetNextAss:

; 1662 : 	CAssoc* pAssocNext;
; 1663 : 	if ((pAssocNext = pAssocRet->pNext) == NULL)

  0015a	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0015d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00160	89 4d e4	 mov	 DWORD PTR _pAssocNext$[ebp], ecx
  00163	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  00167	75 43		 jne	 SHORT $LN22@GetNextAss

; 1664 : 	{
; 1665 : 		// go to next bucket
; 1666 : 		for (UINT nBucket = (pAssocRet->nHashValue % m_nHashTableSize) + 1;

  00169	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00172	33 d2		 xor	 edx, edx
  00174	f7 71 08	 div	 DWORD PTR [ecx+8]
  00177	83 c2 01	 add	 edx, 1
  0017a	89 55 e0	 mov	 DWORD PTR _nBucket$1[ebp], edx
  0017d	eb 09		 jmp	 SHORT $LN16@GetNextAss
$LN14@GetNextAss:

; 1667 : 		  nBucket < m_nHashTableSize; nBucket++)

  0017f	8b 45 e0	 mov	 eax, DWORD PTR _nBucket$1[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 e0	 mov	 DWORD PTR _nBucket$1[ebp], eax
$LN16@GetNextAss:
  00188	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 4d e0	 mov	 ecx, DWORD PTR _nBucket$1[ebp]
  0018e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00191	73 19		 jae	 SHORT $LN22@GetNextAss

; 1668 : 			if ((pAssocNext = m_pHashTable[nBucket]) != NULL)

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00199	8b 55 e0	 mov	 edx, DWORD PTR _nBucket$1[ebp]
  0019c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0019f	89 45 e4	 mov	 DWORD PTR _pAssocNext$[ebp], eax
  001a2	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  001a6	74 02		 je	 SHORT $LN23@GetNextAss

; 1669 : 				break;

  001a8	eb 02		 jmp	 SHORT $LN22@GetNextAss
$LN23@GetNextAss:

; 1670 : 	}

  001aa	eb d3		 jmp	 SHORT $LN14@GetNextAss
$LN22@GetNextAss:

; 1671 : 
; 1672 : 	rNextPosition = (POSITION) pAssocNext;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  001af	8b 4d e4	 mov	 ecx, DWORD PTR _pAssocNext$[ebp]
  001b2	89 08		 mov	 DWORD PTR [eax], ecx

; 1673 : 
; 1674 : 	// fill in return data
; 1675 : 	rKey = pAssocRet->key;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _rKey$[ebp]
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bc	89 10		 mov	 DWORD PTR [eax], edx

; 1676 : 	rValue = pAssocRet->value;

  001be	8b 45 10	 mov	 eax, DWORD PTR _rValue$[ebp]
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001c4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c7	89 10		 mov	 DWORD PTR [eax], edx
$LN24@GetNextAss:

; 1677 : }

  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 0c 00	 ret	 12			; 0000000cH
?GetNextAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagSameTableInfo@@@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetNextAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetStartPosition@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?GetStartPosition@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEPAU__POSITION@@XZ PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetStartPosition, COMDAT
; _this$ = ecx

; 1354 : 	{ return (m_nCount == 0) ? NULL : BEFORE_START_POSITION; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	75 09		 jne	 SHORT $LN3@GetStartPo
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@GetStartPo
$LN3@GetStartPo:
  0001e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv66[ebp], -1
$LN4@GetStartPo:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetStartPosition@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEPAU__POSITION@@XZ ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetStartPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_pAssoc$2 = -12						; size = 4
_nHash$3 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXXZ PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveAll, COMDAT
; _this$ = ecx

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1444 : 	ASSERT_VALID(this);

  0000c	68 a4 05 00 00	 push	 1444			; 000005a4H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1445 : 
; 1446 : 	if (m_pHashTable != NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 60		 je	 SHORT $LN8@RemoveAll

; 1447 : 	{
; 1448 : 		// destroy elements (values and keys)
; 1449 : 		for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _nHash$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _nHash$3[ebp], eax
$LN4@RemoveAll:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$3[ebp]
  00040	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00043	73 24		 jae	 SHORT $LN3@RemoveAll

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _nHash$3[ebp]
  0004e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00051	89 45 f4	 mov	 DWORD PTR _pAssoc$2[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN7@RemoveAll
$LN5@RemoveAll:

; 1453 : 			  pAssoc = pAssoc->pNext)

  00056	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$2[ebp]
  00059	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005c	89 4d f4	 mov	 DWORD PTR _pAssoc$2[ebp], ecx
$LN7@RemoveAll:

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  0005f	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$2[ebp], 0
  00063	74 02		 je	 SHORT $LN6@RemoveAll

; 1454 : 			{
; 1455 : 				pAssoc->CAssoc::~CAssoc();
; 1456 : 			}

  00065	eb ef		 jmp	 SHORT $LN5@RemoveAll
$LN6@RemoveAll:

; 1457 : 		}

  00067	eb c8		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 1458 : 
; 1459 : 		// free hash table
; 1460 : 		delete[] m_pHashTable;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  00072	8b 55 b0	 mov	 edx, DWORD PTR $T1[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0007b	83 c4 04	 add	 esp, 4

; 1461 : 		m_pHashTable = NULL;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN8@RemoveAll:

; 1462 : 	}
; 1463 : 
; 1464 : 	m_nCount = 0;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1465 : 	m_pFreeList = NULL;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1466 : 	m_pBlocks->FreeDataChain();

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a2	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 1467 : 	m_pBlocks = NULL;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1468 : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?RemoveAll@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXXZ ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveKey@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEHK@Z
_TEXT	SEGMENT
_pAssoc$ = -16						; size = 4
_ppAssocPrev$ = -12					; size = 4
_nHashValue$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?RemoveKey@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEHK@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveKey, COMDAT
; _this$ = ecx

; 1611 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1612 : 	ASSERT_VALID(this);

  0000c	68 4c 06 00 00	 push	 1612			; 0000064cH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1613 : 
; 1614 : 	if (m_pHashTable == NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	75 07		 jne	 SHORT $LN5@RemoveKey

; 1615 : 		return FALSE;  // nothing in the table

  00028	33 c0		 xor	 eax, eax
  0002a	e9 83 00 00 00	 jmp	 $LN1@RemoveKey
$LN5@RemoveKey:

; 1616 : 
; 1617 : 	UINT nHashValue;
; 1618 : 	CAssoc** ppAssocPrev;
; 1619 : 	nHashValue = HashKey<ARG_KEY>(key);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$HashKey@K@@YGIK@Z	; HashKey<unsigned long>
  00038	89 45 f8	 mov	 DWORD PTR _nHashValue$[ebp], eax

; 1620 : 	ppAssocPrev = &m_pHashTable[nHashValue%m_nHashTableSize];

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  00041	33 d2		 xor	 edx, edx
  00043	f7 71 08	 div	 DWORD PTR [ecx+8]
  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0004f	89 55 f4	 mov	 DWORD PTR _ppAssocPrev$[ebp], edx

; 1621 : 
; 1622 : 	CAssoc* pAssoc;
; 1623 : 	for (pAssoc = *ppAssocPrev; pAssoc != NULL; pAssoc = pAssoc->pNext)

  00052	8b 45 f4	 mov	 eax, DWORD PTR _ppAssocPrev$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	89 4d f0	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0005a	eb 09		 jmp	 SHORT $LN4@RemoveKey
$LN2@RemoveKey:
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00062	89 4d f0	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@RemoveKey:
  00065	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  00069	74 45		 je	 SHORT $LN3@RemoveKey

; 1624 : 	{
; 1625 : 		if ((pAssoc->nHashValue == nHashValue) && CompareElements(&pAssoc->key, &key))

  0006b	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0006e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00071	3b 4d f8	 cmp	 ecx, DWORD PTR _nHashValue$[ebp]
  00074	75 2f		 jne	 SHORT $LN6@RemoveKey
  00076	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 ??$CompareElements@KK@@YGHPBK0@Z ; CompareElements<unsigned long,unsigned long>
  00083	85 c0		 test	 eax, eax
  00085	74 1e		 je	 SHORT $LN6@RemoveKey

; 1626 : 		{
; 1627 : 			// remove it
; 1628 : 			*ppAssocPrev = pAssoc->pNext;  // remove from list

  00087	8b 45 f4	 mov	 eax, DWORD PTR _ppAssocPrev$[ebp]
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0008d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00090	89 10		 mov	 DWORD PTR [eax], edx

; 1629 : 			FreeAssoc(pAssoc);

  00092	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00095	50		 push	 eax
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?FreeAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEXPAVCAssoc@1@@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::FreeAssoc

; 1630 : 			return TRUE;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	eb 0d		 jmp	 SHORT $LN1@RemoveKey
$LN6@RemoveKey:

; 1631 : 		}
; 1632 : 		ppAssocPrev = &pAssoc->pNext;

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000a8	83 c0 08	 add	 eax, 8
  000ab	89 45 f4	 mov	 DWORD PTR _ppAssocPrev$[ebp], eax

; 1633 : 	}

  000ae	eb ac		 jmp	 SHORT $LN2@RemoveKey
$LN3@RemoveKey:

; 1634 : 	return FALSE;  // not found

  000b0	33 c0		 xor	 eax, eax
$LN1@RemoveKey:

; 1635 : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
?RemoveKey@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEHK@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::RemoveKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?SetAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXKPAUtagSameTableInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_newValue$ = 12						; size = 4
?SetAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXKPAUtagSameTableInfo@@@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::SetAt, COMDAT
; _this$ = ecx

; 1350 : 	{ (*this)[key] = newValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??A?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEAAPAUtagSameTableInfo@@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::operator[]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _newValue$[ebp]
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXKPAUtagSameTableInfo@@@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::SetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??A?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEAAPAUtagSameTableInfo@@K@Z
_TEXT	SEGMENT
tv85 = -88						; size = 4
___afx_condVal$1 = -20					; size = 4
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??A?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEAAPAUtagSameTableInfo@@K@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::operator[], COMDAT
; _this$ = ecx

; 1585 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 : 	ASSERT_VALID(this);

  0000c	68 32 06 00 00	 push	 1586			; 00000632H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1587 : 
; 1588 : 	UINT nHashBucket, nHashValue;
; 1589 : 	CAssoc* pAssoc;
; 1590 : 	if ((pAssoc = GetAssocAt(key, nHashBucket, nHashValue)) == NULL)

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetAssocAt
  00033	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax
  00036	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003a	0f 85 9b 00 00
	00		 jne	 $LN5@operator

; 1591 : 	{
; 1592 : 		if (m_pHashTable == NULL)

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00047	75 11		 jne	 SHORT $LN4@operator

; 1593 : 			InitHashTable(m_nHashTableSize);

  00049	6a 01		 push	 1
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00051	51		 push	 ecx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::InitHashTable
$LN4@operator:

; 1594 : 
; 1595 : 		ENSURE(m_pHashTable);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00061	74 09		 je	 SHORT $LN9@operator
  00063	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  0006a	eb 07		 jmp	 SHORT $LN10@operator
$LN9@operator:
  0006c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN10@operator:
  00073	8b 4d a8	 mov	 ecx, DWORD PTR tv85[ebp]
  00076	89 4d ec	 mov	 DWORD PTR ___afx_condVal$1[ebp], ecx
  00079	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0007d	75 14		 jne	 SHORT $LN11@operator
  0007f	68 3b 06 00 00	 push	 1595			; 0000063bH
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00089	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008e	85 c0		 test	 eax, eax
  00090	74 01		 je	 SHORT $LN11@operator
  00092	cc		 int	 3
$LN11@operator:
  00093	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00097	75 05		 jne	 SHORT $LN2@operator
  00099	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@operator:
  0009e	33 c0		 xor	 eax, eax
  000a0	75 b8		 jne	 SHORT $LN4@operator

; 1596 : 		// it doesn't exist, add a new Association
; 1597 : 		pAssoc = NewAssoc(key);

  000a2	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?NewAssoc@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IAEPAVCAssoc@1@K@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::NewAssoc
  000ae	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1598 : 		pAssoc->nHashValue = nHashValue;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000b4	8b 4d f4	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  000b7	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1599 : 		//'pAssoc->value' is a constructed object, nothing more
; 1600 : 
; 1601 : 		// put into hash table
; 1602 : 		pAssoc->pNext = m_pHashTable[nHashBucket];

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c0	8b 55 f0	 mov	 edx, DWORD PTR _pAssoc$[ebp]
  000c3	8b 45 f8	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  000c6	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  000c9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1603 : 		m_pHashTable[nHashBucket] = pAssoc;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	8b 55 f8	 mov	 edx, DWORD PTR _nHashBucket$[ebp]
  000d5	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000d8	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN5@operator:

; 1604 : 	}
; 1605 : 	return pAssoc->value;  // return new reference

  000db	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000de	83 c0 04	 add	 eax, 4
$LN8@operator:

; 1606 : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
??A?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAEAAPAUtagSameTableInfo@@K@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Lookup@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEHKAAPAUtagSameTableInfo@@@Z
_TEXT	SEGMENT
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_rValue$ = 12						; size = 4
?Lookup@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEHKAAPAUtagSameTableInfo@@@Z PROC ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Lookup, COMDAT
; _this$ = ecx

; 1551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 : 	ASSERT_VALID(this);

  0000c	68 10 06 00 00	 push	 1552			; 00000610H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1553 : 
; 1554 : 	UINT nHashBucket, nHashValue;
; 1555 : 	CAssoc* pAssoc = GetAssocAt(key, nHashBucket, nHashValue);

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::GetAssocAt
  00033	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1556 : 	if (pAssoc == NULL)

  00036	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003a	75 04		 jne	 SHORT $LN2@Lookup

; 1557 : 		return FALSE;  // not in map

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 10		 jmp	 SHORT $LN1@Lookup
$LN2@Lookup:

; 1558 : 
; 1559 : 	rValue = pAssoc->value;

  00040	8b 45 0c	 mov	 eax, DWORD PTR _rValue$[ebp]
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	89 10		 mov	 DWORD PTR [eax], edx

; 1560 : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1
$LN1@Lookup:

; 1561 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?Lookup@?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QBEHKAAPAUtagSameTableInfo@@@Z ENDP ; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::Lookup
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nBlockSize$ = 8					; size = 4
??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z PROC	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>, COMDAT
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@KKPAUtagSameTableInfo@@PAU1@@@6B@

; 1404 : 	ASSERT(nBlockSize > 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nBlockSize$[ebp], 0
  00047	7f 14		 jg	 SHORT $LN3@CMap
  00049	68 7c 05 00 00	 push	 1404			; 0000057cH
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@CMap
  0005c	cc		 int	 3
$LN3@CMap:

; 1405 : 
; 1406 : 	m_pHashTable = NULL;

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1407 : 	m_nHashTableSize = 17;  // default size

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 08 11 00
	00 00		 mov	 DWORD PTR [eax+8], 17	; 00000011H

; 1408 : 	m_nCount = 0;

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1409 : 	m_pFreeList = NULL;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1410 : 	m_pBlocks = NULL;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1411 : 	m_nBlockSize = nBlockSize;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _nBlockSize$[ebp]
  00095	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1412 : }

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CMap@KKPAUtagSameTableInfo@@PAU1@@@QAE@H@Z ENDP	; CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>::CMap<unsigned long,unsigned long,tagSameTableInfo *,tagSameTableInfo *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAEPAXI@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAEPAXI@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXXZ PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 44		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	c1 e1 02	 shl	 ecx, 2
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?RemoveAll@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXXZ ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHH@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHH@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHABQAUtagSameTableInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHABQAUtagSameTableInfo@@@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHABQAUtagSameTableInfo@@@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetAt, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN5@GetAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN6@GetAt
$LN5@GetAt:
  0001d	68 d5 00 00 00	 push	 213			; 000000d5H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN6@GetAt
  00030	cc		 int	 3
$LN6@GetAt:

; 214  : 	if ((nIndex<0)||(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7c 0b		 jl	 SHORT $LN3@GetAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@GetAt
$LN3@GetAt:
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetAt:

; 215  : 	
; 216  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN4@GetAt:

; 217  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?GetAt@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEAAPAUtagSameTableInfo@@H@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Append@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABV1@@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nOldCount$2 = -8					; size = 4
_this$ = -4						; size = 4
_Src$ = 8						; size = 4
?Append@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABV1@@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Append, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 193  : 	//效验参数
; 194  : 	ASSERT(this!=&Src);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR _Src$[ebp]
  00012	75 14		 jne	 SHORT $LN8@Append
  00014	68 c2 00 00 00	 push	 194			; 000000c2H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00023	85 c0		 test	 eax, eax
  00025	74 01		 je	 SHORT $LN8@Append
  00027	cc		 int	 3
$LN8@Append:

; 195  : 	if (this==&Src) AfxThrowInvalidArgException();

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	3b 45 08	 cmp	 eax, DWORD PTR _Src$[ebp]
  0002e	75 05		 jne	 SHORT $LN5@Append
  00030	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@Append:

; 196  : 
; 197  : 	//拷贝数组
; 198  : 	if (Src.m_nElementCount>0)

  00035	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  00038	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0003c	7e 6d		 jle	 SHORT $LN6@Append

; 199  : 	{
; 200  : 		INT_PTR nOldCount=m_nElementCount;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00044	89 4d f8	 mov	 DWORD PTR _nOldCount$2[ebp], ecx

; 201  : 		AllocMemory(m_nElementCount+Src.m_nElementCount);

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _Src$[ebp]
  00050	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00053	51		 push	 ecx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::AllocMemory

; 202  : 		for (INT_PTR i=0;i<Src.m_nElementCount;i++)	m_pData[m_nElementCount+i]=Src.m_pData[i];

  0005c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00063	eb 09		 jmp	 SHORT $LN4@Append
$LN2@Append:
  00065	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Append:
  0006e	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  00074	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00077	7d 20		 jge	 SHORT $LN3@Append
  00079	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00085	03 45 f4	 add	 eax, DWORD PTR _i$1[ebp]
  00088	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0008e	8b 75 f4	 mov	 esi, DWORD PTR _i$1[ebp]
  00091	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00094	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
  00097	eb cc		 jmp	 SHORT $LN2@Append
$LN3@Append:

; 203  : 		m_nElementCount+=Src.m_nElementCount;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009f	8b 55 08	 mov	 edx, DWORD PTR _Src$[ebp]
  000a2	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN6@Append:

; 204  : 	}
; 205  : 
; 206  : 	return m_nElementCount;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
$LN7@Append:

; 207  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
?Append@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABV1@@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Append
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABQAUtagSameTableInfo@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABQAUtagSameTableInfo@@@Z PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEXHABQAUtagSameTableInfo@@@Z ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAEHABQAUtagSameTableInfo@@@Z ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QBEHXZ PROC ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QBEHXZ ENDP ; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ PROC	; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@UAE@XZ ENDP	; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::~CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAE@XZ PROC	; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@PAUtagSameTableInfo@@ABQAU1@@@QAE@XZ ENDP	; CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>::CWHArray<tagSameTableInfo *,tagSameTableInfo * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?FreeNode@CDistributeNodePool@@QAEXPAX@Z
_TEXT	SEGMENT
_pDeadNode$ = -8					; size = 4
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?FreeNode@CDistributeNodePool@@QAEXPAX@Z PROC		; CDistributeNodePool::FreeNode, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 	//归还结点
; 67   : 	tagDistributeNode * pDeadNode =  static_cast<tagDistributeNode*>(pNode);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pNode$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _pDeadNode$[ebp], eax

; 68   : 	pDeadNode->pNextDistributeNode = m_pHeadOfFreeList;

  00012	8b 45 f8	 mov	 eax, DWORD PTR _pDeadNode$[ebp]
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A ; CDistributeNodePool::m_pHeadOfFreeList
  0001b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 69   : 	m_pHeadOfFreeList = pDeadNode;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR _pDeadNode$[ebp]
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A, eax ; CDistributeNodePool::m_pHeadOfFreeList

; 70   : 
; 71   : 	return;
; 72   : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?FreeNode@CDistributeNodePool@@QAEXPAX@Z ENDP		; CDistributeNodePool::FreeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ
_TEXT	SEGMENT
tv79 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
_pNewBlock$4 = -28					; size = 4
_nIndex$5 = -24						; size = 4
_pDistributeNode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ PROC ; CDistributeNodePool::AllocNode, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 39   : 	//获取头结点
; 40   : 	tagDistributeNode *pDistributeNode = m_pHeadOfFreeList; 

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A ; CDistributeNodePool::m_pHeadOfFreeList
  00030	89 45 ec	 mov	 DWORD PTR _pDistributeNode$[ebp], eax

; 41   : 	if (pDistributeNode!=NULL)

  00033	83 7d ec 00	 cmp	 DWORD PTR _pDistributeNode$[ebp], 0
  00037	74 11		 je	 SHORT $LN5@AllocNode

; 42   : 	{
; 43   : 		m_pHeadOfFreeList = pDistributeNode->pNextDistributeNode;

  00039	8b 45 ec	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A, ecx ; CDistributeNodePool::m_pHeadOfFreeList

; 44   : 	}
; 45   : 	else 

  00045	e9 83 00 00 00	 jmp	 $LN6@AllocNode
$LN5@AllocNode:

; 46   : 	{
; 47   : 		//分配大块内存
; 48   : 		for (int nIndex=0;nIndex<BLOCK_SIZE;nIndex++)

  0004a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nIndex$5[ebp], 0
  00051	eb 09		 jmp	 SHORT $LN4@AllocNode
$LN2@AllocNode:
  00053	8b 45 e8	 mov	 eax, DWORD PTR _nIndex$5[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 e8	 mov	 DWORD PTR _nIndex$5[ebp], eax
$LN4@AllocNode:
  0005c	83 7d e8 14	 cmp	 DWORD PTR _nIndex$5[ebp], 20 ; 00000014H
  00060	7d 57		 jge	 SHORT $LN3@AllocNode

; 49   : 		{
; 50   : 			tagDistributeNode * pNewBlock = new tagDistributeNode;

  00062	6a 1c		 push	 28			; 0000001cH
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	83 c4 04	 add	 esp, 4
  0006c	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	83 7d 9c 00	 cmp	 DWORD PTR $T2[ebp], 0
  0007a	74 0d		 je	 SHORT $LN8@AllocNode
  0007c	8b 4d 9c	 mov	 ecx, DWORD PTR $T2[ebp]
  0007f	e8 00 00 00 00	 call	 ??0tagDistributeNode@@QAE@XZ ; tagDistributeNode::tagDistributeNode
  00084	89 45 98	 mov	 DWORD PTR tv79[ebp], eax
  00087	eb 07		 jmp	 SHORT $LN9@AllocNode
$LN8@AllocNode:
  00089	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN9@AllocNode:
  00090	8b 45 98	 mov	 eax, DWORD PTR tv79[ebp]
  00093	89 45 a0	 mov	 DWORD PTR $T3[ebp], eax
  00096	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009d	8b 4d a0	 mov	 ecx, DWORD PTR $T3[ebp]
  000a0	89 4d e4	 mov	 DWORD PTR _pNewBlock$4[ebp], ecx

; 51   : 			pNewBlock->pNextDistributeNode=m_pHeadOfFreeList;

  000a3	8b 45 e4	 mov	 eax, DWORD PTR _pNewBlock$4[ebp]
  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A ; CDistributeNodePool::m_pHeadOfFreeList
  000ac	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 52   : 			m_pHeadOfFreeList=pNewBlock;

  000af	8b 45 e4	 mov	 eax, DWORD PTR _pNewBlock$4[ebp]
  000b2	a3 00 00 00 00	 mov	 DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A, eax ; CDistributeNodePool::m_pHeadOfFreeList

; 53   : 		}

  000b7	eb 9a		 jmp	 SHORT $LN2@AllocNode
$LN3@AllocNode:

; 54   : 		
; 55   : 		//设置结点
; 56   : 		pDistributeNode = m_pHeadOfFreeList;

  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A ; CDistributeNodePool::m_pHeadOfFreeList
  000be	89 45 ec	 mov	 DWORD PTR _pDistributeNode$[ebp], eax

; 57   : 		m_pHeadOfFreeList=pDistributeNode->pNextDistributeNode;

  000c1	8b 45 ec	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]
  000c4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c7	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A, ecx ; CDistributeNodePool::m_pHeadOfFreeList
$LN6@AllocNode:

; 58   : 	}
; 59   : 
; 60   : 	return pDistributeNode;

  000cd	8b 45 ec	 mov	 eax, DWORD PTR _pDistributeNode$[ebp]

; 61   : }

  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ$0:
  00000	6a 1c		 push	 28			; 0000001cH
  00002	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AllocNode@CDistributeNodePool@@QAEPAUtagDistributeNode@@XZ ENDP ; CDistributeNodePool::AllocNode
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ??1CDistributeNodePool@@QAE@XZ
_TEXT	SEGMENT
tv71 = -100						; size = 4
$T2 = -96						; size = 4
$T3 = -92						; size = 4
_pDistributeNode$4 = -24				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CDistributeNodePool@@QAE@XZ PROC			; CDistributeNodePool::~CDistributeNodePool, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDistributeNodePool@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 54	 sub	 esp, 84			; 00000054H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	if(m_pHeadOfFreeList!=NULL)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A, 0 ; CDistributeNodePool::m_pHeadOfFreeList
  00036	0f 84 96 00 00
	00		 je	 $LN6@CDistribut

; 24   : 	{
; 25   : 		tagDistributeNode * pDistributeNode=m_pHeadOfFreeList;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A ; CDistributeNodePool::m_pHeadOfFreeList
  00041	89 45 e8	 mov	 DWORD PTR _pDistributeNode$4[ebp], eax
$LN2@CDistribut:

; 26   : 		while(pDistributeNode!=NULL)

  00044	83 7d e8 00	 cmp	 DWORD PTR _pDistributeNode$4[ebp], 0
  00048	0f 84 84 00 00
	00		 je	 $LN6@CDistribut

; 27   : 		{
; 28   : 			//安全释放
; 29   : 			m_pHeadOfFreeList = pDistributeNode->pNextDistributeNode;

  0004e	8b 45 e8	 mov	 eax, DWORD PTR _pDistributeNode$4[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A, ecx ; CDistributeNodePool::m_pHeadOfFreeList

; 30   : 			SafeDelete(pDistributeNode);

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00061	8b 45 e8	 mov	 eax, DWORD PTR _pDistributeNode$4[ebp]
  00064	89 45 a0	 mov	 DWORD PTR $T2[ebp], eax
  00067	8b 4d a0	 mov	 ecx, DWORD PTR $T2[ebp]
  0006a	89 4d a4	 mov	 DWORD PTR $T3[ebp], ecx
  0006d	83 7d a4 00	 cmp	 DWORD PTR $T3[ebp], 0
  00071	74 0f		 je	 SHORT $LN7@CDistribut
  00073	6a 01		 push	 1
  00075	8b 4d a4	 mov	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??_GtagDistributeNode@@QAEPAXI@Z
  0007d	89 45 9c	 mov	 DWORD PTR tv71[ebp], eax
  00080	eb 07		 jmp	 SHORT $LN8@CDistribut
$LN7@CDistribut:
  00082	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN8@CDistribut:
  00089	eb 23		 jmp	 SHORT $LN10@CDistribut
__catch$??1CDistributeNodePool@@QAE@XZ$0:
  0008b	33 c0		 xor	 eax, eax
  0008d	75 19		 jne	 SHORT $LN9@CDistribut
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CDistributeNodePool@@QAE@XZ@4JA
  00095	83 c1 08	 add	 ecx, 8
  00098	51		 push	 ecx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GOEFAIJG@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0009e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a3	85 c0		 test	 eax, eax
  000a5	74 01		 je	 SHORT $LN9@CDistribut
  000a7	cc		 int	 3
$LN9@CDistribut:
  000a8	b8 00 00 00 00	 mov	 eax, $LN13@CDistribut
  000ad	c3		 ret	 0
$LN10@CDistribut:
  000ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b5	eb 07		 jmp	 SHORT __tryend$??1CDistributeNodePool@@QAE@XZ$1
$LN13@CDistribut:
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??1CDistributeNodePool@@QAE@XZ$1:
  000be	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pDistributeNode$4[ebp], 0

; 31   : 			pDistributeNode=m_pHeadOfFreeList;

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pHeadOfFreeList@CDistributeNodePool@@2PAUtagDistributeNode@@A ; CDistributeNodePool::m_pHeadOfFreeList
  000ca	89 45 e8	 mov	 DWORD PTR _pDistributeNode$4[ebp], eax

; 32   : 		}

  000cd	e9 72 ff ff ff	 jmp	 $LN2@CDistribut
$LN6@CDistribut:

; 33   : 	}
; 34   : }

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDistributeNodePool@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDistributeNodePool@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDistributeNodePool@@QAE@XZ ENDP			; CDistributeNodePool::~CDistributeNodePool
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ??0CDistributeNodePool@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDistributeNodePool@@QAE@XZ PROC			; CDistributeNodePool::CDistributeNodePool, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : }

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CDistributeNodePool@@QAE@XZ ENDP			; CDistributeNodePool::CDistributeNodePool
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GtagDistributeNode@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GtagDistributeNode@@QAEPAXI@Z PROC			; tagDistributeNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1tagDistributeNode@@QAE@XZ ; tagDistributeNode::~tagDistributeNode
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 1c		 push	 28			; 0000001cH
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GtagDistributeNode@@QAEPAXI@Z ENDP			; tagDistributeNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.h
;	COMDAT ??1tagDistributeNode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1tagDistributeNode@@QAE@XZ PROC			; tagDistributeNode::~tagDistributeNode, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 		pPrepDistributeNode=NULL;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 42   : 		pNextDistributeNode=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 43   : 	}

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1tagDistributeNode@@QAE@XZ ENDP			; tagDistributeNode::~tagDistributeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.h
;	COMDAT ??0tagDistributeNode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0tagDistributeNode@@QAE@XZ PROC			; tagDistributeNode::tagDistributeNode, COMDAT
; _this$ = ecx

; 34   : 	tagDistributeNode()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	{
; 36   : 		pPrepDistributeNode=NULL;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 37   : 		pNextDistributeNode=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 38   : 	}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0tagDistributeNode@@QAE@XZ ENDP			; tagDistributeNode::tagDistributeNode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$CompareElements@KK@@YGHPBK0@Z
_TEXT	SEGMENT
tv128 = -72						; size = 4
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_pElement1$ = 8						; size = 4
_pElement2$ = 12					; size = 4
??$CompareElements@KK@@YGHPBK0@Z PROC			; CompareElements<unsigned long,unsigned long>, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@CompareEle:

; 152  : 	ENSURE(pElement1 != NULL && pElement2 != NULL);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pElement1$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@CompareEle
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElement2$[ebp], 0
  00013	74 09		 je	 SHORT $LN7@CompareEle
  00015	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN8@CompareEle
$LN7@CompareEle:
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN8@CompareEle:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@CompareEle
  00031	68 98 00 00 00	 push	 152			; 00000098H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@CompareEle
  00044	cc		 int	 3
$LN9@CompareEle:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@CompareEle
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@CompareEle:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@CompareEle

; 153  : 	ASSERT(AfxIsValidAddress(pElement1, sizeof(TYPE), FALSE));

  00054	6a 00		 push	 0
  00056	6a 04		 push	 4
  00058	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00061	85 c0		 test	 eax, eax
  00063	75 14		 jne	 SHORT $LN10@CompareEle
  00065	68 99 00 00 00	 push	 153			; 00000099H
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00074	85 c0		 test	 eax, eax
  00076	74 01		 je	 SHORT $LN10@CompareEle
  00078	cc		 int	 3
$LN10@CompareEle:

; 154  : 	ASSERT(AfxIsValidAddress(pElement2, sizeof(ARG_TYPE), FALSE));

  00079	6a 00		 push	 0
  0007b	6a 04		 push	 4
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pElement2$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00086	85 c0		 test	 eax, eax
  00088	75 14		 jne	 SHORT $LN11@CompareEle
  0008a	68 9a 00 00 00	 push	 154			; 0000009aH
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00094	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00099	85 c0		 test	 eax, eax
  0009b	74 01		 je	 SHORT $LN11@CompareEle
  0009d	cc		 int	 3
$LN11@CompareEle:

; 155  : 
; 156  : 	return *pElement1 == *pElement2;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _pElement2$[ebp]
  000a4	8b 10		 mov	 edx, DWORD PTR [eax]
  000a6	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a8	75 09		 jne	 SHORT $LN12@CompareEle
  000aa	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv128[ebp], 1
  000b1	eb 07		 jmp	 SHORT $LN13@CompareEle
$LN12@CompareEle:
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN13@CompareEle:
  000ba	8b 45 b8	 mov	 eax, DWORD PTR tv128[ebp]
$LN6@CompareEle:

; 157  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
??$CompareElements@KK@@YGHPBK0@Z ENDP			; CompareElements<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z PROC	; DumpElements<unsigned long>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z ENDP	; DumpElements<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z PROC	; SerializeElements<unsigned long>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ENDP	; SerializeElements<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$HashKey@K@@YGIK@Z
_TEXT	SEGMENT
$T1 = -80						; size = 8
_HashVal$ = -8						; size = 8
_key$ = 8						; size = 4
??$HashKey@K@@YGIK@Z PROC				; HashKey<unsigned long>, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 162  : 	// (algorithm copied from STL hash in xfunctional)
; 163  : #pragma warning(suppress: 4302) // 'type cast' : truncation
; 164  : #pragma warning(suppress: 4311) // pointer truncation
; 165  : 	ldiv_t HashVal = ldiv((long)(ARG_KEY)key, 127773);

  00009	68 1d f3 01 00	 push	 127773			; 0001f31dH
  0000e	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ldiv
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0001e	89 55 b4	 mov	 DWORD PTR $T1[ebp+4], edx
  00021	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  00024	89 4d f8	 mov	 DWORD PTR _HashVal$[ebp], ecx
  00027	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp+4]
  0002a	89 55 fc	 mov	 DWORD PTR _HashVal$[ebp+4], edx

; 166  : 	HashVal.rem = 16807 * HashVal.rem - 2836 * HashVal.quot;

  0002d	69 45 fc a7 41
	00 00		 imul	 eax, DWORD PTR _HashVal$[ebp+4], 16807
  00034	69 4d f8 14 0b
	00 00		 imul	 ecx, DWORD PTR _HashVal$[ebp], 2836
  0003b	2b c1		 sub	 eax, ecx
  0003d	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax

; 167  : 	if (HashVal.rem < 0)

  00040	79 0b		 jns	 SHORT $LN2@HashKey

; 168  : 		HashVal.rem += 2147483647;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]
  00045	05 ff ff ff 7f	 add	 eax, 2147483647		; 7fffffffH
  0004a	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax
$LN2@HashKey:

; 169  : 	return ((UINT)HashVal.rem);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]

; 170  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$HashKey@K@@YGIK@Z ENDP				; HashKey<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxplex_.h
;	COMDAT ?data@CPlex@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@CPlex@@QAEPAXXZ PROC				; CPlex::data, COMDAT
; _this$ = ecx

; 35   : 	void* data() { return this+1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?data@CPlex@@QAEPAXXZ ENDP				; CPlex::data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  :             return _time64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00013	83 c4 04	 add	 esp, 4

; 537  :         }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
