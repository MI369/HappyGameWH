; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\比赛服务\LockTimeMatch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
?IID_IServerUserItemSink@@3U_GUID@@B DD 09d0cfe02H	; IID_IServerUserItemSink
	DW	0fe9H
	DW	04a8bH
	DB	097H
	DB	095H
	DB	0acH
	DB	032H
	DB	067H
	DB	05aH
	DB	0f8H
	DB	0b1H
?IID_IMatchServiceManager@@3U_GUID@@B DD 07d381e8aH	; IID_IMatchServiceManager
	DW	08c10H
	DW	04443H
	DB	0b5H
	DB	0adH
	DB	075H
	DB	04bH
	DB	0e5H
	DB	050H
	DB	0c5H
	DB	053H
?IID_IGameMatchItem@@3U_GUID@@B DD 07d381e8aH		; IID_IGameMatchItem
	DW	08c10H
	DW	04443H
	DB	0b5H
	DB	0adH
	DB	075H
	DB	04bH
	DB	0e5H
	DB	050H
	DB	0c5H
	DB	053H
?IID_IMatchEventSink@@3U_GUID@@B DD 091cf29a0H		; IID_IMatchEventSink
	DW	04d3H
	DW	048daH
	DB	083H
	DB	036H
	DB	064H
	DB	0b2H
	DB	0daH
	DB	06aH
	DB	021H
	DB	0dbH
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	__vscprintf_l
PUBLIC	__vscprintf
PUBLIC	__snprintf_s
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
PUBLIC	?GetCategoryName@CTrace@ATL@@CAPA_WI@Z		; ATL::CTrace::GetCategoryName
PUBLIC	?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z		; ATL::CTrace::TraceV
PUBLIC	?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z		; ATL::CTrace::TraceV
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	??0CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::CPreserveLastError
PUBLIC	??1CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::~CPreserveLastError
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??0CTimeSpan@ATL@@QAE@_J@Z			; ATL::CTimeSpan::CTimeSpan
PUBLIC	?GetDays@CTimeSpan@ATL@@QBE_JXZ			; ATL::CTimeSpan::GetDays
PUBLIC	?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ		; ATL::CTimeSpan::GetTotalSeconds
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
PUBLIC	??0CTime@ATL@@QAE@XZ				; ATL::CTime::CTime
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
PUBLIC	??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z		; ATL::CTime::CTime
PUBLIC	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z		; ATL::CTime::operator-
PUBLIC	??MCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator<
PUBLIC	??PCTime@ATL@@QBE_NV01@@Z			; ATL::CTime::operator>=
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ; ATL::CTime::GetAsSystemTime
PUBLIC	?GetYear@CTime@ATL@@QBEHXZ			; ATL::CTime::GetYear
PUBLIC	?GetMonth@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMonth
PUBLIC	?GetDay@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDay
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
PUBLIC	?GetSecond@CTime@ATL@@QBEHXZ			; ATL::CTime::GetSecond
PUBLIC	??0IUnknownEx@@QAE@XZ				; IUnknownEx::IUnknownEx
PUBLIC	?GetProductVer@@YAEK@Z				; GetProductVer
PUBLIC	?GetMainVer@@YAEK@Z				; GetMainVer
PUBLIC	?GetSubVer@@YAEK@Z				; GetSubVer
PUBLIC	?GetBuildVer@@YAEK@Z				; GetBuildVer
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	?IsImmediateWriteScore@CServerRule@@SA_NK@Z	; CServerRule::IsImmediateWriteScore
PUBLIC	?IsSuportPlayBack@CServerRule@@SA_NK@Z		; CServerRule::IsSuportPlayBack
PUBLIC	??0IServerUserItemSink@@QAE@XZ			; IServerUserItemSink::IServerUserItemSink
PUBLIC	??0IGameMatchItem@@QAE@XZ			; IGameMatchItem::IGameMatchItem
PUBLIC	??0IMatchEventSink@@QAE@XZ			; IMatchEventSink::IMatchEventSink
PUBLIC	?GetCount@CDistributeManager@@QAEGXZ		; CDistributeManager::GetCount
PUBLIC	?SetDistributeRule@CDistributeManager@@QAEXE@Z	; CDistributeManager::SetDistributeRule
PUBLIC	??0CLockTimeMatch@@QAE@XZ			; CLockTimeMatch::CLockTimeMatch
PUBLIC	??1CLockTimeMatch@@UAE@XZ			; CLockTimeMatch::~CLockTimeMatch
PUBLIC	?Release@CLockTimeMatch@@UAEXXZ			; CLockTimeMatch::Release
PUBLIC	?QueryInterface@CLockTimeMatch@@UAEPAXABU_GUID@@K@Z ; CLockTimeMatch::QueryInterface
PUBLIC	?OnStartService@CLockTimeMatch@@UAEXXZ		; CLockTimeMatch::OnStartService
PUBLIC	?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z ; CLockTimeMatch::BindTableFrame
PUBLIC	?InitMatchInterface@CLockTimeMatch@@UAE_NAAUtagMatchManagerParameter@@@Z ; CLockTimeMatch::InitMatchInterface
PUBLIC	?OnEventTimer@CLockTimeMatch@@UAE_NKI@Z		; CLockTimeMatch::OnEventTimer
PUBLIC	?OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z ; CLockTimeMatch::OnEventDataBase
PUBLIC	?OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z ; CLockTimeMatch::OnEventSocketMatch
PUBLIC	?OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z ; CLockTimeMatch::OnEventUserItemScore
PUBLIC	?OnEventUserItemGameData@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z ; CLockTimeMatch::OnEventUserItemGameData
PUBLIC	?OnEventUserItemStatus@CLockTimeMatch@@UAE_NPAUIServerUserItem@@GG@Z ; CLockTimeMatch::OnEventUserItemStatus
PUBLIC	?OnEventUserItemRight@CLockTimeMatch@@UAE_NPAUIServerUserItem@@KKE@Z ; CLockTimeMatch::OnEventUserItemRight
PUBLIC	?OnEventUserLogon@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::OnEventUserLogon
PUBLIC	?OnEventUserLogout@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::OnEventUserLogout
PUBLIC	?OnEventUserLogonFinish@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::OnEventUserLogonFinish
PUBLIC	?OnEventEnterMatch@CLockTimeMatch@@UAE_NKPAXK_N@Z ; CLockTimeMatch::OnEventEnterMatch
PUBLIC	?OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z ; CLockTimeMatch::OnEventUserJoinMatch
PUBLIC	?OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z ; CLockTimeMatch::OnEventUserQuitMatch
PUBLIC	?OnEventGameStart@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z ; CLockTimeMatch::OnEventGameStart
PUBLIC	?OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z ; CLockTimeMatch::OnEventGameEnd
PUBLIC	?OnEventUserReturnMatch@CLockTimeMatch@@UAE_NPAUITableFrame@@PAUIServerUserItem@@@Z ; CLockTimeMatch::OnEventUserReturnMatch
PUBLIC	?OnActionUserSitDown@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z ; CLockTimeMatch::OnActionUserSitDown
PUBLIC	?OnActionUserStandUp@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z ; CLockTimeMatch::OnActionUserStandUp
PUBLIC	?OnActionUserOnReady@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@PAXG@Z ; CLockTimeMatch::OnActionUserOnReady
PUBLIC	?ClearSameTableUser@CLockTimeMatch@@IAEXK@Z	; CLockTimeMatch::ClearSameTableUser
PUBLIC	?InsertSameTableUser@CLockTimeMatch@@IAEXKK@Z	; CLockTimeMatch::InsertSameTableUser
PUBLIC	?RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::RemoveDistribute
PUBLIC	?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute
PUBLIC	?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserScore
PUBLIC	?SendMatchUserInitScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserInitScore
PUBLIC	?SendSafeCardNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendSafeCardNotify
PUBLIC	?SendDeductFeeNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendDeductFeeNotify
PUBLIC	?SendEliminateNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendEliminateNotify
PUBLIC	?SendSignupSuccessNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendSignupSuccessNotify
PUBLIC	?SendReviveNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@E_N@Z ; CLockTimeMatch::SendReviveNotify
PUBLIC	?VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::VerifyUserEnterMatch
PUBLIC	?VerifyMatchTime@CLockTimeMatch@@AAE_NPADGAAG@Z	; CLockTimeMatch::VerifyMatchTime
PUBLIC	?CalcMatchNo@CLockTimeMatch@@IAE_JXZ		; CLockTimeMatch::CalcMatchNo
PUBLIC	?PerformDistribute@CLockTimeMatch@@IAE_NXZ	; CLockTimeMatch::PerformDistribute
PUBLIC	?UpdateMatchStatus@CLockTimeMatch@@IAEXXZ	; CLockTimeMatch::UpdateMatchStatus
PUBLIC	?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ	; CLockTimeMatch::SwitchMatchTimer
PUBLIC	?IsMatchSignupEnd@CLockTimeMatch@@IAE_NXZ	; CLockTimeMatch::IsMatchSignupEnd
PUBLIC	?IsMatchSignupStart@CLockTimeMatch@@IAE_NXZ	; CLockTimeMatch::IsMatchSignupStart
PUBLIC	?GetMatchStartInterval@CLockTimeMatch@@IAEKXZ	; CLockTimeMatch::GetMatchStartInterval
PUBLIC	?PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z ; CLockTimeMatch::PerformAllUserStandUp
PUBLIC	?SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z ; CLockTimeMatch::SendTableUserMatchInfo
PUBLIC	?WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z ; CLockTimeMatch::WriteUserAward
PUBLIC	??_GCLockTimeMatch@@UAEPAXI@Z			; CLockTimeMatch::`scalar deleting destructor'
PUBLIC	??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ		; _snprintf_s<128>
PUBLIC	??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ		; _snprintf_s<64>
PUBLIC	??0?$CWHArray@UtagDistributeInfo@@ABU1@@@QAE@XZ	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::CWHArray<tagDistributeInfo,tagDistributeInfo const &>
PUBLIC	??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>
PUBLIC	?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
PUBLIC	?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt
PUBLIC	??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
PUBLIC	??_G?$CWHArray@UtagDistributeInfo@@ABU1@@@UAEPAXI@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`scalar deleting destructor'
PUBLIC	?Release@CLockTimeMatch@@W3AEXXZ		; [thunk]:CLockTimeMatch::Release`adjustor{4}'
PUBLIC	?QueryInterface@CLockTimeMatch@@W3AEPAXABU_GUID@@K@Z ; [thunk]:CLockTimeMatch::QueryInterface`adjustor{4}'
PUBLIC	?Release@CLockTimeMatch@@W7AEXXZ		; [thunk]:CLockTimeMatch::Release`adjustor{8}'
PUBLIC	?QueryInterface@CLockTimeMatch@@W7AEPAXABU_GUID@@K@Z ; [thunk]:CLockTimeMatch::QueryInterface`adjustor{8}'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException@		; `string'
PUBLIC	?m_nLevel@CTrace@ATL@@1IA			; ATL::CTrace::m_nLevel
PUBLIC	?m_nCategory@CTrace@ATL@@1IA			; ATL::CTrace::m_nCategory
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ ; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
PUBLIC	??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ ; `string'
PUBLIC	??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ ; `string'
PUBLIC	?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA	; `ATL::CTime::CTime'::`1'::__LINE__Var
PUBLIC	??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BK@NHHHCKNA@?$AAm?$AA_?$AAt?$AAi?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1@ ; `string'
PUBLIC	?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA ; `ATL::CTime::GetLocalTm'::`1'::__LINE__Var
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IServerUserItemSink@@6B@			; IServerUserItemSink::`vftable'
PUBLIC	??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_7IGameMatchItem@@6B@				; IGameMatchItem::`vftable'
PUBLIC	??_7IMatchEventSink@@6B@			; IMatchEventSink::`vftable'
PUBLIC	??_7CLockTimeMatch@@6BIGameMatchItem@@@		; CLockTimeMatch::`vftable'
PUBLIC	??_7CLockTimeMatch@@6BIMatchEventSink@@@	; CLockTimeMatch::`vftable'
PUBLIC	??_7CLockTimeMatch@@6BIServerUserItemSink@@@	; CLockTimeMatch::`vftable'
PUBLIC	?__LINE__Var@?0???1CLockTimeMatch@@UAE@XZ@4JA	; `CLockTimeMatch::~CLockTimeMatch'::`1'::__LINE__Var
PUBLIC	??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z@4JA ; `CLockTimeMatch::BindTableFrame'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnEventTimer@CLockTimeMatch@@UAE_NKI@Z@4JA ; `CLockTimeMatch::OnEventTimer'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@LFOAJBDH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T@ ; `string'
PUBLIC	??_C@_0FP@CHGGEFGE@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T?Z?5@ ; `string'
PUBLIC	??_C@_0CH@GCHCKFGB@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?C?w?L?l?T?Y?$MA@ ; `string'
PUBLIC	??_C@_0FF@DDBBBMHA@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?$LI?P?P?$LL?D?z?$LF?D?$LC@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA ; `CLockTimeMatch::OnEventDataBase'::`1'::__LINE__Var
PUBLIC	??_C@_0CL@IJGLKDAG@?$LB?$KH?G?$LI?0?D?z?$LC?$LL?$LO?$NP?$LB?$LI?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LF?D?$LB?$KI?C?$PL?W?J?$LI?q@ ; `string'
PUBLIC	??_C@_0DB@IMGKPMKE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KD?O?U?$LP?$KI?$LJ?$LK?B?r?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O@ ; `string'
PUBLIC	??_C@_0CL@GGBOLFBO@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LI?$LE?$LL?n?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@ ; `string'
PUBLIC	??_C@_0EH@PFKOHNEP@?$LB?$LO?$LE?N?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?G?$LA?M?y?M?x?U?$LO?$LC@ ; `string'
PUBLIC	??_C@_0FH@GLGCEBDA@?R?r?$LB?$KI?C?$PL?H?K?J?$PN?$LC?$LL?W?c?$KD?$KM?H?$KB?O?$PL?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KB?$KD?R@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA ; `CLockTimeMatch::OnEventSocketMatch'::`1'::__LINE__Var
PUBLIC	??_C@_0CD@LHKCDNBI@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?$LF?H?$LE@ ; `string'
PUBLIC	??_C@_0CH@PJALIOJF@?D?z?$LF?D?$LH?V?J?$PN?N?$LE?$LE?o?$LF?$LN?L?T?L?$KN?$LH?V?J?$PN?O?$NP?$KD?$KM?$LC?$LL?P?h?R@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA ; `CLockTimeMatch::OnEventUserItemScore'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA ; `CLockTimeMatch::OnEventUserJoinMatch'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@CKGEBLOB@?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?$KD?$KM?G?k?I?T?$LK?s?T?Y?$MA?$LE?$KD?$KB@ ; `string'
PUBLIC	??_C@_0CP@GPKKPIPC@?$LB?$KI?C?$PL?R?Q?$LO?$KN?$LN?X?V?$LJ?$KD?$KM?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H@ ; `string'
PUBLIC	??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@ ; `string'
PUBLIC	??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@ ; `string'
PUBLIC	??_C@_0CH@PBJGPBJH@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?I?T?$LK@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA ; `CLockTimeMatch::OnEventUserQuitMatch'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@DMINAKJA@?$LB?$KH?G?$LI?0?D?z?R?Q?$LC?N?$LM?S?$LJ?$PN?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KD?$KM?$LC?$LL?D?$NM?M?K@ ; `string'
PUBLIC	??_C@_0BJ@CODAEBJM@?$LB?$LO?$LO?V?$LB?H?H?$PM?J?G?D?z?$LF?D?$LF?Z?5?$CFd?5?$LO?V?$KB?$KD@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z@4JA ; `CLockTimeMatch::OnEventGameEnd'::`1'::__LINE__Var
PUBLIC	??_C@_0EJ@COJNGGKL@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?$LP?I?R?T?$LM?L?P?x?$LF?$LB?G?$LA?$LB@ ; `string'
PUBLIC	??_C@_0HB@JAGJBAEH@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?O?$LF?M?$LD?$LN?$KL?$LL?a?$LM?G?B?$LM?D@ ; `string'
PUBLIC	??_C@_0DC@KHAHGIHK@?$LB?$LO?$LO?V?$LB?H?H?$PM?$LN?a?J?x?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH@ ; `string'
PUBLIC	??_C@_0DC@JLJHDNKI@?S?I?S?Z?M?f?$LM?R?$MA?k?$LP?$KK?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?N?$KK?D?z?V?X?P?B?$LH@ ; `string'
PUBLIC	?__LINE__Var@?0??VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z@4JA ; `CLockTimeMatch::VerifyUserEnterMatch'::`1'::__LINE__Var
PUBLIC	??_C@_0CK@MEIIMJBH@?S?I?S?Z?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM@ ; `string'
PUBLIC	??_C@_0EB@IICMIGNG@?D?z?R?Q?M?j?$LD?I?5?$CFd?5?$LO?V?$LB?H?H?$PM?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P@ ; `string'
PUBLIC	?__LINE__Var@?0??PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z@4JA ; `CLockTimeMatch::PerformAllUserStandUp'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??PerformDistribute@CLockTimeMatch@@IAE_NXZ@4JA ; `CLockTimeMatch::PerformDistribute'::`1'::__LINE__Var
PUBLIC	??_7?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`vftable'
PUBLIC	?__LINE__Var@?0??InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA ; `CLockTimeMatch::InsertDistribute'::`1'::__LINE__Var
PUBLIC	??_C@_0DA@MIICOPIN@?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H?$PM@ ; `string'
PUBLIC	??_C@_0DI@NBAMOMBH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?S?Z?C?w?L?l?$CFd@ ; `string'
PUBLIC	??_C@_0EK@KKHDFNFN@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LB?$KI?C?$PL?J?$LB@ ; `string'
PUBLIC	??_C@_0DK@LADIJLOB@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?G?k?D?z?S?Z?$LN?q?L?l?$CFd?J?$LB@ ; `string'
PUBLIC	??_C@_0FM@EDKOAGPM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@ ; `string'
PUBLIC	??_C@_0FA@CPFANEOM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@ ; `string'
PUBLIC	??_C@_0FK@LABKGBIM@?$LJ?$KH?O?$LC?D?z?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KB?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LD?v?J?$NL?$LB?$KD?O@ ; `string'
PUBLIC	??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@		; `string'
PUBLIC	??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@		; `string'
PUBLIC	??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@ ; `string'
PUBLIC	??_C@_0CL@LKBHCBDE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@ ; `string'
PUBLIC	??_C@_0CH@JFAMEAMK@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LN?l?J?$LB?G?$LA?$MA?$LE?$LC?N?$LM@ ; `string'
PUBLIC	?__LINE__Var@?0??RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA ; `CLockTimeMatch::RemoveDistribute'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z@4JA ; `CLockTimeMatch::SendTableUserMatchInfo'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@KNNGNBNI@?$LL?$PN?$LH?V?$LH?$LN?J?$LN?$KD?$LK?$MA?$NL?$LM?F?$LL?$PN?$LH?V@ ; `string'
PUBLIC	??_C@_0N@JCGEHOBO@?S?N?O?$LH?$LL?y?J?$PN?$KD?$LK?$CFd@ ; `string'
PUBLIC	??_C@_0BD@NHCOODCL@?$LO?V?V?F?C?$PL?$LD?F?$KD?$LK?$LG?$KI?J?$LB?$LP?$KK?H?$PM@ ; `string'
PUBLIC	?__LINE__Var@?0??WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA ; `CLockTimeMatch::WriteUserAward'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServerUserItemSink@@6B@			; IServerUserItemSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServerUserItemSink@@@8			; IServerUserItemSink `RTTI Type Descriptor'
PUBLIC	??_R3IServerUserItemSink@@8			; IServerUserItemSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServerUserItemSink@@8			; IServerUserItemSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServerUserItemSink@@8		; IServerUserItemSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLockTimeMatch@@6BIGameMatchItem@@@	; CLockTimeMatch::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLockTimeMatch@@@8			; CLockTimeMatch `RTTI Type Descriptor'
PUBLIC	??_R3CLockTimeMatch@@8				; CLockTimeMatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLockTimeMatch@@8				; CLockTimeMatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLockTimeMatch@@8			; CLockTimeMatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IGameMatchItem@@8			; IGameMatchItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIGameMatchItem@@@8			; IGameMatchItem `RTTI Type Descriptor'
PUBLIC	??_R3IGameMatchItem@@8				; IGameMatchItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IGameMatchItem@@8				; IGameMatchItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IMatchEventSink@@8			; IMatchEventSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIMatchEventSink@@@8			; IMatchEventSink `RTTI Type Descriptor'
PUBLIC	??_R3IMatchEventSink@@8				; IMatchEventSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMatchEventSink@@8				; IMatchEventSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IMatchEventSink@@8		; IMatchEventSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@IServerUserItemSink@@8		; IServerUserItemSink::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R4CLockTimeMatch@@6BIMatchEventSink@@@	; CLockTimeMatch::`RTTI Complete Object Locator'
PUBLIC	??_R4CLockTimeMatch@@6BIServerUserItemSink@@@	; CLockTimeMatch::`RTTI Complete Object Locator'
PUBLIC	??_R4IGameMatchItem@@6B@			; IGameMatchItem::`RTTI Complete Object Locator'
PUBLIC	??_R4IMatchEventSink@@6B@			; IMatchEventSink::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@UtagDistributeInfo@@ABU1@@@@8 ; CWHArray<tagDistributeInfo,tagDistributeInfo const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@UtagDistributeInfo@@ABU1@@@8	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@UtagDistributeInfo@@ABU1@@@8	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@UtagDistributeInfo@@ABU1@@@8 ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp___localtime64_s:PROC
EXTRN	__imp___mktime64:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	??0CTableFrameHook@@QAE@XZ:PROC			; CTableFrameHook::CTableFrameHook
EXTRN	??0CDistributeManager@@QAE@XZ:PROC		; CDistributeManager::CDistributeManager
EXTRN	??1CDistributeManager@@UAE@XZ:PROC		; CDistributeManager::~CDistributeManager
EXTRN	?RemoveAll@CDistributeManager@@QAEXXZ:PROC	; CDistributeManager::RemoveAll
EXTRN	?InsertDistributeNode@CDistributeManager@@QAEHABUtagDistributeInfo@@@Z:PROC ; CDistributeManager::InsertDistributeNode
EXTRN	?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z:PROC ; CDistributeManager::RemoveDistributeNode
EXTRN	?RemoveDistributeNode@CDistributeManager@@QAEXPAUIServerUserItem@@@Z:PROC ; CDistributeManager::RemoveDistributeNode
EXTRN	?PerformDistribute@CDistributeManager@@QAEGAAV?$CWHArray@UtagDistributeInfo@@ABU1@@@G@Z:PROC ; CDistributeManager::PerformDistribute
EXTRN	?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z:PROC ; CDistributeManager::SearchNode
EXTRN	?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z:PROC ; CDistributeManager::GetUserSameTableInfo
EXTRN	?RemoveUserSameTableInfo@CDistributeManager@@QAEXK@Z:PROC ; CDistributeManager::RemoveUserSameTableInfo
EXTRN	??_ECLockTimeMatch@@UAEPAXI@Z:PROC		; CLockTimeMatch::`vector deleting destructor'
EXTRN	??_E?$CWHArray@UtagDistributeInfo@@ABU1@@@UAEPAXI@Z:PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLevel@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLevel@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLevel
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@UtagDistributeInfo@@ABU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@UtagDistributeInfo@@ABU1@@@8 DD FLAT:??_R0?AV?$CWHArray@UtagDistributeInfo@@ABU1@@@@8 ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@UtagDistributeInfo@@ABU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@UtagDistributeInfo@@ABU1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@UtagDistributeInfo@@ABU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@UtagDistributeInfo@@ABU1@@@8 ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@UtagDistributeInfo@@ABU1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@UtagDistributeInfo@@ABU1@@@8 DD 00H	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@UtagDistributeInfo@@ABU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@UtagDistributeInfo@@ABU1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@UtagDistributeInfo@@ABU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@UtagDistributeInfo@@ABU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@ DD 00H	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@UtagDistributeInfo@@ABU1@@@@8
	DD	FLAT:??_R3?$CWHArray@UtagDistributeInfo@@ABU1@@@8
rdata$r	ENDS
;	COMDAT ??_R4IMatchEventSink@@6B@
rdata$r	SEGMENT
??_R4IMatchEventSink@@6B@ DD 00H			; IMatchEventSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIMatchEventSink@@@8
	DD	FLAT:??_R3IMatchEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R4IGameMatchItem@@6B@
rdata$r	SEGMENT
??_R4IGameMatchItem@@6B@ DD 00H				; IGameMatchItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIGameMatchItem@@@8
	DD	FLAT:??_R3IGameMatchItem@@8
rdata$r	ENDS
;	COMDAT ??_R4CLockTimeMatch@@6BIServerUserItemSink@@@
rdata$r	SEGMENT
??_R4CLockTimeMatch@@6BIServerUserItemSink@@@ DD 00H	; CLockTimeMatch::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCLockTimeMatch@@@8
	DD	FLAT:??_R3CLockTimeMatch@@8
rdata$r	ENDS
;	COMDAT ??_R4CLockTimeMatch@@6BIMatchEventSink@@@
rdata$r	SEGMENT
??_R4CLockTimeMatch@@6BIMatchEventSink@@@ DD 00H	; CLockTimeMatch::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLockTimeMatch@@@8
	DD	FLAT:??_R3CLockTimeMatch@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknownEx@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@IServerUserItemSink@@8
rdata$r	SEGMENT
??_R17?0A@EA@IServerUserItemSink@@8 DD FLAT:??_R0?AUIServerUserItemSink@@@8 ; IServerUserItemSink::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknownEx@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IMatchEventSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMatchEventSink@@8 DD FLAT:??_R0?AUIMatchEventSink@@@8 ; IMatchEventSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMatchEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R2IMatchEventSink@@8
rdata$r	SEGMENT
??_R2IMatchEventSink@@8 DD FLAT:??_R1A@?0A@EA@IMatchEventSink@@8 ; IMatchEventSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IMatchEventSink@@8
rdata$r	SEGMENT
??_R3IMatchEventSink@@8 DD 00H				; IMatchEventSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IMatchEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMatchEventSink@@@8
data$r	SEGMENT
??_R0?AUIMatchEventSink@@@8 DD FLAT:??_7type_info@@6B@	; IMatchEventSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMatchEventSink@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@IMatchEventSink@@8
rdata$r	SEGMENT
??_R13?0A@EA@IMatchEventSink@@8 DD FLAT:??_R0?AUIMatchEventSink@@@8 ; IMatchEventSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMatchEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IGameMatchItem@@8
rdata$r	SEGMENT
??_R2IGameMatchItem@@8 DD FLAT:??_R1A@?0A@EA@IGameMatchItem@@8 ; IGameMatchItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IGameMatchItem@@8
rdata$r	SEGMENT
??_R3IGameMatchItem@@8 DD 00H				; IGameMatchItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IGameMatchItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIGameMatchItem@@@8
data$r	SEGMENT
??_R0?AUIGameMatchItem@@@8 DD FLAT:??_7type_info@@6B@	; IGameMatchItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIGameMatchItem@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IGameMatchItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IGameMatchItem@@8 DD FLAT:??_R0?AUIGameMatchItem@@@8 ; IGameMatchItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IGameMatchItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLockTimeMatch@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLockTimeMatch@@8 DD FLAT:??_R0?AVCLockTimeMatch@@@8 ; CLockTimeMatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLockTimeMatch@@8
rdata$r	ENDS
;	COMDAT ??_R2CLockTimeMatch@@8
rdata$r	SEGMENT
??_R2CLockTimeMatch@@8 DD FLAT:??_R1A@?0A@EA@CLockTimeMatch@@8 ; CLockTimeMatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IGameMatchItem@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknownEx@@8
	DD	FLAT:??_R13?0A@EA@IMatchEventSink@@8
	DD	FLAT:??_R13?0A@EC@IUnknownEx@@8
	DD	FLAT:??_R17?0A@EA@IServerUserItemSink@@8
	DD	FLAT:??_R17?0A@EC@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CLockTimeMatch@@8
rdata$r	SEGMENT
??_R3CLockTimeMatch@@8 DD 00H				; CLockTimeMatch::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	07H
	DD	FLAT:??_R2CLockTimeMatch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLockTimeMatch@@@8
data$r	SEGMENT
??_R0?AVCLockTimeMatch@@@8 DD FLAT:??_7type_info@@6B@	; CLockTimeMatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLockTimeMatch@@', 00H
data$r	ENDS
;	COMDAT ??_R4CLockTimeMatch@@6BIGameMatchItem@@@
rdata$r	SEGMENT
??_R4CLockTimeMatch@@6BIGameMatchItem@@@ DD 00H		; CLockTimeMatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLockTimeMatch@@@8
	DD	FLAT:??_R3CLockTimeMatch@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServerUserItemSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServerUserItemSink@@8 DD FLAT:??_R0?AUIServerUserItemSink@@@8 ; IServerUserItemSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R2IServerUserItemSink@@8
rdata$r	SEGMENT
??_R2IServerUserItemSink@@8 DD FLAT:??_R1A@?0A@EA@IServerUserItemSink@@8 ; IServerUserItemSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServerUserItemSink@@8
rdata$r	SEGMENT
??_R3IServerUserItemSink@@8 DD 00H			; IServerUserItemSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServerUserItemSink@@@8
data$r	SEGMENT
??_R0?AUIServerUserItemSink@@@8 DD FLAT:??_7type_info@@6B@ ; IServerUserItemSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServerUserItemSink@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServerUserItemSink@@6B@
rdata$r	SEGMENT
??_R4IServerUserItemSink@@6B@ DD 00H			; IServerUserItemSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServerUserItemSink@@@8
	DD	FLAT:??_R3IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA DD 0a1dH ; `CLockTimeMatch::WriteUserAward'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@NHCOODCL@?$LO?V?V?F?C?$PL?$LD?F?$KD?$LK?$LG?$KI?J?$LB?$LP?$KK?H?$PM@
CONST	SEGMENT
??_C@_0BD@NHCOODCL@?$LO?V?V?F?C?$PL?$LD?F?$KD?$LK?$LG?$KI?J?$LB?$LP?$KK?H?$PM@ DB 0beH
	DB	0d6H, 0d6H, 0c6H, 0c3H, 0fbH, 0b3H, 0c6H, 0a3H, 0baH, 0b6H, 0a8H
	DB	0caH, 0b1H, 0bfH, 0aaH, 0c8H, 0fcH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JCGEHOBO@?S?N?O?$LH?$LL?y?J?$PN?$KD?$LK?$CFd@
CONST	SEGMENT
??_C@_0N@JCGEHOBO@?S?N?O?$LH?$LL?y?J?$PN?$KD?$LK?$CFd@ DB 0d3H, 0ceH, 0cfH
	DB	0b7H, 0bbH, 0f9H, 0caH, 0fdH, 0a3H, 0baH, '%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KNNGNBNI@?$LL?$PN?$LH?V?$LH?$LN?J?$LN?$KD?$LK?$MA?$NL?$LM?F?$LL?$PN?$LH?V@
CONST	SEGMENT
??_C@_0BD@KNNGNBNI@?$LL?$PN?$LH?V?$LH?$LN?J?$LN?$KD?$LK?$MA?$NL?$LM?F?$LL?$PN?$LH?V@ DB 0bbH
	DB	0fdH, 0b7H, 0d6H, 0b7H, 0bdH, 0caH, 0bdH, 0a3H, 0baH, 0c0H, 0dbH
	DB	0bcH, 0c6H, 0bbH, 0fdH, 0b7H, 0d6H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z@4JA DD 09f9H ; `CLockTimeMatch::SendTableUserMatchInfo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA DD 09ebH ; `CLockTimeMatch::RemoveDistribute'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@JFAMEAMK@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LN?l?J?$LB?G?$LA?$MA?$LE?$LC?N?$LM@
CONST	SEGMENT
??_C@_0CH@JFAMEAMK@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LN?l?J?$LB?G?$LA?$MA?$LE?$LC?N?$LM@ DB 0b9H
	DB	0a7H, 0cfH, 0b2H, 0c4H, 0faH, 0a3H, 0acH, 0b1H, 0a8H, 0c3H, 0fbH
	DB	0b3H, 0c9H, 0b9H, 0a6H, 0a3H, 0acH, 0c7H, 0ebH, 0bdH, 0ecH, 0caH
	DB	0b1H, 0c7H, 0b0H, 0c0H, 0b4H, 0b2H, 0ceH, 0bcH, 0d3H, 0b1H, 0c8H
	DB	0c8H, 0fcH, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LKBHCBDE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@
CONST	SEGMENT
??_C@_0CL@LKBHCBDE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@ DB 0b9H
	DB	0a7H, 0cfH, 0b2H, 0c4H, 0faH, 0a3H, 0acH, 0b1H, 0a8H, 0c3H, 0fbH
	DB	0b3H, 0c9H, 0b9H, 0a6H, 0a3H, 0acH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H
	DB	0fdH, 0cfH, 0b5H, 0cdH, 0b3H, 0ceH, 0aaH, 0c4H, 0faH, 0b7H, 0d6H
	DB	0c5H, 0e4H, 0d7H, 0f9H, 0ceH, 0bbH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@
CONST	SEGMENT
??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@ DB 0b2H
	DB	0ceH, 0c8H, 0fcH, 0bdH, 0abH, 0bfH, 0dbH, 0b3H, 0fdH, 0b1H, 0a8H
	DB	0c3H, 0fbH, 0b7H, 0d1H, ' %I64d %s', 0a3H, 0acH, 0c8H, 0b7H, 0c8H
	DB	0cfH, 0d2H, 0aaH, 0b2H, 0ceH, 0c8H, 0fcH, 0c2H, 0f0H, 0a3H, 0bfH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@
CONST	SEGMENT
??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@ DB 0d4H, 0aaH, 0b1H, 0a6H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@
CONST	SEGMENT
??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@ DB 0d3H, 0ceH, 0cfH, 0b7H, 0b1H, 0d2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@LABKGBIM@?$LJ?$KH?O?$LC?D?z?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KB?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LD?v?J?$NL?$LB?$KD?O@
CONST	SEGMENT
??_C@_0FK@LABKGBIM@?$LJ?$KH?O?$LC?D?z?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KB?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LD?v?J?$NL?$LB?$KD?O@ DB 0b9H
	DB	0a7H, 0cfH, 0b2H, 0c4H, 0faH, 0b1H, 0a8H, 0c3H, 0fbH, 0b3H, 0c9H
	DB	0b9H, 0a6H, 0a3H, 0a1H, 0b1H, 0beH, 0b3H, 0a1H, 0b1H, 0c8H, 0c8H
	DB	0fcH, 0b3H, 0f6H, 0caH, 0dbH, 0b1H, 0a3H, 0cfH, 0d5H, 0bfH, 0a8H
	DB	', ', 0b1H, 0bbH, 0ccH, 0d4H, 0ccH, 0adH, 0bfH, 0c9H, 0c3H, 0e2H
	DB	0b7H, 0d1H, 0b8H, 0b4H, 0bbH, 0eeH, 0d2H, 0bbH, 0b4H, 0ceH, 0a3H
	DB	0acH, 0caH, 0dbH, 0bcH, 0dbH, ' %I64d ', 0bdH, 0f0H, 0b1H, 0d2H
	DB	0a3H, 0acH, 0c4H, 0faH, 0caH, 0c7H, 0b7H, 0f1H, 0d2H, 0aaH, 0b9H
	DB	0baH, 0c2H, 0f2H, 0a3H, 0bfH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@CPFANEOM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@
CONST	SEGMENT
??_C@_0FA@CPFANEOM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@ DB 0c4H
	DB	0faH, 0b5H, 0c4H, 0b1H, 0c8H, 0c8H, 0fcH, 0b1H, 0d2H, 0b5H, 0cdH
	DB	0d3H, 0daH, ' %d', 0a3H, 0acH, 0bdH, 0abH, 0b2H, 0bbH, 0c4H, 0dcH
	DB	0bcH, 0ccH, 0d0H, 0f8H, 0d3H, 0ceH, 0cfH, 0b7H, 0a1H, 0a3H, 0d3H
	DB	0c9H, 0d3H, 0daH, 0c4H, 0faH, 0b9H, 0baH, 0c2H, 0f2H, 0c1H, 0cbH
	DB	0b1H, 0a3H, 0cfH, 0d5H, 0bfH, 0a8H, 0a3H, 0acH, 0cfH, 0b5H, 0cdH
	DB	0b3H, 0bdH, 0abH, 0c3H, 0e2H, 0b7H, 0d1H, 0ceH, 0aaH, 0c4H, 0faH
	DB	0b8H, 0b4H, 0bbH, 0eeH, 0d2H, 0bbH, 0b4H, 0ceH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@EDKOAGPM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@
CONST	SEGMENT
??_C@_0FM@EDKOAGPM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@ DB 0c4H
	DB	0faH, 0b5H, 0c4H, 0b1H, 0c8H, 0c8H, 0fcH, 0b1H, 0d2H, 0b5H, 0cdH
	DB	0d3H, 0daH, ' %d', 0a3H, 0acH, 0bdH, 0abH, 0b2H, 0bbH, 0c4H, 0dcH
	DB	0bcH, 0ccH, 0d0H, 0f8H, 0d3H, 0ceH, 0cfH, 0b7H, 0a1H, 0a3H, ' '
	DB	0c4H, 0faH, 0d6H, 0bbH, 0d0H, 0e8H, 0d6H, 0a7H, 0b8H, 0b6H, ' '
	DB	'%I64d ', 0bdH, 0f0H, 0b1H, 0d2H, 0b1H, 0e3H, 0bfH, 0c9H, 0b8H
	DB	0b4H, 0bbH, 0eeH, 0bcH, 0ccH, 0d0H, 0f8H, 0b1H, 0c8H, 0c8H, 0fcH
	DB	0a3H, 0acH, 0c4H, 0faH, 0c8H, 0b7H, 0b6H, 0a8H, 0d2H, 0aaH, 0b8H
	DB	0b4H, 0bbH, 0eeH, 0c2H, 0f0H, 0a3H, 0bfH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LADIJLOB@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?G?k?D?z?S?Z?$LN?q?L?l?$CFd?J?$LB@
CONST	SEGMENT
??_C@_0DK@LADIJLOB@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?G?k?D?z?S?Z?$LN?q?L?l?$CFd?J?$LB@ DB 0b1H
	DB	0c8H, 0c8H, 0fcH, 0b1H, 0a8H, 0c3H, 0fbH, 0c9H, 0d0H, 0ceH, 0b4H
	DB	0bfH, 0aaH, 0caH, 0bcH, ',', 0c7H, 0ebH, 0c4H, 0faH, 0d3H, 0daH
	DB	0bdH, 0f1H, 0ccH, 0ecH, '%d', 0caH, 0b1H, '%d', 0b7H, 0d6H, '%'
	DB	'd', 0c3H, 0ebH, 0c7H, 0b0H, 0c0H, 0b4H, 0b1H, 0a8H, 0c3H, 0fbH
	DB	0b2H, 0ceH, 0bcH, 0d3H, 0b1H, 0c8H, 0c8H, 0fcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@KKHDFNFN@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LB?$KI?C?$PL?J?$LB@
CONST	SEGMENT
??_C@_0EK@KKHDFNFN@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LB?$KI?C?$PL?J?$LB@ DB 0b1H
	DB	0c8H, 0c8H, 0fcH, 0b1H, 0a8H, 0c3H, 0fbH, 0c9H, 0d0H, 0ceH, 0b4H
	DB	0bfH, 0aaH, 0caH, 0bcH, ',', 0b1H, 0beH, 0b3H, 0a1H, 0b1H, 0c8H
	DB	0c8H, 0fcH, 0b1H, 0a8H, 0c3H, 0fbH, 0caH, 0b1H, 0b6H, 0ceH, 0ceH
	DB	0aaH, 0a3H, 0baH, '%d-%d-%d %d:%d:%d', 0d6H, 0c1H, '%d-%d-%d %'
	DB	'd:%d:%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@NBAMOMBH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?S?Z?C?w?L?l?$CFd@
CONST	SEGMENT
??_C@_0DI@NBAMOMBH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?S?Z?C?w?L?l?$CFd@ DB 0bdH
	DB	0f1H, 0ccH, 0ecH, 0b5H, 0c4H, 0b1H, 0c8H, 0c8H, 0fcH, 0d2H, 0d1H
	DB	0beH, 0adH, 0bdH, 0e1H, 0caH, 0f8H, ',', 0c7H, 0ebH, 0c4H, 0faH
	DB	0d3H, 0daH, 0c3H, 0f7H, 0ccH, 0ecH, '%d', 0caH, 0b1H, '%d', 0b7H
	DB	0d6H, '%d', 0c3H, 0ebH, 0c7H, 0b0H, 0c0H, 0b4H, 0b2H, 0ceH, 0bcH
	DB	0d3H, 0b1H, 0c8H, 0c8H, 0fcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MIICOPIN@?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H?$PM@
CONST	SEGMENT
??_C@_0DA@MIICOPIN@?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H?$PM@ DB 0b1H
	DB	0c8H, 0c8H, 0fcH, 0d2H, 0d1H, 0beH, 0adH, 0bdH, 0e1H, 0caH, 0f8H
	DB	',', 0c7H, 0ebH, 0c4H, 0faH, 0d2H, 0c6H, 0bcH, 0ddH, 0d6H, 0c1H
	DB	0c6H, 0e4H, 0cbH, 0fbH, 0b1H, 0c8H, 0c8H, 0fcH, 0b7H, 0bfH, 0bcH
	DB	0e4H, 0b2H, 0ceH, 0d3H, 0ebH, 0b1H, 0c8H, 0c8H, 0fcH, 0b0H, 0c9H
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA DD 08b0H ; `CLockTimeMatch::InsertDistribute'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@ DD FLAT:??_R4?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@UtagDistributeInfo@@ABU1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??PerformDistribute@CLockTimeMatch@@IAE_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??PerformDistribute@CLockTimeMatch@@IAE_NXZ@4JA DD 07d8H ; `CLockTimeMatch::PerformDistribute'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z@4JA DD 07a9H ; `CLockTimeMatch::PerformAllUserStandUp'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EB@IICMIGNG@?D?z?R?Q?M?j?$LD?I?5?$CFd?5?$LO?V?$LB?H?H?$PM?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P@
CONST	SEGMENT
??_C@_0EB@IICMIGNG@?D?z?R?Q?M?j?$LD?I?5?$CFd?5?$LO?V?$LB?H?H?$PM?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P@ DB 0c4H
	DB	0faH, 0d2H, 0d1H, 0cdH, 0eaH, 0b3H, 0c9H, ' %d ', 0beH, 0d6H, 0b1H
	DB	0c8H, 0c8H, 0fcH, 0a3H, 0acH, 0c4H, 0faH, 0bdH, 0abH, 0b2H, 0bbH
	DB	0c4H, 0dcH, 0bcH, 0ccH, 0d0H, 0f8H, 0d3H, 0ceH, 0cfH, 0b7H, 0a3H
	DB	0acH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H, 0fdH, 0b1H, 0c8H, 0c8H, 0fcH
	DB	0bdH, 0e1H, 0caH, 0f8H, 0c0H, 0b4H, 0b2H, 0e9H, 0bfH, 0b4H, 0c5H
	DB	0c5H, 0c3H, 0fbH, 0a3H, 0a1H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MEIIMJBH@?S?I?S?Z?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM@
CONST	SEGMENT
??_C@_0CK@MEIIMJBH@?S?I?S?Z?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM@ DB 0d3H
	DB	0c9H, 0d3H, 0daH, 0c4H, 0faH, 0b5H, 0c4H, 0b1H, 0c8H, 0c8H, 0fcH
	DB	0b1H, 0d2H, 0b5H, 0cdH, 0d3H, 0daH, ' %d', 0a3H, 0acH, 0c4H, 0faH
	DB	0bdH, 0abH, 0b2H, 0bbH, 0c4H, 0dcH, 0bcH, 0ccH, 0d0H, 0f8H, 0d3H
	DB	0ceH, 0cfH, 0b7H, 0a3H, 0a1H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z@4JA DD 0710H ; `CLockTimeMatch::VerifyUserEnterMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DC@JLJHDNKI@?S?I?S?Z?M?f?$LM?R?$MA?k?$LP?$KK?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?N?$KK?D?z?V?X?P?B?$LH@
CONST	SEGMENT
??_C@_0DC@JLJHDNKI@?S?I?S?Z?M?f?$LM?R?$MA?k?$LP?$KK?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?N?$KK?D?z?V?X?P?B?$LH@ DB 0d3H
	DB	0c9H, 0d3H, 0daH, 0cdH, 0e6H, 0bcH, 0d2H, 0c0H, 0ebH, 0bfH, 0aaH
	DB	0a3H, 0acH, 0cfH, 0b5H, 0cdH, 0b3H, 0d5H, 0fdH, 0d4H, 0daH, 0ceH
	DB	0aaH, 0c4H, 0faH, 0d6H, 0d8H, 0d0H, 0c2H, 0b7H, 0d6H, 0c5H, 0e4H
	DB	0d7H, 0f9H, 0ceH, 0bbH, 0a3H, 0acH, 0c7H, 0ebH, 0c9H, 0d4H, 0baH
	DB	0f3H, '...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KHAHGIHK@?$LB?$LO?$LO?V?$LB?H?H?$PM?$LN?a?J?x?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH@
CONST	SEGMENT
??_C@_0DC@KHAHGIHK@?$LB?$LO?$LO?V?$LB?H?H?$PM?$LN?a?J?x?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH@ DB 0b1H
	DB	0beH, 0beH, 0d6H, 0b1H, 0c8H, 0c8H, 0fcH, 0bdH, 0e1H, 0caH, 0f8H
	DB	0a3H, 0acH, 0cfH, 0b5H, 0cdH, 0b3H, 0d5H, 0fdH, 0d4H, 0daH, 0c5H
	DB	0acH, 0c1H, 0a6H, 0ceH, 0aaH, 0c4H, 0faH, 0b7H, 0d6H, 0c5H, 0e4H
	DB	0d7H, 0f9H, 0ceH, 0bbH, 0a3H, 0acH, 0c7H, 0ebH, 0c9H, 0d4H, 0baH
	DB	0f3H, '...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@JAGJBAEH@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?O?$LF?M?$LD?$LN?$KL?$LL?a?$LM?G?B?$LM?D@
CONST	SEGMENT
??_C@_0HB@JAGJBAEH@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?O?$LF?M?$LD?$LN?$KL?$LL?a?$LM?G?B?$LM?D@ DB 0c4H
	DB	0faH, 0d2H, 0d1H, 0cdH, 0eaH, 0b3H, 0c9H, '%d', 0beH, 0d6H, 0b1H
	DB	0c8H, 0c8H, 0fcH, 0a3H, 0acH, 0cfH, 0b5H, 0cdH, 0b3H, 0bdH, 0abH
	DB	0bbH, 0e1H, 0bcH, 0c7H, 0c2H, 0bcH, 0c4H, 0faH, 0b5H, 0b1H, 0c7H
	DB	0b0H, 0b5H, 0c4H, 0b3H, 0c9H, 0bcH, 0a8H, 0b2H, 0a2H, 0d6H, 0d8H
	DB	0d6H, 0c3H, 0b1H, 0c8H, 0c8H, 0fcH, 0b7H, 0d6H, 0a3H, 0acH, 0c4H
	DB	0faH, 0bfH, 0c9H, 0d2H, 0d4H, 0bcH, 0ccH, 0d0H, 0f8H, 0b5H, 0b1H
	DB	0c7H, 0b0H, 0b1H, 0c8H, 0c8H, 0fcH, 0bbH, 0f2H, 0d1H, 0a1H, 0d4H
	DB	0f1H, 0cdH, 0cbH, 0b3H, 0f6H, 0b5H, 0c8H, 0b4H, 0fdH, 0b1H, 0beH
	DB	0b4H, 0ceH, 0b1H, 0c8H, 0c8H, 0fcH, 0bdH, 0e1H, 0caH, 0f8H, 0baH
	DB	0f3H, 0b2H, 0e9H, 0bfH, 0b4H, 0c5H, 0c5H, 0c3H, 0fbH, 0a3H, 0a1H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@COJNGGKL@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?$LP?I?R?T?$LM?L?P?x?$LF?$LB?G?$LA?$LB@
CONST	SEGMENT
??_C@_0EJ@COJNGGKL@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?$LP?I?R?T?$LM?L?P?x?$LF?$LB?G?$LA?$LB@ DB 0c4H
	DB	0faH, 0d2H, 0d1H, 0cdH, 0eaH, 0b3H, 0c9H, '%d', 0beH, 0d6H, 0b1H
	DB	0c8H, 0c8H, 0fcH, 0a3H, 0acH, 0bfH, 0c9H, 0d2H, 0d4H, 0bcH, 0ccH
	DB	0d0H, 0f8H, 0b5H, 0b1H, 0c7H, 0b0H, 0b1H, 0c8H, 0c8H, 0fcH, 0bbH
	DB	0f2H, 0d1H, 0a1H, 0d4H, 0f1H, 0cdH, 0cbH, 0b3H, 0f6H, 0b5H, 0c8H
	DB	0b4H, 0fdH, 0b1H, 0beH, 0b4H, 0ceH, 0b1H, 0c8H, 0c8H, 0fcH, 0bbH
	DB	0eeH, 0b6H, 0afH, 0bdH, 0e1H, 0caH, 0f8H, 0baH, 0f3H, 0c5H, 0c5H
	DB	0c3H, 0fbH, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z@4JA DD 066eH ; `CLockTimeMatch::OnEventGameEnd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CODAEBJM@?$LB?$LO?$LO?V?$LB?H?H?$PM?J?G?D?z?$LF?D?$LF?Z?5?$CFd?5?$LO?V?$KB?$KD@
CONST	SEGMENT
??_C@_0BJ@CODAEBJM@?$LB?$LO?$LO?V?$LB?H?H?$PM?J?G?D?z?$LF?D?$LF?Z?5?$CFd?5?$LO?V?$KB?$KD@ DB 0b1H
	DB	0beH, 0beH, 0d6H, 0b1H, 0c8H, 0c8H, 0fcH, 0caH, 0c7H, 0c4H, 0faH
	DB	0b5H, 0c4H, 0b5H, 0daH, ' %d ', 0beH, 0d6H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DMINAKJA@?$LB?$KH?G?$LI?0?D?z?R?Q?$LC?N?$LM?S?$LJ?$PN?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KD?$KM?$LC?$LL?D?$NM?M?K@
CONST	SEGMENT
??_C@_0CE@DMINAKJA@?$LB?$KH?G?$LI?0?D?z?R?Q?$LC?N?$LM?S?$LJ?$PN?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KD?$KM?$LC?$LL?D?$NM?M?K@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, ',', 0c4H, 0faH, 0d2H, 0d1H, 0b2H, 0ceH, 0bcH
	DB	0d3H, 0b9H, 0fdH, 0b1H, 0beH, 0b3H, 0a1H, 0b1H, 0c8H, 0c8H, 0fcH
	DB	0a3H, 0acH, 0b2H, 0bbH, 0c4H, 0dcH, 0cdH, 0cbH, 0c8H, 0fcH, 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA DD 0606H ; `CLockTimeMatch::OnEventUserQuitMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@PBJGPBJH@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?I?T?$LK@
CONST	SEGMENT
??_C@_0CH@PBJGPBJH@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?I?T?$LK@ DB 0cfH
	DB	0b5H, 0cdH, 0b3H, 0d5H, 0fdH, 0d4H, 0daH, 0c5H, 0acH, 0c1H, 0a6H
	DB	0ceH, 0aaH, 0c4H, 0faH, 0b7H, 0d6H, 0c5H, 0e4H, 0d7H, 0f9H, 0ceH
	DB	0bbH, 0a3H, 0acH, 0c7H, 0ebH, 0c9H, 0d4H, 0baH, 0f3H, 0a1H, 0a3H
	DB	0a1H, 0a3H, 0a1H, 0a3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@
CONST	SEGMENT
??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, 0a3H, 0acH, 0c4H, 0faH, 0b5H, 0c4H, 0beH, 0adH
	DB	0d1H, 0e9H, 0d6H, 0b5H, 0b4H, 0efH, 0b2H, 0bbH, 0b5H, 0bdH, 0b1H
	DB	0a8H, 0c3H, 0fbH, 0ccH, 0f5H, 0bcH, 0feH, 0a3H, 0acH, 0b1H, 0a8H
	DB	0c3H, 0fbH, 0caH, 0a7H, 0b0H, 0dcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@
CONST	SEGMENT
??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, 0a3H, 0acH, 0c4H, 0faH, 0b5H, 0c4H, 0bbH, 0e1H
	DB	0d4H, 0b1H, 0b5H, 0c8H, 0bcH, 0b6H, 0b4H, 0efH, 0b2H, 0bbH, 0b5H
	DB	0bdH, 0b1H, 0a8H, 0c3H, 0fbH, 0ccH, 0f5H, 0bcH, 0feH, 0a3H, 0acH
	DB	0b1H, 0a8H, 0c3H, 0fbH, 0caH, 0a7H, 0b0H, 0dcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GPKKPIPC@?$LB?$KI?C?$PL?R?Q?$LO?$KN?$LN?X?V?$LJ?$KD?$KM?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H@
CONST	SEGMENT
??_C@_0CP@GPKKPIPC@?$LB?$KI?C?$PL?R?Q?$LO?$KN?$LN?X?V?$LJ?$KD?$KM?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H@ DB 0b1H
	DB	0a8H, 0c3H, 0fbH, 0d2H, 0d1H, 0beH, 0adH, 0bdH, 0d8H, 0d6H, 0b9H
	DB	0a3H, 0acH, 0c7H, 0ebH, 0c4H, 0faH, 0d2H, 0c6H, 0bcH, 0ddH, 0d6H
	DB	0c1H, 0c6H, 0e4H, 0cbH, 0fbH, 0b1H, 0c8H, 0c8H, 0fcH, 0b7H, 0bfH
	DB	0bcH, 0e4H, 0b2H, 0ceH, 0d3H, 0ebH, 0b1H, 0c8H, 0c8H, 0fcH, 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CKGEBLOB@?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?$KD?$KM?G?k?I?T?$LK?s?T?Y?$MA?$LE?$KD?$KB@
CONST	SEGMENT
??_C@_0BL@CKGEBLOB@?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?$KD?$KM?G?k?I?T?$LK?s?T?Y?$MA?$LE?$KD?$KB@ DB 0b1H
	DB	0a8H, 0c3H, 0fbH, 0c9H, 0d0H, 0ceH, 0b4H, 0bfH, 0aaH, 0caH, 0bcH
	DB	0a3H, 0acH, 0c7H, 0ebH, 0c9H, 0d4H, 0baH, 0f3H, 0d4H, 0d9H, 0c0H
	DB	0b4H, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA DD 0596H ; `CLockTimeMatch::OnEventUserJoinMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA DD 0466H ; `CLockTimeMatch::OnEventUserItemScore'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@PJALIOJF@?D?z?$LF?D?$LH?V?J?$PN?N?$LE?$LE?o?$LF?$LN?L?T?L?$KN?$LH?V?J?$PN?O?$NP?$KD?$KM?$LC?$LL?P?h?R@
CONST	SEGMENT
??_C@_0CH@PJALIOJF@?D?z?$LF?D?$LH?V?J?$PN?N?$LE?$LE?o?$LF?$LN?L?T?L?$KN?$LH?V?J?$PN?O?$NP?$KD?$KM?$LC?$LL?P?h?R@ DB 0c4H
	DB	0faH, 0b5H, 0c4H, 0b7H, 0d6H, 0caH, 0fdH, 0ceH, 0b4H, 0b4H, 0efH
	DB	0b5H, 0bdH, 0ccH, 0d4H, 0ccH, 0adH, 0b7H, 0d6H, 0caH, 0fdH, 0cfH
	DB	0dfH, 0a3H, 0acH, 0b2H, 0bbH, 0d0H, 0e8H, 0d2H, 0aaH, 0b8H, 0b4H
	DB	0bbH, 0eeH, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LHKCDNBI@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?$LF?H?$LE@
CONST	SEGMENT
??_C@_0CD@LHKCDNBI@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?$LF?H?$LE@ DB 0cfH
	DB	0b5H, 0cdH, 0b3H, 0d5H, 0fdH, 0d4H, 0daH, 0c5H, 0acH, 0c1H, 0a6H
	DB	0ceH, 0aaH, 0c4H, 0faH, 0b7H, 0d6H, 0c5H, 0e4H, 0d7H, 0f9H, 0ceH
	DB	0bbH, 0a3H, 0acH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H, 0fdH, 0a3H, 0a1H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA DD 03edH ; `CLockTimeMatch::OnEventSocketMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FH@GLGCEBDA@?R?r?$LB?$KI?C?$PL?H?K?J?$PN?$LC?$LL?W?c?$KD?$KM?H?$KB?O?$PL?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KB?$KD?R@
CONST	SEGMENT
??_C@_0FH@GLGCEBDA@?R?r?$LB?$KI?C?$PL?H?K?J?$PN?$LC?$LL?W?c?$KD?$KM?H?$KB?O?$PL?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KB?$KD?R@ DB 0d2H
	DB	0f2H, 0b1H, 0a8H, 0c3H, 0fbH, 0c8H, 0cbH, 0caH, 0fdH, 0b2H, 0bbH
	DB	0d7H, 0e3H, 0a3H, 0acH, 0c8H, 0a1H, 0cfH, 0fbH, 0b1H, 0beH, 0b3H
	DB	0a1H, 0b1H, 0c8H, 0c8H, 0fcH, 0a1H, 0a3H, 0d2H, 0d1H, 0b1H, 0a8H
	DB	0c3H, 0fbH, 0b5H, 0c4H, 0cdH, 0e6H, 0bcH, 0d2H, 0c9H, 0d4H, 0baH
	DB	0f3H, 0bdH, 0abH, 0bbH, 0e1H, 0caH, 0d5H, 0b5H, 0bdH, 0cfH, 0b5H
	DB	0cdH, 0b3H, 0cdH, 0cbH, 0bbH, 0b9H, 0b5H, 0c4H, 0b1H, 0a8H, 0c3H
	DB	0fbH, 0b7H, 0d1H, 0d3H, 0c3H, 0a3H, 0acH, 0c7H, 0ebH, 0d7H, 0a2H
	DB	0d2H, 0e2H, 0b2H, 0e9H, 0caH, 0d5H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@PFKOHNEP@?$LB?$LO?$LE?N?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?G?$LA?M?y?M?x?U?$LO?$LC@
CONST	SEGMENT
??_C@_0EH@PFKOHNEP@?$LB?$LO?$LE?N?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?G?$LA?M?y?M?x?U?$LO?$LC@ DB 0b1H
	DB	0beH, 0b4H, 0ceH, 0b1H, 0c8H, 0c8H, 0fcH, 0b5H, 0bdH, 0b4H, 0cbH
	DB	0bdH, 0e1H, 0caH, 0f8H, 0a3H, 0acH, 0c7H, 0ebH, 0c4H, 0faH, 0c7H
	DB	0b0H, 0cdH, 0f9H, 0cdH, 0f8H, 0d5H, 0beH, 0b2H, 0e9H, 0bfH, 0b4H
	DB	0cfH, 0b5H, 0cdH, 0b3H, 0c5H, 0c5H, 0c3H, 0fbH, 0bbH, 0f2H, 0d2H
	DB	0c6H, 0bcH, 0ddH, 0c6H, 0e4H, 0cbH, 0fbH, 0b1H, 0c8H, 0c8H, 0fcH
	DB	0b7H, 0bfH, 0bcH, 0e4H, 0b2H, 0ceH, 0d3H, 0ebH, 0b1H, 0c8H, 0c8H
	DB	0fcH, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GGBOLFBO@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LI?$LE?$LL?n?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@
CONST	SEGMENT
??_C@_0CL@GGBOLFBO@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LI?$LE?$LL?n?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@ DB 0b9H
	DB	0a7H, 0cfH, 0b2H, 0c4H, 0faH, 0a3H, 0acH, 0b8H, 0b4H, 0bbH, 0eeH
	DB	0b3H, 0c9H, 0b9H, 0a6H, 0a3H, 0acH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H
	DB	0fdH, 0cfH, 0b5H, 0cdH, 0b3H, 0ceH, 0aaH, 0c4H, 0faH, 0b7H, 0d6H
	DB	0c5H, 0e4H, 0d7H, 0f9H, 0ceH, 0bbH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@IMGKPMKE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KD?O?U?$LP?$KI?$LJ?$LK?B?r?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O@
CONST	SEGMENT
??_C@_0DB@IMGKPMKE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KD?O?U?$LP?$KI?$LJ?$LK?B?r?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O@ DB 0b9H
	DB	0a7H, 0cfH, 0b2H, 0c4H, 0faH, 0a3H, 0acH, 0b1H, 0a3H, 0cfH, 0d5H
	DB	0bfH, 0a8H, 0b9H, 0baH, 0c2H, 0f2H, 0b3H, 0c9H, 0b9H, 0a6H, 0a3H
	DB	0acH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H, 0fdH, 0cfH, 0b5H, 0cdH, 0b3H
	DB	0ceH, 0aaH, 0c4H, 0faH, 0b7H, 0d6H, 0c5H, 0e4H, 0d7H, 0f9H, 0ceH
	DB	0bbH, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IJGLKDAG@?$LB?$KH?G?$LI?0?D?z?$LC?$LL?$LO?$NP?$LB?$LI?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LF?D?$LB?$KI?C?$PL?W?J?$LI?q@
CONST	SEGMENT
??_C@_0CL@IJGLKDAG@?$LB?$KH?G?$LI?0?D?z?$LC?$LL?$LO?$NP?$LB?$LI?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LF?D?$LB?$KI?C?$PL?W?J?$LI?q@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, ',', 0c4H, 0faH, 0b2H, 0bbH, 0beH, 0dfH, 0b1H
	DB	0b8H, 0b1H, 0beH, 0b3H, 0a1H, 0b1H, 0c8H, 0c8H, 0fcH, 0b5H, 0c4H
	DB	0b1H, 0a8H, 0c3H, 0fbH, 0d7H, 0caH, 0b8H, 0f1H, ',', 0b1H, 0a8H
	DB	0c3H, 0fbH, 0caH, 0a7H, 0b0H, 0dcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA DD 024bH ; `CLockTimeMatch::OnEventDataBase'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FF@DDBBBMHA@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?$LI?P?P?$LL?D?z?$LF?D?$LC@
CONST	SEGMENT
??_C@_0FF@DDBBBMHA@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?$LI?P?P?$LL?D?z?$LF?D?$LC@ DB 0b1H
	DB	0beH, 0b3H, 0a1H, 0b1H, 0c8H, 0c8H, 0fcH, 0bdH, 0e1H, 0caH, 0f8H
	DB	0caH, 0b1H, 0bcH, 0e4H, 0d2H, 0d1H, 0b5H, 0bdH, 0a3H, 0acH, 0b8H
	DB	0d0H, 0d0H, 0bbH, 0c4H, 0faH, 0b5H, 0c4H, 0b2H, 0ceH, 0d3H, 0ebH
	DB	0a3H, 0bbH, 0c7H, 0ebH, 0d4H, 0daH, ' %d ', 0b7H, 0d6H, 0d6H, 0d3H
	DB	0baH, 0f3H, 0c7H, 0b0H, 0cdH, 0f9H, 0cfH, 0e0H, 0b9H, 0d8H, 0d2H
	DB	0b3H, 0c3H, 0e6H, 0b2H, 0e9H, 0d1H, 0afH, 0c4H, 0faH, 0b5H, 0c4H
	DB	0b1H, 0beH, 0b3H, 0a1H, 0b1H, 0c8H, 0c8H, 0fcH, 0b3H, 0c9H, 0bcH
	DB	0a8H, 0a1H, 0a3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GCHCKFGB@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?C?w?L?l?T?Y?$MA@
CONST	SEGMENT
??_C@_0CH@GCHCKFGB@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?C?w?L?l?T?Y?$MA@ DB 0bdH
	DB	0f1H, 0ccH, 0ecH, 0b5H, 0c4H, 0b1H, 0c8H, 0c8H, 0fcH, 0b5H, 0bdH
	DB	0b4H, 0cbH, 0bdH, 0e1H, 0caH, 0f8H, 0a3H, 0acH, 0c7H, 0ebH, 0c4H
	DB	0faH, 0c3H, 0f7H, 0ccH, 0ecH, 0d4H, 0d9H, 0c0H, 0b4H, 0b2H, 0ceH
	DB	0bcH, 0d3H, 0a3H, 0a1H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@CHGGEFGE@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T?Z?5@
CONST	SEGMENT
??_C@_0FP@CHGGEFGE@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T?Z?5@ DB 0b1H
	DB	0beH, 0b3H, 0a1H, 0b1H, 0c8H, 0c8H, 0fcH, 0bdH, 0e1H, 0caH, 0f8H
	DB	0caH, 0b1H, 0bcH, 0e4H, 0d2H, 0d1H, 0b5H, 0bdH, 0a3H, 0acH, 0c7H
	DB	0ebH, 0beH, 0a1H, 0bfH, 0ecH, 0d4H, 0daH, ' %d ', 0b7H, 0d6H, 0d6H
	DB	0d3H, 0c4H, 0daH, 0bdH, 0e1H, 0caH, 0f8H, 0b5H, 0b1H, 0c7H, 0b0H
	DB	0b1H, 0c8H, 0c8H, 0fcH, 0a1H, 0a3H, 0b7H, 0f1H, 0d4H, 0f2H, 0cfH
	DB	0b5H, 0cdH, 0b3H, 0bdH, 0abH, 0bbH, 0e1H, 0d7H, 0d4H, 0b6H, 0afH
	DB	0bdH, 0e2H, 0c9H, 0a2H, 0b1H, 0beH, 0bbH, 0d8H, 0baH, 0cfH, 0b2H
	DB	0a2H, 0b2H, 0bbH, 0bcH, 0c6H, 0c8H, 0ebH, 0b3H, 0c9H, 0bcH, 0a8H
	DB	0a1H, 0a3H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LFOAJBDH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T@
CONST	SEGMENT
??_C@_0DJ@LFOAJBDH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T@ DB 0bdH
	DB	0f1H, 0ccH, 0ecH, 0b5H, 0c4H, 0b1H, 0c8H, 0c8H, 0fcH, 0bdH, 0e1H
	DB	0caH, 0f8H, 0caH, 0b1H, 0bcH, 0e4H, 0d2H, 0d1H, 0b5H, 0bdH, 0a3H
	DB	0acH, 0c7H, 0ebH, 0beH, 0a1H, 0bfH, 0ecH, 0d4H, 0daH, ' %d ', 0b7H
	DB	0d6H, 0d6H, 0d3H, 0c4H, 0daH, 0bdH, 0e1H, 0caH, 0f8H, 0b1H, 0beH
	DB	0beH, 0d6H, 0d3H, 0ceH, 0cfH, 0b7H, 0a1H, 0a3H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventTimer@CLockTimeMatch@@UAE_NKI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventTimer@CLockTimeMatch@@UAE_NKI@Z@4JA DD 0d1H ; `CLockTimeMatch::OnEventTimer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z@4JA DD 076H ; `CLockTimeMatch::BindTableFrame'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0b1H, 0c8H, 0c8H, 0fcH, 0b7H, 0feH, 0ceH, 0f1H, '\l'
	DB	'ocktimematch.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???1CLockTimeMatch@@UAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1CLockTimeMatch@@UAE@XZ@4JA DD 037H	; `CLockTimeMatch::~CLockTimeMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CLockTimeMatch@@6BIServerUserItemSink@@@
CONST	SEGMENT
??_7CLockTimeMatch@@6BIServerUserItemSink@@@ DD FLAT:??_R4CLockTimeMatch@@6BIServerUserItemSink@@@ ; CLockTimeMatch::`vftable'
	DD	FLAT:?Release@CLockTimeMatch@@W7AEXXZ
	DD	FLAT:?QueryInterface@CLockTimeMatch@@W7AEPAXABU_GUID@@K@Z
	DD	FLAT:?OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z
	DD	FLAT:?OnEventUserItemGameData@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z
	DD	FLAT:?OnEventUserItemStatus@CLockTimeMatch@@UAE_NPAUIServerUserItem@@GG@Z
	DD	FLAT:?OnEventUserItemRight@CLockTimeMatch@@UAE_NPAUIServerUserItem@@KKE@Z
CONST	ENDS
;	COMDAT ??_7CLockTimeMatch@@6BIMatchEventSink@@@
CONST	SEGMENT
??_7CLockTimeMatch@@6BIMatchEventSink@@@ DD FLAT:??_R4CLockTimeMatch@@6BIMatchEventSink@@@ ; CLockTimeMatch::`vftable'
	DD	FLAT:?Release@CLockTimeMatch@@W3AEXXZ
	DD	FLAT:?QueryInterface@CLockTimeMatch@@W3AEPAXABU_GUID@@K@Z
	DD	FLAT:?OnEventGameStart@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z
	DD	FLAT:?OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z
	DD	FLAT:?OnEventUserReturnMatch@CLockTimeMatch@@UAE_NPAUITableFrame@@PAUIServerUserItem@@@Z
	DD	FLAT:?OnActionUserSitDown@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z
	DD	FLAT:?OnActionUserStandUp@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z
	DD	FLAT:?OnActionUserOnReady@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@PAXG@Z
CONST	ENDS
;	COMDAT ??_7CLockTimeMatch@@6BIGameMatchItem@@@
CONST	SEGMENT
??_7CLockTimeMatch@@6BIGameMatchItem@@@ DD FLAT:??_R4CLockTimeMatch@@6BIGameMatchItem@@@ ; CLockTimeMatch::`vftable'
	DD	FLAT:?Release@CLockTimeMatch@@UAEXXZ
	DD	FLAT:?QueryInterface@CLockTimeMatch@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?OnStartService@CLockTimeMatch@@UAEXXZ
	DD	FLAT:?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z
	DD	FLAT:?InitMatchInterface@CLockTimeMatch@@UAE_NAAUtagMatchManagerParameter@@@Z
	DD	FLAT:?OnEventTimer@CLockTimeMatch@@UAE_NKI@Z
	DD	FLAT:?OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
	DD	FLAT:?OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z
	DD	FLAT:?OnEventUserLogon@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventUserLogout@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventUserLogonFinish@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventEnterMatch@CLockTimeMatch@@UAE_NKPAXK_N@Z
	DD	FLAT:?OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z
	DD	FLAT:?OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z
	DD	FLAT:??_ECLockTimeMatch@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7IMatchEventSink@@6B@
CONST	SEGMENT
??_7IMatchEventSink@@6B@ DD FLAT:??_R4IMatchEventSink@@6B@ ; IMatchEventSink::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IGameMatchItem@@6B@
CONST	SEGMENT
??_7IGameMatchItem@@6B@ DD FLAT:??_R4IGameMatchItem@@6B@ ; IGameMatchItem::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7IServerUserItemSink@@6B@
CONST	SEGMENT
??_7IServerUserItemSink@@6B@ DD FLAT:??_R4IServerUserItemSink@@6B@ ; IServerUserItemSink::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA DD 025fH ; `ATL::CTime::GetLocalTm'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@NHHHCKNA@?$AAm?$AA_?$AAt?$AAi?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1@
CONST	SEGMENT
??_C@_1BK@NHHHCKNA@?$AAm?$AA_?$AAt?$AAi?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1@ DB 'm'
	DB	00H, '_', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '-', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA DD 01adH ; `ATL::CTime::CTime'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ DB '_'
	DB	00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
CONST	SEGMENT
??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ DB 'AtlThrow: hr = 0x'
	DB	'%x', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\atlexcept.h', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA DD 041H	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H
	DB	's', 00H, '%', 00H, 'l', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'u', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '-', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?m_nCategory@CTrace@ATL@@1IA
_DATA	SEGMENT
?m_nCategory@CTrace@ATL@@1IA DD 0ffffffffH		; ATL::CTrace::m_nCategory
_DATA	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PerformDistribute@CLockTimeMatch@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PerformDistribute@CLockTimeMatch@@IAE_NXZ$0
__ehfuncinfo$?PerformDistribute@CLockTimeMatch@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PerformDistribute@CLockTimeMatch@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z$0
__ehfuncinfo$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CLockTimeMatch@@UAE@XZ$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CLockTimeMatch@@UAE@XZ$0
__tryblocktable$??1CLockTimeMatch@@UAE@XZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??1CLockTimeMatch@@UAE@XZ$3
__unwindtable$??1CLockTimeMatch@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLockTimeMatch@@UAE@XZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??1CLockTimeMatch@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CLockTimeMatch@@UAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CLockTimeMatch@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0
__ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1
__ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?QueryInterface@CLockTimeMatch@@W7AEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
?QueryInterface@CLockTimeMatch@@W7AEPAXABU_GUID@@K@Z PROC ; [thunk]:CLockTimeMatch::QueryInterface`adjustor{8}', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ?QueryInterface@CLockTimeMatch@@UAEPAXABU_GUID@@K@Z ; CLockTimeMatch::QueryInterface
?QueryInterface@CLockTimeMatch@@W7AEPAXABU_GUID@@K@Z ENDP ; [thunk]:CLockTimeMatch::QueryInterface`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?Release@CLockTimeMatch@@W7AEXXZ
_TEXT	SEGMENT
?Release@CLockTimeMatch@@W7AEXXZ PROC			; [thunk]:CLockTimeMatch::Release`adjustor{8}', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ?Release@CLockTimeMatch@@UAEXXZ ; CLockTimeMatch::Release
?Release@CLockTimeMatch@@W7AEXXZ ENDP			; [thunk]:CLockTimeMatch::Release`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?QueryInterface@CLockTimeMatch@@W3AEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
?QueryInterface@CLockTimeMatch@@W3AEPAXABU_GUID@@K@Z PROC ; [thunk]:CLockTimeMatch::QueryInterface`adjustor{4}', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?QueryInterface@CLockTimeMatch@@UAEPAXABU_GUID@@K@Z ; CLockTimeMatch::QueryInterface
?QueryInterface@CLockTimeMatch@@W3AEPAXABU_GUID@@K@Z ENDP ; [thunk]:CLockTimeMatch::QueryInterface`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?Release@CLockTimeMatch@@W3AEXXZ
_TEXT	SEGMENT
?Release@CLockTimeMatch@@W3AEXXZ PROC			; [thunk]:CLockTimeMatch::Release`adjustor{4}', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?Release@CLockTimeMatch@@UAEXXZ ; CLockTimeMatch::Release
?Release@CLockTimeMatch@@W3AEXXZ ENDP			; [thunk]:CLockTimeMatch::Release`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@UtagDistributeInfo@@ABU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@UtagDistributeInfo@@ABU1@@@UAEPAXI@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@UtagDistributeInfo@@ABU1@@@UAEPAXI@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	6b 45 08 14	 imul	 eax, DWORD PTR _nIndex$[ebp], 20
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	03 41 04	 add	 eax, DWORD PTR [ecx+4]
$LN3@ElementAt:

; 237  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ PROC ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ENDP ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ PROC	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ ENDP	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@UtagDistributeInfo@@ABU1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@UtagDistributeInfo@@ABU1@@@QAE@XZ PROC	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::CWHArray<tagDistributeInfo,tagDistributeInfo const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@UtagDistributeInfo@@ABU1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@UtagDistributeInfo@@ABU1@@@QAE@XZ ENDP	; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::CWHArray<tagDistributeInfo,tagDistributeInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ PROC		; _snprintf_s<64>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	6a 40		 push	 64			; 00000040H
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vsnprintf_s
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ENDP		; _snprintf_s<64>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ PROC		; _snprintf_s<128>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	68 80 00 00 00	 push	 128			; 00000080H
  00020	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __vsnprintf_s
  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ENDP		; _snprintf_s<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCLockTimeMatch@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLockTimeMatch@@UAEPAXI@Z PROC			; CLockTimeMatch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CLockTimeMatch@@UAE@XZ ; CLockTimeMatch::~CLockTimeMatch
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 a4 00 00 00	 push	 164			; 000000a4H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCLockTimeMatch@@UAEPAXI@Z ENDP			; CLockTimeMatch::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z
_TEXT	SEGMENT
tv86 = -244						; size = 4
_MatchResult$1 = -176					; size = 134
_MatchReward$2 = -40					; size = 32
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_pMatchRankInfo$ = 12					; size = 4
?WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z PROC ; CLockTimeMatch::WriteUserAward, COMDAT
; _this$ = ecx

; 2589 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2590 : 	//参数效验
; 2591 : 	ASSERT(pMatchRankInfo!=NULL);

  00019	83 7d 0c 00	 cmp	 DWORD PTR _pMatchRankInfo$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN7@WriteUserA
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN7@WriteUserA
  00036	cc		 int	 3
$LN7@WriteUserA:

; 2592 : 	if(pMatchRankInfo==NULL) return false;

  00037	83 7d 0c 00	 cmp	 DWORD PTR _pMatchRankInfo$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN2@WriteUserA
  0003d	32 c0		 xor	 al, al
  0003f	e9 91 01 00 00	 jmp	 $LN1@WriteUserA
$LN2@WriteUserA:

; 2593 : 
; 2594 : 	//写入记录
; 2595 : 	if (m_pIDataBaseEngine!=NULL)

  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [eax+140], 0
  0004e	0f 84 9e 00 00
	00		 je	 $LN3@WriteUserA

; 2596 : 	{
; 2597 : 		//变量定义
; 2598 : 		DBR_GR_MatchReward MatchReward;
; 2599 : 		ZeroMemory(&MatchReward,sizeof(MatchReward));

  00054	6a 20		 push	 32			; 00000020H
  00056	6a 00		 push	 0
  00058	8d 45 d8	 lea	 eax, DWORD PTR _MatchReward$2[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _memset
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2600 : 		
; 2601 : 		//构造结构
; 2602 : 		MatchReward.dwUserID=pMatchRankInfo->dwUserID;			

  00064	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	89 4d d8	 mov	 DWORD PTR _MatchReward$2[ebp], ecx

; 2603 : 		MatchReward.lRewardGold=pMatchRankInfo->lRewardGold;

  0006d	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00070	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00073	89 4d e0	 mov	 DWORD PTR _MatchReward$2[ebp+8], ecx
  00076	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00079	89 55 e4	 mov	 DWORD PTR _MatchReward$2[ebp+12], edx

; 2604 : 		MatchReward.lRewardIngot=pMatchRankInfo->lRewardIngot;

  0007c	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  0007f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00082	89 4d e8	 mov	 DWORD PTR _MatchReward$2[ebp+16], ecx
  00085	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00088	89 55 ec	 mov	 DWORD PTR _MatchReward$2[ebp+20], edx

; 2605 : 		MatchReward.dwRewardExperience=pMatchRankInfo->dwRewardExperience;

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  0008e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00091	89 4d f0	 mov	 DWORD PTR _MatchReward$2[ebp+24], ecx

; 2606 : 		MatchReward.dwClientAddr=pIServerUserItem?pIServerUserItem->GetClientAddr():0;

  00094	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00098	74 15		 je	 SHORT $LN8@WriteUserA
  0009a	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0009d	8b 10		 mov	 edx, DWORD PTR [eax]
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000a2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000a5	ff d0		 call	 eax
  000a7	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  000ad	eb 0a		 jmp	 SHORT $LN9@WriteUserA
$LN8@WriteUserA:
  000af	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN9@WriteUserA:
  000b9	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  000bf	89 4d f4	 mov	 DWORD PTR _MatchReward$2[ebp+28], ecx

; 2607 : 
; 2608 : 		//投递数据
; 2609 : 		m_pIDataBaseEngine->PostDataBaseRequest(MatchReward.dwUserID,DBR_GR_MATCH_REWARD,0,&MatchReward,sizeof(MatchReward));

  000c2	6a 00		 push	 0
  000c4	6a 20		 push	 32			; 00000020H
  000c6	8d 45 d8	 lea	 eax, DWORD PTR _MatchReward$2[ebp]
  000c9	50		 push	 eax
  000ca	6a 00		 push	 0
  000cc	68 60 02 00 00	 push	 608			; 00000260H
  000d1	8b 4d d8	 mov	 ecx, DWORD PTR _MatchReward$2[ebp]
  000d4	51		 push	 ecx
  000d5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  000de	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  000e7	8b 00		 mov	 eax, DWORD PTR [eax]
  000e9	52		 push	 edx
  000ea	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ed	ff d1		 call	 ecx
  000ef	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@WriteUserA:

; 2610 : 	}
; 2611 : 
; 2612 : 	//在线玩家
; 2613 : 	if (pIServerUserItem!=NULL)

  000f2	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  000f6	0f 84 d7 00 00
	00		 je	 $LN4@WriteUserA

; 2614 : 	{
; 2615 : 		//变量定义
; 2616 : 		CMD_GR_MatchResult MatchResult;
; 2617 : 		ZeroMemory(&MatchResult,sizeof(MatchResult));

  000fc	68 86 00 00 00	 push	 134			; 00000086H
  00101	6a 00		 push	 0
  00103	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _MatchResult$1[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _memset
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2618 : 
; 2619 : 		//比赛奖励
; 2620 : 		GetSystemTime(&MatchResult.MatchEndTime);

  00112	8d 45 c6	 lea	 eax, DWORD PTR _MatchResult$1[ebp+118]
  00115	50		 push	 eax
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4

; 2621 : 		MatchResult.wMatchRank=pMatchRankInfo->wRankID;

  0011c	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  0011f	66 8b 08	 mov	 cx, WORD PTR [eax]
  00122	66 89 4d 84	 mov	 WORD PTR _MatchResult$1[ebp+52], cx

; 2622 : 		MatchResult.lGold=pMatchRankInfo->lRewardGold;		

  00126	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00129	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0012c	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _MatchResult$1[ebp], ecx
  00132	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00135	89 95 54 ff ff
	ff		 mov	 DWORD PTR _MatchResult$1[ebp+4], edx

; 2623 : 		MatchResult.lIngot=pMatchRankInfo->lRewardIngot;	

  0013b	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  0013e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00141	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _MatchResult$1[ebp+8], ecx
  00147	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0014a	89 95 5c ff ff
	ff		 mov	 DWORD PTR _MatchResult$1[ebp+12], edx

; 2624 : 		MatchResult.dwExperience=pMatchRankInfo->dwRewardExperience;

  00150	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00153	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00156	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _MatchResult$1[ebp+16], ecx

; 2625 : 		lstrcpyn(MatchResult.szNickName,pIServerUserItem->GetNickName(),CountArray(MatchResult.szNickName));

  0015c	6a 20		 push	 32			; 00000020H
  0015e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00161	8b 10		 mov	 edx, DWORD PTR [eax]
  00163	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00166	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00169	ff d0		 call	 eax
  0016b	50		 push	 eax
  0016c	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _MatchResult$1[ebp+20]
  00172	51		 push	 ecx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 2626 : 		lstrcpyn(MatchResult.szMatchName,m_pMatchOption->szMatchName,CountArray(MatchResult.szMatchName));

  00179	6a 40		 push	 64			; 00000040H
  0017b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0017e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00181	83 c1 12	 add	 ecx, 18			; 00000012H
  00184	51		 push	 ecx
  00185	8d 55 86	 lea	 edx, DWORD PTR _MatchResult$1[ebp+54]
  00188	52		 push	 edx
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 2627 : 
; 2628 : 		//发送数据
; 2629 : 		if (pIServerUserItem->IsAndroidUser()==false)

  0018f	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00192	8b 10		 mov	 edx, DWORD PTR [eax]
  00194	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00197	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0019d	ff d0		 call	 eax
  0019f	0f b6 c8	 movzx	 ecx, al
  001a2	85 c9		 test	 ecx, ecx
  001a4	75 2d		 jne	 SHORT $LN4@WriteUserA

; 2630 : 		{
; 2631 : 			m_pIGameServiceFrame->SendData(pIServerUserItem, MDM_GF_FRAME, SUB_GR_MATCH_RESULT, &MatchResult, sizeof(MatchResult));

  001a6	68 86 00 00 00	 push	 134			; 00000086H
  001ab	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _MatchResult$1[ebp]
  001b1	50		 push	 eax
  001b2	6a 09		 push	 9
  001b4	6a 64		 push	 100			; 00000064H
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001b9	51		 push	 ecx
  001ba	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001bd	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	8b 10		 mov	 edx, DWORD PTR [eax]
  001c8	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  001ce	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001d1	ff d0		 call	 eax
$LN4@WriteUserA:

; 2632 : 		}
; 2633 : 	}		
; 2634 : 
; 2635 : 	return true;

  001d3	b0 01		 mov	 al, 1
$LN1@WriteUserA:

; 2636 : }

  001d5	5f		 pop	 edi
  001d6	5e		 pop	 esi
  001d7	5b		 pop	 ebx
  001d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c2 08 00	 ret	 8
?WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z ENDP ; CLockTimeMatch::WriteUserAward
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z
_TEXT	SEGMENT
_pIServerUserItem$1 = -276				; size = 4
_i$2 = -272						; size = 2
_MatchInfo$ = -268					; size = 258
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pITableFrame$ = 8					; size = 4
_wChairID$ = 12						; size = 2
?SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z PROC ; CLockTimeMatch::SendTableUserMatchInfo, COMDAT
; _this$ = ecx

; 2553 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2554 : 	//验证参数
; 2555 : 	ASSERT(pITableFrame!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pITableFrame$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN10@SendTableU
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN10@SendTableU
  00036	cc		 int	 3
$LN10@SendTableU:

; 2556 : 	if (pITableFrame==NULL) return;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pITableFrame$[ebp], 0
  0003b	75 05		 jne	 SHORT $LN5@SendTableU
  0003d	e9 86 01 00 00	 jmp	 $LN1@SendTableU
$LN5@SendTableU:

; 2557 : 
; 2558 : 	//构造数据
; 2559 : 	CMD_GR_Match_Info MatchInfo;
; 2560 : 	ZeroMemory(&MatchInfo,sizeof(MatchInfo));

  00042	68 02 01 00 00	 push	 258			; 00000102H
  00047	6a 00		 push	 0
  00049	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _MatchInfo$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _memset
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2561 : 
; 2562 : 	//设置标题
; 2563 : 	_sntprintf_s(MatchInfo.szTitle[0], CountArray(MatchInfo.szTitle[0]),TEXT("积分方式：累计积分"));

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KNNGNBNI@?$LL?$PN?$LH?V?$LH?$LN?J?$LN?$KD?$LK?$MA?$NL?$LM?F?$LL?$PN?$LH?V@
  0005d	6a 40		 push	 64			; 00000040H
  0005f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00064	6b c8 00	 imul	 ecx, eax, 0
  00067	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _MatchInfo$[ebp+ecx]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ; _snprintf_s<64>
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2564 : 	_sntprintf_s(MatchInfo.szTitle[1], CountArray(MatchInfo.szTitle[1]),TEXT("游戏基数：%d"), m_pLockTimeMatch->lMatchInitScore);

  00077	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0007d	8b 51 4d	 mov	 edx, DWORD PTR [ecx+77]
  00080	52		 push	 edx
  00081	8b 41 49	 mov	 eax, DWORD PTR [ecx+73]
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JCGEHOBO@?S?N?O?$LH?$LL?y?J?$PN?$KD?$LK?$CFd@
  0008a	6a 40		 push	 64			; 00000040H
  0008c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00091	c1 e1 00	 shl	 ecx, 0
  00094	8d 94 0d f4 fe
	ff ff		 lea	 edx, DWORD PTR _MatchInfo$[ebp+ecx]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ; _snprintf_s<64>
  000a1	83 c4 14	 add	 esp, 20			; 00000014H

; 2565 : 	_sntprintf_s(MatchInfo.szTitle[2], CountArray(MatchInfo.szTitle[2]),TEXT("局制名称：定时开赛"));

  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NHCOODCL@?$LO?V?V?F?C?$PL?$LD?F?$KD?$LK?$LG?$KI?J?$LB?$LP?$KK?H?$PM@
  000a9	6a 40		 push	 64			; 00000040H
  000ab	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000b0	d1 e0		 shl	 eax, 1
  000b2	8d 8c 05 f4 fe
	ff ff		 lea	 ecx, DWORD PTR _MatchInfo$[ebp+eax]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ; _snprintf_s<64>
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2566 : 
; 2567 : 	for(WORD i=0; i<pITableFrame->GetChairCount(); i++)

  000c2	33 c0		 xor	 eax, eax
  000c4	66 89 85 f0 fe
	ff ff		 mov	 WORD PTR _i$2[ebp], ax
  000cb	eb 12		 jmp	 SHORT $LN4@SendTableU
$LN2@SendTableU:
  000cd	66 8b 85 f0 fe
	ff ff		 mov	 ax, WORD PTR _i$2[ebp]
  000d4	66 83 c0 01	 add	 ax, 1
  000d8	66 89 85 f0 fe
	ff ff		 mov	 WORD PTR _i$2[ebp], ax
$LN4@SendTableU:
  000df	0f b7 b5 f0 fe
	ff ff		 movzx	 esi, WORD PTR _i$2[ebp]
  000e6	8b 45 08	 mov	 eax, DWORD PTR _pITableFrame$[ebp]
  000e9	8b 10		 mov	 edx, DWORD PTR [eax]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  000ee	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000f1	ff d0		 call	 eax
  000f3	0f b7 c8	 movzx	 ecx, ax
  000f6	3b f1		 cmp	 esi, ecx
  000f8	0f 8d ca 00 00
	00		 jge	 $LN1@SendTableU

; 2568 : 	{
; 2569 : 		//获取用户
; 2570 : 		if(wChairID!=INVALID_CHAIR && wChairID!=i) continue;

  000fe	0f b7 45 0c	 movzx	 eax, WORD PTR _wChairID$[ebp]
  00102	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00107	74 11		 je	 SHORT $LN6@SendTableU
  00109	0f b7 45 0c	 movzx	 eax, WORD PTR _wChairID$[ebp]
  0010d	0f b7 8d f0 fe
	ff ff		 movzx	 ecx, WORD PTR _i$2[ebp]
  00114	3b c1		 cmp	 eax, ecx
  00116	74 02		 je	 SHORT $LN6@SendTableU
  00118	eb b3		 jmp	 SHORT $LN2@SendTableU
$LN6@SendTableU:

; 2571 : 		IServerUserItem *pIServerUserItem=pITableFrame->GetTableUserItem(i);

  0011a	0f b7 85 f0 fe
	ff ff		 movzx	 eax, WORD PTR _i$2[ebp]
  00121	50		 push	 eax
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  00125	8b 11		 mov	 edx, DWORD PTR [ecx]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0012a	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00130	ff d0		 call	 eax
  00132	89 85 ec fe ff
	ff		 mov	 DWORD PTR _pIServerUserItem$1[ebp], eax

; 2572 : 		if(pIServerUserItem==NULL) continue;

  00138	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _pIServerUserItem$1[ebp], 0
  0013f	75 02		 jne	 SHORT $LN7@SendTableU
  00141	eb 8a		 jmp	 SHORT $LN2@SendTableU
$LN7@SendTableU:

; 2573 : 
; 2574 : 		//设置局数
; 2575 : 		MatchInfo.wGameCount=(WORD)(pIServerUserItem->GetUserPlayCount()-pIServerUserItem->GetUserInfo()->dwDrawCount)+1;

  00143	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _pIServerUserItem$1[ebp]
  00149	8b 10		 mov	 edx, DWORD PTR [eax]
  0014b	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$1[ebp]
  00151	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  00157	ff d0		 call	 eax
  00159	8b f0		 mov	 esi, eax
  0015b	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$1[ebp]
  00161	8b 11		 mov	 edx, DWORD PTR [ecx]
  00163	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$1[ebp]
  00169	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0016c	ff d0		 call	 eax
  0016e	2b b0 e0 00 00
	00		 sub	 esi, DWORD PTR [eax+224]
  00174	0f b7 ce	 movzx	 ecx, si
  00177	83 c1 01	 add	 ecx, 1
  0017a	66 89 4d f4	 mov	 WORD PTR _MatchInfo$[ebp+256], cx

; 2576 : 
; 2577 : 		//发送数据
; 2578 : 		if (pIServerUserItem->IsAndroidUser()==false)

  0017e	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _pIServerUserItem$1[ebp]
  00184	8b 10		 mov	 edx, DWORD PTR [eax]
  00186	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$1[ebp]
  0018c	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00192	ff d0		 call	 eax
  00194	0f b6 c8	 movzx	 ecx, al
  00197	85 c9		 test	 ecx, ecx
  00199	75 28		 jne	 SHORT $LN8@SendTableU

; 2579 : 		{
; 2580 : 			pITableFrame->SendTableData(i,SUB_GR_MATCH_INFO,&MatchInfo,sizeof(MatchInfo),MDM_GF_FRAME);

  0019b	6a 64		 push	 100			; 00000064H
  0019d	68 02 01 00 00	 push	 258			; 00000102H
  001a2	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _MatchInfo$[ebp]
  001a8	50		 push	 eax
  001a9	6a 01		 push	 1
  001ab	0f b7 8d f0 fe
	ff ff		 movzx	 ecx, WORD PTR _i$2[ebp]
  001b2	51		 push	 ecx
  001b3	8b 55 08	 mov	 edx, DWORD PTR _pITableFrame$[ebp]
  001b6	8b 02		 mov	 eax, DWORD PTR [edx]
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  001bb	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  001c1	ff d2		 call	 edx
$LN8@SendTableU:

; 2581 : 		}
; 2582 : 	}

  001c3	e9 05 ff ff ff	 jmp	 $LN2@SendTableU
$LN1@SendTableU:

; 2583 : 
; 2584 : 	return;
; 2585 : }

  001c8	5f		 pop	 edi
  001c9	5e		 pop	 esi
  001ca	5b		 pop	 ebx
  001cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ce	33 cd		 xor	 ecx, ebp
  001d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 08 00	 ret	 8
?SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z ENDP ; CLockTimeMatch::SendTableUserMatchInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z
_TEXT	SEGMENT
_pUserServerItem$1 = -12				; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_pITableFrame$ = 8					; size = 4
?PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z PROC ; CLockTimeMatch::PerformAllUserStandUp, COMDAT
; _this$ = ecx

; 1961 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1962 : 	//参数校验
; 1963 : 	ASSERT(pITableFrame!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pITableFrame$[ebp], 0
  00010	75 18		 jne	 SHORT $LN8@PerformAll
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN8@PerformAll
  00029	cc		 int	 3
$LN8@PerformAll:

; 1964 : 	if (pITableFrame==NULL) return;

  0002a	83 7d 08 00	 cmp	 DWORD PTR _pITableFrame$[ebp], 0
  0002e	75 02		 jne	 SHORT $LN5@PerformAll
  00030	eb 72		 jmp	 SHORT $LN1@PerformAll
$LN5@PerformAll:

; 1965 : 
; 1966 : 	//处理起立
; 1967 : 	for (int i=0;i<m_pGameServiceAttrib->wChairCount;i++)

  00032	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@PerformAll
$LN2@PerformAll:
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@PerformAll:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0004d	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  00051	39 55 f8	 cmp	 DWORD PTR _i$2[ebp], edx
  00054	7d 4e		 jge	 SHORT $LN1@PerformAll

; 1968 : 	{
; 1969 : 		//获取用户
; 1970 : 		IServerUserItem * pUserServerItem=pITableFrame->GetTableUserItem(i);

  00056	0f b7 45 f8	 movzx	 eax, WORD PTR _i$2[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0005e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  00063	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00069	ff d0		 call	 eax
  0006b	89 45 f4	 mov	 DWORD PTR _pUserServerItem$1[ebp], eax

; 1971 : 		if (pUserServerItem&&pUserServerItem->GetTableID()!=INVALID_TABLE)

  0006e	83 7d f4 00	 cmp	 DWORD PTR _pUserServerItem$1[ebp], 0
  00072	74 2e		 je	 SHORT $LN6@PerformAll
  00074	8b 45 f4	 mov	 eax, DWORD PTR _pUserServerItem$1[ebp]
  00077	8b 10		 mov	 edx, DWORD PTR [eax]
  00079	8b 4d f4	 mov	 ecx, DWORD PTR _pUserServerItem$1[ebp]
  0007c	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0007f	ff d0		 call	 eax
  00081	0f b7 c8	 movzx	 ecx, ax
  00084	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0008a	74 16		 je	 SHORT $LN6@PerformAll

; 1972 : 		{
; 1973 : 			pITableFrame->PerformStandUpAction(pUserServerItem);

  0008c	6a 00		 push	 0
  0008e	8b 45 f4	 mov	 eax, DWORD PTR _pUserServerItem$1[ebp]
  00091	50		 push	 eax
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  00095	8b 11		 mov	 edx, DWORD PTR [ecx]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0009a	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  000a0	ff d0		 call	 eax
$LN6@PerformAll:

; 1974 : 		}
; 1975 : 	}	

  000a2	eb 97		 jmp	 SHORT $LN2@PerformAll
$LN1@PerformAll:

; 1976 : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
?PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z ENDP ; CLockTimeMatch::PerformAllUserStandUp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?GetMatchStartInterval@CLockTimeMatch@@IAEKXZ
_TEXT	SEGMENT
_TimeSpan$1 = -52					; size = 8
_dwEndStamp$ = -44					; size = 4
_dwStartStamp$ = -40					; size = 4
_dwCurrStamp$ = -36					; size = 4
_dwTimeInterval$ = -32					; size = 4
_MatchEndTime$ = -28					; size = 8
_MatchStartTime$ = -20					; size = 8
_CurTime$ = -12						; size = 8
_this$ = -4						; size = 4
?GetMatchStartInterval@CLockTimeMatch@@IAEKXZ PROC	; CLockTimeMatch::GetMatchStartInterval, COMDAT
; _this$ = ecx

; 1919 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1920 : 	//获取时间
; 1921 : 	CTime CurTime=CTime::GetCurrentTime();

  0000c	8d 45 f4	 lea	 eax, DWORD PTR _CurTime$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 1922 : 	CTime MatchStartTime(m_pLockTimeMatch->MatchStartTime);

  00015	6a ff		 push	 -1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001d	83 c1 04	 add	 ecx, 4
  00020	51		 push	 ecx
  00021	8d 4d ec	 lea	 ecx, DWORD PTR _MatchStartTime$[ebp]
  00024	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 1923 : 	CTime MatchEndTime(m_pLockTimeMatch->MatchEndTime);

  00029	6a ff		 push	 -1
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00031	83 c1 14	 add	 ecx, 20			; 00000014H
  00034	51		 push	 ecx
  00035	8d 4d e4	 lea	 ecx, DWORD PTR _MatchEndTime$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 1924 : 
; 1925 : 	//变量定义
; 1926 : 	DWORD dwTimeInterval=1;

  0003d	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _dwTimeInterval$[ebp], 1

; 1927 : 	DWORD dwCurrStamp,dwStartStamp,dwEndStamp;
; 1928 : 
; 1929 : 	//比赛未开始
; 1930 : 	if(CurTime<MatchStartTime)

  00044	8b 45 f0	 mov	 eax, DWORD PTR _MatchStartTime$[ebp+4]
  00047	50		 push	 eax
  00048	8b 4d ec	 mov	 ecx, DWORD PTR _MatchStartTime$[ebp]
  0004b	51		 push	 ecx
  0004c	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0004f	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  00054	0f b6 d0	 movzx	 edx, al
  00057	85 d2		 test	 edx, edx
  00059	74 1f		 je	 SHORT $LN2@GetMatchSt

; 1931 : 	{
; 1932 : 		CTimeSpan TimeSpan = MatchStartTime-CurTime;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _CurTime$[ebp+4]
  0005e	50		 push	 eax
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR _CurTime$[ebp]
  00062	51		 push	 ecx
  00063	8d 55 cc	 lea	 edx, DWORD PTR _TimeSpan$1[ebp]
  00066	52		 push	 edx
  00067	8d 4d ec	 lea	 ecx, DWORD PTR _MatchStartTime$[ebp]
  0006a	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-

; 1933 : 		dwTimeInterval = (DWORD)TimeSpan.GetTotalSeconds();

  0006f	8d 4d cc	 lea	 ecx, DWORD PTR _TimeSpan$1[ebp]
  00072	e8 00 00 00 00	 call	 ?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTotalSeconds
  00077	89 45 e0	 mov	 DWORD PTR _dwTimeInterval$[ebp], eax
$LN2@GetMatchSt:

; 1934 : 	}
; 1935 : 
; 1936 : 	//比赛已结束
; 1937 : 	if(CurTime>=MatchEndTime) dwTimeInterval=0;

  0007a	8b 45 e8	 mov	 eax, DWORD PTR _MatchEndTime$[ebp+4]
  0007d	50		 push	 eax
  0007e	8b 4d e4	 mov	 ecx, DWORD PTR _MatchEndTime$[ebp]
  00081	51		 push	 ecx
  00082	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  00085	e8 00 00 00 00	 call	 ??PCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>=
  0008a	0f b6 d0	 movzx	 edx, al
  0008d	85 d2		 test	 edx, edx
  0008f	74 07		 je	 SHORT $LN3@GetMatchSt
  00091	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dwTimeInterval$[ebp], 0
$LN3@GetMatchSt:

; 1938 : 
; 1939 : 	//计算时间
; 1940 : 	dwCurrStamp = CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond();

  00098	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0009b	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  000a0	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  000a6	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  000a9	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  000ae	6b c0 3c	 imul	 eax, eax, 60
  000b1	03 f0		 add	 esi, eax
  000b3	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  000b6	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  000bb	03 f0		 add	 esi, eax
  000bd	89 75 dc	 mov	 DWORD PTR _dwCurrStamp$[ebp], esi

; 1941 : 	dwStartStamp = m_pLockTimeMatch->MatchStartTime.wHour*3600+m_pLockTimeMatch->MatchStartTime.wMinute*60+m_pLockTimeMatch->MatchStartTime.wSecond;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000c6	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  000ca	69 c2 10 0e 00
	00		 imul	 eax, edx, 3600
  000d0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000d6	0f b7 4a 0e	 movzx	 ecx, WORD PTR [edx+14]
  000da	6b d1 3c	 imul	 edx, ecx, 60
  000dd	03 c2		 add	 eax, edx
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000e5	0f b7 4a 10	 movzx	 ecx, WORD PTR [edx+16]
  000e9	03 c1		 add	 eax, ecx
  000eb	89 45 d8	 mov	 DWORD PTR _dwStartStamp$[ebp], eax

; 1942 : 	dwEndStamp = m_pLockTimeMatch->MatchEndTime.wHour*3600+m_pLockTimeMatch->MatchEndTime.wMinute*60+m_pLockTimeMatch->MatchEndTime.wSecond;

  000ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000f4	0f b7 51 1c	 movzx	 edx, WORD PTR [ecx+28]
  000f8	69 c2 10 0e 00
	00		 imul	 eax, edx, 3600
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00104	0f b7 4a 1e	 movzx	 ecx, WORD PTR [edx+30]
  00108	6b d1 3c	 imul	 edx, ecx, 60
  0010b	03 c2		 add	 eax, edx
  0010d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00113	0f b7 4a 20	 movzx	 ecx, WORD PTR [edx+32]
  00117	03 c1		 add	 eax, ecx
  00119	89 45 d4	 mov	 DWORD PTR _dwEndStamp$[ebp], eax

; 1943 : 
; 1944 : 	//比赛未开始
; 1945 : 	if(dwCurrStamp<dwStartStamp) 

  0011c	8b 45 dc	 mov	 eax, DWORD PTR _dwCurrStamp$[ebp]
  0011f	3b 45 d8	 cmp	 eax, DWORD PTR _dwStartStamp$[ebp]
  00122	73 09		 jae	 SHORT $LN4@GetMatchSt

; 1946 : 	{
; 1947 : 		dwTimeInterval = dwStartStamp-dwCurrStamp;

  00124	8b 45 d8	 mov	 eax, DWORD PTR _dwStartStamp$[ebp]
  00127	2b 45 dc	 sub	 eax, DWORD PTR _dwCurrStamp$[ebp]
  0012a	89 45 e0	 mov	 DWORD PTR _dwTimeInterval$[ebp], eax
$LN4@GetMatchSt:

; 1948 : 	}
; 1949 : 
; 1950 : 	//比赛已结束
; 1951 : 	if(dwCurrStamp>=dwEndStamp)

  0012d	8b 45 dc	 mov	 eax, DWORD PTR _dwCurrStamp$[ebp]
  00130	3b 45 d4	 cmp	 eax, DWORD PTR _dwEndStamp$[ebp]
  00133	72 10		 jb	 SHORT $LN5@GetMatchSt

; 1952 : 	{
; 1953 : 		dwTimeInterval = 24*3600-(dwCurrStamp-dwStartStamp);		

  00135	8b 45 dc	 mov	 eax, DWORD PTR _dwCurrStamp$[ebp]
  00138	2b 45 d8	 sub	 eax, DWORD PTR _dwStartStamp$[ebp]
  0013b	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  00140	2b c8		 sub	 ecx, eax
  00142	89 4d e0	 mov	 DWORD PTR _dwTimeInterval$[ebp], ecx
$LN5@GetMatchSt:

; 1954 : 	}
; 1955 : 
; 1956 : 	return dwTimeInterval;

  00145	8b 45 e0	 mov	 eax, DWORD PTR _dwTimeInterval$[ebp]

; 1957 : }

  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
?GetMatchStartInterval@CLockTimeMatch@@IAEKXZ ENDP	; CLockTimeMatch::GetMatchStartInterval
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?IsMatchSignupStart@CLockTimeMatch@@IAE_NXZ
_TEXT	SEGMENT
tv80 = -108						; size = 4
tv152 = -104						; size = 8
tv135 = -100						; size = 4
_nCurrSeconds$1 = -32					; size = 4
_TimeSpan$2 = -28					; size = 8
_SignupStartTime$ = -20					; size = 8
_CurTime$ = -12						; size = 8
_this$ = -4						; size = 4
?IsMatchSignupStart@CLockTimeMatch@@IAE_NXZ PROC	; CLockTimeMatch::IsMatchSignupStart, COMDAT
; _this$ = ecx

; 1894 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1895 : 	//获取时间
; 1896 : 	CTime CurTime=CTime::GetCurrentTime();

  0000c	8d 45 f4	 lea	 eax, DWORD PTR _CurTime$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 1897 : 	CTime SignupStartTime(m_pLockTimeMatch->SignupStartTime);	

  00015	6a ff		 push	 -1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001d	83 c1 29	 add	 ecx, 41			; 00000029H
  00020	51		 push	 ecx
  00021	8d 4d ec	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00024	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 1898 : 
; 1899 : 	//常规开赛
; 1900 : 	if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_NORMAL)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0002f	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  00033	85 d2		 test	 edx, edx
  00035	75 47		 jne	 SHORT $LN2@IsMatchSig

; 1901 : 	{
; 1902 : 		//比较时间
; 1903 : 		CTimeSpan TimeSpan = CurTime-SignupStartTime;

  00037	8b 45 f0	 mov	 eax, DWORD PTR _SignupStartTime$[ebp+4]
  0003a	50		 push	 eax
  0003b	8b 4d ec	 mov	 ecx, DWORD PTR _SignupStartTime$[ebp]
  0003e	51		 push	 ecx
  0003f	8d 55 e4	 lea	 edx, DWORD PTR _TimeSpan$2[ebp]
  00042	52		 push	 edx
  00043	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  00046	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-

; 1904 : 
; 1905 : 		return TimeSpan.GetTotalSeconds()>=0;	

  0004b	8d 4d e4	 lea	 ecx, DWORD PTR _TimeSpan$2[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTotalSeconds
  00053	89 45 98	 mov	 DWORD PTR tv152[ebp], eax
  00056	89 55 9c	 mov	 DWORD PTR tv152[ebp+4], edx
  00059	83 7d 9c 00	 cmp	 DWORD PTR tv152[ebp+4], 0
  0005d	7c 11		 jl	 SHORT $LN5@IsMatchSig
  0005f	7f 06		 jg	 SHORT $LN9@IsMatchSig
  00061	83 7d 98 00	 cmp	 DWORD PTR tv152[ebp], 0
  00065	72 09		 jb	 SHORT $LN5@IsMatchSig
$LN9@IsMatchSig:
  00067	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  0006e	eb 07		 jmp	 SHORT $LN6@IsMatchSig
$LN5@IsMatchSig:
  00070	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN6@IsMatchSig:
  00077	8a 45 94	 mov	 al, BYTE PTR tv80[ebp]
  0007a	eb 67		 jmp	 SHORT $LN1@IsMatchSig

; 1906 : 	}
; 1907 : 	else

  0007c	eb 65		 jmp	 SHORT $LN1@IsMatchSig
$LN2@IsMatchSig:

; 1908 : 	{
; 1909 : 		//计算时间
; 1910 : 		int nCurrSeconds=CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond();

  0007e	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  00081	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00086	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  0008c	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0008f	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00094	6b c0 3c	 imul	 eax, eax, 60
  00097	03 f0		 add	 esi, eax
  00099	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0009c	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  000a1	03 f0		 add	 esi, eax
  000a3	89 75 e0	 mov	 DWORD PTR _nCurrSeconds$1[ebp], esi

; 1911 : 
; 1912 : 		//判断时间
; 1913 : 		return nCurrSeconds>=(SignupStartTime.GetHour()*3600+SignupStartTime.GetMinute()*60+SignupStartTime.GetSecond());

  000a6	8d 4d ec	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  000a9	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  000ae	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  000b4	8d 4d ec	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  000b7	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  000bc	6b c0 3c	 imul	 eax, eax, 60
  000bf	03 f0		 add	 esi, eax
  000c1	8d 4d ec	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  000c4	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  000c9	03 f0		 add	 esi, eax
  000cb	39 75 e0	 cmp	 DWORD PTR _nCurrSeconds$1[ebp], esi
  000ce	7c 09		 jl	 SHORT $LN7@IsMatchSig
  000d0	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
  000d7	eb 07		 jmp	 SHORT $LN8@IsMatchSig
$LN7@IsMatchSig:
  000d9	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN8@IsMatchSig:
  000e0	8a 45 9c	 mov	 al, BYTE PTR tv135[ebp]
$LN1@IsMatchSig:

; 1914 : 	}	
; 1915 : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?IsMatchSignupStart@CLockTimeMatch@@IAE_NXZ ENDP	; CLockTimeMatch::IsMatchSignupStart
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?IsMatchSignupEnd@CLockTimeMatch@@IAE_NXZ
_TEXT	SEGMENT
tv80 = -108						; size = 4
tv152 = -104						; size = 8
tv135 = -100						; size = 4
_nCurrSeconds$1 = -32					; size = 4
_TimeSpan$2 = -28					; size = 8
_SignupEndTime$ = -20					; size = 8
_CurTime$ = -12						; size = 8
_this$ = -4						; size = 4
?IsMatchSignupEnd@CLockTimeMatch@@IAE_NXZ PROC		; CLockTimeMatch::IsMatchSignupEnd, COMDAT
; _this$ = ecx

; 1869 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1870 : 	//获取时间
; 1871 : 	CTime CurTime=CTime::GetCurrentTime();

  0000c	8d 45 f4	 lea	 eax, DWORD PTR _CurTime$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 1872 : 	CTime SignupEndTime(m_pLockTimeMatch->SignupEndTime);	

  00015	6a ff		 push	 -1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001d	83 c1 39	 add	 ecx, 57			; 00000039H
  00020	51		 push	 ecx
  00021	8d 4d ec	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  00024	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 1873 : 
; 1874 : 	//常规开赛
; 1875 : 	if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_NORMAL)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0002f	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  00033	85 d2		 test	 edx, edx
  00035	75 47		 jne	 SHORT $LN2@IsMatchSig

; 1876 : 	{
; 1877 : 		//比较时间
; 1878 : 		CTimeSpan TimeSpan=CurTime-SignupEndTime;

  00037	8b 45 f0	 mov	 eax, DWORD PTR _SignupEndTime$[ebp+4]
  0003a	50		 push	 eax
  0003b	8b 4d ec	 mov	 ecx, DWORD PTR _SignupEndTime$[ebp]
  0003e	51		 push	 ecx
  0003f	8d 55 e4	 lea	 edx, DWORD PTR _TimeSpan$2[ebp]
  00042	52		 push	 edx
  00043	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  00046	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-

; 1879 : 		
; 1880 : 		return TimeSpan.GetTotalSeconds()>=0;	

  0004b	8d 4d e4	 lea	 ecx, DWORD PTR _TimeSpan$2[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetTotalSeconds
  00053	89 45 98	 mov	 DWORD PTR tv152[ebp], eax
  00056	89 55 9c	 mov	 DWORD PTR tv152[ebp+4], edx
  00059	83 7d 9c 00	 cmp	 DWORD PTR tv152[ebp+4], 0
  0005d	7c 11		 jl	 SHORT $LN5@IsMatchSig
  0005f	7f 06		 jg	 SHORT $LN9@IsMatchSig
  00061	83 7d 98 00	 cmp	 DWORD PTR tv152[ebp], 0
  00065	72 09		 jb	 SHORT $LN5@IsMatchSig
$LN9@IsMatchSig:
  00067	c7 45 94 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  0006e	eb 07		 jmp	 SHORT $LN6@IsMatchSig
$LN5@IsMatchSig:
  00070	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN6@IsMatchSig:
  00077	8a 45 94	 mov	 al, BYTE PTR tv80[ebp]
  0007a	eb 67		 jmp	 SHORT $LN1@IsMatchSig

; 1881 : 	}
; 1882 : 	else

  0007c	eb 65		 jmp	 SHORT $LN1@IsMatchSig
$LN2@IsMatchSig:

; 1883 : 	{
; 1884 : 		//计算时间
; 1885 : 		int nCurrSeconds=CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond();

  0007e	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  00081	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00086	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  0008c	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0008f	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00094	6b c0 3c	 imul	 eax, eax, 60
  00097	03 f0		 add	 esi, eax
  00099	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0009c	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  000a1	03 f0		 add	 esi, eax
  000a3	89 75 e0	 mov	 DWORD PTR _nCurrSeconds$1[ebp], esi

; 1886 : 
; 1887 : 		//判断时间
; 1888 : 		return nCurrSeconds>=(SignupEndTime.GetHour()*3600+SignupEndTime.GetMinute()*60+SignupEndTime.GetSecond());

  000a6	8d 4d ec	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  000a9	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  000ae	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  000b4	8d 4d ec	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  000b7	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  000bc	6b c0 3c	 imul	 eax, eax, 60
  000bf	03 f0		 add	 esi, eax
  000c1	8d 4d ec	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  000c4	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  000c9	03 f0		 add	 esi, eax
  000cb	39 75 e0	 cmp	 DWORD PTR _nCurrSeconds$1[ebp], esi
  000ce	7c 09		 jl	 SHORT $LN7@IsMatchSig
  000d0	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
  000d7	eb 07		 jmp	 SHORT $LN8@IsMatchSig
$LN7@IsMatchSig:
  000d9	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN8@IsMatchSig:
  000e0	8a 45 9c	 mov	 al, BYTE PTR tv135[ebp]
$LN1@IsMatchSig:

; 1889 : 	}		
; 1890 : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?IsMatchSignupEnd@CLockTimeMatch@@IAE_NXZ ENDP		; CLockTimeMatch::IsMatchSignupEnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ PROC		; CLockTimeMatch::SwitchMatchTimer, COMDAT
; _this$ = ecx

; 2182 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2183 : 	//比赛未开始
; 2184 : 	if (m_MatchStatus==MatchStatus_Free)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00013	85 c9		 test	 ecx, ecx
  00015	75 27		 jne	 SHORT $LN2@SwitchMatc

; 2185 : 	{
; 2186 : 		//开始检测	
; 2187 : 		m_pITimerEngine->SetTimer(IDI_CHECK_START_MATCH,2000L,TIMES_INFINITY,NULL);

  00017	6a 00		 push	 0
  00019	6a ff		 push	 -1
  0001b	68 d0 07 00 00	 push	 2000			; 000007d0H
  00020	68 cd 00 00 00	 push	 205			; 000000cdH
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00039	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0003c	ff d2		 call	 edx
$LN2@SwitchMatc:

; 2188 : 	}
; 2189 : 
; 2190 : 	//等待开始
; 2191 : 	if (m_MatchStatus==MatchStatus_WaitPlay)

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00045	83 f9 01	 cmp	 ecx, 1
  00048	75 27		 jne	 SHORT $LN3@SwitchMatc

; 2192 : 	{
; 2193 : 		//结束检测
; 2194 : 		m_pITimerEngine->SetTimer(IDI_CHECK_START_MATCH,2000L,TIMES_INFINITY,NULL);

  0004a	6a 00		 push	 0
  0004c	6a ff		 push	 -1
  0004e	68 d0 07 00 00	 push	 2000			; 000007d0H
  00053	68 cd 00 00 00	 push	 205			; 000000cdH
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 01		 mov	 eax, DWORD PTR [ecx]
  00066	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  0006c	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0006f	ff d2		 call	 edx
$LN3@SwitchMatc:

; 2195 : 	}
; 2196 : 
; 2197 : 	//比赛进行中
; 2198 : 	if (m_MatchStatus==MatchStatus_Playing)

  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00078	83 f9 02	 cmp	 ecx, 2
  0007b	75 5a		 jne	 SHORT $LN4@SwitchMatc

; 2199 : 	{
; 2200 : 		//结束检测
; 2201 : 		m_pITimerEngine->SetTimer(IDI_CHECK_END_MATCH,5000,TIMES_INFINITY,NULL);

  0007d	6a 00		 push	 0
  0007f	6a ff		 push	 -1
  00081	68 88 13 00 00	 push	 5000			; 00001388H
  00086	68 ce 00 00 00	 push	 206			; 000000ceH
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00094	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 01		 mov	 eax, DWORD PTR [ecx]
  00099	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  0009f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000a2	ff d2		 call	 edx

; 2202 : 
; 2203 : 		//分组检测
; 2204 : 		m_pITimerEngine->SetTimer(IDI_DISTRIBUTE_USER,m_pMatchOption->wDistributeTimeSpace*1000,TIMES_INFINITY,NULL);

  000a4	6a 00		 push	 0
  000a6	6a ff		 push	 -1
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000ae	0f b7 51 78	 movzx	 edx, WORD PTR [ecx+120]
  000b2	69 c2 e8 03 00
	00		 imul	 eax, edx, 1000
  000b8	50		 push	 eax
  000b9	68 ca 00 00 00	 push	 202			; 000000caH
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 12		 mov	 edx, DWORD PTR [edx]
  000cc	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000d2	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000d5	ff d0		 call	 eax
$LN4@SwitchMatc:

; 2205 : 	}
; 2206 : 
; 2207 : 	//等待结束
; 2208 : 	if (m_MatchStatus==MatchStatus_WaitEnd)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  000de	83 f9 03	 cmp	 ecx, 3
  000e1	75 27		 jne	 SHORT $LN5@SwitchMatc

; 2209 : 	{
; 2210 : 		//结束检测
; 2211 : 		m_pITimerEngine->SetTimer(IDI_CHECK_END_MATCH,5000,TIMES_INFINITY,NULL);

  000e3	6a 00		 push	 0
  000e5	6a ff		 push	 -1
  000e7	68 88 13 00 00	 push	 5000			; 00001388H
  000ec	68 ce 00 00 00	 push	 206			; 000000ceH
  000f1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000fa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000fd	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ff	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00105	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00108	ff d2		 call	 edx
$LN5@SwitchMatc:

; 2212 : 	}
; 2213 : 
; 2214 : 	//比赛已结束
; 2215 : 	if (m_MatchStatus==MatchStatus_End)

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00111	83 f9 04	 cmp	 ecx, 4
  00114	75 27		 jne	 SHORT $LN1@SwitchMatc

; 2216 : 	{
; 2217 : 		//切换状态
; 2218 : 		m_pITimerEngine->SetTimer(IDI_SWITCH_STATUS,2000,TIMES_INFINITY,NULL);

  00116	6a 00		 push	 0
  00118	6a ff		 push	 -1
  0011a	68 d0 07 00 00	 push	 2000			; 000007d0H
  0011f	68 c9 00 00 00	 push	 201			; 000000c9H
  00124	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00127	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0012d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00130	8b 01		 mov	 eax, DWORD PTR [ecx]
  00132	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00138	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0013b	ff d2		 call	 edx
$LN1@SwitchMatc:

; 2219 : 	}
; 2220 : }

  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ENDP		; CLockTimeMatch::SwitchMatchTimer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?UpdateMatchStatus@CLockTimeMatch@@IAEXXZ
_TEXT	SEGMENT
_pITableFrame$1 = -40					; size = 4
_i$2 = -36						; size = 4
_bContinueWait$3 = -30					; size = 1
_MatchStatus$ = -29					; size = 1
_MatchStartTime$ = -28					; size = 8
_MatchEndTime$ = -20					; size = 8
_CurTime$ = -12						; size = 8
_this$ = -4						; size = 4
?UpdateMatchStatus@CLockTimeMatch@@IAEXXZ PROC		; CLockTimeMatch::UpdateMatchStatus, COMDAT
; _this$ = ecx

; 2112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2113 : 	//变量定义
; 2114 : 	CTime CurTime=CTime::GetCurrentTime();

  0000c	8d 45 f4	 lea	 eax, DWORD PTR _CurTime$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 2115 : 	CTime MatchEndTime(m_pLockTimeMatch->MatchEndTime);

  00015	6a ff		 push	 -1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001d	83 c1 14	 add	 ecx, 20			; 00000014H
  00020	51		 push	 ecx
  00021	8d 4d ec	 lea	 ecx, DWORD PTR _MatchEndTime$[ebp]
  00024	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 2116 : 	CTime MatchStartTime(m_pLockTimeMatch->MatchStartTime);	

  00029	6a ff		 push	 -1
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00031	83 c1 04	 add	 ecx, 4
  00034	51		 push	 ecx
  00035	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 2117 : 
; 2118 : 	//比赛未开始
; 2119 : 	BYTE MatchStatus=m_MatchStatus;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  00043	88 4d e3	 mov	 BYTE PTR _MatchStatus$[ebp], cl

; 2120 : 
; 2121 : 	//等待开始比赛
; 2122 : 	if (MatchStatus==MatchStatus_Free && CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond() >= 

  00046	0f b6 45 e3	 movzx	 eax, BYTE PTR _MatchStatus$[ebp]
  0004a	85 c0		 test	 eax, eax
  0004c	75 58		 jne	 SHORT $LN5@UpdateMatc
  0004e	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  00051	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00056	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  0005c	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0005f	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00064	6b c0 3c	 imul	 eax, eax, 60
  00067	03 f0		 add	 esi, eax
  00069	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0006c	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  00071	03 f0		 add	 esi, eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00079	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  0007d	69 c8 10 0e 00
	00		 imul	 ecx, eax, 3600
  00083	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00086	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00089	0f b7 50 0e	 movzx	 edx, WORD PTR [eax+14]
  0008d	6b c2 3c	 imul	 eax, edx, 60
  00090	03 c8		 add	 ecx, eax
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00098	0f b7 50 10	 movzx	 edx, WORD PTR [eax+16]
  0009c	03 ca		 add	 ecx, edx
  0009e	3b f1		 cmp	 esi, ecx
  000a0	7c 04		 jl	 SHORT $LN5@UpdateMatc

; 2123 : 	   m_pLockTimeMatch->MatchStartTime.wHour*3600+m_pLockTimeMatch->MatchStartTime.wMinute*60+m_pLockTimeMatch->MatchStartTime.wSecond)
; 2124 : 	{
; 2125 : 		MatchStatus=MatchStatus_WaitPlay;

  000a2	c6 45 e3 01	 mov	 BYTE PTR _MatchStatus$[ebp], 1
$LN5@UpdateMatc:

; 2126 : 	}
; 2127 : 
; 2128 : 	//比赛进行中
; 2129 : 	if (MatchStatus==MatchStatus_WaitPlay && m_DistributeManage.GetCount()>=m_pLockTimeMatch->wStartUserCount)

  000a6	0f b6 45 e3	 movzx	 eax, BYTE PTR _MatchStatus$[ebp]
  000aa	83 f8 01	 cmp	 eax, 1
  000ad	75 20		 jne	 SHORT $LN6@UpdateMatc
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	83 c1 18	 add	 ecx, 24			; 00000018H
  000b5	e8 00 00 00 00	 call	 ?GetCount@CDistributeManager@@QAEGXZ ; CDistributeManager::GetCount
  000ba	0f b7 c0	 movzx	 eax, ax
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000c3	0f b7 4a 27	 movzx	 ecx, WORD PTR [edx+39]
  000c7	3b c1		 cmp	 eax, ecx
  000c9	7c 04		 jl	 SHORT $LN6@UpdateMatc

; 2130 : 	{
; 2131 : 		MatchStatus=MatchStatus_Playing;

  000cb	c6 45 e3 02	 mov	 BYTE PTR _MatchStatus$[ebp], 2
$LN6@UpdateMatc:

; 2132 : 	}
; 2133 : 
; 2134 : 	//等待结束
; 2135 : 	if (MatchStatus==MatchStatus_Playing && CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond() >= 

  000cf	0f b6 45 e3	 movzx	 eax, BYTE PTR _MatchStatus$[ebp]
  000d3	83 f8 02	 cmp	 eax, 2
  000d6	75 58		 jne	 SHORT $LN7@UpdateMatc
  000d8	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  000db	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  000e0	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  000e6	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  000e9	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  000ee	6b c0 3c	 imul	 eax, eax, 60
  000f1	03 f0		 add	 esi, eax
  000f3	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  000f6	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  000fb	03 f0		 add	 esi, eax
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00103	0f b7 42 1c	 movzx	 eax, WORD PTR [edx+28]
  00107	69 c8 10 0e 00
	00		 imul	 ecx, eax, 3600
  0010d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00110	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00113	0f b7 50 1e	 movzx	 edx, WORD PTR [eax+30]
  00117	6b c2 3c	 imul	 eax, edx, 60
  0011a	03 c8		 add	 ecx, eax
  0011c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00122	0f b7 50 20	 movzx	 edx, WORD PTR [eax+32]
  00126	03 ca		 add	 ecx, edx
  00128	3b f1		 cmp	 esi, ecx
  0012a	7c 04		 jl	 SHORT $LN7@UpdateMatc

; 2136 : 	   m_pLockTimeMatch->MatchEndTime.wHour*3600+m_pLockTimeMatch->MatchEndTime.wMinute*60+m_pLockTimeMatch->MatchEndTime.wSecond)
; 2137 : 	{
; 2138 : 		MatchStatus=MatchStatus_WaitEnd;

  0012c	c6 45 e3 03	 mov	 BYTE PTR _MatchStatus$[ebp], 3
$LN7@UpdateMatc:

; 2139 : 	}	
; 2140 : 
; 2141 : 	//结束判断
; 2142 : 	if (MatchStatus==MatchStatus_WaitEnd)  

  00130	0f b6 45 e3	 movzx	 eax, BYTE PTR _MatchStatus$[ebp]
  00134	83 f8 03	 cmp	 eax, 3
  00137	0f 85 c7 00 00
	00		 jne	 $LN8@UpdateMatc

; 2143 : 	{
; 2144 : 		//变量定义
; 2145 : 		bool bContinueWait=false;

  0013d	c6 45 e2 00	 mov	 BYTE PTR _bContinueWait$3[ebp], 0

; 2146 : 
; 2147 : 		//解散游戏
; 2148 : 		for (INT i=0; i<m_pGameServiceOption->wTableCount; i++)

  00141	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00148	eb 09		 jmp	 SHORT $LN4@UpdateMatc
$LN2@UpdateMatc:
  0014a	8b 45 dc	 mov	 eax, DWORD PTR _i$2[ebp]
  0014d	83 c0 01	 add	 eax, 1
  00150	89 45 dc	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@UpdateMatc:
  00153	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00159	0f b7 51 46	 movzx	 edx, WORD PTR [ecx+70]
  0015d	39 55 dc	 cmp	 DWORD PTR _i$2[ebp], edx
  00160	7d 36		 jge	 SHORT $LN3@UpdateMatc

; 2149 : 		{
; 2150 : 			//获取对象
; 2151 : 			ITableFrame * pITableFrame=m_ppITableFrame[i];								

  00162	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00165	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0016b	8b 55 dc	 mov	 edx, DWORD PTR _i$2[ebp]
  0016e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00171	89 45 d8	 mov	 DWORD PTR _pITableFrame$1[ebp], eax

; 2152 : 			if (pITableFrame==NULL) continue;

  00174	83 7d d8 00	 cmp	 DWORD PTR _pITableFrame$1[ebp], 0
  00178	75 02		 jne	 SHORT $LN9@UpdateMatc
  0017a	eb ce		 jmp	 SHORT $LN2@UpdateMatc
$LN9@UpdateMatc:

; 2153 : 
; 2154 : 			//解散游戏
; 2155 : 			if (pITableFrame->IsGameStarted())

  0017c	8b 45 d8	 mov	 eax, DWORD PTR _pITableFrame$1[ebp]
  0017f	8b 10		 mov	 edx, DWORD PTR [eax]
  00181	8b 4d d8	 mov	 ecx, DWORD PTR _pITableFrame$1[ebp]
  00184	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00187	ff d0		 call	 eax
  00189	0f b6 c8	 movzx	 ecx, al
  0018c	85 c9		 test	 ecx, ecx
  0018e	74 06		 je	 SHORT $LN10@UpdateMatc

; 2156 : 			{
; 2157 : 				bContinueWait=true;

  00190	c6 45 e2 01	 mov	 BYTE PTR _bContinueWait$3[ebp], 1

; 2158 : 				break;

  00194	eb 02		 jmp	 SHORT $LN3@UpdateMatc
$LN10@UpdateMatc:

; 2159 : 			}
; 2160 : 		}

  00196	eb b2		 jmp	 SHORT $LN2@UpdateMatc
$LN3@UpdateMatc:

; 2161 : 
; 2162 : 		//无需等待
; 2163 : 		if (bContinueWait==false)

  00198	0f b6 45 e2	 movzx	 eax, BYTE PTR _bContinueWait$3[ebp]
  0019c	85 c0		 test	 eax, eax
  0019e	75 04		 jne	 SHORT $LN11@UpdateMatc

; 2164 : 		{
; 2165 : 			MatchStatus=MatchStatus_End;

  001a0	c6 45 e3 04	 mov	 BYTE PTR _MatchStatus$[ebp], 4
$LN11@UpdateMatc:

; 2166 : 		}
; 2167 : 
; 2168 : 		//强制结束
; 2169 : 		if ((DWORD)(CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond()) >= 

  001a4	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  001a7	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  001ac	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  001b2	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  001b5	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  001ba	6b c0 3c	 imul	 eax, eax, 60
  001bd	03 f0		 add	 esi, eax
  001bf	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  001c2	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  001c7	03 f0		 add	 esi, eax
  001c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001cc	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  001cf	0f b7 42 1c	 movzx	 eax, WORD PTR [edx+28]
  001d3	69 c8 10 0e 00
	00		 imul	 ecx, eax, 3600
  001d9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001dc	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  001df	0f b7 50 1e	 movzx	 edx, WORD PTR [eax+30]
  001e3	6b c2 3c	 imul	 eax, edx, 60
  001e6	03 c8		 add	 ecx, eax
  001e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001eb	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  001ee	0f b7 50 20	 movzx	 edx, WORD PTR [eax+32]
  001f2	03 ca		 add	 ecx, edx
  001f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f7	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  001fa	03 0a		 add	 ecx, DWORD PTR [edx]
  001fc	3b f1		 cmp	 esi, ecx
  001fe	72 04		 jb	 SHORT $LN8@UpdateMatc

; 2170 : 			(DWORD)(m_pLockTimeMatch->MatchEndTime.wHour*3600+m_pLockTimeMatch->MatchEndTime.wMinute*60+m_pLockTimeMatch->MatchEndTime.wSecond+m_pLockTimeMatch->wEndDelayTime))
; 2171 : 		{
; 2172 : 			MatchStatus=MatchStatus_End;

  00200	c6 45 e3 04	 mov	 BYTE PTR _MatchStatus$[ebp], 4
$LN8@UpdateMatc:

; 2173 : 		}
; 2174 : 	}
; 2175 : 
; 2176 : 	//设置状态
; 2177 : 	m_MatchStatus=MatchStatus; 	

  00204	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00207	8a 4d e3	 mov	 cl, BYTE PTR _MatchStatus$[ebp]
  0020a	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 2178 : }

  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
  0020f	5b		 pop	 ebx
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
?UpdateMatchStatus@CLockTimeMatch@@IAEXXZ ENDP		; CLockTimeMatch::UpdateMatchStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?PerformDistribute@CLockTimeMatch@@IAE_NXZ
_TEXT	SEGMENT
tv264 = -168						; size = 4
tv252 = -168						; size = 4
tv128 = -168						; size = 4
_wTableID$2 = -100					; size = 2
_nIndex$3 = -96						; size = 4
_pITableFrame$4 = -92					; size = 4
_wTableID$5 = -88					; size = 2
_pIServerUserItem$6 = -84				; size = 4
_i$7 = -80						; size = 2
_wChairID$8 = -76					; size = 2
_nIndex$9 = -72						; size = 4
_nSitFailedIndex$10 = -68				; size = 4
_bSitSuccess$11 = -61					; size = 1
_pITableFrame$12 = -60					; size = 4
_i$13 = -56						; size = 2
_pICurrTableFrame$14 = -52				; size = 4
_wDistributeCount$15 = -48				; size = 2
_wChairCount$16 = -44					; size = 2
_wRandCount$17 = -40					; size = 2
_DistributeInfoArray$18 = -36				; size = 20
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?PerformDistribute@CLockTimeMatch@@IAE_NXZ PROC		; CLockTimeMatch::PerformDistribute, COMDAT
; _this$ = ecx

; 2008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PerformDistribute@CLockTimeMatch@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2009 : 	//状态判断
; 2010 : 	if (m_MatchStatus!=MatchStatus_Playing) return true;

  0002e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00031	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00035	83 f9 02	 cmp	 ecx, 2
  00038	74 07		 je	 SHORT $LN16@PerformDis
  0003a	b0 01		 mov	 al, 1
  0003c	e9 d7 03 00 00	 jmp	 $LN1@PerformDis
$LN16@PerformDis:

; 2011 : 
; 2012 : 	//人数校验
; 2013 : 	if (m_DistributeManage.GetCount()<m_pMatchOption->wMinDistributeUser) return false;

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 18	 add	 ecx, 24			; 00000018H
  00047	e8 00 00 00 00	 call	 ?GetCount@CDistributeManager@@QAEGXZ ; CDistributeManager::GetCount
  0004c	0f b7 c0	 movzx	 eax, ax
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00055	0f b7 4a 76	 movzx	 ecx, WORD PTR [edx+118]
  00059	3b c1		 cmp	 eax, ecx
  0005b	7d 07		 jge	 SHORT $LN2@PerformDis
  0005d	32 c0		 xor	 al, al
  0005f	e9 b4 03 00 00	 jmp	 $LN1@PerformDis
$LN2@PerformDis:

; 2014 : 
; 2015 : 	//分配用户
; 2016 : 	while(true)

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 a5 03 00
	00		 je	 $LN3@PerformDis

; 2017 : 	{
; 2018 : 		//变量定义
; 2019 : 		CDistributeInfoArray DistributeInfoArray;

  00071	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  00074	e8 00 00 00 00	 call	 ??0?$CWHArray@UtagDistributeInfo@@ABU1@@@QAE@XZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::CWHArray<tagDistributeInfo,tagDistributeInfo const &>
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2020 : 
; 2021 :         //获取用户
; 2022 : 		WORD wRandCount = __max(m_pMatchOption->wMaxPartakeGameUser-m_pMatchOption->wMinPartakeGameUser+1,1);

  00080	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00086	0f b7 51 7c	 movzx	 edx, WORD PTR [ecx+124]
  0008a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00090	0f b7 41 7a	 movzx	 eax, WORD PTR [ecx+122]
  00094	2b d0		 sub	 edx, eax
  00096	83 c2 01	 add	 edx, 1
  00099	83 fa 01	 cmp	 edx, 1
  0009c	7e 21		 jle	 SHORT $LN30@PerformDis
  0009e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  000a4	0f b7 42 7c	 movzx	 eax, WORD PTR [edx+124]
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  000ae	0f b7 4a 7a	 movzx	 ecx, WORD PTR [edx+122]
  000b2	2b c1		 sub	 eax, ecx
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000bd	eb 0a		 jmp	 SHORT $LN31@PerformDis
$LN30@PerformDis:
  000bf	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv128[ebp], 1
$LN31@PerformDis:
  000c9	66 8b 95 58 ff
	ff ff		 mov	 dx, WORD PTR tv128[ebp]
  000d0	66 89 55 d8	 mov	 WORD PTR _wRandCount$17[ebp], dx

; 2023 : 		WORD wChairCount = m_pMatchOption->wMinPartakeGameUser+rand()%wRandCount;

  000d4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000da	0f b7 71 7a	 movzx	 esi, WORD PTR [ecx+122]
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  000e4	0f b7 4d d8	 movzx	 ecx, WORD PTR _wRandCount$17[ebp]
  000e8	99		 cdq
  000e9	f7 f9		 idiv	 ecx
  000eb	03 f2		 add	 esi, edx
  000ed	66 89 75 d4	 mov	 WORD PTR _wChairCount$16[ebp], si

; 2024 : 		WORD wDistributeCount = m_DistributeManage.PerformDistribute(DistributeInfoArray,wChairCount);

  000f1	0f b7 45 d4	 movzx	 eax, WORD PTR _wChairCount$16[ebp]
  000f5	50		 push	 eax
  000f6	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  000f9	51		 push	 ecx
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	83 c1 18	 add	 ecx, 24			; 00000018H
  00100	e8 00 00 00 00	 call	 ?PerformDistribute@CDistributeManager@@QAEGAAV?$CWHArray@UtagDistributeInfo@@ABU1@@@G@Z ; CDistributeManager::PerformDistribute
  00105	66 89 45 d0	 mov	 WORD PTR _wDistributeCount$15[ebp], ax

; 2025 : 		if (wDistributeCount < wChairCount) break;

  00109	0f b7 45 d0	 movzx	 eax, WORD PTR _wDistributeCount$15[ebp]
  0010d	0f b7 4d d4	 movzx	 ecx, WORD PTR _wChairCount$16[ebp]
  00111	3b c1		 cmp	 eax, ecx
  00113	7d 14		 jge	 SHORT $LN18@PerformDis
  00115	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011c	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  0011f	e8 00 00 00 00	 call	 ??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>
  00124	e9 ed 02 00 00	 jmp	 $LN3@PerformDis
$LN18@PerformDis:

; 2026 : 
; 2027 : 		//寻找位置
; 2028 : 		ITableFrame * pICurrTableFrame=NULL;

  00129	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _pICurrTableFrame$14[ebp], 0

; 2029 : 		for (WORD i=0;i<m_pGameServiceOption->wTableCount;i++)

  00130	33 c0		 xor	 eax, eax
  00132	66 89 45 c8	 mov	 WORD PTR _i$13[ebp], ax
  00136	eb 0c		 jmp	 SHORT $LN6@PerformDis
$LN4@PerformDis:
  00138	66 8b 45 c8	 mov	 ax, WORD PTR _i$13[ebp]
  0013c	66 83 c0 01	 add	 ax, 1
  00140	66 89 45 c8	 mov	 WORD PTR _i$13[ebp], ax
$LN6@PerformDis:
  00144	0f b7 45 c8	 movzx	 eax, WORD PTR _i$13[ebp]
  00148	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  0014e	0f b7 4a 46	 movzx	 ecx, WORD PTR [edx+70]
  00152	3b c1		 cmp	 eax, ecx
  00154	7d 6f		 jge	 SHORT $LN5@PerformDis

; 2030 : 		{
; 2031 : 			//获取对象
; 2032 : 			ASSERT(m_ppITableFrame[i]!=NULL);

  00156	0f b7 45 c8	 movzx	 eax, WORD PTR _i$13[ebp]
  0015a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00163	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00167	75 18		 jne	 SHORT $LN32@PerformDis
  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??PerformDistribute@CLockTimeMatch@@IAE_NXZ@4JA
  0016e	83 c0 18	 add	 eax, 24			; 00000018H
  00171	50		 push	 eax
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00177	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0017c	85 c0		 test	 eax, eax
  0017e	74 01		 je	 SHORT $LN32@PerformDis
  00180	cc		 int	 3
$LN32@PerformDis:

; 2033 : 			ITableFrame * pITableFrame=m_ppITableFrame[i];

  00181	0f b7 45 c8	 movzx	 eax, WORD PTR _i$13[ebp]
  00185	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0018e	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00191	89 45 c4	 mov	 DWORD PTR _pITableFrame$12[ebp], eax

; 2034 : 
; 2035 : 			//状态判断
; 2036 : 			if (pITableFrame->GetNullChairCount()==pITableFrame->GetChairCount())

  00194	8b 45 c4	 mov	 eax, DWORD PTR _pITableFrame$12[ebp]
  00197	8b 10		 mov	 edx, DWORD PTR [eax]
  00199	8b 4d c4	 mov	 ecx, DWORD PTR _pITableFrame$12[ebp]
  0019c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0019f	ff d0		 call	 eax
  001a1	0f b7 f0	 movzx	 esi, ax
  001a4	8b 4d c4	 mov	 ecx, DWORD PTR _pITableFrame$12[ebp]
  001a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a9	8b 4d c4	 mov	 ecx, DWORD PTR _pITableFrame$12[ebp]
  001ac	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001af	ff d0		 call	 eax
  001b1	0f b7 c8	 movzx	 ecx, ax
  001b4	3b f1		 cmp	 esi, ecx
  001b6	75 08		 jne	 SHORT $LN19@PerformDis

; 2037 : 			{
; 2038 : 				pICurrTableFrame=pITableFrame;

  001b8	8b 45 c4	 mov	 eax, DWORD PTR _pITableFrame$12[ebp]
  001bb	89 45 cc	 mov	 DWORD PTR _pICurrTableFrame$14[ebp], eax

; 2039 : 				break;

  001be	eb 05		 jmp	 SHORT $LN5@PerformDis
$LN19@PerformDis:

; 2040 : 			}
; 2041 : 		}

  001c0	e9 73 ff ff ff	 jmp	 $LN4@PerformDis
$LN5@PerformDis:

; 2042 : 
; 2043 : 		//桌子判断
; 2044 : 		if (pICurrTableFrame==NULL) break;

  001c5	83 7d cc 00	 cmp	 DWORD PTR _pICurrTableFrame$14[ebp], 0
  001c9	75 14		 jne	 SHORT $LN20@PerformDis
  001cb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d2	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  001d5	e8 00 00 00 00	 call	 ??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>
  001da	e9 37 02 00 00	 jmp	 $LN3@PerformDis
$LN20@PerformDis:

; 2045 : 
; 2046 : 		//玩家坐下
; 2047 : 		bool bSitSuccess=true;

  001df	c6 45 c3 01	 mov	 BYTE PTR _bSitSuccess$11[ebp], 1

; 2048 : 		INT_PTR nSitFailedIndex=INVALID_CHAIR;

  001e3	c7 45 bc ff ff
	00 00		 mov	 DWORD PTR _nSitFailedIndex$10[ebp], 65535 ; 0000ffffH

; 2049 : 		for (INT_PTR nIndex=0;nIndex<DistributeInfoArray.GetCount();nIndex++)

  001ea	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _nIndex$9[ebp], 0
  001f1	eb 09		 jmp	 SHORT $LN9@PerformDis
$LN7@PerformDis:
  001f3	8b 45 b8	 mov	 eax, DWORD PTR _nIndex$9[ebp]
  001f6	83 c0 01	 add	 eax, 1
  001f9	89 45 b8	 mov	 DWORD PTR _nIndex$9[ebp], eax
$LN9@PerformDis:
  001fc	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  001ff	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  00204	39 45 b8	 cmp	 DWORD PTR _nIndex$9[ebp], eax
  00207	0f 8d 02 01 00
	00		 jge	 $LN8@PerformDis

; 2050 : 		{
; 2051 : 			//变量定义
; 2052 : 			WORD wChairID=INVALID_CHAIR;

  0020d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00212	66 89 45 b4	 mov	 WORD PTR _wChairID$8[ebp], ax

; 2053 : 
; 2054 : 			//椅子搜索
; 2055 : 			for (WORD i=0;i<pICurrTableFrame->GetChairCount();i++)

  00216	33 c0		 xor	 eax, eax
  00218	66 89 45 b0	 mov	 WORD PTR _i$7[ebp], ax
  0021c	eb 0c		 jmp	 SHORT $LN12@PerformDis
$LN10@PerformDis:
  0021e	66 8b 45 b0	 mov	 ax, WORD PTR _i$7[ebp]
  00222	66 83 c0 01	 add	 ax, 1
  00226	66 89 45 b0	 mov	 WORD PTR _i$7[ebp], ax
$LN12@PerformDis:
  0022a	0f b7 75 b0	 movzx	 esi, WORD PTR _i$7[ebp]
  0022e	8b 45 cc	 mov	 eax, DWORD PTR _pICurrTableFrame$14[ebp]
  00231	8b 10		 mov	 edx, DWORD PTR [eax]
  00233	8b 4d cc	 mov	 ecx, DWORD PTR _pICurrTableFrame$14[ebp]
  00236	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00239	ff d0		 call	 eax
  0023b	0f b7 c8	 movzx	 ecx, ax
  0023e	3b f1		 cmp	 esi, ecx
  00240	7d 25		 jge	 SHORT $LN11@PerformDis

; 2056 : 			{
; 2057 : 				if (pICurrTableFrame->GetTableUserItem(i)==NULL)

  00242	0f b7 45 b0	 movzx	 eax, WORD PTR _i$7[ebp]
  00246	50		 push	 eax
  00247	8b 4d cc	 mov	 ecx, DWORD PTR _pICurrTableFrame$14[ebp]
  0024a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024c	8b 4d cc	 mov	 ecx, DWORD PTR _pICurrTableFrame$14[ebp]
  0024f	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00255	ff d0		 call	 eax
  00257	85 c0		 test	 eax, eax
  00259	75 0a		 jne	 SHORT $LN21@PerformDis

; 2058 : 				{
; 2059 : 					wChairID = i;

  0025b	66 8b 45 b0	 mov	 ax, WORD PTR _i$7[ebp]
  0025f	66 89 45 b4	 mov	 WORD PTR _wChairID$8[ebp], ax

; 2060 : 					break;

  00263	eb 02		 jmp	 SHORT $LN11@PerformDis
$LN21@PerformDis:

; 2061 : 				}
; 2062 : 			}

  00265	eb b7		 jmp	 SHORT $LN10@PerformDis
$LN11@PerformDis:

; 2063 : 
; 2064 : 			//分配用户
; 2065 : 			if (wChairID!=INVALID_CHAIR)

  00267	0f b7 45 b4	 movzx	 eax, WORD PTR _wChairID$8[ebp]
  0026b	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00270	0f 84 94 00 00
	00		 je	 $LN22@PerformDis

; 2066 : 			{
; 2067 : 				//获取用户
; 2068 : 				IServerUserItem * pIServerUserItem=DistributeInfoArray[nIndex].pIServerUserItem;

  00276	8b 45 b8	 mov	 eax, DWORD PTR _nIndex$9[ebp]
  00279	50		 push	 eax
  0027a	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  0027d	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  00282	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00285	89 4d ac	 mov	 DWORD PTR _pIServerUserItem$6[ebp], ecx

; 2069 : 
; 2070 : 				//用户起立
; 2071 : 				if (pIServerUserItem->GetTableID()!=INVALID_TABLE)

  00288	8b 45 ac	 mov	 eax, DWORD PTR _pIServerUserItem$6[ebp]
  0028b	8b 10		 mov	 edx, DWORD PTR [eax]
  0028d	8b 4d ac	 mov	 ecx, DWORD PTR _pIServerUserItem$6[ebp]
  00290	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00293	ff d0		 call	 eax
  00295	0f b7 c8	 movzx	 ecx, ax
  00298	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0029e	74 3a		 je	 SHORT $LN23@PerformDis

; 2072 : 				{
; 2073 : 					WORD wTableID=pIServerUserItem->GetTableID();

  002a0	8b 45 ac	 mov	 eax, DWORD PTR _pIServerUserItem$6[ebp]
  002a3	8b 10		 mov	 edx, DWORD PTR [eax]
  002a5	8b 4d ac	 mov	 ecx, DWORD PTR _pIServerUserItem$6[ebp]
  002a8	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  002ab	ff d0		 call	 eax
  002ad	66 89 45 a8	 mov	 WORD PTR _wTableID$5[ebp], ax

; 2074 : 					ITableFrame * pITableFrame = m_ppITableFrame[wTableID];

  002b1	0f b7 45 a8	 movzx	 eax, WORD PTR _wTableID$5[ebp]
  002b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002b8	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  002be	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  002c1	89 45 a4	 mov	 DWORD PTR _pITableFrame$4[ebp], eax

; 2075 : 					pITableFrame->PerformStandUpAction(pIServerUserItem);

  002c4	6a 00		 push	 0
  002c6	8b 45 ac	 mov	 eax, DWORD PTR _pIServerUserItem$6[ebp]
  002c9	50		 push	 eax
  002ca	8b 4d a4	 mov	 ecx, DWORD PTR _pITableFrame$4[ebp]
  002cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  002cf	8b 4d a4	 mov	 ecx, DWORD PTR _pITableFrame$4[ebp]
  002d2	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  002d8	ff d0		 call	 eax
$LN23@PerformDis:

; 2076 : 				}
; 2077 : 
; 2078 : 				//用户坐下
; 2079 : 				if(pICurrTableFrame->PerformSitDownAction(wChairID,pIServerUserItem)==false)

  002da	6a 00		 push	 0
  002dc	6a 00		 push	 0
  002de	8b 45 ac	 mov	 eax, DWORD PTR _pIServerUserItem$6[ebp]
  002e1	50		 push	 eax
  002e2	0f b7 4d b4	 movzx	 ecx, WORD PTR _wChairID$8[ebp]
  002e6	51		 push	 ecx
  002e7	8b 55 cc	 mov	 edx, DWORD PTR _pICurrTableFrame$14[ebp]
  002ea	8b 02		 mov	 eax, DWORD PTR [edx]
  002ec	8b 4d cc	 mov	 ecx, DWORD PTR _pICurrTableFrame$14[ebp]
  002ef	8b 90 e0 00 00
	00		 mov	 edx, DWORD PTR [eax+224]
  002f5	ff d2		 call	 edx
  002f7	0f b6 c0	 movzx	 eax, al
  002fa	85 c0		 test	 eax, eax
  002fc	75 0c		 jne	 SHORT $LN22@PerformDis

; 2080 : 				{
; 2081 : 					bSitSuccess=false;

  002fe	c6 45 c3 00	 mov	 BYTE PTR _bSitSuccess$11[ebp], 0

; 2082 : 					nSitFailedIndex=nIndex;

  00302	8b 45 b8	 mov	 eax, DWORD PTR _nIndex$9[ebp]
  00305	89 45 bc	 mov	 DWORD PTR _nSitFailedIndex$10[ebp], eax

; 2083 : 					break;

  00308	eb 05		 jmp	 SHORT $LN8@PerformDis
$LN22@PerformDis:

; 2084 : 				}
; 2085 : 			}
; 2086 : 		}

  0030a	e9 e4 fe ff ff	 jmp	 $LN7@PerformDis
$LN8@PerformDis:

; 2087 : 
; 2088 : 		//坐下结果
; 2089 : 		for (INT_PTR nIndex=0;nIndex<DistributeInfoArray.GetCount();nIndex++)

  0030f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _nIndex$3[ebp], 0
  00316	eb 09		 jmp	 SHORT $LN15@PerformDis
$LN13@PerformDis:
  00318	8b 45 a0	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  0031b	83 c0 01	 add	 eax, 1
  0031e	89 45 a0	 mov	 DWORD PTR _nIndex$3[ebp], eax
$LN15@PerformDis:
  00321	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  00324	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagDistributeInfo@@ABU1@@@QBEHXZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::GetCount
  00329	39 45 a0	 cmp	 DWORD PTR _nIndex$3[ebp], eax
  0032c	0f 8d d0 00 00
	00		 jge	 $LN14@PerformDis

; 2090 : 		{
; 2091 : 			if (bSitSuccess==true || nSitFailedIndex==nIndex)

  00332	0f b6 45 c3	 movzx	 eax, BYTE PTR _bSitSuccess$11[ebp]
  00336	83 f8 01	 cmp	 eax, 1
  00339	74 08		 je	 SHORT $LN27@PerformDis
  0033b	8b 45 bc	 mov	 eax, DWORD PTR _nSitFailedIndex$10[ebp]
  0033e	3b 45 a0	 cmp	 eax, DWORD PTR _nIndex$3[ebp]
  00341	75 20		 jne	 SHORT $LN25@PerformDis
$LN27@PerformDis:

; 2092 : 			{
; 2093 : 				m_DistributeManage.RemoveDistributeNode((tagDistributeNode *)DistributeInfoArray[nIndex].pPertainNode);

  00343	8b 45 a0	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  00346	50		 push	 eax
  00347	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  0034a	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  0034f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00352	51		 push	 ecx
  00353	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00356	83 c1 18	 add	 ecx, 24			; 00000018H
  00359	e8 00 00 00 00	 call	 ?RemoveDistributeNode@CDistributeManager@@QAEXPAUtagDistributeNode@@@Z ; CDistributeManager::RemoveDistributeNode

; 2094 : 			}
; 2095 : 			else

  0035e	e9 9a 00 00 00	 jmp	 $LN26@PerformDis
$LN25@PerformDis:

; 2096 : 			{
; 2097 : 				//用户起立
; 2098 : 				if (DistributeInfoArray[nIndex].pIServerUserItem->GetTableID()!=INVALID_TABLE)

  00363	8b 45 a0	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  00366	50		 push	 eax
  00367	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  0036a	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  0036f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00372	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv252[ebp], ecx
  00378	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv252[ebp]
  0037e	8b 02		 mov	 eax, DWORD PTR [edx]
  00380	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv252[ebp]
  00386	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
  00389	ff d2		 call	 edx
  0038b	0f b7 c0	 movzx	 eax, ax
  0038e	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00393	74 68		 je	 SHORT $LN26@PerformDis

; 2099 : 				{
; 2100 : 					WORD wTableID=DistributeInfoArray[nIndex].pIServerUserItem->GetTableID();

  00395	8b 45 a0	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  00398	50		 push	 eax
  00399	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  0039c	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  003a1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003a4	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv264[ebp], ecx
  003aa	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv264[ebp]
  003b0	8b 02		 mov	 eax, DWORD PTR [edx]
  003b2	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv264[ebp]
  003b8	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
  003bb	ff d2		 call	 edx
  003bd	66 89 45 9c	 mov	 WORD PTR _wTableID$2[ebp], ax

; 2101 : 					m_ppITableFrame[wTableID]->PerformStandUpAction(DistributeInfoArray[nIndex].pIServerUserItem);

  003c1	6a 00		 push	 0
  003c3	8b 45 a0	 mov	 eax, DWORD PTR _nIndex$3[ebp]
  003c6	50		 push	 eax
  003c7	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  003ca	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagDistributeInfo@@ABU1@@@QAEAAUtagDistributeInfo@@H@Z ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::operator[]
  003cf	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  003d2	51		 push	 ecx
  003d3	0f b7 55 9c	 movzx	 edx, WORD PTR _wTableID$2[ebp]
  003d7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  003da	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  003e0	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  003e3	0f b7 45 9c	 movzx	 eax, WORD PTR _wTableID$2[ebp]
  003e7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003ea	8b 89 84 00 00
	00		 mov	 ecx, DWORD PTR [ecx+132]
  003f0	8b 12		 mov	 edx, DWORD PTR [edx]
  003f2	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  003f5	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  003fb	ff d0		 call	 eax
$LN26@PerformDis:

; 2102 : 				}
; 2103 : 			}
; 2104 : 		}			

  003fd	e9 16 ff ff ff	 jmp	 $LN13@PerformDis
$LN14@PerformDis:

; 2105 : 	}

  00402	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00409	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  0040c	e8 00 00 00 00	 call	 ??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>
  00411	e9 4e fc ff ff	 jmp	 $LN2@PerformDis
$LN3@PerformDis:

; 2106 : 
; 2107 : 	return true;

  00416	b0 01		 mov	 al, 1
$LN1@PerformDis:

; 2108 : }

  00418	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0041b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00422	59		 pop	 ecx
  00423	5f		 pop	 edi
  00424	5e		 pop	 esi
  00425	5b		 pop	 ebx
  00426	8b e5		 mov	 esp, ebp
  00428	5d		 pop	 ebp
  00429	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PerformDistribute@CLockTimeMatch@@IAE_NXZ$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _DistributeInfoArray$18[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CWHArray@UtagDistributeInfo@@ABU1@@@UAE@XZ ; CWHArray<tagDistributeInfo,tagDistributeInfo const &>::~CWHArray<tagDistributeInfo,tagDistributeInfo const &>
__ehhandler$?PerformDistribute@CLockTimeMatch@@IAE_NXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 54 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-172]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PerformDistribute@CLockTimeMatch@@IAE_NXZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PerformDistribute@CLockTimeMatch@@IAE_NXZ ENDP		; CLockTimeMatch::PerformDistribute
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?CalcMatchNo@CLockTimeMatch@@IAE_JXZ
_TEXT	SEGMENT
_TimeSpan$1 = -48					; size = 8
_MatchStartTime$2 = -40					; size = 8
_CurTime$3 = -32					; size = 8
_SystemStartTime$4 = -24				; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?CalcMatchNo@CLockTimeMatch@@IAE_JXZ PROC		; CLockTimeMatch::CalcMatchNo, COMDAT
; _this$ = ecx

; 1980 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1981 : 	//循环开赛
; 1982 : 	if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_ROUND)

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001c	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  00020	83 fa 01	 cmp	 edx, 1
  00023	75 73		 jne	 SHORT $LN2@CalcMatchN

; 1983 : 	{
; 1984 : 		//变量定义
; 1985 : 		SYSTEMTIME SystemStartTime=m_pLockTimeMatch->MatchStartTime;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0002b	83 c1 04	 add	 ecx, 4
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 55 e8	 mov	 DWORD PTR _SystemStartTime$4[ebp], edx
  00033	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00036	89 45 ec	 mov	 DWORD PTR _SystemStartTime$4[ebp+4], eax
  00039	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003c	89 55 f0	 mov	 DWORD PTR _SystemStartTime$4[ebp+8], edx
  0003f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00042	89 45 f4	 mov	 DWORD PTR _SystemStartTime$4[ebp+12], eax

; 1986 : 
; 1987 : 		//设置变量
; 1988 : 		SystemStartTime.wHour=0;

  00045	33 c0		 xor	 eax, eax
  00047	66 89 45 f0	 mov	 WORD PTR _SystemStartTime$4[ebp+8], ax

; 1989 : 		SystemStartTime.wMinute=0;

  0004b	33 c0		 xor	 eax, eax
  0004d	66 89 45 f2	 mov	 WORD PTR _SystemStartTime$4[ebp+10], ax

; 1990 : 		SystemStartTime.wSecond=0;

  00051	33 c0		 xor	 eax, eax
  00053	66 89 45 f4	 mov	 WORD PTR _SystemStartTime$4[ebp+12], ax

; 1991 : 		SystemStartTime.wMilliseconds=0;

  00057	33 c0		 xor	 eax, eax
  00059	66 89 45 f6	 mov	 WORD PTR _SystemStartTime$4[ebp+14], ax

; 1992 : 
; 1993 : 		//获取时间
; 1994 : 		CTime CurTime=CTime::GetCurrentTime();

  0005d	8d 45 e0	 lea	 eax, DWORD PTR _CurTime$3[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 1995 : 		CTime MatchStartTime(SystemStartTime);

  00066	6a ff		 push	 -1
  00068	8d 45 e8	 lea	 eax, DWORD PTR _SystemStartTime$4[ebp]
  0006b	50		 push	 eax
  0006c	8d 4d d8	 lea	 ecx, DWORD PTR _MatchStartTime$2[ebp]
  0006f	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 1996 : 
; 1997 : 		//变量定义
; 1998 : 		CTimeSpan TimeSpan=CurTime-MatchStartTime;

  00074	8b 45 dc	 mov	 eax, DWORD PTR _MatchStartTime$2[ebp+4]
  00077	50		 push	 eax
  00078	8b 4d d8	 mov	 ecx, DWORD PTR _MatchStartTime$2[ebp]
  0007b	51		 push	 ecx
  0007c	8d 55 d0	 lea	 edx, DWORD PTR _TimeSpan$1[ebp]
  0007f	52		 push	 edx
  00080	8d 4d e0	 lea	 ecx, DWORD PTR _CurTime$3[ebp]
  00083	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-

; 1999 : 
; 2000 : 		return TimeSpan.GetDays()+1;

  00088	8d 4d d0	 lea	 ecx, DWORD PTR _TimeSpan$1[ebp]
  0008b	e8 00 00 00 00	 call	 ?GetDays@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetDays
  00090	83 c0 01	 add	 eax, 1
  00093	83 d2 00	 adc	 edx, 0
  00096	eb 07		 jmp	 SHORT $LN1@CalcMatchN
$LN2@CalcMatchN:

; 2001 : 	}
; 2002 : 
; 2003 : 	return 1;

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	33 d2		 xor	 edx, edx
$LN1@CalcMatchN:

; 2004 : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?CalcMatchNo@CLockTimeMatch@@IAE_JXZ ENDP		; CLockTimeMatch::CalcMatchNo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?VerifyMatchTime@CLockTimeMatch@@AAE_NPADGAAG@Z
_TEXT	SEGMENT
tv89 = -120						; size = 4
_nCurrSeconds$ = -52					; size = 4
_bMatchRound$ = -45					; size = 1
_SignupEndTime$ = -44					; size = 8
_SignupStartTime$ = -36					; size = 8
_MatchStartTime$ = -28					; size = 8
_MatchEndTime$ = -20					; size = 8
_CurTime$ = -12						; size = 8
_this$ = -4						; size = 4
_pszMessage$ = 8					; size = 4
_wMaxCount$ = 12					; size = 2
_wMessageType$ = 16					; size = 4
?VerifyMatchTime@CLockTimeMatch@@AAE_NPADGAAG@Z PROC	; CLockTimeMatch::VerifyMatchTime, COMDAT
; _this$ = ecx

; 2301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2302 : 	//变量定义
; 2303 : 	CTime CurTime=CTime::GetCurrentTime();

  0000c	8d 45 f4	 lea	 eax, DWORD PTR _CurTime$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 2304 : 	CTime MatchEndTime(m_pLockTimeMatch->MatchEndTime);

  00015	6a ff		 push	 -1
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001d	83 c1 14	 add	 ecx, 20			; 00000014H
  00020	51		 push	 ecx
  00021	8d 4d ec	 lea	 ecx, DWORD PTR _MatchEndTime$[ebp]
  00024	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 2305 : 	CTime MatchStartTime(m_pLockTimeMatch->MatchStartTime);

  00029	6a ff		 push	 -1
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00031	83 c1 04	 add	 ecx, 4
  00034	51		 push	 ecx
  00035	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 2306 : 	CTime SignupStartTime(m_pLockTimeMatch->SignupStartTime);	

  0003d	6a ff		 push	 -1
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00045	83 c1 29	 add	 ecx, 41			; 00000029H
  00048	51		 push	 ecx
  00049	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 2307 : 	CTime SignupEndTime(m_pLockTimeMatch->SignupEndTime);

  00051	6a ff		 push	 -1
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00059	83 c1 39	 add	 ecx, 57			; 00000039H
  0005c	51		 push	 ecx
  0005d	8d 4d d4	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  00060	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 2308 : 
; 2309 : 	//变量定义
; 2310 : 	bool bMatchRound=m_pLockTimeMatch->cbMatchMode==MATCH_MODE_ROUND;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0006b	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  0006f	83 fa 01	 cmp	 edx, 1
  00072	75 09		 jne	 SHORT $LN7@VerifyMatc
  00074	c7 45 88 01 00
	00 00		 mov	 DWORD PTR tv89[ebp], 1
  0007b	eb 07		 jmp	 SHORT $LN8@VerifyMatc
$LN7@VerifyMatc:
  0007d	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN8@VerifyMatc:
  00084	8a 45 88	 mov	 al, BYTE PTR tv89[ebp]
  00087	88 45 d3	 mov	 BYTE PTR _bMatchRound$[ebp], al

; 2311 : 	int nCurrSeconds=CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond();

  0008a	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0008d	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00092	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  00098	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0009b	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  000a0	6b c0 3c	 imul	 eax, eax, 60
  000a3	03 f0		 add	 esi, eax
  000a5	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  000a8	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  000ad	03 f0		 add	 esi, eax
  000af	89 75 cc	 mov	 DWORD PTR _nCurrSeconds$[ebp], esi

; 2312 : 
; 2313 : 	//设置类型
; 2314 : 	wMessageType=SMT_EJECT|SMT_CHAT;

  000b2	b8 03 00 00 00	 mov	 eax, 3
  000b7	8b 4d 10	 mov	 ecx, DWORD PTR _wMessageType$[ebp]
  000ba	66 89 01	 mov	 WORD PTR [ecx], ax

; 2315 : 
; 2316 : 	//比赛结束
; 2317 : 	if (CurTime>=MatchEndTime)

  000bd	8b 45 f0	 mov	 eax, DWORD PTR _MatchEndTime$[ebp+4]
  000c0	50		 push	 eax
  000c1	8b 4d ec	 mov	 ecx, DWORD PTR _MatchEndTime$[ebp]
  000c4	51		 push	 ecx
  000c5	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  000c8	e8 00 00 00 00	 call	 ??PCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>=
  000cd	0f b6 d0	 movzx	 edx, al
  000d0	85 d2		 test	 edx, edx
  000d2	74 34		 je	 SHORT $LN2@VerifyMatc

; 2318 : 	{
; 2319 : 		wMessageType |= SMT_CLOSE_ROOM|SMT_CLOSE_GAME;

  000d4	8b 45 10	 mov	 eax, DWORD PTR _wMessageType$[ebp]
  000d7	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000da	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  000e0	8b 55 10	 mov	 edx, DWORD PTR _wMessageType$[ebp]
  000e3	66 89 0a	 mov	 WORD PTR [edx], cx

; 2320 : 		_sntprintf_s(pszMessage, wMaxCount, wMaxCount, TEXT("比赛已经结束,请您移驾至其他比赛房间参与比赛吧！"));

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@MIICOPIN@?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H?$PM@
  000eb	0f b7 45 0c	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  000ef	50		 push	 eax
  000f0	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wMaxCount$[ebp]
  000f4	51		 push	 ecx
  000f5	8b 55 08	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 __snprintf_s
  000fe	83 c4 10	 add	 esp, 16			; 00000010H

; 2321 : 		return false;

  00101	32 c0		 xor	 al, al
  00103	e9 b4 01 00 00	 jmp	 $LN1@VerifyMatc
$LN2@VerifyMatc:

; 2322 : 	}
; 2323 : 
; 2324 : 	//比赛已结束
; 2325 : 	if (nCurrSeconds >= MatchEndTime.GetHour()*3600+MatchEndTime.GetMinute()*60+MatchEndTime.GetSecond())

  00108	8d 4d ec	 lea	 ecx, DWORD PTR _MatchEndTime$[ebp]
  0010b	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00110	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  00116	8d 4d ec	 lea	 ecx, DWORD PTR _MatchEndTime$[ebp]
  00119	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  0011e	6b c0 3c	 imul	 eax, eax, 60
  00121	03 f0		 add	 esi, eax
  00123	8d 4d ec	 lea	 ecx, DWORD PTR _MatchEndTime$[ebp]
  00126	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  0012b	03 f0		 add	 esi, eax
  0012d	39 75 cc	 cmp	 DWORD PTR _nCurrSeconds$[ebp], esi
  00130	7c 4f		 jl	 SHORT $LN3@VerifyMatc

; 2326 : 	{
; 2327 : 		wMessageType |= SMT_CLOSE_ROOM|SMT_CLOSE_GAME;

  00132	8b 45 10	 mov	 eax, DWORD PTR _wMessageType$[ebp]
  00135	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00138	81 c9 00 03 00
	00		 or	 ecx, 768		; 00000300H
  0013e	8b 55 10	 mov	 edx, DWORD PTR _wMessageType$[ebp]
  00141	66 89 0a	 mov	 WORD PTR [edx], cx

; 2328 : 		_sntprintf_s(pszMessage, wMaxCount, wMaxCount, TEXT("今天的比赛已经结束,请您于明天%d时%d分%d秒前来参加比赛！"), MatchStartTime.GetHour(), MatchStartTime.GetMinute(), MatchStartTime.GetSecond());

  00144	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$[ebp]
  00147	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  0014c	50		 push	 eax
  0014d	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$[ebp]
  00150	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00155	50		 push	 eax
  00156	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$[ebp]
  00159	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  0015e	50		 push	 eax
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@NBAMOMBH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?R?Q?$LO?$KN?$LN?a?J?x?0?G?k?D?z?S?Z?C?w?L?l?$CFd@
  00164	0f b7 45 0c	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  00168	50		 push	 eax
  00169	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wMaxCount$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 55 08	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  00171	52		 push	 edx
  00172	e8 00 00 00 00	 call	 __snprintf_s
  00177	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2329 : 		return false;

  0017a	32 c0		 xor	 al, al
  0017c	e9 3b 01 00 00	 jmp	 $LN1@VerifyMatc
$LN3@VerifyMatc:

; 2330 : 	}
; 2331 : 
; 2332 : 	//报名未开始
; 2333 : 	if (CurTime<SignupStartTime)

  00181	8b 45 e0	 mov	 eax, DWORD PTR _SignupStartTime$[ebp+4]
  00184	50		 push	 eax
  00185	8b 4d dc	 mov	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00188	51		 push	 ecx
  00189	8d 4d f4	 lea	 ecx, DWORD PTR _CurTime$[ebp]
  0018c	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  00191	0f b6 d0	 movzx	 edx, al
  00194	85 d2		 test	 edx, edx
  00196	0f 84 a0 00 00
	00		 je	 $LN4@VerifyMatc

; 2334 : 	{
; 2335 : 		wMessageType |= SMT_CLOSE_ROOM;

  0019c	8b 45 10	 mov	 eax, DWORD PTR _wMessageType$[ebp]
  0019f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001a2	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  001a8	8b 55 10	 mov	 edx, DWORD PTR _wMessageType$[ebp]
  001ab	66 89 0a	 mov	 WORD PTR [edx], cx

; 2336 : 		_sntprintf_s(pszMessage, wMaxCount, wMaxCount, TEXT("比赛报名尚未开始,本场比赛报名时段为：%d-%d-%d %d:%d:%d至%d-%d-%d %d:%d:%d"),

  001ae	8d 4d d4	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  001b1	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  001b6	50		 push	 eax
  001b7	8d 4d d4	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  001ba	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  001bf	50		 push	 eax
  001c0	8d 4d d4	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  001c3	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  001c8	50		 push	 eax
  001c9	8d 4d d4	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  001cc	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  001d1	50		 push	 eax
  001d2	8d 4d d4	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  001d5	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  001da	50		 push	 eax
  001db	8d 4d d4	 lea	 ecx, DWORD PTR _SignupEndTime$[ebp]
  001de	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  001e3	50		 push	 eax
  001e4	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  001e7	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  001ec	50		 push	 eax
  001ed	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  001f0	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  001f5	50		 push	 eax
  001f6	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  001f9	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  001fe	50		 push	 eax
  001ff	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00202	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  00207	50		 push	 eax
  00208	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  0020b	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  00210	50		 push	 eax
  00211	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00214	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  00219	50		 push	 eax
  0021a	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@KKHDFNFN@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LB?$KI?C?$PL?J?$LB@
  0021f	0f b7 45 0c	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  00223	50		 push	 eax
  00224	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wMaxCount$[ebp]
  00228	51		 push	 ecx
  00229	8b 55 08	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  0022c	52		 push	 edx
  0022d	e8 00 00 00 00	 call	 __snprintf_s
  00232	83 c4 40	 add	 esp, 64			; 00000040H

; 2337 : 			SignupStartTime.GetYear(),SignupStartTime.GetMonth(),SignupStartTime.GetDay(),SignupStartTime.GetHour(),SignupStartTime.GetMinute(),SignupStartTime.GetSecond(),
; 2338 : 			SignupEndTime.GetYear(),SignupEndTime.GetMonth(),SignupEndTime.GetDay(),SignupEndTime.GetHour(),SignupEndTime.GetMinute(),SignupEndTime.GetSecond());
; 2339 : 		return false;

  00235	32 c0		 xor	 al, al
  00237	e9 80 00 00 00	 jmp	 $LN1@VerifyMatc
$LN4@VerifyMatc:

; 2340 : 	}
; 2341 : 
; 2342 : 
; 2343 : 	//报名未开始
; 2344 : 	if (bMatchRound && nCurrSeconds<(SignupStartTime.GetHour()*3600+SignupStartTime.GetMinute()*60+SignupStartTime.GetSecond()))

  0023c	0f b6 45 d3	 movzx	 eax, BYTE PTR _bMatchRound$[ebp]
  00240	85 c0		 test	 eax, eax
  00242	74 76		 je	 SHORT $LN5@VerifyMatc
  00244	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00247	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  0024c	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  00252	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00255	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  0025a	6b c0 3c	 imul	 eax, eax, 60
  0025d	03 f0		 add	 esi, eax
  0025f	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00262	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  00267	03 f0		 add	 esi, eax
  00269	39 75 cc	 cmp	 DWORD PTR _nCurrSeconds$[ebp], esi
  0026c	7d 4c		 jge	 SHORT $LN5@VerifyMatc

; 2345 : 	{
; 2346 : 		wMessageType |= SMT_CLOSE_ROOM;

  0026e	8b 45 10	 mov	 eax, DWORD PTR _wMessageType$[ebp]
  00271	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00274	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  0027a	8b 55 10	 mov	 edx, DWORD PTR _wMessageType$[ebp]
  0027d	66 89 0a	 mov	 WORD PTR [edx], cx

; 2347 : 		_sntprintf_s(pszMessage, wMaxCount, wMaxCount, TEXT("比赛报名尚未开始,请您于今天%d时%d分%d秒前来报名参加比赛！"), SignupStartTime.GetHour(), SignupStartTime.GetMinute(), SignupStartTime.GetSecond());

  00280	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00283	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  00288	50		 push	 eax
  00289	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  0028c	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  00291	50		 push	 eax
  00292	8d 4d dc	 lea	 ecx, DWORD PTR _SignupStartTime$[ebp]
  00295	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  0029a	50		 push	 eax
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@LADIJLOB@?$LB?H?H?$PM?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?0?G?k?D?z?S?Z?$LN?q?L?l?$CFd?J?$LB@
  002a0	0f b7 45 0c	 movzx	 eax, WORD PTR _wMaxCount$[ebp]
  002a4	50		 push	 eax
  002a5	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wMaxCount$[ebp]
  002a9	51		 push	 ecx
  002aa	8b 55 08	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  002ad	52		 push	 edx
  002ae	e8 00 00 00 00	 call	 __snprintf_s
  002b3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2348 : 		return false;

  002b6	32 c0		 xor	 al, al
  002b8	eb 02		 jmp	 SHORT $LN1@VerifyMatc
$LN5@VerifyMatc:

; 2349 : 	}	
; 2350 : 
; 2351 : 	return true;

  002ba	b0 01		 mov	 al, 1
$LN1@VerifyMatc:

; 2352 : }

  002bc	5f		 pop	 edi
  002bd	5e		 pop	 esi
  002be	5b		 pop	 ebx
  002bf	8b e5		 mov	 esp, ebp
  002c1	5d		 pop	 ebp
  002c2	c2 0c 00	 ret	 12			; 0000000cH
?VerifyMatchTime@CLockTimeMatch@@AAE_NPADGAAG@Z ENDP	; CLockTimeMatch::VerifyMatchTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv283 = -216						; size = 4
tv280 = -212						; size = 8
tv267 = -208						; size = 4
_szMessage$ = -140					; size = 128
_wMessageType$ = -12					; size = 2
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
?VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::VerifyUserEnterMatch, COMDAT
; _this$ = ecx

; 1808 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1809 : 	ASSERT(pIServerUserItem!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN12@VerifyUser
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z@4JA
  00024	83 c0 01	 add	 eax, 1
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN12@VerifyUser
  00036	cc		 int	 3
$LN12@VerifyUser:

; 1810 : 	if (pIServerUserItem==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN2@VerifyUser
  0003d	32 c0		 xor	 al, al
  0003f	e9 81 02 00 00	 jmp	 $LN1@VerifyUser
$LN2@VerifyUser:

; 1811 : 
; 1812 : 	//机器不受限制
; 1813 : 	if (pIServerUserItem->IsAndroidUser()==true) return true;

  00044	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0004c	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00052	ff d0		 call	 eax
  00054	0f b6 c8	 movzx	 ecx, al
  00057	83 f9 01	 cmp	 ecx, 1
  0005a	75 07		 jne	 SHORT $LN3@VerifyUser
  0005c	b0 01		 mov	 al, 1
  0005e	e9 62 02 00 00	 jmp	 $LN1@VerifyUser
$LN3@VerifyUser:

; 1814 : 
; 1815 : 	//变量定义
; 1816 : 	WORD wMessageType;
; 1817 : 	TCHAR szMessage[128]=TEXT("");

  00063	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00068	88 85 74 ff ff
	ff		 mov	 BYTE PTR _szMessage$[ebp], al
  0006e	6a 7f		 push	 127			; 0000007fH
  00070	6a 00		 push	 0
  00072	8d 85 75 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp+1]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _memset
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1818 : 
; 1819 : 	//校验时间
; 1820 : 	if (VerifyMatchTime(szMessage,CountArray(szMessage),wMessageType)==false)

  00081	8d 45 f4	 lea	 eax, DWORD PTR _wMessageType$[ebp]
  00084	50		 push	 eax
  00085	68 80 00 00 00	 push	 128			; 00000080H
  0008a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _szMessage$[ebp]
  00090	51		 push	 ecx
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?VerifyMatchTime@CLockTimeMatch@@AAE_NPADGAAG@Z ; CLockTimeMatch::VerifyMatchTime
  00099	0f b6 d0	 movzx	 edx, al
  0009c	85 d2		 test	 edx, edx
  0009e	75 30		 jne	 SHORT $LN4@VerifyUser

; 1821 : 	{
; 1822 : 		//发送消息
; 1823 : 		m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,szMessage,wMessageType);

  000a0	0f b7 45 f4	 movzx	 eax, WORD PTR _wMessageType$[ebp]
  000a4	50		 push	 eax
  000a5	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _szMessage$[ebp]
  000ab	51		 push	 ecx
  000ac	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  000af	52		 push	 edx
  000b0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000b9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000be	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  000c4	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000c7	ff d2		 call	 edx

; 1824 : 
; 1825 : 		return false;

  000c9	32 c0		 xor	 al, al
  000cb	e9 f5 01 00 00	 jmp	 $LN1@VerifyUser
$LN4@VerifyUser:

; 1826 : 	}
; 1827 : 
; 1828 : 	//淘汰判断
; 1829 : 	if (m_pLockTimeMatch->lMatchCullScore>0 && pIServerUserItem->GetUserScore()<m_pLockTimeMatch->lMatchCullScore)

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000d6	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv267[ebp], ecx
  000dc	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv267[ebp]
  000e2	83 7a 55 00	 cmp	 DWORD PTR [edx+85], 0
  000e6	0f 8c fd 00 00
	00		 jl	 $LN5@VerifyUser
  000ec	7f 10		 jg	 SHORT $LN13@VerifyUser
  000ee	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv267[ebp]
  000f4	83 78 51 00	 cmp	 DWORD PTR [eax+81], 0
  000f8	0f 86 eb 00 00
	00		 jbe	 $LN5@VerifyUser
$LN13@VerifyUser:
  000fe	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00101	8b 10		 mov	 edx, DWORD PTR [eax]
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00106	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  0010c	ff d0		 call	 eax
  0010e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	8b 49 78	 mov	 ecx, DWORD PTR [ecx+120]
  00114	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  0011a	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv280[ebp+4], edx
  00120	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv283[ebp], ecx
  00126	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR tv283[ebp]
  0012c	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv280[ebp+4]
  00132	3b 42 55	 cmp	 eax, DWORD PTR [edx+85]
  00135	0f 8f ae 00 00
	00		 jg	 $LN5@VerifyUser
  0013b	7c 15		 jl	 SHORT $LN14@VerifyUser
  0013d	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv283[ebp]
  00143	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR tv280[ebp]
  00149	3b 51 51	 cmp	 edx, DWORD PTR [ecx+81]
  0014c	0f 83 97 00 00
	00		 jae	 $LN5@VerifyUser
$LN14@VerifyUser:

; 1830 : 	{
; 1831 : 		_sntprintf_s(szMessage,CountArray(szMessage),TEXT("由于您的比赛币低于 %d，您将不能继续游戏！"),m_pLockTimeMatch->lMatchCullScore);

  00152	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00155	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00158	8b 51 55	 mov	 edx, DWORD PTR [ecx+85]
  0015b	52		 push	 edx
  0015c	8b 41 51	 mov	 eax, DWORD PTR [ecx+81]
  0015f	50		 push	 eax
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MEIIMJBH@?S?I?S?Z?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM@
  00165	68 80 00 00 00	 push	 128			; 00000080H
  0016a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _szMessage$[ebp]
  00170	51		 push	 ecx
  00171	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00176	83 c4 14	 add	 esp, 20			; 00000014H

; 1832 : 
; 1833 : 		//发送消息
; 1834 : 		if(pIServerUserItem->GetTableID()==INVALID_TABLE)

  00179	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0017c	8b 10		 mov	 edx, DWORD PTR [eax]
  0017e	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00181	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00184	ff d0		 call	 eax
  00186	0f b7 c8	 movzx	 ecx, ax
  00189	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0018f	75 28		 jne	 SHORT $LN6@VerifyUser

; 1835 : 		{
; 1836 : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,szMessage,SMT_EJECT|SMT_CHAT);

  00191	6a 03		 push	 3
  00193	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  00199	50		 push	 eax
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0019d	51		 push	 ecx
  0019e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001a1	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	8b 10		 mov	 edx, DWORD PTR [eax]
  001ac	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  001b2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001b5	ff d0		 call	 eax

; 1837 : 		}
; 1838 : 		else

  001b7	eb 29		 jmp	 SHORT $LN7@VerifyUser
$LN6@VerifyUser:

; 1839 : 		{
; 1840 : 			m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_EJECT|SMT_CHAT|SMT_CLOSE_GAME);

  001b9	68 03 02 00 00	 push	 515			; 00000203H
  001be	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  001c4	50		 push	 eax
  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001c8	51		 push	 ecx
  001c9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001cc	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d5	8b 10		 mov	 edx, DWORD PTR [eax]
  001d7	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  001dd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001e0	ff d0		 call	 eax
$LN7@VerifyUser:

; 1841 : 		}
; 1842 : 
; 1843 : 		return false;

  001e2	32 c0		 xor	 al, al
  001e4	e9 dc 00 00 00	 jmp	 $LN1@VerifyUser
$LN5@VerifyUser:

; 1844 : 	}
; 1845 : 
; 1846 : 	//最大局数
; 1847 : 	if (m_pLockTimeMatch->wMaxPlayCount>0 && (pIServerUserItem->GetUserPlayCount()-pIServerUserItem->GetUserInfo()->dwDrawCount)==m_pLockTimeMatch->wMaxPlayCount)

  001e9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001ec	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  001ef	0f b7 51 5b	 movzx	 edx, WORD PTR [ecx+91]
  001f3	85 d2		 test	 edx, edx
  001f5	0f 8e c8 00 00
	00		 jle	 $LN8@VerifyUser
  001fb	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001fe	8b 10		 mov	 edx, DWORD PTR [eax]
  00200	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00203	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  00209	ff d0		 call	 eax
  0020b	8b f0		 mov	 esi, eax
  0020d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00210	8b 11		 mov	 edx, DWORD PTR [ecx]
  00212	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00215	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00218	ff d0		 call	 eax
  0021a	2b b0 e0 00 00
	00		 sub	 esi, DWORD PTR [eax+224]
  00220	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00223	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00226	0f b7 42 5b	 movzx	 eax, WORD PTR [edx+91]
  0022a	3b f0		 cmp	 esi, eax
  0022c	0f 85 91 00 00
	00		 jne	 $LN8@VerifyUser

; 1848 : 	{
; 1849 : 		_sntprintf_s(szMessage,CountArray(szMessage),TEXT("您已完成 %d 局比赛，您将不能继续游戏，请等待比赛结束来查看排名！"),m_pLockTimeMatch->wMaxPlayCount);

  00232	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00235	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00238	0f b7 51 5b	 movzx	 edx, WORD PTR [ecx+91]
  0023c	52		 push	 edx
  0023d	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@IICMIGNG@?D?z?R?Q?M?j?$LD?I?5?$CFd?5?$LO?V?$LB?H?H?$PM?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P@
  00242	68 80 00 00 00	 push	 128			; 00000080H
  00247	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00253	83 c4 10	 add	 esp, 16			; 00000010H

; 1850 : 
; 1851 : 		//发送消息
; 1852 : 		if(pIServerUserItem->GetTableID()==INVALID_TABLE)

  00256	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00259	8b 10		 mov	 edx, DWORD PTR [eax]
  0025b	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0025e	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00261	ff d0		 call	 eax
  00263	0f b7 c8	 movzx	 ecx, ax
  00266	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0026c	75 28		 jne	 SHORT $LN9@VerifyUser

; 1853 : 		{
; 1854 : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,szMessage,SMT_EJECT|SMT_CHAT);

  0026e	6a 03		 push	 3
  00270	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  00276	50		 push	 eax
  00277	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0027a	51		 push	 ecx
  0027b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0027e	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00284	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00287	8b 10		 mov	 edx, DWORD PTR [eax]
  00289	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  0028f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00292	ff d0		 call	 eax

; 1855 : 		}
; 1856 : 		else

  00294	eb 29		 jmp	 SHORT $LN10@VerifyUser
$LN9@VerifyUser:

; 1857 : 		{
; 1858 : 			m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_EJECT|SMT_CHAT|SMT_CLOSE_GAME);

  00296	68 03 02 00 00	 push	 515			; 00000203H
  0029b	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  002a1	50		 push	 eax
  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002a5	51		 push	 ecx
  002a6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002a9	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  002af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b2	8b 10		 mov	 edx, DWORD PTR [eax]
  002b4	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  002ba	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002bd	ff d0		 call	 eax
$LN10@VerifyUser:

; 1859 : 		}
; 1860 : 
; 1861 : 		return false;

  002bf	32 c0		 xor	 al, al
  002c1	eb 02		 jmp	 SHORT $LN1@VerifyUser
$LN8@VerifyUser:

; 1862 : 	}
; 1863 : 
; 1864 : 	return true;

  002c3	b0 01		 mov	 al, 1
$LN1@VerifyUser:

; 1865 : }

  002c5	5f		 pop	 edi
  002c6	5e		 pop	 esi
  002c7	5b		 pop	 ebx
  002c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cb	33 cd		 xor	 ecx, ebp
  002cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 04 00	 ret	 4
?VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::VerifyUserEnterMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendReviveNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@E_N@Z
_TEXT	SEGMENT
_szMessage$1 = -292					; size = 128
_wDataSize$2 = -164					; size = 2
_MatchRevive$3 = -160					; size = 150
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReviveTimesed$ = 12					; size = 1
_bUseSafeCard$ = 16					; size = 1
?SendReviveNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@E_N@Z PROC ; CLockTimeMatch::SendReviveNotify, COMDAT
; _this$ = ecx

; 2401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2402 : 	if (bUseSafeCard==false)

  00019	0f b6 45 10	 movzx	 eax, BYTE PTR _bUseSafeCard$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	0f 85 e8 00 00
	00		 jne	 $LN2@SendRevive

; 2403 : 	{
; 2404 : 		//构造结构 
; 2405 : 		CMD_GR_Match_Revive MatchRevive;
; 2406 : 
; 2407 : 		//比赛信息
; 2408 : 		MatchRevive.dwMatchID=m_pMatchOption->dwMatchID;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	89 95 60 ff ff
	ff		 mov	 DWORD PTR _MatchRevive$3[ebp], edx

; 2409 : 		MatchRevive.lMatchNO=m_pMatchOption->lMatchNo;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00039	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003c	89 95 64 ff ff
	ff		 mov	 DWORD PTR _MatchRevive$3[ebp+4], edx
  00042	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00045	89 85 68 ff ff
	ff		 mov	 DWORD PTR _MatchRevive$3[ebp+8], eax

; 2410 : 
; 2411 : 		//复活信息
; 2412 : 		MatchRevive.lReviveFee=m_pLockTimeMatch->lReviveFee;

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00051	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00054	89 95 6c ff ff
	ff		 mov	 DWORD PTR _MatchRevive$3[ebp+12], edx
  0005a	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  0005d	89 85 70 ff ff
	ff		 mov	 DWORD PTR _MatchRevive$3[ebp+16], eax

; 2413 : 		MatchRevive.cbReviveTimes=m_pLockTimeMatch->cbReviveTimes;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00069	8a 51 5f	 mov	 dl, BYTE PTR [ecx+95]
  0006c	88 95 74 ff ff
	ff		 mov	 BYTE PTR _MatchRevive$3[ebp+20], dl

; 2414 : 		MatchRevive.cbReviveTimesed=cbReviveTimesed;

  00072	8a 45 0c	 mov	 al, BYTE PTR _cbReviveTimesed$[ebp]
  00075	88 85 75 ff ff
	ff		 mov	 BYTE PTR _MatchRevive$3[ebp+21], al

; 2415 : 
; 2416 : 		//构造消息
; 2417 : 		_sntprintf_s(MatchRevive.szNotifyContent,CountArray(MatchRevive.szNotifyContent),TEXT("您的比赛币低于 %d，将不能继续游戏。 您只需支付 %I64d 金币便可复活继续比赛，您确定要复活吗？"),m_pLockTimeMatch->lMatchCullScore,m_pLockTimeMatch->lReviveFee);

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00081	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00084	52		 push	 edx
  00085	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00088	50		 push	 eax
  00089	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0008f	8b 42 55	 mov	 eax, DWORD PTR [edx+85]
  00092	50		 push	 eax
  00093	8b 4a 51	 mov	 ecx, DWORD PTR [edx+81]
  00096	51		 push	 ecx
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@EDKOAGPM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@
  0009c	68 80 00 00 00	 push	 128			; 00000080H
  000a1	8d 95 76 ff ff
	ff		 lea	 edx, DWORD PTR _MatchRevive$3[ebp+22]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  000ad	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2418 : 
; 2419 :         //发送数据
; 2420 : 		WORD wDataSize=sizeof(MatchRevive)-sizeof(MatchRevive.szNotifyContent);

  000b0	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  000b5	66 89 85 5c ff
	ff ff		 mov	 WORD PTR _wDataSize$2[ebp], ax

; 2421 : 		wDataSize+=CountStringBuffer(MatchRevive.szNotifyContent);

  000bc	8d 85 76 ff ff
	ff		 lea	 eax, DWORD PTR _MatchRevive$3[ebp+22]
  000c2	50		 push	 eax
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000c9	0f b7 8d 5c ff
	ff ff		 movzx	 ecx, WORD PTR _wDataSize$2[ebp]
  000d0	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  000d4	66 89 95 5c ff
	ff ff		 mov	 WORD PTR _wDataSize$2[ebp], dx

; 2422 : 		m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_REVIVE,&MatchRevive,wDataSize);

  000db	0f b7 85 5c ff
	ff ff		 movzx	 eax, WORD PTR _wDataSize$2[ebp]
  000e2	50		 push	 eax
  000e3	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _MatchRevive$3[ebp]
  000e9	51		 push	 ecx
  000ea	6a 0f		 push	 15			; 0000000fH
  000ec	6a 0a		 push	 10			; 0000000aH
  000ee	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  000f1	52		 push	 edx
  000f2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000fb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	8b 01		 mov	 eax, DWORD PTR [ecx]
  00100	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  00106	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00109	ff d2		 call	 edx

; 2423 : 	}
; 2424 : 	else

  0010b	eb 4d		 jmp	 SHORT $LN3@SendRevive
$LN2@SendRevive:

; 2425 : 	{
; 2426 : 		//变量定义
; 2427 : 		TCHAR szMessage[128];
; 2428 : 		_sntprintf_s(szMessage,CountArray(szMessage),TEXT("您的比赛币低于 %d，将不能继续游戏。由于您购买了保险卡，系统将免费为您复活一次！"),m_pLockTimeMatch->lMatchCullScore);

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00110	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00113	8b 51 55	 mov	 edx, DWORD PTR [ecx+85]
  00116	52		 push	 edx
  00117	8b 41 51	 mov	 eax, DWORD PTR [ecx+81]
  0011a	50		 push	 eax
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@CPFANEOM@?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?$LN?$KL?$LC?$LL?D?$NM?$LM?L?P?x?S?N@
  00120	68 80 00 00 00	 push	 128			; 00000080H
  00125	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _szMessage$1[ebp]
  0012b	51		 push	 ecx
  0012c	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00131	83 c4 14	 add	 esp, 20			; 00000014H

; 2429 : 
; 2430 : 		//消息通知
; 2431 : 		m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,szMessage,SMT_CHAT|SMT_EJECT);

  00134	6a 03		 push	 3
  00136	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$1[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00140	51		 push	 ecx
  00141	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00144	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0014a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	8b 10		 mov	 edx, DWORD PTR [eax]
  0014f	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00155	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00158	ff d0		 call	 eax
$LN3@SendRevive:

; 2432 : 	}
; 2433 : 
; 2434 : 	return true;

  0015a	b0 01		 mov	 al, 1

; 2435 : }

  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	33 cd		 xor	 ecx, ebp
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 0c 00	 ret	 12			; 0000000cH
?SendReviveNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@E_N@Z ENDP ; CLockTimeMatch::SendReviveNotify
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendSignupSuccessNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?SendSignupSuccessNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::SendSignupSuccessNotify, COMDAT
; _this$ = ecx

; 2518 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2519 : 	//报名成功
; 2520 : 	if (m_MatchStatus!=MatchStatus_Free)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00013	85 c9		 test	 ecx, ecx
  00015	74 32		 je	 SHORT $LN2@SendSignup

; 2521 : 	{
; 2522 : 		//消息通知
; 2523 : 		m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem, TEXT("恭喜您，报名成功，请等待系统为您分配座位！"),SMT_CHAT);

  00017	6a 01		 push	 1
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LKBHCBDE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00021	50		 push	 eax
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 12		 mov	 edx, DWORD PTR [edx]
  00030	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00036	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00039	ff d0		 call	 eax

; 2524 : 
; 2525 : 		//加入分组
; 2526 : 		InsertDistribute(pIServerUserItem);					

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute

; 2527 : 	}
; 2528 : 	else

  00047	eb 24		 jmp	 SHORT $LN3@SendSignup
$LN2@SendSignup:

; 2529 : 	{
; 2530 : 		//消息通知
; 2531 : 		m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem, TEXT("恭喜您，报名成功，请届时前来参加比赛！"),SMT_CHAT);

  00049	6a 01		 push	 1
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JFAMEAMK@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LN?l?J?$LB?G?$LA?$MA?$LE?$LC?N?$LM@
  00050	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00053	50		 push	 eax
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 12		 mov	 edx, DWORD PTR [edx]
  00062	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00068	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0006b	ff d0		 call	 eax
$LN3@SendSignup:

; 2532 : 	}
; 2533 : 
; 2534 : 	return true;

  0006d	b0 01		 mov	 al, 1

; 2535 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?SendSignupSuccessNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::SendSignupSuccessNotify
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendEliminateNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_MatchEliminate$ = -160					; size = 24
_szMessage$ = -136					; size = 128
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
?SendEliminateNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::SendEliminateNotify, COMDAT
; _this$ = ecx

; 2492 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2493 : 	//变量定义
; 2494 : 	TCHAR szMessage[128]=TEXT("");

  00019	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0001e	88 85 78 ff ff
	ff		 mov	 BYTE PTR _szMessage$[ebp], al
  00024	6a 7f		 push	 127			; 0000007fH
  00026	6a 00		 push	 0
  00028	8d 85 79 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp+1]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2495 : 	_sntprintf_s(szMessage,CountArray(szMessage),TEXT("由于您的比赛币低于 %d，您将不能继续游戏！"),m_pLockTimeMatch->lMatchCullScore);

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0003d	8b 51 55	 mov	 edx, DWORD PTR [ecx+85]
  00040	52		 push	 edx
  00041	8b 41 51	 mov	 eax, DWORD PTR [ecx+81]
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MEIIMJBH@?S?I?S?Z?D?z?$LF?D?$LB?H?H?$PM?$LB?R?$LF?M?S?Z?5?$CFd?$KD?$KM?D?z?$LN?$KL?$LC?$LL?D?$NM@
  0004a	68 80 00 00 00	 push	 128			; 00000080H
  0004f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _szMessage$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  0005b	83 c4 14	 add	 esp, 20			; 00000014H

; 2496 : 
; 2497 : 	//发送消息
; 2498 : 	m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_EJECT|SMT_CHAT);

  0005e	6a 03		 push	 3
  00060	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  00066	50		 push	 eax
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0006a	51		 push	 ecx
  0006b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	8b 10		 mov	 edx, DWORD PTR [eax]
  00079	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  0007f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00082	ff d0		 call	 eax

; 2499 : 
; 2500 : 	//构造结构
; 2501 : 	DBR_GR_MatchEliminate MatchEliminate;
; 2502 : 	MatchEliminate.cbMatchType=MATCH_TYPE_LOCKTIME;

  00084	c6 85 66 ff ff
	ff 00		 mov	 BYTE PTR _MatchEliminate$[ebp+6], 0

; 2503 : 	MatchEliminate.dwMatchID=m_pMatchOption->dwMatchID;

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	89 95 68 ff ff
	ff		 mov	 DWORD PTR _MatchEliminate$[ebp+8], edx

; 2504 : 	MatchEliminate.lMatchNo=m_pMatchOption->lMatchNo;

  00099	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0009f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a2	89 95 70 ff ff
	ff		 mov	 DWORD PTR _MatchEliminate$[ebp+16], edx
  000a8	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000ab	89 85 74 ff ff
	ff		 mov	 DWORD PTR _MatchEliminate$[ebp+20], eax

; 2505 : 	MatchEliminate.dwUserID=pIServerUserItem->GetUserID();

  000b1	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000b4	8b 10		 mov	 edx, DWORD PTR [eax]
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000b9	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  000bc	ff d0		 call	 eax
  000be	89 85 60 ff ff
	ff		 mov	 DWORD PTR _MatchEliminate$[ebp], eax

; 2506 : 
; 2507 : 	//投递请求
; 2508 : 	m_pIDataBaseEngine->PostDataBaseRequest(MatchEliminate.dwUserID,DBR_GR_MATCH_ELIMINATE,0,&MatchEliminate,sizeof(MatchEliminate));

  000c4	6a 00		 push	 0
  000c6	6a 18		 push	 24			; 00000018H
  000c8	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _MatchEliminate$[ebp]
  000ce	50		 push	 eax
  000cf	6a 00		 push	 0
  000d1	68 61 02 00 00	 push	 609			; 00000261H
  000d6	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _MatchEliminate$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  000ef	8b 00		 mov	 eax, DWORD PTR [eax]
  000f1	52		 push	 edx
  000f2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f5	ff d1		 call	 ecx
  000f7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2509 : 
; 2510 : 	//发送数据
; 2511 : 	m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_ELIMINATE,NULL,0);

  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	6a 0e		 push	 14			; 0000000eH
  00100	6a 0a		 push	 10			; 0000000aH
  00102	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00105	50		 push	 eax
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0010f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 12		 mov	 edx, DWORD PTR [edx]
  00114	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0011a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0011d	ff d0		 call	 eax

; 2512 : 
; 2513 : 	return true;

  0011f	b0 01		 mov	 al, 1

; 2514 : }

  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx
  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	33 cd		 xor	 ecx, ebp
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?SendEliminateNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::SendEliminateNotify
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendDeductFeeNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_wDataSize$ = -172					; size = 2
_pszFeeType$1 = -168					; size = 8
_MatchFee$ = -160					; size = 151
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
?SendDeductFeeNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::SendDeductFeeNotify, COMDAT
; _this$ = ecx

; 2461 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2462 : 	//构造结构
; 2463 : 	CMD_GR_Match_Fee MatchFee;
; 2464 : 
; 2465 : 	//设置变量
; 2466 : 	MatchFee.cbSignupMode=SIGNUP_MODE_SIGNUP_FEE;

  00019	c6 85 6c ff ff
	ff 01		 mov	 BYTE PTR _MatchFee$[ebp+12], 1

; 2467 : 	MatchFee.dwMatchID=m_pMatchOption->dwMatchID;

  00020	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	89 95 60 ff ff
	ff		 mov	 DWORD PTR _MatchFee$[ebp], edx

; 2468 : 	MatchFee.lMatchNO=m_pMatchOption->lMatchNo;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00034	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00037	89 95 64 ff ff
	ff		 mov	 DWORD PTR _MatchFee$[ebp+4], edx
  0003d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00040	89 85 68 ff ff
	ff		 mov	 DWORD PTR _MatchFee$[ebp+8], eax

; 2469 : 	MatchFee.lSignupFee=m_pMatchOption->lSignupFee;

  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0004c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0004f	89 95 6f ff ff
	ff		 mov	 DWORD PTR _MatchFee$[ebp+15], edx
  00055	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00058	89 85 73 ff ff
	ff		 mov	 DWORD PTR _MatchFee$[ebp+19], eax

; 2470 : 	MatchFee.cbFeeType=m_pMatchOption->cbFeeType;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00064	8a 51 32	 mov	 dl, BYTE PTR [ecx+50]
  00067	88 95 6d ff ff
	ff		 mov	 BYTE PTR _MatchFee$[ebp+13], dl

; 2471 : 	MatchFee.cbDeductArea=m_pMatchOption->cbDeductArea;	

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00073	8a 51 33	 mov	 dl, BYTE PTR [ecx+51]
  00076	88 95 6e ff ff
	ff		 mov	 BYTE PTR _MatchFee$[ebp+14], dl

; 2472 : 
; 2473 : 	ZeroMemory(MatchFee.szNotifyContent,sizeof(MatchFee.szNotifyContent));

  0007c	68 80 00 00 00	 push	 128			; 00000080H
  00081	6a 00		 push	 0
  00083	8d 85 77 ff ff
	ff		 lea	 eax, DWORD PTR _MatchFee$[ebp+23]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _memset
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2474 : 
; 2475 : 	//构造提示			
; 2476 : 	if (m_pMatchOption->cbDeductArea==DEDUCT_AREA_SERVER && MatchFee.lSignupFee>0)

  00092	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00098	0f b6 51 33	 movzx	 edx, BYTE PTR [ecx+51]
  0009c	85 d2		 test	 edx, edx
  0009e	75 61		 jne	 SHORT $LN2@SendDeduct
  000a0	83 bd 73 ff ff
	ff 00		 cmp	 DWORD PTR _MatchFee$[ebp+19], 0
  000a7	7c 58		 jl	 SHORT $LN2@SendDeduct
  000a9	7f 09		 jg	 SHORT $LN4@SendDeduct
  000ab	83 bd 6f ff ff
	ff 00		 cmp	 DWORD PTR _MatchFee$[ebp+15], 0
  000b2	76 4d		 jbe	 SHORT $LN2@SendDeduct
$LN4@SendDeduct:

; 2477 : 	{
; 2478 : 		LPCTSTR pszFeeType[]={TEXT("游戏币"),TEXT("元宝")};

  000b4	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszFeeType$1[ebp], OFFSET ??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@
  000be	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszFeeType$1[ebp+4], OFFSET ??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@

; 2479 : 		_sntprintf_s(MatchFee.szNotifyContent,CountArray(MatchFee.szNotifyContent),TEXT("参赛将扣除报名费 %I64d %s，确认要参赛吗？"),m_pMatchOption->lSignupFee,pszFeeType[m_pMatchOption->cbFeeType-FEE_TYPE_GOLD]);

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000ce	0f b6 51 32	 movzx	 edx, BYTE PTR [ecx+50]
  000d2	8b 84 95 58 ff
	ff ff		 mov	 eax, DWORD PTR _pszFeeType$1[ebp+edx*4]
  000d9	50		 push	 eax
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  000e0	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  000e3	50		 push	 eax
  000e4	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  000e7	51		 push	 ecx
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@
  000ed	68 80 00 00 00	 push	 128			; 00000080H
  000f2	8d 95 77 ff ff
	ff		 lea	 edx, DWORD PTR _MatchFee$[ebp+23]
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  000fe	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@SendDeduct:

; 2480 : 	}
; 2481 : 
; 2482 : 	//发送消息
; 2483 : 	WORD wDataSize=sizeof(MatchFee)-sizeof(MatchFee.szNotifyContent);

  00101	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  00106	66 89 85 54 ff
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], ax

; 2484 : 	wDataSize+=CountStringBuffer(MatchFee.szNotifyContent);

  0010d	8d 85 77 ff ff
	ff		 lea	 eax, DWORD PTR _MatchFee$[ebp+23]
  00113	50		 push	 eax
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0011a	0f b7 8d 54 ff
	ff ff		 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  00121	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00125	66 89 95 54 ff
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], dx

; 2485 : 	m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_FEE,&MatchFee,wDataSize);

  0012c	0f b7 85 54 ff
	ff ff		 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00133	50		 push	 eax
  00134	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _MatchFee$[ebp]
  0013a	51		 push	 ecx
  0013b	6a 03		 push	 3
  0013d	6a 0a		 push	 10			; 0000000aH
  0013f	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  00142	52		 push	 edx
  00143	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00146	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0014c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0014f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00151	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  00157	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0015a	ff d2		 call	 edx

; 2486 : 
; 2487 : 	return true;

  0015c	b0 01		 mov	 al, 1

; 2488 : }

  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	5b		 pop	 ebx
  00161	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00164	33 cd		 xor	 ecx, ebp
  00166	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 04 00	 ret	 4
?SendDeductFeeNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::SendDeductFeeNotify
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendSafeCardNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_wDataSize$ = -160					; size = 2
_MatchSafeCard$ = -156					; size = 148
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
?SendSafeCardNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::SendSafeCardNotify, COMDAT
; _this$ = ecx

; 2439 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2440 : 	//构造结构
; 2441 : 	CMD_GR_Match_SafeCard MatchSafeCard;
; 2442 : 
; 2443 : 	//设置变量
; 2444 : 	MatchSafeCard.dwMatchID=m_pMatchOption->dwMatchID;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	89 95 64 ff ff
	ff		 mov	 DWORD PTR _MatchSafeCard$[ebp], edx

; 2445 : 	MatchSafeCard.lMatchNO=m_pMatchOption->lMatchNo;

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0002d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00030	89 95 68 ff ff
	ff		 mov	 DWORD PTR _MatchSafeCard$[ebp+4], edx
  00036	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00039	89 85 6c ff ff
	ff		 mov	 DWORD PTR _MatchSafeCard$[ebp+8], eax

; 2446 : 	MatchSafeCard.lSafeCardFee=m_pLockTimeMatch->lSafeCardFee;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00045	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  00048	89 95 70 ff ff
	ff		 mov	 DWORD PTR _MatchSafeCard$[ebp+12], edx
  0004e	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00051	89 85 74 ff ff
	ff		 mov	 DWORD PTR _MatchSafeCard$[ebp+16], eax

; 2447 : 
; 2448 : 	//构造消息
; 2449 : 	_sntprintf_s(MatchSafeCard.szNotifyContent,CountArray(MatchSafeCard.szNotifyContent),TEXT("恭喜您报名成功！本场比赛出售保险卡, 被淘汰可免费复活一次，售价 %I64d 金币，您是否要购买？"),MatchSafeCard.lSafeCardFee);

  00057	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _MatchSafeCard$[ebp+16]
  0005d	50		 push	 eax
  0005e	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _MatchSafeCard$[ebp+12]
  00064	51		 push	 ecx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@LABKGBIM@?$LJ?$KH?O?$LC?D?z?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KB?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LD?v?J?$NL?$LB?$KD?O@
  0006a	68 80 00 00 00	 push	 128			; 00000080H
  0006f	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _MatchSafeCard$[ebp+20]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  0007b	83 c4 14	 add	 esp, 20			; 00000014H

; 2450 : 
; 2451 : 	//发送数据
; 2452 : 	WORD wDataSize=sizeof(MatchSafeCard)-sizeof(MatchSafeCard.szNotifyContent);

  0007e	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00083	66 89 85 60 ff
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], ax

; 2453 : 	wDataSize+=CountStringBuffer(MatchSafeCard.szNotifyContent);

  0008a	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _MatchSafeCard$[ebp+20]
  00090	50		 push	 eax
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00097	0f b7 8d 60 ff
	ff ff		 movzx	 ecx, WORD PTR _wDataSize$[ebp]
  0009e	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  000a2	66 89 95 60 ff
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], dx

; 2454 : 	m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_SAFECARD,&MatchSafeCard,wDataSize);

  000a9	0f b7 85 60 ff
	ff ff		 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000b0	50		 push	 eax
  000b1	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _MatchSafeCard$[ebp]
  000b7	51		 push	 ecx
  000b8	6a 06		 push	 6
  000ba	6a 0a		 push	 10			; 0000000aH
  000bc	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  000bf	52		 push	 edx
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000c9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000cc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ce	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  000d4	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  000d7	ff d2		 call	 edx

; 2455 : 
; 2456 : 	return true;

  000d9	b0 01		 mov	 al, 1

; 2457 : }

  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e1	33 cd		 xor	 ecx, ebp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 04 00	 ret	 4
?SendSafeCardNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::SendSafeCardNotify
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendMatchUserInitScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_pUserScore$ = -8					; size = 4
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?SendMatchUserInitScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::SendMatchUserInitScore, COMDAT
; _this$ = ecx

; 2383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2384 : 	//获取成绩
; 2385 : 	tagUserInfo *pUserScore=pIServerUserItem->GetUserInfo();

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00014	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00017	ff d0		 call	 eax
  00019	89 45 f8	 mov	 DWORD PTR _pUserScore$[ebp], eax

; 2386 : 
; 2387 : 	//设置成绩
; 2388 : 	pUserScore->dwWinCount=0L;

  0001c	8b 45 f8	 mov	 eax, DWORD PTR _pUserScore$[ebp]
  0001f	c7 80 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+216], 0

; 2389 : 	pUserScore->dwLostCount=0L;

  00029	8b 45 f8	 mov	 eax, DWORD PTR _pUserScore$[ebp]
  0002c	c7 80 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+220], 0

; 2390 : 	pUserScore->dwFleeCount=0L;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _pUserScore$[ebp]
  00039	c7 80 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+228], 0

; 2391 : 	pUserScore->dwDrawCount=0L;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _pUserScore$[ebp]
  00046	c7 80 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+224], 0

; 2392 : 	pUserScore->lIntegralCount=0L;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _pUserScore$[ebp]
  00053	c7 80 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+244], 0
  0005d	c7 80 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+248], 0

; 2393 : 	pUserScore->bConsumptionType.lScore = (LONGLONG)m_pLockTimeMatch->lMatchInitScore;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0006d	8b 55 f8	 mov	 edx, DWORD PTR _pUserScore$[ebp]
  00070	8b 41 49	 mov	 eax, DWORD PTR [ecx+73]
  00073	89 82 a8 00 00
	00		 mov	 DWORD PTR [edx+168], eax
  00079	8b 49 4d	 mov	 ecx, DWORD PTR [ecx+77]
  0007c	89 8a ac 00 00
	00		 mov	 DWORD PTR [edx+172], ecx

; 2394 : 
; 2395 : 	//发送分数
; 2396 : 	return SendMatchUserScore(pIServerUserItem);

  00082	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00085	50		 push	 eax
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserScore

; 2397 : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?SendMatchUserInitScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::SendMatchUserInitScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_pUserInfo$ = -116					; size = 4
_UserScore$ = -112					; size = 104
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::SendMatchUserScore, COMDAT
; _this$ = ecx

; 2356 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2357 : 	//发送数据
; 2358 : 	CMD_GR_UserScore UserScore;
; 2359 : 	ZeroMemory(&UserScore,sizeof(UserScore));

  00019	6a 68		 push	 104			; 00000068H
  0001b	6a 00		 push	 0
  0001d	8d 45 90	 lea	 eax, DWORD PTR _UserScore$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2360 : 
; 2361 : 	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();

  00029	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00031	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00034	ff d0		 call	 eax
  00036	89 45 8c	 mov	 DWORD PTR _pUserInfo$[ebp], eax

; 2362 : 
; 2363 : 	//构造数据
; 2364 : 	UserScore.dwUserID=pUserInfo->dwUserID;

  00039	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d 90	 mov	 DWORD PTR _UserScore$[ebp], ecx

; 2365 : 	UserScore.UserScore.dwWinCount=pUserInfo->dwWinCount;

  00041	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00044	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0004a	89 4d d4	 mov	 DWORD PTR _UserScore$[ebp+68], ecx

; 2366 : 	UserScore.UserScore.dwLostCount=pUserInfo->dwLostCount;

  0004d	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00050	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  00056	89 4d d8	 mov	 DWORD PTR _UserScore$[ebp+72], ecx

; 2367 : 	UserScore.UserScore.dwDrawCount=pUserInfo->dwDrawCount;

  00059	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0005c	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00062	89 4d dc	 mov	 DWORD PTR _UserScore$[ebp+76], ecx

; 2368 : 	UserScore.UserScore.dwFleeCount=pUserInfo->dwFleeCount;	

  00065	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00068	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  0006e	89 4d e0	 mov	 DWORD PTR _UserScore$[ebp+80], ecx

; 2369 : 	UserScore.UserScore.dwExperience=pUserInfo->dwExperience;

  00071	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00074	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  0007a	89 4d f0	 mov	 DWORD PTR _UserScore$[ebp+96], ecx

; 2370 : 	UserScore.UserScore.lLoveLiness=pUserInfo->lLoveLiness;

  0007d	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00080	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00086	89 4d f4	 mov	 DWORD PTR _UserScore$[ebp+100], ecx

; 2371 : 	UserScore.UserScore.lIntegralCount=pUserInfo->lIntegralCount;

  00089	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0008c	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  00092	89 4d e4	 mov	 DWORD PTR _UserScore$[ebp+84], ecx
  00095	8b 90 f8 00 00
	00		 mov	 edx, DWORD PTR [eax+248]
  0009b	89 55 e8	 mov	 DWORD PTR _UserScore$[ebp+88], edx

; 2372 : 
; 2373 : 	//构造积分
; 2374 : 	UserScore.UserScore.bConsumptionType.lBeans = pUserInfo->bConsumptionType.lBeans;

  0009e	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000a1	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  000a7	89 4d b4	 mov	 DWORD PTR _UserScore$[ebp+36], ecx
  000aa	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  000b0	89 55 b8	 mov	 DWORD PTR _UserScore$[ebp+40], edx

; 2375 : 	UserScore.UserScore.bConsumptionType.lIngot = pUserInfo->bConsumptionType.lIngot;

  000b3	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000b6	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000bc	89 4d ac	 mov	 DWORD PTR _UserScore$[ebp+28], ecx
  000bf	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  000c5	89 55 b0	 mov	 DWORD PTR _UserScore$[ebp+32], edx

; 2376 : 	UserScore.UserScore.bConsumptionType.lScore = pUserInfo->bConsumptionType.lScore;

  000c8	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000cb	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  000d1	89 4d a4	 mov	 DWORD PTR _UserScore$[ebp+20], ecx
  000d4	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  000da	89 55 a8	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 2377 : 
; 2378 : 	return m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_USER,SUB_GR_USER_SCORE,&UserScore,sizeof(UserScore));

  000dd	6a 68		 push	 104			; 00000068H
  000df	8d 45 90	 lea	 eax, DWORD PTR _UserScore$[ebp]
  000e2	50		 push	 eax
  000e3	6a 65		 push	 101			; 00000065H
  000e5	6a 03		 push	 3
  000e7	68 ff 00 00 00	 push	 255			; 000000ffH
  000ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  000f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 12		 mov	 edx, DWORD PTR [edx]
  000fa	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00100	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00103	ff d0		 call	 eax

; 2379 : }

  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	33 cd		 xor	 ecx, ebp
  0010d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 04 00	 ret	 4
?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::SendMatchUserScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv155 = -97						; size = 1
_MatchNum$1 = -32					; size = 8
_DistributeInfo$ = -24					; size = 20
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::InsertDistribute, COMDAT
; _this$ = ecx

; 2224 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2225 : 	//效验参数
; 2226 : 	ASSERT(pIServerUserItem!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00010	75 18		 jne	 SHORT $LN10@InsertDist
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN10@InsertDist
  00029	cc		 int	 3
$LN10@InsertDist:

; 2227 : 	if (pIServerUserItem==NULL) return false;

  0002a	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0002e	75 07		 jne	 SHORT $LN2@InsertDist
  00030	32 c0		 xor	 al, al
  00032	e9 54 01 00 00	 jmp	 $LN1@InsertDist
$LN2@InsertDist:

; 2228 : 
; 2229 : 	//比赛状态
; 2230 :  	if(m_MatchStatus!=MatchStatus_WaitPlay && m_MatchStatus!=MatchStatus_Playing) return false;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0003e	83 f9 01	 cmp	 ecx, 1
  00041	74 13		 je	 SHORT $LN3@InsertDist
  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0004a	83 f9 02	 cmp	 ecx, 2
  0004d	74 07		 je	 SHORT $LN3@InsertDist
  0004f	32 c0		 xor	 al, al
  00051	e9 35 01 00 00	 jmp	 $LN1@InsertDist
$LN3@InsertDist:

; 2231 : 
; 2232 : 	//状态判断
; 2233 : 	ASSERT(pIServerUserItem->GetUserStatus()<US_PLAYING);

  00056	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0005e	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00061	ff d0		 call	 eax
  00063	0f b6 c8	 movzx	 ecx, al
  00066	83 f9 05	 cmp	 ecx, 5
  00069	7c 19		 jl	 SHORT $LN11@InsertDist
  0006b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA
  00071	83 c2 09	 add	 edx, 9
  00074	52		 push	 edx
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN11@InsertDist
  00083	cc		 int	 3
$LN11@InsertDist:

; 2234 : 	if (pIServerUserItem->GetUserStatus()>=US_PLAYING) return false;

  00084	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0008c	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0008f	ff d0		 call	 eax
  00091	0f b6 c8	 movzx	 ecx, al
  00094	83 f9 05	 cmp	 ecx, 5
  00097	7c 07		 jl	 SHORT $LN4@InsertDist
  00099	32 c0		 xor	 al, al
  0009b	e9 eb 00 00 00	 jmp	 $LN1@InsertDist
$LN4@InsertDist:

; 2235 : 
; 2236 : 	//参赛校验
; 2237 : 	if(VerifyUserEnterMatch(pIServerUserItem)==false) return false;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	e8 00 00 00 00	 call	 ?VerifyUserEnterMatch@CLockTimeMatch@@AAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::VerifyUserEnterMatch
  000ac	0f b6 c8	 movzx	 ecx, al
  000af	85 c9		 test	 ecx, ecx
  000b1	75 07		 jne	 SHORT $LN5@InsertDist
  000b3	32 c0		 xor	 al, al
  000b5	e9 d1 00 00 00	 jmp	 $LN1@InsertDist
$LN5@InsertDist:

; 2238 : 
; 2239 : 	//存在判断
; 2240 : 	if (m_DistributeManage.SearchNode(pIServerUserItem)!=NULL) return true;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	83 c1 18	 add	 ecx, 24			; 00000018H
  000c4	e8 00 00 00 00	 call	 ?SearchNode@CDistributeManager@@QAEPAUtagDistributeNode@@PAUIServerUserItem@@@Z ; CDistributeManager::SearchNode
  000c9	85 c0		 test	 eax, eax
  000cb	74 07		 je	 SHORT $LN6@InsertDist
  000cd	b0 01		 mov	 al, 1
  000cf	e9 b7 00 00 00	 jmp	 $LN1@InsertDist
$LN6@InsertDist:

; 2241 : 
; 2242 : 	//变量定义
; 2243 : 	tagDistributeInfo DistributeInfo;
; 2244 : 	ZeroMemory(&DistributeInfo,sizeof(DistributeInfo));

  000d4	6a 14		 push	 20			; 00000014H
  000d6	6a 00		 push	 0
  000d8	8d 45 e8	 lea	 eax, DWORD PTR _DistributeInfo$[ebp]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 _memset
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2245 : 
; 2246 : 	//设置变量
; 2247 : 	DistributeInfo.pPertainNode=NULL;	

  000e4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _DistributeInfo$[ebp+16], 0

; 2248 : 	DistributeInfo.dwInsertStamp=(DWORD)time(NULL);

  000eb	6a 00		 push	 0
  000ed	e8 00 00 00 00	 call	 _time
  000f2	83 c4 04	 add	 esp, 4
  000f5	89 45 f0	 mov	 DWORD PTR _DistributeInfo$[ebp+8], eax

; 2249 : 	DistributeInfo.pIServerUserItem=pIServerUserItem;   

  000f8	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000fb	89 45 f4	 mov	 DWORD PTR _DistributeInfo$[ebp+12], eax

; 2250 : 
; 2251 : 	//插入节点
; 2252 : 	if (m_DistributeManage.InsertDistributeNode(DistributeInfo)==false)

  000fe	8d 45 e8	 lea	 eax, DWORD PTR _DistributeInfo$[ebp]
  00101	50		 push	 eax
  00102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	83 c1 18	 add	 ecx, 24			; 00000018H
  00108	e8 00 00 00 00	 call	 ?InsertDistributeNode@CDistributeManager@@QAEHABUtagDistributeInfo@@@Z ; CDistributeManager::InsertDistributeNode
  0010d	85 c0		 test	 eax, eax
  0010f	75 26		 jne	 SHORT $LN7@InsertDist

; 2253 : 	{
; 2254 : 		return pIServerUserItem->IsAndroidUser()?false:true; 

  00111	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00114	8b 10		 mov	 edx, DWORD PTR [eax]
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00119	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0011f	ff d0		 call	 eax
  00121	0f b6 c8	 movzx	 ecx, al
  00124	85 c9		 test	 ecx, ecx
  00126	74 06		 je	 SHORT $LN12@InsertDist
  00128	c6 45 9f 00	 mov	 BYTE PTR tv155[ebp], 0
  0012c	eb 04		 jmp	 SHORT $LN13@InsertDist
$LN12@InsertDist:
  0012e	c6 45 9f 01	 mov	 BYTE PTR tv155[ebp], 1
$LN13@InsertDist:
  00132	8a 45 9f	 mov	 al, BYTE PTR tv155[ebp]
  00135	eb 54		 jmp	 SHORT $LN1@InsertDist
$LN7@InsertDist:

; 2255 : 	}
; 2256 : 
; 2257 : 	//等待开始
; 2258 : 	if (m_MatchStatus==MatchStatus_WaitPlay)

  00137	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013a	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  0013e	83 f9 01	 cmp	 ecx, 1
  00141	75 46		 jne	 SHORT $LN8@InsertDist

; 2259 : 	{
; 2260 : 		//构造人数
; 2261 : 		CMD_GR_Match_Num MatchNum;
; 2262 : 		MatchNum.dwWaitting=m_DistributeManage.GetCount();

  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	83 c1 18	 add	 ecx, 24			; 00000018H
  00149	e8 00 00 00 00	 call	 ?GetCount@CDistributeManager@@QAEGXZ ; CDistributeManager::GetCount
  0014e	0f b7 c0	 movzx	 eax, ax
  00151	89 45 e0	 mov	 DWORD PTR _MatchNum$1[ebp], eax

; 2263 : 		MatchNum.dwTotal=m_pLockTimeMatch->wStartUserCount;

  00154	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00157	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0015a	0f b7 51 27	 movzx	 edx, WORD PTR [ecx+39]
  0015e	89 55 e4	 mov	 DWORD PTR _MatchNum$1[ebp+4], edx

; 2264 : 
; 2265 : 		//发送人数
; 2266 : 		m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_NUM,&MatchNum, sizeof(MatchNum));

  00161	6a 08		 push	 8
  00163	8d 45 e0	 lea	 eax, DWORD PTR _MatchNum$1[ebp]
  00166	50		 push	 eax
  00167	6a 04		 push	 4
  00169	6a 0a		 push	 10			; 0000000aH
  0016b	68 ff 00 00 00	 push	 255			; 000000ffH
  00170	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00179	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017c	8b 12		 mov	 edx, DWORD PTR [edx]
  0017e	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00184	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00187	ff d0		 call	 eax
$LN8@InsertDist:

; 2267 : 	}
; 2268 : 
; 2269 : 	return true;

  00189	b0 01		 mov	 al, 1
$LN1@InsertDist:

; 2270 : }

  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5b		 pop	 ebx
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 04 00	 ret	 4
?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::InsertDistribute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::RemoveDistribute, COMDAT
; _this$ = ecx

; 2539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2540 : 	//验证参数
; 2541 : 	ASSERT(pIServerUserItem!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@RemoveDist
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN4@RemoveDist
  00029	cc		 int	 3
$LN4@RemoveDist:

; 2542 : 	if (pIServerUserItem==NULL) return false;

  0002a	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0002e	75 04		 jne	 SHORT $LN2@RemoveDist
  00030	32 c0		 xor	 al, al
  00032	eb 11		 jmp	 SHORT $LN1@RemoveDist
$LN2@RemoveDist:

; 2543 : 
; 2544 : 	//移除用户
; 2545 : 	m_DistributeManage.RemoveDistributeNode(pIServerUserItem);

  00034	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00037	50		 push	 eax
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	83 c1 18	 add	 ecx, 24			; 00000018H
  0003e	e8 00 00 00 00	 call	 ?RemoveDistributeNode@CDistributeManager@@QAEXPAUIServerUserItem@@@Z ; CDistributeManager::RemoveDistributeNode

; 2546 : 
; 2547 : 	return true;

  00043	b0 01		 mov	 al, 1
$LN1@RemoveDist:

; 2548 : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::RemoveDistribute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?InsertSameTableUser@CLockTimeMatch@@IAEXKK@Z
_TEXT	SEGMENT
_pSameTableInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
_dwTableUserID$ = 12					; size = 4
?InsertSameTableUser@CLockTimeMatch@@IAEXKK@Z PROC	; CLockTimeMatch::InsertSameTableUser, COMDAT
; _this$ = ecx

; 2287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2288 : 	//变量定义
; 2289 : 	tagSameTableInfo * pSameTableInfo = m_DistributeManage.GetUserSameTableInfo(dwUserID);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e8 00 00 00 00	 call	 ?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z ; CDistributeManager::GetUserSameTableInfo
  0001b	89 45 f8	 mov	 DWORD PTR _pSameTableInfo$[ebp], eax

; 2290 : 	if(pSameTableInfo!=NULL)

  0001e	83 7d f8 00	 cmp	 DWORD PTR _pSameTableInfo$[ebp], 0
  00022	74 20		 je	 SHORT $LN1@InsertSame

; 2291 : 	{
; 2292 : 		//添加用户
; 2293 : 		pSameTableInfo->wPlayerIDSet[pSameTableInfo->wPlayerCount++] = dwTableUserID;

  00024	8b 45 f8	 mov	 eax, DWORD PTR _pSameTableInfo$[ebp]
  00027	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _pSameTableInfo$[ebp]
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _dwTableUserID$[ebp]
  00030	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _pSameTableInfo$[ebp]
  00037	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0003a	66 83 c2 01	 add	 dx, 1
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _pSameTableInfo$[ebp]
  00041	66 89 10	 mov	 WORD PTR [eax], dx
$LN1@InsertSame:

; 2294 : 	}
; 2295 : 
; 2296 : 	return;
; 2297 : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?InsertSameTableUser@CLockTimeMatch@@IAEXKK@Z ENDP	; CLockTimeMatch::InsertSameTableUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?ClearSameTableUser@CLockTimeMatch@@IAEXK@Z
_TEXT	SEGMENT
_pSameTableInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?ClearSameTableUser@CLockTimeMatch@@IAEXK@Z PROC	; CLockTimeMatch::ClearSameTableUser, COMDAT
; _this$ = ecx

; 2275 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2276 : 	//变量定义
; 2277 : 	tagSameTableInfo * pSameTableInfo = m_DistributeManage.GetUserSameTableInfo(dwUserID);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e8 00 00 00 00	 call	 ?GetUserSameTableInfo@CDistributeManager@@QAEPAUtagSameTableInfo@@K@Z ; CDistributeManager::GetUserSameTableInfo
  0001b	89 45 f8	 mov	 DWORD PTR _pSameTableInfo$[ebp], eax

; 2278 : 	if(pSameTableInfo!=NULL)

  0001e	83 7d f8 00	 cmp	 DWORD PTR _pSameTableInfo$[ebp], 0
  00022	74 1b		 je	 SHORT $LN1@ClearSameT

; 2279 : 	{
; 2280 : 		pSameTableInfo->wPlayerCount=0;

  00024	33 c0		 xor	 eax, eax
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _pSameTableInfo$[ebp]
  00029	66 89 01	 mov	 WORD PTR [ecx], ax

; 2281 : 		ZeroMemory(pSameTableInfo->wPlayerIDSet,sizeof(pSameTableInfo->wPlayerIDSet));

  0002c	6a 40		 push	 64			; 00000040H
  0002e	6a 00		 push	 0
  00030	8b 45 f8	 mov	 eax, DWORD PTR _pSameTableInfo$[ebp]
  00033	83 c0 04	 add	 eax, 4
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memset
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ClearSameT:

; 2282 : 	}
; 2283 : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?ClearSameTableUser@CLockTimeMatch@@IAEXK@Z ENDP	; CLockTimeMatch::ClearSameTableUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnActionUserOnReady@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@PAXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wTableID$ = 8						; size = 2
_wChairID$ = 12						; size = 2
_pIServerUserItem$ = 16					; size = 4
_pData$ = 20						; size = 4
_wDataSize$ = 24					; size = 2
?OnActionUserOnReady@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@PAXG@Z PROC ; CLockTimeMatch::OnActionUserOnReady, COMDAT
; _this$ = ecx

; 1802 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1803 : 	return true; 

  0000c	b0 01		 mov	 al, 1

; 1804 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 14 00	 ret	 20			; 00000014H
?OnActionUserOnReady@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@PAXG@Z ENDP ; CLockTimeMatch::OnActionUserOnReady
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnActionUserStandUp@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z
_TEXT	SEGMENT
_pITableUserItem$1 = -16				; size = 4
_i$2 = -12						; size = 2
_pITableFrame$3 = -8					; size = 4
_this$ = -4						; size = 4
_wTableID$ = 8						; size = 2
_wChairID$ = 12						; size = 2
_pIServerUserItem$ = 16					; size = 4
_bLookonUser$ = 20					; size = 1
?OnActionUserStandUp@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z PROC ; CLockTimeMatch::OnActionUserStandUp, COMDAT
; _this$ = ecx

; 1764 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1765 : 	//旁观判断
; 1766 : 	if (bLookonUser==false)

  0000c	0f b6 45 14	 movzx	 eax, BYTE PTR _bLookonUser$[ebp]
  00010	85 c0		 test	 eax, eax
  00012	0f 85 1e 01 00
	00		 jne	 $LN5@OnActionUs

; 1767 : 	{
; 1768 : 		//移除分组
; 1769 : 		RemoveDistribute(pIServerUserItem);

  00018	8b 45 10	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 e9 04	 sub	 ecx, 4
  00022	e8 00 00 00 00	 call	 ?RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::RemoveDistribute

; 1770 : 
; 1771 : 		//判断桌号
; 1772 : 		if (wTableID<m_pGameServiceOption->wTableCount)

  00027	0f b7 45 08	 movzx	 eax, WORD PTR _wTableID$[ebp]
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00031	0f b7 4a 46	 movzx	 ecx, WORD PTR [edx+70]
  00035	3b c1		 cmp	 eax, ecx
  00037	0f 8d f9 00 00
	00		 jge	 $LN5@OnActionUs

; 1773 : 		{
; 1774 : 			//获取桌子
; 1775 : 			ITableFrame * pITableFrame=m_ppITableFrame[wTableID];

  0003d	0f b7 45 08	 movzx	 eax, WORD PTR _wTableID$[ebp]
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  0004a	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0004d	89 45 f8	 mov	 DWORD PTR _pITableFrame$3[ebp], eax

; 1776 : 			if (pITableFrame==NULL ) return false;

  00050	83 7d f8 00	 cmp	 DWORD PTR _pITableFrame$3[ebp], 0
  00054	75 07		 jne	 SHORT $LN7@OnActionUs
  00056	32 c0		 xor	 al, al
  00058	e9 db 00 00 00	 jmp	 $LN1@OnActionUs
$LN7@OnActionUs:

; 1777 : 			if (pITableFrame->GetGameStatus()>=GAME_STATUS_PLAY) return true;

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _pITableFrame$3[ebp]
  00060	8b 10		 mov	 edx, DWORD PTR [eax]
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _pITableFrame$3[ebp]
  00065	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00068	ff d0		 call	 eax
  0006a	0f b6 c8	 movzx	 ecx, al
  0006d	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00070	7c 07		 jl	 SHORT $LN8@OnActionUs
  00072	b0 01		 mov	 al, 1
  00074	e9 bf 00 00 00	 jmp	 $LN1@OnActionUs
$LN8@OnActionUs:

; 1778 : 
; 1779 : 			//插入分组
; 1780 : 			for (WORD i=0;i<m_pGameServiceAttrib->wChairCount;i++)

  00079	33 c0		 xor	 eax, eax
  0007b	66 89 45 f4	 mov	 WORD PTR _i$2[ebp], ax
  0007f	eb 0c		 jmp	 SHORT $LN4@OnActionUs
$LN2@OnActionUs:
  00081	66 8b 45 f4	 mov	 ax, WORD PTR _i$2[ebp]
  00085	66 83 c0 01	 add	 ax, 1
  00089	66 89 45 f4	 mov	 WORD PTR _i$2[ebp], ax
$LN4@OnActionUs:
  0008d	0f b7 45 f4	 movzx	 eax, WORD PTR _i$2[ebp]
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  00097	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  0009b	3b c1		 cmp	 eax, ecx
  0009d	0f 8d 93 00 00
	00		 jge	 $LN5@OnActionUs

; 1781 : 			{
; 1782 : 				IServerUserItem * pITableUserItem=pITableFrame->GetTableUserItem(i);

  000a3	0f b7 45 f4	 movzx	 eax, WORD PTR _i$2[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _pITableFrame$3[ebp]
  000ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _pITableFrame$3[ebp]
  000b0	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  000b6	ff d0		 call	 eax
  000b8	89 45 f0	 mov	 DWORD PTR _pITableUserItem$1[ebp], eax

; 1783 : 				if (pITableUserItem==NULL) continue;

  000bb	83 7d f0 00	 cmp	 DWORD PTR _pITableUserItem$1[ebp], 0
  000bf	75 02		 jne	 SHORT $LN9@OnActionUs
  000c1	eb be		 jmp	 SHORT $LN2@OnActionUs
$LN9@OnActionUs:

; 1784 : 				if (pITableUserItem->GetUserStatus()!=US_READY) continue;			

  000c3	8b 45 f0	 mov	 eax, DWORD PTR _pITableUserItem$1[ebp]
  000c6	8b 10		 mov	 edx, DWORD PTR [eax]
  000c8	8b 4d f0	 mov	 ecx, DWORD PTR _pITableUserItem$1[ebp]
  000cb	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  000ce	ff d0		 call	 eax
  000d0	0f b6 c8	 movzx	 ecx, al
  000d3	83 f9 03	 cmp	 ecx, 3
  000d6	74 02		 je	 SHORT $LN10@OnActionUs
  000d8	eb a7		 jmp	 SHORT $LN2@OnActionUs
$LN10@OnActionUs:

; 1785 : 
; 1786 : 				//插入分组
; 1787 : 				if (InsertDistribute(pITableUserItem)==true)

  000da	8b 45 f0	 mov	 eax, DWORD PTR _pITableUserItem$1[ebp]
  000dd	50		 push	 eax
  000de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	83 e9 04	 sub	 ecx, 4
  000e4	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute
  000e9	0f b6 c8	 movzx	 ecx, al
  000ec	83 f9 01	 cmp	 ecx, 1
  000ef	75 40		 jne	 SHORT $LN11@OnActionUs

; 1788 : 				{
; 1789 : 					//设置状态
; 1790 : 					pITableUserItem->SetUserStatus(US_SIT,wTableID,i);

  000f1	0f b7 45 f4	 movzx	 eax, WORD PTR _i$2[ebp]
  000f5	50		 push	 eax
  000f6	0f b7 4d 08	 movzx	 ecx, WORD PTR _wTableID$[ebp]
  000fa	51		 push	 ecx
  000fb	6a 02		 push	 2
  000fd	8b 55 f0	 mov	 edx, DWORD PTR _pITableUserItem$1[ebp]
  00100	8b 02		 mov	 eax, DWORD PTR [edx]
  00102	8b 4d f0	 mov	 ecx, DWORD PTR _pITableUserItem$1[ebp]
  00105	8b 90 fc 00 00
	00		 mov	 edx, DWORD PTR [eax+252]
  0010b	ff d2		 call	 edx

; 1791 : 					m_pIGameServiceFrame->SendGameMessage(pITableUserItem,TEXT("由于玩家离开，系统正在为您重新分配座位，请稍后..."),SMT_CHAT|SMT_TABLE_ROLL);

  0010d	6a 11		 push	 17			; 00000011H
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@JLJHDNKI@?S?I?S?Z?M?f?$LM?R?$MA?k?$LP?$KK?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?N?$KK?D?z?V?X?P?B?$LH@
  00114	8b 45 f0	 mov	 eax, DWORD PTR _pITableUserItem$1[ebp]
  00117	50		 push	 eax
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00121	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00124	8b 12		 mov	 edx, DWORD PTR [edx]
  00126	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0012c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0012f	ff d0		 call	 eax
$LN11@OnActionUs:

; 1792 : 				}
; 1793 : 			}

  00131	e9 4b ff ff ff	 jmp	 $LN2@OnActionUs
$LN5@OnActionUs:

; 1794 : 		}
; 1795 : 	}
; 1796 : 
; 1797 : 	return true;

  00136	b0 01		 mov	 al, 1
$LN1@OnActionUs:

; 1798 : }

  00138	5f		 pop	 edi
  00139	5e		 pop	 esi
  0013a	5b		 pop	 ebx
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 10 00	 ret	 16			; 00000010H
?OnActionUserStandUp@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z ENDP ; CLockTimeMatch::OnActionUserStandUp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnActionUserSitDown@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wTableID$ = 8						; size = 2
_wChairID$ = 12						; size = 2
_pIServerUserItem$ = 16					; size = 4
_bLookonUser$ = 20					; size = 1
?OnActionUserSitDown@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z PROC ; CLockTimeMatch::OnActionUserSitDown, COMDAT
; _this$ = ecx

; 1758 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1759 : 	return true; 

  0000c	b0 01		 mov	 al, 1

; 1760 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 10 00	 ret	 16			; 00000010H
?OnActionUserSitDown@CLockTimeMatch@@UAE_NGGPAUIServerUserItem@@_N@Z ENDP ; CLockTimeMatch::OnActionUserSitDown
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserReturnMatch@CLockTimeMatch@@UAE_NPAUITableFrame@@PAUIServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pITableFrame$ = 8					; size = 4
_pIServerUserItem$ = 12					; size = 4
?OnEventUserReturnMatch@CLockTimeMatch@@UAE_NPAUITableFrame@@PAUIServerUserItem@@@Z PROC ; CLockTimeMatch::OnEventUserReturnMatch, COMDAT
; _this$ = ecx

; 1749 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1750 : 	//发送比赛信息
; 1751 : 	SendTableUserMatchInfo(pITableFrame,pIServerUserItem->GetChairID());

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00014	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  00017	ff d0		 call	 eax
  00019	0f b7 c8	 movzx	 ecx, ax
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR _pITableFrame$[ebp]
  00020	52		 push	 edx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 e9 04	 sub	 ecx, 4
  00027	e8 00 00 00 00	 call	 ?SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z ; CLockTimeMatch::SendTableUserMatchInfo

; 1752 : 
; 1753 : 	return true;

  0002c	b0 01		 mov	 al, 1

; 1754 : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?OnEventUserReturnMatch@CLockTimeMatch@@UAE_NPAUITableFrame@@PAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::OnEventUserReturnMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z
_TEXT	SEGMENT
tv430 = -400						; size = 4
tv427 = -396						; size = 8
tv414 = -392						; size = 4
_MatchRecordGrades$1 = -324				; size = 32
_szMessage$2 = -292					; size = 128
_szMessage$3 = -164					; size = 128
_MatchQueryRevive$4 = -36				; size = 16
_cbUserMatchStatus$5 = -17				; size = 1
_pIUserItem$6 = -16					; size = 4
_i$7 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pITableFrame$ = 8					; size = 4
_wChairID$ = 12						; size = 2
_pIServerUserItem$ = 16					; size = 4
_cbReason$ = 20						; size = 1
?OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z PROC ; CLockTimeMatch::OnEventGameEnd, COMDAT
; _this$ = ecx

; 1646 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1647 : 	ASSERT(pITableFrame!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pITableFrame$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN17@OnEventGam
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z@4JA
  00024	83 c0 01	 add	 eax, 1
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN17@OnEventGam
  00036	cc		 int	 3
$LN17@OnEventGam:

; 1648 : 	if (pITableFrame==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pITableFrame$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN5@OnEventGam
  0003d	32 c0		 xor	 al, al
  0003f	e9 03 04 00 00	 jmp	 $LN1@OnEventGam
$LN5@OnEventGam:

; 1649 : 
; 1650 : 	//结束处理
; 1651 : 	for (INT i=0; i<pITableFrame->GetChairCount(); i++)

  00044	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  0004b	eb 09		 jmp	 SHORT $LN4@OnEventGam
$LN2@OnEventGam:
  0004d	8b 45 f4	 mov	 eax, DWORD PTR _i$7[ebp]
  00050	83 c0 01	 add	 eax, 1
  00053	89 45 f4	 mov	 DWORD PTR _i$7[ebp], eax
$LN4@OnEventGam:
  00056	8b 45 08	 mov	 eax, DWORD PTR _pITableFrame$[ebp]
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0005e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00061	ff d0		 call	 eax
  00063	0f b7 c8	 movzx	 ecx, ax
  00066	39 4d f4	 cmp	 DWORD PTR _i$7[ebp], ecx
  00069	0f 8d d6 03 00
	00		 jge	 $LN3@OnEventGam

; 1652 : 	{
; 1653 : 		IServerUserItem *pIUserItem=pITableFrame->GetTableUserItem(i);

  0006f	0f b7 45 f4	 movzx	 eax, WORD PTR _i$7[ebp]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0007c	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00082	ff d0		 call	 eax
  00084	89 45 f0	 mov	 DWORD PTR _pIUserItem$6[ebp], eax

; 1654 : 		//ASSERT(pIUserItem!=NULL);
; 1655 : 		if (pIUserItem==NULL) continue;

  00087	83 7d f0 00	 cmp	 DWORD PTR _pIUserItem$6[ebp], 0
  0008b	75 02		 jne	 SHORT $LN6@OnEventGam
  0008d	eb be		 jmp	 SHORT $LN2@OnEventGam
$LN6@OnEventGam:

; 1656 : 
; 1657 : 		//正常结束
; 1658 : 		if (cbReason!=REMOVE_BY_ENDMATCH)

  0008f	0f b6 45 14	 movzx	 eax, BYTE PTR _cbReason$[ebp]
  00093	3d fa 00 00 00	 cmp	 eax, 250		; 000000faH
  00098	0f 84 a2 03 00
	00		 je	 $LN7@OnEventGam

; 1659 : 		{
; 1660 : 			//达到淘汰线
; 1661 : 			if (m_pLockTimeMatch->lMatchCullScore>0 && pIUserItem->GetUserScore()<m_pLockTimeMatch->lMatchCullScore)

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000a4	89 8d 78 fe ff
	ff		 mov	 DWORD PTR tv414[ebp], ecx
  000aa	8b 95 78 fe ff
	ff		 mov	 edx, DWORD PTR tv414[ebp]
  000b0	83 7a 55 00	 cmp	 DWORD PTR [edx+85], 0
  000b4	0f 8c 34 01 00
	00		 jl	 $LN8@OnEventGam
  000ba	7f 10		 jg	 SHORT $LN18@OnEventGam
  000bc	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR tv414[ebp]
  000c2	83 78 51 00	 cmp	 DWORD PTR [eax+81], 0
  000c6	0f 86 22 01 00
	00		 jbe	 $LN8@OnEventGam
$LN18@OnEventGam:
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  000cf	8b 10		 mov	 edx, DWORD PTR [eax]
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  000d4	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  000da	ff d0		 call	 eax
  000dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  000e2	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv427[ebp], eax
  000e8	89 95 78 fe ff
	ff		 mov	 DWORD PTR tv427[ebp+4], edx
  000ee	89 8d 70 fe ff
	ff		 mov	 DWORD PTR tv430[ebp], ecx
  000f4	8b 95 70 fe ff
	ff		 mov	 edx, DWORD PTR tv430[ebp]
  000fa	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR tv427[ebp+4]
  00100	3b 42 55	 cmp	 eax, DWORD PTR [edx+85]
  00103	0f 8f e5 00 00
	00		 jg	 $LN8@OnEventGam
  00109	7c 15		 jl	 SHORT $LN19@OnEventGam
  0010b	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv430[ebp]
  00111	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR tv427[ebp]
  00117	3b 51 51	 cmp	 edx, DWORD PTR [ecx+81]
  0011a	0f 83 ce 00 00
	00		 jae	 $LN8@OnEventGam
$LN19@OnEventGam:

; 1662 : 			{
; 1663 : 				//设置状态
; 1664 : 				pIUserItem->SetUserMatchStatus(MUS_OUT);

  00120	6a 01		 push	 1
  00122	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  00125	8b 10		 mov	 edx, DWORD PTR [eax]
  00127	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  0012a	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  00130	ff d0		 call	 eax

; 1665 : 
; 1666 : 				//报名状态		
; 1667 : 				BYTE cbUserMatchStatus=pIUserItem->GetUserMatchStatus();

  00132	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  00135	8b 10		 mov	 edx, DWORD PTR [eax]
  00137	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  0013a	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00140	ff d0		 call	 eax
  00142	88 45 ef	 mov	 BYTE PTR _cbUserMatchStatus$5[ebp], al

; 1668 : 				m_pIGameServiceFrame->SendData(pIUserItem,MDM_GR_MATCH,SUB_GR_MATCH_USTATUS,&cbUserMatchStatus,sizeof(cbUserMatchStatus));

  00145	6a 01		 push	 1
  00147	8d 45 ef	 lea	 eax, DWORD PTR _cbUserMatchStatus$5[ebp]
  0014a	50		 push	 eax
  0014b	6a 0b		 push	 11			; 0000000bH
  0014d	6a 0a		 push	 10			; 0000000aH
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  00152	51		 push	 ecx
  00153	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00156	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0015c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	8b 10		 mov	 edx, DWORD PTR [eax]
  00161	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00167	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0016a	ff d0		 call	 eax

; 1669 : 
; 1670 : 				//淘汰提醒
; 1671 : 				if (m_pLockTimeMatch->cbReviveEnabled==TRUE)

  0016c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00172	0f b6 51 5d	 movzx	 edx, BYTE PTR [ecx+93]
  00176	83 fa 01	 cmp	 edx, 1
  00179	75 5f		 jne	 SHORT $LN9@OnEventGam

; 1672 : 				{
; 1673 : 					//构造结构
; 1674 : 					DBR_GR_MatchQueryRevive MatchQueryRevive;
; 1675 : 
; 1676 : 					//设置变量
; 1677 : 					MatchQueryRevive.dwUserID=pIUserItem->GetUserID();

  0017b	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  0017e	8b 10		 mov	 edx, DWORD PTR [eax]
  00180	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  00183	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00186	ff d0		 call	 eax
  00188	89 45 dc	 mov	 DWORD PTR _MatchQueryRevive$4[ebp], eax

; 1678 : 					MatchQueryRevive.dwMatchID=m_pMatchOption->dwMatchID;

  0018b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0018e	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00191	8b 11		 mov	 edx, DWORD PTR [ecx]
  00193	89 55 e0	 mov	 DWORD PTR _MatchQueryRevive$4[ebp+4], edx

; 1679 : 					MatchQueryRevive.lMatchNo=m_pMatchOption->lMatchNo;

  00196	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00199	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  0019c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0019f	89 55 e4	 mov	 DWORD PTR _MatchQueryRevive$4[ebp+8], edx
  001a2	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  001a5	89 45 e8	 mov	 DWORD PTR _MatchQueryRevive$4[ebp+12], eax

; 1680 : 
; 1681 : 
; 1682 : 					//投递数据
; 1683 : 					m_pIDataBaseEngine->PostDataBaseRequest(MatchQueryRevive.dwUserID,DBR_GR_MATCH_QUERY_REVIVE,0,&MatchQueryRevive,sizeof(MatchQueryRevive));

  001a8	6a 00		 push	 0
  001aa	6a 10		 push	 16			; 00000010H
  001ac	8d 45 dc	 lea	 eax, DWORD PTR _MatchQueryRevive$4[ebp]
  001af	50		 push	 eax
  001b0	6a 00		 push	 0
  001b2	68 62 02 00 00	 push	 610			; 00000262H
  001b7	8b 4d dc	 mov	 ecx, DWORD PTR _MatchQueryRevive$4[ebp]
  001ba	51		 push	 ecx
  001bb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001be	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  001c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  001cd	8b 00		 mov	 eax, DWORD PTR [eax]
  001cf	52		 push	 edx
  001d0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001d3	ff d1		 call	 ecx
  001d5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1684 : 				}
; 1685 : 				else

  001d8	eb 0f		 jmp	 SHORT $LN10@OnEventGam
$LN9@OnEventGam:

; 1686 : 				{
; 1687 : 					//淘汰提醒
; 1688 : 					SendEliminateNotify(pIUserItem);

  001da	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  001dd	50		 push	 eax
  001de	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e1	83 e9 04	 sub	 ecx, 4
  001e4	e8 00 00 00 00	 call	 ?SendEliminateNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendEliminateNotify
$LN10@OnEventGam:

; 1689 : 				}
; 1690 : 
; 1691 : 				continue;

  001e9	e9 5f fe ff ff	 jmp	 $LN2@OnEventGam
$LN8@OnEventGam:

; 1692 : 			}			
; 1693 : 
; 1694 : 			//完成局数
; 1695 : 			if (m_pMatchOption->cbRankingMode&RANKING_MODE_TOTAL_GRADES)

  001ee	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f1	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  001f4	0f b6 51 70	 movzx	 edx, BYTE PTR [ecx+112]
  001f8	83 e2 00	 and	 edx, 0
  001fb	0f 84 a3 00 00
	00		 je	 $LN11@OnEventGam

; 1696 : 			{
; 1697 : 				if (pIUserItem->GetUserPlayCount()-pIUserItem->GetUserInfo()->dwDrawCount==m_pLockTimeMatch->wMinPlayCount)

  00201	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  00204	8b 10		 mov	 edx, DWORD PTR [eax]
  00206	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  00209	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0020f	ff d0		 call	 eax
  00211	8b f0		 mov	 esi, eax
  00213	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  00216	8b 11		 mov	 edx, DWORD PTR [ecx]
  00218	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  0021b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0021e	ff d0		 call	 eax
  00220	2b b0 e0 00 00
	00		 sub	 esi, DWORD PTR [eax+224]
  00226	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  0022c	0f b7 42 59	 movzx	 eax, WORD PTR [edx+89]
  00230	3b f0		 cmp	 esi, eax
  00232	75 70		 jne	 SHORT $LN11@OnEventGam

; 1698 : 				{
; 1699 : 					TCHAR szMessage[128]=TEXT("");

  00234	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00239	88 85 5c ff ff
	ff		 mov	 BYTE PTR _szMessage$3[ebp], al
  0023f	6a 7f		 push	 127			; 0000007fH
  00241	6a 00		 push	 0
  00243	8d 85 5d ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp+1]
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 _memset
  0024f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1700 : 					_sntprintf_s(szMessage,CountArray(szMessage),TEXT("您已完成%d局比赛，可以继续当前比赛或选择退出等待本次比赛活动结束后排名！"),m_pLockTimeMatch->wMinPlayCount);

  00252	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00255	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00258	0f b7 51 59	 movzx	 edx, WORD PTR [ecx+89]
  0025c	52		 push	 edx
  0025d	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@COJNGGKL@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?$LP?I?R?T?$LM?L?P?x?$LF?$LB?G?$LA?$LB@
  00262	68 80 00 00 00	 push	 128			; 00000080H
  00267	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp]
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00273	83 c4 10	 add	 esp, 16			; 00000010H

; 1701 : 					m_pIGameServiceFrame->SendGameMessage(pIUserItem,szMessage,SMT_EJECT|SMT_CHAT|SMT_CLOSE_GAME);

  00276	68 03 02 00 00	 push	 515			; 00000203H
  0027b	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp]
  00281	50		 push	 eax
  00282	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  00285	51		 push	 ecx
  00286	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00289	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0028f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00292	8b 10		 mov	 edx, DWORD PTR [eax]
  00294	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  0029a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0029d	ff d0		 call	 eax

; 1702 : 
; 1703 : 					continue;

  0029f	e9 a9 fd ff ff	 jmp	 $LN2@OnEventGam
$LN11@OnEventGam:

; 1704 : 				}				
; 1705 : 			}
; 1706 : 
; 1707 : 			//特定局数
; 1708 : 			if (m_pMatchOption->cbRankingMode&RANKING_MODE_SPECIAL_GRADES)

  002a4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002a7	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  002aa	0f b6 51 70	 movzx	 edx, BYTE PTR [ecx+112]
  002ae	83 e2 01	 and	 edx, 1
  002b1	0f 84 4e 01 00
	00		 je	 $LN13@OnEventGam

; 1709 : 			{
; 1710 : 				if (pIUserItem->GetUserPlayCount()-pIUserItem->GetUserInfo()->dwDrawCount==m_pMatchOption->wCountInnings)

  002b7	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  002ba	8b 10		 mov	 edx, DWORD PTR [eax]
  002bc	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  002bf	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  002c5	ff d0		 call	 eax
  002c7	8b f0		 mov	 esi, eax
  002c9	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  002cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ce	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  002d1	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  002d4	ff d0		 call	 eax
  002d6	2b b0 e0 00 00
	00		 sub	 esi, DWORD PTR [eax+224]
  002dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002df	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  002e2	0f b7 42 72	 movzx	 eax, WORD PTR [edx+114]
  002e6	3b f0		 cmp	 esi, eax
  002e8	0f 85 17 01 00
	00		 jne	 $LN13@OnEventGam

; 1711 : 				{
; 1712 : 					TCHAR szMessage[128]=TEXT("");

  002ee	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  002f3	88 85 dc fe ff
	ff		 mov	 BYTE PTR _szMessage$2[ebp], al
  002f9	6a 7f		 push	 127			; 0000007fH
  002fb	6a 00		 push	 0
  002fd	8d 85 dd fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$2[ebp+1]
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 _memset
  00309	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1713 : 					_sntprintf_s(szMessage,CountArray(szMessage),TEXT("您已完成%d局比赛，系统将会记录您当前的成绩并重置比赛分，您可以继续当前比赛或选择退出等待本次比赛结束后查看排名！"),m_pMatchOption->wCountInnings);

  0030c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0030f	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00312	0f b7 51 72	 movzx	 edx, WORD PTR [ecx+114]
  00316	52		 push	 edx
  00317	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@JAGJBAEH@?D?z?R?Q?M?j?$LD?I?$CFd?$LO?V?$LB?H?H?$PM?$KD?$KM?O?$LF?M?$LD?$LN?$KL?$LL?a?$LM?G?B?$LM?D@
  0031c	68 80 00 00 00	 push	 128			; 00000080H
  00321	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$2[ebp]
  00327	50		 push	 eax
  00328	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  0032d	83 c4 10	 add	 esp, 16			; 00000010H

; 1714 : 					m_pIGameServiceFrame->SendGameMessage(pIUserItem,szMessage,SMT_EJECT|SMT_CHAT|SMT_CLOSE_GAME);

  00330	68 03 02 00 00	 push	 515			; 00000203H
  00335	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$2[ebp]
  0033b	50		 push	 eax
  0033c	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  0033f	51		 push	 ecx
  00340	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00343	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00349	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0034c	8b 10		 mov	 edx, DWORD PTR [eax]
  0034e	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00354	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00357	ff d0		 call	 eax

; 1715 : 
; 1716 : 					//发送分数
; 1717 : 					SendMatchUserInitScore(pIUserItem);

  00359	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  0035c	50		 push	 eax
  0035d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00360	83 e9 04	 sub	 ecx, 4
  00363	e8 00 00 00 00	 call	 ?SendMatchUserInitScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserInitScore

; 1718 : 
; 1719 : 					//构造结构
; 1720 : 					DBR_GR_MatchRecordGrades MatchRecordGrades;
; 1721 : 
; 1722 : 					//设置变量
; 1723 : 					MatchRecordGrades.dwUserID=pIUserItem->GetUserID();

  00368	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  0036b	8b 10		 mov	 edx, DWORD PTR [eax]
  0036d	8b 4d f0	 mov	 ecx, DWORD PTR _pIUserItem$6[ebp]
  00370	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00373	ff d0		 call	 eax
  00375	89 85 bc fe ff
	ff		 mov	 DWORD PTR _MatchRecordGrades$1[ebp], eax

; 1724 : 					MatchRecordGrades.dwMatchID=m_pMatchOption->dwMatchID;

  0037b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0037e	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00381	8b 11		 mov	 edx, DWORD PTR [ecx]
  00383	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _MatchRecordGrades$1[ebp+4], edx

; 1725 : 					MatchRecordGrades.lMatchNo=m_pMatchOption->lMatchNo;

  00389	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0038c	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  0038f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00392	89 95 cc fe ff
	ff		 mov	 DWORD PTR _MatchRecordGrades$1[ebp+16], edx
  00398	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0039b	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _MatchRecordGrades$1[ebp+20], eax

; 1726 : 					MatchRecordGrades.wServerID=m_pGameServiceOption->wServerID;

  003a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003a4	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  003a7	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  003ab	66 89 95 c4 fe
	ff ff		 mov	 WORD PTR _MatchRecordGrades$1[ebp+8], dx

; 1727 : 					MatchRecordGrades.lInitScore=m_pLockTimeMatch->lMatchInitScore;

  003b2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003b5	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  003b8	8b 51 49	 mov	 edx, DWORD PTR [ecx+73]
  003bb	89 95 d4 fe ff
	ff		 mov	 DWORD PTR _MatchRecordGrades$1[ebp+24], edx
  003c1	8b 41 4d	 mov	 eax, DWORD PTR [ecx+77]
  003c4	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _MatchRecordGrades$1[ebp+28], eax

; 1728 : 
; 1729 : 					//投递数据
; 1730 : 					m_pIDataBaseEngine->PostDataBaseRequest(MatchRecordGrades.dwUserID,DBR_GR_MATCH_RECORD_GRADES,0,&MatchRecordGrades,sizeof(MatchRecordGrades));

  003ca	6a 00		 push	 0
  003cc	6a 20		 push	 32			; 00000020H
  003ce	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _MatchRecordGrades$1[ebp]
  003d4	50		 push	 eax
  003d5	6a 00		 push	 0
  003d7	68 64 02 00 00	 push	 612			; 00000264H
  003dc	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _MatchRecordGrades$1[ebp]
  003e2	51		 push	 ecx
  003e3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003e6	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  003ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003ef	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  003f5	8b 00		 mov	 eax, DWORD PTR [eax]
  003f7	52		 push	 edx
  003f8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003fb	ff d1		 call	 ecx
  003fd	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1731 : 
; 1732 : 					continue;

  00400	e9 48 fc ff ff	 jmp	 $LN2@OnEventGam
$LN13@OnEventGam:

; 1733 : 				}				
; 1734 : 			}
; 1735 : 
; 1736 : 			//插入分组
; 1737 : 			if (InsertDistribute(pIUserItem)==true)

  00405	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  00408	50		 push	 eax
  00409	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0040c	83 e9 04	 sub	 ecx, 4
  0040f	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute
  00414	0f b6 c8	 movzx	 ecx, al
  00417	83 f9 01	 cmp	 ecx, 1
  0041a	75 24		 jne	 SHORT $LN7@OnEventGam

; 1738 : 			{
; 1739 : 				m_pIGameServiceFrame->SendGameMessage(pIUserItem,TEXT("本局比赛结束，系统正在努力为您分配座位，请稍后..."),SMT_CHAT|SMT_TABLE_ROLL);

  0041c	6a 11		 push	 17			; 00000011H
  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KHAHGIHK@?$LB?$LO?$LO?V?$LB?H?H?$PM?$LN?a?J?x?$KD?$KM?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH@
  00423	8b 45 f0	 mov	 eax, DWORD PTR _pIUserItem$6[ebp]
  00426	50		 push	 eax
  00427	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0042a	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00430	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00433	8b 12		 mov	 edx, DWORD PTR [edx]
  00435	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0043b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0043e	ff d0		 call	 eax
$LN7@OnEventGam:

; 1740 : 			}
; 1741 : 		}
; 1742 : 	}

  00440	e9 08 fc ff ff	 jmp	 $LN2@OnEventGam
$LN3@OnEventGam:

; 1743 : 
; 1744 : 	return true;

  00445	b0 01		 mov	 al, 1
$LN1@OnEventGam:

; 1745 : }

  00447	5f		 pop	 edi
  00448	5e		 pop	 esi
  00449	5b		 pop	 ebx
  0044a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044d	33 cd		 xor	 ecx, ebp
  0044f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00454	8b e5		 mov	 esp, ebp
  00456	5d		 pop	 ebp
  00457	c2 10 00	 ret	 16			; 00000010H
?OnEventGameEnd@CLockTimeMatch@@UAE_NPAUITableFrame@@GPAUIServerUserItem@@E@Z ENDP ; CLockTimeMatch::OnEventGameEnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventGameStart@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z
_TEXT	SEGMENT
_j$1 = -1120						; size = 4
_wSendSize$2 = -1116					; size = 2
_szMessage$3 = -1112					; size = 64
_i$4 = -1048						; size = 4
_pITableUserItem$ = -1044				; size = 4
_pIServerUserItem$ = -1040				; size = 4
_SystemMessage$ = -1036					; size = 1028
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pITableFrame$ = 8					; size = 4
_wChairCount$ = 12					; size = 2
?OnEventGameStart@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z PROC ; CLockTimeMatch::OnEventGameStart, COMDAT
; _this$ = ecx

; 1597 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 05 00
	00		 sub	 esp, 1312		; 00000520H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1598 : 	//发送比赛信息
; 1599 : 	SendTableUserMatchInfo(pITableFrame, INVALID_CHAIR);

  00019	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0001e	8b 45 08	 mov	 eax, DWORD PTR _pITableFrame$[ebp]
  00021	50		 push	 eax
  00022	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 e9 04	 sub	 ecx, 4
  00028	e8 00 00 00 00	 call	 ?SendTableUserMatchInfo@CLockTimeMatch@@IAEXPAUITableFrame@@G@Z ; CLockTimeMatch::SendTableUserMatchInfo

; 1600 : 
; 1601 : 	//构造数据包
; 1602 : 	CMD_CM_SystemMessage SystemMessage;
; 1603 : 	ZeroMemory(&SystemMessage,sizeof(SystemMessage));

  0002d	68 04 04 00 00	 push	 1028			; 00000404H
  00032	6a 00		 push	 0
  00034	8d 85 f4 fb ff
	ff		 lea	 eax, DWORD PTR _SystemMessage$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1604 : 
; 1605 : 	//变量定义
; 1606 : 	IServerUserItem *pIServerUserItem=NULL;

  00043	c7 85 f0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIServerUserItem$[ebp], 0

; 1607 : 	IServerUserItem *pITableUserItem=NULL;	

  0004d	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pITableUserItem$[ebp], 0

; 1608 : 
; 1609 : 	for (INT i=0; i<pITableFrame->GetChairCount(); i++)

  00057	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$4[ebp], 0
  00061	eb 0f		 jmp	 SHORT $LN4@OnEventGam
$LN2@OnEventGam:
  00063	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00069	83 c0 01	 add	 eax, 1
  0006c	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN4@OnEventGam:
  00072	8b 45 08	 mov	 eax, DWORD PTR _pITableFrame$[ebp]
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0007a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0007d	ff d0		 call	 eax
  0007f	0f b7 c8	 movzx	 ecx, ax
  00082	39 8d e8 fb ff
	ff		 cmp	 DWORD PTR _i$4[ebp], ecx
  00088	0f 8d c6 01 00
	00		 jge	 $LN3@OnEventGam

; 1610 : 	{
; 1611 : 		pIServerUserItem=pITableFrame->GetTableUserItem(i);

  0008e	0f b7 85 e8 fb
	ff ff		 movzx	 eax, WORD PTR _i$4[ebp]
  00095	50		 push	 eax
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0009e	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  000a4	ff d0		 call	 eax
  000a6	89 85 f0 fb ff
	ff		 mov	 DWORD PTR _pIServerUserItem$[ebp], eax

; 1612 : 		//ASSERT(pIServerUserItem!=NULL);
; 1613 : 		if (pIServerUserItem==NULL) continue;

  000ac	83 bd f0 fb ff
	ff 00		 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  000b3	75 02		 jne	 SHORT $LN8@OnEventGam
  000b5	eb ac		 jmp	 SHORT $LN2@OnEventGam
$LN8@OnEventGam:

; 1614 : 
; 1615 : 		//构造提示消息
; 1616 : 		TCHAR szMessage[64];
; 1617 : 		_sntprintf_s(szMessage,CountArray(szMessage),TEXT("本局比赛是您的第 %d 局。"),pIServerUserItem->GetUserPlayCount()-pIServerUserItem->GetUserInfo()->dwDrawCount+1);

  000b7	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000bd	8b 10		 mov	 edx, DWORD PTR [eax]
  000bf	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000c5	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  000cb	ff d0		 call	 eax
  000cd	8b f0		 mov	 esi, eax
  000cf	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000d5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d7	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000dd	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000e0	ff d0		 call	 eax
  000e2	2b b0 e0 00 00
	00		 sub	 esi, DWORD PTR [eax+224]
  000e8	83 c6 01	 add	 esi, 1
  000eb	56		 push	 esi
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CODAEBJM@?$LB?$LO?$LO?V?$LB?H?H?$PM?J?G?D?z?$LF?D?$LF?Z?5?$CFd?5?$LO?V?$KB?$KD@
  000f1	6a 40		 push	 64			; 00000040H
  000f3	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR _szMessage$3[ebp]
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ; _snprintf_s<64>
  000ff	83 c4 10	 add	 esp, 16			; 00000010H

; 1618 : 		lstrcpyn(SystemMessage.szString,szMessage,CountArray(SystemMessage.szString));

  00102	68 00 04 00 00	 push	 1024			; 00000400H
  00107	8d 85 a8 fb ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _SystemMessage$[ebp+4]
  00114	51		 push	 ecx
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1619 : 		SystemMessage.wLength=CountStringBuffer(SystemMessage.szString);

  0011b	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _SystemMessage$[ebp+4]
  00121	50		 push	 eax
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00128	83 c0 01	 add	 eax, 1
  0012b	66 89 85 f6 fb
	ff ff		 mov	 WORD PTR _SystemMessage$[ebp+2], ax

; 1620 : 		SystemMessage.wType=SMT_CHAT;

  00132	b8 01 00 00 00	 mov	 eax, 1
  00137	66 89 85 f4 fb
	ff ff		 mov	 WORD PTR _SystemMessage$[ebp], ax

; 1621 : 
; 1622 : 		//发送提示数据
; 1623 : 		WORD wSendSize=sizeof(SystemMessage)-sizeof(SystemMessage.szString)+SystemMessage.wLength*sizeof(TCHAR);

  0013e	0f b7 85 f6 fb
	ff ff		 movzx	 eax, WORD PTR _SystemMessage$[ebp+2]
  00145	83 c0 04	 add	 eax, 4
  00148	66 89 85 a4 fb
	ff ff		 mov	 WORD PTR _wSendSize$2[ebp], ax

; 1624 : 		pITableFrame->SendTableData(pIServerUserItem->GetChairID(),SUB_GF_SYSTEM_MESSAGE, &SystemMessage,wSendSize,MDM_GF_FRAME);

  0014f	6a 64		 push	 100			; 00000064H
  00151	0f b7 85 a4 fb
	ff ff		 movzx	 eax, WORD PTR _wSendSize$2[ebp]
  00158	50		 push	 eax
  00159	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR _SystemMessage$[ebp]
  0015f	51		 push	 ecx
  00160	68 c8 00 00 00	 push	 200			; 000000c8H
  00165	8b 95 f0 fb ff
	ff		 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  0016b	8b 02		 mov	 eax, DWORD PTR [edx]
  0016d	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00173	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  00176	ff d2		 call	 edx
  00178	0f b7 c0	 movzx	 eax, ax
  0017b	50		 push	 eax
  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  0017f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  00184	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0018a	ff d0		 call	 eax

; 1625 : 
; 1626 : 		//清除同桌
; 1627 : 		ClearSameTableUser(pIServerUserItem->GetUserID());

  0018c	8b 85 f0 fb ff
	ff		 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00192	8b 10		 mov	 edx, DWORD PTR [eax]
  00194	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0019a	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0019d	ff d0		 call	 eax
  0019f	50		 push	 eax
  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	83 e9 04	 sub	 ecx, 4
  001a6	e8 00 00 00 00	 call	 ?ClearSameTableUser@CLockTimeMatch@@IAEXK@Z ; CLockTimeMatch::ClearSameTableUser

; 1628 : 
; 1629 : 		for (INT j=0; j<pITableFrame->GetChairCount(); j++)

  001ab	c7 85 a0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$1[ebp], 0
  001b5	eb 0f		 jmp	 SHORT $LN7@OnEventGam
$LN5@OnEventGam:
  001b7	8b 85 a0 fb ff
	ff		 mov	 eax, DWORD PTR _j$1[ebp]
  001bd	83 c0 01	 add	 eax, 1
  001c0	89 85 a0 fb ff
	ff		 mov	 DWORD PTR _j$1[ebp], eax
$LN7@OnEventGam:
  001c6	8b 45 08	 mov	 eax, DWORD PTR _pITableFrame$[ebp]
  001c9	8b 10		 mov	 edx, DWORD PTR [eax]
  001cb	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  001ce	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001d1	ff d0		 call	 eax
  001d3	0f b7 c8	 movzx	 ecx, ax
  001d6	39 8d a0 fb ff
	ff		 cmp	 DWORD PTR _j$1[ebp], ecx
  001dc	7d 71		 jge	 SHORT $LN6@OnEventGam

; 1630 : 		{
; 1631 : 			//获取用户
; 1632 : 			pITableUserItem=pITableFrame->GetTableUserItem(j);

  001de	0f b7 85 a0 fb
	ff ff		 movzx	 eax, WORD PTR _j$1[ebp]
  001e5	50		 push	 eax
  001e6	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  001e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001eb	8b 4d 08	 mov	 ecx, DWORD PTR _pITableFrame$[ebp]
  001ee	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  001f4	ff d0		 call	 eax
  001f6	89 85 ec fb ff
	ff		 mov	 DWORD PTR _pITableUserItem$[ebp], eax

; 1633 : 			if(pITableUserItem==NULL) continue;

  001fc	83 bd ec fb ff
	ff 00		 cmp	 DWORD PTR _pITableUserItem$[ebp], 0
  00203	75 02		 jne	 SHORT $LN9@OnEventGam
  00205	eb b0		 jmp	 SHORT $LN5@OnEventGam
$LN9@OnEventGam:

; 1634 : 			if(pITableUserItem==pIServerUserItem) continue;

  00207	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pITableUserItem$[ebp]
  0020d	3b 85 f0 fb ff
	ff		 cmp	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00213	75 02		 jne	 SHORT $LN10@OnEventGam
  00215	eb a0		 jmp	 SHORT $LN5@OnEventGam
$LN10@OnEventGam:

; 1635 : 
; 1636 : 			//插入同桌用户
; 1637 : 			InsertSameTableUser(pIServerUserItem->GetUserID(),pITableUserItem->GetUserID());

  00217	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _pITableUserItem$[ebp]
  0021d	8b 10		 mov	 edx, DWORD PTR [eax]
  0021f	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _pITableUserItem$[ebp]
  00225	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00228	ff d0		 call	 eax
  0022a	50		 push	 eax
  0022b	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00231	8b 11		 mov	 edx, DWORD PTR [ecx]
  00233	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00239	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0023c	ff d0		 call	 eax
  0023e	50		 push	 eax
  0023f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00242	83 e9 04	 sub	 ecx, 4
  00245	e8 00 00 00 00	 call	 ?InsertSameTableUser@CLockTimeMatch@@IAEXKK@Z ; CLockTimeMatch::InsertSameTableUser

; 1638 : 		}

  0024a	e9 68 ff ff ff	 jmp	 $LN5@OnEventGam
$LN6@OnEventGam:

; 1639 : 	}

  0024f	e9 0f fe ff ff	 jmp	 $LN2@OnEventGam
$LN3@OnEventGam:

; 1640 : 
; 1641 : 	return true;

  00254	b0 01		 mov	 al, 1

; 1642 : }

  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	5b		 pop	 ebx
  00259	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025c	33 cd		 xor	 ecx, ebp
  0025e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00263	8b e5		 mov	 esp, ebp
  00265	5d		 pop	 ebp
  00266	c2 08 00	 ret	 8
?OnEventGameStart@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z ENDP ; CLockTimeMatch::OnEventGameStart
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z
_TEXT	SEGMENT
tv222 = -148						; size = 4
_MatchUnSignup$1 = -80					; size = 72
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
_pBestRank$ = 16					; size = 4
_dwContextID$ = 20					; size = 4
?OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z PROC ; CLockTimeMatch::OnEventUserQuitMatch, COMDAT
; _this$ = ecx

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1543 : 	ASSERT(pIServerUserItem!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN8@OnEventUse
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA
  00024	83 c0 01	 add	 eax, 1
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN8@OnEventUse
  00036	cc		 int	 3
$LN8@OnEventUse:

; 1544 : 	if (pIServerUserItem==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN2@OnEventUse
  0003d	32 c0		 xor	 al, al
  0003f	e9 8d 01 00 00	 jmp	 $LN1@OnEventUse
$LN2@OnEventUse:

; 1545 : 
; 1546 : 	//判断比赛状态
; 1547 : 	if (pIServerUserItem->GetUserMatchStatus()==MUS_SIGNUPED)

  00044	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0004c	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00052	ff d0		 call	 eax
  00054	0f b6 c8	 movzx	 ecx, al
  00057	83 f9 02	 cmp	 ecx, 2
  0005a	75 07		 jne	 SHORT $LN3@OnEventUse

; 1548 : 	{
; 1549 : 		return true;

  0005c	b0 01		 mov	 al, 1
  0005e	e9 6e 01 00 00	 jmp	 $LN1@OnEventUse
$LN3@OnEventUse:

; 1550 : 	}
; 1551 : 
; 1552 : 	//正在游戏状态
; 1553 : 	if (pIServerUserItem->GetUserStatus()>=US_PLAYING)

  00063	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00066	8b 10		 mov	 edx, DWORD PTR [eax]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0006b	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0006e	ff d0		 call	 eax
  00070	0f b6 c8	 movzx	 ecx, al
  00073	83 f9 05	 cmp	 ecx, 5
  00076	7c 07		 jl	 SHORT $LN4@OnEventUse

; 1554 : 	{
; 1555 : 		return true;

  00078	b0 01		 mov	 al, 1
  0007a	e9 52 01 00 00	 jmp	 $LN1@OnEventUse
$LN4@OnEventUse:

; 1556 : 	}
; 1557 : 
; 1558 : 	//已进行过比赛
; 1559 : 	if (pIServerUserItem->GetUserPlayCount()>0)

  0007f	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00082	8b 10		 mov	 edx, DWORD PTR [eax]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00087	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0008d	ff d0		 call	 eax
  0008f	85 c0		 test	 eax, eax
  00091	76 2b		 jbe	 SHORT $LN5@OnEventUse

; 1560 : 	{
; 1561 : 		//发送消息
; 1562 : 		m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("抱歉,您已参加过本场比赛，不能退赛！"),SMT_CHAT);

  00093	6a 01		 push	 1
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DMINAKJA@?$LB?$KH?G?$LI?0?D?z?R?Q?$LC?N?$LM?S?$LJ?$PN?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KD?$KM?$LC?$LL?D?$NM?M?K@
  0009a	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 12		 mov	 edx, DWORD PTR [edx]
  000ac	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000b2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000b5	ff d0		 call	 eax

; 1563 : 
; 1564 : 		return true;

  000b7	b0 01		 mov	 al, 1
  000b9	e9 13 01 00 00	 jmp	 $LN1@OnEventUse
$LN5@OnEventUse:

; 1565 : 	}
; 1566 : 	
; 1567 : 	//退还报名费
; 1568 : 	if(m_pMatchOption->lSignupFee>0 && !pIServerUserItem->IsAndroidUser())

  000be	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000c4	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv222[ebp], ecx
  000ca	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv222[ebp]
  000d0	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  000d4	0f 8c cd 00 00
	00		 jl	 $LN6@OnEventUse
  000da	7f 10		 jg	 SHORT $LN9@OnEventUse
  000dc	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv222[ebp]
  000e2	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  000e6	0f 86 bb 00 00
	00		 jbe	 $LN6@OnEventUse
$LN9@OnEventUse:
  000ec	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000ef	8b 10		 mov	 edx, DWORD PTR [eax]
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000f4	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  000fa	ff d0		 call	 eax
  000fc	0f b6 c8	 movzx	 ecx, al
  000ff	85 c9		 test	 ecx, ecx
  00101	0f 85 a0 00 00
	00		 jne	 $LN6@OnEventUse

; 1569 : 	{
; 1570 : 		//变量定义
; 1571 : 		DBR_GR_MatchUnSignup MatchUnSignup;
; 1572 : 		MatchUnSignup.dwReason=cbReason;

  00107	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbReason$[ebp]
  0010b	89 45 b0	 mov	 DWORD PTR _MatchUnSignup$1[ebp], eax

; 1573 : 		MatchUnSignup.dwUserID=pIServerUserItem->GetUserID();

  0010e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00111	8b 10		 mov	 edx, DWORD PTR [eax]
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00116	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00119	ff d0		 call	 eax
  0011b	89 45 b4	 mov	 DWORD PTR _MatchUnSignup$1[ebp+4], eax

; 1574 : 
; 1575 : 		//构造结构
; 1576 : 		MatchUnSignup.dwInoutIndex=pIServerUserItem->GetInoutIndex();

  0011e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00121	8b 10		 mov	 edx, DWORD PTR [eax]
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00126	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00129	ff d0		 call	 eax
  0012b	89 45 b8	 mov	 DWORD PTR _MatchUnSignup$1[ebp+8], eax

; 1577 : 		MatchUnSignup.dwClientAddr=pIServerUserItem->GetClientAddr();

  0012e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00131	8b 10		 mov	 edx, DWORD PTR [eax]
  00133	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00136	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00139	ff d0		 call	 eax
  0013b	89 45 bc	 mov	 DWORD PTR _MatchUnSignup$1[ebp+12], eax

; 1578 : 		MatchUnSignup.dwMatchID=m_pMatchOption->dwMatchID;

  0013e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00141	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00144	8b 11		 mov	 edx, DWORD PTR [ecx]
  00146	89 55 c0	 mov	 DWORD PTR _MatchUnSignup$1[ebp+16], edx

; 1579 : 		MatchUnSignup.lMatchNo=m_pMatchOption->lMatchNo;

  00149	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0014f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00152	89 55 c8	 mov	 DWORD PTR _MatchUnSignup$1[ebp+24], edx
  00155	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00158	89 45 cc	 mov	 DWORD PTR _MatchUnSignup$1[ebp+28], eax

; 1580 : 		lstrcpyn(MatchUnSignup.szMachineID,pIServerUserItem->GetMachineID(),CountArray(MatchUnSignup.szMachineID));

  0015b	6a 21		 push	 33			; 00000021H
  0015d	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00160	8b 10		 mov	 edx, DWORD PTR [eax]
  00162	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00165	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00168	ff d0		 call	 eax
  0016a	50		 push	 eax
  0016b	8d 4d d0	 lea	 ecx, DWORD PTR _MatchUnSignup$1[ebp+32]
  0016e	51		 push	 ecx
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1581 : 
; 1582 : 		//投递数据
; 1583 : 		m_pIDataBaseEngine->PostDataBaseRequest(MatchUnSignup.dwUserID,DBR_GR_MATCH_UNSIGNUP,dwContextID,&MatchUnSignup,sizeof(MatchUnSignup));

  00175	6a 00		 push	 0
  00177	6a 48		 push	 72			; 00000048H
  00179	8d 45 b0	 lea	 eax, DWORD PTR _MatchUnSignup$1[ebp]
  0017c	50		 push	 eax
  0017d	8b 4d 14	 mov	 ecx, DWORD PTR _dwContextID$[ebp]
  00180	51		 push	 ecx
  00181	68 59 02 00 00	 push	 601			; 00000259H
  00186	8b 55 b4	 mov	 edx, DWORD PTR _MatchUnSignup$1[ebp+4]
  00189	52		 push	 edx
  0018a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0018d	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00193	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00196	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0019c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0019e	50		 push	 eax
  0019f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001a2	ff d2		 call	 edx
  001a4	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN6@OnEventUse:

; 1584 : 	}
; 1585 : 
; 1586 : 	//移除分组
; 1587 : 	m_DistributeManage.RemoveDistributeNode(pIServerUserItem);

  001a7	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001aa	50		 push	 eax
  001ab	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ae	83 c1 18	 add	 ecx, 24			; 00000018H
  001b1	e8 00 00 00 00	 call	 ?RemoveDistributeNode@CDistributeManager@@QAEXPAUIServerUserItem@@@Z ; CDistributeManager::RemoveDistributeNode

; 1588 : 
; 1589 : 	//移除同桌信息
; 1590 : 	m_DistributeManage.RemoveUserSameTableInfo(pIServerUserItem->GetUserID());

  001b6	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001b9	8b 10		 mov	 edx, DWORD PTR [eax]
  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001be	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  001c1	ff d0		 call	 eax
  001c3	50		 push	 eax
  001c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	83 c1 18	 add	 ecx, 24			; 00000018H
  001ca	e8 00 00 00 00	 call	 ?RemoveUserSameTableInfo@CDistributeManager@@QAEXK@Z ; CDistributeManager::RemoveUserSameTableInfo

; 1591 : 
; 1592 : 	return true;

  001cf	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1593 : }

  001d1	5f		 pop	 edi
  001d2	5e		 pop	 esi
  001d3	5b		 pop	 ebx
  001d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d7	33 cd		 xor	 ecx, ebp
  001d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 10 00	 ret	 16			; 00000010H
?OnEventUserQuitMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z ENDP ; CLockTimeMatch::OnEventUserQuitMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z
_TEXT	SEGMENT
tv400 = -96						; size = 4
tv389 = -96						; size = 4
_cbSignupMode$1 = -25					; size = 1
_QueryMatchQualify$2 = -24				; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
_dwSocketID$ = 16					; size = 4
?OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z PROC ; CLockTimeMatch::OnEventUserJoinMatch, COMDAT
; _this$ = ecx

; 1430 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1431 : 	//参数校验
; 1432 : 	ASSERT(pIServerUserItem!=NULL);

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001a	75 18		 jne	 SHORT $LN20@OnEventUse
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA
  00021	83 c0 02	 add	 eax, 2
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002f	85 c0		 test	 eax, eax
  00031	74 01		 je	 SHORT $LN20@OnEventUse
  00033	cc		 int	 3
$LN20@OnEventUse:

; 1433 : 	if (pIServerUserItem == NULL) return false;

  00034	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00038	75 07		 jne	 SHORT $LN2@OnEventUse
  0003a	32 c0		 xor	 al, al
  0003c	e9 0c 03 00 00	 jmp	 $LN1@OnEventUse
$LN2@OnEventUse:

; 1434 : 
; 1435 : 	//判断状态
; 1436 : 	if(pIServerUserItem->GetUserStatus()!=US_FREE || pIServerUserItem->GetTableID()!=INVALID_TABLE)

  00041	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00044	8b 10		 mov	 edx, DWORD PTR [eax]
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00049	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0004c	ff d0		 call	 eax
  0004e	0f b6 c8	 movzx	 ecx, al
  00051	83 f9 01	 cmp	 ecx, 1
  00054	75 18		 jne	 SHORT $LN4@OnEventUse
  00056	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0005e	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00061	ff d0		 call	 eax
  00063	0f b7 c8	 movzx	 ecx, ax
  00066	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0006c	74 07		 je	 SHORT $LN3@OnEventUse
$LN4@OnEventUse:

; 1437 : 	{
; 1438 : 		return false;

  0006e	32 c0		 xor	 al, al
  00070	e9 d8 02 00 00	 jmp	 $LN1@OnEventUse
$LN3@OnEventUse:

; 1439 : 	}
; 1440 : 
; 1441 : 	//报名未开始
; 1442 : 	if (IsMatchSignupStart()==false)

  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?IsMatchSignupStart@CLockTimeMatch@@IAE_NXZ ; CLockTimeMatch::IsMatchSignupStart
  0007d	0f b6 c0	 movzx	 eax, al
  00080	85 c0		 test	 eax, eax
  00082	75 2b		 jne	 SHORT $LN5@OnEventUse

; 1443 : 	{
; 1444 : 		//发送消息
; 1445 : 		m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("报名尚未开始，请稍后再来！"),SMT_EJECT);

  00084	6a 02		 push	 2
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CKGEBLOB@?$LB?$KI?C?$PL?I?P?N?$LE?$LP?$KK?J?$LM?$KD?$KM?G?k?I?T?$LK?s?T?Y?$MA?$LE?$KD?$KB@
  0008b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00098	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 12		 mov	 edx, DWORD PTR [edx]
  0009d	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000a3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000a6	ff d0		 call	 eax

; 1446 : 
; 1447 : 		return true;

  000a8	b0 01		 mov	 al, 1
  000aa	e9 9e 02 00 00	 jmp	 $LN1@OnEventUse
$LN5@OnEventUse:

; 1448 : 	}
; 1449 : 
; 1450 : 	//报名已截止
; 1451 : 	if (IsMatchSignupEnd()==true && pIServerUserItem->GetUserMatchStatus()==MUS_NULL)

  000af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	e8 00 00 00 00	 call	 ?IsMatchSignupEnd@CLockTimeMatch@@IAE_NXZ ; CLockTimeMatch::IsMatchSignupEnd
  000b7	0f b6 c0	 movzx	 eax, al
  000ba	83 f8 01	 cmp	 eax, 1
  000bd	75 42		 jne	 SHORT $LN6@OnEventUse
  000bf	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000c2	8b 10		 mov	 edx, DWORD PTR [eax]
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000c7	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  000cd	ff d0		 call	 eax
  000cf	0f b6 c8	 movzx	 ecx, al
  000d2	85 c9		 test	 ecx, ecx
  000d4	75 2b		 jne	 SHORT $LN6@OnEventUse

; 1452 : 	{
; 1453 : 		//发送消息
; 1454 : 		m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("报名已经截止，请您移驾至其他比赛房间参与比赛！"),SMT_EJECT);

  000d6	6a 02		 push	 2
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@GPKKPIPC@?$LB?$KI?C?$PL?R?Q?$LO?$KN?$LN?X?V?$LJ?$KD?$KM?G?k?D?z?R?F?$LM?$NN?V?A?F?d?K?$PL?$LB?H?H@
  000dd	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000e0	50		 push	 eax
  000e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  000ea	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 12		 mov	 edx, DWORD PTR [edx]
  000ef	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000f5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000f8	ff d0		 call	 eax

; 1455 : 
; 1456 : 		return true;

  000fa	b0 01		 mov	 al, 1
  000fc	e9 4c 02 00 00	 jmp	 $LN1@OnEventUse
$LN6@OnEventUse:

; 1457 : 	}
; 1458 : 
; 1459 : 	//会员等级
; 1460 : 	if (m_pMatchOption->cbJoinCondition&MATCH_JOINCD_MEMBER_ORDER)

  00101	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00104	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00107	0f b6 51 41	 movzx	 edx, BYTE PTR [ecx+65]
  0010b	83 e2 01	 and	 edx, 1
  0010e	74 4c		 je	 SHORT $LN7@OnEventUse

; 1461 : 	{
; 1462 : 		if (m_pMatchOption->cbMemberOrder>pIServerUserItem->GetMemberOrder())

  00110	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00116	0f b6 71 42	 movzx	 esi, BYTE PTR [ecx+66]
  0011a	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  0011d	8b 02		 mov	 eax, DWORD PTR [edx]
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00122	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  00128	ff d2		 call	 edx
  0012a	0f b6 c0	 movzx	 eax, al
  0012d	3b f0		 cmp	 esi, eax
  0012f	7e 2b		 jle	 SHORT $LN7@OnEventUse

; 1463 : 		{
; 1464 : 			//发送消息
; 1465 : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("抱歉，您的会员等级达不到报名条件，报名失败！"),SMT_EJECT);

  00131	6a 02		 push	 2
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@
  00138	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00145	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00148	8b 12		 mov	 edx, DWORD PTR [edx]
  0014a	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00150	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00153	ff d0		 call	 eax

; 1466 : 
; 1467 : 			return true;

  00155	b0 01		 mov	 al, 1
  00157	e9 f1 01 00 00	 jmp	 $LN1@OnEventUse
$LN7@OnEventUse:

; 1468 : 		}
; 1469 : 	}
; 1470 : 
; 1471 : 	//经验等级
; 1472 : 	if (m_pMatchOption->cbJoinCondition&MATCH_JOINCD_EXPERIENCE)

  0015c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00162	0f b6 51 41	 movzx	 edx, BYTE PTR [ecx+65]
  00166	83 e2 02	 and	 edx, 2
  00169	74 49		 je	 SHORT $LN9@OnEventUse

; 1473 : 	{
; 1474 : 		if (m_pMatchOption->dwExperience>pIServerUserItem->GetUserInfo()->dwExperience)

  0016b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	8b 70 74	 mov	 esi, DWORD PTR [eax+116]
  00171	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00174	8b 11		 mov	 edx, DWORD PTR [ecx]
  00176	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00179	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0017c	ff d0		 call	 eax
  0017e	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00181	3b 88 ec 00 00
	00		 cmp	 ecx, DWORD PTR [eax+236]
  00187	76 2b		 jbe	 SHORT $LN9@OnEventUse

; 1475 : 		{
; 1476 : 			//发送消息
; 1477 : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("抱歉，您的经验值达不到报名条件，报名失败！"),SMT_EJECT);

  00189	6a 02		 push	 2
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@
  00190	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00193	50		 push	 eax
  00194	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0019d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a0	8b 12		 mov	 edx, DWORD PTR [edx]
  001a2	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001a8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  001ab	ff d0		 call	 eax

; 1478 : 
; 1479 : 			return true;

  001ad	b0 01		 mov	 al, 1
  001af	e9 99 01 00 00	 jmp	 $LN1@OnEventUse
$LN9@OnEventUse:

; 1480 : 		}
; 1481 : 	}
; 1482 : 
; 1483 : 	//判断状态
; 1484 : 	if (pIServerUserItem->GetUserMatchStatus()!=MUS_SIGNUPED)

  001b4	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001b7	8b 10		 mov	 edx, DWORD PTR [eax]
  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001bc	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  001c2	ff d0		 call	 eax
  001c4	0f b6 c8	 movzx	 ecx, al
  001c7	83 f9 02	 cmp	 ecx, 2
  001ca	0f 84 34 01 00
	00		 je	 $LN11@OnEventUse

; 1485 : 	{
; 1486 : 		//比赛用户
; 1487 : 		if (m_pMatchOption->cbSignupMode&SIGNUP_MODE_MATCH_USER)

  001d0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001d3	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001d6	0f b6 51 40	 movzx	 edx, BYTE PTR [ecx+64]
  001da	83 e2 02	 and	 edx, 2
  001dd	74 7d		 je	 SHORT $LN12@OnEventUse

; 1488 : 		{
; 1489 : 			if (pIServerUserItem->IsAndroidUser()==false)

  001df	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001e2	8b 10		 mov	 edx, DWORD PTR [eax]
  001e4	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001e7	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  001ed	ff d0		 call	 eax
  001ef	0f b6 c8	 movzx	 ecx, al
  001f2	85 c9		 test	 ecx, ecx
  001f4	75 66		 jne	 SHORT $LN12@OnEventUse

; 1490 : 			{
; 1491 : 				//构造结构
; 1492 : 				DBR_GR_QueryMatchQualify QueryMatchQualify;
; 1493 : 
; 1494 : 				//设置变量
; 1495 : 				QueryMatchQualify.lMatchNo=m_pMatchOption->lMatchNo;

  001f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001fc	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001ff	89 55 f0	 mov	 DWORD PTR _QueryMatchQualify$2[ebp+8], edx
  00202	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00205	89 45 f4	 mov	 DWORD PTR _QueryMatchQualify$2[ebp+12], eax

; 1496 : 				QueryMatchQualify.dwMatchID=m_pMatchOption->dwMatchID;				

  00208	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0020b	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0020e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00210	89 55 ec	 mov	 DWORD PTR _QueryMatchQualify$2[ebp+4], edx

; 1497 : 				QueryMatchQualify.dwUserID=pIServerUserItem->GetUserID();

  00213	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00216	8b 10		 mov	 edx, DWORD PTR [eax]
  00218	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0021b	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0021e	ff d0		 call	 eax
  00220	89 45 e8	 mov	 DWORD PTR _QueryMatchQualify$2[ebp], eax

; 1498 : 
; 1499 : 				//投递数据
; 1500 : 				m_pIDataBaseEngine->PostDataBaseRequest(QueryMatchQualify.dwUserID,DBR_GR_MATCH_QUERY_QUALIFY,dwSocketID,&QueryMatchQualify,sizeof(QueryMatchQualify));

  00223	6a 00		 push	 0
  00225	6a 10		 push	 16			; 00000010H
  00227	8d 45 e8	 lea	 eax, DWORD PTR _QueryMatchQualify$2[ebp]
  0022a	50		 push	 eax
  0022b	8b 4d 10	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  0022e	51		 push	 ecx
  0022f	68 5b 02 00 00	 push	 603			; 0000025bH
  00234	8b 55 e8	 mov	 edx, DWORD PTR _QueryMatchQualify$2[ebp]
  00237	52		 push	 edx
  00238	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0023b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00241	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00244	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0024a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0024c	50		 push	 eax
  0024d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00250	ff d2		 call	 edx
  00252	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1501 : 
; 1502 : 				return true;

  00255	b0 01		 mov	 al, 1
  00257	e9 f1 00 00 00	 jmp	 $LN1@OnEventUse
$LN12@OnEventUse:

; 1503 : 			}
; 1504 : 		}
; 1505 : 
; 1506 : 		//扣除报名费
; 1507 : 		if (m_pMatchOption->cbSignupMode&SIGNUP_MODE_SIGNUP_FEE)

  0025c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0025f	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00262	0f b6 51 40	 movzx	 edx, BYTE PTR [ecx+64]
  00266	83 e2 01	 and	 edx, 1
  00269	74 47		 je	 SHORT $LN14@OnEventUse

; 1508 : 		{			
; 1509 : 			//真人扣报名费
; 1510 : 			if(m_pMatchOption->lSignupFee>0 && pIServerUserItem->IsAndroidUser()==false)

  0026b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0026e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00271	89 4d a0	 mov	 DWORD PTR tv389[ebp], ecx
  00274	8b 55 a0	 mov	 edx, DWORD PTR tv389[ebp]
  00277	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  0027b	7c 35		 jl	 SHORT $LN14@OnEventUse
  0027d	7f 09		 jg	 SHORT $LN21@OnEventUse
  0027f	8b 45 a0	 mov	 eax, DWORD PTR tv389[ebp]
  00282	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00286	76 2a		 jbe	 SHORT $LN14@OnEventUse
$LN21@OnEventUse:
  00288	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0028b	8b 10		 mov	 edx, DWORD PTR [eax]
  0028d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00290	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00296	ff d0		 call	 eax
  00298	0f b6 c8	 movzx	 ecx, al
  0029b	85 c9		 test	 ecx, ecx
  0029d	75 13		 jne	 SHORT $LN14@OnEventUse

; 1511 : 			{
; 1512 : 				SendDeductFeeNotify(pIServerUserItem);

  0029f	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  002a2	50		 push	 eax
  002a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a6	e8 00 00 00 00	 call	 ?SendDeductFeeNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendDeductFeeNotify

; 1513 : 
; 1514 : 				return true;

  002ab	b0 01		 mov	 al, 1
  002ad	e9 9b 00 00 00	 jmp	 $LN1@OnEventUse
$LN14@OnEventUse:

; 1515 : 			}			
; 1516 : 		}		
; 1517 : 
; 1518 : 		//自动报名
; 1519 : 		if (m_pMatchOption->lSignupFee==0 || pIServerUserItem->IsAndroidUser()==true)

  002b2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002b5	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002b8	89 4d a0	 mov	 DWORD PTR tv400[ebp], ecx
  002bb	8b 55 a0	 mov	 edx, DWORD PTR tv400[ebp]
  002be	8b 45 a0	 mov	 eax, DWORD PTR tv400[ebp]
  002c1	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  002c4	0b 48 3c	 or	 ecx, DWORD PTR [eax+60]
  002c7	74 18		 je	 SHORT $LN17@OnEventUse
  002c9	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  002cc	8b 10		 mov	 edx, DWORD PTR [eax]
  002ce	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002d1	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  002d7	ff d0		 call	 eax
  002d9	0f b6 c8	 movzx	 ecx, al
  002dc	83 f9 01	 cmp	 ecx, 1
  002df	75 23		 jne	 SHORT $LN11@OnEventUse
$LN17@OnEventUse:

; 1520 : 		{
; 1521 : 			//报名方式
; 1522 : 			BYTE cbSignupMode=SIGNUP_MODE_SIGNUP_FEE;

  002e1	c6 45 e7 01	 mov	 BYTE PTR _cbSignupMode$1[ebp], 1

; 1523 : 
; 1524 : 			return OnEventSocketMatch(SUB_GR_MATCH_FEE,&cbSignupMode,sizeof(cbSignupMode),pIServerUserItem,dwSocketID);

  002e5	8b 45 10	 mov	 eax, DWORD PTR _dwSocketID$[ebp]
  002e8	50		 push	 eax
  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002ec	51		 push	 ecx
  002ed	6a 01		 push	 1
  002ef	8d 55 e7	 lea	 edx, DWORD PTR _cbSignupMode$1[ebp]
  002f2	52		 push	 edx
  002f3	6a 03		 push	 3
  002f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f8	8b 10		 mov	 edx, DWORD PTR [eax]
  002fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002fd	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00300	ff d0		 call	 eax
  00302	eb 49		 jmp	 SHORT $LN1@OnEventUse
$LN11@OnEventUse:

; 1525 : 		}
; 1526 : 	}
; 1527 : 
; 1528 : 	//加入分组
; 1529 : 	if (InsertDistribute(pIServerUserItem)==false) return false;

  00304	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00307	50		 push	 eax
  00308	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0030b	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute
  00310	0f b6 c8	 movzx	 ecx, al
  00313	85 c9		 test	 ecx, ecx
  00315	75 04		 jne	 SHORT $LN18@OnEventUse
  00317	32 c0		 xor	 al, al
  00319	eb 32		 jmp	 SHORT $LN1@OnEventUse
$LN18@OnEventUse:

; 1530 : 	
; 1531 : 	//发送成绩
; 1532 : 	SendMatchUserScore(pIServerUserItem);

  0031b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0031e	50		 push	 eax
  0031f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00322	e8 00 00 00 00	 call	 ?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserScore

; 1533 : 
; 1534 : 	//发送消息
; 1535 : 	m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("系统正在努力为您分配座位，请稍后。。。"),SMT_CHAT);

  00327	6a 01		 push	 1
  00329	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PBJGPBJH@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?I?T?$LK@
  0032e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00331	50		 push	 eax
  00332	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00335	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0033b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0033e	8b 12		 mov	 edx, DWORD PTR [edx]
  00340	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00346	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00349	ff d0		 call	 eax

; 1536 : 
; 1537 : 	return true;

  0034b	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1538 : }

  0034d	5f		 pop	 edi
  0034e	5e		 pop	 esi
  0034f	5b		 pop	 ebx
  00350	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00353	33 cd		 xor	 ecx, ebp
  00355	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0035a	8b e5		 mov	 esp, ebp
  0035c	5d		 pop	 ebp
  0035d	c2 0c 00	 ret	 12			; 0000000cH
?OnEventUserJoinMatch@CLockTimeMatch@@UAE_NPAUIServerUserItem@@EK@Z ENDP ; CLockTimeMatch::OnEventUserJoinMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventEnterMatch@CLockTimeMatch@@UAE_NKPAXK_N@Z
_TEXT	SEGMENT
tv80 = -549						; size = 1
_LogonUserID$1 = -484					; size = 104
_pLogonUserID$2 = -380					; size = 4
_LogonMobile$3 = -376					; size = 104
_pLogonMobile$4 = -272					; size = 4
_wMessageType$ = -268					; size = 2
_szDescribe$ = -264					; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dwSocketID$ = 8					; size = 4
_pData$ = 12						; size = 4
_dwUserIP$ = 16						; size = 4
_bIsMobile$ = 20					; size = 1
?OnEventEnterMatch@CLockTimeMatch@@UAE_NKPAXK_N@Z PROC	; CLockTimeMatch::OnEventEnterMatch, COMDAT
; _this$ = ecx

; 1364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1365 : 	//判断时间
; 1366 : 	TCHAR szDescribe[256];
; 1367 : 	WORD wMessageType;
; 1368 : 	if (VerifyMatchTime(szDescribe,CountArray(szDescribe),wMessageType)==false)

  00019	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _wMessageType$[ebp]
  0001f	50		 push	 eax
  00020	68 00 01 00 00	 push	 256			; 00000100H
  00025	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szDescribe$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?VerifyMatchTime@CLockTimeMatch@@AAE_NPADGAAG@Z ; CLockTimeMatch::VerifyMatchTime
  00034	0f b6 d0	 movzx	 edx, al
  00037	85 d2		 test	 edx, edx
  00039	75 54		 jne	 SHORT $LN2@OnEventEnt

; 1369 : 	{
; 1370 : 		m_pIGameServiceFrame->SendRoomMessage(dwSocketID,szDescribe,wMessageType|SMT_GLOBAL,dwUserIP==0);

  0003b	83 7d 10 00	 cmp	 DWORD PTR _dwUserIP$[ebp], 0
  0003f	75 09		 jne	 SHORT $LN6@OnEventEnt
  00041	c6 85 db fd ff
	ff 01		 mov	 BYTE PTR tv80[ebp], 1
  00048	eb 07		 jmp	 SHORT $LN7@OnEventEnt
$LN6@OnEventEnt:
  0004a	c6 85 db fd ff
	ff 00		 mov	 BYTE PTR tv80[ebp], 0
$LN7@OnEventEnt:
  00051	0f b6 85 db fd
	ff ff		 movzx	 eax, BYTE PTR tv80[ebp]
  00058	50		 push	 eax
  00059	0f b7 8d f4 fe
	ff ff		 movzx	 ecx, WORD PTR _wMessageType$[ebp]
  00060	83 c9 04	 or	 ecx, 4
  00063	51		 push	 ecx
  00064	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szDescribe$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 08	 mov	 eax, DWORD PTR _dwSocketID$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00078	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 12		 mov	 edx, DWORD PTR [edx]
  0007d	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00083	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00086	ff d0		 call	 eax

; 1371 : 		return true;

  00088	b0 01		 mov	 al, 1
  0008a	e9 31 02 00 00	 jmp	 $LN1@OnEventEnt
$LN2@OnEventEnt:

; 1372 : 	}
; 1373 : 
; 1374 : 	//手机用户
; 1375 : 	if (bIsMobile == true)

  0008f	0f b6 45 14	 movzx	 eax, BYTE PTR _bIsMobile$[ebp]
  00093	83 f8 01	 cmp	 eax, 1
  00096	0f 85 2c 01 00
	00		 jne	 $LN3@OnEventEnt

; 1376 : 	{
; 1377 : 		//处理消息
; 1378 : 		CMD_GR_LogonMobile * pLogonMobile=(CMD_GR_LogonMobile *)pData;

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  0009f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _pLogonMobile$4[ebp], eax

; 1379 : 		pLogonMobile->szPassword[CountArray(pLogonMobile->szPassword)-1]=0;

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	c1 e0 05	 shl	 eax, 5
  000ad	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pLogonMobile$4[ebp]
  000b3	c6 44 01 0f 00	 mov	 BYTE PTR [ecx+eax+15], 0

; 1380 : 		pLogonMobile->szMachineID[CountArray(pLogonMobile->szMachineID)-1]=0;

  000b8	b8 01 00 00 00	 mov	 eax, 1
  000bd	c1 e0 05	 shl	 eax, 5
  000c0	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _pLogonMobile$4[ebp]
  000c6	c6 44 01 51 00	 mov	 BYTE PTR [ecx+eax+81], 0

; 1381 : 
; 1382 : 		//变量定义
; 1383 : 		DBR_GR_LogonMobile LogonMobile;
; 1384 : 		ZeroMemory(&LogonMobile,sizeof(LogonMobile));

  000cb	6a 68		 push	 104			; 00000068H
  000cd	6a 00		 push	 0
  000cf	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _LogonMobile$3[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 _memset
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1385 : 
; 1386 : 		//构造数据
; 1387 : 		LogonMobile.dwUserID=pLogonMobile->dwUserID;

  000de	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  000e4	8b 48 0b	 mov	 ecx, DWORD PTR [eax+11]
  000e7	89 8d 88 fe ff
	ff		 mov	 DWORD PTR _LogonMobile$3[ebp], ecx

; 1388 : 		LogonMobile.dwClientAddr=dwUserIP;		

  000ed	8b 45 10	 mov	 eax, DWORD PTR _dwUserIP$[ebp]
  000f0	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _LogonMobile$3[ebp+60], eax

; 1389 : 		LogonMobile.dwMatchID=m_pMatchOption->dwMatchID;	

  000f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fe	89 95 b4 fe ff
	ff		 mov	 DWORD PTR _LogonMobile$3[ebp+44], edx

; 1390 : 		LogonMobile.lMatchNo=m_pMatchOption->lMatchNo;

  00104	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00107	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0010a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0010d	89 95 b8 fe ff
	ff		 mov	 DWORD PTR _LogonMobile$3[ebp+48], edx
  00113	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00116	89 85 bc fe ff
	ff		 mov	 DWORD PTR _LogonMobile$3[ebp+52], eax

; 1391 : 		LogonMobile.cbMatchType=m_pMatchOption->cbMatchType;

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00122	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00125	88 95 c0 fe ff
	ff		 mov	 BYTE PTR _LogonMobile$3[ebp+56], dl

; 1392 : 		LogonMobile.cbDeviceType=pLogonMobile->cbDeviceType;

  0012b	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  00131	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00134	88 8d ad fe ff
	ff		 mov	 BYTE PTR _LogonMobile$3[ebp+37], cl

; 1393 : 		LogonMobile.wBehaviorFlags=pLogonMobile->wBehaviorFlags;

  0013a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  00140	66 8b 48 07	 mov	 cx, WORD PTR [eax+7]
  00144	66 89 8d ae fe
	ff ff		 mov	 WORD PTR _LogonMobile$3[ebp+38], cx

; 1394 : 		LogonMobile.wPageTableCount=pLogonMobile->wPageTableCount;		

  0014b	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  00151	66 8b 48 09	 mov	 cx, WORD PTR [eax+9]
  00155	66 89 8d b0 fe
	ff ff		 mov	 WORD PTR _LogonMobile$3[ebp+40], cx

; 1395 : 		lstrcpyn(LogonMobile.szPassword,pLogonMobile->szPassword,CountArray(LogonMobile.szPassword));

  0015c	6a 21		 push	 33			; 00000021H
  0015e	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  00164	83 c0 0f	 add	 eax, 15			; 0000000fH
  00167	50		 push	 eax
  00168	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _LogonMobile$3[ebp+4]
  0016e	51		 push	 ecx
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1396 : 		lstrcpyn(LogonMobile.szMachineID,pLogonMobile->szMachineID,CountArray(LogonMobile.szMachineID));

  00175	6a 21		 push	 33			; 00000021H
  00177	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  0017d	83 c0 51	 add	 eax, 81			; 00000051H
  00180	50		 push	 eax
  00181	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _LogonMobile$3[ebp+64]
  00187	51		 push	 ecx
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1397 : 
; 1398 : 		//投递请求
; 1399 : 		m_pIDataBaseEngine->PostDataBaseRequest(LogonMobile.dwUserID,DBR_GR_LOGON_MOBILE,dwSocketID,&LogonMobile,sizeof(LogonMobile));

  0018e	6a 00		 push	 0
  00190	6a 68		 push	 104			; 00000068H
  00192	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _LogonMobile$3[ebp]
  00198	50		 push	 eax
  00199	8b 4d 08	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  0019c	51		 push	 ecx
  0019d	6a 65		 push	 101			; 00000065H
  0019f	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR _LogonMobile$3[ebp]
  001a5	52		 push	 edx
  001a6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a9	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  001af	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001b2	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  001b8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001ba	50		 push	 eax
  001bb	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001be	ff d2		 call	 edx
  001c0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1400 : 	}
; 1401 : 	else

  001c3	e9 f6 00 00 00	 jmp	 $LN4@OnEventEnt
$LN3@OnEventEnt:

; 1402 : 	{
; 1403 : 		//处理消息
; 1404 : 		CMD_GR_LogonUserID * pLogonUserID=(CMD_GR_LogonUserID *)pData;

  001c8	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  001cb	89 85 84 fe ff
	ff		 mov	 DWORD PTR _pLogonUserID$2[ebp], eax

; 1405 : 		pLogonUserID->szPassword[CountArray(pLogonUserID->szPassword)-1]=0;

  001d1	b8 01 00 00 00	 mov	 eax, 1
  001d6	c1 e0 05	 shl	 eax, 5
  001d9	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _pLogonUserID$2[ebp]
  001df	c6 44 01 10 00	 mov	 BYTE PTR [ecx+eax+16], 0

; 1406 : 		pLogonUserID->szMachineID[CountArray(pLogonUserID->szMachineID)-1]=0;

  001e4	b8 01 00 00 00	 mov	 eax, 1
  001e9	c1 e0 05	 shl	 eax, 5
  001ec	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _pLogonUserID$2[ebp]
  001f2	c6 44 01 52 00	 mov	 BYTE PTR [ecx+eax+82], 0

; 1407 : 
; 1408 : 		//变量定义
; 1409 : 		DBR_GR_LogonUserID LogonUserID;
; 1410 : 		ZeroMemory(&LogonUserID,sizeof(LogonUserID));

  001f7	6a 68		 push	 104			; 00000068H
  001f9	6a 00		 push	 0
  001fb	8d 85 1c fe ff
	ff		 lea	 eax, DWORD PTR _LogonUserID$1[ebp]
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 _memset
  00207	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1411 : 
; 1412 : 		//构造数据
; 1413 : 		LogonUserID.dwClientAddr=dwUserIP;

  0020a	8b 45 10	 mov	 eax, DWORD PTR _dwUserIP$[ebp]
  0020d	89 85 58 fe ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+60], eax

; 1414 : 		LogonUserID.dwUserID=pLogonUserID->dwUserID;

  00213	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonUserID$2[ebp]
  00219	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0021c	89 8d 1c fe ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp], ecx

; 1415 : 		LogonUserID.dwMatchID=m_pMatchOption->dwMatchID;	

  00222	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00225	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00228	8b 11		 mov	 edx, DWORD PTR [ecx]
  0022a	89 95 44 fe ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+40], edx

; 1416 : 		LogonUserID.lMatchNo=m_pMatchOption->lMatchNo;	

  00230	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00233	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00236	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00239	89 95 4c fe ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+48], edx
  0023f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00242	89 85 50 fe ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+52], eax

; 1417 : 		LogonUserID.cbMatchType=m_pMatchOption->cbMatchType;

  00248	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0024b	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0024e	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00251	88 95 54 fe ff
	ff		 mov	 BYTE PTR _LogonUserID$1[ebp+56], dl

; 1418 : 		lstrcpyn(LogonUserID.szPassword,pLogonUserID->szPassword,CountArray(LogonUserID.szPassword));

  00257	6a 21		 push	 33			; 00000021H
  00259	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonUserID$2[ebp]
  0025f	83 c0 10	 add	 eax, 16			; 00000010H
  00262	50		 push	 eax
  00263	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _LogonUserID$1[ebp+4]
  00269	51		 push	 ecx
  0026a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1419 : 		lstrcpyn(LogonUserID.szMachineID,pLogonUserID->szMachineID,CountArray(LogonUserID.szMachineID));

  00270	6a 21		 push	 33			; 00000021H
  00272	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR _pLogonUserID$2[ebp]
  00278	83 c0 52	 add	 eax, 82			; 00000052H
  0027b	50		 push	 eax
  0027c	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _LogonUserID$1[ebp+64]
  00282	51		 push	 ecx
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1420 : 
; 1421 : 		//投递请求
; 1422 : 		m_pIDataBaseEngine->PostDataBaseRequest(LogonUserID.dwUserID,DBR_GR_LOGON_USERID,dwSocketID,&LogonUserID,sizeof(LogonUserID));

  00289	6a 00		 push	 0
  0028b	6a 68		 push	 104			; 00000068H
  0028d	8d 85 1c fe ff
	ff		 lea	 eax, DWORD PTR _LogonUserID$1[ebp]
  00293	50		 push	 eax
  00294	8b 4d 08	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  00297	51		 push	 ecx
  00298	6a 64		 push	 100			; 00000064H
  0029a	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR _LogonUserID$1[ebp]
  002a0	52		 push	 edx
  002a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002a4	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  002aa	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002ad	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  002b3	8b 09		 mov	 ecx, DWORD PTR [ecx]
  002b5	50		 push	 eax
  002b6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002b9	ff d2		 call	 edx
  002bb	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN4@OnEventEnt:

; 1423 : 	}
; 1424 : 
; 1425 : 	return true;

  002be	b0 01		 mov	 al, 1
$LN1@OnEventEnt:

; 1426 : }

  002c0	5f		 pop	 edi
  002c1	5e		 pop	 esi
  002c2	5b		 pop	 ebx
  002c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c6	33 cd		 xor	 ecx, ebp
  002c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cd	8b e5		 mov	 esp, ebp
  002cf	5d		 pop	 ebp
  002d0	c2 10 00	 ret	 16			; 00000010H
?OnEventEnterMatch@CLockTimeMatch@@UAE_NKPAXK_N@Z ENDP	; CLockTimeMatch::OnEventEnterMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserLogonFinish@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv235 = -92						; size = 4
tv232 = -88						; size = 8
tv219 = -84						; size = 4
_MatchNum$1 = -16					; size = 8
_cbUserMatchStatus$2 = -6				; size = 1
_cbMatchStatus$3 = -5					; size = 1
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?OnEventUserLogonFinish@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::OnEventUserLogonFinish, COMDAT
; _this$ = ecx

; 1317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1318 : 	//发送状态
; 1319 : 	if (m_MatchStatus>=MatchStatus_Free && pIServerUserItem->IsAndroidUser()==false)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00013	85 c9		 test	 ecx, ecx
  00015	0f 8c a4 01 00
	00		 jl	 $LN2@OnEventUse
  0001b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00023	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00029	ff d0		 call	 eax
  0002b	0f b6 c8	 movzx	 ecx, al
  0002e	85 c9		 test	 ecx, ecx
  00030	0f 85 89 01 00
	00		 jne	 $LN2@OnEventUse

; 1320 : 	{
; 1321 : 		//比赛状态		
; 1322 : 		BYTE cbMatchStatus=MS_FREE;		

  00036	c6 45 fb 00	 mov	 BYTE PTR _cbMatchStatus$3[ebp], 0

; 1323 : 		if (m_MatchStatus==MatchStatus_End) cbMatchStatus=MS_MATCHEND;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00041	83 f9 04	 cmp	 ecx, 4
  00044	75 04		 jne	 SHORT $LN3@OnEventUse
  00046	c6 45 fb 08	 mov	 BYTE PTR _cbMatchStatus$3[ebp], 8
$LN3@OnEventUse:

; 1324 : 		if (m_MatchStatus==MatchStatus_WaitEnd) cbMatchStatus=MS_WAITEND;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00051	83 f9 03	 cmp	 ecx, 3
  00054	75 04		 jne	 SHORT $LN4@OnEventUse
  00056	c6 45 fb 04	 mov	 BYTE PTR _cbMatchStatus$3[ebp], 4
$LN4@OnEventUse:

; 1325 : 		if (m_MatchStatus==MatchStatus_Playing) cbMatchStatus=MS_MATCHING;		

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00061	83 f9 02	 cmp	 ecx, 2
  00064	75 04		 jne	 SHORT $LN5@OnEventUse
  00066	c6 45 fb 02	 mov	 BYTE PTR _cbMatchStatus$3[ebp], 2
$LN5@OnEventUse:

; 1326 : 		if (m_MatchStatus==MatchStatus_WaitPlay) cbMatchStatus=MS_WAITPLAY;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00071	83 f9 01	 cmp	 ecx, 1
  00074	75 04		 jne	 SHORT $LN6@OnEventUse
  00076	c6 45 fb 01	 mov	 BYTE PTR _cbMatchStatus$3[ebp], 1
$LN6@OnEventUse:

; 1327 : 		m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus));

  0007a	6a 01		 push	 1
  0007c	8d 45 fb	 lea	 eax, DWORD PTR _cbMatchStatus$3[ebp]
  0007f	50		 push	 eax
  00080	6a 0a		 push	 10			; 0000000aH
  00082	6a 0a		 push	 10			; 0000000aH
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00087	51		 push	 ecx
  00088	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	8b 10		 mov	 edx, DWORD PTR [eax]
  00096	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  0009c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0009f	ff d0		 call	 eax

; 1328 : 
; 1329 : 		//淘汰判断
; 1330 : 		if (pIServerUserItem->GetUserMatchStatus()==MUS_SIGNUPED)

  000a1	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000a4	8b 10		 mov	 edx, DWORD PTR [eax]
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000a9	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  000af	ff d0		 call	 eax
  000b1	0f b6 c8	 movzx	 ecx, al
  000b4	83 f9 02	 cmp	 ecx, 2
  000b7	75 66		 jne	 SHORT $LN7@OnEventUse

; 1331 : 		{
; 1332 : 			//淘汰判断
; 1333 : 			if (m_pLockTimeMatch->lMatchCullScore>0 && pIServerUserItem->GetUserScore()<m_pLockTimeMatch->lMatchCullScore)

  000b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000bf	89 4d ac	 mov	 DWORD PTR tv219[ebp], ecx
  000c2	8b 55 ac	 mov	 edx, DWORD PTR tv219[ebp]
  000c5	83 7a 55 00	 cmp	 DWORD PTR [edx+85], 0
  000c9	7c 54		 jl	 SHORT $LN7@OnEventUse
  000cb	7f 09		 jg	 SHORT $LN12@OnEventUse
  000cd	8b 45 ac	 mov	 eax, DWORD PTR tv219[ebp]
  000d0	83 78 51 00	 cmp	 DWORD PTR [eax+81], 0
  000d4	76 49		 jbe	 SHORT $LN7@OnEventUse
$LN12@OnEventUse:
  000d6	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000d9	8b 10		 mov	 edx, DWORD PTR [eax]
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000de	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  000e4	ff d0		 call	 eax
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	8b 49 78	 mov	 ecx, DWORD PTR [ecx+120]
  000ec	89 45 a8	 mov	 DWORD PTR tv232[ebp], eax
  000ef	89 55 ac	 mov	 DWORD PTR tv232[ebp+4], edx
  000f2	89 4d a4	 mov	 DWORD PTR tv235[ebp], ecx
  000f5	8b 55 a4	 mov	 edx, DWORD PTR tv235[ebp]
  000f8	8b 45 ac	 mov	 eax, DWORD PTR tv232[ebp+4]
  000fb	3b 42 55	 cmp	 eax, DWORD PTR [edx+85]
  000fe	7f 1f		 jg	 SHORT $LN7@OnEventUse
  00100	7c 0b		 jl	 SHORT $LN13@OnEventUse
  00102	8b 4d a4	 mov	 ecx, DWORD PTR tv235[ebp]
  00105	8b 55 a8	 mov	 edx, DWORD PTR tv232[ebp]
  00108	3b 51 51	 cmp	 edx, DWORD PTR [ecx+81]
  0010b	73 12		 jae	 SHORT $LN7@OnEventUse
$LN13@OnEventUse:

; 1334 : 			{
; 1335 : 				pIServerUserItem->SetUserMatchStatus(MUS_OUT);

  0010d	6a 01		 push	 1
  0010f	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00112	8b 10		 mov	 edx, DWORD PTR [eax]
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00117	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  0011d	ff d0		 call	 eax
$LN7@OnEventUse:

; 1336 : 			}
; 1337 : 		}		
; 1338 : 
; 1339 : 		//报名状态		
; 1340 : 		BYTE cbUserMatchStatus=pIServerUserItem->GetUserMatchStatus();

  0011f	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00122	8b 10		 mov	 edx, DWORD PTR [eax]
  00124	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00127	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0012d	ff d0		 call	 eax
  0012f	88 45 fa	 mov	 BYTE PTR _cbUserMatchStatus$2[ebp], al

; 1341 : 		m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_USTATUS,&cbUserMatchStatus,sizeof(cbUserMatchStatus));		

  00132	6a 01		 push	 1
  00134	8d 45 fa	 lea	 eax, DWORD PTR _cbUserMatchStatus$2[ebp]
  00137	50		 push	 eax
  00138	6a 0b		 push	 11			; 0000000bH
  0013a	6a 0a		 push	 10			; 0000000aH
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0013f	51		 push	 ecx
  00140	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00143	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00149	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	8b 10		 mov	 edx, DWORD PTR [eax]
  0014e	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00154	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00157	ff d0		 call	 eax

; 1342 : 
; 1343 : 		//开赛倒计时
; 1344 : 		if (m_MatchStatus==MatchStatus_WaitPlay)

  00159	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00160	83 f9 01	 cmp	 ecx, 1
  00163	75 5a		 jne	 SHORT $LN2@OnEventUse

; 1345 : 		{
; 1346 : 			//加入分组
; 1347 : 			if (cbUserMatchStatus==MUS_SIGNUPED) InsertDistribute(pIServerUserItem);

  00165	0f b6 45 fa	 movzx	 eax, BYTE PTR _cbUserMatchStatus$2[ebp]
  00169	83 f8 02	 cmp	 eax, 2
  0016c	75 0c		 jne	 SHORT $LN10@OnEventUse
  0016e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00171	50		 push	 eax
  00172	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00175	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute
$LN10@OnEventUse:

; 1348 : 
; 1349 : 			//构造人数
; 1350 : 			CMD_GR_Match_Num MatchNum;
; 1351 : 			MatchNum.dwWaitting=m_DistributeManage.GetCount();

  0017a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	83 c1 18	 add	 ecx, 24			; 00000018H
  00180	e8 00 00 00 00	 call	 ?GetCount@CDistributeManager@@QAEGXZ ; CDistributeManager::GetCount
  00185	0f b7 c0	 movzx	 eax, ax
  00188	89 45 f0	 mov	 DWORD PTR _MatchNum$1[ebp], eax

; 1352 : 			MatchNum.dwTotal=m_pLockTimeMatch->wStartUserCount;

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018e	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00191	0f b7 51 27	 movzx	 edx, WORD PTR [ecx+39]
  00195	89 55 f4	 mov	 DWORD PTR _MatchNum$1[ebp+4], edx

; 1353 : 			
; 1354 : 			//发送人数
; 1355 : 			m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_NUM,&MatchNum, sizeof(MatchNum));

  00198	6a 08		 push	 8
  0019a	8d 45 f0	 lea	 eax, DWORD PTR _MatchNum$1[ebp]
  0019d	50		 push	 eax
  0019e	6a 04		 push	 4
  001a0	6a 0a		 push	 10			; 0000000aH
  001a2	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001a5	51		 push	 ecx
  001a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a9	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	8b 10		 mov	 edx, DWORD PTR [eax]
  001b4	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  001ba	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001bd	ff d0		 call	 eax
$LN2@OnEventUse:

; 1356 : 		}
; 1357 : 	}
; 1358 :  
; 1359 : 	return true;

  001bf	b0 01		 mov	 al, 1

; 1360 : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 04 00	 ret	 4
?OnEventUserLogonFinish@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::OnEventUserLogonFinish
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserLogout@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?OnEventUserLogout@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::OnEventUserLogout, COMDAT
; _this$ = ecx

; 1309 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1310 : 	RemoveDistribute(pIServerUserItem);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?RemoveDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::RemoveDistribute

; 1311 : 
; 1312 : 	return true;

  00018	b0 01		 mov	 al, 1

; 1313 : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?OnEventUserLogout@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::OnEventUserLogout
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserLogon@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv137 = -784						; size = 4
_wDataSize$ = -652					; size = 2
_MatchRule$ = -648					; size = 638
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
?OnEventUserLogon@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z PROC ; CLockTimeMatch::OnEventUserLogon, COMDAT
; _this$ = ecx

; 1267 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 03 00
	00		 sub	 esp, 784		; 00000310H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1268 : 	//构造结构
; 1269 : 	CMD_GR_Match_Rule MatchRule;
; 1270 : 
; 1271 : 	//基本信息
; 1272 : 	MatchRule.dwMatchID=m_pMatchOption->dwMatchID;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	89 95 78 fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp], edx

; 1273 : 	MatchRule.cbMatchType=m_pMatchOption->cbMatchType;

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0002d	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00030	88 95 7c fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+4], dl

; 1274 : 	lstrcpyn(MatchRule.szMatchName,m_pMatchOption->szMatchName,CountArray(MatchRule.szMatchName));	

  00036	6a 20		 push	 32			; 00000020H
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0003e	83 c1 12	 add	 ecx, 18			; 00000012H
  00041	51		 push	 ecx
  00042	8d 95 7d fd ff
	ff		 lea	 edx, DWORD PTR _MatchRule$[ebp+5]
  00048	52		 push	 edx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1275 : 
; 1276 : 	//报名信息
; 1277 : 	MatchRule.cbFeeType=m_pMatchOption->cbFeeType;

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00055	8a 51 32	 mov	 dl, BYTE PTR [ecx+50]
  00058	88 95 9d fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+37], dl

; 1278 : 	MatchRule.lSignupFee=m_pMatchOption->lSignupFee;	

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00064	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00067	89 95 9f fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp+39], edx
  0006d	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00070	89 85 a3 fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp+43], eax

; 1279 : 	MatchRule.dwExperience=m_pMatchOption->dwExperience;	

  00076	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0007c	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0007f	89 95 aa fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp+50], edx

; 1280 : 	MatchRule.cbDeductArea=m_pMatchOption->cbDeductArea;

  00085	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0008b	8a 51 33	 mov	 dl, BYTE PTR [ecx+51]
  0008e	88 95 9e fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+38], dl

; 1281 : 	MatchRule.cbSignupMode=m_pMatchOption->cbSignupMode;

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0009a	8a 51 40	 mov	 dl, BYTE PTR [ecx+64]
  0009d	88 95 a7 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+47], dl

; 1282 : 	MatchRule.cbMemberOrder=m_pMatchOption->cbMemberOrder;

  000a3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000a9	8a 51 42	 mov	 dl, BYTE PTR [ecx+66]
  000ac	88 95 a9 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+49], dl

; 1283 : 	MatchRule.cbJoinCondition=m_pMatchOption->cbJoinCondition;	

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000b8	8a 51 41	 mov	 dl, BYTE PTR [ecx+65]
  000bb	88 95 a8 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+48], dl

; 1284 : 
; 1285 : 	//排名方式
; 1286 : 	MatchRule.cbRankingMode=m_pMatchOption->cbRankingMode;

  000c1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000c7	8a 51 70	 mov	 dl, BYTE PTR [ecx+112]
  000ca	88 95 ae fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+54], dl

; 1287 : 	MatchRule.wCountInnings=m_pMatchOption->wCountInnings;

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000d6	66 8b 51 72	 mov	 dx, WORD PTR [ecx+114]
  000da	66 89 95 af fd
	ff ff		 mov	 WORD PTR _MatchRule$[ebp+55], dx

; 1288 : 	MatchRule.cbFilterGradesMode=m_pMatchOption->cbFilterGradesMode;

  000e1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000e7	8a 51 74	 mov	 dl, BYTE PTR [ecx+116]
  000ea	88 95 b1 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+57], dl

; 1289 : 
; 1290 : 	//比赛规则
; 1291 : 	CopyMemory(MatchRule.cbMatchRule,m_pMatchOption->cbMatchRule,sizeof(MatchRule.cbMatchRule));

  000f0	68 00 02 00 00	 push	 512			; 00000200H
  000f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000fb	83 c1 7e	 add	 ecx, 126		; 0000007eH
  000fe	51		 push	 ecx
  000ff	8d 95 f6 fd ff
	ff		 lea	 edx, DWORD PTR _MatchRule$[ebp+126]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _memcpy
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1292 : 
; 1293 : 	//比赛奖励
; 1294 : 	MatchRule.wRewardCount=__min(m_pMatchOption->wRewardCount,CountArray(MatchRule.MatchRewardInfo));

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00114	0f b7 91 7e 02
	00 00		 movzx	 edx, WORD PTR [ecx+638]
  0011b	83 fa 03	 cmp	 edx, 3
  0011e	73 15		 jae	 SHORT $LN3@OnEventUse
  00120	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00123	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00126	0f b7 91 7e 02
	00 00		 movzx	 edx, WORD PTR [ecx+638]
  0012d	89 95 f0 fc ff
	ff		 mov	 DWORD PTR tv137[ebp], edx
  00133	eb 0a		 jmp	 SHORT $LN4@OnEventUse
$LN3@OnEventUse:
  00135	c7 85 f0 fc ff
	ff 03 00 00 00	 mov	 DWORD PTR tv137[ebp], 3
$LN4@OnEventUse:
  0013f	66 8b 85 f0 fc
	ff ff		 mov	 ax, WORD PTR tv137[ebp]
  00146	66 89 85 b2 fd
	ff ff		 mov	 WORD PTR _MatchRule$[ebp+58], ax

; 1295 : 	CopyMemory(MatchRule.MatchRewardInfo,m_pMatchOption->MatchRewardInfo,MatchRule.wRewardCount* sizeof(MatchRule.MatchRewardInfo[0]));

  0014d	0f b7 85 b2 fd
	ff ff		 movzx	 eax, WORD PTR _MatchRule$[ebp+58]
  00154	6b c8 16	 imul	 ecx, eax, 22
  00157	51		 push	 ecx
  00158	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0015b	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0015e	05 80 02 00 00	 add	 eax, 640		; 00000280H
  00163	50		 push	 eax
  00164	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _MatchRule$[ebp+60]
  0016a	51		 push	 ecx
  0016b	e8 00 00 00 00	 call	 _memcpy
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1296 : 
; 1297 : 	//计算大小
; 1298 : 	WORD wDataSize=sizeof(MatchRule)-sizeof(MatchRule.MatchRewardInfo);

  00173	b8 3c 02 00 00	 mov	 eax, 572		; 0000023cH
  00178	66 89 85 74 fd
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], ax

; 1299 : 	wDataSize+=MatchRule.wRewardCount*sizeof(MatchRule.MatchRewardInfo[0]);

  0017f	0f b7 85 b2 fd
	ff ff		 movzx	 eax, WORD PTR _MatchRule$[ebp+58]
  00186	6b c8 16	 imul	 ecx, eax, 22
  00189	0f b7 95 74 fd
	ff ff		 movzx	 edx, WORD PTR _wDataSize$[ebp]
  00190	03 d1		 add	 edx, ecx
  00192	66 89 95 74 fd
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], dx

; 1300 : 
; 1301 : 	//发送属性
; 1302 : 	m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_RULE,&MatchRule,wDataSize);

  00199	0f b7 85 74 fd
	ff ff		 movzx	 eax, WORD PTR _wDataSize$[ebp]
  001a0	50		 push	 eax
  001a1	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR _MatchRule$[ebp]
  001a7	51		 push	 ecx
  001a8	6a 02		 push	 2
  001aa	6a 0a		 push	 10			; 0000000aH
  001ac	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  001af	52		 push	 edx
  001b0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b3	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001b9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  001be	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  001c4	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  001c7	ff d2		 call	 edx

; 1303 : 
; 1304 : 	return true;

  001c9	b0 01		 mov	 al, 1

; 1305 : }

  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d1	33 cd		 xor	 ecx, ebp
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c2 04 00	 ret	 4
?OnEventUserLogon@CLockTimeMatch@@UAE_NPAUIServerUserItem@@@Z ENDP ; CLockTimeMatch::OnEventUserLogon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserItemRight@CLockTimeMatch@@UAE_NPAUIServerUserItem@@KKE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
_dwAddRight$ = 12					; size = 4
_dwRemoveRight$ = 16					; size = 4
_cbRightKind$ = 20					; size = 1
?OnEventUserItemRight@CLockTimeMatch@@UAE_NPAUIServerUserItem@@KKE@Z PROC ; CLockTimeMatch::OnEventUserItemRight, COMDAT
; _this$ = ecx

; 1256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1257 : 	if(m_pIServerUserItemSink!=NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00016	74 2c		 je	 SHORT $LN2@OnEventUse

; 1258 : 	{
; 1259 : 		return m_pIServerUserItemSink->OnEventUserItemRight(pIServerUserItem,dwAddRight,dwRemoveRight,cbRightKind);

  00018	0f b6 45 14	 movzx	 eax, BYTE PTR _cbRightKind$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 10	 mov	 ecx, DWORD PTR _dwRemoveRight$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 0c	 mov	 edx, DWORD PTR _dwAddRight$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 12		 mov	 edx, DWORD PTR [edx]
  00037	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0003d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00040	ff d0		 call	 eax
  00042	eb 02		 jmp	 SHORT $LN1@OnEventUse
$LN2@OnEventUse:

; 1260 : 	}
; 1261 : 
; 1262 : 	return true;

  00044	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1263 : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
?OnEventUserItemRight@CLockTimeMatch@@UAE_NPAUIServerUserItem@@KKE@Z ENDP ; CLockTimeMatch::OnEventUserItemRight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserItemStatus@CLockTimeMatch@@UAE_NPAUIServerUserItem@@GG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
_wLastTableID$ = 12					; size = 2
_wLastChairID$ = 16					; size = 2
?OnEventUserItemStatus@CLockTimeMatch@@UAE_NPAUIServerUserItem@@GG@Z PROC ; CLockTimeMatch::OnEventUserItemStatus, COMDAT
; _this$ = ecx

; 1242 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1243 : 	//清除数据
; 1244 : 	if(pIServerUserItem->GetUserStatus()==US_NULL) pIServerUserItem->SetMatchData(NULL);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00014	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00017	ff d0		 call	 eax
  00019	0f b6 c8	 movzx	 ecx, al
  0001c	85 c9		 test	 ecx, ecx
  0001e	75 12		 jne	 SHORT $LN2@OnEventUse
  00020	6a 00		 push	 0
  00022	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0002a	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  00030	ff d0		 call	 eax
$LN2@OnEventUse:

; 1245 : 
; 1246 : 	if(m_pIServerUserItemSink!=NULL)

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  0003c	74 29		 je	 SHORT $LN3@OnEventUse

; 1247 : 	{
; 1248 : 		return m_pIServerUserItemSink->OnEventUserItemStatus(pIServerUserItem,wLastTableID,wLastChairID);

  0003e	0f b7 45 10	 movzx	 eax, WORD PTR _wLastChairID$[ebp]
  00042	50		 push	 eax
  00043	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wLastTableID$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  00060	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00063	ff d2		 call	 edx
  00065	eb 02		 jmp	 SHORT $LN1@OnEventUse
$LN3@OnEventUse:

; 1249 : 	}
; 1250 : 
; 1251 : 	return true;

  00067	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1252 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 0c 00	 ret	 12			; 0000000cH
?OnEventUserItemStatus@CLockTimeMatch@@UAE_NPAUIServerUserItem@@GG@Z ENDP ; CLockTimeMatch::OnEventUserItemStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserItemGameData@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
?OnEventUserItemGameData@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z PROC ; CLockTimeMatch::OnEventUserItemGameData, COMDAT
; _this$ = ecx

; 1231 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1232 : 	if(m_pIServerUserItemSink!=NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00016	74 24		 je	 SHORT $LN2@OnEventUse

; 1233 : 	{
; 1234 : 		return m_pIServerUserItemSink->OnEventUserItemGameData(pIServerUserItem,cbReason);

  00018	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbReason$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 10		 mov	 edx, DWORD PTR [eax]
  0002f	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  00035	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00038	ff d0		 call	 eax
  0003a	eb 02		 jmp	 SHORT $LN1@OnEventUse
$LN2@OnEventUse:

; 1235 : 	}
; 1236 : 
; 1237 : 	return true;

  0003c	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1238 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?OnEventUserItemGameData@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z ENDP ; CLockTimeMatch::OnEventUserItemGameData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z
_TEXT	SEGMENT
_WriteVideoPlayer$1 = -380				; size = 48
_WriteGameScore$2 = -332				; size = 120
_MobileUserScore$ = -212				; size = 96
_pUserInfo$ = -116					; size = 4
_UserScore$ = -112					; size = 104
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
?OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z PROC ; CLockTimeMatch::OnEventUserItemScore, COMDAT
; _this$ = ecx

; 1126 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 01 00
	00		 sub	 esp, 444		; 000001bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1127 : 	//效验参数
; 1128 : 	ASSERT(pIServerUserItem!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN7@OnEventUse
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN7@OnEventUse
  00036	cc		 int	 3
$LN7@OnEventUse:

; 1129 : 	if (pIServerUserItem==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN2@OnEventUse
  0003d	32 c0		 xor	 al, al
  0003f	e9 8b 04 00 00	 jmp	 $LN1@OnEventUse
$LN2@OnEventUse:

; 1130 : 
; 1131 : 	//变量定义
; 1132 : 	CMD_GR_UserScore UserScore;
; 1133 : 	ZeroMemory(&UserScore,sizeof(UserScore));

  00044	6a 68		 push	 104			; 00000068H
  00046	6a 00		 push	 0
  00048	8d 45 90	 lea	 eax, DWORD PTR _UserScore$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _memset
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1134 : 	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();

  00054	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00057	8b 10		 mov	 edx, DWORD PTR [eax]
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0005c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0005f	ff d0		 call	 eax
  00061	89 45 8c	 mov	 DWORD PTR _pUserInfo$[ebp], eax

; 1135 : 
; 1136 : 	//构造数据
; 1137 : 	UserScore.dwUserID=pUserInfo->dwUserID;

  00064	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	89 4d 90	 mov	 DWORD PTR _UserScore$[ebp], ecx

; 1138 : 	UserScore.UserScore.dwWinCount=pUserInfo->dwWinCount;

  0006c	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0006f	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00075	89 4d d4	 mov	 DWORD PTR _UserScore$[ebp+68], ecx

; 1139 : 	UserScore.UserScore.dwLostCount=pUserInfo->dwLostCount;

  00078	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0007b	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  00081	89 4d d8	 mov	 DWORD PTR _UserScore$[ebp+72], ecx

; 1140 : 	UserScore.UserScore.dwDrawCount=pUserInfo->dwDrawCount;

  00084	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00087	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  0008d	89 4d dc	 mov	 DWORD PTR _UserScore$[ebp+76], ecx

; 1141 : 	UserScore.UserScore.dwFleeCount=pUserInfo->dwFleeCount;	

  00090	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00093	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  00099	89 4d e0	 mov	 DWORD PTR _UserScore$[ebp+80], ecx

; 1142 : 	UserScore.UserScore.dwExperience=pUserInfo->dwExperience;

  0009c	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0009f	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  000a5	89 4d f0	 mov	 DWORD PTR _UserScore$[ebp+96], ecx

; 1143 : 	UserScore.UserScore.lLoveLiness=pUserInfo->lLoveLiness;

  000a8	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000ab	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  000b1	89 4d f4	 mov	 DWORD PTR _UserScore$[ebp+100], ecx

; 1144 : 	UserScore.UserScore.lIntegralCount=pUserInfo->lIntegralCount;

  000b4	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000b7	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  000bd	89 4d e4	 mov	 DWORD PTR _UserScore$[ebp+84], ecx
  000c0	8b 90 f8 00 00
	00		 mov	 edx, DWORD PTR [eax+248]
  000c6	89 55 e8	 mov	 DWORD PTR _UserScore$[ebp+88], edx

; 1145 : 
; 1146 : 	//构造积分
; 1147 : 	UserScore.UserScore.bConsumptionType.lGrade = pUserInfo->bConsumptionType.lGrade;

  000c9	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000cc	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000d2	89 4d 94	 mov	 DWORD PTR _UserScore$[ebp+4], ecx
  000d5	8b 90 9c 00 00
	00		 mov	 edx, DWORD PTR [eax+156]
  000db	89 55 98	 mov	 DWORD PTR _UserScore$[ebp+8], edx

; 1148 : 	UserScore.UserScore.bConsumptionType.lInsure = pUserInfo->bConsumptionType.lInsure;

  000de	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000e1	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  000e7	89 4d 9c	 mov	 DWORD PTR _UserScore$[ebp+12], ecx
  000ea	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  000f0	89 55 a0	 mov	 DWORD PTR _UserScore$[ebp+16], edx

; 1149 : 	UserScore.UserScore.bConsumptionType.lIngot = pUserInfo->bConsumptionType.lIngot;

  000f3	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000f6	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000fc	89 4d ac	 mov	 DWORD PTR _UserScore$[ebp+28], ecx
  000ff	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  00105	89 55 b0	 mov	 DWORD PTR _UserScore$[ebp+32], edx

; 1150 : 	UserScore.UserScore.bConsumptionType.lBeans = pUserInfo->bConsumptionType.lBeans;

  00108	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0010b	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  00111	89 4d b4	 mov	 DWORD PTR _UserScore$[ebp+36], ecx
  00114	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  0011a	89 55 b8	 mov	 DWORD PTR _UserScore$[ebp+40], edx

; 1151 : 
; 1152 : 	//构造积分
; 1153 : 	UserScore.UserScore.bConsumptionType.lScore = pUserInfo->bConsumptionType.lScore;

  0011d	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00120	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00126	89 4d a4	 mov	 DWORD PTR _UserScore$[ebp+20], ecx
  00129	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  0012f	89 55 a8	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 1154 : 	UserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetTrusteeScore();

  00132	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00135	8b 10		 mov	 edx, DWORD PTR [eax]
  00137	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0013a	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00140	ff d0		 call	 eax
  00142	03 45 a4	 add	 eax, DWORD PTR _UserScore$[ebp+20]
  00145	13 55 a8	 adc	 edx, DWORD PTR _UserScore$[ebp+24]
  00148	89 45 a4	 mov	 DWORD PTR _UserScore$[ebp+20], eax
  0014b	89 55 a8	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 1155 : 	UserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetFrozenedScore();

  0014e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00151	8b 10		 mov	 edx, DWORD PTR [eax]
  00153	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00156	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0015c	ff d0		 call	 eax
  0015e	03 45 a4	 add	 eax, DWORD PTR _UserScore$[ebp+20]
  00161	13 55 a8	 adc	 edx, DWORD PTR _UserScore$[ebp+24]
  00164	89 45 a4	 mov	 DWORD PTR _UserScore$[ebp+20], eax
  00167	89 55 a8	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 1156 : 
; 1157 : 	//发送数据
; 1158 : 	m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_USER,SUB_GR_USER_SCORE,&UserScore,sizeof(UserScore));

  0016a	6a 68		 push	 104			; 00000068H
  0016c	8d 45 90	 lea	 eax, DWORD PTR _UserScore$[ebp]
  0016f	50		 push	 eax
  00170	6a 65		 push	 101			; 00000065H
  00172	6a 03		 push	 3
  00174	68 ff 00 00 00	 push	 255			; 000000ffH
  00179	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017c	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00182	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 12		 mov	 edx, DWORD PTR [edx]
  00187	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0018d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00190	ff d0		 call	 eax

; 1159 : 
; 1160 : 	//变量定义
; 1161 : 	CMD_GR_MobileUserScore MobileUserScore;
; 1162 : 	ZeroMemory(&MobileUserScore,sizeof(MobileUserScore));

  00192	6a 60		 push	 96			; 00000060H
  00194	6a 00		 push	 0
  00196	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _MobileUserScore$[ebp]
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _memset
  001a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1163 : 
; 1164 : 	//构造数据
; 1165 : 	MobileUserScore.dwUserID=pUserInfo->dwUserID;

  001a5	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  001a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001aa	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp], ecx

; 1166 : 	MobileUserScore.UserScore.dwWinCount=pUserInfo->dwWinCount;

  001b0	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  001b3	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  001b9	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+68], ecx

; 1167 : 	MobileUserScore.UserScore.dwLostCount=pUserInfo->dwLostCount;

  001bf	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  001c2	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  001c8	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+72], ecx

; 1168 : 	MobileUserScore.UserScore.dwDrawCount=pUserInfo->dwDrawCount;

  001ce	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  001d1	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  001d7	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+76], ecx

; 1169 : 	MobileUserScore.UserScore.dwFleeCount=pUserInfo->dwFleeCount;

  001dd	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  001e0	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  001e6	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+80], ecx

; 1170 : 	MobileUserScore.UserScore.dwExperience=pUserInfo->dwExperience;

  001ec	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  001ef	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  001f5	89 4d 88	 mov	 DWORD PTR _MobileUserScore$[ebp+92], ecx

; 1171 : 	MobileUserScore.UserScore.lIntegralCount=pUserInfo->lIntegralCount;

  001f8	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  001fb	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  00201	89 4d 80	 mov	 DWORD PTR _MobileUserScore$[ebp+84], ecx
  00204	8b 90 f8 00 00
	00		 mov	 edx, DWORD PTR [eax+248]
  0020a	89 55 84	 mov	 DWORD PTR _MobileUserScore$[ebp+88], edx

; 1172 : 
; 1173 : 	//构造积分
; 1174 : 	MobileUserScore.UserScore.bConsumptionType.lScore = pUserInfo->bConsumptionType.lScore;

  0020d	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00210	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00216	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+20], ecx
  0021c	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  00222	89 95 44 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+24], edx

; 1175 : 	MobileUserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetTrusteeScore();

  00228	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0022b	8b 10		 mov	 edx, DWORD PTR [eax]
  0022d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00230	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00236	ff d0		 call	 eax
  00238	03 85 40 ff ff
	ff		 add	 eax, DWORD PTR _MobileUserScore$[ebp+20]
  0023e	13 95 44 ff ff
	ff		 adc	 edx, DWORD PTR _MobileUserScore$[ebp+24]
  00244	89 85 40 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+20], eax
  0024a	89 95 44 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+24], edx

; 1176 : 	MobileUserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetFrozenedScore();

  00250	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00253	8b 10		 mov	 edx, DWORD PTR [eax]
  00255	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00258	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0025e	ff d0		 call	 eax
  00260	03 85 40 ff ff
	ff		 add	 eax, DWORD PTR _MobileUserScore$[ebp+20]
  00266	13 95 44 ff ff
	ff		 adc	 edx, DWORD PTR _MobileUserScore$[ebp+24]
  0026c	89 85 40 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+20], eax
  00272	89 95 44 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+24], edx

; 1177 : 	MobileUserScore.UserScore.bConsumptionType.lBeans = pUserInfo->bConsumptionType.lBeans;

  00278	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0027b	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  00281	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+36], ecx
  00287	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  0028d	89 95 54 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+40], edx

; 1178 : 
; 1179 : 	//发送数据
; 1180 : 	m_pIGameServiceFrame->SendDataBatchToMobileUser(pIServerUserItem->GetTableID(),MDM_GR_USER,SUB_GR_USER_SCORE,&MobileUserScore,sizeof(MobileUserScore));

  00293	6a 60		 push	 96			; 00000060H
  00295	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _MobileUserScore$[ebp]
  0029b	50		 push	 eax
  0029c	6a 65		 push	 101			; 00000065H
  0029e	6a 03		 push	 3
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a5	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002a8	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  002ab	ff d0		 call	 eax
  002ad	0f b7 c8	 movzx	 ecx, ax
  002b0	51		 push	 ecx
  002b1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002b4	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  002ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002bd	8b 10		 mov	 edx, DWORD PTR [eax]
  002bf	8b 89 8c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+140]
  002c5	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  002c8	ff d0		 call	 eax

; 1181 : 
; 1182 : 	//即时写分
; 1183 : 	if ((CServerRule::IsImmediateWriteScore(m_pGameServiceOption->dwServerRule)==true)&&(pIServerUserItem->IsVariation()==true))

  002ca	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002cd	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002d0	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  002d3	52		 push	 edx
  002d4	e8 00 00 00 00	 call	 ?IsImmediateWriteScore@CServerRule@@SA_NK@Z ; CServerRule::IsImmediateWriteScore
  002d9	83 c4 04	 add	 esp, 4
  002dc	0f b6 c0	 movzx	 eax, al
  002df	83 f8 01	 cmp	 eax, 1
  002e2	0f 85 e5 01 00
	00		 jne	 $LN3@OnEventUse
  002e8	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  002eb	8b 10		 mov	 edx, DWORD PTR [eax]
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002f0	8b 82 f0 00 00
	00		 mov	 eax, DWORD PTR [edx+240]
  002f6	ff d0		 call	 eax
  002f8	0f b6 c8	 movzx	 ecx, al
  002fb	83 f9 01	 cmp	 ecx, 1
  002fe	0f 85 c9 01 00
	00		 jne	 $LN3@OnEventUse

; 1184 : 	{
; 1185 : 		//变量定义
; 1186 : 		DBR_GR_WriteGameScore WriteGameScore;
; 1187 : 		ZeroMemory(&WriteGameScore,sizeof(WriteGameScore));

  00304	6a 78		 push	 120			; 00000078H
  00306	6a 00		 push	 0
  00308	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _WriteGameScore$2[ebp]
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 _memset
  00314	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1188 : 
; 1189 : 		//用户信息
; 1190 : 		WriteGameScore.dwUserID=pIServerUserItem->GetUserID();

  00317	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0031a	8b 10		 mov	 edx, DWORD PTR [eax]
  0031c	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0031f	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00322	ff d0		 call	 eax
  00324	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp], eax

; 1191 : 		WriteGameScore.dwDBQuestID=pIServerUserItem->GetDBQuestID();

  0032a	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0032d	8b 10		 mov	 edx, DWORD PTR [eax]
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00332	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00335	ff d0		 call	 eax
  00337	89 85 bc fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+8], eax

; 1192 : 		WriteGameScore.dwClientAddr=pIServerUserItem->GetClientAddr();

  0033d	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00340	8b 10		 mov	 edx, DWORD PTR [eax]
  00342	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00345	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00348	ff d0		 call	 eax
  0034a	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+4], eax

; 1193 : 		WriteGameScore.dwInoutIndex=pIServerUserItem->GetInoutIndex();

  00350	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00353	8b 10		 mov	 edx, DWORD PTR [eax]
  00355	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00358	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0035b	ff d0		 call	 eax
  0035d	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+12], eax

; 1194 : 
; 1195 : 		//提取积分
; 1196 : 		pIServerUserItem->DistillVariation(WriteGameScore.VariationInfo);

  00363	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _WriteGameScore$2[ebp+24]
  00369	50		 push	 eax
  0036a	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0036d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0036f	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00372	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  00378	ff d0		 call	 eax

; 1197 : 
; 1198 : 		//比赛信息
; 1199 : 		WriteGameScore.dwMatchID=m_pMatchOption->dwMatchID;

  0037a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0037d	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00380	8b 11		 mov	 edx, DWORD PTR [ecx]
  00382	89 95 1c ff ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+104], edx

; 1200 : 		WriteGameScore.lMatchNo=m_pMatchOption->lMatchNo;

  00388	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0038b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0038e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00391	89 95 24 ff ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+112], edx
  00397	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0039a	89 85 28 ff ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+116], eax

; 1201 : 
; 1202 : 		//投递请求
; 1203 : 		m_pIDataBaseEngine->PostDataBaseRequest(WriteGameScore.dwUserID,DBR_GR_WRITE_GAME_SCORE,0L,&WriteGameScore,sizeof(WriteGameScore),TRUE);

  003a0	6a 01		 push	 1
  003a2	6a 78		 push	 120			; 00000078H
  003a4	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _WriteGameScore$2[ebp]
  003aa	50		 push	 eax
  003ab	6a 00		 push	 0
  003ad	68 c8 00 00 00	 push	 200			; 000000c8H
  003b2	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _WriteGameScore$2[ebp]
  003b8	51		 push	 ecx
  003b9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003bc	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  003c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003c5	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  003cb	8b 00		 mov	 eax, DWORD PTR [eax]
  003cd	52		 push	 edx
  003ce	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003d1	ff d1		 call	 ecx
  003d3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1204 : 
; 1205 : 		//视频回放
; 1206 : 		if(CServerRule::IsSuportPlayBack(m_pGameServiceOption->dwServerRule))

  003d6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  003dc	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  003df	52		 push	 edx
  003e0	e8 00 00 00 00	 call	 ?IsSuportPlayBack@CServerRule@@SA_NK@Z ; CServerRule::IsSuportPlayBack
  003e5	83 c4 04	 add	 esp, 4
  003e8	0f b6 c0	 movzx	 eax, al
  003eb	85 c0		 test	 eax, eax
  003ed	0f 84 da 00 00
	00		 je	 $LN3@OnEventUse

; 1207 : 		{
; 1208 : 			DBR_GR_WriteVideoPlayer WriteVideoPlayer;
; 1209 : 			ZeroMemory(&WriteVideoPlayer, sizeof(DBR_GR_WriteVideoPlayer));

  003f3	6a 30		 push	 48			; 00000030H
  003f5	6a 00		 push	 0
  003f7	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _WriteVideoPlayer$1[ebp]
  003fd	50		 push	 eax
  003fe	e8 00 00 00 00	 call	 _memset
  00403	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1210 : 
; 1211 : 			memcpy(WriteVideoPlayer.szVideoID,pIServerUserItem->GetVideoNumber(),sizeof(WriteVideoPlayer.szVideoID) );

  00406	6a 16		 push	 22			; 00000016H
  00408	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0040b	8b 10		 mov	 edx, DWORD PTR [eax]
  0040d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00410	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00413	ff d0		 call	 eax
  00415	50		 push	 eax
  00416	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _WriteVideoPlayer$1[ebp+4]
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 _memcpy
  00422	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1212 : 			if(WriteVideoPlayer.szVideoID[0] != '\0')

  00425	b8 01 00 00 00	 mov	 eax, 1
  0042a	6b c8 00	 imul	 ecx, eax, 0
  0042d	0f be 94 0d 88
	fe ff ff	 movsx	 edx, BYTE PTR _WriteVideoPlayer$1[ebp+ecx+4]
  00435	85 d2		 test	 edx, edx
  00437	0f 84 90 00 00
	00		 je	 $LN3@OnEventUse

; 1213 : 			{
; 1214 : 				WriteVideoPlayer.dwUserID	= WriteGameScore.dwUserID;

  0043d	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _WriteGameScore$2[ebp]
  00443	89 85 84 fe ff
	ff		 mov	 DWORD PTR _WriteVideoPlayer$1[ebp], eax

; 1215 : 				WriteVideoPlayer.lScore		= WriteGameScore.VariationInfo.lScore;

  00449	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _WriteGameScore$2[ebp+24]
  0044f	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _WriteVideoPlayer$1[ebp+32], eax
  00455	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _WriteGameScore$2[ebp+28]
  0045b	89 8d a8 fe ff
	ff		 mov	 DWORD PTR _WriteVideoPlayer$1[ebp+36], ecx

; 1216 : 				WriteVideoPlayer.wChairID	= pIServerUserItem->GetChairID();

  00461	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00464	8b 10		 mov	 edx, DWORD PTR [eax]
  00466	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00469	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  0046c	ff d0		 call	 eax
  0046e	66 89 85 ac fe
	ff ff		 mov	 WORD PTR _WriteVideoPlayer$1[ebp+40], ax

; 1217 : 				WriteVideoPlayer.wKindID	= m_pGameServiceAttrib->wKindID;

  00475	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00478	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0047b	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0047e	66 89 95 ae fe
	ff ff		 mov	 WORD PTR _WriteVideoPlayer$1[ebp+42], dx

; 1218 : 
; 1219 : 				m_pIDataBaseEngine->PostDataBaseRequest(WriteVideoPlayer.dwUserID,DBR_GR_WRITE_VIDEO_PLAYER_INFO,0L,&WriteVideoPlayer,sizeof(WriteVideoPlayer), TRUE);

  00485	6a 01		 push	 1
  00487	6a 30		 push	 48			; 00000030H
  00489	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _WriteVideoPlayer$1[ebp]
  0048f	50		 push	 eax
  00490	6a 00		 push	 0
  00492	68 40 06 00 00	 push	 1600			; 00000640H
  00497	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR _WriteVideoPlayer$1[ebp]
  0049d	51		 push	 ecx
  0049e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004a1	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  004a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004aa	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  004b0	8b 00		 mov	 eax, DWORD PTR [eax]
  004b2	52		 push	 edx
  004b3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004b6	ff d1		 call	 ecx
  004b8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1220 : 
; 1221 : 				pIServerUserItem->SetVideoNumber("");

  004bb	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  004c0	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  004c3	8b 10		 mov	 edx, DWORD PTR [eax]
  004c5	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  004c8	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  004cb	ff d0		 call	 eax
$LN3@OnEventUse:

; 1222 : 			}		
; 1223 : 		}
; 1224 : 	}
; 1225 : 
; 1226 : 	return true;

  004cd	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1227 : }

  004cf	5f		 pop	 edi
  004d0	5e		 pop	 esi
  004d1	5b		 pop	 ebx
  004d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d5	33 cd		 xor	 ecx, ebp
  004d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004dc	8b e5		 mov	 esp, ebp
  004de	5d		 pop	 ebp
  004df	c2 08 00	 ret	 8
?OnEventUserItemScore@CLockTimeMatch@@UAE_NPAUIServerUserItem@@E@Z ENDP ; CLockTimeMatch::OnEventUserItemScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z
_TEXT	SEGMENT
tv450 = -244						; size = 4
tv447 = -240						; size = 8
tv434 = -236						; size = 4
tv65 = -236						; size = 4
_MatchUserRevive$1 = -168				; size = 48
_MatchBuySafeCard$2 = -120				; size = 24
_pMatchBuySafeCard$3 = -96				; size = 4
_MatchSignup$4 = -92					; size = 80
_cbSignupMode$5 = -9					; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_wSubCmdID$ = 8						; size = 2
_pData$ = 12						; size = 4
_wDataSize$ = 16					; size = 2
_pIServerUserItem$ = 20					; size = 4
_dwSocketID$ = 24					; size = 4
?OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z PROC ; CLockTimeMatch::OnEventSocketMatch, COMDAT
; _this$ = ecx

; 1005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1006 : 	switch (wSubCmdID)

  00019	0f b7 45 08	 movzx	 eax, WORD PTR _wSubCmdID$[ebp]
  0001d	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00023	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  00029	83 e9 03	 sub	 ecx, 3
  0002c	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00032	83 bd 14 ff ff
	ff 0d		 cmp	 DWORD PTR tv65[ebp], 13	; 0000000dH
  00039	0f 87 06 04 00
	00		 ja	 $LN2@OnEventSoc
  0003f	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00045	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@OnEventSoc[edx]
  0004c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@OnEventSoc[eax*4]
$LN4@OnEventSoc:

; 1007 : 	{
; 1008 : 	case SUB_GR_MATCH_FEE:	//比赛费用
; 1009 : 		{
; 1010 : 			//参数效验
; 1011 : 			ASSERT(wDataSize==sizeof(BYTE));

  00053	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00057	83 f8 01	 cmp	 eax, 1
  0005a	74 19		 je	 SHORT $LN17@OnEventSoc
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
  00062	83 c1 06	 add	 ecx, 6
  00065	51		 push	 ecx
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN17@OnEventSoc
  00074	cc		 int	 3
$LN17@OnEventSoc:

; 1012 : 			if(wDataSize!=sizeof(BYTE)) return false;

  00075	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00079	83 f8 01	 cmp	 eax, 1
  0007c	74 07		 je	 SHORT $LN5@OnEventSoc
  0007e	32 c0		 xor	 al, al
  00080	e9 c2 03 00 00	 jmp	 $LN1@OnEventSoc
$LN5@OnEventSoc:

; 1013 : 
; 1014 : 			//提取数据
; 1015 : 			BYTE cbSignupMode=*(BYTE*)pData;

  00085	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00088	8a 08		 mov	 cl, BYTE PTR [eax]
  0008a	88 4d f7	 mov	 BYTE PTR _cbSignupMode$5[ebp], cl

; 1016 : 			if ((cbSignupMode&m_pMatchOption->cbSignupMode)==0)return false;

  0008d	0f b6 45 f7	 movzx	 eax, BYTE PTR _cbSignupMode$5[ebp]
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00097	0f b6 4a 40	 movzx	 ecx, BYTE PTR [edx+64]
  0009b	23 c1		 and	 eax, ecx
  0009d	75 07		 jne	 SHORT $LN6@OnEventSoc
  0009f	32 c0		 xor	 al, al
  000a1	e9 a1 03 00 00	 jmp	 $LN1@OnEventSoc
$LN6@OnEventSoc:

; 1017 : 
; 1018 : 			//变量定义
; 1019 : 			DBR_GR_MatchSignup MatchSignup;
; 1020 : 			ZeroMemory(&MatchSignup,sizeof(MatchSignup));

  000a6	6a 50		 push	 80			; 00000050H
  000a8	6a 00		 push	 0
  000aa	8d 45 a4	 lea	 eax, DWORD PTR _MatchSignup$4[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _memset
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1021 : 
; 1022 : 			//构造结构
; 1023 : 			MatchSignup.cbSignupMode=cbSignupMode;			

  000b6	8a 45 f7	 mov	 al, BYTE PTR _cbSignupMode$5[ebp]
  000b9	88 45 b4	 mov	 BYTE PTR _MatchSignup$4[ebp+16], al

; 1024 : 			MatchSignup.lMatchNo=m_pMatchOption->lMatchNo;

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000c2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c5	89 55 c4	 mov	 DWORD PTR _MatchSignup$4[ebp+32], edx
  000c8	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000cb	89 45 c8	 mov	 DWORD PTR _MatchSignup$4[ebp+36], eax

; 1025 : 			MatchSignup.dwMatchID=m_pMatchOption->dwMatchID;

  000ce	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d6	89 55 c0	 mov	 DWORD PTR _MatchSignup$4[ebp+28], edx

; 1026 : 			MatchSignup.dwUserID=pIServerUserItem->GetUserID();			

  000d9	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000dc	8b 10		 mov	 edx, DWORD PTR [eax]
  000de	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000e1	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  000e4	ff d0		 call	 eax
  000e6	89 45 a4	 mov	 DWORD PTR _MatchSignup$4[ebp], eax

; 1027 : 			MatchSignup.lInitScore=m_pLockTimeMatch->lMatchInitScore;			

  000e9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000ef	8b 51 49	 mov	 edx, DWORD PTR [ecx+73]
  000f2	89 55 ac	 mov	 DWORD PTR _MatchSignup$4[ebp+8], edx
  000f5	8b 41 4d	 mov	 eax, DWORD PTR [ecx+77]
  000f8	89 45 b0	 mov	 DWORD PTR _MatchSignup$4[ebp+12], eax

; 1028 : 			MatchSignup.dwClientAddr=pIServerUserItem->GetClientAddr();

  000fb	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000fe	8b 10		 mov	 edx, DWORD PTR [eax]
  00100	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00103	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00106	ff d0		 call	 eax
  00108	89 45 bc	 mov	 DWORD PTR _MatchSignup$4[ebp+24], eax

; 1029 : 			MatchSignup.dwInoutIndex=pIServerUserItem->GetInoutIndex();			

  0010b	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00113	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00116	ff d0		 call	 eax
  00118	89 45 b8	 mov	 DWORD PTR _MatchSignup$4[ebp+20], eax

; 1030 : 			MatchSignup.wMaxSignupUser=m_pLockTimeMatch->wMaxSignupUser;

  0011b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00121	66 8b 51 25	 mov	 dx, WORD PTR [ecx+37]
  00125	66 89 55 b6	 mov	 WORD PTR _MatchSignup$4[ebp+18], dx

; 1031 :             
; 1032 : 			//拷贝机器码
; 1033 : 			lstrcpyn(MatchSignup.szMachineID,pIServerUserItem->GetMachineID(),CountArray(MatchSignup.szMachineID));

  00129	6a 21		 push	 33			; 00000021H
  0012b	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0012e	8b 10		 mov	 edx, DWORD PTR [eax]
  00130	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00133	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00136	ff d0		 call	 eax
  00138	50		 push	 eax
  00139	8d 4d cc	 lea	 ecx, DWORD PTR _MatchSignup$4[ebp+40]
  0013c	51		 push	 ecx
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1034 : 
; 1035 : 			//投递数据
; 1036 : 			m_pIDataBaseEngine->PostDataBaseRequest(MatchSignup.dwUserID,DBR_GR_MATCH_SIGNUP,dwSocketID,&MatchSignup,sizeof(MatchSignup));

  00143	6a 00		 push	 0
  00145	6a 50		 push	 80			; 00000050H
  00147	8d 45 a4	 lea	 eax, DWORD PTR _MatchSignup$4[ebp]
  0014a	50		 push	 eax
  0014b	8b 4d 18	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  0014e	51		 push	 ecx
  0014f	68 58 02 00 00	 push	 600			; 00000258H
  00154	8b 55 a4	 mov	 edx, DWORD PTR _MatchSignup$4[ebp]
  00157	52		 push	 edx
  00158	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00161	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00164	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0016a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0016c	50		 push	 eax
  0016d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00170	ff d2		 call	 edx
  00172	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1037 : 
; 1038 : 			return true;

  00175	b0 01		 mov	 al, 1
  00177	e9 cb 02 00 00	 jmp	 $LN1@OnEventSoc
$LN7@OnEventSoc:

; 1039 : 		}
; 1040 : 	case SUB_GR_LEAVE_MATCH:	//退出比赛
; 1041 : 		{
; 1042 : 			//参数效验
; 1043 : 			ASSERT(pIServerUserItem!=NULL);

  0017c	83 7d 14 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00180	75 18		 jne	 SHORT $LN18@OnEventSoc
  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
  00187	83 c0 26	 add	 eax, 38			; 00000026H
  0018a	50		 push	 eax
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00190	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00195	85 c0		 test	 eax, eax
  00197	74 01		 je	 SHORT $LN18@OnEventSoc
  00199	cc		 int	 3
$LN18@OnEventSoc:

; 1044 : 			if(pIServerUserItem==NULL) return false;

  0019a	83 7d 14 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0019e	75 07		 jne	 SHORT $LN8@OnEventSoc
  001a0	32 c0		 xor	 al, al
  001a2	e9 a0 02 00 00	 jmp	 $LN1@OnEventSoc
$LN8@OnEventSoc:

; 1045 : 
; 1046 : 			OnEventUserQuitMatch(pIServerUserItem,UNSIGNUP_REASON_PLAYER,0,dwSocketID);

  001a7	8b 45 18	 mov	 eax, DWORD PTR _dwSocketID$[ebp]
  001aa	50		 push	 eax
  001ab	6a 00		 push	 0
  001ad	6a 00		 push	 0
  001af	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001b2	51		 push	 ecx
  001b3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001b6	8b 02		 mov	 eax, DWORD PTR [edx]
  001b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  001be	ff d2		 call	 edx

; 1047 : 
; 1048 : 			return true;

  001c0	b0 01		 mov	 al, 1
  001c2	e9 80 02 00 00	 jmp	 $LN1@OnEventSoc
$LN9@OnEventSoc:

; 1049 : 		}
; 1050 : 	case SUB_GR_MATCH_BUY_SAFECARD:	//购买保险
; 1051 : 		{
; 1052 : 			//参数效验
; 1053 : 			ASSERT(wDataSize==sizeof(CMD_GR_Match_BuySafeCard));

  001c7	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  001cb	83 f8 01	 cmp	 eax, 1
  001ce	74 19		 je	 SHORT $LN19@OnEventSoc
  001d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
  001d6	83 c1 30	 add	 ecx, 48			; 00000030H
  001d9	51		 push	 ecx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  001df	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001e4	85 c0		 test	 eax, eax
  001e6	74 01		 je	 SHORT $LN19@OnEventSoc
  001e8	cc		 int	 3
$LN19@OnEventSoc:

; 1054 : 			if(wDataSize!=sizeof(CMD_GR_Match_BuySafeCard)) return false;

  001e9	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  001ed	83 f8 01	 cmp	 eax, 1
  001f0	74 07		 je	 SHORT $LN10@OnEventSoc
  001f2	32 c0		 xor	 al, al
  001f4	e9 4e 02 00 00	 jmp	 $LN1@OnEventSoc
$LN10@OnEventSoc:

; 1055 : 
; 1056 : 			//提取数据
; 1057 : 			CMD_GR_Match_BuySafeCard * pMatchBuySafeCard =(CMD_GR_Match_BuySafeCard *)pData;

  001f9	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  001fc	89 45 a0	 mov	 DWORD PTR _pMatchBuySafeCard$3[ebp], eax

; 1058 : 
; 1059 : 			//购买保险
; 1060 : 			if (pMatchBuySafeCard->bBuySafeCard)

  001ff	8b 45 a0	 mov	 eax, DWORD PTR _pMatchBuySafeCard$3[ebp]
  00202	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00205	85 c9		 test	 ecx, ecx
  00207	74 73		 je	 SHORT $LN11@OnEventSoc

; 1061 : 			{
; 1062 : 				//构造结构
; 1063 : 				DBR_GR_MatchBuySafeCard MatchBuySafeCard;
; 1064 : 
; 1065 : 				//设置变量
; 1066 : 				MatchBuySafeCard.dwUserID=pIServerUserItem->GetUserID();

  00209	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0020c	8b 10		 mov	 edx, DWORD PTR [eax]
  0020e	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00211	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00214	ff d0		 call	 eax
  00216	89 45 88	 mov	 DWORD PTR _MatchBuySafeCard$2[ebp], eax

; 1067 : 				MatchBuySafeCard.dwMatchID=m_pMatchOption->dwMatchID;

  00219	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0021c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0021f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00221	89 55 8c	 mov	 DWORD PTR _MatchBuySafeCard$2[ebp+4], edx

; 1068 : 				MatchBuySafeCard.lMatchNo=m_pMatchOption->lMatchNo;

  00224	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00227	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0022a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0022d	89 55 90	 mov	 DWORD PTR _MatchBuySafeCard$2[ebp+8], edx
  00230	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00233	89 45 94	 mov	 DWORD PTR _MatchBuySafeCard$2[ebp+12], eax

; 1069 : 				MatchBuySafeCard.lSafeCardFee=m_pLockTimeMatch->lSafeCardFee;

  00236	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00239	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0023c	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  0023f	89 55 98	 mov	 DWORD PTR _MatchBuySafeCard$2[ebp+16], edx
  00242	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00245	89 45 9c	 mov	 DWORD PTR _MatchBuySafeCard$2[ebp+20], eax

; 1070 : 
; 1071 : 				//投递数据
; 1072 : 				m_pIDataBaseEngine->PostDataBaseRequest(MatchBuySafeCard.dwUserID,DBR_GR_MATCH_BUY_SAFECARD,dwSocketID,&MatchBuySafeCard,sizeof(MatchBuySafeCard));

  00248	6a 00		 push	 0
  0024a	6a 18		 push	 24			; 00000018H
  0024c	8d 45 88	 lea	 eax, DWORD PTR _MatchBuySafeCard$2[ebp]
  0024f	50		 push	 eax
  00250	8b 4d 18	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  00253	51		 push	 ecx
  00254	68 5c 02 00 00	 push	 604			; 0000025cH
  00259	8b 55 88	 mov	 edx, DWORD PTR _MatchBuySafeCard$2[ebp]
  0025c	52		 push	 edx
  0025d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00260	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  00266	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00269	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0026f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00271	50		 push	 eax
  00272	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00275	ff d2		 call	 edx
  00277	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1073 : 			}
; 1074 : 			else

  0027a	eb 30		 jmp	 SHORT $LN12@OnEventSoc
$LN11@OnEventSoc:

; 1075 : 			{
; 1076 : 				//消息通知
; 1077 : 				m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem, TEXT("系统正在努力为您分配座位，请等待！"),SMT_CHAT);

  0027c	6a 01		 push	 1
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LHKCDNBI@?O?$LF?M?$LD?U?$PN?T?Z?E?$KM?A?$KG?N?$KK?D?z?$LH?V?E?d?W?y?N?$LL?$KD?$KM?G?k?$LF?H?$LE@
  00283	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00286	50		 push	 eax
  00287	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0028a	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00290	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00293	8b 12		 mov	 edx, DWORD PTR [edx]
  00295	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0029b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0029e	ff d0		 call	 eax

; 1078 : 
; 1079 : 				//加入分组
; 1080 : 				InsertDistribute(pIServerUserItem);

  002a0	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  002a3	50		 push	 eax
  002a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a7	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute
$LN12@OnEventSoc:

; 1081 : 			}
; 1082 : 
; 1083 : 			return true;

  002ac	b0 01		 mov	 al, 1
  002ae	e9 94 01 00 00	 jmp	 $LN1@OnEventSoc
$LN13@OnEventSoc:

; 1084 : 		}
; 1085 : 	case SUB_GR_MATCH_USER_REVIVE:	//玩家复活
; 1086 : 		{
; 1087 : 			//参数效验
; 1088 : 			ASSERT(pIServerUserItem!=NULL);

  002b3	83 7d 14 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  002b7	75 18		 jne	 SHORT $LN20@OnEventSoc
  002b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
  002be	83 c0 53	 add	 eax, 83			; 00000053H
  002c1	50		 push	 eax
  002c2	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  002c7	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  002cc	85 c0		 test	 eax, eax
  002ce	74 01		 je	 SHORT $LN20@OnEventSoc
  002d0	cc		 int	 3
$LN20@OnEventSoc:

; 1089 : 			if(pIServerUserItem==NULL) return false;

  002d1	83 7d 14 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  002d5	75 07		 jne	 SHORT $LN14@OnEventSoc
  002d7	32 c0		 xor	 al, al
  002d9	e9 69 01 00 00	 jmp	 $LN1@OnEventSoc
$LN14@OnEventSoc:

; 1090 : 
; 1091 : 			//分数判断
; 1092 : 			if (m_pLockTimeMatch->lMatchCullScore>0 && pIServerUserItem->GetUserScore()>m_pLockTimeMatch->lMatchCullScore)

  002de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002e1	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  002e4	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv434[ebp], ecx
  002ea	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv434[ebp]
  002f0	83 7a 55 00	 cmp	 DWORD PTR [edx+85], 0
  002f4	0f 8c 85 00 00
	00		 jl	 $LN15@OnEventSoc
  002fa	7f 0c		 jg	 SHORT $LN22@OnEventSoc
  002fc	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv434[ebp]
  00302	83 78 51 00	 cmp	 DWORD PTR [eax+81], 0
  00306	76 77		 jbe	 SHORT $LN15@OnEventSoc
$LN22@OnEventSoc:
  00308	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0030b	8b 10		 mov	 edx, DWORD PTR [eax]
  0030d	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00310	8b 82 88 00 00
	00		 mov	 eax, DWORD PTR [edx+136]
  00316	ff d0		 call	 eax
  00318	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0031b	8b 49 78	 mov	 ecx, DWORD PTR [ecx+120]
  0031e	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv447[ebp], eax
  00324	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv447[ebp+4], edx
  0032a	89 8d 0c ff ff
	ff		 mov	 DWORD PTR tv450[ebp], ecx
  00330	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv450[ebp]
  00336	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv447[ebp+4]
  0033c	3b 42 55	 cmp	 eax, DWORD PTR [edx+85]
  0033f	7c 3e		 jl	 SHORT $LN15@OnEventSoc
  00341	7f 11		 jg	 SHORT $LN23@OnEventSoc
  00343	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv450[ebp]
  00349	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR tv447[ebp]
  0034f	3b 51 51	 cmp	 edx, DWORD PTR [ecx+81]
  00352	76 2b		 jbe	 SHORT $LN15@OnEventSoc
$LN23@OnEventSoc:

; 1093 : 			{
; 1094 : 				//消息通知
; 1095 : 				m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem, TEXT("您的分数未达到淘汰分数线，不需要复活！"),SMT_CHAT);

  00354	6a 01		 push	 1
  00356	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PJALIOJF@?D?z?$LF?D?$LH?V?J?$PN?N?$LE?$LE?o?$LF?$LN?L?T?L?$KN?$LH?V?J?$PN?O?$NP?$KD?$KM?$LC?$LL?P?h?R@
  0035b	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0035e	50		 push	 eax
  0035f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00362	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00368	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0036b	8b 12		 mov	 edx, DWORD PTR [edx]
  0036d	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00373	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00376	ff d0		 call	 eax

; 1096 : 
; 1097 : 				return true;

  00378	b0 01		 mov	 al, 1
  0037a	e9 c8 00 00 00	 jmp	 $LN1@OnEventSoc
$LN15@OnEventSoc:

; 1098 : 			}			
; 1099 : 
; 1100 : 			//构造结构
; 1101 : 			DBR_GR_MatchUserRevive MatchUserRevive;
; 1102 : 
; 1103 : 			//比赛信息			
; 1104 : 			MatchUserRevive.dwMatchID=m_pMatchOption->dwMatchID;

  0037f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00382	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00385	8b 11		 mov	 edx, DWORD PTR [ecx]
  00387	89 95 5c ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp+4], edx

; 1105 : 			MatchUserRevive.lMatchNo=m_pMatchOption->lMatchNo;

  0038d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00390	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00393	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00396	89 95 60 ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp+8], edx
  0039c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0039f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp+12], eax

; 1106 : 			MatchUserRevive.dwUserID=pIServerUserItem->GetUserID();

  003a5	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  003a8	8b 10		 mov	 edx, DWORD PTR [eax]
  003aa	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  003ad	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  003b0	ff d0		 call	 eax
  003b2	89 85 58 ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp], eax

; 1107 : 
; 1108 : 			//复活配置						
; 1109 : 			MatchUserRevive.lReviveFee=m_pLockTimeMatch->lReviveFee;

  003b8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003bb	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  003be	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  003c1	89 55 80	 mov	 DWORD PTR _MatchUserRevive$1[ebp+40], edx
  003c4	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  003c7	89 45 84	 mov	 DWORD PTR _MatchUserRevive$1[ebp+44], eax

; 1110 : 			MatchUserRevive.lInitScore=m_pLockTimeMatch->lMatchInitScore;

  003ca	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003cd	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  003d0	8b 51 49	 mov	 edx, DWORD PTR [ecx+73]
  003d3	89 95 68 ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp+16], edx
  003d9	8b 41 4d	 mov	 eax, DWORD PTR [ecx+77]
  003dc	89 85 6c ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp+20], eax

; 1111 : 			MatchUserRevive.lCullScore=m_pLockTimeMatch->lMatchCullScore;						

  003e2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003e5	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  003e8	8b 51 51	 mov	 edx, DWORD PTR [ecx+81]
  003eb	89 95 70 ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp+24], edx
  003f1	8b 41 55	 mov	 eax, DWORD PTR [ecx+85]
  003f4	89 85 74 ff ff
	ff		 mov	 DWORD PTR _MatchUserRevive$1[ebp+28], eax

; 1112 : 			MatchUserRevive.cbReviveTimes=m_pLockTimeMatch->cbReviveTimes;			

  003fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003fd	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00400	8a 51 5f	 mov	 dl, BYTE PTR [ecx+95]
  00403	88 95 78 ff ff
	ff		 mov	 BYTE PTR _MatchUserRevive$1[ebp+32], dl

; 1113 : 
; 1114 : 			//投递数据
; 1115 : 			m_pIDataBaseEngine->PostDataBaseRequest(MatchUserRevive.dwUserID,DBR_GR_MATCH_USER_REVIVE,dwSocketID,&MatchUserRevive,sizeof(MatchUserRevive));

  00409	6a 00		 push	 0
  0040b	6a 30		 push	 48			; 00000030H
  0040d	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _MatchUserRevive$1[ebp]
  00413	50		 push	 eax
  00414	8b 4d 18	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  00417	51		 push	 ecx
  00418	68 63 02 00 00	 push	 611			; 00000263H
  0041d	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _MatchUserRevive$1[ebp]
  00423	52		 push	 edx
  00424	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00427	8b 88 8c 00 00
	00		 mov	 ecx, DWORD PTR [eax+140]
  0042d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00430	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00436	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00438	50		 push	 eax
  00439	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0043c	ff d2		 call	 edx
  0043e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1116 : 
; 1117 : 			return true;

  00441	b0 01		 mov	 al, 1
  00443	eb 02		 jmp	 SHORT $LN1@OnEventSoc
$LN2@OnEventSoc:

; 1118 : 		}
; 1119 : 	}
; 1120 : 
; 1121 : 	return true;

  00445	b0 01		 mov	 al, 1
$LN1@OnEventSoc:

; 1122 : }

  00447	5f		 pop	 edi
  00448	5e		 pop	 esi
  00449	5b		 pop	 ebx
  0044a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044d	33 cd		 xor	 ecx, ebp
  0044f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00454	8b e5		 mov	 esp, ebp
  00456	5d		 pop	 ebp
  00457	c2 14 00	 ret	 20			; 00000014H
  0045a	66 90		 npad	 2
$LN24@OnEventSoc:
  0045c	00 00 00 00	 DD	 $LN4@OnEventSoc
  00460	00 00 00 00	 DD	 $LN7@OnEventSoc
  00464	00 00 00 00	 DD	 $LN9@OnEventSoc
  00468	00 00 00 00	 DD	 $LN13@OnEventSoc
  0046c	00 00 00 00	 DD	 $LN2@OnEventSoc
$LN21@OnEventSoc:
  00470	00		 DB	 0
  00471	04		 DB	 4
  00472	01		 DB	 1
  00473	04		 DB	 4
  00474	02		 DB	 2
  00475	04		 DB	 4
  00476	04		 DB	 4
  00477	04		 DB	 4
  00478	04		 DB	 4
  00479	04		 DB	 4
  0047a	04		 DB	 4
  0047b	04		 DB	 4
  0047c	04		 DB	 4
  0047d	03		 DB	 3
?OnEventSocketMatch@CLockTimeMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z ENDP ; CLockTimeMatch::OnEventSocketMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
_TEXT	SEGMENT
tv65 = -476						; size = 4
tv517 = -474						; size = 2
_MatchEndTime$1 = -408					; size = 8
_CurTime$2 = -400					; size = 8
_szMessage$3 = -392					; size = 128
_pMatchCancelResult$4 = -264				; size = 4
_MatchGoldUpdate$5 = -260				; size = 8
_pUserInfo$6 = -252					; size = 4
_pIRewardUserItem$7 = -248				; size = 4
_pMatchRewardResult$8 = -244				; size = 4
_szMessage$9 = -240					; size = 128
_wUserIndex$10 = -112					; size = 2
_wIndex$11 = -108					; size = 2
_pIRewardUserItem$12 = -104				; size = 4
_pMatchRankInfo$13 = -100				; size = 4
_bRewardUser$14 = -93					; size = 1
_pMatchRankList$15 = -92				; size = 4
_MatchGoldUpdate$16 = -88				; size = 8
_cbUserMatchStatus$17 = -77				; size = 1
_pUserScore$18 = -76					; size = 4
_pMatchSignupResult$19 = -72				; size = 4
_MatchGoldUpdate$20 = -68				; size = 8
_cbUserMatchStatus$21 = -57				; size = 1
_pMatchSignupResult$22 = -56				; size = 4
_MatchGoldUpdate$23 = -52				; size = 8
_cbUserMatchStatus$24 = -41				; size = 1
_pMatchReviveResult$25 = -40				; size = 4
_bEliminate$26 = -33					; size = 1
_pMatchReviveInfo$27 = -32				; size = 4
_MatchGoldUpdate$28 = -28				; size = 8
_pMatchBuyResult$29 = -20				; size = 4
_cbSignupMode$30 = -13					; size = 1
_pMatchQueryResult$31 = -12				; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_wRequestID$ = 8					; size = 2
_pIServerUserItem$ = 12					; size = 4
_pData$ = 16						; size = 4
_wDataSize$ = 20					; size = 2
_dwContextID$ = 24					; size = 4
?OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z PROC ; CLockTimeMatch::OnEventDataBase, COMDAT
; _this$ = ecx

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 588  : 	switch(wRequestID)

  00019	0f b7 45 08	 movzx	 eax, WORD PTR _wRequestID$[ebp]
  0001d	89 85 24 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00023	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  00029	81 e9 f5 01 00
	00		 sub	 ecx, 501		; 000001f5H
  0002f	89 8d 24 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00035	83 bd 24 fe ff
	ff 08		 cmp	 DWORD PTR tv65[ebp], 8
  0003c	0f 87 cd 0a 00
	00		 ja	 $LN2@OnEventDat
  00042	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00048	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN70@OnEventDat[edx*4]
$LN9@OnEventDat:

; 589  : 	{
; 590  : 	case DBO_GR_MATCH_QUERY_RESULT:			//查询结果
; 591  : 		{
; 592  : 			//参数校验
; 593  : 			if (pIServerUserItem==NULL) return true;

  0004f	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00053	75 07		 jne	 SHORT $LN10@OnEventDat
  00055	b0 01		 mov	 al, 1
  00057	e9 b5 0a 00 00	 jmp	 $LN1@OnEventDat
$LN10@OnEventDat:

; 594  : 			if (wDataSize!=sizeof(DBO_GR_MatchQueryResult)) return false;

  0005c	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00060	83 f8 01	 cmp	 eax, 1
  00063	74 07		 je	 SHORT $LN11@OnEventDat
  00065	32 c0		 xor	 al, al
  00067	e9 a5 0a 00 00	 jmp	 $LN1@OnEventDat
$LN11@OnEventDat:

; 595  : 
; 596  : 			//提取数据
; 597  : 			DBO_GR_MatchQueryResult * pMatchQueryResult = (DBO_GR_MatchQueryResult*)pData;	

  0006c	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  0006f	89 45 f4	 mov	 DWORD PTR _pMatchQueryResult$31[ebp], eax

; 598  : 
; 599  : 			//具备资格
; 600  : 			if (pMatchQueryResult->bHoldQualify==true)

  00072	8b 45 f4	 mov	 eax, DWORD PTR _pMatchQueryResult$31[ebp]
  00075	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00078	83 f9 01	 cmp	 ecx, 1
  0007b	75 26		 jne	 SHORT $LN12@OnEventDat

; 601  : 			{
; 602  : 				//报名方式
; 603  : 				BYTE cbSignupMode=SIGNUP_MODE_MATCH_USER;

  0007d	c6 45 f3 02	 mov	 BYTE PTR _cbSignupMode$30[ebp], 2

; 604  : 
; 605  : 				//报名费用
; 606  : 				return OnEventSocketMatch(SUB_GR_MATCH_FEE,&cbSignupMode,sizeof(cbSignupMode),pIServerUserItem,dwContextID);

  00081	8b 45 18	 mov	 eax, DWORD PTR _dwContextID$[ebp]
  00084	50		 push	 eax
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00088	51		 push	 ecx
  00089	6a 01		 push	 1
  0008b	8d 55 f3	 lea	 edx, DWORD PTR _cbSignupMode$30[ebp]
  0008e	52		 push	 edx
  0008f	6a 03		 push	 3
  00091	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00094	8b 10		 mov	 edx, DWORD PTR [eax]
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0009c	ff d0		 call	 eax
  0009e	e9 6e 0a 00 00	 jmp	 $LN1@OnEventDat
$LN12@OnEventDat:

; 607  : 			}
; 608  : 
; 609  : 			//扣除费用
; 610  : 			if (m_pMatchOption->cbSignupMode&SIGNUP_MODE_SIGNUP_FEE)

  000a3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000a9	0f b6 51 40	 movzx	 edx, BYTE PTR [ecx+64]
  000ad	83 e2 01	 and	 edx, 1
  000b0	74 0e		 je	 SHORT $LN13@OnEventDat

; 611  : 			{
; 612  : 				//扣费提示
; 613  : 				SendDeductFeeNotify(pIServerUserItem);

  000b2	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	e8 00 00 00 00	 call	 ?SendDeductFeeNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendDeductFeeNotify

; 614  : 			}
; 615  : 			else

  000be	eb 24		 jmp	 SHORT $LN14@OnEventDat
$LN13@OnEventDat:

; 616  : 			{
; 617  : 				//消息通知
; 618  : 				m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem, TEXT("抱歉,您不具备本场比赛的报名资格,报名失败！"),SMT_EJECT);

  000c0	6a 02		 push	 2
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IJGLKDAG@?$LB?$KH?G?$LI?0?D?z?$LC?$LL?$LO?$NP?$LB?$LI?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LF?D?$LB?$KI?C?$PL?W?J?$LI?q@
  000c7	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	8b 12		 mov	 edx, DWORD PTR [edx]
  000d9	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000df	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000e2	ff d0		 call	 eax
$LN14@OnEventDat:

; 619  : 			}
; 620  : 
; 621  : 			return true;

  000e4	b0 01		 mov	 al, 1
  000e6	e9 26 0a 00 00	 jmp	 $LN1@OnEventDat
$LN15@OnEventDat:

; 622  : 		}
; 623  : 	case DBO_GR_MATCH_BUY_RESULT:			//购买结果
; 624  : 		{
; 625  : 			//参数校验
; 626  : 			if (pIServerUserItem==NULL) return true;

  000eb	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  000ef	75 07		 jne	 SHORT $LN16@OnEventDat
  000f1	b0 01		 mov	 al, 1
  000f3	e9 19 0a 00 00	 jmp	 $LN1@OnEventDat
$LN16@OnEventDat:

; 627  : 			if (wDataSize>sizeof(DBO_GR_MatchBuyResult)) return false;

  000f8	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  000fc	3d 90 00 00 00	 cmp	 eax, 144		; 00000090H
  00101	76 07		 jbe	 SHORT $LN17@OnEventDat
  00103	32 c0		 xor	 al, al
  00105	e9 07 0a 00 00	 jmp	 $LN1@OnEventDat
$LN17@OnEventDat:

; 628  : 
; 629  : 			//提取数据
; 630  : 			DBO_GR_MatchBuyResult * pMatchBuyResult = (DBO_GR_MatchBuyResult*)pData;

  0010a	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  0010d	89 45 ec	 mov	 DWORD PTR _pMatchBuyResult$29[ebp], eax

; 631  : 
; 632  : 			//购买失败
; 633  : 			if (pMatchBuyResult->bSuccessed==false)

  00110	8b 45 ec	 mov	 eax, DWORD PTR _pMatchBuyResult$29[ebp]
  00113	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00116	85 c9		 test	 ecx, ecx
  00118	75 41		 jne	 SHORT $LN18@OnEventDat

; 634  : 			{
; 635  : 				//发送消息
; 636  : 				if (pMatchBuyResult->szDescribeString[0]!=0)

  0011a	b8 01 00 00 00	 mov	 eax, 1
  0011f	6b c8 00	 imul	 ecx, eax, 0
  00122	8b 55 ec	 mov	 edx, DWORD PTR _pMatchBuyResult$29[ebp]
  00125	0f be 44 0a 10	 movsx	 eax, BYTE PTR [edx+ecx+16]
  0012a	85 c0		 test	 eax, eax
  0012c	74 26		 je	 SHORT $LN19@OnEventDat

; 637  : 				{
; 638  : 					m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,pMatchBuyResult->szDescribeString,SMT_EJECT);

  0012e	6a 02		 push	 2
  00130	8b 45 ec	 mov	 eax, DWORD PTR _pMatchBuyResult$29[ebp]
  00133	83 c0 10	 add	 eax, 16			; 00000010H
  00136	50		 push	 eax
  00137	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0013a	51		 push	 ecx
  0013b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0013e	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00144	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	8b 10		 mov	 edx, DWORD PTR [eax]
  00149	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  0014f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00152	ff d0		 call	 eax
$LN19@OnEventDat:

; 639  : 				}
; 640  : 
; 641  : 				return true;

  00154	b0 01		 mov	 al, 1
  00156	e9 b6 09 00 00	 jmp	 $LN1@OnEventDat
$LN18@OnEventDat:

; 642  : 			}
; 643  : 
; 644  : 			//消息通知
; 645  : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem, TEXT("恭喜您，保险卡购买成功，请等待系统为您分配座位！"),SMT_CHAT);

  0015b	6a 01		 push	 1
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@IMGKPMKE@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LB?$KD?O?U?$LP?$KI?$LJ?$LK?B?r?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O@
  00162	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00165	50		 push	 eax
  00166	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0016f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00172	8b 12		 mov	 edx, DWORD PTR [edx]
  00174	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0017a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0017d	ff d0		 call	 eax

; 646  : 
; 647  : 			//加入分组
; 648  : 			InsertDistribute(pIServerUserItem);	

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00182	50		 push	 eax
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute

; 649  : 
; 650  : 			//金币更新
; 651  : 			if(pIServerUserItem->IsAndroidUser()==false)

  0018b	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0018e	8b 10		 mov	 edx, DWORD PTR [eax]
  00190	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00193	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00199	ff d0		 call	 eax
  0019b	0f b6 c8	 movzx	 ecx, al
  0019e	85 c9		 test	 ecx, ecx
  001a0	75 3b		 jne	 SHORT $LN20@OnEventDat

; 652  : 			{
; 653  : 				//构造结构
; 654  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 655  : 
; 656  : 				//设置变量
; 657  : 				MatchGoldUpdate.lCurrGold=pMatchBuyResult->lCurrGold;

  001a2	8b 45 ec	 mov	 eax, DWORD PTR _pMatchBuyResult$29[ebp]
  001a5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a8	89 4d e4	 mov	 DWORD PTR _MatchGoldUpdate$28[ebp], ecx
  001ab	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  001ae	89 55 e8	 mov	 DWORD PTR _MatchGoldUpdate$28[ebp+4], edx

; 658  : 
; 659  : 				//发送数据
; 660  : 				return m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  001b1	6a 08		 push	 8
  001b3	8d 45 e4	 lea	 eax, DWORD PTR _MatchGoldUpdate$28[ebp]
  001b6	50		 push	 eax
  001b7	6a 0d		 push	 13			; 0000000dH
  001b9	6a 0a		 push	 10			; 0000000aH
  001bb	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001be	51		 push	 ecx
  001bf	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001c2	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001cb	8b 10		 mov	 edx, DWORD PTR [eax]
  001cd	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  001d3	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001d6	ff d0		 call	 eax
  001d8	e9 34 09 00 00	 jmp	 $LN1@OnEventDat
$LN20@OnEventDat:

; 661  : 			}
; 662  : 
; 663  : 			return true;

  001dd	b0 01		 mov	 al, 1
  001df	e9 2d 09 00 00	 jmp	 $LN1@OnEventDat
$LN21@OnEventDat:

; 664  : 		}		
; 665  : 	case DBO_GR_MATCH_REVIVE_INFO:			//复活信息
; 666  : 		{
; 667  : 			//参数校验
; 668  : 			if (pIServerUserItem==NULL) return true;

  001e4	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  001e8	75 07		 jne	 SHORT $LN22@OnEventDat
  001ea	b0 01		 mov	 al, 1
  001ec	e9 20 09 00 00	 jmp	 $LN1@OnEventDat
$LN22@OnEventDat:

; 669  : 			if (wDataSize!=sizeof(DBO_GR_MatchReviveInfo)) return false;

  001f1	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  001f5	83 f8 03	 cmp	 eax, 3
  001f8	74 07		 je	 SHORT $LN23@OnEventDat
  001fa	32 c0		 xor	 al, al
  001fc	e9 10 09 00 00	 jmp	 $LN1@OnEventDat
$LN23@OnEventDat:

; 670  : 
; 671  : 			//提取数据
; 672  : 			DBO_GR_MatchReviveInfo * pMatchReviveInfo = (DBO_GR_MatchReviveInfo*)pData;

  00201	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00204	89 45 e0	 mov	 DWORD PTR _pMatchReviveInfo$27[ebp], eax

; 673  : 
; 674  : 			//变量定义
; 675  : 			bool bEliminate=false;

  00207	c6 45 df 00	 mov	 BYTE PTR _bEliminate$26[ebp], 0

; 676  : 
; 677  : 			//淘汰判断
; 678  : 			if (!pMatchReviveInfo->bSuccessed || (!pMatchReviveInfo->bSafeCardRevive && pMatchReviveInfo->cbReviveTimesed >= m_pLockTimeMatch->cbReviveTimes))

  0020b	8b 45 e0	 mov	 eax, DWORD PTR _pMatchReviveInfo$27[ebp]
  0020e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00211	85 c9		 test	 ecx, ecx
  00213	74 20		 je	 SHORT $LN25@OnEventDat
  00215	8b 45 e0	 mov	 eax, DWORD PTR _pMatchReviveInfo$27[ebp]
  00218	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0021c	85 c9		 test	 ecx, ecx
  0021e	75 19		 jne	 SHORT $LN24@OnEventDat
  00220	8b 45 e0	 mov	 eax, DWORD PTR _pMatchReviveInfo$27[ebp]
  00223	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00227	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0022a	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0022d	0f b6 50 5f	 movzx	 edx, BYTE PTR [eax+95]
  00231	3b ca		 cmp	 ecx, edx
  00233	7c 04		 jl	 SHORT $LN24@OnEventDat
$LN25@OnEventDat:

; 679  : 			{
; 680  : 				bEliminate=true;

  00235	c6 45 df 01	 mov	 BYTE PTR _bEliminate$26[ebp], 1
$LN24@OnEventDat:

; 681  : 			}
; 682  : 
; 683  : 			//淘汰提醒
; 684  : 			if (bEliminate==true)

  00239	0f b6 45 df	 movzx	 eax, BYTE PTR _bEliminate$26[ebp]
  0023d	83 f8 01	 cmp	 eax, 1
  00240	75 13		 jne	 SHORT $LN26@OnEventDat

; 685  : 			{
; 686  : 				//淘汰提醒
; 687  : 				SendEliminateNotify(pIServerUserItem);

  00242	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00245	50		 push	 eax
  00246	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	e8 00 00 00 00	 call	 ?SendEliminateNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendEliminateNotify

; 688  : 
; 689  : 				return true;

  0024e	b0 01		 mov	 al, 1
  00250	e9 bc 08 00 00	 jmp	 $LN1@OnEventDat
$LN26@OnEventDat:

; 690  : 			}
; 691  : 
; 692  : 			//复活提醒
; 693  : 			SendReviveNotify(pIServerUserItem,pMatchReviveInfo->cbReviveTimesed,pMatchReviveInfo->bSafeCardRevive);

  00255	8b 45 e0	 mov	 eax, DWORD PTR _pMatchReviveInfo$27[ebp]
  00258	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0025c	51		 push	 ecx
  0025d	8b 55 e0	 mov	 edx, DWORD PTR _pMatchReviveInfo$27[ebp]
  00260	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00264	50		 push	 eax
  00265	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00268	51		 push	 ecx
  00269	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0026c	e8 00 00 00 00	 call	 ?SendReviveNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@E_N@Z ; CLockTimeMatch::SendReviveNotify

; 694  : 
; 695  : 			//保险卡复活
; 696  : 			if (pMatchReviveInfo->bSafeCardRevive==true)

  00271	8b 45 e0	 mov	 eax, DWORD PTR _pMatchReviveInfo$27[ebp]
  00274	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00278	83 f9 01	 cmp	 ecx, 1
  0027b	75 1b		 jne	 SHORT $LN27@OnEventDat

; 697  : 			{
; 698  : 				//玩家复活
; 699  : 				OnEventSocketMatch(SUB_GR_MATCH_USER_REVIVE,NULL,0,pIServerUserItem,dwContextID);

  0027d	8b 45 18	 mov	 eax, DWORD PTR _dwContextID$[ebp]
  00280	50		 push	 eax
  00281	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00284	51		 push	 ecx
  00285	6a 00		 push	 0
  00287	6a 00		 push	 0
  00289	6a 10		 push	 16			; 00000010H
  0028b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0028e	8b 02		 mov	 eax, DWORD PTR [edx]
  00290	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00293	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00296	ff d2		 call	 edx
$LN27@OnEventDat:

; 700  : 			}
; 701  : 
; 702  : 			return true;

  00298	b0 01		 mov	 al, 1
  0029a	e9 72 08 00 00	 jmp	 $LN1@OnEventDat
$LN28@OnEventDat:

; 703  : 		}
; 704  : 	case DBO_GR_MATCH_REVIVE_RESULT:		//复活结果
; 705  : 		{
; 706  : 			//参数校验
; 707  : 			if (pIServerUserItem==NULL) return true;

  0029f	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  002a3	75 07		 jne	 SHORT $LN29@OnEventDat
  002a5	b0 01		 mov	 al, 1
  002a7	e9 65 08 00 00	 jmp	 $LN1@OnEventDat
$LN29@OnEventDat:

; 708  : 			if (wDataSize>sizeof(DBO_GR_MatchReviveResult)) return false;

  002ac	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  002b0	3d 90 00 00 00	 cmp	 eax, 144		; 00000090H
  002b5	76 07		 jbe	 SHORT $LN30@OnEventDat
  002b7	32 c0		 xor	 al, al
  002b9	e9 53 08 00 00	 jmp	 $LN1@OnEventDat
$LN30@OnEventDat:

; 709  : 
; 710  : 			//提取数据
; 711  : 			DBO_GR_MatchReviveResult * pMatchReviveResult = (DBO_GR_MatchReviveResult*)pData;

  002be	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  002c1	89 45 d8	 mov	 DWORD PTR _pMatchReviveResult$25[ebp], eax

; 712  : 
; 713  : 			//购买失败
; 714  : 			if (pMatchReviveResult->bSuccessed==false)

  002c4	8b 45 d8	 mov	 eax, DWORD PTR _pMatchReviveResult$25[ebp]
  002c7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  002ca	85 c9		 test	 ecx, ecx
  002cc	75 41		 jne	 SHORT $LN31@OnEventDat

; 715  : 			{
; 716  : 				//发送消息
; 717  : 				if (pMatchReviveResult->szDescribeString[0]!=0)

  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	6b c8 00	 imul	 ecx, eax, 0
  002d6	8b 55 d8	 mov	 edx, DWORD PTR _pMatchReviveResult$25[ebp]
  002d9	0f be 44 0a 10	 movsx	 eax, BYTE PTR [edx+ecx+16]
  002de	85 c0		 test	 eax, eax
  002e0	74 26		 je	 SHORT $LN32@OnEventDat

; 718  : 				{
; 719  : 					m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,pMatchReviveResult->szDescribeString,SMT_EJECT);

  002e2	6a 02		 push	 2
  002e4	8b 45 d8	 mov	 eax, DWORD PTR _pMatchReviveResult$25[ebp]
  002e7	83 c0 10	 add	 eax, 16			; 00000010H
  002ea	50		 push	 eax
  002eb	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002ee	51		 push	 ecx
  002ef	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002f2	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  002f8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002fb	8b 10		 mov	 edx, DWORD PTR [eax]
  002fd	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00303	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00306	ff d0		 call	 eax
$LN32@OnEventDat:

; 720  : 				}
; 721  : 
; 722  : 				return true;

  00308	b0 01		 mov	 al, 1
  0030a	e9 02 08 00 00	 jmp	 $LN1@OnEventDat
$LN31@OnEventDat:

; 723  : 			}
; 724  : 
; 725  : 			//发送分数
; 726  : 			SendMatchUserInitScore(pIServerUserItem);

  0030f	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00312	50		 push	 eax
  00313	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00316	e8 00 00 00 00	 call	 ?SendMatchUserInitScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserInitScore

; 727  : 
; 728  : 			//设置状态
; 729  : 			pIServerUserItem->SetUserMatchStatus(MUS_SIGNUPED);

  0031b	6a 02		 push	 2
  0031d	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00320	8b 10		 mov	 edx, DWORD PTR [eax]
  00322	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00325	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  0032b	ff d0		 call	 eax

; 730  : 
; 731  : 			//报名状态		
; 732  : 			BYTE cbUserMatchStatus=pIServerUserItem->GetUserMatchStatus();

  0032d	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00330	8b 10		 mov	 edx, DWORD PTR [eax]
  00332	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00335	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0033b	ff d0		 call	 eax
  0033d	88 45 d7	 mov	 BYTE PTR _cbUserMatchStatus$24[ebp], al

; 733  : 			m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_USTATUS,&cbUserMatchStatus,sizeof(cbUserMatchStatus));

  00340	6a 01		 push	 1
  00342	8d 45 d7	 lea	 eax, DWORD PTR _cbUserMatchStatus$24[ebp]
  00345	50		 push	 eax
  00346	6a 0b		 push	 11			; 0000000bH
  00348	6a 0a		 push	 10			; 0000000aH
  0034a	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0034d	51		 push	 ecx
  0034e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00351	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00357	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0035a	8b 10		 mov	 edx, DWORD PTR [eax]
  0035c	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00362	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00365	ff d0		 call	 eax

; 734  : 
; 735  : 			//消息通知
; 736  : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem, TEXT("恭喜您，复活成功，请等待系统为您分配座位！"),SMT_CHAT|SMT_EJECT);

  00367	6a 03		 push	 3
  00369	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GGBOLFBO@?$LJ?$KH?O?$LC?D?z?$KD?$KM?$LI?$LE?$LL?n?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D@
  0036e	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00371	50		 push	 eax
  00372	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00375	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0037b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0037e	8b 12		 mov	 edx, DWORD PTR [edx]
  00380	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00386	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00389	ff d0		 call	 eax

; 737  : 
; 738  : 			//加入分组
; 739  : 			InsertDistribute(pIServerUserItem);	

  0038b	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0038e	50		 push	 eax
  0038f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00392	e8 00 00 00 00	 call	 ?InsertDistribute@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::InsertDistribute

; 740  : 
; 741  : 			//金币更新
; 742  : 			if(pIServerUserItem->IsAndroidUser()==false)

  00397	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0039a	8b 10		 mov	 edx, DWORD PTR [eax]
  0039c	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0039f	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  003a5	ff d0		 call	 eax
  003a7	0f b6 c8	 movzx	 ecx, al
  003aa	85 c9		 test	 ecx, ecx
  003ac	75 3b		 jne	 SHORT $LN33@OnEventDat

; 743  : 			{
; 744  : 				//构造结构
; 745  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 746  : 
; 747  : 				//设置变量
; 748  : 				MatchGoldUpdate.lCurrGold=pMatchReviveResult->lCurrGold;

  003ae	8b 45 d8	 mov	 eax, DWORD PTR _pMatchReviveResult$25[ebp]
  003b1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003b4	89 4d cc	 mov	 DWORD PTR _MatchGoldUpdate$23[ebp], ecx
  003b7	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  003ba	89 55 d0	 mov	 DWORD PTR _MatchGoldUpdate$23[ebp+4], edx

; 749  : 
; 750  : 				//发送数据
; 751  : 				return m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  003bd	6a 08		 push	 8
  003bf	8d 45 cc	 lea	 eax, DWORD PTR _MatchGoldUpdate$23[ebp]
  003c2	50		 push	 eax
  003c3	6a 0d		 push	 13			; 0000000dH
  003c5	6a 0a		 push	 10			; 0000000aH
  003c7	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  003ca	51		 push	 ecx
  003cb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003ce	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  003d4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003d7	8b 10		 mov	 edx, DWORD PTR [eax]
  003d9	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  003df	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  003e2	ff d0		 call	 eax
  003e4	e9 28 07 00 00	 jmp	 $LN1@OnEventDat
$LN33@OnEventDat:

; 752  : 			}
; 753  : 
; 754  : 			return true;

  003e9	b0 01		 mov	 al, 1
  003eb	e9 21 07 00 00	 jmp	 $LN1@OnEventDat
$LN34@OnEventDat:

; 755  : 		}
; 756  : 	case DBO_GR_MATCH_SIGNUP_RESULT:		//报名结果
; 757  : 		{
; 758  : 			//参数效验
; 759  : 			if (pIServerUserItem==NULL) return true;

  003f0	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  003f4	75 07		 jne	 SHORT $LN35@OnEventDat
  003f6	b0 01		 mov	 al, 1
  003f8	e9 14 07 00 00	 jmp	 $LN1@OnEventDat
$LN35@OnEventDat:

; 760  : 			if (wDataSize>sizeof(DBO_GR_MatchSingupResult)) return false;

  003fd	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00401	3d a8 00 00 00	 cmp	 eax, 168		; 000000a8H
  00406	76 07		 jbe	 SHORT $LN36@OnEventDat
  00408	32 c0		 xor	 al, al
  0040a	e9 02 07 00 00	 jmp	 $LN1@OnEventDat
$LN36@OnEventDat:

; 761  : 
; 762  : 			//提取数据
; 763  : 			DBO_GR_MatchSingupResult * pMatchSignupResult = (DBO_GR_MatchSingupResult*)pData;			

  0040f	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00412	89 45 c8	 mov	 DWORD PTR _pMatchSignupResult$22[ebp], eax

; 764  : 
; 765  : 			//报名失败
; 766  : 			if (pMatchSignupResult->bResultCode==false)

  00415	8b 45 c8	 mov	 eax, DWORD PTR _pMatchSignupResult$22[ebp]
  00418	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0041b	85 c9		 test	 ecx, ecx
  0041d	75 41		 jne	 SHORT $LN37@OnEventDat

; 767  : 			{
; 768  : 				//提示消息不为空
; 769  : 				if (pMatchSignupResult->szDescribeString[0]!=0)

  0041f	b8 01 00 00 00	 mov	 eax, 1
  00424	6b c8 00	 imul	 ecx, eax, 0
  00427	8b 55 c8	 mov	 edx, DWORD PTR _pMatchSignupResult$22[ebp]
  0042a	0f be 44 0a 28	 movsx	 eax, BYTE PTR [edx+ecx+40]
  0042f	85 c0		 test	 eax, eax
  00431	74 26		 je	 SHORT $LN38@OnEventDat

; 770  : 				{
; 771  : 					m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,pMatchSignupResult->szDescribeString,SMT_EJECT);

  00433	6a 02		 push	 2
  00435	8b 45 c8	 mov	 eax, DWORD PTR _pMatchSignupResult$22[ebp]
  00438	83 c0 28	 add	 eax, 40			; 00000028H
  0043b	50		 push	 eax
  0043c	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0043f	51		 push	 ecx
  00440	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00443	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00449	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044c	8b 10		 mov	 edx, DWORD PTR [eax]
  0044e	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00454	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00457	ff d0		 call	 eax
$LN38@OnEventDat:

; 772  : 				}
; 773  : 
; 774  : 				return true;

  00459	b0 01		 mov	 al, 1
  0045b	e9 b1 06 00 00	 jmp	 $LN1@OnEventDat
$LN37@OnEventDat:

; 775  : 			}
; 776  : 
; 777  : 			//发送分数
; 778  : 			SendMatchUserInitScore(pIServerUserItem);

  00460	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00463	50		 push	 eax
  00464	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00467	e8 00 00 00 00	 call	 ?SendMatchUserInitScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserInitScore

; 779  : 
; 780  : 			//设置状态
; 781  : 			pIServerUserItem->SetUserMatchStatus(MUS_SIGNUPED);

  0046c	6a 02		 push	 2
  0046e	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00471	8b 10		 mov	 edx, DWORD PTR [eax]
  00473	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00476	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  0047c	ff d0		 call	 eax

; 782  : 
; 783  : 			//报名状态		
; 784  : 			BYTE cbUserMatchStatus=pIServerUserItem->GetUserMatchStatus();

  0047e	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00481	8b 10		 mov	 edx, DWORD PTR [eax]
  00483	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00486	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0048c	ff d0		 call	 eax
  0048e	88 45 c7	 mov	 BYTE PTR _cbUserMatchStatus$21[ebp], al

; 785  : 			m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_USTATUS,&cbUserMatchStatus,sizeof(cbUserMatchStatus));		

  00491	6a 01		 push	 1
  00493	8d 45 c7	 lea	 eax, DWORD PTR _cbUserMatchStatus$21[ebp]
  00496	50		 push	 eax
  00497	6a 0b		 push	 11			; 0000000bH
  00499	6a 0a		 push	 10			; 0000000aH
  0049b	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0049e	51		 push	 ecx
  0049f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004a2	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  004a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004ab	8b 10		 mov	 edx, DWORD PTR [eax]
  004ad	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  004b3	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  004b6	ff d0		 call	 eax

; 786  : 
; 787  : 			//使用保险卡
; 788  : 			if (m_pLockTimeMatch->cbReviveEnabled && m_pLockTimeMatch->cbSafeCardEnabled && pIServerUserItem->IsAndroidUser()==false)

  004b8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004bb	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  004be	0f b6 51 5d	 movzx	 edx, BYTE PTR [ecx+93]
  004c2	85 d2		 test	 edx, edx
  004c4	74 33		 je	 SHORT $LN39@OnEventDat
  004c6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004c9	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  004cc	0f b6 51 5e	 movzx	 edx, BYTE PTR [ecx+94]
  004d0	85 d2		 test	 edx, edx
  004d2	74 25		 je	 SHORT $LN39@OnEventDat
  004d4	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  004d7	8b 10		 mov	 edx, DWORD PTR [eax]
  004d9	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  004dc	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  004e2	ff d0		 call	 eax
  004e4	0f b6 c8	 movzx	 ecx, al
  004e7	85 c9		 test	 ecx, ecx
  004e9	75 0e		 jne	 SHORT $LN39@OnEventDat

; 789  : 			{
; 790  : 				SendSafeCardNotify(pIServerUserItem);

  004eb	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  004ee	50		 push	 eax
  004ef	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004f2	e8 00 00 00 00	 call	 ?SendSafeCardNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendSafeCardNotify

; 791  : 			}
; 792  : 			else

  004f7	eb 0c		 jmp	 SHORT $LN40@OnEventDat
$LN39@OnEventDat:

; 793  : 			{
; 794  : 				SendSignupSuccessNotify(pIServerUserItem);				

  004f9	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  004fc	50		 push	 eax
  004fd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00500	e8 00 00 00 00	 call	 ?SendSignupSuccessNotify@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendSignupSuccessNotify
$LN40@OnEventDat:

; 795  : 			}
; 796  : 
; 797  : 			//金币更新
; 798  : 			if(pIServerUserItem->IsAndroidUser()==false)

  00505	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00508	8b 10		 mov	 edx, DWORD PTR [eax]
  0050a	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0050d	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00513	ff d0		 call	 eax
  00515	0f b6 c8	 movzx	 ecx, al
  00518	85 c9		 test	 ecx, ecx
  0051a	75 3b		 jne	 SHORT $LN41@OnEventDat

; 799  : 			{
; 800  : 				//构造结构
; 801  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 802  : 
; 803  : 				//设置变量
; 804  : 				MatchGoldUpdate.lCurrGold=pMatchSignupResult->lCurrGold;

  0051c	8b 45 c8	 mov	 eax, DWORD PTR _pMatchSignupResult$22[ebp]
  0051f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00522	89 4d bc	 mov	 DWORD PTR _MatchGoldUpdate$20[ebp], ecx
  00525	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00528	89 55 c0	 mov	 DWORD PTR _MatchGoldUpdate$20[ebp+4], edx

; 805  : 
; 806  : 				//发送数据
; 807  : 				return m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  0052b	6a 08		 push	 8
  0052d	8d 45 bc	 lea	 eax, DWORD PTR _MatchGoldUpdate$20[ebp]
  00530	50		 push	 eax
  00531	6a 0d		 push	 13			; 0000000dH
  00533	6a 0a		 push	 10			; 0000000aH
  00535	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00538	51		 push	 ecx
  00539	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0053c	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00542	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00545	8b 10		 mov	 edx, DWORD PTR [eax]
  00547	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  0054d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00550	ff d0		 call	 eax
  00552	e9 ba 05 00 00	 jmp	 $LN1@OnEventDat
$LN41@OnEventDat:

; 808  : 			}
; 809  : 
; 810  : 			break;

  00557	e9 b3 05 00 00	 jmp	 $LN2@OnEventDat
$LN42@OnEventDat:

; 811  : 		}
; 812  : 	case DBO_GR_MATCH_UNSIGNUP_RESULT:		//退赛结果
; 813  : 		{
; 814  : 			//参数效验
; 815  : 			if(pIServerUserItem==NULL) return true;

  0055c	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00560	75 07		 jne	 SHORT $LN43@OnEventDat
  00562	b0 01		 mov	 al, 1
  00564	e9 a8 05 00 00	 jmp	 $LN1@OnEventDat
$LN43@OnEventDat:

; 816  : 			if(wDataSize>sizeof(DBO_GR_MatchSingupResult)) return false;

  00569	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0056d	3d a8 00 00 00	 cmp	 eax, 168		; 000000a8H
  00572	76 07		 jbe	 SHORT $LN44@OnEventDat
  00574	32 c0		 xor	 al, al
  00576	e9 96 05 00 00	 jmp	 $LN1@OnEventDat
$LN44@OnEventDat:

; 817  : 
; 818  : 			//提取数据
; 819  : 			DBO_GR_MatchSingupResult * pMatchSignupResult = (DBO_GR_MatchSingupResult*)pData;

  0057b	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  0057e	89 45 b8	 mov	 DWORD PTR _pMatchSignupResult$19[ebp], eax

; 820  : 
; 821  : 			//系统取消
; 822  : 			if (pMatchSignupResult->dwReason==UNSIGNUP_REASON_SYSTEM) return true;

  00581	8b 45 b8	 mov	 eax, DWORD PTR _pMatchSignupResult$19[ebp]
  00584	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00588	75 07		 jne	 SHORT $LN45@OnEventDat
  0058a	b0 01		 mov	 al, 1
  0058c	e9 80 05 00 00	 jmp	 $LN1@OnEventDat
$LN45@OnEventDat:

; 823  : 
; 824  : 			//退费失败
; 825  : 			if(pMatchSignupResult->bResultCode==false)

  00591	8b 45 b8	 mov	 eax, DWORD PTR _pMatchSignupResult$19[ebp]
  00594	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00597	85 c9		 test	 ecx, ecx
  00599	75 2d		 jne	 SHORT $LN46@OnEventDat

; 826  : 			{
; 827  : 				m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,pMatchSignupResult->szDescribeString,SMT_EJECT);

  0059b	6a 02		 push	 2
  0059d	8b 45 b8	 mov	 eax, DWORD PTR _pMatchSignupResult$19[ebp]
  005a0	83 c0 28	 add	 eax, 40			; 00000028H
  005a3	50		 push	 eax
  005a4	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  005a7	51		 push	 ecx
  005a8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005ab	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  005b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005b4	8b 10		 mov	 edx, DWORD PTR [eax]
  005b6	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  005bc	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  005bf	ff d0		 call	 eax

; 828  : 
; 829  : 				return true;

  005c1	b0 01		 mov	 al, 1
  005c3	e9 49 05 00 00	 jmp	 $LN1@OnEventDat
$LN46@OnEventDat:

; 830  : 			}
; 831  : 
; 832  : 			//获取成绩
; 833  : 			tagUserInfo *pUserScore=pIServerUserItem->GetUserInfo();

  005c8	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  005cb	8b 10		 mov	 edx, DWORD PTR [eax]
  005cd	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  005d0	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  005d3	ff d0		 call	 eax
  005d5	89 45 b4	 mov	 DWORD PTR _pUserScore$18[ebp], eax

; 834  : 
; 835  : 			//设置成绩
; 836  : 			pUserScore->dwWinCount=0L;

  005d8	8b 45 b4	 mov	 eax, DWORD PTR _pUserScore$18[ebp]
  005db	c7 80 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+216], 0

; 837  : 			pUserScore->dwLostCount=0L;

  005e5	8b 45 b4	 mov	 eax, DWORD PTR _pUserScore$18[ebp]
  005e8	c7 80 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+220], 0

; 838  : 			pUserScore->dwFleeCount=0L;

  005f2	8b 45 b4	 mov	 eax, DWORD PTR _pUserScore$18[ebp]
  005f5	c7 80 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+228], 0

; 839  : 			pUserScore->dwDrawCount=0L;

  005ff	8b 45 b4	 mov	 eax, DWORD PTR _pUserScore$18[ebp]
  00602	c7 80 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+224], 0

; 840  : 			pUserScore->lIntegralCount=0L;

  0060c	8b 45 b4	 mov	 eax, DWORD PTR _pUserScore$18[ebp]
  0060f	c7 80 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+244], 0
  00619	c7 80 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+248], 0

; 841  : 			pUserScore->bConsumptionType.lScore -= m_pLockTimeMatch->lMatchInitScore;

  00623	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00626	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00629	8b 55 b4	 mov	 edx, DWORD PTR _pUserScore$18[ebp]
  0062c	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  00632	2b 41 49	 sub	 eax, DWORD PTR [ecx+73]
  00635	8b 92 ac 00 00
	00		 mov	 edx, DWORD PTR [edx+172]
  0063b	1b 51 4d	 sbb	 edx, DWORD PTR [ecx+77]
  0063e	8b 4d b4	 mov	 ecx, DWORD PTR _pUserScore$18[ebp]
  00641	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
  00647	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx

; 842  : 
; 843  : 			//发送分数
; 844  : 			SendMatchUserScore(pIServerUserItem);

  0064d	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00650	50		 push	 eax
  00651	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00654	e8 00 00 00 00	 call	 ?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserScore

; 845  : 
; 846  : 			//设置状态
; 847  : 			pIServerUserItem->SetUserMatchStatus(MUS_NULL);

  00659	6a 00		 push	 0
  0065b	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0065e	8b 10		 mov	 edx, DWORD PTR [eax]
  00660	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00663	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  00669	ff d0		 call	 eax

; 848  : 
; 849  : 			//报名状态		
; 850  : 			BYTE cbUserMatchStatus=pIServerUserItem->GetUserMatchStatus();

  0066b	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0066e	8b 10		 mov	 edx, DWORD PTR [eax]
  00670	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00673	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00679	ff d0		 call	 eax
  0067b	88 45 b3	 mov	 BYTE PTR _cbUserMatchStatus$17[ebp], al

; 851  : 			m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_USTATUS,&cbUserMatchStatus,sizeof(cbUserMatchStatus));

  0067e	6a 01		 push	 1
  00680	8d 45 b3	 lea	 eax, DWORD PTR _cbUserMatchStatus$17[ebp]
  00683	50		 push	 eax
  00684	6a 0b		 push	 11			; 0000000bH
  00686	6a 0a		 push	 10			; 0000000aH
  00688	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0068b	51		 push	 ecx
  0068c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0068f	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00695	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00698	8b 10		 mov	 edx, DWORD PTR [eax]
  0069a	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  006a0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  006a3	ff d0		 call	 eax

; 852  : 
; 853  : 			//金币更新
; 854  : 			if(pIServerUserItem->IsAndroidUser()==false)

  006a5	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  006a8	8b 10		 mov	 edx, DWORD PTR [eax]
  006aa	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  006ad	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  006b3	ff d0		 call	 eax
  006b5	0f b6 c8	 movzx	 ecx, al
  006b8	85 c9		 test	 ecx, ecx
  006ba	75 3b		 jne	 SHORT $LN47@OnEventDat

; 855  : 			{
; 856  : 				//构造结构
; 857  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 858  : 
; 859  : 				//设置变量
; 860  : 				MatchGoldUpdate.lCurrGold=pMatchSignupResult->lCurrGold;

  006bc	8b 45 b8	 mov	 eax, DWORD PTR _pMatchSignupResult$19[ebp]
  006bf	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  006c2	89 4d a8	 mov	 DWORD PTR _MatchGoldUpdate$16[ebp], ecx
  006c5	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  006c8	89 55 ac	 mov	 DWORD PTR _MatchGoldUpdate$16[ebp+4], edx

; 861  : 
; 862  : 				//发送数据
; 863  : 				return m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  006cb	6a 08		 push	 8
  006cd	8d 45 a8	 lea	 eax, DWORD PTR _MatchGoldUpdate$16[ebp]
  006d0	50		 push	 eax
  006d1	6a 0d		 push	 13			; 0000000dH
  006d3	6a 0a		 push	 10			; 0000000aH
  006d5	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  006d8	51		 push	 ecx
  006d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  006dc	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  006e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006e5	8b 10		 mov	 edx, DWORD PTR [eax]
  006e7	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  006ed	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  006f0	ff d0		 call	 eax
  006f2	e9 1a 04 00 00	 jmp	 $LN1@OnEventDat
$LN47@OnEventDat:

; 864  : 			}
; 865  : 
; 866  : 			break;

  006f7	e9 13 04 00 00	 jmp	 $LN2@OnEventDat
$LN48@OnEventDat:

; 867  : 		}
; 868  : 	case DBO_GR_MATCH_RANK_LIST:			//比赛排行
; 869  : 		{
; 870  : 			//参数校验
; 871  : 			ASSERT(wDataSize<=sizeof(DBO_GR_MatchRankList));

  006fc	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00700	3d 18 14 00 00	 cmp	 eax, 5144		; 00001418H
  00705	76 1c		 jbe	 SHORT $LN65@OnEventDat
  00707	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
  0070d	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  00713	51		 push	 ecx
  00714	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00719	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0071e	85 c0		 test	 eax, eax
  00720	74 01		 je	 SHORT $LN65@OnEventDat
  00722	cc		 int	 3
$LN65@OnEventDat:

; 872  : 			if(wDataSize>sizeof(DBO_GR_MatchRankList)) return false;

  00723	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00727	3d 18 14 00 00	 cmp	 eax, 5144		; 00001418H
  0072c	76 07		 jbe	 SHORT $LN49@OnEventDat
  0072e	32 c0		 xor	 al, al
  00730	e9 dc 03 00 00	 jmp	 $LN1@OnEventDat
$LN49@OnEventDat:

; 873  : 
; 874  : 			//提取数据
; 875  : 			DBO_GR_MatchRankList * pMatchRankList = (DBO_GR_MatchRankList*)pData;

  00735	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00738	89 45 a4	 mov	 DWORD PTR _pMatchRankList$15[ebp], eax

; 876  : 
; 877  : 			//变量定义
; 878  : 			bool bRewardUser=true;

  0073b	c6 45 a3 01	 mov	 BYTE PTR _bRewardUser$14[ebp], 1

; 879  : 			tagMatchRankInfo * pMatchRankInfo=NULL;

  0073f	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _pMatchRankInfo$13[ebp], 0

; 880  : 			IServerUserItem * pIRewardUserItem=NULL;

  00746	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _pIRewardUserItem$12[ebp], 0

; 881  : 
; 882  : 			//发放奖励
; 883  : 			for(WORD wIndex=0;wIndex<pMatchRankList->wUserCount;wIndex++)

  0074d	33 c0		 xor	 eax, eax
  0074f	66 89 45 94	 mov	 WORD PTR _wIndex$11[ebp], ax
  00753	eb 0c		 jmp	 SHORT $LN6@OnEventDat
$LN4@OnEventDat:
  00755	66 8b 45 94	 mov	 ax, WORD PTR _wIndex$11[ebp]
  00759	66 83 c0 01	 add	 ax, 1
  0075d	66 89 45 94	 mov	 WORD PTR _wIndex$11[ebp], ax
$LN6@OnEventDat:
  00761	0f b7 45 94	 movzx	 eax, WORD PTR _wIndex$11[ebp]
  00765	8b 4d a4	 mov	 ecx, DWORD PTR _pMatchRankList$15[ebp]
  00768	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  0076c	3b c2		 cmp	 eax, edx
  0076e	0f 8d 83 00 00
	00		 jge	 $LN5@OnEventDat

; 884  : 			{
; 885  : 				//查找玩家
; 886  : 				pMatchRankInfo=&pMatchRankList->MatchRankInfo[wIndex];

  00774	0f b7 45 94	 movzx	 eax, WORD PTR _wIndex$11[ebp]
  00778	6b c8 28	 imul	 ecx, eax, 40
  0077b	8b 55 a4	 mov	 edx, DWORD PTR _pMatchRankList$15[ebp]
  0077e	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  00782	89 45 9c	 mov	 DWORD PTR _pMatchRankInfo$13[ebp], eax

; 887  : 				pIRewardUserItem=m_pIServerUserManager->SearchUserItem(pMatchRankInfo->dwUserID);

  00785	8b 45 9c	 mov	 eax, DWORD PTR _pMatchRankInfo$13[ebp]
  00788	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0078b	51		 push	 ecx
  0078c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0078f	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00795	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00798	8b 10		 mov	 edx, DWORD PTR [eax]
  0079a	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  007a0	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  007a3	ff d0		 call	 eax
  007a5	89 45 98	 mov	 DWORD PTR _pIRewardUserItem$12[ebp], eax

; 888  : 				if (pIRewardUserItem!=NULL && pIRewardUserItem->IsAndroidUser()==true) continue;

  007a8	83 7d 98 00	 cmp	 DWORD PTR _pIRewardUserItem$12[ebp], 0
  007ac	74 1a		 je	 SHORT $LN50@OnEventDat
  007ae	8b 45 98	 mov	 eax, DWORD PTR _pIRewardUserItem$12[ebp]
  007b1	8b 10		 mov	 edx, DWORD PTR [eax]
  007b3	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  007b6	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  007bc	ff d0		 call	 eax
  007be	0f b6 c8	 movzx	 ecx, al
  007c1	83 f9 01	 cmp	 ecx, 1
  007c4	75 02		 jne	 SHORT $LN50@OnEventDat
  007c6	eb 8d		 jmp	 SHORT $LN4@OnEventDat
$LN50@OnEventDat:

; 889  : 
; 890  : 				//写入奖励
; 891  : 				WriteUserAward(pIRewardUserItem,pMatchRankInfo);

  007c8	8b 45 9c	 mov	 eax, DWORD PTR _pMatchRankInfo$13[ebp]
  007cb	50		 push	 eax
  007cc	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  007cf	51		 push	 ecx
  007d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  007d3	e8 00 00 00 00	 call	 ?WriteUserAward@CLockTimeMatch@@IAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z ; CLockTimeMatch::WriteUserAward

; 892  : 
; 893  : 				//设置标识
; 894  : 				if(pIRewardUserItem) pIRewardUserItem->SetMatchData(&bRewardUser);

  007d8	83 7d 98 00	 cmp	 DWORD PTR _pIRewardUserItem$12[ebp], 0
  007dc	74 14		 je	 SHORT $LN51@OnEventDat
  007de	8d 45 a3	 lea	 eax, DWORD PTR _bRewardUser$14[ebp]
  007e1	50		 push	 eax
  007e2	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  007e5	8b 11		 mov	 edx, DWORD PTR [ecx]
  007e7	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  007ea	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  007f0	ff d0		 call	 eax
$LN51@OnEventDat:

; 895  : 			}

  007f2	e9 5e ff ff ff	 jmp	 $LN4@OnEventDat
$LN5@OnEventDat:

; 896  : 
; 897  : 			//在线用户
; 898  : 			WORD wUserIndex=0;			

  007f7	33 c0		 xor	 eax, eax
  007f9	66 89 45 90	 mov	 WORD PTR _wUserIndex$10[ebp], ax
$LN7@OnEventDat:

; 899  : 			while (true)

  007fd	b8 01 00 00 00	 mov	 eax, 1
  00802	85 c0		 test	 eax, eax
  00804	0f 84 e4 00 00
	00		 je	 $LN8@OnEventDat

; 900  : 			{
; 901  : 				pIRewardUserItem=m_pIServerUserManager->EnumUserItem(wUserIndex++);

  0080a	66 8b 45 90	 mov	 ax, WORD PTR _wUserIndex$10[ebp]
  0080e	66 89 85 26 fe
	ff ff		 mov	 WORD PTR tv517[ebp], ax
  00815	0f b7 8d 26 fe
	ff ff		 movzx	 ecx, WORD PTR tv517[ebp]
  0081c	51		 push	 ecx
  0081d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00820	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00826	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00829	8b 10		 mov	 edx, DWORD PTR [eax]
  0082b	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  00831	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00834	ff d0		 call	 eax
  00836	89 45 98	 mov	 DWORD PTR _pIRewardUserItem$12[ebp], eax
  00839	66 8b 4d 90	 mov	 cx, WORD PTR _wUserIndex$10[ebp]
  0083d	66 83 c1 01	 add	 cx, 1
  00841	66 89 4d 90	 mov	 WORD PTR _wUserIndex$10[ebp], cx

; 902  : 				if (pIRewardUserItem==NULL) break;

  00845	83 7d 98 00	 cmp	 DWORD PTR _pIRewardUserItem$12[ebp], 0
  00849	75 05		 jne	 SHORT $LN52@OnEventDat
  0084b	e9 9e 00 00 00	 jmp	 $LN8@OnEventDat
$LN52@OnEventDat:

; 903  : 				if (pIRewardUserItem->IsAndroidUser()==true) continue;

  00850	8b 45 98	 mov	 eax, DWORD PTR _pIRewardUserItem$12[ebp]
  00853	8b 10		 mov	 edx, DWORD PTR [eax]
  00855	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  00858	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0085e	ff d0		 call	 eax
  00860	0f b6 c8	 movzx	 ecx, al
  00863	83 f9 01	 cmp	 ecx, 1
  00866	75 02		 jne	 SHORT $LN53@OnEventDat
  00868	eb 93		 jmp	 SHORT $LN7@OnEventDat
$LN53@OnEventDat:

; 904  : 				if (pIRewardUserItem->GetMatchData()==&bRewardUser)

  0086a	8b 45 98	 mov	 eax, DWORD PTR _pIRewardUserItem$12[ebp]
  0086d	8b 10		 mov	 edx, DWORD PTR [eax]
  0086f	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  00872	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  00878	ff d0		 call	 eax
  0087a	8d 4d a3	 lea	 ecx, DWORD PTR _bRewardUser$14[ebp]
  0087d	3b c1		 cmp	 eax, ecx
  0087f	75 17		 jne	 SHORT $LN54@OnEventDat

; 905  : 				{
; 906  : 					//设置参数
; 907  : 					pIRewardUserItem->SetMatchData(NULL);

  00881	6a 00		 push	 0
  00883	8b 45 98	 mov	 eax, DWORD PTR _pIRewardUserItem$12[ebp]
  00886	8b 10		 mov	 edx, DWORD PTR [eax]
  00888	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  0088b	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  00891	ff d0		 call	 eax

; 908  : 
; 909  : 					//构造消息
; 910  : 					//TCHAR szMessage[256]=TEXT"\0";
; 911  : 					//_sntprintf_s(szMessage,CountArray(szMessage),TEXT"点击查看比赛排行：http://service.foxuc.com/GameMatch.aspx?PlazaStationID=%d&TypeID=2&MatchID=%d"),
; 912  : 					//pIRewardUserItem->GetPlazaStationID(),m_pMatchOption->dwMatchID);
; 913  : 
; 914  : 					////发送消息
; 915  : 					//m_pIGameServiceFrame->SendGameMessage(pIRewardUserItem,szMessage,SMT_CHAT|SMT_GLOBAL);	
; 916  : 
; 917  : 					continue;

  00893	e9 65 ff ff ff	 jmp	 $LN7@OnEventDat
$LN54@OnEventDat:

; 918  : 				}
; 919  : 
; 920  : 				//发送结束消息
; 921  : 				TCHAR szMessage[128]=TEXT("本次比赛到此结束，请您前往网站查看系统排名或移驾其他比赛房间参与比赛！");

  00898	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0089d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0EH@PFKOHNEP@?$LB?$LO?$LE?N?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?G?$LA?M?y?M?x?U?$LO?$LC@
  008a2	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR _szMessage$9[ebp]
  008a8	f3 a5		 rep movsd
  008aa	66 a5		 movsw
  008ac	a4		 movsb
  008ad	6a 39		 push	 57			; 00000039H
  008af	6a 00		 push	 0
  008b1	8d 85 57 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$9[ebp+71]
  008b7	50		 push	 eax
  008b8	e8 00 00 00 00	 call	 _memset
  008bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 922  : 				m_pIGameServiceFrame->SendGameMessage(pIRewardUserItem,szMessage,SMT_CHAT|SMT_EJECT|SMT_GLOBAL|SMT_CLOSE_GAME);	

  008c0	68 07 02 00 00	 push	 519			; 00000207H
  008c5	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _szMessage$9[ebp]
  008cb	50		 push	 eax
  008cc	8b 4d 98	 mov	 ecx, DWORD PTR _pIRewardUserItem$12[ebp]
  008cf	51		 push	 ecx
  008d0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  008d3	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  008d9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  008dc	8b 10		 mov	 edx, DWORD PTR [eax]
  008de	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  008e4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008e7	ff d0		 call	 eax

; 923  : 			}			

  008e9	e9 0f ff ff ff	 jmp	 $LN7@OnEventDat
$LN8@OnEventDat:

; 924  : 
; 925  : 			//断开协调
; 926  : 			if (m_pIGameServiceFrame!=NULL && pMatchRankList->bMatchFinish) 

  008ee	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008f1	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  008f8	74 21		 je	 SHORT $LN55@OnEventDat
  008fa	8b 45 a4	 mov	 eax, DWORD PTR _pMatchRankList$15[ebp]
  008fd	83 38 00	 cmp	 DWORD PTR [eax], 0
  00900	74 19		 je	 SHORT $LN55@OnEventDat

; 927  : 			{
; 928  : 				m_pIGameServiceFrame->DisconnectCorrespond();

  00902	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00905	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0090b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0090e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00910	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  00916	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00919	ff d2		 call	 edx
$LN55@OnEventDat:

; 929  : 			}
; 930  : 
; 931  : 			break;

  0091b	e9 ef 01 00 00	 jmp	 $LN2@OnEventDat
$LN56@OnEventDat:

; 932  : 		}
; 933  : 	case DBO_GR_MATCH_REWARD_RESULT:		//奖励结果
; 934  : 		{
; 935  : 			//参数效验
; 936  : 			ASSERT(wDataSize==sizeof(DBO_GR_MatchRewardResult));

  00920	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00924	83 f8 10	 cmp	 eax, 16			; 00000010H
  00927	74 1c		 je	 SHORT $LN66@OnEventDat
  00929	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
  0092f	81 c1 5d 01 00
	00		 add	 ecx, 349		; 0000015dH
  00935	51		 push	 ecx
  00936	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0093b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00940	85 c0		 test	 eax, eax
  00942	74 01		 je	 SHORT $LN66@OnEventDat
  00944	cc		 int	 3
$LN66@OnEventDat:

; 937  : 			if(wDataSize!=sizeof(DBO_GR_MatchRewardResult)) return false;

  00945	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00949	83 f8 10	 cmp	 eax, 16			; 00000010H
  0094c	74 07		 je	 SHORT $LN57@OnEventDat
  0094e	32 c0		 xor	 al, al
  00950	e9 bc 01 00 00	 jmp	 $LN1@OnEventDat
$LN57@OnEventDat:

; 938  : 
; 939  : 			//提取数据
; 940  : 			DBO_GR_MatchRewardResult * pMatchRewardResult = (DBO_GR_MatchRewardResult*)pData;

  00955	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00958	89 85 0c ff ff
	ff		 mov	 DWORD PTR _pMatchRewardResult$8[ebp], eax

; 941  : 
; 942  : 			//查找玩家
; 943  : 			IServerUserItem *  pIRewardUserItem=m_pIServerUserManager->SearchUserItem(pMatchRewardResult->dwUserID);

  0095e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _pMatchRewardResult$8[ebp]
  00964	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00967	51		 push	 ecx
  00968	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0096b	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00971	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00974	8b 10		 mov	 edx, DWORD PTR [eax]
  00976	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  0097c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0097f	ff d0		 call	 eax
  00981	89 85 08 ff ff
	ff		 mov	 DWORD PTR _pIRewardUserItem$7[ebp], eax

; 944  : 			if (pIRewardUserItem==NULL) return true;

  00987	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _pIRewardUserItem$7[ebp], 0
  0098e	75 07		 jne	 SHORT $LN58@OnEventDat
  00990	b0 01		 mov	 al, 1
  00992	e9 7a 01 00 00	 jmp	 $LN1@OnEventDat
$LN58@OnEventDat:

; 945  : 
; 946  : 			//奖励成功
; 947  : 			if(pMatchRewardResult->bResultCode==true)

  00997	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _pMatchRewardResult$8[ebp]
  0099d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  009a0	83 f9 01	 cmp	 ecx, 1
  009a3	75 6d		 jne	 SHORT $LN59@OnEventDat

; 948  : 			{
; 949  : 				//更新用户信息
; 950  : 				tagUserInfo * pUserInfo=pIRewardUserItem->GetUserInfo();

  009a5	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _pIRewardUserItem$7[ebp]
  009ab	8b 10		 mov	 edx, DWORD PTR [eax]
  009ad	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _pIRewardUserItem$7[ebp]
  009b3	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  009b6	ff d0		 call	 eax
  009b8	89 85 04 ff ff
	ff		 mov	 DWORD PTR _pUserInfo$6[ebp], eax

; 951  : 
; 952  : 				//发送分数
; 953  : 				SendMatchUserScore(pIRewardUserItem);

  009be	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _pIRewardUserItem$7[ebp]
  009c4	50		 push	 eax
  009c5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009c8	e8 00 00 00 00	 call	 ?SendMatchUserScore@CLockTimeMatch@@IAE_NPAUIServerUserItem@@@Z ; CLockTimeMatch::SendMatchUserScore

; 954  : 
; 955  : 				//构造结构
; 956  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 957  : 
; 958  : 				//设置变量
; 959  : 				MatchGoldUpdate.lCurrGold=pMatchRewardResult->lCurrGold;

  009cd	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _pMatchRewardResult$8[ebp]
  009d3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  009d6	89 8d fc fe ff
	ff		 mov	 DWORD PTR _MatchGoldUpdate$5[ebp], ecx
  009dc	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  009df	89 95 00 ff ff
	ff		 mov	 DWORD PTR _MatchGoldUpdate$5[ebp+4], edx

; 960  : 
; 961  : 				//发送数据
; 962  : 				m_pIGameServiceFrame->SendData(pIRewardUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  009e5	6a 08		 push	 8
  009e7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _MatchGoldUpdate$5[ebp]
  009ed	50		 push	 eax
  009ee	6a 0d		 push	 13			; 0000000dH
  009f0	6a 0a		 push	 10			; 0000000aH
  009f2	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _pIRewardUserItem$7[ebp]
  009f8	51		 push	 ecx
  009f9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  009fc	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00a02	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a05	8b 10		 mov	 edx, DWORD PTR [eax]
  00a07	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00a0d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00a10	ff d0		 call	 eax
$LN59@OnEventDat:

; 963  : 			}
; 964  : 
; 965  : 			break;

  00a12	e9 f8 00 00 00	 jmp	 $LN2@OnEventDat
$LN60@OnEventDat:

; 966  : 		}
; 967  : 	case DBO_GR_MATCH_CANCEL_RESULT:		//取消结果
; 968  : 		{
; 969  : 			//参数效验
; 970  : 			ASSERT(wDataSize==sizeof(DBO_GR_MatchCancelResult));

  00a17	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00a1b	83 f8 08	 cmp	 eax, 8
  00a1e	74 1c		 je	 SHORT $LN67@OnEventDat
  00a20	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
  00a26	81 c1 7f 01 00
	00		 add	 ecx, 383		; 0000017fH
  00a2c	51		 push	 ecx
  00a2d	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00a32	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00a37	85 c0		 test	 eax, eax
  00a39	74 01		 je	 SHORT $LN67@OnEventDat
  00a3b	cc		 int	 3
$LN67@OnEventDat:

; 971  : 			if(wDataSize!=sizeof(DBO_GR_MatchCancelResult)) return false;

  00a3c	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00a40	83 f8 08	 cmp	 eax, 8
  00a43	74 07		 je	 SHORT $LN61@OnEventDat
  00a45	32 c0		 xor	 al, al
  00a47	e9 c5 00 00 00	 jmp	 $LN1@OnEventDat
$LN61@OnEventDat:

; 972  : 
; 973  : 			//提取数据
; 974  : 			DBO_GR_MatchCancelResult * pMatchCancelResult = (DBO_GR_MatchCancelResult*)pData;

  00a4c	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00a4f	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _pMatchCancelResult$4[ebp], eax

; 975  : 
; 976  : 			//取消成功
; 977  : 			if (pMatchCancelResult->bSuccessed==true)

  00a55	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _pMatchCancelResult$4[ebp]
  00a5b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00a5e	83 f9 01	 cmp	 ecx, 1
  00a61	75 4d		 jne	 SHORT $LN62@OnEventDat

; 978  : 			{
; 979  : 				//发送结束消息
; 980  : 				TCHAR szMessage[128]=TEXT("因报名人数不足，取消本场比赛。已报名的玩家稍后将会收到系统退还的报名费用，请注意查收。");

  00a63	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00a68	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0FH@GLGCEBDA@?R?r?$LB?$KI?C?$PL?H?K?J?$PN?$LC?$LL?W?c?$KD?$KM?H?$KB?O?$PL?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$KB?$KD?R@
  00a6d	8d bd 78 fe ff
	ff		 lea	 edi, DWORD PTR _szMessage$3[ebp]
  00a73	f3 a5		 rep movsd
  00a75	66 a5		 movsw
  00a77	a4		 movsb
  00a78	6a 29		 push	 41			; 00000029H
  00a7a	6a 00		 push	 0
  00a7c	8d 85 cf fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp+87]
  00a82	50		 push	 eax
  00a83	e8 00 00 00 00	 call	 _memset
  00a88	83 c4 0c	 add	 esp, 12			; 0000000cH

; 981  : 				m_pIGameServiceFrame->SendRoomMessage(szMessage,SMT_CHAT|SMT_EJECT|SMT_GLOBAL|SMT_CLOSE_GAME|SMT_CLOSE_ROOM);	

  00a8b	68 07 03 00 00	 push	 775			; 00000307H
  00a90	8d 85 78 fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp]
  00a96	50		 push	 eax
  00a97	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a9a	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00aa0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00aa3	8b 12		 mov	 edx, DWORD PTR [edx]
  00aa5	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00aab	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00aae	ff d0		 call	 eax
$LN62@OnEventDat:

; 982  : 			}
; 983  : 
; 984  : 			//获取时间
; 985  : 			CTime CurTime=CTime::GetCurrentTime();

  00ab0	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR _CurTime$2[ebp]
  00ab6	50		 push	 eax
  00ab7	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 986  : 			CTime MatchEndTime(m_pLockTimeMatch->MatchEndTime);

  00abc	6a ff		 push	 -1
  00abe	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ac1	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00ac4	83 c1 14	 add	 ecx, 20			; 00000014H
  00ac7	51		 push	 ecx
  00ac8	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _MatchEndTime$1[ebp]
  00ace	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 987  : 
; 988  : 			//断开协调
; 989  : 			if (m_pIGameServiceFrame!=NULL && pMatchCancelResult->bMatchFinish) 

  00ad3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ad6	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [eax+148], 0
  00add	74 25		 je	 SHORT $LN63@OnEventDat
  00adf	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _pMatchCancelResult$4[ebp]
  00ae5	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00ae9	74 19		 je	 SHORT $LN63@OnEventDat

; 990  : 			{
; 991  : 				m_pIGameServiceFrame->DisconnectCorrespond(); 

  00aeb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00aee	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00af4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00af7	8b 01		 mov	 eax, DWORD PTR [ecx]
  00af9	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  00aff	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00b02	ff d2		 call	 edx
$LN63@OnEventDat:

; 992  : 			}
; 993  : 
; 994  : 			//移除所有
; 995  : 			m_DistributeManage.RemoveAll();

  00b04	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b07	83 c1 18	 add	 ecx, 24			; 00000018H
  00b0a	e8 00 00 00 00	 call	 ?RemoveAll@CDistributeManager@@QAEXXZ ; CDistributeManager::RemoveAll
$LN2@OnEventDat:

; 996  : 
; 997  : 			break;
; 998  : 		}
; 999  : 	}
; 1000 : 	return true;

  00b0f	b0 01		 mov	 al, 1
$LN1@OnEventDat:

; 1001 : }

  00b11	5f		 pop	 edi
  00b12	5e		 pop	 esi
  00b13	5b		 pop	 ebx
  00b14	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b17	33 cd		 xor	 ecx, ebp
  00b19	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b1e	8b e5		 mov	 esp, ebp
  00b20	5d		 pop	 ebp
  00b21	c2 14 00	 ret	 20			; 00000014H
$LN70@OnEventDat:
  00b24	00 00 00 00	 DD	 $LN34@OnEventDat
  00b28	00 00 00 00	 DD	 $LN42@OnEventDat
  00b2c	00 00 00 00	 DD	 $LN9@OnEventDat
  00b30	00 00 00 00	 DD	 $LN15@OnEventDat
  00b34	00 00 00 00	 DD	 $LN21@OnEventDat
  00b38	00 00 00 00	 DD	 $LN28@OnEventDat
  00b3c	00 00 00 00	 DD	 $LN48@OnEventDat
  00b40	00 00 00 00	 DD	 $LN56@OnEventDat
  00b44	00 00 00 00	 DD	 $LN60@OnEventDat
?OnEventDataBase@CLockTimeMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z ENDP ; CLockTimeMatch::OnEventDataBase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnEventTimer@CLockTimeMatch@@UAE_NKI@Z
_TEXT	SEGMENT
tv917 = -684						; size = 8
tv630 = -680						; size = 4
tv64 = -680						; size = 4
tv461 = -678						; size = 2
$T1 = -676						; size = 8
$T2 = -668						; size = 8
_szMessage$3 = -532					; size = 128
_SystemTimeCurr$4 = -404				; size = 16
_MatchOver$5 = -388					; size = 56
_MatchEndTime$6 = -332					; size = 8
_CurTime$7 = -324					; size = 8
_pITableFrame$8 = -316					; size = 4
_i$9 = -312						; size = 4
_cbMatchStatus$10 = -305				; size = 1
_pIServerUserItem$11 = -304				; size = 4
_szMessage$12 = -300					; size = 128
_wUserIndex$13 = -172					; size = 2
_bMatchOver$14 = -165					; size = 1
_MatchEndTime$15 = -164					; size = 8
_CurTime$16 = -156					; size = 8
_cbMatchStatus$17 = -147				; size = 1
_cbMatchStatus$18 = -146				; size = 1
_cbMatchStatus$19 = -145				; size = 1
_MatchStart$20 = -144					; size = 16
_MatchNum$21 = -128					; size = 8
_cbMatchStatus$22 = -118				; size = 1
_cbMatchStatus$23 = -117				; size = 1
_TimeSpan$24 = -116					; size = 8
_MatchEndTime$25 = -108					; size = 8
_CurTime$26 = -100					; size = 8
_MatchCancel$27 = -92					; size = 32
_SignupStart$28 = -60					; size = 24
_cbMatchStatus$29 = -33					; size = 1
_nCurrSeconds$30 = -32					; size = 4
_MatchStartTime$31 = -28				; size = 8
_CurTime$32 = -20					; size = 8
_cbMatchStatus$33 = -9					; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dwTimerID$ = 8						; size = 4
_dwBindParameter$ = 12					; size = 4
?OnEventTimer@CLockTimeMatch@@UAE_NKI@Z PROC		; CLockTimeMatch::OnEventTimer, COMDAT
; _this$ = ecx

; 209  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 02 00
	00		 sub	 esp, 684		; 000002acH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 210  : 	switch(dwTimerID)

  00019	8b 45 08	 mov	 eax, DWORD PTR _dwTimerID$[ebp]
  0001c	89 85 58 fd ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00022	8b 8d 58 fd ff
	ff		 mov	 ecx, DWORD PTR tv64[ebp]
  00028	81 e9 c9 00 00
	00		 sub	 ecx, 201		; 000000c9H
  0002e	89 8d 58 fd ff
	ff		 mov	 DWORD PTR tv64[ebp], ecx
  00034	83 bd 58 fd ff
	ff 05		 cmp	 DWORD PTR tv64[ebp], 5
  0003b	0f 87 83 0c 00
	00		 ja	 $LN2@OnEventTim
  00041	8b 95 58 fd ff
	ff		 mov	 edx, DWORD PTR tv64[ebp]
  00047	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN51@OnEventTim[edx*4]
$LN10@OnEventTim:

; 211  : 	{
; 212  : 	case IDI_DISTRIBUTE_USER:				//分配用户
; 213  : 		{
; 214  : 			//执行分组
; 215  : 			PerformDistribute();

  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?PerformDistribute@CLockTimeMatch@@IAE_NXZ ; CLockTimeMatch::PerformDistribute

; 216  : 
; 217  : 			return true;

  00056	b0 01		 mov	 al, 1
  00058	e9 69 0c 00 00	 jmp	 $LN1@OnEventTim
$LN11@OnEventTim:

; 218  : 		}
; 219  : 	case IDI_SWITCH_STATUS:					//切换状态
; 220  : 		{
; 221  : 			//判断日期
; 222  : 			if (m_MatchStatus==MatchStatus_End)

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00060	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00064	83 f9 04	 cmp	 ecx, 4
  00067	0f 85 dd 01 00
	00		 jne	 $LN12@OnEventTim

; 223  : 			{
; 224  : 				if (m_TimeLastMatch.GetDay()!=CTime::GetCurrentTime().GetDay())

  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	83 c1 10	 add	 ecx, 16			; 00000010H
  00073	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  00078	8b f0		 mov	 esi, eax
  0007a	8d 85 64 fd ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount
  00086	8b c8		 mov	 ecx, eax
  00088	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  0008d	3b f0		 cmp	 esi, eax
  0008f	0f 84 b5 01 00
	00		 je	 $LN12@OnEventTim

; 225  : 				{
; 226  : 					if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_ROUND)

  00095	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00098	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0009b	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  0009f	83 fa 01	 cmp	 edx, 1
  000a2	0f 85 da 00 00
	00		 jne	 $LN14@OnEventTim

; 227  : 					{	
; 228  : 						//计算场次
; 229  : 						m_pMatchOption->lMatchNo=CalcMatchNo();

  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ?CalcMatchNo@CLockTimeMatch@@IAE_JXZ ; CLockTimeMatch::CalcMatchNo
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  000b6	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000b9	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 230  : 
; 231  : 						//设置变量						
; 232  : 						m_MatchStatus=MatchStatus_Free;

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 233  : 						m_TimeLastMatch=CTime::GetCurrentTime();						

  000c3	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount
  000cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d1	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000da	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 234  : 
; 235  : 						//开始检测	
; 236  : 						m_pITimerEngine->SetTimer(IDI_CHECK_START_SIGNUP,1000L,TIMES_INFINITY,NULL);						

  000dd	6a 00		 push	 0
  000df	6a ff		 push	 -1
  000e1	68 e8 03 00 00	 push	 1000			; 000003e8H
  000e6	68 cb 00 00 00	 push	 203			; 000000cbH
  000eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000f4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000f7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f9	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  000ff	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00102	ff d2		 call	 edx

; 237  : 
; 238  : 						//报名截止
; 239  : 						m_pITimerEngine->SetTimer(IDI_CHECK_END_SIGNUP,1000L,TIMES_INFINITY,NULL);	

  00104	6a 00		 push	 0
  00106	6a ff		 push	 -1
  00108	68 e8 03 00 00	 push	 1000			; 000003e8H
  0010d	68 cc 00 00 00	 push	 204			; 000000ccH
  00112	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00115	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0011b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00120	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00126	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00129	ff d2		 call	 edx

; 240  : 
; 241  : 						//切换时钟
; 242  : 						SwitchMatchTimer();		

  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	e8 00 00 00 00	 call	 ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::SwitchMatchTimer

; 243  : 
; 244  : 						//关闭定时器
; 245  : 						m_pITimerEngine->KillTimer(IDI_SWITCH_STATUS);

  00133	68 c9 00 00 00	 push	 201			; 000000c9H
  00138	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00141	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00144	8b 01		 mov	 eax, DWORD PTR [ecx]
  00146	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  0014c	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0014f	ff d2		 call	 edx

; 246  : 
; 247  : 						//发送状态
; 248  : 						BYTE cbMatchStatus=MS_FREE;

  00151	c6 45 f7 00	 mov	 BYTE PTR _cbMatchStatus$33[ebp], 0

; 249  : 						m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus));	

  00155	6a 01		 push	 1
  00157	8d 45 f7	 lea	 eax, DWORD PTR _cbMatchStatus$33[ebp]
  0015a	50		 push	 eax
  0015b	6a 0a		 push	 10			; 0000000aH
  0015d	6a 0a		 push	 10			; 0000000aH
  0015f	68 ff 00 00 00	 push	 255			; 000000ffH
  00164	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0016d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00170	8b 12		 mov	 edx, DWORD PTR [edx]
  00172	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00178	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0017b	ff d0		 call	 eax

; 250  : 					}					
; 251  : 					else

  0017d	e9 c8 00 00 00	 jmp	 $LN12@OnEventTim
$LN14@OnEventTim:

; 252  : 					{
; 253  : 						//变量定义
; 254  : 						CTime CurTime=CTime::GetCurrentTime();

  00182	8d 45 ec	 lea	 eax, DWORD PTR _CurTime$32[ebp]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 255  : 						CTime MatchStartTime(m_pLockTimeMatch->MatchStartTime);

  0018b	6a ff		 push	 -1
  0018d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00190	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00193	83 c1 04	 add	 ecx, 4
  00196	51		 push	 ecx
  00197	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$31[ebp]
  0019a	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 256  : 
; 257  : 						//计算时间
; 258  : 						int nCurrSeconds=CurTime.GetHour()*3600+CurTime.GetMinute()*60+CurTime.GetSecond();

  0019f	8d 4d ec	 lea	 ecx, DWORD PTR _CurTime$32[ebp]
  001a2	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  001a7	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  001ad	8d 4d ec	 lea	 ecx, DWORD PTR _CurTime$32[ebp]
  001b0	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  001b5	6b c0 3c	 imul	 eax, eax, 60
  001b8	03 f0		 add	 esi, eax
  001ba	8d 4d ec	 lea	 ecx, DWORD PTR _CurTime$32[ebp]
  001bd	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  001c2	03 f0		 add	 esi, eax
  001c4	89 75 e0	 mov	 DWORD PTR _nCurrSeconds$30[ebp], esi

; 259  : 
; 260  : 						//比赛开始
; 261  : 						if (nCurrSeconds>=(MatchStartTime.GetHour()*3600+MatchStartTime.GetMinute()*60+MatchStartTime.GetSecond()))

  001c7	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$31[ebp]
  001ca	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  001cf	69 f0 10 0e 00
	00		 imul	 esi, eax, 3600
  001d5	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$31[ebp]
  001d8	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  001dd	6b c0 3c	 imul	 eax, eax, 60
  001e0	03 f0		 add	 esi, eax
  001e2	8d 4d e4	 lea	 ecx, DWORD PTR _MatchStartTime$31[ebp]
  001e5	e8 00 00 00 00	 call	 ?GetSecond@CTime@ATL@@QBEHXZ ; ATL::CTime::GetSecond
  001ea	03 f0		 add	 esi, eax
  001ec	39 75 e0	 cmp	 DWORD PTR _nCurrSeconds$30[ebp], esi
  001ef	7c 59		 jl	 SHORT $LN12@OnEventTim

; 262  : 						{
; 263  : 							//设置状态
; 264  : 							m_MatchStatus=MatchStatus_Playing;

  001f1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f4	c6 40 0c 02	 mov	 BYTE PTR [eax+12], 2

; 265  : 
; 266  : 							//切换时钟
; 267  : 							SwitchMatchTimer();

  001f8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fb	e8 00 00 00 00	 call	 ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::SwitchMatchTimer

; 268  : 
; 269  : 							//关闭定时器
; 270  : 							m_pITimerEngine->KillTimer(IDI_SWITCH_STATUS);							

  00200	68 c9 00 00 00	 push	 201			; 000000c9H
  00205	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00208	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0020e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00211	8b 01		 mov	 eax, DWORD PTR [ecx]
  00213	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00219	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0021c	ff d2		 call	 edx

; 271  : 
; 272  : 							//发送状态
; 273  : 							BYTE cbMatchStatus=MS_MATCHING;

  0021e	c6 45 df 02	 mov	 BYTE PTR _cbMatchStatus$29[ebp], 2

; 274  : 							m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus));	

  00222	6a 01		 push	 1
  00224	8d 45 df	 lea	 eax, DWORD PTR _cbMatchStatus$29[ebp]
  00227	50		 push	 eax
  00228	6a 0a		 push	 10			; 0000000aH
  0022a	6a 0a		 push	 10			; 0000000aH
  0022c	68 ff 00 00 00	 push	 255			; 000000ffH
  00231	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00234	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0023a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0023d	8b 12		 mov	 edx, DWORD PTR [edx]
  0023f	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00245	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00248	ff d0		 call	 eax
$LN12@OnEventTim:

; 275  : 						}
; 276  : 					}
; 277  : 				}
; 278  : 			}
; 279  : 			
; 280  : 			return true;

  0024a	b0 01		 mov	 al, 1
  0024c	e9 75 0a 00 00	 jmp	 $LN1@OnEventTim
$LN17@OnEventTim:

; 281  : 		}
; 282  : 	case IDI_CHECK_START_SIGNUP:			//开始报名
; 283  : 		{
; 284  : 			//报名开始
; 285  : 			if (IsMatchSignupStart()==true)

  00251	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00254	e8 00 00 00 00	 call	 ?IsMatchSignupStart@CLockTimeMatch@@IAE_NXZ ; CLockTimeMatch::IsMatchSignupStart
  00259	0f b6 c0	 movzx	 eax, al
  0025c	83 f8 01	 cmp	 eax, 1
  0025f	0f 85 91 00 00
	00		 jne	 $LN18@OnEventTim

; 286  : 			{			
; 287  : 				//关闭定时器
; 288  : 				m_pITimerEngine->KillTimer(IDI_CHECK_START_SIGNUP);

  00265	68 cb 00 00 00	 push	 203			; 000000cbH
  0026a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0026d	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00273	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00276	8b 01		 mov	 eax, DWORD PTR [ecx]
  00278	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  0027e	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00281	ff d2		 call	 edx

; 289  : 
; 290  : 				//变量定义
; 291  : 				DBR_GR_SignupStart SignupStart;
; 292  : 
; 293  : 				//构造结构
; 294  : 				SignupStart.dwMatchID=m_pMatchOption->dwMatchID;

  00283	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00286	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00289	8b 11		 mov	 edx, DWORD PTR [ecx]
  0028b	89 55 c8	 mov	 DWORD PTR _SignupStart$28[ebp+4], edx

; 295  : 				SignupStart.lMatchNo=m_pMatchOption->lMatchNo;

  0028e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00291	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00294	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00297	89 55 cc	 mov	 DWORD PTR _SignupStart$28[ebp+8], edx
  0029a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0029d	89 45 d0	 mov	 DWORD PTR _SignupStart$28[ebp+12], eax

; 296  : 				SignupStart.cbMatchType=m_pMatchOption->cbMatchType;

  002a0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002a3	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002a6	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  002a9	88 55 c6	 mov	 BYTE PTR _SignupStart$28[ebp+2], dl

; 297  : 				SignupStart.wServerID=m_pGameServiceOption->wServerID;

  002ac	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002af	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  002b2	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  002b6	66 89 55 c4	 mov	 WORD PTR _SignupStart$28[ebp], dx

; 298  : 				SignupStart.cbSignupMode=m_pMatchOption->cbSignupMode;

  002ba	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002bd	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002c0	8a 51 40	 mov	 dl, BYTE PTR [ecx+64]
  002c3	88 55 d4	 mov	 BYTE PTR _SignupStart$28[ebp+16], dl

; 299  : 
; 300  : 				//投递请求
; 301  : 				m_pIDataBaseEngine->PostDataBaseRequest(SignupStart.dwMatchID,DBR_GR_MATCH_SIGNUP_START,0,&SignupStart,sizeof(SignupStart));

  002c6	6a 00		 push	 0
  002c8	6a 18		 push	 24			; 00000018H
  002ca	8d 45 c4	 lea	 eax, DWORD PTR _SignupStart$28[ebp]
  002cd	50		 push	 eax
  002ce	6a 00		 push	 0
  002d0	68 5a 02 00 00	 push	 602			; 0000025aH
  002d5	8b 4d c8	 mov	 ecx, DWORD PTR _SignupStart$28[ebp+4]
  002d8	51		 push	 ecx
  002d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002dc	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  002e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e5	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  002eb	8b 00		 mov	 eax, DWORD PTR [eax]
  002ed	52		 push	 edx
  002ee	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002f1	ff d1		 call	 ecx
  002f3	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN18@OnEventTim:

; 302  : 			}
; 303  : 
; 304  : 			return true;

  002f6	b0 01		 mov	 al, 1
  002f8	e9 c9 09 00 00	 jmp	 $LN1@OnEventTim
$LN19@OnEventTim:

; 305  : 		}
; 306  : 	case IDI_CHECK_END_SIGNUP:				//报名截止
; 307  : 		{
; 308  : 			if (IsMatchSignupEnd()==true)

  002fd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00300	e8 00 00 00 00	 call	 ?IsMatchSignupEnd@CLockTimeMatch@@IAE_NXZ ; CLockTimeMatch::IsMatchSignupEnd
  00305	0f b6 c0	 movzx	 eax, al
  00308	83 f8 01	 cmp	 eax, 1
  0030b	0f 85 37 01 00
	00		 jne	 $LN20@OnEventTim

; 309  : 			{			
; 310  : 				//关闭定时器
; 311  : 				m_pITimerEngine->KillTimer(IDI_CHECK_END_SIGNUP);	

  00311	68 cc 00 00 00	 push	 204			; 000000ccH
  00316	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00319	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0031f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00322	8b 01		 mov	 eax, DWORD PTR [ecx]
  00324	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  0032a	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0032d	ff d2		 call	 edx

; 312  : 
; 313  : 				//取消比赛
; 314  : 				if (m_MatchStatus==MatchStatus_WaitPlay)

  0032f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00332	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00336	83 f9 01	 cmp	 ecx, 1
  00339	0f 85 09 01 00
	00		 jne	 $LN20@OnEventTim

; 315  : 				{
; 316  : 					//比赛结束
; 317  : 					DBR_GR_MatchCancel MatchCancel;
; 318  : 					ZeroMemory(&MatchCancel,sizeof(MatchCancel));

  0033f	6a 20		 push	 32			; 00000020H
  00341	6a 00		 push	 0
  00343	8d 45 a4	 lea	 eax, DWORD PTR _MatchCancel$27[ebp]
  00346	50		 push	 eax
  00347	e8 00 00 00 00	 call	 _memset
  0034c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 319  : 
; 320  : 					//构造数据
; 321  : 					MatchCancel.bMatchFinish=FALSE;

  0034f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _MatchCancel$27[ebp], 0

; 322  : 					MatchCancel.dwMatchID=m_pMatchOption->dwMatchID;

  00356	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00359	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0035c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0035e	89 55 ac	 mov	 DWORD PTR _MatchCancel$27[ebp+8], edx

; 323  : 					MatchCancel.lMatchNo=m_pMatchOption->lMatchNo;

  00361	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00364	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00367	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0036a	89 55 b4	 mov	 DWORD PTR _MatchCancel$27[ebp+16], edx
  0036d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00370	89 45 b8	 mov	 DWORD PTR _MatchCancel$27[ebp+20], eax

; 324  : 					MatchCancel.wServerID=m_pGameServiceOption->wServerID;

  00373	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00376	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00379	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  0037d	66 89 55 a8	 mov	 WORD PTR _MatchCancel$27[ebp+4], dx

; 325  : 					MatchCancel.lSafeCardFee=m_pLockTimeMatch->lSafeCardFee;

  00381	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00384	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00387	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  0038a	89 55 bc	 mov	 DWORD PTR _MatchCancel$27[ebp+24], edx
  0038d	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00390	89 45 c0	 mov	 DWORD PTR _MatchCancel$27[ebp+28], eax

; 326  : 
; 327  : 					//常规开赛
; 328  : 					if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_NORMAL)

  00393	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00396	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00399	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  0039d	85 d2		 test	 edx, edx
  0039f	75 07		 jne	 SHORT $LN22@OnEventTim

; 329  : 					{
; 330  : 						MatchCancel.bMatchFinish=TRUE;

  003a1	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _MatchCancel$27[ebp], 1
$LN22@OnEventTim:

; 331  : 					}
; 332  : 
; 333  : 					//循环开赛
; 334  : 					if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_ROUND)

  003a8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ab	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  003ae	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  003b2	83 fa 01	 cmp	 edx, 1
  003b5	75 5a		 jne	 SHORT $LN23@OnEventTim

; 335  : 					{
; 336  : 						//获取时间
; 337  : 						CTime CurTime=CTime::GetCurrentTime();

  003b7	8d 45 9c	 lea	 eax, DWORD PTR _CurTime$26[ebp]
  003ba	50		 push	 eax
  003bb	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 338  : 						CTime MatchEndTime(m_pLockTimeMatch->MatchEndTime);

  003c0	6a ff		 push	 -1
  003c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003c5	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  003c8	83 c1 14	 add	 ecx, 20			; 00000014H
  003cb	51		 push	 ecx
  003cc	8d 4d 94	 lea	 ecx, DWORD PTR _MatchEndTime$25[ebp]
  003cf	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 339  : 						CTimeSpan TimeSpan=MatchEndTime-CurTime;

  003d4	8b 45 a0	 mov	 eax, DWORD PTR _CurTime$26[ebp+4]
  003d7	50		 push	 eax
  003d8	8b 4d 9c	 mov	 ecx, DWORD PTR _CurTime$26[ebp]
  003db	51		 push	 ecx
  003dc	8d 55 8c	 lea	 edx, DWORD PTR _TimeSpan$24[ebp]
  003df	52		 push	 edx
  003e0	8d 4d 94	 lea	 ecx, DWORD PTR _MatchEndTime$25[ebp]
  003e3	e8 00 00 00 00	 call	 ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ; ATL::CTime::operator-

; 340  : 
; 341  : 						//判断时间
; 342  : 						if (TimeSpan.GetDays()==0) MatchCancel.bMatchFinish=TRUE;

  003e8	8d 4d 8c	 lea	 ecx, DWORD PTR _TimeSpan$24[ebp]
  003eb	e8 00 00 00 00	 call	 ?GetDays@CTimeSpan@ATL@@QBE_JXZ ; ATL::CTimeSpan::GetDays
  003f0	89 85 54 fd ff
	ff		 mov	 DWORD PTR tv917[ebp], eax
  003f6	89 95 58 fd ff
	ff		 mov	 DWORD PTR tv917[ebp+4], edx
  003fc	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR tv917[ebp]
  00402	0b 85 58 fd ff
	ff		 or	 eax, DWORD PTR tv917[ebp+4]
  00408	75 07		 jne	 SHORT $LN23@OnEventTim
  0040a	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR _MatchCancel$27[ebp], 1
$LN23@OnEventTim:

; 343  : 					}					
; 344  : 
; 345  : 					//投递请求
; 346  : 					m_pIDataBaseEngine->PostDataBaseRequest(MatchCancel.dwMatchID,DBR_GR_MATCH_CANCEL,0,&MatchCancel,sizeof(MatchCancel));

  00411	6a 00		 push	 0
  00413	6a 20		 push	 32			; 00000020H
  00415	8d 45 a4	 lea	 eax, DWORD PTR _MatchCancel$27[ebp]
  00418	50		 push	 eax
  00419	6a 00		 push	 0
  0041b	68 5f 02 00 00	 push	 607			; 0000025fH
  00420	8b 4d ac	 mov	 ecx, DWORD PTR _MatchCancel$27[ebp+8]
  00423	51		 push	 ecx
  00424	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00427	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  0042d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00430	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00436	8b 00		 mov	 eax, DWORD PTR [eax]
  00438	52		 push	 edx
  00439	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0043c	ff d1		 call	 ecx
  0043e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 347  : 					
; 348  : 					return true;

  00441	b0 01		 mov	 al, 1
  00443	e9 7e 08 00 00	 jmp	 $LN1@OnEventTim
$LN20@OnEventTim:

; 349  : 				}
; 350  : 			}
; 351  : 
; 352  : 			return true;

  00448	b0 01		 mov	 al, 1
  0044a	e9 77 08 00 00	 jmp	 $LN1@OnEventTim
$LN25@OnEventTim:

; 353  : 		}
; 354  : 	case IDI_CHECK_START_MATCH:				//开始比赛
; 355  : 		{
; 356  : 			//变量定义
; 357  : 			BYTE cbMatchStatus=m_MatchStatus;

  0044f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00452	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  00455	88 4d 8b	 mov	 BYTE PTR _cbMatchStatus$23[ebp], cl

; 358  : 
; 359  : 			//更新状态
; 360  : 			UpdateMatchStatus();

  00458	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0045b	e8 00 00 00 00	 call	 ?UpdateMatchStatus@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::UpdateMatchStatus

; 361  : 
; 362  : 			//等待比赛
; 363  : 			if (m_MatchStatus==MatchStatus_WaitPlay)

  00460	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00463	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00467	83 f9 01	 cmp	 ecx, 1
  0046a	0f 85 83 00 00
	00		 jne	 $LN26@OnEventTim

; 364  : 			{
; 365  : 				//切换时钟
; 366  : 				SwitchMatchTimer();	

  00470	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00473	e8 00 00 00 00	 call	 ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::SwitchMatchTimer

; 367  : 
; 368  : 				//判断状态
; 369  : 				if (cbMatchStatus!=MatchStatus_WaitPlay)

  00478	0f b6 45 8b	 movzx	 eax, BYTE PTR _cbMatchStatus$23[ebp]
  0047c	83 f8 01	 cmp	 eax, 1
  0047f	74 72		 je	 SHORT $LN26@OnEventTim

; 370  : 				{
; 371  : 					//发送状态
; 372  : 					BYTE cbMatchStatus=MS_WAITPLAY;

  00481	c6 45 8a 01	 mov	 BYTE PTR _cbMatchStatus$22[ebp], 1

; 373  : 					m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus));

  00485	6a 01		 push	 1
  00487	8d 45 8a	 lea	 eax, DWORD PTR _cbMatchStatus$22[ebp]
  0048a	50		 push	 eax
  0048b	6a 0a		 push	 10			; 0000000aH
  0048d	6a 0a		 push	 10			; 0000000aH
  0048f	68 ff 00 00 00	 push	 255			; 000000ffH
  00494	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00497	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0049d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004a0	8b 12		 mov	 edx, DWORD PTR [edx]
  004a2	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  004a8	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  004ab	ff d0		 call	 eax

; 374  : 
; 375  : 					//构造人数
; 376  : 					CMD_GR_Match_Num MatchNum;
; 377  : 					MatchNum.dwWaitting=m_DistributeManage.GetCount();

  004ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004b0	83 c1 18	 add	 ecx, 24			; 00000018H
  004b3	e8 00 00 00 00	 call	 ?GetCount@CDistributeManager@@QAEGXZ ; CDistributeManager::GetCount
  004b8	0f b7 c0	 movzx	 eax, ax
  004bb	89 45 80	 mov	 DWORD PTR _MatchNum$21[ebp], eax

; 378  : 					MatchNum.dwTotal=m_pLockTimeMatch->wStartUserCount;

  004be	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004c1	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  004c4	0f b7 51 27	 movzx	 edx, WORD PTR [ecx+39]
  004c8	89 55 84	 mov	 DWORD PTR _MatchNum$21[ebp+4], edx

; 379  : 					
; 380  : 					//发送人数
; 381  : 					m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_NUM,&MatchNum, sizeof(MatchNum));

  004cb	6a 08		 push	 8
  004cd	8d 45 80	 lea	 eax, DWORD PTR _MatchNum$21[ebp]
  004d0	50		 push	 eax
  004d1	6a 04		 push	 4
  004d3	6a 0a		 push	 10			; 0000000aH
  004d5	68 ff 00 00 00	 push	 255			; 000000ffH
  004da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004dd	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  004e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004e6	8b 12		 mov	 edx, DWORD PTR [edx]
  004e8	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  004ee	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  004f1	ff d0		 call	 eax
$LN26@OnEventTim:

; 382  : 				}
; 383  : 			}
; 384  : 
; 385  : 			//比赛开始
; 386  : 			if (m_MatchStatus==MatchStatus_Playing)

  004f3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004f6	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  004fa	83 f9 02	 cmp	 ecx, 2
  004fd	0f 85 d4 00 00
	00		 jne	 $LN28@OnEventTim

; 387  : 			{
; 388  : 				//切换时钟
; 389  : 				SwitchMatchTimer();	

  00503	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00506	e8 00 00 00 00	 call	 ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::SwitchMatchTimer

; 390  : 
; 391  : 				//关闭定时器
; 392  : 				m_pITimerEngine->KillTimer(IDI_CHECK_START_MATCH);

  0050b	68 cd 00 00 00	 push	 205			; 000000cdH
  00510	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00513	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00519	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0051c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0051e	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00524	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00527	ff d2		 call	 edx

; 393  : 
; 394  : 				//变量定义
; 395  : 				DBR_GR_MatchStart MatchStart;
; 396  : 
; 397  : 				//构造结构
; 398  : 				MatchStart.dwMatchID=m_pMatchOption->dwMatchID;

  00529	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0052c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0052f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00531	89 95 74 ff ff
	ff		 mov	 DWORD PTR _MatchStart$20[ebp+4], edx

; 399  : 				MatchStart.lMatchNo=m_pMatchOption->lMatchNo;

  00537	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0053a	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0053d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00540	89 95 78 ff ff
	ff		 mov	 DWORD PTR _MatchStart$20[ebp+8], edx
  00546	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00549	89 85 7c ff ff
	ff		 mov	 DWORD PTR _MatchStart$20[ebp+12], eax

; 400  : 				MatchStart.cbMatchType=m_pMatchOption->cbMatchType;

  0054f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00552	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00555	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00558	88 95 72 ff ff
	ff		 mov	 BYTE PTR _MatchStart$20[ebp+2], dl

; 401  : 				MatchStart.wServerID=m_pGameServiceOption->wServerID;

  0055e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00561	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00564	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  00568	66 89 95 70 ff
	ff ff		 mov	 WORD PTR _MatchStart$20[ebp], dx

; 402  : 
; 403  : 				//投递请求
; 404  : 				m_pIDataBaseEngine->PostDataBaseRequest(MatchStart.dwMatchID,DBR_GR_MATCH_START,0,&MatchStart,sizeof(MatchStart));

  0056f	6a 00		 push	 0
  00571	6a 10		 push	 16			; 00000010H
  00573	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _MatchStart$20[ebp]
  00579	50		 push	 eax
  0057a	6a 00		 push	 0
  0057c	68 5d 02 00 00	 push	 605			; 0000025dH
  00581	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _MatchStart$20[ebp+4]
  00587	51		 push	 ecx
  00588	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0058b	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00591	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00594	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  0059a	8b 00		 mov	 eax, DWORD PTR [eax]
  0059c	52		 push	 edx
  0059d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  005a0	ff d1		 call	 ecx
  005a2	83 c4 1c	 add	 esp, 28			; 0000001cH

; 405  : 
; 406  : 				//发送状态
; 407  : 				BYTE cbMatchStatus=MS_MATCHING;

  005a5	c6 85 6f ff ff
	ff 02		 mov	 BYTE PTR _cbMatchStatus$19[ebp], 2

; 408  : 				m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus));	

  005ac	6a 01		 push	 1
  005ae	8d 85 6f ff ff
	ff		 lea	 eax, DWORD PTR _cbMatchStatus$19[ebp]
  005b4	50		 push	 eax
  005b5	6a 0a		 push	 10			; 0000000aH
  005b7	6a 0a		 push	 10			; 0000000aH
  005b9	68 ff 00 00 00	 push	 255			; 000000ffH
  005be	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005c1	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  005c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005ca	8b 12		 mov	 edx, DWORD PTR [edx]
  005cc	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  005d2	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  005d5	ff d0		 call	 eax
$LN28@OnEventTim:

; 409  : 			}
; 410  : 
; 411  : 			return true;

  005d7	b0 01		 mov	 al, 1
  005d9	e9 e8 06 00 00	 jmp	 $LN1@OnEventTim
$LN29@OnEventTim:

; 412  : 		}
; 413  : 	case IDI_CHECK_END_MATCH:				//结束比赛
; 414  : 		{
; 415  : 			//变量定义
; 416  : 			BYTE cbMatchStatus=m_MatchStatus;

  005de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005e1	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  005e4	88 8d 6e ff ff
	ff		 mov	 BYTE PTR _cbMatchStatus$18[ebp], cl

; 417  : 
; 418  : 			//更新状态
; 419  : 			UpdateMatchStatus();

  005ea	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005ed	e8 00 00 00 00	 call	 ?UpdateMatchStatus@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::UpdateMatchStatus

; 420  : 
; 421  : 			//比赛结束
; 422  : 			if (m_MatchStatus==MatchStatus_WaitEnd)

  005f2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005f5	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  005f9	83 f9 03	 cmp	 ecx, 3
  005fc	0f 85 7b 02 00
	00		 jne	 $LN30@OnEventTim

; 423  : 			{
; 424  : 				if (cbMatchStatus!=MatchStatus_WaitEnd)

  00602	0f b6 85 6e ff
	ff ff		 movzx	 eax, BYTE PTR _cbMatchStatus$18[ebp]
  00609	83 f8 03	 cmp	 eax, 3
  0060c	0f 84 6b 02 00
	00		 je	 $LN30@OnEventTim

; 425  : 				{
; 426  : 					//发送状态
; 427  : 					BYTE cbMatchStatus=MS_WAITEND;

  00612	c6 85 6d ff ff
	ff 04		 mov	 BYTE PTR _cbMatchStatus$17[ebp], 4

; 428  : 					m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus));

  00619	6a 01		 push	 1
  0061b	8d 85 6d ff ff
	ff		 lea	 eax, DWORD PTR _cbMatchStatus$17[ebp]
  00621	50		 push	 eax
  00622	6a 0a		 push	 10			; 0000000aH
  00624	6a 0a		 push	 10			; 0000000aH
  00626	68 ff 00 00 00	 push	 255			; 000000ffH
  0062b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0062e	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00634	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00637	8b 12		 mov	 edx, DWORD PTR [edx]
  00639	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0063f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00642	ff d0		 call	 eax

; 429  : 					
; 430  : 					//获取时间
; 431  : 					CTime CurTime=CTime::GetCurrentTime();

  00644	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _CurTime$16[ebp]
  0064a	50		 push	 eax
  0064b	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 432  : 					CTime MatchEndTime(m_pLockTimeMatch->MatchEndTime);

  00650	6a ff		 push	 -1
  00652	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00655	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00658	83 c1 14	 add	 ecx, 20			; 00000014H
  0065b	51		 push	 ecx
  0065c	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _MatchEndTime$15[ebp]
  00662	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 433  : 
; 434  : 					//比赛结束
; 435  : 					bool bMatchOver=CurTime>=MatchEndTime;

  00667	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _MatchEndTime$15[ebp+4]
  0066d	50		 push	 eax
  0066e	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _MatchEndTime$15[ebp]
  00674	51		 push	 ecx
  00675	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _CurTime$16[ebp]
  0067b	e8 00 00 00 00	 call	 ??PCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>=
  00680	88 85 5b ff ff
	ff		 mov	 BYTE PTR _bMatchOver$14[ebp], al

; 436  : 
; 437  : 					//变量定义					
; 438  : 					WORD wUserIndex=0;

  00686	33 c0		 xor	 eax, eax
  00688	66 89 85 54 ff
	ff ff		 mov	 WORD PTR _wUserIndex$13[ebp], ax

; 439  : 					TCHAR szMessage[128];
; 440  : 					IServerUserItem *pIServerUserItem = NULL;

  0068f	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIServerUserItem$11[ebp], 0
$LN6@OnEventTim:

; 441  : 
; 442  : 					do 
; 443  : 					{
; 444  : 						pIServerUserItem=m_pIServerUserManager->EnumUserItem(wUserIndex++);

  00699	66 8b 85 54 ff
	ff ff		 mov	 ax, WORD PTR _wUserIndex$13[ebp]
  006a0	66 89 85 5a fd
	ff ff		 mov	 WORD PTR tv461[ebp], ax
  006a7	0f b7 8d 5a fd
	ff ff		 movzx	 ecx, WORD PTR tv461[ebp]
  006ae	51		 push	 ecx
  006af	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  006b2	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  006b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006bb	8b 10		 mov	 edx, DWORD PTR [eax]
  006bd	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  006c3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006c6	ff d0		 call	 eax
  006c8	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _pIServerUserItem$11[ebp], eax
  006ce	66 8b 8d 54 ff
	ff ff		 mov	 cx, WORD PTR _wUserIndex$13[ebp]
  006d5	66 83 c1 01	 add	 cx, 1
  006d9	66 89 8d 54 ff
	ff ff		 mov	 WORD PTR _wUserIndex$13[ebp], cx

; 445  : 						if (pIServerUserItem==NULL) break;

  006e0	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _pIServerUserItem$11[ebp], 0
  006e7	75 05		 jne	 SHORT $LN32@OnEventTim
  006e9	e9 8f 01 00 00	 jmp	 $LN30@OnEventTim
$LN32@OnEventTim:

; 446  : 
; 447  : 						//比赛中用户
; 448  : 						if (pIServerUserItem->GetUserStatus()==US_PLAYING)

  006ee	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _pIServerUserItem$11[ebp]
  006f4	8b 10		 mov	 edx, DWORD PTR [eax]
  006f6	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$11[ebp]
  006fc	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  006ff	ff d0		 call	 eax
  00701	0f b6 c8	 movzx	 ecx, al
  00704	83 f9 05	 cmp	 ecx, 5
  00707	0f 85 ba 00 00
	00		 jne	 $LN33@OnEventTim

; 449  : 						{							
; 450  : 							if (bMatchOver==false)

  0070d	0f b6 85 5b ff
	ff ff		 movzx	 eax, BYTE PTR _bMatchOver$14[ebp]
  00714	85 c0		 test	 eax, eax
  00716	75 56		 jne	 SHORT $LN35@OnEventTim

; 451  : 							{
; 452  : 								_sntprintf_s(szMessage,CountArray(szMessage),TEXT("今天的比赛结束时间已到，请尽快在 %d 分钟内结束本局游戏。"),m_pLockTimeMatch->wEndDelayTime/60);

  00718	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0071b	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0071e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00720	33 d2		 xor	 edx, edx
  00722	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00727	f7 f1		 div	 ecx
  00729	50		 push	 eax
  0072a	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LFOAJBDH@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T@
  0072f	68 80 00 00 00	 push	 128			; 00000080H
  00734	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _szMessage$12[ebp]
  0073a	52		 push	 edx
  0073b	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00740	83 c4 10	 add	 esp, 16			; 00000010H

; 453  : 								m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_CHAT|SMT_GLOBAL);

  00743	6a 05		 push	 5
  00745	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$12[ebp]
  0074b	50		 push	 eax
  0074c	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$11[ebp]
  00752	51		 push	 ecx
  00753	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00756	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0075c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0075f	8b 10		 mov	 edx, DWORD PTR [eax]
  00761	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00767	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0076a	ff d0		 call	 eax

; 454  : 							}
; 455  : 							else

  0076c	eb 54		 jmp	 SHORT $LN36@OnEventTim
$LN35@OnEventTim:

; 456  : 							{
; 457  : 								_sntprintf_s(szMessage, CountArray(szMessage), TEXT("本场比赛结束时间已到，请尽快在 %d 分钟内结束当前比赛。否则系统将会自动解散本回合并不计入成绩。"), m_pLockTimeMatch->wEndDelayTime / 60);

  0076e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00771	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00774	8b 01		 mov	 eax, DWORD PTR [ecx]
  00776	33 d2		 xor	 edx, edx
  00778	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0077d	f7 f1		 div	 ecx
  0077f	50		 push	 eax
  00780	68 00 00 00 00	 push	 OFFSET ??_C@_0FP@CHGGEFGE@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?G?k?$LO?$KB?$LP?l?T?Z?5@
  00785	68 80 00 00 00	 push	 128			; 00000080H
  0078a	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _szMessage$12[ebp]
  00790	52		 push	 edx
  00791	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00796	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : 								m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_CHAT|SMT_GLOBAL);

  00799	6a 05		 push	 5
  0079b	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$12[ebp]
  007a1	50		 push	 eax
  007a2	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$11[ebp]
  007a8	51		 push	 ecx
  007a9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  007ac	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  007b2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  007b5	8b 10		 mov	 edx, DWORD PTR [eax]
  007b7	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  007bd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  007c0	ff d0		 call	 eax
$LN36@OnEventTim:

; 459  : 							}
; 460  : 						}
; 461  : 						else

  007c2	e9 a9 00 00 00	 jmp	 $LN4@OnEventTim
$LN33@OnEventTim:

; 462  : 						{
; 463  : 							if (bMatchOver==false)

  007c7	0f b6 85 5b ff
	ff ff		 movzx	 eax, BYTE PTR _bMatchOver$14[ebp]
  007ce	85 c0		 test	 eax, eax
  007d0	75 47		 jne	 SHORT $LN37@OnEventTim

; 464  : 							{
; 465  : 								_sntprintf_s(szMessage, CountArray(szMessage), TEXT("今天的比赛到此结束，请您明天再来参加！"));

  007d2	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GCHCKFGB@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?C?w?L?l?T?Y?$MA@
  007d7	68 80 00 00 00	 push	 128			; 00000080H
  007dc	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$12[ebp]
  007e2	50		 push	 eax
  007e3	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  007e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 466  : 								m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_CHAT|SMT_EJECT|SMT_GLOBAL|SMT_CLOSE_GAME);

  007eb	68 07 02 00 00	 push	 519			; 00000207H
  007f0	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$12[ebp]
  007f6	50		 push	 eax
  007f7	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$11[ebp]
  007fd	51		 push	 ecx
  007fe	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00801	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00807	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0080a	8b 10		 mov	 edx, DWORD PTR [eax]
  0080c	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  00812	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00815	ff d0		 call	 eax

; 467  : 							}
; 468  : 							else

  00817	eb 57		 jmp	 SHORT $LN4@OnEventTim
$LN37@OnEventTim:

; 469  : 							{
; 470  : 								//发送结束消息
; 471  : 								_sntprintf_s(szMessage, CountArray(szMessage), TEXT("本场比赛结束时间已到，感谢您的参与；请在 %d 分钟后前往相关页面查询您的本场比赛成绩。"), m_pLockTimeMatch->wEndDelayTime / 60);

  00819	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0081c	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0081f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00821	33 d2		 xor	 edx, edx
  00823	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00828	f7 f1		 div	 ecx
  0082a	50		 push	 eax
  0082b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DDBBBMHA@?$LB?$LO?$LD?$KB?$LB?H?H?$PM?$LN?a?J?x?J?$LB?$LM?d?R?Q?$LF?$LN?$KD?$KM?$LI?P?P?$LL?D?z?$LF?D?$LC@
  00830	68 80 00 00 00	 push	 128			; 00000080H
  00835	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _szMessage$12[ebp]
  0083b	52		 push	 edx
  0083c	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00841	83 c4 10	 add	 esp, 16			; 00000010H

; 472  : 								m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_CHAT|SMT_EJECT|SMT_GLOBAL|SMT_CLOSE_GAME);

  00844	68 07 02 00 00	 push	 519			; 00000207H
  00849	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$12[ebp]
  0084f	50		 push	 eax
  00850	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _pIServerUserItem$11[ebp]
  00856	51		 push	 ecx
  00857	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0085a	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00860	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00863	8b 10		 mov	 edx, DWORD PTR [eax]
  00865	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [ecx+148]
  0086b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0086e	ff d0		 call	 eax
$LN4@OnEventTim:

; 473  : 							}
; 474  : 						}
; 475  : 
; 476  : 					} while (true);

  00870	b8 01 00 00 00	 mov	 eax, 1
  00875	85 c0		 test	 eax, eax
  00877	0f 85 1c fe ff
	ff		 jne	 $LN6@OnEventTim
$LN30@OnEventTim:

; 477  : 				}
; 478  : 			}
; 479  : 
; 480  : 			//比赛结束
; 481  : 			if (m_MatchStatus==MatchStatus_End)

  0087d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00880	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00884	83 f9 04	 cmp	 ecx, 4
  00887	0f 85 33 04 00
	00		 jne	 $LN39@OnEventTim

; 482  : 			{
; 483  : 				//关闭定时器
; 484  : 				m_pITimerEngine->KillTimer(IDI_CHECK_END_MATCH);

  0088d	68 ce 00 00 00	 push	 206			; 000000ceH
  00892	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00895	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0089b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0089e	8b 01		 mov	 eax, DWORD PTR [ecx]
  008a0	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  008a6	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  008a9	ff d2		 call	 edx

; 485  : 				m_pITimerEngine->KillTimer(IDI_DISTRIBUTE_USER);

  008ab	68 ca 00 00 00	 push	 202			; 000000caH
  008b0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008b3	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  008b9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  008bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  008be	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  008c4	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  008c7	ff d2		 call	 edx

; 486  : 
; 487  : 				//发送状态
; 488  : 				BYTE cbMatchStatus=MS_MATCHEND;

  008c9	c6 85 cf fe ff
	ff 08		 mov	 BYTE PTR _cbMatchStatus$10[ebp], 8

; 489  : 				m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus));

  008d0	6a 01		 push	 1
  008d2	8d 85 cf fe ff
	ff		 lea	 eax, DWORD PTR _cbMatchStatus$10[ebp]
  008d8	50		 push	 eax
  008d9	6a 0a		 push	 10			; 0000000aH
  008db	6a 0a		 push	 10			; 0000000aH
  008dd	68 ff 00 00 00	 push	 255			; 000000ffH
  008e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  008e5	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  008eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008ee	8b 12		 mov	 edx, DWORD PTR [edx]
  008f0	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  008f6	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  008f9	ff d0		 call	 eax

; 490  : 
; 491  : 				//解散游戏
; 492  : 				for (INT i=0; i<m_pGameServiceOption->wTableCount; i++)

  008fb	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$9[ebp], 0
  00905	eb 0f		 jmp	 SHORT $LN9@OnEventTim
$LN7@OnEventTim:
  00907	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _i$9[ebp]
  0090d	83 c0 01	 add	 eax, 1
  00910	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _i$9[ebp], eax
$LN9@OnEventTim:
  00916	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00919	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  0091c	0f b7 51 46	 movzx	 edx, WORD PTR [ecx+70]
  00920	39 95 c8 fe ff
	ff		 cmp	 DWORD PTR _i$9[ebp], edx
  00926	0f 8d 87 00 00
	00		 jge	 $LN8@OnEventTim

; 493  : 				{
; 494  : 					//获取对象
; 495  : 					ITableFrame * pITableFrame=m_ppITableFrame[i];					

  0092c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0092f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00935	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _i$9[ebp]
  0093b	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0093e	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pITableFrame$8[ebp], eax

; 496  : 					ASSERT(pITableFrame!=NULL);

  00944	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _pITableFrame$8[ebp], 0
  0094b	75 1a		 jne	 SHORT $LN48@OnEventTim
  0094d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventTimer@CLockTimeMatch@@UAE_NKI@Z@4JA
  00952	05 1f 01 00 00	 add	 eax, 287		; 0000011fH
  00957	50		 push	 eax
  00958	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0095d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00962	85 c0		 test	 eax, eax
  00964	74 01		 je	 SHORT $LN48@OnEventTim
  00966	cc		 int	 3
$LN48@OnEventTim:

; 497  : 					if (pITableFrame==NULL) continue;

  00967	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _pITableFrame$8[ebp], 0
  0096e	75 02		 jne	 SHORT $LN40@OnEventTim
  00970	eb 95		 jmp	 SHORT $LN7@OnEventTim
$LN40@OnEventTim:

; 498  : 
; 499  : 					//解散游戏
; 500  : 					if (pITableFrame->IsGameStarted()) 

  00972	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _pITableFrame$8[ebp]
  00978	8b 10		 mov	 edx, DWORD PTR [eax]
  0097a	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _pITableFrame$8[ebp]
  00980	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00983	ff d0		 call	 eax
  00985	0f b6 c8	 movzx	 ecx, al
  00988	85 c9		 test	 ecx, ecx
  0098a	74 13		 je	 SHORT $LN41@OnEventTim

; 501  : 					{
; 502  : 						pITableFrame->DismissGame();

  0098c	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _pITableFrame$8[ebp]
  00992	8b 10		 mov	 edx, DWORD PTR [eax]
  00994	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _pITableFrame$8[ebp]
  0099a	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0099d	ff d0		 call	 eax
$LN41@OnEventTim:

; 503  : 					}
; 504  : 
; 505  : 					//执行起立
; 506  : 					PerformAllUserStandUp(pITableFrame);

  0099f	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _pITableFrame$8[ebp]
  009a5	50		 push	 eax
  009a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009a9	e8 00 00 00 00	 call	 ?PerformAllUserStandUp@CLockTimeMatch@@IAEXPAUITableFrame@@@Z ; CLockTimeMatch::PerformAllUserStandUp

; 507  : 				}

  009ae	e9 54 ff ff ff	 jmp	 $LN7@OnEventTim
$LN8@OnEventTim:

; 508  : 
; 509  : 				//移除所有
; 510  : 				m_DistributeManage.RemoveAll();

  009b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009b6	83 c1 18	 add	 ecx, 24			; 00000018H
  009b9	e8 00 00 00 00	 call	 ?RemoveAll@CDistributeManager@@QAEXXZ ; CDistributeManager::RemoveAll

; 511  : 
; 512  : 				//获取时间
; 513  : 				CTime CurTime=CTime::GetCurrentTime();

  009be	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _CurTime$7[ebp]
  009c4	50		 push	 eax
  009c5	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount

; 514  : 				CTime MatchEndTime(m_pLockTimeMatch->MatchEndTime);

  009ca	6a ff		 push	 -1
  009cc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  009cf	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  009d2	83 c1 14	 add	 ecx, 20			; 00000014H
  009d5	51		 push	 ecx
  009d6	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _MatchEndTime$6[ebp]
  009dc	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ; ATL::CTime::CTime

; 515  : 
; 516  : 				//比赛结束
; 517  : 				if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_ROUND || CurTime>=MatchEndTime)

  009e1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  009e4	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  009e7	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  009eb	83 fa 01	 cmp	 edx, 1
  009ee	74 24		 je	 SHORT $LN43@OnEventTim
  009f0	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _MatchEndTime$6[ebp+4]
  009f6	50		 push	 eax
  009f7	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _MatchEndTime$6[ebp]
  009fd	51		 push	 ecx
  009fe	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _CurTime$7[ebp]
  00a04	e8 00 00 00 00	 call	 ??PCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>=
  00a09	0f b6 d0	 movzx	 edx, al
  00a0c	85 d2		 test	 edx, edx
  00a0e	0f 84 57 02 00
	00		 je	 $LN42@OnEventTim
$LN43@OnEventTim:

; 518  : 				{
; 519  : 					//比赛结束
; 520  : 					DBR_GR_MatchOver MatchOver;
; 521  : 					ZeroMemory(&MatchOver,sizeof(MatchOver));

  00a14	6a 38		 push	 56			; 00000038H
  00a16	6a 00		 push	 0
  00a18	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _MatchOver$5[ebp]
  00a1e	50		 push	 eax
  00a1f	e8 00 00 00 00	 call	 _memset
  00a24	83 c4 0c	 add	 esp, 12			; 0000000cH

; 522  : 
; 523  : 					//构造数据				
; 524  : 					MatchOver.cbMatchType=MATCH_TYPE_LOCKTIME;

  00a27	c6 85 7e fe ff
	ff 00		 mov	 BYTE PTR _MatchOver$5[ebp+2], 0

; 525  : 					MatchOver.dwMatchID=m_pMatchOption->dwMatchID;

  00a2e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a31	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00a34	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a36	89 95 88 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+12], edx

; 526  : 					MatchOver.lMatchNo=m_pMatchOption->lMatchNo;					

  00a3c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a3f	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00a42	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00a45	89 95 8c fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+16], edx
  00a4b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00a4e	89 85 90 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+20], eax

; 527  : 					MatchOver.wPlayCount=m_pLockTimeMatch->wMinPlayCount;

  00a54	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a57	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00a5a	66 8b 51 59	 mov	 dx, WORD PTR [ecx+89]
  00a5e	66 89 95 84 fe
	ff ff		 mov	 WORD PTR _MatchOver$5[ebp+8], dx

; 528  : 					MatchOver.wServerID=m_pGameServiceOption->wServerID;

  00a65	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a68	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00a6b	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  00a6f	66 89 95 7c fe
	ff ff		 mov	 WORD PTR _MatchOver$5[ebp], dx

; 529  : 					MatchOver.bMatchFinish=(CurTime>=MatchEndTime)?TRUE:FALSE;

  00a76	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _MatchEndTime$6[ebp+4]
  00a7c	50		 push	 eax
  00a7d	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _MatchEndTime$6[ebp]
  00a83	51		 push	 ecx
  00a84	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _CurTime$7[ebp]
  00a8a	e8 00 00 00 00	 call	 ??PCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator>=
  00a8f	0f b6 d0	 movzx	 edx, al
  00a92	85 d2		 test	 edx, edx
  00a94	74 0c		 je	 SHORT $LN49@OnEventTim
  00a96	c7 85 58 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv630[ebp], 1
  00aa0	eb 0a		 jmp	 SHORT $LN50@OnEventTim
$LN49@OnEventTim:
  00aa2	c7 85 58 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv630[ebp], 0
$LN50@OnEventTim:
  00aac	8b 85 58 fd ff
	ff		 mov	 eax, DWORD PTR tv630[ebp]
  00ab2	89 85 80 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+4], eax

; 530  : 
; 531  : 					//常规开赛
; 532  : 					if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_NORMAL)

  00ab8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00abb	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00abe	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  00ac2	85 d2		 test	 edx, edx
  00ac4	75 58		 jne	 SHORT $LN44@OnEventTim

; 533  : 					{
; 534  : 						MatchOver.MatchEndTime=m_pLockTimeMatch->MatchEndTime;

  00ac6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ac9	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00acc	83 c1 14	 add	 ecx, 20			; 00000014H
  00acf	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ad1	89 95 a4 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+40], edx
  00ad7	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00ada	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+44], eax
  00ae0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00ae3	89 95 ac fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+48], edx
  00ae9	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00aec	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+52], eax

; 535  : 						MatchOver.MatchStartTime=m_pLockTimeMatch->MatchStartTime;

  00af2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00af5	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00af8	83 c1 04	 add	 ecx, 4
  00afb	8b 11		 mov	 edx, DWORD PTR [ecx]
  00afd	89 95 94 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+24], edx
  00b03	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00b06	89 85 98 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+28], eax
  00b0c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00b0f	89 95 9c fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+32], edx
  00b15	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00b18	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+36], eax
$LN44@OnEventTim:

; 536  : 					}	
; 537  : 
; 538  : 					//循环开赛
; 539  : 					if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_ROUND)

  00b1e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b21	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00b24	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  00b28	83 fa 01	 cmp	 edx, 1
  00b2b	0f 85 d8 00 00
	00		 jne	 $LN45@OnEventTim

; 540  : 					{
; 541  : 						//变量定义
; 542  : 						SYSTEMTIME SystemTimeCurr;
; 543  : 						CurTime.GetAsSystemTime(SystemTimeCurr);

  00b31	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _SystemTimeCurr$4[ebp]
  00b37	50		 push	 eax
  00b38	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _CurTime$7[ebp]
  00b3e	e8 00 00 00 00	 call	 ?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ; ATL::CTime::GetAsSystemTime

; 544  : 
; 545  : 						//设置时间
; 546  : 						SystemTimeCurr.wHour=m_pLockTimeMatch->MatchStartTime.wHour;

  00b43	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b46	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00b49	66 8b 51 0c	 mov	 dx, WORD PTR [ecx+12]
  00b4d	66 89 95 74 fe
	ff ff		 mov	 WORD PTR _SystemTimeCurr$4[ebp+8], dx

; 547  : 						SystemTimeCurr.wMinute=m_pLockTimeMatch->MatchStartTime.wMinute;

  00b54	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b57	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00b5a	66 8b 51 0e	 mov	 dx, WORD PTR [ecx+14]
  00b5e	66 89 95 76 fe
	ff ff		 mov	 WORD PTR _SystemTimeCurr$4[ebp+10], dx

; 548  : 						SystemTimeCurr.wSecond=m_pLockTimeMatch->MatchStartTime.wSecond;

  00b65	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b68	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00b6b	66 8b 51 10	 mov	 dx, WORD PTR [ecx+16]
  00b6f	66 89 95 78 fe
	ff ff		 mov	 WORD PTR _SystemTimeCurr$4[ebp+12], dx

; 549  : 
; 550  : 						//开始时间
; 551  : 						MatchOver.MatchStartTime=SystemTimeCurr;

  00b76	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _SystemTimeCurr$4[ebp]
  00b7c	89 85 94 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+24], eax
  00b82	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _SystemTimeCurr$4[ebp+4]
  00b88	89 8d 98 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+28], ecx
  00b8e	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR _SystemTimeCurr$4[ebp+8]
  00b94	89 95 9c fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+32], edx
  00b9a	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _SystemTimeCurr$4[ebp+12]
  00ba0	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+36], eax

; 552  : 
; 553  :                         //设置时间
; 554  : 						SystemTimeCurr.wHour=m_pLockTimeMatch->MatchEndTime.wHour;

  00ba6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ba9	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00bac	66 8b 51 1c	 mov	 dx, WORD PTR [ecx+28]
  00bb0	66 89 95 74 fe
	ff ff		 mov	 WORD PTR _SystemTimeCurr$4[ebp+8], dx

; 555  : 						SystemTimeCurr.wMinute=m_pLockTimeMatch->MatchEndTime.wMinute;

  00bb7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00bba	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00bbd	66 8b 51 1e	 mov	 dx, WORD PTR [ecx+30]
  00bc1	66 89 95 76 fe
	ff ff		 mov	 WORD PTR _SystemTimeCurr$4[ebp+10], dx

; 556  : 						SystemTimeCurr.wSecond=m_pLockTimeMatch->MatchEndTime.wSecond;

  00bc8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00bcb	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00bce	66 8b 51 20	 mov	 dx, WORD PTR [ecx+32]
  00bd2	66 89 95 78 fe
	ff ff		 mov	 WORD PTR _SystemTimeCurr$4[ebp+12], dx

; 557  : 
; 558  : 						//结束时间
; 559  : 						MatchOver.MatchEndTime=SystemTimeCurr;						

  00bd9	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _SystemTimeCurr$4[ebp]
  00bdf	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+40], eax
  00be5	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR _SystemTimeCurr$4[ebp+4]
  00beb	89 8d a8 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+44], ecx
  00bf1	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR _SystemTimeCurr$4[ebp+8]
  00bf7	89 95 ac fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+48], edx
  00bfd	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _SystemTimeCurr$4[ebp+12]
  00c03	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _MatchOver$5[ebp+52], eax
$LN45@OnEventTim:

; 560  : 					}									
; 561  : 
; 562  : 					//投递请求
; 563  : 					m_pIDataBaseEngine->PostDataBaseRequest(MatchOver.dwMatchID,DBR_GR_MATCH_OVER,0,&MatchOver,sizeof(MatchOver));

  00c09	6a 00		 push	 0
  00c0b	6a 38		 push	 56			; 00000038H
  00c0d	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _MatchOver$5[ebp]
  00c13	50		 push	 eax
  00c14	6a 00		 push	 0
  00c16	68 5e 02 00 00	 push	 606			; 0000025eH
  00c1b	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR _MatchOver$5[ebp+12]
  00c21	51		 push	 ecx
  00c22	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c25	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00c2b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2e	8b 91 8c 00 00
	00		 mov	 edx, DWORD PTR [ecx+140]
  00c34	8b 00		 mov	 eax, DWORD PTR [eax]
  00c36	52		 push	 edx
  00c37	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00c3a	ff d1		 call	 ecx
  00c3c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 564  : 					
; 565  : 					//切换时钟
; 566  : 					if (CurTime<MatchEndTime) SwitchMatchTimer();					

  00c3f	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _MatchEndTime$6[ebp+4]
  00c45	50		 push	 eax
  00c46	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _MatchEndTime$6[ebp]
  00c4c	51		 push	 ecx
  00c4d	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _CurTime$7[ebp]
  00c53	e8 00 00 00 00	 call	 ??MCTime@ATL@@QBE_NV01@@Z ; ATL::CTime::operator<
  00c58	0f b6 d0	 movzx	 edx, al
  00c5b	85 d2		 test	 edx, edx
  00c5d	74 08		 je	 SHORT $LN46@OnEventTim
  00c5f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c62	e8 00 00 00 00	 call	 ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::SwitchMatchTimer
$LN46@OnEventTim:

; 567  : 						
; 568  : 					return true;

  00c67	b0 01		 mov	 al, 1
  00c69	eb 5b		 jmp	 SHORT $LN1@OnEventTim
$LN42@OnEventTim:

; 569  : 				}
; 570  : 
; 571  : 				//发送结束消息
; 572  : 				TCHAR szMessage[128]=TEXT("今天的比赛到此结束，请您明天再来参加！");

  00c6b	b9 09 00 00 00	 mov	 ecx, 9
  00c70	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0CH@GCHCKFGB@?$LN?q?L?l?$LF?D?$LB?H?H?$PM?$LF?$LN?$LE?K?$LN?a?J?x?$KD?$KM?G?k?D?z?C?w?L?l?T?Y?$MA@
  00c75	8d bd ec fd ff
	ff		 lea	 edi, DWORD PTR _szMessage$3[ebp]
  00c7b	f3 a5		 rep movsd
  00c7d	66 a5		 movsw
  00c7f	a4		 movsb
  00c80	6a 59		 push	 89			; 00000059H
  00c82	6a 00		 push	 0
  00c84	8d 85 13 fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp+39]
  00c8a	50		 push	 eax
  00c8b	e8 00 00 00 00	 call	 _memset
  00c90	83 c4 0c	 add	 esp, 12			; 0000000cH

; 573  : 				m_pIGameServiceFrame->SendGameMessage(szMessage,SMT_CHAT|SMT_EJECT|SMT_GLOBAL|SMT_CLOSE_GAME);

  00c93	68 07 02 00 00	 push	 519			; 00000207H
  00c98	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szMessage$3[ebp]
  00c9e	50		 push	 eax
  00c9f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ca2	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00ca8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00cab	8b 12		 mov	 edx, DWORD PTR [edx]
  00cad	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00cb3	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00cb6	ff d0		 call	 eax

; 574  : 
; 575  : 				//切换时钟
; 576  : 				SwitchMatchTimer();				

  00cb8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00cbb	e8 00 00 00 00	 call	 ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::SwitchMatchTimer
$LN39@OnEventTim:

; 577  : 			}
; 578  : 
; 579  : 			return true;

  00cc0	b0 01		 mov	 al, 1
  00cc2	eb 02		 jmp	 SHORT $LN1@OnEventTim
$LN2@OnEventTim:

; 580  : 		}
; 581  : 	}
; 582  : 	return true;

  00cc4	b0 01		 mov	 al, 1
$LN1@OnEventTim:

; 583  : }

  00cc6	5f		 pop	 edi
  00cc7	5e		 pop	 esi
  00cc8	5b		 pop	 ebx
  00cc9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ccc	33 cd		 xor	 ecx, ebp
  00cce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00cd3	8b e5		 mov	 esp, ebp
  00cd5	5d		 pop	 ebp
  00cd6	c2 08 00	 ret	 8
  00cd9	0f 1f 00	 npad	 3
$LN51@OnEventTim:
  00cdc	00 00 00 00	 DD	 $LN11@OnEventTim
  00ce0	00 00 00 00	 DD	 $LN10@OnEventTim
  00ce4	00 00 00 00	 DD	 $LN17@OnEventTim
  00ce8	00 00 00 00	 DD	 $LN19@OnEventTim
  00cec	00 00 00 00	 DD	 $LN25@OnEventTim
  00cf0	00 00 00 00	 DD	 $LN29@OnEventTim
?OnEventTimer@CLockTimeMatch@@UAE_NKI@Z ENDP		; CLockTimeMatch::OnEventTimer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?InitMatchInterface@CLockTimeMatch@@UAE_NAAUtagMatchManagerParameter@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_MatchManagerParameter$ = 8				; size = 4
?InitMatchInterface@CLockTimeMatch@@UAE_NAAUtagMatchManagerParameter@@@Z PROC ; CLockTimeMatch::InitMatchInterface, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 140  : 	//服务配置
; 141  : 	m_pMatchOption=MatchManagerParameter.pGameMatchOption;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 142  : 	m_pGameServiceOption=MatchManagerParameter.pGameServiceOption;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  0001d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00020	89 50 7c	 mov	 DWORD PTR [eax+124], edx

; 143  : 	m_pGameServiceAttrib=MatchManagerParameter.pGameServiceAttrib;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	89 90 80 00 00
	00		 mov	 DWORD PTR [eax+128], edx

; 144  : 
; 145  : 	//内核组件
; 146  : 	m_pITimerEngine=MatchManagerParameter.pITimerEngine;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00038	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0003b	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 147  : 	m_pIDataBaseEngine=MatchManagerParameter.pICorrespondManager;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00047	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004a	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 148  : 	m_pITCPNetworkEngineEvent=MatchManagerParameter.pTCPNetworkEngine;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00056	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00059	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 149  : 
; 150  : 	//服务组件		
; 151  : 	m_pIGameServiceFrame=MatchManagerParameter.pIMainServiceFrame;		

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00065	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00068	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 152  : 	m_pIServerUserManager=MatchManagerParameter.pIServerUserManager;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00074	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00077	89 90 98 00 00
	00		 mov	 DWORD PTR [eax+152], edx

; 153  : 	m_pAndroidUserManager=MatchManagerParameter.pIAndroidUserManager;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00083	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00086	89 90 9c 00 00
	00		 mov	 DWORD PTR [eax+156], edx

; 154  : 	m_pIServerUserItemSink=MatchManagerParameter.pIServerUserItemSink;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00092	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00095	89 90 a0 00 00
	00		 mov	 DWORD PTR [eax+160], edx

; 155  : 
; 156  : 	//分组设置
; 157  : 	m_DistributeManage.SetDistributeRule(m_pMatchOption->cbDistributeRule);

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000a1	0f b6 51 75	 movzx	 edx, BYTE PTR [ecx+117]
  000a5	52		 push	 edx
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	83 c1 18	 add	 ecx, 24			; 00000018H
  000ac	e8 00 00 00 00	 call	 ?SetDistributeRule@CDistributeManager@@QAEXE@Z ; CDistributeManager::SetDistributeRule

; 158  : 
; 159  : 	//比赛规则
; 160  : 	m_pLockTimeMatch=(tagLockTimeMatch *)m_pMatchOption->cbMatchRule;

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000b7	83 c1 7e	 add	 ecx, 126		; 0000007eH
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	89 4a 78	 mov	 DWORD PTR [edx+120], ecx

; 161  : 
; 162  : 	//调整间隔
; 163  : 	if (m_pMatchOption->wDistributeTimeSpace==0)

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000c6	0f b7 51 78	 movzx	 edx, WORD PTR [ecx+120]
  000ca	85 d2		 test	 edx, edx
  000cc	75 0f		 jne	 SHORT $LN2@InitMatchI

; 164  : 	{
; 165  : 		m_pMatchOption->wDistributeTimeSpace=5;

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000d4	ba 05 00 00 00	 mov	 edx, 5
  000d9	66 89 51 78	 mov	 WORD PTR [ecx+120], dx
$LN2@InitMatchI:

; 166  : 	}
; 167  : 
; 168  : 	//调整人数
; 169  : 	if (m_pMatchOption->wMaxPartakeGameUser<2) 

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000e3	0f b7 51 7c	 movzx	 edx, WORD PTR [ecx+124]
  000e7	83 fa 02	 cmp	 edx, 2
  000ea	7d 17		 jge	 SHORT $LN3@InitMatchI

; 170  : 	{
; 171  : 		m_pMatchOption->wMaxPartakeGameUser=m_pGameServiceAttrib->wChairCount;

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  000f5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f8	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  000fb	66 8b 49 02	 mov	 cx, WORD PTR [ecx+2]
  000ff	66 89 48 7c	 mov	 WORD PTR [eax+124], cx
$LN3@InitMatchI:

; 172  : 	}
; 173  : 
; 174  : 	//调整人数
; 175  : 	if (m_pMatchOption->wMaxPartakeGameUser>m_pGameServiceAttrib->wChairCount)

  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00109	0f b7 51 7c	 movzx	 edx, WORD PTR [ecx+124]
  0010d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00110	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00116	0f b7 41 02	 movzx	 eax, WORD PTR [ecx+2]
  0011a	3b d0		 cmp	 edx, eax
  0011c	7e 17		 jle	 SHORT $LN4@InitMatchI

; 176  : 	{
; 177  : 		m_pMatchOption->wMaxPartakeGameUser=m_pGameServiceAttrib->wChairCount;

  0011e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00121	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  00127	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0012a	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0012d	66 8b 49 02	 mov	 cx, WORD PTR [ecx+2]
  00131	66 89 48 7c	 mov	 WORD PTR [eax+124], cx
$LN4@InitMatchI:

; 178  : 	}
; 179  : 
; 180  : 	//调整人数
; 181  : 	if (m_pMatchOption->wMinPartakeGameUser<2) 

  00135	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00138	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0013b	0f b7 51 7a	 movzx	 edx, WORD PTR [ecx+122]
  0013f	83 fa 02	 cmp	 edx, 2
  00142	7d 17		 jge	 SHORT $LN5@InitMatchI

; 182  : 	{
; 183  : 		m_pMatchOption->wMinPartakeGameUser=m_pGameServiceAttrib->wChairCount;

  00144	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00147	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0014d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00150	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00153	66 8b 49 02	 mov	 cx, WORD PTR [ecx+2]
  00157	66 89 48 7a	 mov	 WORD PTR [eax+122], cx
$LN5@InitMatchI:

; 184  : 	}
; 185  : 
; 186  : 	//调整人数
; 187  : 	if (m_pMatchOption->wMinPartakeGameUser>m_pMatchOption->wMaxPartakeGameUser)

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00161	0f b7 51 7a	 movzx	 edx, WORD PTR [ecx+122]
  00165	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00168	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0016b	0f b7 41 7c	 movzx	 eax, WORD PTR [ecx+124]
  0016f	3b d0		 cmp	 edx, eax
  00171	7e 14		 jle	 SHORT $LN6@InitMatchI

; 188  : 	{
; 189  : 		m_pMatchOption->wMinPartakeGameUser=m_pMatchOption->wMaxPartakeGameUser;

  00173	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00176	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00179	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0017c	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0017f	66 8b 49 7c	 mov	 cx, WORD PTR [ecx+124]
  00183	66 89 48 7a	 mov	 WORD PTR [eax+122], cx
$LN6@InitMatchI:

; 190  : 	}
; 191  : 
; 192  : 	//分组人数
; 193  : 	if (m_pMatchOption->wMinDistributeUser<m_pMatchOption->wMinPartakeGameUser)

  00187	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018a	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0018d	0f b7 51 76	 movzx	 edx, WORD PTR [ecx+118]
  00191	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00194	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00197	0f b7 41 7a	 movzx	 eax, WORD PTR [ecx+122]
  0019b	3b d0		 cmp	 edx, eax
  0019d	7d 14		 jge	 SHORT $LN7@InitMatchI

; 194  : 	{
; 195  : 		m_pMatchOption->wMinDistributeUser=m_pMatchOption->wMinPartakeGameUser;

  0019f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a2	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a8	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  001ab	66 8b 49 7a	 mov	 cx, WORD PTR [ecx+122]
  001af	66 89 48 76	 mov	 WORD PTR [eax+118], cx
$LN7@InitMatchI:

; 196  : 	}
; 197  : 
; 198  : 	//创建桌子
; 199  : 	if (m_ppITableFrame==NULL)

  001b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b6	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  001bd	75 32		 jne	 SHORT $LN8@InitMatchI

; 200  : 	{
; 201  : 		m_ppITableFrame=new ITableFrame*[m_pGameServiceOption->wTableCount];

  001bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c2	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  001c5	0f b7 41 46	 movzx	 eax, WORD PTR [ecx+70]
  001c9	33 c9		 xor	 ecx, ecx
  001cb	ba 04 00 00 00	 mov	 edx, 4
  001d0	f7 e2		 mul	 edx
  001d2	0f 90 c1	 seto	 cl
  001d5	f7 d9		 neg	 ecx
  001d7	0b c8		 or	 ecx, eax
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  001df	83 c4 04	 add	 esp, 4
  001e2	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  001e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e8	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  001eb	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx
$LN8@InitMatchI:

; 202  : 	}	
; 203  : 
; 204  : 	return true;

  001f1	b0 01		 mov	 al, 1

; 205  : }

  001f3	5f		 pop	 edi
  001f4	5e		 pop	 esi
  001f5	5b		 pop	 ebx
  001f6	8b e5		 mov	 esp, ebp
  001f8	5d		 pop	 ebp
  001f9	c2 04 00	 ret	 4
?InitMatchInterface@CLockTimeMatch@@UAE_NAAUtagMatchManagerParameter@@@Z ENDP ; CLockTimeMatch::InitMatchInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z
_TEXT	SEGMENT
tv175 = -96						; size = 4
tv159 = -96						; size = 4
tv139 = -96						; size = 4
tv88 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 4
_pTableFrameHook$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pTableFrame$ = 8					; size = 4
_wTableID$ = 12						; size = 2
?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z PROC ; CLockTimeMatch::BindTableFrame, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 	if(pTableFrame==NULL || wTableID>m_pGameServiceOption->wTableCount)

  0002b	83 7d 08 00	 cmp	 DWORD PTR _pTableFrame$[ebp], 0
  0002f	74 12		 je	 SHORT $LN3@BindTableF
  00031	0f b7 45 0c	 movzx	 eax, WORD PTR _wTableID$[ebp]
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  0003b	0f b7 4a 46	 movzx	 ecx, WORD PTR [edx+70]
  0003f	3b c1		 cmp	 eax, ecx
  00041	7e 24		 jle	 SHORT $LN2@BindTableF
$LN3@BindTableF:

; 120  : 	{
; 121  : 		ASSERT(false);

  00043	33 c0		 xor	 eax, eax
  00045	75 19		 jne	 SHORT $LN5@BindTableF
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z@4JA
  0004d	83 c1 03	 add	 ecx, 3
  00050	51		 push	 ecx
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00056	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005b	85 c0		 test	 eax, eax
  0005d	74 01		 je	 SHORT $LN5@BindTableF
  0005f	cc		 int	 3
$LN5@BindTableF:

; 122  : 		return false;

  00060	32 c0		 xor	 al, al
  00062	e9 07 01 00 00	 jmp	 $LN1@BindTableF
$LN2@BindTableF:

; 123  : 	}
; 124  : 
; 125  : 	//创建钩子
; 126  : 	CTableFrameHook * pTableFrameHook=new CTableFrameHook();

  00067	6a 14		 push	 20			; 00000014H
  00069	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006e	83 c4 04	 add	 esp, 4
  00071	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	83 7d a4 00	 cmp	 DWORD PTR $T2[ebp], 0
  0007f	74 0d		 je	 SHORT $LN6@BindTableF
  00081	8b 4d a4	 mov	 ecx, DWORD PTR $T2[ebp]
  00084	e8 00 00 00 00	 call	 ??0CTableFrameHook@@QAE@XZ ; CTableFrameHook::CTableFrameHook
  00089	89 45 a0	 mov	 DWORD PTR tv88[ebp], eax
  0008c	eb 07		 jmp	 SHORT $LN7@BindTableF
$LN6@BindTableF:
  0008e	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN7@BindTableF:
  00095	8b 45 a0	 mov	 eax, DWORD PTR tv88[ebp]
  00098	89 45 a8	 mov	 DWORD PTR $T3[ebp], eax
  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8b 4d a8	 mov	 ecx, DWORD PTR $T3[ebp]
  000a5	89 4d ec	 mov	 DWORD PTR _pTableFrameHook$[ebp], ecx

; 127  : 	pTableFrameHook->InitTableFrameHook(QUERY_OBJECT_PTR_INTERFACE(pTableFrame,IUnknownEx));

  000a8	83 7d 08 00	 cmp	 DWORD PTR _pTableFrame$[ebp], 0
  000ac	75 09		 jne	 SHORT $LN8@BindTableF
  000ae	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
  000b5	eb 1a		 jmp	 SHORT $LN9@BindTableF
$LN8@BindTableF:
  000b7	68 00 01 01 06	 push	 100729088		; 06010100H
  000bc	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  000c1	8b 45 08	 mov	 eax, DWORD PTR _pTableFrame$[ebp]
  000c4	8b 10		 mov	 edx, DWORD PTR [eax]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _pTableFrame$[ebp]
  000c9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000cc	ff d0		 call	 eax
  000ce	89 45 a0	 mov	 DWORD PTR tv139[ebp], eax
$LN9@BindTableF:
  000d1	8b 4d a0	 mov	 ecx, DWORD PTR tv139[ebp]
  000d4	51		 push	 ecx
  000d5	8b 55 ec	 mov	 edx, DWORD PTR _pTableFrameHook$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	8b 4d ec	 mov	 ecx, DWORD PTR _pTableFrameHook$[ebp]
  000dd	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000e0	ff d2		 call	 edx

; 128  : 	pTableFrameHook->SetMatchEventSink(QUERY_OBJECT_PTR_INTERFACE(this,IUnknownEx));

  000e2	83 7d f0 00	 cmp	 DWORD PTR _this$[ebp], 0
  000e6	75 09		 jne	 SHORT $LN10@BindTableF
  000e8	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
  000ef	eb 1a		 jmp	 SHORT $LN11@BindTableF
$LN10@BindTableF:
  000f1	68 00 01 01 06	 push	 100729088		; 06010100H
  000f6	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  000fb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fe	8b 10		 mov	 edx, DWORD PTR [eax]
  00100	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00106	ff d0		 call	 eax
  00108	89 45 a0	 mov	 DWORD PTR tv159[ebp], eax
$LN11@BindTableF:
  0010b	8b 4d a0	 mov	 ecx, DWORD PTR tv159[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 ec	 mov	 edx, DWORD PTR _pTableFrameHook$[ebp]
  00112	8b 02		 mov	 eax, DWORD PTR [edx]
  00114	8b 4d ec	 mov	 ecx, DWORD PTR _pTableFrameHook$[ebp]
  00117	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0011a	ff d2		 call	 edx

; 129  : 
; 130  : 	//设置接口
; 131  : 	pTableFrame->SetTableFrameHook(QUERY_OBJECT_PTR_INTERFACE(pTableFrameHook,IUnknownEx));

  0011c	83 7d ec 00	 cmp	 DWORD PTR _pTableFrameHook$[ebp], 0
  00120	75 09		 jne	 SHORT $LN12@BindTableF
  00122	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv175[ebp], 0
  00129	eb 1a		 jmp	 SHORT $LN13@BindTableF
$LN12@BindTableF:
  0012b	68 00 01 01 06	 push	 100729088		; 06010100H
  00130	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00135	8b 45 ec	 mov	 eax, DWORD PTR _pTableFrameHook$[ebp]
  00138	8b 10		 mov	 edx, DWORD PTR [eax]
  0013a	8b 4d ec	 mov	 ecx, DWORD PTR _pTableFrameHook$[ebp]
  0013d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00140	ff d0		 call	 eax
  00142	89 45 a0	 mov	 DWORD PTR tv175[ebp], eax
$LN13@BindTableF:
  00145	8b 4d a0	 mov	 ecx, DWORD PTR tv175[ebp]
  00148	51		 push	 ecx
  00149	8b 55 08	 mov	 edx, DWORD PTR _pTableFrame$[ebp]
  0014c	8b 02		 mov	 eax, DWORD PTR [edx]
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _pTableFrame$[ebp]
  00151	8b 90 ec 00 00
	00		 mov	 edx, DWORD PTR [eax+236]
  00157	ff d2		 call	 edx

; 132  : 	m_ppITableFrame[wTableID]=pTableFrame;

  00159	0f b7 45 0c	 movzx	 eax, WORD PTR _wTableID$[ebp]
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00166	8b 4d 08	 mov	 ecx, DWORD PTR _pTableFrame$[ebp]
  00169	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 133  : 
; 134  : 	return true;

  0016c	b0 01		 mov	 al, 1
$LN1@BindTableF:

; 135  : }

  0016e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00171	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00178	59		 pop	 ecx
  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z$0:
  00000	6a 14		 push	 20			; 00000014H
  00002	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?BindTableFrame@CLockTimeMatch@@UAE_NPAUITableFrame@@G@Z ENDP ; CLockTimeMatch::BindTableFrame
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?OnStartService@CLockTimeMatch@@UAEXXZ
_TEXT	SEGMENT
$T1 = -76						; size = 8
_this$ = -4						; size = 4
?OnStartService@CLockTimeMatch@@UAEXXZ PROC		; CLockTimeMatch::OnStartService, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	//计算场次
; 83   : 	m_pMatchOption->lMatchNo=CalcMatchNo();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?CalcMatchNo@CLockTimeMatch@@IAE_JXZ ; CLockTimeMatch::CalcMatchNo
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  0001a	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0001d	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 84   : 
; 85   : 	//设置状态
; 86   : 	if (m_pLockTimeMatch->cbMatchMode==MATCH_MODE_NORMAL)

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00026	0f b6 51 24	 movzx	 edx, BYTE PTR [ecx+36]
  0002a	85 d2		 test	 edx, edx
  0002c	75 41		 jne	 SHORT $LN2@OnStartSer

; 87   : 	{
; 88   : 		if (m_pMatchOption->cbMatchStatus==MS_FREE) m_MatchStatus=MatchStatus_Free;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00034	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  00038	85 d2		 test	 edx, edx
  0003a	75 07		 jne	 SHORT $LN3@OnStartSer
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
$LN3@OnStartSer:

; 89   : 		if (m_pMatchOption->cbMatchStatus==MS_MATCHEND) m_MatchStatus=MatchStatus_End;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00049	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  0004d	83 fa 08	 cmp	 edx, 8
  00050	75 07		 jne	 SHORT $LN4@OnStartSer
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c6 40 0c 04	 mov	 BYTE PTR [eax+12], 4
$LN4@OnStartSer:

; 90   : 		if (m_pMatchOption->cbMatchStatus==MS_MATCHING) m_MatchStatus=MatchStatus_Playing;	

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0005f	0f b6 51 10	 movzx	 edx, BYTE PTR [ecx+16]
  00063	83 fa 02	 cmp	 edx, 2
  00066	75 07		 jne	 SHORT $LN2@OnStartSer
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c6 40 0c 02	 mov	 BYTE PTR [eax+12], 2
$LN2@OnStartSer:

; 91   : 	}
; 92   : 
; 93   : 	//设置状态
; 94   : 	m_TimeLastMatch=CTime::GetCurrentTime();	

  0006f	8d 45 b4	 lea	 eax, DWORD PTR $T1[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00083	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 95   : 
; 96   : 	//更新状态
; 97   : 	UpdateMatchStatus();

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?UpdateMatchStatus@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::UpdateMatchStatus

; 98   : 
; 99   : 	//切换时钟
; 100  : 	SwitchMatchTimer();		 

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?SwitchMatchTimer@CLockTimeMatch@@IAEXXZ ; CLockTimeMatch::SwitchMatchTimer

; 101  : 
; 102  : 	//报名开始
; 103  : 	if (IsMatchSignupStart()==false)

  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?IsMatchSignupStart@CLockTimeMatch@@IAE_NXZ ; CLockTimeMatch::IsMatchSignupStart
  0009e	0f b6 c0	 movzx	 eax, al
  000a1	85 c0		 test	 eax, eax
  000a3	75 27		 jne	 SHORT $LN6@OnStartSer

; 104  : 	{
; 105  : 		//开始检测	
; 106  : 		m_pITimerEngine->SetTimer(IDI_CHECK_START_SIGNUP,1000L,TIMES_INFINITY,NULL);

  000a5	6a 00		 push	 0
  000a7	6a ff		 push	 -1
  000a9	68 e8 03 00 00	 push	 1000			; 000003e8H
  000ae	68 cb 00 00 00	 push	 203			; 000000cbH
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bf	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c1	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  000c7	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000ca	ff d2		 call	 edx
$LN6@OnStartSer:

; 107  : 	}	
; 108  : 
; 109  : 	//报名截止
; 110  : 	if (IsMatchSignupEnd()==false && m_MatchStatus<MatchStatus_Playing)

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?IsMatchSignupEnd@CLockTimeMatch@@IAE_NXZ ; CLockTimeMatch::IsMatchSignupEnd
  000d4	0f b6 c0	 movzx	 eax, al
  000d7	85 c0		 test	 eax, eax
  000d9	75 33		 jne	 SHORT $LN1@OnStartSer
  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000de	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  000e2	83 f9 02	 cmp	 ecx, 2
  000e5	7d 27		 jge	 SHORT $LN1@OnStartSer

; 111  : 	{
; 112  : 		m_pITimerEngine->SetTimer(IDI_CHECK_END_SIGNUP,1000L,TIMES_INFINITY,NULL);	

  000e7	6a 00		 push	 0
  000e9	6a ff		 push	 -1
  000eb	68 e8 03 00 00	 push	 1000			; 000003e8H
  000f0	68 cc 00 00 00	 push	 204			; 000000ccH
  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00101	8b 01		 mov	 eax, DWORD PTR [ecx]
  00103	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00109	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0010c	ff d2		 call	 edx
$LN1@OnStartSer:

; 113  : 	}
; 114  : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
?OnStartService@CLockTimeMatch@@UAEXXZ ENDP		; CLockTimeMatch::OnStartService
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?QueryInterface@CLockTimeMatch@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
tv140 = -72						; size = 4
tv92 = -72						; size = 4
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CLockTimeMatch@@UAEPAXABU_GUID@@K@Z PROC ; CLockTimeMatch::QueryInterface, COMDAT
; _this$ = ecx

; 71   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   : 	QUERYINTERFACE(IGameMatchItem,Guid,dwQueryVer);

  0000c	68 00 00 00 00	 push	 OFFSET ?IID_IGameMatchItem@@3U_GUID@@B
  00011	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _==
  0001a	83 c4 08	 add	 esp, 8
  0001d	0f b6 c8	 movzx	 ecx, al
  00020	85 c9		 test	 ecx, ecx
  00022	74 20		 je	 SHORT $LN2@QueryInter
  00024	68 00 01 01 06	 push	 100729088		; 06010100H
  00029	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00032	83 c4 08	 add	 esp, 8
  00035	0f b6 c8	 movzx	 ecx, al
  00038	85 c9		 test	 ecx, ecx
  0003a	74 08		 je	 SHORT $LN2@QueryInter
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	e9 d4 00 00 00	 jmp	 $LN1@QueryInter
$LN2@QueryInter:

; 73   : 	QUERYINTERFACE(IMatchEventSink,Guid,dwQueryVer);

  00044	68 00 00 00 00	 push	 OFFSET ?IID_IMatchEventSink@@3U_GUID@@B
  00049	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _==
  00052	83 c4 08	 add	 esp, 8
  00055	0f b6 c8	 movzx	 ecx, al
  00058	85 c9		 test	 ecx, ecx
  0005a	74 38		 je	 SHORT $LN3@QueryInter
  0005c	68 00 01 01 06	 push	 100729088		; 06010100H
  00061	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  0006a	83 c4 08	 add	 esp, 8
  0006d	0f b6 c8	 movzx	 ecx, al
  00070	85 c9		 test	 ecx, ecx
  00072	74 20		 je	 SHORT $LN3@QueryInter
  00074	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00078	74 0b		 je	 SHORT $LN7@QueryInter
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	83 c0 04	 add	 eax, 4
  00080	89 45 b8	 mov	 DWORD PTR tv92[ebp], eax
  00083	eb 07		 jmp	 SHORT $LN8@QueryInter
$LN7@QueryInter:
  00085	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN8@QueryInter:
  0008c	8b 45 b8	 mov	 eax, DWORD PTR tv92[ebp]
  0008f	e9 84 00 00 00	 jmp	 $LN1@QueryInter
$LN3@QueryInter:

; 74   : 	QUERYINTERFACE(IServerUserItemSink,Guid,dwQueryVer);	

  00094	68 00 00 00 00	 push	 OFFSET ?IID_IServerUserItemSink@@3U_GUID@@B
  00099	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _==
  000a2	83 c4 08	 add	 esp, 8
  000a5	0f b6 c8	 movzx	 ecx, al
  000a8	85 c9		 test	 ecx, ecx
  000aa	74 35		 je	 SHORT $LN4@QueryInter
  000ac	68 00 01 01 06	 push	 100729088		; 06010100H
  000b1	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  000ba	83 c4 08	 add	 esp, 8
  000bd	0f b6 c8	 movzx	 ecx, al
  000c0	85 c9		 test	 ecx, ecx
  000c2	74 1d		 je	 SHORT $LN4@QueryInter
  000c4	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  000c8	74 0b		 je	 SHORT $LN9@QueryInter
  000ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	83 c0 08	 add	 eax, 8
  000d0	89 45 b8	 mov	 DWORD PTR tv140[ebp], eax
  000d3	eb 07		 jmp	 SHORT $LN10@QueryInter
$LN9@QueryInter:
  000d5	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN10@QueryInter:
  000dc	8b 45 b8	 mov	 eax, DWORD PTR tv140[ebp]
  000df	eb 37		 jmp	 SHORT $LN1@QueryInter
$LN4@QueryInter:

; 75   : 	QUERYINTERFACE_IUNKNOWNEX(IGameMatchItem,Guid,dwQueryVer);

  000e1	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  000e6	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 _==
  000ef	83 c4 08	 add	 esp, 8
  000f2	0f b6 c8	 movzx	 ecx, al
  000f5	85 c9		 test	 ecx, ecx
  000f7	74 1d		 je	 SHORT $LN5@QueryInter
  000f9	68 00 01 01 06	 push	 100729088		; 06010100H
  000fe	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00107	83 c4 08	 add	 esp, 8
  0010a	0f b6 c8	 movzx	 ecx, al
  0010d	85 c9		 test	 ecx, ecx
  0010f	74 05		 je	 SHORT $LN5@QueryInter
  00111	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00114	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN5@QueryInter:

; 76   : 	return NULL;

  00116	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 77   : }

  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 08 00	 ret	 8
?QueryInterface@CLockTimeMatch@@UAEPAXABU_GUID@@K@Z ENDP ; CLockTimeMatch::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.h
;	COMDAT ?Release@CLockTimeMatch@@UAEXXZ
_TEXT	SEGMENT
tv70 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Release@CLockTimeMatch@@UAEXXZ PROC			; CLockTimeMatch::Release, COMDAT
; _this$ = ecx

; 62   :  	virtual VOID Release(){ delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00012	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00015	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  00018	83 7d b8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0001c	74 14		 je	 SHORT $LN3@Release
  0001e	6a 01		 push	 1
  00020	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	8b 4d b8	 mov	 ecx, DWORD PTR $T2[ebp]
  00028	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0002b	ff d2		 call	 edx
  0002d	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  00030	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  00032	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN1@Release:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?Release@CLockTimeMatch@@UAEXXZ ENDP			; CLockTimeMatch::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ??1CLockTimeMatch@@UAE@XZ
_TEXT	SEGMENT
$T2 = -88						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CLockTimeMatch@@UAE@XZ PROC				; CLockTimeMatch::~CLockTimeMatch, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CLockTimeMatch@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 48	 sub	 esp, 72			; 00000048H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CLockTimeMatch@@6BIGameMatchItem@@@
  00038	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CLockTimeMatch@@6BIMatchEventSink@@@
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET ??_7CLockTimeMatch@@6BIServerUserItemSink@@@
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 56   : 	//释放资源
; 57   : 	SafeDeleteArray(m_ppITableFrame);

  00053	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00057	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00060	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  00063	8b 55 a8	 mov	 edx, DWORD PTR $T2[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0006c	83 c4 04	 add	 esp, 4
  0006f	eb 23		 jmp	 SHORT $LN5@CLockTimeM
__catch$??1CLockTimeMatch@@UAE@XZ$0:
  00071	33 c0		 xor	 eax, eax
  00073	75 19		 jne	 SHORT $LN4@CLockTimeM
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CLockTimeMatch@@UAE@XZ@4JA
  0007b	83 c1 02	 add	 ecx, 2
  0007e	51		 push	 ecx
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PLFANKAP@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00084	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00089	85 c0		 test	 eax, eax
  0008b	74 01		 je	 SHORT $LN4@CLockTimeM
  0008d	cc		 int	 3
$LN4@CLockTimeM:
  0008e	b8 00 00 00 00	 mov	 eax, $LN9@CLockTimeM
  00093	c3		 ret	 0
$LN5@CLockTimeM:
  00094	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0009b	eb 07		 jmp	 SHORT __tryend$??1CLockTimeMatch@@UAE@XZ$1
$LN9@CLockTimeM:
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
__tryend$??1CLockTimeMatch@@UAE@XZ$1:
  000a4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+132], 0

; 58   : 
; 59   : 	//关闭定时器
; 60   : 	m_pITimerEngine->KillTimer(IDI_SWITCH_STATUS);

  000b1	68 c9 00 00 00	 push	 201			; 000000c9H
  000b6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000bf	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c4	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  000ca	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  000cd	ff d2		 call	 edx

; 61   : 	m_pITimerEngine->KillTimer(IDI_CHECK_END_MATCH);

  000cf	68 ce 00 00 00	 push	 206			; 000000ceH
  000d4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e2	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  000e8	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  000eb	ff d2		 call	 edx

; 62   : 	m_pITimerEngine->KillTimer(IDI_DISTRIBUTE_USER);

  000ed	68 ca 00 00 00	 push	 202			; 000000caH
  000f2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  000fb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	8b 01		 mov	 eax, DWORD PTR [ecx]
  00100	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00106	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00109	ff d2		 call	 edx

; 63   : 	m_pITimerEngine->KillTimer(IDI_CHECK_START_SIGNUP);			

  0010b	68 cb 00 00 00	 push	 203			; 000000cbH
  00110	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  00119	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0011c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011e	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00124	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00127	ff d2		 call	 edx

; 64   : 
; 65   : 	//移除元素
; 66   : 	m_DistributeManage.RemoveAll();

  00129	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	83 c1 18	 add	 ecx, 24			; 00000018H
  0012f	e8 00 00 00 00	 call	 ?RemoveAll@CDistributeManager@@QAEXXZ ; CDistributeManager::RemoveAll

; 67   : }

  00134	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0013b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0013e	83 c1 18	 add	 ecx, 24			; 00000018H
  00141	e8 00 00 00 00	 call	 ??1CDistributeManager@@UAE@XZ ; CDistributeManager::~CDistributeManager
  00146	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00149	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00150	59		 pop	 ecx
  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLockTimeMatch@@UAE@XZ$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	e9 00 00 00 00	 jmp	 ??1CDistributeManager@@UAE@XZ ; CDistributeManager::~CDistributeManager
__ehhandler$??1CLockTimeMatch@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CLockTimeMatch@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CLockTimeMatch@@UAE@XZ ENDP				; CLockTimeMatch::~CLockTimeMatch
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ??0CLockTimeMatch@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLockTimeMatch@@QAE@XZ PROC				; CLockTimeMatch::CLockTimeMatch, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IGameMatchItem@@QAE@XZ
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 04	 add	 ecx, 4
  0001a	e8 00 00 00 00	 call	 ??0IMatchEventSink@@QAE@XZ
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 08	 add	 ecx, 8
  00025	e8 00 00 00 00	 call	 ??0IServerUserItemSink@@QAE@XZ
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CLockTimeMatch@@6BIGameMatchItem@@@
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CLockTimeMatch@@6BIMatchEventSink@@@
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET ??_7CLockTimeMatch@@6BIServerUserItemSink@@@
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 10	 add	 ecx, 16			; 00000010H
  0004d	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@XZ	; ATL::CTime::CTime
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 18	 add	 ecx, 24			; 00000018H
  00058	e8 00 00 00 00	 call	 ??0CDistributeManager@@QAE@XZ ; CDistributeManager::CDistributeManager

; 33   : 	//状态变量
; 34   : 	m_MatchStatus=MatchStatus_Free;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 35   : 
; 36   : 	//比赛配置
; 37   : 	m_pMatchOption=NULL;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 38   : 	m_pLockTimeMatch=NULL;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [eax+120], 0

; 39   : 	m_pGameServiceOption=NULL;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0

; 40   : 	m_pGameServiceAttrib=NULL;

  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0

; 41   : 
; 42   : 	//内核接口
; 43   : 	m_ppITableFrame=NULL;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00092	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+132], 0

; 44   : 	m_pITimerEngine=NULL;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], 0

; 45   : 	m_pIDataBaseEngine=NULL;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+140], 0

; 46   : 	m_pITCPNetworkEngineEvent=NULL;

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0

; 47   : 
; 48   : 	//服务接口
; 49   : 	m_pIGameServiceFrame=NULL;

  000c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0

; 50   : 	m_pIServerUserManager=NULL;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], 0

; 51   : 	m_pAndroidUserManager=NULL;

  000dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], 0

; 52   : }

  000ea	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
??0CLockTimeMatch@@QAE@XZ ENDP				; CLockTimeMatch::CLockTimeMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.h
;	COMDAT ?SetDistributeRule@CDistributeManager@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cbDistributeRule$ = 8					; size = 1
?SetDistributeRule@CDistributeManager@@QAEXE@Z PROC	; CDistributeManager::SetDistributeRule, COMDAT
; _this$ = ecx

; 120  : 	inline VOID  SetDistributeRule(BYTE cbDistributeRule) { m_cbDistributeRule=cbDistributeRule; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _cbDistributeRule$[ebp]
  00012	88 48 58	 mov	 BYTE PTR [eax+88], cl
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetDistributeRule@CDistributeManager@@QAEXE@Z ENDP	; CDistributeManager::SetDistributeRule
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\distributemanager.h
;	COMDAT ?GetCount@CDistributeManager@@QAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@CDistributeManager@@QAEGXZ PROC		; CDistributeManager::GetCount, COMDAT
; _this$ = ecx

; 114  : 	inline WORD  GetCount() { return m_wNodeCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 40 04	 mov	 ax, WORD PTR [eax+4]
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetCount@CDistributeManager@@QAEGXZ ENDP		; CDistributeManager::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IMatchEventSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IMatchEventSink@@QAE@XZ PROC				; IMatchEventSink::IMatchEventSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IMatchEventSink@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IMatchEventSink@@QAE@XZ ENDP				; IMatchEventSink::IMatchEventSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IGameMatchItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IGameMatchItem@@QAE@XZ PROC				; IGameMatchItem::IGameMatchItem, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IGameMatchItem@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IGameMatchItem@@QAE@XZ ENDP				; IGameMatchItem::IGameMatchItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IServerUserItemSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServerUserItemSink@@QAE@XZ PROC			; IServerUserItemSink::IServerUserItemSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IServerUserItemSink@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IServerUserItemSink@@QAE@XZ ENDP			; IServerUserItemSink::IServerUserItemSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\serverrule.h
;	COMDAT ?IsSuportPlayBack@CServerRule@@SA_NK@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_dwServerRule$ = 8					; size = 4
?IsSuportPlayBack@CServerRule@@SA_NK@Z PROC		; CServerRule::IsSuportPlayBack, COMDAT

; 181  : 	static bool IsSuportPlayBack(DWORD dwServerRule) { return (dwServerRule&SR_SUPORT_PLAY_BACK)!=0; }	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _dwServerRule$[ebp]
  0000c	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00011	74 09		 je	 SHORT $LN3@IsSuportPl
  00013	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001a	eb 07		 jmp	 SHORT $LN4@IsSuportPl
$LN3@IsSuportPl:
  0001c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@IsSuportPl:
  00023	8a 45 bc	 mov	 al, BYTE PTR tv66[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?IsSuportPlayBack@CServerRule@@SA_NK@Z ENDP		; CServerRule::IsSuportPlayBack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\serverrule.h
;	COMDAT ?IsImmediateWriteScore@CServerRule@@SA_NK@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_dwServerRule$ = 8					; size = 4
?IsImmediateWriteScore@CServerRule@@SA_NK@Z PROC	; CServerRule::IsImmediateWriteScore, COMDAT

; 79   : 	static bool IsImmediateWriteScore(DWORD dwServerRule) { return (dwServerRule&SR_IMMEDIATE_WRITE_SCORE)!=0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _dwServerRule$[ebp]
  0000c	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00011	74 09		 je	 SHORT $LN3@IsImmediat
  00013	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001a	eb 07		 jmp	 SHORT $LN4@IsImmediat
$LN3@IsImmediat:
  0001c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@IsImmediat:
  00023	8a 45 bc	 mov	 al, BYTE PTR tv66[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?IsImmediateWriteScore@CServerRule@@SA_NK@Z ENDP	; CServerRule::IsImmediateWriteScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00012	83 c4 04	 add	 esp, 4
  00015	0f b6 f0	 movzx	 esi, al
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00021	83 c4 04	 add	 esp, 4
  00024	0f b6 d0	 movzx	 edx, al
  00027	3b f2		 cmp	 esi, edx
  00029	7e 04		 jle	 SHORT $LN2@InterfaceV
  0002b	32 c0		 xor	 al, al
  0002d	eb 74		 jmp	 SHORT $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00038	83 c4 04	 add	 esp, 4
  0003b	0f b6 f0	 movzx	 esi, al
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00047	83 c4 04	 add	 esp, 4
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	3b f2		 cmp	 esi, edx
  0004f	74 04		 je	 SHORT $LN3@InterfaceV
  00051	32 c0		 xor	 al, al
  00053	eb 4e		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00055	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0005e	83 c4 04	 add	 esp, 4
  00061	0f b6 f0	 movzx	 esi, al
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0006d	83 c4 04	 add	 esp, 4
  00070	0f b6 d0	 movzx	 edx, al
  00073	3b f2		 cmp	 esi, edx
  00075	74 04		 je	 SHORT $LN4@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 28		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00084	83 c4 04	 add	 esp, 4
  00087	0f b6 f0	 movzx	 esi, al
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00093	83 c4 04	 add	 esp, 4
  00096	0f b6 d0	 movzx	 edx, al
  00099	3b f2		 cmp	 esi, edx
  0009b	74 04		 je	 SHORT $LN5@InterfaceV
  0009d	32 c0		 xor	 al, al
  0009f	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000a1	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	d1 e0		 shl	 eax, 1
  00010	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetSecond@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetSecond@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetSecond, COMDAT
; _this$ = ecx

; 702  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 703  : 	struct tm ttm;
; 704  : 	struct tm * ptm;
; 705  : 
; 706  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 707  : 	return ptm ? ptm->tm_sec : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0a		 je	 SHORT $LN3@GetSecond
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00033	eb 07		 jmp	 SHORT $LN4@GetSecond
$LN3@GetSecond:
  00035	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetSecond:
  0003c	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 708  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00045	33 cd		 xor	 ecx, ebp
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?GetSecond@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetSecond
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 698  : 	return ptm ? ptm->tm_min : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetMinute
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetMinute
$LN3@GetMinute:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetMinute:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 699  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 689  : 	return ptm ? ptm->tm_hour : -1 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetHour
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetHour
$LN3@GetHour:
  00036	c7 45 8c ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetHour:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 690  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv69 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 680  : 	return ptm ? ptm->tm_mday : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0b		 je	 SHORT $LN3@GetDay
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00031	89 4d 8c	 mov	 DWORD PTR tv69[ebp], ecx
  00034	eb 07		 jmp	 SHORT $LN4@GetDay
$LN3@GetDay:
  00036	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@GetDay:
  0003d	8b 45 8c	 mov	 eax, DWORD PTR tv69[ebp]

; 681  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 0e		 je	 SHORT $LN3@GetMonth
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  00037	eb 07		 jmp	 SHORT $LN4@GetMonth
$LN3@GetMonth:
  00039	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetMonth:
  00040	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 672  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
tv70 = -116						; size = 4
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	74 11		 je	 SHORT $LN3@GetYear
  0002b	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  0002e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00031	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  00037	89 4d 8c	 mov	 DWORD PTR tv70[ebp], ecx
  0003a	eb 07		 jmp	 SHORT $LN4@GetYear
$LN3@GetYear:
  0003c	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetYear:
  00043	8b 45 8c	 mov	 eax, DWORD PTR tv70[ebp]

; 663  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	33 cd		 xor	 ecx, ebp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z
_TEXT	SEGMENT
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_timeDest$ = 8						; size = 4
?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z PROC ; ATL::CTime::GetAsSystemTime, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 634  : 	if(!ptm)

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	75 04		 jne	 SHORT $LN2@GetAsSyste

; 635  : 	{
; 636  : 		return false;

  0002b	32 c0		 xor	 al, al
  0002d	eb 72		 jmp	 SHORT $LN1@GetAsSyste
$LN2@GetAsSyste:

; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);

  0002f	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  00032	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00035	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  0003b	8b 55 08	 mov	 edx, DWORD PTR _timeDest$[ebp]
  0003e	66 89 0a	 mov	 WORD PTR [edx], cx

; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);

  00041	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  00044	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00047	83 c1 01	 add	 ecx, 1
  0004a	8b 55 08	 mov	 edx, DWORD PTR _timeDest$[ebp]
  0004d	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;

  00051	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  00054	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00057	66 8b 51 18	 mov	 dx, WORD PTR [ecx+24]
  0005b	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  00062	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00065	66 8b 51 0c	 mov	 dx, WORD PTR [ecx+12]
  00069	66 89 50 06	 mov	 WORD PTR [eax+6], dx

; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  00070	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00073	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  00077	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  0007e	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00081	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00085	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;

  00089	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  0008c	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0008f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00092	66 89 50 0c	 mov	 WORD PTR [eax+12], dx

; 646  : 	timeDest.wMilliseconds = 0;

  00096	33 c0		 xor	 eax, eax
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _timeDest$[ebp]
  0009b	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax

; 647  : 
; 648  : 	return true;

  0009f	b0 01		 mov	 al, 1
$LN1@GetAsSyste:

; 649  : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ENDP ; ATL::CTime::GetAsSystemTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
tv65 = -120						; size = 4
_err$1 = -52						; size = 4
_ptmTemp$2 = -48					; size = 36
___atl_condVal$3 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@GetLocalTm:

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00016	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0001a	74 09		 je	 SHORT $LN12@GetLocalTm
  0001c	c7 45 88 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00023	eb 07		 jmp	 SHORT $LN13@GetLocalTm
$LN12@GetLocalTm:
  00025	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN13@GetLocalTm:
  0002c	8b 45 88	 mov	 eax, DWORD PTR tv65[ebp]
  0002f	89 45 f4	 mov	 DWORD PTR ___atl_condVal$3[ebp], eax
$LN7@GetLocalTm:
  00032	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  00036	75 2b		 jne	 SHORT $LN5@GetLocalTm
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00042	6a 00		 push	 0
  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA
  00049	83 c0 02	 add	 eax, 2
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00052	6a 02		 push	 2
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 01		 jne	 SHORT $LN5@GetLocalTm
  00062	cc		 int	 3
$LN5@GetLocalTm:
  00063	33 c0		 xor	 eax, eax
  00065	75 cb		 jne	 SHORT $LN7@GetLocalTm
  00067	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  0006b	75 0a		 jne	 SHORT $LN2@GetLocalTm
  0006d	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00072	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@GetLocalTm:
  00077	33 c0		 xor	 eax, eax
  00079	75 9b		 jne	 SHORT $LN4@GetLocalTm

; 610  : 
; 611  : 	if (ptm != NULL)

  0007b	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0007f	74 30		 je	 SHORT $LN9@GetLocalTm

; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00081	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00084	50		 push	 eax
  00085	8d 4d d0	 lea	 ecx, DWORD PTR _ptmTemp$2[ebp]
  00088	51		 push	 ecx
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  0008f	83 c4 08	 add	 esp, 8
  00092	89 45 cc	 mov	 DWORD PTR _err$1[ebp], eax

; 615  : 
; 616  : 		if (err != 0)

  00095	83 7d cc 00	 cmp	 DWORD PTR _err$1[ebp], 0
  00099	74 04		 je	 SHORT $LN10@GetLocalTm

; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!

  0009b	33 c0		 xor	 eax, eax
  0009d	eb 14		 jmp	 SHORT $LN11@GetLocalTm
$LN10@GetLocalTm:

; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;

  0009f	b9 09 00 00 00	 mov	 ecx, 9
  000a4	8d 75 d0	 lea	 esi, DWORD PTR _ptmTemp$2[ebp]
  000a7	8b 7d 08	 mov	 edi, DWORD PTR _ptm$[ebp]
  000aa	f3 a5		 rep movsd

; 622  : 		return ptm;

  000ac	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  000af	eb 02		 jmp	 SHORT $LN11@GetLocalTm
$LN9@GetLocalTm:

; 623  : 	}
; 624  : 
; 625  : 	return NULL;

  000b1	33 c0		 xor	 eax, eax
$LN11@GetLocalTm:

; 626  : }

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	33 cd		 xor	 ecx, ebp
  000bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 04 00	 ret	 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??PCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
tv66 = -76						; size = 4
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??PCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator>=, COMDAT
; _this$ = ecx

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 583  : 	return( m_time >= time.m_time );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv69[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv69[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	3b 55 0c	 cmp	 edx, DWORD PTR _time$[ebp+4]
  0001b	7c 15		 jl	 SHORT $LN3@operator
  0001d	7f 0a		 jg	 SHORT $LN5@operator
  0001f	8b 45 b8	 mov	 eax, DWORD PTR tv69[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00027	72 09		 jb	 SHORT $LN3@operator
$LN5@operator:
  00029	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00030	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00032	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@operator:
  00039	8a 45 b4	 mov	 al, BYTE PTR tv66[ebp]

; 584  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??PCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator>=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??MCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
tv66 = -76						; size = 4
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??MCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator<, COMDAT
; _this$ = ecx

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 568  : 	return( m_time < time.m_time );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv69[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv69[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	3b 55 0c	 cmp	 edx, DWORD PTR _time$[ebp+4]
  0001b	7f 15		 jg	 SHORT $LN3@operator
  0001d	7c 0a		 jl	 SHORT $LN5@operator
  0001f	8b 45 b8	 mov	 eax, DWORD PTR tv69[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	3b 4d 08	 cmp	 ecx, DWORD PTR _time$[ebp]
  00027	73 09		 jae	 SHORT $LN3@operator
$LN5@operator:
  00029	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00030	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00032	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@operator:
  00039	8a 45 b4	 mov	 al, BYTE PTR tv66[ebp]

; 569  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
??MCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_time$ = 12						; size = 8
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z PROC		; ATL::CTime::operator-, COMDAT
; _this$ = ecx

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 543  : 	return( CTimeSpan( m_time-time.m_time ) );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	2b 4d 0c	 sub	 ecx, DWORD PTR _time$[ebp]
  00014	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00017	1b 55 10	 sbb	 edx, DWORD PTR _time$[ebp+4]
  0001a	52		 push	 edx
  0001b	51		 push	 ecx
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0CTimeSpan@ATL@@QAE@_J@Z ; ATL::CTimeSpan::CTimeSpan
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 544  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ENDP		; ATL::CTime::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z
_TEXT	SEGMENT
_timeT$1 = -28						; size = 8
_timeT$2 = -20						; size = 8
_time0$3 = -12						; size = 8
_this$ = -4						; size = 4
_sysTime$ = 8						; size = 4
_nDST$ = 12						; size = 4
??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z PROC		; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 486  : 	if (sysTime.wYear < 1900)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _sysTime$[ebp]
  0000f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00012	81 f9 6c 07 00
	00		 cmp	 ecx, 1900		; 0000076cH
  00018	7d 28		 jge	 SHORT $LN2@CTime

; 487  : 	{
; 488  : 		__time64_t time0 = 0L;

  0001a	0f 57 c0	 xorps	 xmm0, xmm0
  0001d	66 0f 13 45 f4	 movlpd	 QWORD PTR _time0$3[ebp], xmm0

; 489  : 		CTime timeT(time0);

  00022	8b 45 f8	 mov	 eax, DWORD PTR _time0$3[ebp+4]
  00025	50		 push	 eax
  00026	8b 4d f4	 mov	 ecx, DWORD PTR _time0$3[ebp]
  00029	51		 push	 ecx
  0002a	8d 4d ec	 lea	 ecx, DWORD PTR _timeT$2[ebp]
  0002d	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime

; 490  : 		*this = timeT;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d ec	 mov	 ecx, DWORD PTR _timeT$2[ebp]
  00038	89 08		 mov	 DWORD PTR [eax], ecx
  0003a	8b 55 f0	 mov	 edx, DWORD PTR _timeT$2[ebp+4]
  0003d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 491  : 	}
; 492  : 	else

  00040	eb 49		 jmp	 SHORT $LN1@CTime
$LN2@CTime:

; 493  : 	{
; 494  : 		CTime timeT(

  00042	8b 45 0c	 mov	 eax, DWORD PTR _nDST$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _sysTime$[ebp]
  00049	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0004d	52		 push	 edx
  0004e	8b 45 08	 mov	 eax, DWORD PTR _sysTime$[ebp]
  00051	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  00055	51		 push	 ecx
  00056	8b 55 08	 mov	 edx, DWORD PTR _sysTime$[ebp]
  00059	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _sysTime$[ebp]
  00061	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  00065	52		 push	 edx
  00066	8b 45 08	 mov	 eax, DWORD PTR _sysTime$[ebp]
  00069	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0006d	51		 push	 ecx
  0006e	8b 55 08	 mov	 edx, DWORD PTR _sysTime$[ebp]
  00071	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00074	50		 push	 eax
  00075	8d 4d e4	 lea	 ecx, DWORD PTR _timeT$1[ebp]
  00078	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 4d e4	 mov	 ecx, DWORD PTR _timeT$1[ebp]
  00083	89 08		 mov	 DWORD PTR [eax], ecx
  00085	8b 55 e8	 mov	 edx, DWORD PTR _timeT$1[ebp+4]
  00088	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN1@CTime:

; 499  : 	}
; 500  : }

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z ENDP		; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
tv287 = -136						; size = 4
tv276 = -136						; size = 4
tv187 = -136						; size = 4
tv169 = -136						; size = 4
tv151 = -136						; size = 4
tv133 = -136						; size = 4
tv83 = -136						; size = 4
tv65 = -136						; size = 4
_atm$ = -68						; size = 36
___atl_condVal$1 = -32					; size = 4
___atl_condVal$2 = -28					; size = 4
___atl_condVal$3 = -24					; size = 4
___atl_condVal$4 = -20					; size = 4
___atl_condVal$5 = -16					; size = 4
___atl_condVal$6 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@CTime:

; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1970 );

  00019	81 7d 08 b2 07
	00 00		 cmp	 DWORD PTR _nYear$[ebp], 1970 ; 000007b2H
  00020	7c 0c		 jl	 SHORT $LN49@CTime
  00022	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0002c	eb 0a		 jmp	 SHORT $LN50@CTime
$LN49@CTime:
  0002e	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN50@CTime:
  00038	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  0003e	89 45 f4	 mov	 DWORD PTR ___atl_condVal$6[ebp], eax
$LN7@CTime:
  00041	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$6[ebp], 0
  00045	75 2b		 jne	 SHORT $LN5@CTime
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00051	6a 00		 push	 0
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
  00058	83 c0 04	 add	 eax, 4
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00061	6a 02		 push	 2
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00069	83 c4 18	 add	 esp, 24			; 00000018H
  0006c	83 f8 01	 cmp	 eax, 1
  0006f	75 01		 jne	 SHORT $LN5@CTime
  00071	cc		 int	 3
$LN5@CTime:
  00072	33 c0		 xor	 eax, eax
  00074	75 cb		 jne	 SHORT $LN7@CTime
  00076	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$6[ebp], 0
  0007a	75 0a		 jne	 SHORT $LN2@CTime
  0007c	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00081	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@CTime:
  00086	33 c0		 xor	 eax, eax
  00088	75 8f		 jne	 SHORT $LN4@CTime
$LN10@CTime:

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  0008a	83 7d 0c 01	 cmp	 DWORD PTR _nMonth$[ebp], 1
  0008e	7c 12		 jl	 SHORT $LN52@CTime
  00090	83 7d 0c 0c	 cmp	 DWORD PTR _nMonth$[ebp], 12 ; 0000000cH
  00094	7f 0c		 jg	 SHORT $LN52@CTime
  00096	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv83[ebp], 1
  000a0	eb 0a		 jmp	 SHORT $LN53@CTime
$LN52@CTime:
  000a2	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN53@CTime:
  000ac	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000b2	89 45 f0	 mov	 DWORD PTR ___atl_condVal$5[ebp], eax
$LN13@CTime:
  000b5	83 7d f0 00	 cmp	 DWORD PTR ___atl_condVal$5[ebp], 0
  000b9	75 2b		 jne	 SHORT $LN11@CTime
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  000c5	6a 00		 push	 0
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
  000cc	83 c0 05	 add	 eax, 5
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000d5	6a 02		 push	 2
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000dd	83 c4 18	 add	 esp, 24			; 00000018H
  000e0	83 f8 01	 cmp	 eax, 1
  000e3	75 01		 jne	 SHORT $LN11@CTime
  000e5	cc		 int	 3
$LN11@CTime:
  000e6	33 c0		 xor	 eax, eax
  000e8	75 cb		 jne	 SHORT $LN13@CTime
  000ea	83 7d f0 00	 cmp	 DWORD PTR ___atl_condVal$5[ebp], 0
  000ee	75 0a		 jne	 SHORT $LN8@CTime
  000f0	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000f5	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@CTime:
  000fa	33 c0		 xor	 eax, eax
  000fc	75 8c		 jne	 SHORT $LN10@CTime
$LN16@CTime:

; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  000fe	83 7d 10 01	 cmp	 DWORD PTR _nDay$[ebp], 1
  00102	7c 12		 jl	 SHORT $LN55@CTime
  00104	83 7d 10 1f	 cmp	 DWORD PTR _nDay$[ebp], 31 ; 0000001fH
  00108	7f 0c		 jg	 SHORT $LN55@CTime
  0010a	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv133[ebp], 1
  00114	eb 0a		 jmp	 SHORT $LN56@CTime
$LN55@CTime:
  00116	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN56@CTime:
  00120	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv133[ebp]
  00126	89 45 ec	 mov	 DWORD PTR ___atl_condVal$4[ebp], eax
$LN19@CTime:
  00129	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  0012d	75 2b		 jne	 SHORT $LN17@CTime
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00139	6a 00		 push	 0
  0013b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
  00140	83 c0 06	 add	 eax, 6
  00143	50		 push	 eax
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00149	6a 02		 push	 2
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00151	83 c4 18	 add	 esp, 24			; 00000018H
  00154	83 f8 01	 cmp	 eax, 1
  00157	75 01		 jne	 SHORT $LN17@CTime
  00159	cc		 int	 3
$LN17@CTime:
  0015a	33 c0		 xor	 eax, eax
  0015c	75 cb		 jne	 SHORT $LN19@CTime
  0015e	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$4[ebp], 0
  00162	75 0a		 jne	 SHORT $LN14@CTime
  00164	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00169	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN14@CTime:
  0016e	33 c0		 xor	 eax, eax
  00170	75 8c		 jne	 SHORT $LN16@CTime
$LN22@CTime:

; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  00172	83 7d 14 00	 cmp	 DWORD PTR _nHour$[ebp], 0
  00176	7c 12		 jl	 SHORT $LN58@CTime
  00178	83 7d 14 17	 cmp	 DWORD PTR _nHour$[ebp], 23 ; 00000017H
  0017c	7f 0c		 jg	 SHORT $LN58@CTime
  0017e	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv151[ebp], 1
  00188	eb 0a		 jmp	 SHORT $LN59@CTime
$LN58@CTime:
  0018a	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv151[ebp], 0
$LN59@CTime:
  00194	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv151[ebp]
  0019a	89 45 e8	 mov	 DWORD PTR ___atl_condVal$3[ebp], eax
$LN25@CTime:
  0019d	83 7d e8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  001a1	75 2b		 jne	 SHORT $LN23@CTime
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001ad	6a 00		 push	 0
  001af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
  001b4	83 c0 07	 add	 eax, 7
  001b7	50		 push	 eax
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  001bd	6a 02		 push	 2
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  001c5	83 c4 18	 add	 esp, 24			; 00000018H
  001c8	83 f8 01	 cmp	 eax, 1
  001cb	75 01		 jne	 SHORT $LN23@CTime
  001cd	cc		 int	 3
$LN23@CTime:
  001ce	33 c0		 xor	 eax, eax
  001d0	75 cb		 jne	 SHORT $LN25@CTime
  001d2	83 7d e8 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  001d6	75 0a		 jne	 SHORT $LN20@CTime
  001d8	68 05 40 00 80	 push	 -2147467259		; 80004005H
  001dd	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN20@CTime:
  001e2	33 c0		 xor	 eax, eax
  001e4	75 8c		 jne	 SHORT $LN22@CTime
$LN28@CTime:

; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  001e6	83 7d 18 00	 cmp	 DWORD PTR _nMin$[ebp], 0
  001ea	7c 12		 jl	 SHORT $LN61@CTime
  001ec	83 7d 18 3b	 cmp	 DWORD PTR _nMin$[ebp], 59 ; 0000003bH
  001f0	7f 0c		 jg	 SHORT $LN61@CTime
  001f2	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv169[ebp], 1
  001fc	eb 0a		 jmp	 SHORT $LN62@CTime
$LN61@CTime:
  001fe	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv169[ebp], 0
$LN62@CTime:
  00208	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv169[ebp]
  0020e	89 45 e4	 mov	 DWORD PTR ___atl_condVal$2[ebp], eax
$LN31@CTime:
  00211	83 7d e4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  00215	75 2b		 jne	 SHORT $LN29@CTime
  00217	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00221	6a 00		 push	 0
  00223	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
  00228	83 c0 08	 add	 eax, 8
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00231	6a 02		 push	 2
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00239	83 c4 18	 add	 esp, 24			; 00000018H
  0023c	83 f8 01	 cmp	 eax, 1
  0023f	75 01		 jne	 SHORT $LN29@CTime
  00241	cc		 int	 3
$LN29@CTime:
  00242	33 c0		 xor	 eax, eax
  00244	75 cb		 jne	 SHORT $LN31@CTime
  00246	83 7d e4 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  0024a	75 0a		 jne	 SHORT $LN26@CTime
  0024c	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00251	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN26@CTime:
  00256	33 c0		 xor	 eax, eax
  00258	75 8c		 jne	 SHORT $LN28@CTime
$LN34@CTime:

; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  0025a	83 7d 1c 00	 cmp	 DWORD PTR _nSec$[ebp], 0
  0025e	7c 12		 jl	 SHORT $LN64@CTime
  00260	83 7d 1c 3b	 cmp	 DWORD PTR _nSec$[ebp], 59 ; 0000003bH
  00264	7f 0c		 jg	 SHORT $LN64@CTime
  00266	c7 85 78 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv187[ebp], 1
  00270	eb 0a		 jmp	 SHORT $LN65@CTime
$LN64@CTime:
  00272	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN65@CTime:
  0027c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv187[ebp]
  00282	89 45 e0	 mov	 DWORD PTR ___atl_condVal$1[ebp], eax
$LN37@CTime:
  00285	83 7d e0 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  00289	75 2b		 jne	 SHORT $LN35@CTime
  0028b	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00295	6a 00		 push	 0
  00297	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
  0029c	83 c0 09	 add	 eax, 9
  0029f	50		 push	 eax
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  002a5	6a 02		 push	 2
  002a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  002ad	83 c4 18	 add	 esp, 24			; 00000018H
  002b0	83 f8 01	 cmp	 eax, 1
  002b3	75 01		 jne	 SHORT $LN35@CTime
  002b5	cc		 int	 3
$LN35@CTime:
  002b6	33 c0		 xor	 eax, eax
  002b8	75 cb		 jne	 SHORT $LN37@CTime
  002ba	83 7d e0 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  002be	75 0a		 jne	 SHORT $LN32@CTime
  002c0	68 05 40 00 80	 push	 -2147467259		; 80004005H
  002c5	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN32@CTime:
  002ca	33 c0		 xor	 eax, eax
  002cc	75 8c		 jne	 SHORT $LN34@CTime

; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;

  002ce	8b 45 1c	 mov	 eax, DWORD PTR _nSec$[ebp]
  002d1	89 45 bc	 mov	 DWORD PTR _atm$[ebp], eax

; 445  : 	atm.tm_min = nMin;

  002d4	8b 45 18	 mov	 eax, DWORD PTR _nMin$[ebp]
  002d7	89 45 c0	 mov	 DWORD PTR _atm$[ebp+4], eax

; 446  : 	atm.tm_hour = nHour;

  002da	8b 45 14	 mov	 eax, DWORD PTR _nHour$[ebp]
  002dd	89 45 c4	 mov	 DWORD PTR _atm$[ebp+8], eax

; 447  : 	atm.tm_mday = nDay;

  002e0	8b 45 10	 mov	 eax, DWORD PTR _nDay$[ebp]
  002e3	89 45 c8	 mov	 DWORD PTR _atm$[ebp+12], eax

; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  002e6	8b 45 0c	 mov	 eax, DWORD PTR _nMonth$[ebp]
  002e9	83 e8 01	 sub	 eax, 1
  002ec	89 45 cc	 mov	 DWORD PTR _atm$[ebp+16], eax

; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  002ef	8b 45 08	 mov	 eax, DWORD PTR _nYear$[ebp]
  002f2	2d 6c 07 00 00	 sub	 eax, 1900		; 0000076cH
  002f7	89 45 d0	 mov	 DWORD PTR _atm$[ebp+20], eax

; 450  : 	atm.tm_isdst = nDST;

  002fa	8b 45 20	 mov	 eax, DWORD PTR _nDST$[ebp]
  002fd	89 45 dc	 mov	 DWORD PTR _atm$[ebp+32], eax

; 451  : 
; 452  : 	m_time = _mktime64(&atm);

  00300	8d 45 bc	 lea	 eax, DWORD PTR _atm$[ebp]
  00303	50		 push	 eax
  00304	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mktime64
  0030a	83 c4 04	 add	 esp, 4
  0030d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00310	89 01		 mov	 DWORD PTR [ecx], eax
  00312	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN40@CTime:

; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time

  00315	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00318	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  0031e	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv276[ebp]
  00324	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv276[ebp]
  0032a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0032c	23 42 04	 and	 eax, DWORD PTR [edx+4]
  0032f	83 f8 ff	 cmp	 eax, -1
  00332	75 2c		 jne	 SHORT $LN38@CTime
  00334	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHHHCKNA@?$AAm?$AA_?$AAt?$AAi?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1@
  00339	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0033e	6a 00		 push	 0
  00340	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???0CTime@ATL@@QAE@HHHHHHH@Z@4JA
  00346	83 c1 18	 add	 ecx, 24			; 00000018H
  00349	51		 push	 ecx
  0034a	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0034f	6a 02		 push	 2
  00351	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00357	83 c4 18	 add	 esp, 24			; 00000018H
  0035a	83 f8 01	 cmp	 eax, 1
  0035d	75 01		 jne	 SHORT $LN38@CTime
  0035f	cc		 int	 3
$LN38@CTime:
  00360	33 c0		 xor	 eax, eax
  00362	75 b1		 jne	 SHORT $LN40@CTime

; 454  : 	if(m_time == -1)

  00364	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00367	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  0036d	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  00373	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR tv287[ebp]
  00379	8b 01		 mov	 eax, DWORD PTR [ecx]
  0037b	23 42 04	 and	 eax, DWORD PTR [edx+4]
  0037e	83 f8 ff	 cmp	 eax, -1
  00381	75 0a		 jne	 SHORT $LN1@CTime

; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);

  00383	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00388	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN1@CTime:

; 457  : 	}
; 458  : }

  0038d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN48@CTime:
  00390	5f		 pop	 edi
  00391	5e		 pop	 esi
  00392	5b		 pop	 ebx
  00393	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00396	33 cd		 xor	 ecx, ebp
  00398	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039d	8b e5		 mov	 esp, ebp
  0039f	5d		 pop	 ebp
  003a0	c2 1c 00	 ret	 28			; 0000001cH
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 417  : 	m_time( time )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 419  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 412  : 	m_time(0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 414  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00009	6a 00		 push	 0
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00011	83 c4 04	 add	 esp, 4
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 375  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTotalSeconds, COMDAT
; _this$ = ecx

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 303  : 	return( m_timeSpan );

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 304  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetTotalSeconds@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTotalSeconds
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetDays@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDays@CTimeSpan@ATL@@QBE_JXZ PROC			; ATL::CTimeSpan::GetDays, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 278  : 	return( m_timeSpan/(24*3600) );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	6a 00		 push	 0
  00011	68 80 51 01 00	 push	 86400			; 00015180H
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __alldiv

; 279  : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?GetDays@CTimeSpan@ATL@@QBE_JXZ ENDP			; ATL::CTimeSpan::GetDays
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??0CTimeSpan@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTimeSpan@ATL@@QAE@_J@Z PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 263  : 	m_timeSpan( time )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 265  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0CTimeSpan@ATL@@QAE@_J@Z ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
_TEXT	SEGMENT
_ptr$ = -20						; size = 4
_ple$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 421  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 422  : 		CPreserveLastError ple;

  00028	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::CPreserveLastError
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 423  : 		va_list ptr; va_start(ptr, pszFmt);

  00037	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0003a	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax

; 424  : 		ATL::CTrace::TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  0003d	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 14	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 10	 mov	 edx, DWORD PTR _nLevel$[ebp]
  00048	52		 push	 edx
  00049	8b 45 0c	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ; ATL::CTrace::TraceV
  0005f	83 c4 18	 add	 esp, 24			; 00000018H

; 425  : 		va_end(ptr);

  00062	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 426  : 	}

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00073	e8 00 00 00 00	 call	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
__ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 411  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 		: m_pszFileName(pszFileName), m_nLineNo(nLineNo)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _nLineNo$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 412  : 	}

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??1CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::~CPreserveLastError, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 		SetLastError(m_dwLastError);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 398  : 	}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??1CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::~CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::CPreserveLastError, COMDAT
; _this$ = ecx

; 390  : 	CPreserveLastError()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	{
; 392  : 		m_dwLastError = GetLastError();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 01		 push	 1
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 02		 push	 2
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 330  : 		if (pszCategory == nullptr)

  00016	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0001c	e9 a9 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00021	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00028	72 2d		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0002a	33 c0		 xor	 eax, eax
  0002c	75 27		 jne	 SHORT $LN5@RegisterCa
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 51 01 00 00	 push	 337			; 00000151H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 01		 jne	 SHORT $LN5@RegisterCa
  00054	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  00055	eb 73		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00057	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  00064	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	6a 00		 push	 0
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  00080	8b 45 08	 mov	 eax, DWORD PTR _pszCategory$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  00089	6a 7f		 push	 127			; 0000007fH
  0008b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _swprintf_s
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 7f		 push	 127			; 0000007fH
  000a3	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000ad	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000b3	51		 push	 ecx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000c2	83 c0 01	 add	 eax, 1
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
_TEXT	SEGMENT
_wszBuf$ = -24						; size = 4
_szBuf$ = -20						; size = 4
_cchNeeded$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pszFmt$ = 24						; size = 4
_args$ = 28						; size = 4
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 239  : 		int cchNeeded = _vscprintf(pszFmt, args);

  00028	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 __vscprintf
  00035	83 c4 08	 add	 esp, 8
  00038	89 45 f0	 mov	 DWORD PTR _cchNeeded$[ebp], eax

; 240  : 		if (cchNeeded < 0)

  0003b	83 7d f0 00	 cmp	 DWORD PTR _cchNeeded$[ebp], 0
  0003f	7d 05		 jge	 SHORT $LN2@TraceV

; 241  : 		{
; 242  : 			return;

  00041	e9 64 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 243  : 		}
; 244  : 
; 245  : 		CHeapPtr<char> szBuf;

  00046	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00049	e8 00 00 00 00	 call	 ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 246  : 		if (!szBuf.Allocate(cchNeeded + 1))

  00055	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	50		 push	 eax
  0005c	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0005f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	75 14		 jne	 SHORT $LN3@TraceV

; 247  : 		{
; 248  : 			return;

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00075	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0007a	e9 2b 01 00 00	 jmp	 $LN1@TraceV
$LN3@TraceV:

; 249  : 		}
; 250  : 
; 251  : 		szBuf[0] = '\0';

  0007f	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00082	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	6b d1 00	 imul	 edx, ecx, 0
  0008f	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 252  : 
; 253  : 		if (_vsnprintf_s(szBuf, cchNeeded + 1, cchNeeded, pszFmt, args) == -1)

  00093	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 f0	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	50		 push	 eax
  000a6	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000a9	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 __vsnprintf_s
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
  000b7	83 f8 ff	 cmp	 eax, -1
  000ba	75 14		 jne	 SHORT $LN4@TraceV

; 254  : 		{
; 255  : 			return;

  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000cb	e9 da 00 00 00	 jmp	 $LN1@TraceV
$LN4@TraceV:

; 256  : 		}
; 257  : 
; 258  : 		CHeapPtr<wchar_t> wszBuf;

  000d0	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000d3	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 259  : 		if (!wszBuf.Allocate(cchNeeded + 1))

  000dc	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000df	83 c0 01	 add	 eax, 1
  000e2	50		 push	 eax
  000e3	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000e6	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  000eb	0f b6 c8	 movzx	 ecx, al
  000ee	85 c9		 test	 ecx, ecx
  000f0	75 20		 jne	 SHORT $LN5@TraceV

; 260  : 		{
; 261  : 			return;

  000f2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f6	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000f9	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00105	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00108	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0010d	e9 98 00 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 262  : 		}
; 263  : 
; 264  : 		wszBuf[0] = '\0';

  00112	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00115	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  0011a	b9 02 00 00 00	 mov	 ecx, 2
  0011f	6b d1 00	 imul	 edx, ecx, 0
  00122	33 c9		 xor	 ecx, ecx
  00124	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 265  : 
; 266  : 		if (::MultiByteToWideChar(CP_ACP, 0, szBuf, -1, wszBuf, cchNeeded + 1) == 0)

  00128	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  0012b	83 c0 01	 add	 eax, 1
  0012e	50		 push	 eax
  0012f	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00132	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00137	50		 push	 eax
  00138	6a ff		 push	 -1
  0013a	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0013d	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00142	50		 push	 eax
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0014d	85 c0		 test	 eax, eax
  0014f	75 1d		 jne	 SHORT $LN6@TraceV

; 267  : 		{
; 268  : 			return;

  00151	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00155	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00158	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0015d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00164	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00167	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0016c	eb 3c		 jmp	 SHORT $LN1@TraceV
$LN6@TraceV:

; 269  : 		}
; 270  : 
; 271  : 		TraceV(pszFileName, nLine, dwCategory, nLevel, wszBuf);

  0016e	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00171	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00176	50		 push	 eax
  00177	8b 45 14	 mov	 eax, DWORD PTR _nLevel$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d 10	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  0017e	51		 push	 ecx
  0017f	8b 55 0c	 mov	 edx, DWORD PTR _nLine$[ebp]
  00182	52		 push	 edx
  00183	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ; ATL::CTrace::TraceV
  0018c	83 c4 14	 add	 esp, 20			; 00000014H

; 272  : 	}

  0018f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00193	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00196	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0019b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a2	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  001a5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b4	59		 pop	 ecx
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	5b		 pop	 ebx
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z
_TEXT	SEGMENT
_fileName$ = -2588					; size = 520
_wszBuf$ = -2068					; size = 4
_chCount$ = -2064					; size = 4
_pwszCategoryName$ = -2060				; size = 4
_categoryLength$ = -2056				; size = 4
_wszCategory$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszMessage$ = 24					; size = 4
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 150  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 0b 00
	00		 sub	 esp, 2972		; 00000b9cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 151  : 		if (CTrace::m_nLevel == CTrace::DisableTracing || CTrace::m_nLevel < nLevel || (CTrace::m_nCategory & dwCategory) == 0)

  00016	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_nLevel@CTrace@ATL@@1IA, -1 ; ATL::CTrace::m_nLevel
  0001d	74 14		 je	 SHORT $LN3@TraceV
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLevel@CTrace@ATL@@1IA ; ATL::CTrace::m_nLevel
  00024	3b 45 14	 cmp	 eax, DWORD PTR _nLevel$[ebp]
  00027	72 0a		 jb	 SHORT $LN3@TraceV
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nCategory
  0002e	23 45 10	 and	 eax, DWORD PTR _dwCategory$[ebp]
  00031	75 05		 jne	 SHORT $LN2@TraceV
$LN3@TraceV:

; 152  : 		{
; 153  : 			return;

  00033	e9 c2 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 154  : 		}
; 155  : 
; 156  : 		wchar_t wszCategory[TraceBufferSize] = {'\0'};

  00038	68 00 08 00 00	 push	 2048			; 00000800H
  0003d	6a 00		 push	 0
  0003f	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		int categoryLength = 0;

  0004e	c7 85 f8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _categoryLength$[ebp], 0

; 158  : 		const wchar_t *const pwszCategoryName = GetCategoryName(dwCategory);

  00058	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ; ATL::CTrace::GetCategoryName
  00061	83 c4 04	 add	 esp, 4
  00064	89 85 f4 f7 ff
	ff		 mov	 DWORD PTR _pwszCategoryName$[ebp], eax

; 159  : 		if (pwszCategoryName != nullptr)

  0006a	83 bd f4 f7 ff
	ff 00		 cmp	 DWORD PTR _pwszCategoryName$[ebp], 0
  00071	74 36		 je	 SHORT $LN4@TraceV

; 160  : 		{
; 161  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%ls - ", pwszCategoryName)) == -1)

  00073	8b 85 f4 f7 ff
	ff		 mov	 eax, DWORD PTR _pwszCategoryName$[ebp]
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
  0007f	68 00 04 00 00	 push	 1024			; 00000400H
  00084	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _swprintf_s
  00090	83 c4 10	 add	 esp, 16			; 00000010H
  00093	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  00099	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000a0	75 05		 jne	 SHORT $LN6@TraceV

; 162  : 			{
; 163  : 				return;

  000a2	e9 53 01 00 00	 jmp	 $LN1@TraceV
$LN6@TraceV:

; 164  : 			}
; 165  : 		}
; 166  : 		else

  000a7	eb 31		 jmp	 SHORT $LN5@TraceV
$LN4@TraceV:

; 167  : 		{
; 168  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%u - ", dwCategory)) == -1)

  000a9	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
  000b2	68 00 04 00 00	 push	 1024			; 00000400H
  000b7	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _swprintf_s
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000cc	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000d3	75 05		 jne	 SHORT $LN5@TraceV

; 169  : 			{
; 170  : 				return;

  000d5	e9 20 01 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 171  : 			}
; 172  : 		}
; 173  : 
; 174  : 		int chCount = (int)wcslen(pwszMessage) + categoryLength + 1;

  000da	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  000dd	50		 push	 eax
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  000e4	83 c4 04	 add	 esp, 4
  000e7	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _categoryLength$[ebp]
  000ed	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  000f1	89 95 f0 f7 ff
	ff		 mov	 DWORD PTR _chCount$[ebp], edx

; 175  : 		CHeapPtr<wchar_t> wszBuf;

  000f7	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000fd	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 176  : 		if (!wszBuf.Allocate(chCount))

  00102	8b 85 f0 f7 ff
	ff		 mov	 eax, DWORD PTR _chCount$[ebp]
  00108	50		 push	 eax
  00109	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0010f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00114	0f b6 c8	 movzx	 ecx, al
  00117	85 c9		 test	 ecx, ecx
  00119	75 10		 jne	 SHORT $LN8@TraceV

; 177  : 		{
; 178  : 			return;

  0011b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00121	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00126	e9 cf 00 00 00	 jmp	 $LN1@TraceV
$LN8@TraceV:

; 179  : 		}
; 180  : 
; 181  : 		wszBuf[0] = '\0';

  0012b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00131	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00136	b9 02 00 00 00	 mov	 ecx, 2
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	33 c9		 xor	 ecx, ecx
  00140	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 182  : 
; 183  : 		if (swprintf_s(wszBuf, chCount, L"%ls%ls", wszCategory, pwszMessage) == -1)

  00144	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  00147	50		 push	 eax
  00148	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0014e	51		 push	 ecx
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
  00154	8b 95 f0 f7 ff
	ff		 mov	 edx, DWORD PTR _chCount$[ebp]
  0015a	52		 push	 edx
  0015b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00161	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _swprintf_s
  0016c	83 c4 14	 add	 esp, 20			; 00000014H
  0016f	83 f8 ff	 cmp	 eax, -1
  00172	75 0d		 jne	 SHORT $LN9@TraceV

; 184  : 		{
; 185  : 			return;

  00174	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0017a	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0017f	eb 79		 jmp	 SHORT $LN1@TraceV
$LN9@TraceV:

; 186  : 		}
; 187  : 
; 188  : 		wchar_t fileName[_MAX_PATH] = {'\0'};	

  00181	68 08 02 00 00	 push	 520			; 00000208H
  00186	6a 00		 push	 0
  00188	8d 85 e4 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _memset
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : #if _MSC_VER < 1900
; 190  : 		if (swprintf_s(fileName, _MAX_PATH, L"%S", pszFileName) == -1)
; 191  : #else
; 192  : 		if (swprintf_s(fileName, _MAX_PATH, L"%hs", pszFileName) == -1)

  00197	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  001a0	68 04 01 00 00	 push	 260			; 00000104H
  001a5	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _swprintf_s
  001b1	83 c4 10	 add	 esp, 16			; 00000010H
  001b4	83 f8 ff	 cmp	 eax, -1
  001b7	75 0d		 jne	 SHORT $LN10@TraceV

; 193  : #endif
; 194  : 		{
; 195  : 			return;

  001b9	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001bf	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001c4	eb 34		 jmp	 SHORT $LN1@TraceV
$LN10@TraceV:

; 196  : 		}
; 197  : 
; 198  : 		_CrtDbgReportW(_CRT_WARN, fileName, nLine, nullptr, L"%ls", static_cast<const wchar_t*>(wszBuf));

  001c6	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001cc	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  001d1	50		 push	 eax
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001d7	6a 00		 push	 0
  001d9	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  001dc	50		 push	 eax
  001dd	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001e3	51		 push	 ecx
  001e4	6a 00		 push	 0
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  001ec	83 c4 18	 add	 esp, 24			; 00000018H

; 199  : 	}

  001ef	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001f5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001fa	5f		 pop	 edi
  001fb	5e		 pop	 esi
  001fc	5b		 pop	 ebx
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_nCategory$ = 8						; size = 4
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z PROC		; ATL::CTrace::GetCategoryName, COMDAT

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 133  : 		for(unsigned int i = 0; i < m_nLastCategory; i++) 

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@GetCategor
$LN2@GetCategor:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetCategor:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00024	73 22		 jae	 SHORT $LN3@GetCategor

; 134  : 		{
; 135  : 			if (m_nMap[i].nCategory == nCategory)

  00026	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0002d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax]
  00033	3b 4d 08	 cmp	 ecx, DWORD PTR _nCategory$[ebp]
  00036	75 0e		 jne	 SHORT $LN5@GetCategor

; 136  : 			{
; 137  : 				return m_nMap[i].categryName;

  00038	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0003f	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00044	eb 04		 jmp	 SHORT $LN1@GetCategor
$LN5@GetCategor:

; 138  : 			}
; 139  : 		}

  00046	eb ca		 jmp	 SHORT $LN2@GetCategor
$LN3@GetCategor:

; 140  : 
; 141  : 		return nullptr;

  00048	33 c0		 xor	 eax, eax
$LN1@GetCategor:

; 142  : 	}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ENDP		; ATL::CTrace::GetCategoryName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMFNIFA@atlTraceException@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000c	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 20 00 00	 push	 8192			; 00002000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 		free(p);

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00013	83 c4 04	 add	 esp, 4

; 268  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 261  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 262  : 		return malloc(nBytes);

  00009	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00013	83 c4 04	 add	 esp, 4

; 263  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_i64Result$ = -8					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  0000c	f7 65 10	 mul	 DWORD PTR _iRight$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _i64Result$[ebp], eax
  00012	89 55 fc	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 137  : 	if(i64Result>UINT_MAX)

  00015	83 7d fc 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00019	77 06		 ja	 SHORT $LN4@AtlMultipl
  0001b	83 7d f8 ff	 cmp	 DWORD PTR _i64Result$[ebp], -1
  0001f	76 0f		 jbe	 SHORT $LN2@AtlMultipl
$LN4@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  00021	68 16 02 00 00	 push	 534			; 00000216H
  00026	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  0002b	83 c4 04	 add	 esp, 4
  0002e	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _i64Result$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _piResult$[ebp]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 142  : 	return S_OK;

  00038	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 143  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T1 = -72						; size = 8
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00009	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
  00012	6a 00		 push	 0
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00019	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
  0001e	50		 push	 eax
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
  00025	83 c1 01	 add	 ecx, 1
  00028	51		 push	 ecx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002e	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  00031	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  0003c	83 c4 14	 add	 esp, 20			; 00000014H

; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  0003f	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00046	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00048	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  0004d	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  :             return _time64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00013	83 c4 04	 add	 esp, 4

; 537  :         }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __snprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__snprintf_s PROC					; COMDAT

; 2063 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2064 :         int _Result;
; 2065 :         va_list _ArgList;
; 2066 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 18	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2067 :         _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 __vsnprintf_s_l
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2068 :         __crt_va_end(_ArgList);

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2069 :         return _Result;

  00037	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2070 :     }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
__snprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1675 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 __vscprintf_l
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1658 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1659 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	83 c9 02	 or	 ecx, 2
  00023	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00026	52		 push	 edx
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0002e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00031	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;

  00034	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00038	7d 09		 jge	 SHORT $LN3@vscprintf_
  0003a	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00041	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00043	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00046	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  00049	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1664 :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1605 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __vsnprintf_s_l
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 1607 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1584 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1585 :         int const _Result = __stdio_common_vsnprintf_s(

  00009	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00033	83 c4 20	 add	 esp, 32			; 00000020H
  00036	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;

  00039	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003d	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003f	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00046	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00048	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004b	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004e	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1590 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1538 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1539 :             int _Result;
; 1540 :             va_list _ArgList;
; 1541 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1542 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vswprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1543 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1544 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1545 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = -68						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 28640: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	7f 08		 jg	 SHORT $LN3@HRESULT_FR
  0000f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00012	89 45 bc	 mov	 DWORD PTR tv68[ebp], eax
  00015	eb 18		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00020	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00026	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0002c	89 4d bc	 mov	 DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv68[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -68						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _IsEqualGUID
  00016	83 c4 08	 add	 esp, 8
  00019	85 c0		 test	 eax, eax
  0001b	74 09		 je	 SHORT $LN3@
  0001d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00024	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00026	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  0002d	8a 45 bc	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -68						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memcmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN3@IsEqualGUI
  0001f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  00028	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]

; 162  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\locktimematch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
