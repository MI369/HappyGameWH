; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\比赛服务\ImmediateMatch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
?IID_IServerUserItemSink@@3U_GUID@@B DD 09d0cfe02H	; IID_IServerUserItemSink
	DW	0fe9H
	DW	04a8bH
	DB	097H
	DB	095H
	DB	0acH
	DB	032H
	DB	067H
	DB	05aH
	DB	0f8H
	DB	0b1H
?IID_IMatchServiceManager@@3U_GUID@@B DD 07d381e8aH	; IID_IMatchServiceManager
	DW	08c10H
	DW	04443H
	DB	0b5H
	DB	0adH
	DB	075H
	DB	04bH
	DB	0e5H
	DB	050H
	DB	0c5H
	DB	053H
?IID_IGameMatchItem@@3U_GUID@@B DD 07d381e8aH		; IID_IGameMatchItem
	DW	08c10H
	DW	04443H
	DB	0b5H
	DB	0adH
	DB	075H
	DB	04bH
	DB	0e5H
	DB	050H
	DB	0c5H
	DB	053H
?IID_ITableFrameHook@@3U_GUID@@B DD 094a90d45H		; IID_ITableFrameHook
	DW	0570eH
	DW	041d6H
	DB	09fH
	DB	020H
	DB	01H
	DB	08dH
	DB	068H
	DB	016H
	DB	0d5H
	DB	0fH
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	__vscprintf_l
PUBLIC	__vscprintf
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
PUBLIC	?GetCategoryName@CTrace@ATL@@CAPA_WI@Z		; ATL::CTrace::GetCategoryName
PUBLIC	?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z		; ATL::CTrace::TraceV
PUBLIC	?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z		; ATL::CTrace::TraceV
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	??0CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::CPreserveLastError
PUBLIC	??1CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::~CPreserveLastError
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ; ATL::CTime::GetAsSystemTime
PUBLIC	??0IUnknownEx@@QAE@XZ				; IUnknownEx::IUnknownEx
PUBLIC	??0IUnknownEx@@QAE@ABU0@@Z			; IUnknownEx::IUnknownEx
PUBLIC	??4IUnknownEx@@QAEAAU0@ABU0@@Z			; IUnknownEx::operator=
PUBLIC	?GetProductVer@@YAEK@Z				; GetProductVer
PUBLIC	?GetMainVer@@YAEK@Z				; GetMainVer
PUBLIC	?GetSubVer@@YAEK@Z				; GetSubVer
PUBLIC	?GetBuildVer@@YAEK@Z				; GetBuildVer
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	?IsImmediateWriteScore@CServerRule@@SA_NK@Z	; CServerRule::IsImmediateWriteScore
PUBLIC	?IsSuportPlayBack@CServerRule@@SA_NK@Z		; CServerRule::IsSuportPlayBack
PUBLIC	??0IServerUserItemSink@@QAE@XZ			; IServerUserItemSink::IServerUserItemSink
PUBLIC	??0IMatchServiceManager@@QAE@ABU0@@Z		; IMatchServiceManager::IMatchServiceManager
PUBLIC	??4IMatchServiceManager@@QAEAAU0@ABU0@@Z	; IMatchServiceManager::operator=
PUBLIC	??0IGameMatchItem@@QAE@XZ			; IGameMatchItem::IGameMatchItem
PUBLIC	??0IImmediateGroupSink@@QAE@XZ			; IImmediateGroupSink::IImmediateGroupSink
PUBLIC	?GetCount@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEHXZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetCount
PUBLIC	?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition
PUBLIC	?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc
PUBLIC	??0?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAE@XZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::CWHArray<IServerUserItem *,IServerUserItem * const &>
PUBLIC	??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::~CWHArray<IServerUserItem *,IServerUserItem * const &>
PUBLIC	?GetCount@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QBEHXZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEHABQAUIServerUserItem@@@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::Add
PUBLIC	?ElementAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHABQAUIServerUserItem@@@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHH@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::RemoveAt
PUBLIC	??A?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::AllocMemory
PUBLIC	??_G?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAEPAXI@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`scalar deleting destructor'
PUBLIC	?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEHABQAUtagTableFrameInfo@@@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::Add
PUBLIC	?ElementAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHABQAUtagTableFrameInfo@@@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::RemoveAt
PUBLIC	??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::AllocMemory
PUBLIC	?AddMatchTable@CImmediateGroup@@IAEXPAUtagTableFrameInfo@@@Z ; CImmediateGroup::AddMatchTable
PUBLIC	?Release@CMatchServiceManager@@UAEXXZ		; CMatchServiceManager::Release
PUBLIC	??0CMatchServiceManager@@QAE@ABV0@@Z		; CMatchServiceManager::CMatchServiceManager
PUBLIC	??4CMatchServiceManager@@QAEAAV0@ABV0@@Z	; CMatchServiceManager::operator=
PUBLIC	??_GCMatchServiceManager@@UAEPAXI@Z		; CMatchServiceManager::`scalar deleting destructor'
PUBLIC	??_ECMatchServiceManager@@UAEPAXI@Z		; CMatchServiceManager::`vector deleting destructor'
PUBLIC	??0?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@QAE@XZ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::CWHArray<CTableFrameHook *,CTableFrameHook * const &>
PUBLIC	??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::~CWHArray<CTableFrameHook *,CTableFrameHook * const &>
PUBLIC	??_G?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAEPAXI@Z ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`scalar deleting destructor'
PUBLIC	??0?$CWHArray@EABE@@QAE@XZ			; CWHArray<unsigned char,unsigned char const &>::CWHArray<unsigned char,unsigned char const &>
PUBLIC	??1?$CWHArray@EABE@@UAE@XZ			; CWHArray<unsigned char,unsigned char const &>::~CWHArray<unsigned char,unsigned char const &>
PUBLIC	?GetCount@?$CWHArray@EABE@@QBEHXZ		; CWHArray<unsigned char,unsigned char const &>::GetCount
PUBLIC	?Add@?$CWHArray@EABE@@QAEHABE@Z			; CWHArray<unsigned char,unsigned char const &>::Add
PUBLIC	?ElementAt@?$CWHArray@EABE@@QAEAAEH@Z		; CWHArray<unsigned char,unsigned char const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@EABE@@QAEXH@Z		; CWHArray<unsigned char,unsigned char const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@EABE@@QAEXHABE@Z		; CWHArray<unsigned char,unsigned char const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@EABE@@QAEXHH@Z		; CWHArray<unsigned char,unsigned char const &>::RemoveAt
PUBLIC	?RemoveAll@?$CWHArray@EABE@@QAEXXZ		; CWHArray<unsigned char,unsigned char const &>::RemoveAll
PUBLIC	??A?$CWHArray@EABE@@QAEAAEH@Z			; CWHArray<unsigned char,unsigned char const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@EABE@@QAEXH@Z		; CWHArray<unsigned char,unsigned char const &>::AllocMemory
PUBLIC	??_G?$CWHArray@EABE@@UAEPAXI@Z			; CWHArray<unsigned char,unsigned char const &>::`scalar deleting destructor'
PUBLIC	??0?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::CWHArray<CImmediateGroup *,CImmediateGroup * const &>
PUBLIC	??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
PUBLIC	?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABQAVCImmediateGroup@@@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Add
PUBLIC	?Append@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABV1@@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Append
PUBLIC	?ElementAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHABQAVCImmediateGroup@@@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAt
PUBLIC	?RemoveAll@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAll
PUBLIC	??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::AllocMemory
PUBLIC	??_G?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAEPAXI@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`scalar deleting destructor'
PUBLIC	??0CImmediateMatch@@QAE@XZ			; CImmediateMatch::CImmediateMatch
PUBLIC	??1CImmediateMatch@@UAE@XZ			; CImmediateMatch::~CImmediateMatch
PUBLIC	?Release@CImmediateMatch@@UAEXXZ		; CImmediateMatch::Release
PUBLIC	?QueryInterface@CImmediateMatch@@UAEPAXABU_GUID@@K@Z ; CImmediateMatch::QueryInterface
PUBLIC	?OnStartService@CImmediateMatch@@UAEXXZ		; CImmediateMatch::OnStartService
PUBLIC	?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z ; CImmediateMatch::BindTableFrame
PUBLIC	?InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z ; CImmediateMatch::InitMatchInterface
PUBLIC	?OnEventTimer@CImmediateMatch@@UAE_NKI@Z	; CImmediateMatch::OnEventTimer
PUBLIC	?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z ; CImmediateMatch::OnEventDataBase
PUBLIC	?OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z ; CImmediateMatch::OnEventSocketMatch
PUBLIC	?OnEventUserLogon@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ; CImmediateMatch::OnEventUserLogon
PUBLIC	?OnEventUserLogout@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ; CImmediateMatch::OnEventUserLogout
PUBLIC	?OnEventUserLogonFinish@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ; CImmediateMatch::OnEventUserLogonFinish
PUBLIC	?OnEventEnterMatch@CImmediateMatch@@UAE_NKPAXK_N@Z ; CImmediateMatch::OnEventEnterMatch
PUBLIC	?OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z ; CImmediateMatch::OnEventUserJoinMatch
PUBLIC	?OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z ; CImmediateMatch::OnEventUserQuitMatch
PUBLIC	?OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z ; CImmediateMatch::OnEventUserItemScore
PUBLIC	?OnEventUserItemGameData@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z ; CImmediateMatch::OnEventUserItemGameData
PUBLIC	?OnEventUserItemStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@GG@Z ; CImmediateMatch::OnEventUserItemStatus
PUBLIC	?OnEventUserItemRight@CImmediateMatch@@UAE_NPAUIServerUserItem@@KKE@Z ; CImmediateMatch::OnEventUserItemRight
PUBLIC	?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z ; CImmediateMatch::OnEventMatchStart
PUBLIC	?OnEventMatchOver@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z ; CImmediateMatch::OnEventMatchOver
PUBLIC	?KillGameTimer@CImmediateMatch@@UAE_NKPAVCImmediateGroup@@@Z ; CImmediateMatch::KillGameTimer
PUBLIC	?SetGameTimer@CImmediateMatch@@UAE_NKKKIPAVCImmediateGroup@@@Z ; CImmediateMatch::SetGameTimer
PUBLIC	?SendMatchInfo@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ; CImmediateMatch::SendMatchInfo
PUBLIC	?SendGroupUserMessage@CImmediateMatch@@UAE_NPBDPAVCImmediateGroup@@@Z ; CImmediateMatch::SendGroupUserMessage
PUBLIC	?SendGroupUserScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z ; CImmediateMatch::SendGroupUserScore
PUBLIC	?SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z ; CImmediateMatch::SendGroupUserStatus
PUBLIC	?SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z ; CImmediateMatch::SendGameMessage
PUBLIC	?SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z ; CImmediateMatch::SendRoomMessage
PUBLIC	?SendGroupData@CImmediateMatch@@UAE_NGGPAXGPAVCImmediateGroup@@@Z ; CImmediateMatch::SendGroupData
PUBLIC	?SendData@CImmediateMatch@@UAE_NPAUIServerUserItem@@GGPAXG@Z ; CImmediateMatch::SendData
PUBLIC	?InsertNullTable@CImmediateMatch@@UAEXXZ	; CImmediateMatch::InsertNullTable
PUBLIC	?GetFreeAndroidUserItem@CImmediateMatch@@UAEPAUIAndroidUserItem@@XZ ; CImmediateMatch::GetFreeAndroidUserItem
PUBLIC	?GetNullTable@CImmediateMatch@@AAEGXZ		; CImmediateMatch::GetNullTable
PUBLIC	?CalcMatchNo@CImmediateMatch@@AAE_JXZ		; CImmediateMatch::CalcMatchNo
PUBLIC	?DeleteUserItem@CImmediateMatch@@AAE_NK@Z	; CImmediateMatch::DeleteUserItem
PUBLIC	?RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z ; CImmediateMatch::RemoveMatchUserItem
PUBLIC	?WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z ; CImmediateMatch::WriteUserAward
PUBLIC	??_GCImmediateMatch@@UAEPAXI@Z			; CImmediateMatch::`scalar deleting destructor'
PUBLIC	??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ		; _snprintf_s<128>
PUBLIC	??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ	; _snprintf_s<256>
PUBLIC	?Release@CImmediateMatch@@W7AEXXZ		; [thunk]:CImmediateMatch::Release`adjustor{8}'
PUBLIC	?QueryInterface@CImmediateMatch@@W7AEPAXABU_GUID@@K@Z ; [thunk]:CImmediateMatch::QueryInterface`adjustor{8}'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException@		; `string'
PUBLIC	?m_nLevel@CTrace@ATL@@1IA			; ATL::CTrace::m_nLevel
PUBLIC	?m_nCategory@CTrace@ATL@@1IA			; ATL::CTrace::m_nCategory
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ ; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
PUBLIC	??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ ; `string'
PUBLIC	??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA ; `ATL::CTime::GetLocalTm'::`1'::__LINE__Var
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IServerUserItemSink@@6B@			; IServerUserItemSink::`vftable'
PUBLIC	??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7IMatchServiceManager@@6B@			; IMatchServiceManager::`vftable'
PUBLIC	??_7IGameMatchItem@@6B@				; IGameMatchItem::`vftable'
PUBLIC	??_7IImmediateGroupSink@@6B@			; IImmediateGroupSink::`vftable'
PUBLIC	??_7?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@	; CWHArray<IServerUserItem *,IServerUserItem * const &>::`vftable'
PUBLIC	??_7CMatchServiceManager@@6B@			; CMatchServiceManager::`vftable'
PUBLIC	??_7?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`vftable'
PUBLIC	??_7?$CWHArray@EABE@@6B@			; CWHArray<unsigned char,unsigned char const &>::`vftable'
PUBLIC	??_7?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`vftable'
PUBLIC	??_7CImmediateMatch@@6BIGameMatchItem@@@	; CImmediateMatch::`vftable'
PUBLIC	??_7CImmediateMatch@@6BIImmediateGroupSink@@@	; CImmediateMatch::`vftable'
PUBLIC	??_7CImmediateMatch@@6BIServerUserItemSink@@@	; CImmediateMatch::`vftable'
PUBLIC	?__LINE__Var@?0???1CImmediateMatch@@UAE@XZ@4JA	; `CImmediateMatch::~CImmediateMatch'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnStartService@CImmediateMatch@@UAEXXZ@4JA ; `CImmediateMatch::OnStartService'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z@4JA ; `CImmediateMatch::BindTableFrame'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z@4JA ; `CImmediateMatch::InitMatchInterface'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnEventTimer@CImmediateMatch@@UAE_NKI@Z@4JA ; `CImmediateMatch::OnEventTimer'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA ; `CImmediateMatch::OnEventDataBase'::`1'::__LINE__Var
PUBLIC	??_C@_0CN@HDLOLBPO@?$LB?H?H?$PM?R?Q?$LO?$KN?$LP?$KK?J?$LM?0?$LB?$KI?C?$PL?J?$KH?$LA?$NM?0?G?k?V?X?P?B?$LB?$KI?C@ ; `string'
PUBLIC	??_C@_08CGCLAKLP@?$LB?$KI?C?$PL?J?$KH?$LA?$NM@	; `string'
PUBLIC	??_C@_0CJ@CKEEGDHM@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LH@ ; `string'
PUBLIC	??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@		; `string'
PUBLIC	??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@		; `string'
PUBLIC	??_C@_0BO@OCKMIBLC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?M?K?$LL?$LJ?$LB?$KI?C?$PL?$LH?Q?$CFI64d?$CFs?$KD?$KB@ ; `string'
PUBLIC	??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BJ@LHKLICON@?$LB?H?H?$PM?$LN?a?J?x?$LK?s?$KD?$KM?M?K?H?$PM?H?K?J?$PN?R?l?$LD?$KD@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA ; `CImmediateMatch::OnEventSocketMatch'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA ; `CImmediateMatch::OnEventUserJoinMatch'::`1'::__LINE__Var
PUBLIC	??_C@_0O@DGBKFONG@?S?C?$LL?$KH?V?$LI?U?k?N?$KK?$LP?U?$CB@ ; `string'
PUBLIC	??_C@_0DB@GOHKIOLG@?$LB?$KH?G?$LI?$KD?$KM?$LF?$LB?G?$LA?W?$MA?W?S?$LC?$LL?$LJ?$LL?G?k?$LF?H?$LE?$PN?$KB?$KD?$LL?$LJ?$LC?n?5@ ; `string'
PUBLIC	??_C@_0DN@EHALDGCC@?$LB?$KH?G?$LI?$KD?$KM?$LI?C?$LH?$LP?$LM?d?$LC?N?H?$PM?H?K?J?$PN?R?Q?B?z?$KD?$KM?G?k?I?T?$LK@ ; `string'
PUBLIC	??_C@_0BP@GANJEFPA@?D?z?R?Q?$LO?$KN?$LD?I?$LJ?$KG?$LB?$KI?C?$PL?$KD?$KM?$LC?$LL?D?$NM?V?X?$LI?$LE?$LB?$KI?C?$PL?$KD?$KB@ ; `string'
PUBLIC	??_C@_0BL@MIEHDBCF@?$LB?$KH?G?$LI?$KD?$KM?$LB?H?H?$PM?$LB?$OA?$LK?E?$LC?$LL?$LJ?$LL?G?k?I?T?$LF?H?$KB?$KD@ ; `string'
PUBLIC	??_C@_0CF@BNBFGJLJ@?$LG?T?$LC?$LL?F?p?$KD?$KM?D?z?$LF?$LB?G?$LA?$LF?D?W?$LE?L?$KM?$LC?$LL?T?J?P?m?$LC?N?$LM?S?$LB@ ; `string'
PUBLIC	??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@ ; `string'
PUBLIC	??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@ ; `string'
PUBLIC	??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@ ; `string'
PUBLIC	??_C@_0CJ@OOKPLADN@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LA@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA ; `CImmediateMatch::OnEventUserQuitMatch'::`1'::__LINE__Var
PUBLIC	??_C@_0CD@CHNMBBKC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?$LL?$LG?S?$KN?D?z?$LM?L?P?x?$LC?N?$LM?S?F?d?K?$PL?$LB?H?H@ ; `string'
PUBLIC	?__LINE__Var@?0??OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA ; `CImmediateMatch::OnEventUserItemScore'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z@4JA ; `CImmediateMatch::OnEventMatchStart'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z@4JA ; `CImmediateMatch::SendGroupUserStatus'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA ; `CImmediateMatch::SendGameMessage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA ; `CImmediateMatch::SendRoomMessage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??InsertNullTable@CImmediateMatch@@UAEXXZ@4JA ; `CImmediateMatch::InsertNullTable'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA ; `CImmediateMatch::WriteUserAward'::`1'::__LINE__Var
PUBLIC	??_C@_0DJ@PHNPOIHK@?$LB?H?H?$PM?R?Q?$LN?a?J?x?$KD?$KM?$LJ?$KH?O?$LC?D?z?$LL?q?$LF?C?$LF?Z?$CFd?C?$PL?$KD?$KM?$LL@ ; `string'
PUBLIC	?__LINE__Var@?0??DeleteUserItem@CImmediateMatch@@AAE_NK@Z@4JA ; `CImmediateMatch::DeleteUserItem'::`1'::__LINE__Var
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	__CT??_R0H@84
PUBLIC	?__LINE__Var@?0??RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z@4JA ; `CImmediateMatch::RemoveMatchUserItem'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServerUserItemSink@@6B@			; IServerUserItemSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServerUserItemSink@@@8			; IServerUserItemSink `RTTI Type Descriptor'
PUBLIC	??_R3IServerUserItemSink@@8			; IServerUserItemSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServerUserItemSink@@8			; IServerUserItemSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServerUserItemSink@@8		; IServerUserItemSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IMatchServiceManager@@6B@			; IMatchServiceManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIMatchServiceManager@@@8		; IMatchServiceManager `RTTI Type Descriptor'
PUBLIC	??_R3IMatchServiceManager@@8			; IMatchServiceManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IMatchServiceManager@@8			; IMatchServiceManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IMatchServiceManager@@8		; IMatchServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IGameMatchItem@@6B@			; IGameMatchItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIGameMatchItem@@@8			; IGameMatchItem `RTTI Type Descriptor'
PUBLIC	??_R3IGameMatchItem@@8				; IGameMatchItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IGameMatchItem@@8				; IGameMatchItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IGameMatchItem@@8			; IGameMatchItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PAUIServerUserItem@@ABQAU1@@@@8 ; CWHArray<IServerUserItem *,IServerUserItem * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8	; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8	; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8 ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IImmediateGroupSink@@6B@			; IImmediateGroupSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIImmediateGroupSink@@@8			; IImmediateGroupSink `RTTI Type Descriptor'
PUBLIC	??_R3IImmediateGroupSink@@8			; IImmediateGroupSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IImmediateGroupSink@@8			; IImmediateGroupSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IImmediateGroupSink@@8		; IImmediateGroupSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CImmediateMatch@@6BIGameMatchItem@@@	; CImmediateMatch::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImmediateMatch@@@8			; CImmediateMatch `RTTI Type Descriptor'
PUBLIC	??_R3CImmediateMatch@@8				; CImmediateMatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImmediateMatch@@8				; CImmediateMatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImmediateMatch@@8		; CImmediateMatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EC@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IImmediateGroupSink@@8		; IImmediateGroupSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R17?0A@EN@IServerUserItemSink@@8		; IServerUserItemSink::`RTTI Base Class Descriptor at (8,-1,0,77)'
PUBLIC	??_R17?0A@EL@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (8,-1,0,75)'
PUBLIC	??_R4CImmediateMatch@@6BIImmediateGroupSink@@@	; CImmediateMatch::`RTTI Complete Object Locator'
PUBLIC	??_R4CImmediateMatch@@6BIServerUserItemSink@@@	; CImmediateMatch::`RTTI Complete Object Locator'
PUBLIC	??_R4CMatchServiceManager@@6B@			; CMatchServiceManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMatchServiceManager@@@8		; CMatchServiceManager `RTTI Type Descriptor'
PUBLIC	??_R3CMatchServiceManager@@8			; CMatchServiceManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMatchServiceManager@@8			; CMatchServiceManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMatchServiceManager@@8		; CMatchServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@EABE@@6B@			; CWHArray<unsigned char,unsigned char const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@EABE@@@8			; CWHArray<unsigned char,unsigned char const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@EABE@@8				; CWHArray<unsigned char,unsigned char const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@EABE@@8				; CWHArray<unsigned char,unsigned char const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@EABE@@8		; CWHArray<unsigned char,unsigned char const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@@8 ; CWHArray<CImmediateGroup *,CImmediateGroup * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8 ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@@8 ; CWHArray<CTableFrameHook *,CTableFrameHook * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8 ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___localtime64_s:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:PROC ; AfxAssertValidObject
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:PROC		; AfxIsValidAddress
EXTRN	??2@YAPAXIPBDH@Z:PROC				; operator new
EXTRN	??3@YAXPAXPBDH@Z:PROC				; operator delete
EXTRN	??_U@YAPAXIPBDH@Z:PROC				; operator new[]
EXTRN	__imp_?TraceString@CTraceService@@SA_NPBDW4enTraceLevel@@@Z:PROC
EXTRN	??0CTableFrameHook@@QAE@XZ:PROC			; CTableFrameHook::CTableFrameHook
EXTRN	??_E?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAEPAXI@Z:PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`vector deleting destructor'
EXTRN	??0CImmediateGroup@@QAE@_JPAUtagGameMatchOption@@PAUIImmediateGroupSink@@@Z:PROC ; CImmediateGroup::CImmediateGroup
EXTRN	?OnUserSignUpMatch@CImmediateGroup@@QAE_NPAUIServerUserItem@@@Z:PROC ; CImmediateGroup::OnUserSignUpMatch
EXTRN	?OnUserQuitMatch@CImmediateGroup@@QAE_NPAUIServerUserItem@@@Z:PROC ; CImmediateGroup::OnUserQuitMatch
EXTRN	?OnTimeMessage@CImmediateGroup@@IAE_NKI@Z:PROC	; CImmediateGroup::OnTimeMessage
EXTRN	?PerformAllUserStandUp@CImmediateGroup@@IAEXXZ:PROC ; CImmediateGroup::PerformAllUserStandUp
EXTRN	?CheckMatchUser@CImmediateGroup@@IAE_NXZ:PROC	; CImmediateGroup::CheckMatchUser
EXTRN	??1CMatchServiceManager@@UAE@XZ:PROC		; CMatchServiceManager::~CMatchServiceManager
EXTRN	?QueryInterface@CMatchServiceManager@@UAEPAXABU_GUID@@K@Z:PROC ; CMatchServiceManager::QueryInterface
EXTRN	?StopService@CMatchServiceManager@@UAE_NXZ:PROC	; CMatchServiceManager::StopService
EXTRN	?StartService@CMatchServiceManager@@UAE_NXZ:PROC ; CMatchServiceManager::StartService
EXTRN	?CreateGameMatch@CMatchServiceManager@@UAE_NE@Z:PROC ; CMatchServiceManager::CreateGameMatch
EXTRN	?BindTableFrame@CMatchServiceManager@@UAE_NPAUITableFrame@@G@Z:PROC ; CMatchServiceManager::BindTableFrame
EXTRN	?InitMatchInterface@CMatchServiceManager@@UAE_NAAUtagMatchManagerParameter@@@Z:PROC ; CMatchServiceManager::InitMatchInterface
EXTRN	?OnEventTimer@CMatchServiceManager@@UAE_NKI@Z:PROC ; CMatchServiceManager::OnEventTimer
EXTRN	?OnEventDataBase@CMatchServiceManager@@UAE_NGPAUIServerUserItem@@PAXGK@Z:PROC ; CMatchServiceManager::OnEventDataBase
EXTRN	?OnEventSocketMatch@CMatchServiceManager@@UAE_NGPAXGPAUIServerUserItem@@K@Z:PROC ; CMatchServiceManager::OnEventSocketMatch
EXTRN	?OnEventUserLogon@CMatchServiceManager@@UAE_NPAUIServerUserItem@@@Z:PROC ; CMatchServiceManager::OnEventUserLogon
EXTRN	?OnEventUserLogout@CMatchServiceManager@@UAE_NPAUIServerUserItem@@@Z:PROC ; CMatchServiceManager::OnEventUserLogout
EXTRN	?OnEventUserLogonFinish@CMatchServiceManager@@UAE_NPAUIServerUserItem@@@Z:PROC ; CMatchServiceManager::OnEventUserLogonFinish
EXTRN	?OnEventEnterMatch@CMatchServiceManager@@UAE_NKPAXK_N@Z:PROC ; CMatchServiceManager::OnEventEnterMatch
EXTRN	?OnEventUserJoinMatch@CMatchServiceManager@@UAE_NPAUIServerUserItem@@EK@Z:PROC ; CMatchServiceManager::OnEventUserJoinMatch
EXTRN	?OnEventUserQuitMatch@CMatchServiceManager@@UAE_NPAUIServerUserItem@@EPAGK@Z:PROC ; CMatchServiceManager::OnEventUserQuitMatch
EXTRN	?GetServerUserItemSink@CMatchServiceManager@@UAEPAUIUnknownEx@@XZ:PROC ; CMatchServiceManager::GetServerUserItemSink
EXTRN	??_E?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAEPAXI@Z:PROC ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`vector deleting destructor'
EXTRN	??_E?$CWHArray@EABE@@UAEPAXI@Z:PROC		; CWHArray<unsigned char,unsigned char const &>::`vector deleting destructor'
EXTRN	??_E?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAEPAXI@Z:PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`vector deleting destructor'
EXTRN	??_ECImmediateMatch@@UAEPAXI@Z:PROC		; CImmediateMatch::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allmul:PROC
EXTRN	__allshl:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?m_wChairCount@CImmediateGroup@@1GA:WORD	; CImmediateGroup::m_wChairCount
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLevel@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLevel@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLevel
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
_BSS	SEGMENT
?wMatchCount@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA DD 01H DUP (?) ; `CImmediateMatch::CalcMatchNo'::`2'::wMatchCount
?wLastDay@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA DD 01H DUP (?) ; `CImmediateMatch::CalcMatchNo'::`2'::wLastDay
?$TSS0@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',CImmediateMatch::lcMatchNo,unsigned char &,__int64,void,int, ?? &>
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8 DD FLAT:??_R0?AV?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@@8 ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8 ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8 DD 00H	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@ DD 00H	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@@8
	DD	FLAT:??_R3?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8 DD FLAT:??_R0?AV?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@@8 ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8 ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8 DD 00H	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@ DD 00H	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@@8
	DD	FLAT:??_R3?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@EABE@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@EABE@@8 DD FLAT:??_R0?AV?$CWHArray@EABE@@@8 ; CWHArray<unsigned char,unsigned char const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@EABE@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@EABE@@8
rdata$r	SEGMENT
??_R2?$CWHArray@EABE@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@EABE@@8 ; CWHArray<unsigned char,unsigned char const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@EABE@@8
rdata$r	SEGMENT
??_R3?$CWHArray@EABE@@8 DD 00H				; CWHArray<unsigned char,unsigned char const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@EABE@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@EABE@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@EABE@@@8 DD FLAT:??_7type_info@@6B@	; CWHArray<unsigned char,unsigned char const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@EABE@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@EABE@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@EABE@@6B@ DD 00H			; CWHArray<unsigned char,unsigned char const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@EABE@@@8
	DD	FLAT:??_R3?$CWHArray@EABE@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMatchServiceManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMatchServiceManager@@8 DD FLAT:??_R0?AVCMatchServiceManager@@@8 ; CMatchServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMatchServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CMatchServiceManager@@8
rdata$r	SEGMENT
??_R2CMatchServiceManager@@8 DD FLAT:??_R1A@?0A@EA@CMatchServiceManager@@8 ; CMatchServiceManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IMatchServiceManager@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CMatchServiceManager@@8
rdata$r	SEGMENT
??_R3CMatchServiceManager@@8 DD 00H			; CMatchServiceManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CMatchServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMatchServiceManager@@@8
data$r	SEGMENT
??_R0?AVCMatchServiceManager@@@8 DD FLAT:??_7type_info@@6B@ ; CMatchServiceManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMatchServiceManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMatchServiceManager@@6B@
rdata$r	SEGMENT
??_R4CMatchServiceManager@@6B@ DD 00H			; CMatchServiceManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMatchServiceManager@@@8
	DD	FLAT:??_R3CMatchServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CImmediateMatch@@6BIServerUserItemSink@@@
rdata$r	SEGMENT
??_R4CImmediateMatch@@6BIServerUserItemSink@@@ DD 00H	; CImmediateMatch::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCImmediateMatch@@@8
	DD	FLAT:??_R3CImmediateMatch@@8
rdata$r	ENDS
;	COMDAT ??_R4CImmediateMatch@@6BIImmediateGroupSink@@@
rdata$r	SEGMENT
??_R4CImmediateMatch@@6BIImmediateGroupSink@@@ DD 00H	; CImmediateMatch::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCImmediateMatch@@@8
	DD	FLAT:??_R3CImmediateMatch@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EL@IUnknownEx@@8
rdata$r	SEGMENT
??_R17?0A@EL@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (8,-1,0,75)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	04bH
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EN@IServerUserItemSink@@8
rdata$r	SEGMENT
??_R17?0A@EN@IServerUserItemSink@@8 DD FLAT:??_R0?AUIServerUserItemSink@@@8 ; IServerUserItemSink::`RTTI Base Class Descriptor at (8,-1,0,77)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@IImmediateGroupSink@@8
rdata$r	SEGMENT
??_R13?0A@EA@IImmediateGroupSink@@8 DD FLAT:??_R0?AUIImmediateGroupSink@@@8 ; IImmediateGroupSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IImmediateGroupSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CImmediateMatch@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImmediateMatch@@8 DD FLAT:??_R0?AVCImmediateMatch@@@8 ; CImmediateMatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImmediateMatch@@8
rdata$r	ENDS
;	COMDAT ??_R2CImmediateMatch@@8
rdata$r	SEGMENT
??_R2CImmediateMatch@@8 DD FLAT:??_R1A@?0A@EA@CImmediateMatch@@8 ; CImmediateMatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IGameMatchItem@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknownEx@@8
	DD	FLAT:??_R13?0A@EA@IImmediateGroupSink@@8
	DD	FLAT:??_R17?0A@EN@IServerUserItemSink@@8
	DD	FLAT:??_R17?0A@EL@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CImmediateMatch@@8
rdata$r	SEGMENT
??_R3CImmediateMatch@@8 DD 00H				; CImmediateMatch::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	06H
	DD	FLAT:??_R2CImmediateMatch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImmediateMatch@@@8
data$r	SEGMENT
??_R0?AVCImmediateMatch@@@8 DD FLAT:??_7type_info@@6B@	; CImmediateMatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImmediateMatch@@', 00H
data$r	ENDS
;	COMDAT ??_R4CImmediateMatch@@6BIGameMatchItem@@@
rdata$r	SEGMENT
??_R4CImmediateMatch@@6BIGameMatchItem@@@ DD 00H	; CImmediateMatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImmediateMatch@@@8
	DD	FLAT:??_R3CImmediateMatch@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IImmediateGroupSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IImmediateGroupSink@@8 DD FLAT:??_R0?AUIImmediateGroupSink@@@8 ; IImmediateGroupSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IImmediateGroupSink@@8
rdata$r	ENDS
;	COMDAT ??_R2IImmediateGroupSink@@8
rdata$r	SEGMENT
??_R2IImmediateGroupSink@@8 DD FLAT:??_R1A@?0A@EA@IImmediateGroupSink@@8 ; IImmediateGroupSink::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IImmediateGroupSink@@8
rdata$r	SEGMENT
??_R3IImmediateGroupSink@@8 DD 00H			; IImmediateGroupSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IImmediateGroupSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIImmediateGroupSink@@@8
data$r	SEGMENT
??_R0?AUIImmediateGroupSink@@@8 DD FLAT:??_7type_info@@6B@ ; IImmediateGroupSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIImmediateGroupSink@@', 00H
data$r	ENDS
;	COMDAT ??_R4IImmediateGroupSink@@6B@
rdata$r	SEGMENT
??_R4IImmediateGroupSink@@6B@ DD 00H			; IImmediateGroupSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIImmediateGroupSink@@@8
	DD	FLAT:??_R3IImmediateGroupSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8 DD FLAT:??_R0?AV?$CWHArray@PAUIServerUserItem@@ABQAU1@@@@8 ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8 ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8 DD 00H	; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PAUIServerUserItem@@ABQAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PAUIServerUserItem@@ABQAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<IServerUserItem *,IServerUserItem * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PAUIServerUserItem@@ABQAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@ DD 00H	; CWHArray<IServerUserItem *,IServerUserItem * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PAUIServerUserItem@@ABQAU1@@@@8
	DD	FLAT:??_R3?$CWHArray@PAUIServerUserItem@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IGameMatchItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IGameMatchItem@@8 DD FLAT:??_R0?AUIGameMatchItem@@@8 ; IGameMatchItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IGameMatchItem@@8
rdata$r	ENDS
;	COMDAT ??_R2IGameMatchItem@@8
rdata$r	SEGMENT
??_R2IGameMatchItem@@8 DD FLAT:??_R1A@?0A@EA@IGameMatchItem@@8 ; IGameMatchItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IGameMatchItem@@8
rdata$r	SEGMENT
??_R3IGameMatchItem@@8 DD 00H				; IGameMatchItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IGameMatchItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIGameMatchItem@@@8
data$r	SEGMENT
??_R0?AUIGameMatchItem@@@8 DD FLAT:??_7type_info@@6B@	; IGameMatchItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIGameMatchItem@@', 00H
data$r	ENDS
;	COMDAT ??_R4IGameMatchItem@@6B@
rdata$r	SEGMENT
??_R4IGameMatchItem@@6B@ DD 00H				; IGameMatchItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIGameMatchItem@@@8
	DD	FLAT:??_R3IGameMatchItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IMatchServiceManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IMatchServiceManager@@8 DD FLAT:??_R0?AUIMatchServiceManager@@@8 ; IMatchServiceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IMatchServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R2IMatchServiceManager@@8
rdata$r	SEGMENT
??_R2IMatchServiceManager@@8 DD FLAT:??_R1A@?0A@EA@IMatchServiceManager@@8 ; IMatchServiceManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IMatchServiceManager@@8
rdata$r	SEGMENT
??_R3IMatchServiceManager@@8 DD 00H			; IMatchServiceManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IMatchServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIMatchServiceManager@@@8
data$r	SEGMENT
??_R0?AUIMatchServiceManager@@@8 DD FLAT:??_7type_info@@6B@ ; IMatchServiceManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIMatchServiceManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4IMatchServiceManager@@6B@
rdata$r	SEGMENT
??_R4IMatchServiceManager@@6B@ DD 00H			; IMatchServiceManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIMatchServiceManager@@@8
	DD	FLAT:??_R3IMatchServiceManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServerUserItemSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServerUserItemSink@@8 DD FLAT:??_R0?AUIServerUserItemSink@@@8 ; IServerUserItemSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R2IServerUserItemSink@@8
rdata$r	SEGMENT
??_R2IServerUserItemSink@@8 DD FLAT:??_R1A@?0A@EA@IServerUserItemSink@@8 ; IServerUserItemSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServerUserItemSink@@8
rdata$r	SEGMENT
??_R3IServerUserItemSink@@8 DD 00H			; IServerUserItemSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServerUserItemSink@@@8
data$r	SEGMENT
??_R0?AUIServerUserItemSink@@@8 DD FLAT:??_7type_info@@6B@ ; IServerUserItemSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServerUserItemSink@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServerUserItemSink@@6B@
rdata$r	SEGMENT
??_R4IServerUserItemSink@@6B@ DD 00H			; IServerUserItemSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServerUserItemSink@@@8
	DD	FLAT:??_R3IServerUserItemSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z@4JA DD 060dH ; `CImmediateMatch::RemoveMatchUserItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?0??DeleteUserItem@CImmediateMatch@@AAE_NK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DeleteUserItem@CImmediateMatch@@AAE_NK@Z@4JA DD 05f9H ; `CImmediateMatch::DeleteUserItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DJ@PHNPOIHK@?$LB?H?H?$PM?R?Q?$LN?a?J?x?$KD?$KM?$LJ?$KH?O?$LC?D?z?$LL?q?$LF?C?$LF?Z?$CFd?C?$PL?$KD?$KM?$LL@
CONST	SEGMENT
??_C@_0DJ@PHNPOIHK@?$LB?H?H?$PM?R?Q?$LN?a?J?x?$KD?$KM?$LJ?$KH?O?$LC?D?z?$LL?q?$LF?C?$LF?Z?$CFd?C?$PL?$KD?$KM?$LL@ DB 0b1H
	DB	0c8H, 0c8H, 0fcH, 0d2H, 0d1H, 0bdH, 0e1H, 0caH, 0f8H, 0a3H, 0acH
	DB	0b9H, 0a7H, 0cfH, 0b2H, 0c4H, 0faH, 0bbH, 0f1H, 0b5H, 0c3H, 0b5H
	DB	0daH, '%d', 0c3H, 0fbH, 0a3H, 0acH, 0bbH, 0b6H, 0d3H, 0adH, 0c4H
	DB	0faH, 0b2H, 0ceH, 0bcH, 0d3H, 0c6H, 0e4H, 0cbH, 0fbH, 0b3H, 0a1H
	DB	0b4H, 0ceH, 0b5H, 0c4H, 0b1H, 0c8H, 0c8H, 0fcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA DD 0578H ; `CImmediateMatch::WriteUserAward'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??InsertNullTable@CImmediateMatch@@UAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InsertNullTable@CImmediateMatch@@UAEXXZ@4JA DD 0550H ; `CImmediateMatch::InsertNullTable'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA DD 051fH ; `CImmediateMatch::SendRoomMessage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA DD 0507H ; `CImmediateMatch::SendGameMessage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z@4JA DD 04e6H ; `CImmediateMatch::SendGroupUserStatus'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z@4JA DD 0435H ; `CImmediateMatch::OnEventMatchStart'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA DD 039cH ; `CImmediateMatch::OnEventUserItemScore'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@CHNMBBKC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?$LL?$LG?S?$KN?D?z?$LM?L?P?x?$LC?N?$LM?S?F?d?K?$PL?$LB?H?H@
CONST	SEGMENT
??_C@_0CD@CHNMBBKC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?$LL?$LG?S?$KN?D?z?$LM?L?P?x?$LC?N?$LM?S?F?d?K?$PL?$LB?H?H@ DB 0cdH
	DB	0cbH, 0c8H, 0fcH, 0b3H, 0c9H, 0b9H, 0a6H, 0a3H, 0acH, 0bbH, 0b6H
	DB	0d3H, 0adH, 0c4H, 0faH, 0bcH, 0ccH, 0d0H, 0f8H, 0b2H, 0ceH, 0bcH
	DB	0d3H, 0c6H, 0e4H, 0cbH, 0fbH, 0b1H, 0c8H, 0c8H, 0fcH, 0a3H, 0a1H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA DD 034dH ; `CImmediateMatch::OnEventUserQuitMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@OOKPLADN@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LA@
CONST	SEGMENT
??_C@_0CJ@OOKPLADN@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LA@ DB 0b9H
	DB	0a7H, 0cfH, 0b2H, 0a3H, 0acH, 0b1H, 0a8H, 0c3H, 0fbH, 0b3H, 0c9H
	DB	0b9H, 0a6H, 0a3H, 0acH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H, 0fdH, 0cfH
	DB	0b5H, 0cdH, 0b3H, 0ceH, 0aaH, 0c4H, 0faH, 0b0H, 0b2H, 0c5H, 0c5H
	DB	0d7H, 0f9H, 0ceH, 0bbH, 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@
CONST	SEGMENT
??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@ DB 0b2H
	DB	0ceH, 0c8H, 0fcH, 0bdH, 0abH, 0bfH, 0dbH, 0b3H, 0fdH, 0b1H, 0a8H
	DB	0c3H, 0fbH, 0b7H, 0d1H, ' %I64d %s', 0a3H, 0acH, 0c8H, 0b7H, 0c8H
	DB	0cfH, 0d2H, 0aaH, 0b2H, 0ceH, 0c8H, 0fcH, 0c2H, 0f0H, 0a3H, 0bfH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@
CONST	SEGMENT
??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, 0a3H, 0acH, 0c4H, 0faH, 0b5H, 0c4H, 0beH, 0adH
	DB	0d1H, 0e9H, 0d6H, 0b5H, 0b4H, 0efH, 0b2H, 0bbH, 0b5H, 0bdH, 0b1H
	DB	0a8H, 0c3H, 0fbH, 0ccH, 0f5H, 0bcH, 0feH, 0a3H, 0acH, 0b1H, 0a8H
	DB	0c3H, 0fbH, 0caH, 0a7H, 0b0H, 0dcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@
CONST	SEGMENT
??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, 0a3H, 0acH, 0c4H, 0faH, 0b5H, 0c4H, 0bbH, 0e1H
	DB	0d4H, 0b1H, 0b5H, 0c8H, 0bcH, 0b6H, 0b4H, 0efH, 0b2H, 0bbH, 0b5H
	DB	0bdH, 0b1H, 0a8H, 0c3H, 0fbH, 0ccH, 0f5H, 0bcH, 0feH, 0a3H, 0acH
	DB	0b1H, 0a8H, 0c3H, 0fbH, 0caH, 0a7H, 0b0H, 0dcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BNBFGJLJ@?$LG?T?$LC?$LL?F?p?$KD?$KM?D?z?$LF?$LB?G?$LA?$LF?D?W?$LE?L?$KM?$LC?$LL?T?J?P?m?$LC?N?$LM?S?$LB@
CONST	SEGMENT
??_C@_0CF@BNBFGJLJ@?$LG?T?$LC?$LL?F?p?$KD?$KM?D?z?$LF?$LB?G?$LA?$LF?D?W?$LE?L?$KM?$LC?$LL?T?J?P?m?$LC?N?$LM?S?$LB@ DB 0b6H
	DB	0d4H, 0b2H, 0bbH, 0c6H, 0f0H, 0a3H, 0acH, 0c4H, 0faH, 0b5H, 0b1H
	DB	0c7H, 0b0H, 0b5H, 0c4H, 0d7H, 0b4H, 0ccH, 0acH, 0b2H, 0bbH, 0d4H
	DB	0caH, 0d0H, 0edH, 0b2H, 0ceH, 0bcH, 0d3H, 0b1H, 0c8H, 0c8H, 0fcH
	DB	0a3H, 0a1H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MIEHDBCF@?$LB?$KH?G?$LI?$KD?$KM?$LB?H?H?$PM?$LB?$OA?$LK?E?$LC?$LL?$LJ?$LL?G?k?I?T?$LF?H?$KB?$KD@
CONST	SEGMENT
??_C@_0BL@MIEHDBCF@?$LB?$KH?G?$LI?$KD?$KM?$LB?H?H?$PM?$LB?$OA?$LK?E?$LC?$LL?$LJ?$LL?G?k?I?T?$LF?H?$KB?$KD@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, 0a3H, 0acH, 0b1H, 0c8H, 0c8H, 0fcH, 0b1H, 0e0H
	DB	0baH, 0c5H, 0b2H, 0bbH, 0b9H, 0bbH, 0c7H, 0ebH, 0c9H, 0d4H, 0b5H
	DB	0c8H, 0a1H, 0a3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GANJEFPA@?D?z?R?Q?$LO?$KN?$LD?I?$LJ?$KG?$LB?$KI?C?$PL?$KD?$KM?$LC?$LL?D?$NM?V?X?$LI?$LE?$LB?$KI?C?$PL?$KD?$KB@
CONST	SEGMENT
??_C@_0BP@GANJEFPA@?D?z?R?Q?$LO?$KN?$LD?I?$LJ?$KG?$LB?$KI?C?$PL?$KD?$KM?$LC?$LL?D?$NM?V?X?$LI?$LE?$LB?$KI?C?$PL?$KD?$KB@ DB 0c4H
	DB	0faH, 0d2H, 0d1H, 0beH, 0adH, 0b3H, 0c9H, 0b9H, 0a6H, 0b1H, 0a8H
	DB	0c3H, 0fbH, 0a3H, 0acH, 0b2H, 0bbH, 0c4H, 0dcH, 0d6H, 0d8H, 0b8H
	DB	0b4H, 0b1H, 0a8H, 0c3H, 0fbH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@EHALDGCC@?$LB?$KH?G?$LI?$KD?$KM?$LI?C?$LH?$LP?$LM?d?$LC?N?H?$PM?H?K?J?$PN?R?Q?B?z?$KD?$KM?G?k?I?T?$LK@
CONST	SEGMENT
??_C@_0DN@EHALDGCC@?$LB?$KH?G?$LI?$KD?$KM?$LI?C?$LH?$LP?$LM?d?$LC?N?H?$PM?H?K?J?$PN?R?Q?B?z?$KD?$KM?G?k?I?T?$LK@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, 0a3H, 0acH, 0b8H, 0c3H, 0b7H, 0bfH, 0bcH, 0e4H
	DB	0b2H, 0ceH, 0c8H, 0fcH, 0c8H, 0cbH, 0caH, 0fdH, 0d2H, 0d1H, 0c2H
	DB	0faH, 0a3H, 0acH, 0c7H, 0ebH, 0c9H, 0d4H, 0baH, 0f3H, 0d4H, 0d9H
	DB	0b1H, 0a8H, 0c3H, 0fbH, 0bbH, 0f2H, 0d5H, 0dfH, 0bdH, 0f8H, 0c8H
	DB	0ebH, 0c1H, 0edH, 0d2H, 0bbH, 0b7H, 0bfH, 0bcH, 0e4H, 0b1H, 0c8H
	DB	0c8H, 0fcH, 0a1H, 0a3H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GOHKIOLG@?$LB?$KH?G?$LI?$KD?$KM?$LF?$LB?G?$LA?W?$MA?W?S?$LC?$LL?$LJ?$LL?G?k?$LF?H?$LE?$PN?$KB?$KD?$LL?$LJ?$LC?n?5@
CONST	SEGMENT
??_C@_0DB@GOHKIOLG@?$LB?$KH?G?$LI?$KD?$KM?$LF?$LB?G?$LA?W?$MA?W?S?$LC?$LL?$LJ?$LL?G?k?$LF?H?$LE?$PN?$KB?$KD?$LL?$LJ?$LC?n?5@ DB 0b1H
	DB	0a7H, 0c7H, 0b8H, 0a3H, 0acH, 0b5H, 0b1H, 0c7H, 0b0H, 0d7H, 0c0H
	DB	0d7H, 0d3H, 0b2H, 0bbH, 0b9H, 0bbH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H
	DB	0fdH, 0a1H, 0a3H, 0bbH, 0b9H, 0b2H, 0eeH, ' %d ', 0d5H, 0c5H, 0d7H
	DB	0c0H, 0d7H, 0d3H, 0bfH, 0c9H, 0d2H, 0d4H, 0b1H, 0a8H, 0c3H, 0fbH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DGBKFONG@?S?C?$LL?$KH?V?$LI?U?k?N?$KK?$LP?U?$CB@
CONST	SEGMENT
??_C@_0O@DGBKFONG@?S?C?$LL?$KH?V?$LI?U?k?N?$KK?$LP?U?$CB@ DB 0d3H, 0c3H, 0bbH
	DB	0a7H, 0d6H, 0b8H, 0d5H, 0ebH, 0ceH, 0aaH, 0bfH, 0d5H, '!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA DD 02b3H ; `CImmediateMatch::OnEventUserJoinMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA DD 0210H ; `CImmediateMatch::OnEventSocketMatch'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BJ@LHKLICON@?$LB?H?H?$PM?$LN?a?J?x?$LK?s?$KD?$KM?M?K?H?$PM?H?K?J?$PN?R?l?$LD?$KD@
CONST	SEGMENT
??_C@_0BJ@LHKLICON@?$LB?H?H?$PM?$LN?a?J?x?$LK?s?$KD?$KM?M?K?H?$PM?H?K?J?$PN?R?l?$LD?$KD@ DB 0b1H
	DB	0c8H, 0c8H, 0fcH, 0bdH, 0e1H, 0caH, 0f8H, 0baH, 0f3H, 0a3H, 0acH
	DB	0cdH, 0cbH, 0c8H, 0fcH, 0c8H, 0cbH, 0caH, 0fdH, 0d2H, 0ecH, 0b3H
	DB	0a3H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@
CONST	SEGMENT
??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@ DB 0cdH, 0cbH, 0c8H, 0fcH
	DB	0b3H, 0c9H, 0b9H, 0a6H, 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OCKMIBLC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?M?K?$LL?$LJ?$LB?$KI?C?$PL?$LH?Q?$CFI64d?$CFs?$KD?$KB@
CONST	SEGMENT
??_C@_0BO@OCKMIBLC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?M?K?$LL?$LJ?$LB?$KI?C?$PL?$LH?Q?$CFI64d?$CFs?$KD?$KB@ DB 0cdH
	DB	0cbH, 0c8H, 0fcH, 0b3H, 0c9H, 0b9H, 0a6H, 0a3H, 0acH, 0cdH, 0cbH
	DB	0bbH, 0b9H, 0b1H, 0a8H, 0c3H, 0fbH, 0b7H, 0d1H, '%I64d%s', 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@
CONST	SEGMENT
??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@ DB 0d4H, 0aaH, 0b1H, 0a6H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@
CONST	SEGMENT
??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@ DB 0d3H, 0ceH, 0cfH, 0b7H, 0b1H, 0d2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CKEEGDHM@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LH@
CONST	SEGMENT
??_C@_0CJ@CKEEGDHM@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LH@ DB 0b9H
	DB	0a7H, 0cfH, 0b2H, 0a3H, 0acH, 0b1H, 0a8H, 0c3H, 0fbH, 0b3H, 0c9H
	DB	0b9H, 0a6H, 0a3H, 0acH, 0c7H, 0ebH, 0b5H, 0c8H, 0b4H, 0fdH, 0cfH
	DB	0b5H, 0cdH, 0b3H, 0ceH, 0aaH, 0c4H, 0faH, 0b7H, 0d6H, 0c5H, 0e4H
	DB	0d7H, 0f9H, 0ceH, 0bbH, 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CGCLAKLP@?$LB?$KI?C?$PL?J?$KH?$LA?$NM@
CONST	SEGMENT
??_C@_08CGCLAKLP@?$LB?$KI?C?$PL?J?$KH?$LA?$NM@ DB 0b1H, 0a8H, 0c3H, 0fbH, 0caH
	DB	0a7H, 0b0H, 0dcH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HDLOLBPO@?$LB?H?H?$PM?R?Q?$LO?$KN?$LP?$KK?J?$LM?0?$LB?$KI?C?$PL?J?$KH?$LA?$NM?0?G?k?V?X?P?B?$LB?$KI?C@
CONST	SEGMENT
??_C@_0CN@HDLOLBPO@?$LB?H?H?$PM?R?Q?$LO?$KN?$LP?$KK?J?$LM?0?$LB?$KI?C?$PL?J?$KH?$LA?$NM?0?G?k?V?X?P?B?$LB?$KI?C@ DB 0b1H
	DB	0c8H, 0c8H, 0fcH, 0d2H, 0d1H, 0beH, 0adH, 0bfH, 0aaH, 0caH, 0bcH
	DB	',', 0b1H, 0a8H, 0c3H, 0fbH, 0caH, 0a7H, 0b0H, 0dcH, ',', 0c7H
	DB	0ebH, 0d6H, 0d8H, 0d0H, 0c2H, 0b1H, 0a8H, 0c3H, 0fbH, 0cfH, 0c2H
	DB	0d2H, 0bbH, 0b3H, 0a1H, 0b1H, 0c8H, 0c8H, 0fcH, 0a3H, 0a1H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA DD 0deH ; `CImmediateMatch::OnEventDataBase'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OnEventTimer@CImmediateMatch@@UAE_NKI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnEventTimer@CImmediateMatch@@UAE_NKI@Z@4JA DD 0b2H ; `CImmediateMatch::OnEventTimer'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z@4JA DD 07aH ; `CImmediateMatch::InitMatchInterface'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z@4JA DD 065H ; `CImmediateMatch::BindTableFrame'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??OnStartService@CImmediateMatch@@UAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??OnStartService@CImmediateMatch@@UAEXXZ@4JA DD 04fH ; `CImmediateMatch::OnStartService'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0???1CImmediateMatch@@UAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1CImmediateMatch@@UAE@XZ@4JA DD 035H	; `CImmediateMatch::~CImmediateMatch'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?THIS_FILE@@3PADA DB 'g:\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H
	DB	0feH, 0ceH, 0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H
	DB	0a3H, 0bfH, 0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H
	DB	0e9H, 0bcH, 0feH, '\', 0b1H, 0c8H, 0c8H, 0fcH, 0b7H, 0feH, 0ceH
	DB	0f1H, '\immediatematch.cpp', 00H		; THIS_FILE
_DATA	ENDS
;	COMDAT ??_7CImmediateMatch@@6BIServerUserItemSink@@@
CONST	SEGMENT
??_7CImmediateMatch@@6BIServerUserItemSink@@@ DD FLAT:??_R4CImmediateMatch@@6BIServerUserItemSink@@@ ; CImmediateMatch::`vftable'
	DD	FLAT:?Release@CImmediateMatch@@W7AEXXZ
	DD	FLAT:?QueryInterface@CImmediateMatch@@W7AEPAXABU_GUID@@K@Z
	DD	FLAT:?OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z
	DD	FLAT:?OnEventUserItemGameData@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z
	DD	FLAT:?OnEventUserItemStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@GG@Z
	DD	FLAT:?OnEventUserItemRight@CImmediateMatch@@UAE_NPAUIServerUserItem@@KKE@Z
CONST	ENDS
;	COMDAT ??_7CImmediateMatch@@6BIImmediateGroupSink@@@
CONST	SEGMENT
??_7CImmediateMatch@@6BIImmediateGroupSink@@@ DD FLAT:??_R4CImmediateMatch@@6BIImmediateGroupSink@@@ ; CImmediateMatch::`vftable'
	DD	FLAT:?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z
	DD	FLAT:?OnEventMatchOver@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z
	DD	FLAT:?KillGameTimer@CImmediateMatch@@UAE_NKPAVCImmediateGroup@@@Z
	DD	FLAT:?SetGameTimer@CImmediateMatch@@UAE_NKKKIPAVCImmediateGroup@@@Z
	DD	FLAT:?SendMatchInfo@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?SendGroupUserMessage@CImmediateMatch@@UAE_NPBDPAVCImmediateGroup@@@Z
	DD	FLAT:?SendGroupUserScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z
	DD	FLAT:?SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z
	DD	FLAT:?SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z
	DD	FLAT:?SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z
	DD	FLAT:?SendGroupData@CImmediateMatch@@UAE_NGGPAXGPAVCImmediateGroup@@@Z
	DD	FLAT:?SendData@CImmediateMatch@@UAE_NPAUIServerUserItem@@GGPAXG@Z
	DD	FLAT:?InsertNullTable@CImmediateMatch@@UAEXXZ
	DD	FLAT:?GetFreeAndroidUserItem@CImmediateMatch@@UAEPAUIAndroidUserItem@@XZ
CONST	ENDS
;	COMDAT ??_7CImmediateMatch@@6BIGameMatchItem@@@
CONST	SEGMENT
??_7CImmediateMatch@@6BIGameMatchItem@@@ DD FLAT:??_R4CImmediateMatch@@6BIGameMatchItem@@@ ; CImmediateMatch::`vftable'
	DD	FLAT:?Release@CImmediateMatch@@UAEXXZ
	DD	FLAT:?QueryInterface@CImmediateMatch@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?OnStartService@CImmediateMatch@@UAEXXZ
	DD	FLAT:?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z
	DD	FLAT:?InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z
	DD	FLAT:?OnEventTimer@CImmediateMatch@@UAE_NKI@Z
	DD	FLAT:?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
	DD	FLAT:?OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z
	DD	FLAT:?OnEventUserLogon@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventUserLogout@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventUserLogonFinish@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventEnterMatch@CImmediateMatch@@UAE_NKPAXK_N@Z
	DD	FLAT:?OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z
	DD	FLAT:?OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z
	DD	FLAT:??_ECImmediateMatch@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@ DD FLAT:??_R4?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@EABE@@6B@
CONST	SEGMENT
??_7?$CWHArray@EABE@@6B@ DD FLAT:??_R4?$CWHArray@EABE@@6B@ ; CWHArray<unsigned char,unsigned char const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@EABE@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@ DD FLAT:??_R4?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CMatchServiceManager@@6B@
CONST	SEGMENT
??_7CMatchServiceManager@@6B@ DD FLAT:??_R4CMatchServiceManager@@6B@ ; CMatchServiceManager::`vftable'
	DD	FLAT:?Release@CMatchServiceManager@@UAEXXZ
	DD	FLAT:?QueryInterface@CMatchServiceManager@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?StopService@CMatchServiceManager@@UAE_NXZ
	DD	FLAT:?StartService@CMatchServiceManager@@UAE_NXZ
	DD	FLAT:?CreateGameMatch@CMatchServiceManager@@UAE_NE@Z
	DD	FLAT:?BindTableFrame@CMatchServiceManager@@UAE_NPAUITableFrame@@G@Z
	DD	FLAT:?InitMatchInterface@CMatchServiceManager@@UAE_NAAUtagMatchManagerParameter@@@Z
	DD	FLAT:?OnEventTimer@CMatchServiceManager@@UAE_NKI@Z
	DD	FLAT:?OnEventDataBase@CMatchServiceManager@@UAE_NGPAUIServerUserItem@@PAXGK@Z
	DD	FLAT:?OnEventSocketMatch@CMatchServiceManager@@UAE_NGPAXGPAUIServerUserItem@@K@Z
	DD	FLAT:?OnEventUserLogon@CMatchServiceManager@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventUserLogout@CMatchServiceManager@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventUserLogonFinish@CMatchServiceManager@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?OnEventEnterMatch@CMatchServiceManager@@UAE_NKPAXK_N@Z
	DD	FLAT:?OnEventUserJoinMatch@CMatchServiceManager@@UAE_NPAUIServerUserItem@@EK@Z
	DD	FLAT:?OnEventUserQuitMatch@CMatchServiceManager@@UAE_NPAUIServerUserItem@@EPAGK@Z
	DD	FLAT:?GetServerUserItemSink@CMatchServiceManager@@UAEPAUIUnknownEx@@XZ
	DD	FLAT:??_ECMatchServiceManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@ DD FLAT:??_R4?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7IImmediateGroupSink@@6B@
CONST	SEGMENT
??_7IImmediateGroupSink@@6B@ DD FLAT:??_R4IImmediateGroupSink@@6B@ ; IImmediateGroupSink::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IGameMatchItem@@6B@
CONST	SEGMENT
??_7IGameMatchItem@@6B@ DD FLAT:??_R4IGameMatchItem@@6B@ ; IGameMatchItem::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IMatchServiceManager@@6B@
CONST	SEGMENT
??_7IMatchServiceManager@@6B@ DD FLAT:??_R4IMatchServiceManager@@6B@ ; IMatchServiceManager::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\afxtempl.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_7IServerUserItemSink@@6B@
CONST	SEGMENT
??_7IServerUserItemSink@@6B@ DD FLAT:??_R4IServerUserItemSink@@6B@ ; IServerUserItemSink::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA DD 025fH ; `ATL::CTime::GetLocalTm'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ DB '_'
	DB	00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
CONST	SEGMENT
??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@ DB 'AtlThrow: hr = 0x'
	DB	'%x', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\atlexcept.h', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA DD 041H	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H
	DB	's', 00H, '%', 00H, 'l', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'u', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '-', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?m_nCategory@CTrace@ATL@@1IA
_DATA	SEGMENT
?m_nCategory@CTrace@ATL@@1IA DD 0ffffffffH		; ATL::CTrace::m_nCategory
_DATA	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z$0
__unwindtable$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z$2
__ehfuncinfo$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z
	DD	01H
	DD	FLAT:__tryblocktable$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z$0
__ehfuncinfo$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z$0
__unwindtable$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z$2
__ehfuncinfo$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
	DD	01H
	DD	FLAT:__tryblocktable$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z$0
__unwindtable$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z$2
__ehfuncinfo$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z$0
__ehfuncinfo$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnStartService@CImmediateMatch@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnStartService@CImmediateMatch@@UAEXXZ$0
__ehfuncinfo$?OnStartService@CImmediateMatch@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnStartService@CImmediateMatch@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CImmediateMatch@@UAE@XZ$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CImmediateMatch@@UAE@XZ$4
__catchsym$??1CImmediateMatch@@UAE@XZ$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CImmediateMatch@@UAE@XZ$2
__catchsym$??1CImmediateMatch@@UAE@XZ$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CImmediateMatch@@UAE@XZ$0
__ehfuncinfo$??1CImmediateMatch@@UAE@XZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??1CImmediateMatch@@UAE@XZ
	DD	03H
	DD	FLAT:__tryblocktable$??1CImmediateMatch@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__tryblocktable$??1CImmediateMatch@@UAE@XZ DD 05H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??1CImmediateMatch@@UAE@XZ$11
	DD	07H
	DD	07H
	DD	08H
	DD	01H
	DD	FLAT:__catchsym$??1CImmediateMatch@@UAE@XZ$12
	DD	09H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$??1CImmediateMatch@@UAE@XZ$13
__unwindtable$??1CImmediateMatch@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CImmediateMatch@@UAE@XZ$6
	DD	00H
	DD	FLAT:__unwindfunclet$??1CImmediateMatch@@UAE@XZ$7
	DD	01H
	DD	FLAT:__unwindfunclet$??1CImmediateMatch@@UAE@XZ$8
	DD	02H
	DD	FLAT:__unwindfunclet$??1CImmediateMatch@@UAE@XZ$9
	DD	03H
	DD	FLAT:__unwindfunclet$??1CImmediateMatch@@UAE@XZ$10
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CImmediateMatch@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CImmediateMatch@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CImmediateMatch@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CImmediateMatch@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CImmediateMatch@@QAE@XZ$3
__ehfuncinfo$??0CImmediateMatch@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CImmediateMatch@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECMatchServiceManager@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0
__ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1
__ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?QueryInterface@CImmediateMatch@@W7AEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
?QueryInterface@CImmediateMatch@@W7AEPAXABU_GUID@@K@Z PROC ; [thunk]:CImmediateMatch::QueryInterface`adjustor{8}', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ?QueryInterface@CImmediateMatch@@UAEPAXABU_GUID@@K@Z ; CImmediateMatch::QueryInterface
?QueryInterface@CImmediateMatch@@W7AEPAXABU_GUID@@K@Z ENDP ; [thunk]:CImmediateMatch::QueryInterface`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?Release@CImmediateMatch@@W7AEXXZ
_TEXT	SEGMENT
?Release@CImmediateMatch@@W7AEXXZ PROC			; [thunk]:CImmediateMatch::Release`adjustor{8}', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ?Release@CImmediateMatch@@UAEXXZ ; CImmediateMatch::Release
?Release@CImmediateMatch@@W7AEXXZ ENDP			; [thunk]:CImmediateMatch::Release`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ PROC		; _snprintf_s<256>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	68 00 01 00 00	 push	 256			; 00000100H
  00020	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __vsnprintf_s
  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ENDP		; _snprintf_s<256>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ PROC		; _snprintf_s<128>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	68 80 00 00 00	 push	 128			; 00000080H
  00020	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __vsnprintf_s
  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ENDP		; _snprintf_s<128>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCImmediateMatch@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImmediateMatch@@UAEPAXI@Z PROC			; CImmediateMatch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CImmediateMatch@@UAE@XZ ; CImmediateMatch::~CImmediateMatch
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 f0 01 00 00	 push	 496			; 000001f0H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCImmediateMatch@@UAEPAXI@Z ENDP			; CImmediateMatch::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z
_TEXT	SEGMENT
tv81 = -512						; size = 4
tv226 = -508						; size = 8
tv186 = -504						; size = 4
_MatchReward$1 = -436					; size = 32
_szMessage$2 = -404					; size = 256
_MatchResult$3 = -148					; size = 134
_bWriteReward$ = -9					; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_pMatchRankInfo$ = 12					; size = 4
?WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z PROC ; CImmediateMatch::WriteUserAward, COMDAT
; _this$ = ecx

; 1400 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 02 00
	00		 sub	 esp, 512		; 00000200H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1401 : 	//参数效验
; 1402 : 	ASSERT(pIServerUserItem!=NULL && pMatchRankInfo!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	74 06		 je	 SHORT $LN9@WriteUserA
  0001f	83 7d 0c 00	 cmp	 DWORD PTR _pMatchRankInfo$[ebp], 0
  00023	75 18		 jne	 SHORT $LN10@WriteUserA
$LN9@WriteUserA:
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z@4JA
  0002a	83 c0 02	 add	 eax, 2
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00033	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00038	85 c0		 test	 eax, eax
  0003a	74 01		 je	 SHORT $LN10@WriteUserA
  0003c	cc		 int	 3
$LN10@WriteUserA:

; 1403 : 	if(pIServerUserItem==NULL || pMatchRankInfo==NULL) return false;

  0003d	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00041	74 06		 je	 SHORT $LN3@WriteUserA
  00043	83 7d 0c 00	 cmp	 DWORD PTR _pMatchRankInfo$[ebp], 0
  00047	75 07		 jne	 SHORT $LN2@WriteUserA
$LN3@WriteUserA:
  00049	32 c0		 xor	 al, al
  0004b	e9 57 02 00 00	 jmp	 $LN1@WriteUserA
$LN2@WriteUserA:

; 1404 : 
; 1405 : 	//写入判断
; 1406 : 	bool bWriteReward=(pMatchRankInfo->lRewardGold+pMatchRankInfo->lRewardIngot+pMatchRankInfo->dwRewardExperience)>0;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00053	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatchRankInfo$[ebp]
  00056	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00059	03 51 18	 add	 edx, DWORD PTR [ecx+24]
  0005c	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0005f	13 41 1c	 adc	 eax, DWORD PTR [ecx+28]
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatchRankInfo$[ebp]
  00065	33 f6		 xor	 esi, esi
  00067	03 51 20	 add	 edx, DWORD PTR [ecx+32]
  0006a	13 c6		 adc	 eax, esi
  0006c	89 95 04 fe ff
	ff		 mov	 DWORD PTR tv226[ebp], edx
  00072	89 85 08 fe ff
	ff		 mov	 DWORD PTR tv226[ebp+4], eax
  00078	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR tv226[ebp+4], 0
  0007f	7c 17		 jl	 SHORT $LN11@WriteUserA
  00081	7f 09		 jg	 SHORT $LN15@WriteUserA
  00083	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR tv226[ebp], 0
  0008a	76 0c		 jbe	 SHORT $LN11@WriteUserA
$LN15@WriteUserA:
  0008c	c7 85 00 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv81[ebp], 1
  00096	eb 0a		 jmp	 SHORT $LN12@WriteUserA
$LN11@WriteUserA:
  00098	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN12@WriteUserA:
  000a2	8a 95 00 fe ff
	ff		 mov	 dl, BYTE PTR tv81[ebp]
  000a8	88 55 f7	 mov	 BYTE PTR _bWriteReward$[ebp], dl

; 1407 : 
; 1408 : 	//写入奖励
; 1409 : 	if (bWriteReward==true)

  000ab	0f b6 45 f7	 movzx	 eax, BYTE PTR _bWriteReward$[ebp]
  000af	83 f8 01	 cmp	 eax, 1
  000b2	0f 85 d9 00 00
	00		 jne	 $LN4@WriteUserA

; 1410 : 	{
; 1411 : 		//变量定义
; 1412 : 		CMD_GR_MatchResult MatchResult;
; 1413 : 		ZeroMemory(&MatchResult,sizeof(MatchResult));

  000b8	68 86 00 00 00	 push	 134			; 00000086H
  000bd	6a 00		 push	 0
  000bf	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _MatchResult$3[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _memset
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1414 : 
; 1415 : 		//比赛奖励
; 1416 : 		GetSystemTime(&MatchResult.MatchEndTime);

  000ce	8d 45 e2	 lea	 eax, DWORD PTR _MatchResult$3[ebp+118]
  000d1	50		 push	 eax
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4

; 1417 : 		MatchResult.wMatchRank=pMatchRankInfo->wRankID;			

  000d8	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  000db	66 8b 08	 mov	 cx, WORD PTR [eax]
  000de	66 89 4d a0	 mov	 WORD PTR _MatchResult$3[ebp+52], cx

; 1418 : 		MatchResult.lGold=pMatchRankInfo->lRewardGold;

  000e2	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  000e5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e8	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _MatchResult$3[ebp], ecx
  000ee	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  000f1	89 95 70 ff ff
	ff		 mov	 DWORD PTR _MatchResult$3[ebp+4], edx

; 1419 : 		MatchResult.lIngot=pMatchRankInfo->lRewardIngot;

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  000fa	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000fd	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _MatchResult$3[ebp+8], ecx
  00103	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00106	89 95 78 ff ff
	ff		 mov	 DWORD PTR _MatchResult$3[ebp+12], edx

; 1420 : 		MatchResult.dwExperience=pMatchRankInfo->dwRewardExperience;

  0010c	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  0010f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00112	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _MatchResult$3[ebp+16], ecx

; 1421 : 		lstrcpyn(MatchResult.szNickName,pIServerUserItem->GetNickName(),CountArray(MatchResult.szNickName));

  00118	6a 20		 push	 32			; 00000020H
  0011a	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0011d	8b 10		 mov	 edx, DWORD PTR [eax]
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00122	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00125	ff d0		 call	 eax
  00127	50		 push	 eax
  00128	8d 4d 80	 lea	 ecx, DWORD PTR _MatchResult$3[ebp+20]
  0012b	51		 push	 ecx
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1422 : 		lstrcpyn(MatchResult.szMatchName,m_pMatchOption->szMatchName,CountArray(MatchResult.szMatchName));

  00132	6a 40		 push	 64			; 00000040H
  00134	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00137	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0013d	83 c1 12	 add	 ecx, 18			; 00000012H
  00140	51		 push	 ecx
  00141	8d 55 a2	 lea	 edx, DWORD PTR _MatchResult$3[ebp+54]
  00144	52		 push	 edx
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1423 : 
; 1424 : 		//发送数据
; 1425 : 		if (pIServerUserItem->IsAndroidUser()==false)

  0014b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0014e	8b 10		 mov	 edx, DWORD PTR [eax]
  00150	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00153	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00159	ff d0		 call	 eax
  0015b	0f b6 c8	 movzx	 ecx, al
  0015e	85 c9		 test	 ecx, ecx
  00160	75 2d		 jne	 SHORT $LN6@WriteUserA

; 1426 : 		{
; 1427 : 			m_pIGameServiceFrame->SendData(pIServerUserItem, MDM_GF_FRAME, SUB_GR_MATCH_RESULT, &MatchResult, sizeof(MatchResult));

  00162	68 86 00 00 00	 push	 134			; 00000086H
  00167	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _MatchResult$3[ebp]
  0016d	50		 push	 eax
  0016e	6a 09		 push	 9
  00170	6a 64		 push	 100			; 00000064H
  00172	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00175	51		 push	 ecx
  00176	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00179	8b 82 e0 01 00
	00		 mov	 eax, DWORD PTR [edx+480]
  0017f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00182	8b 10		 mov	 edx, DWORD PTR [eax]
  00184	8b 89 e0 01 00
	00		 mov	 ecx, DWORD PTR [ecx+480]
  0018a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0018d	ff d0		 call	 eax
$LN6@WriteUserA:

; 1428 : 
; 1429 : 			//构造消息
; 1430 : 			//TCHAR szMessage[256]=TEXT("\0");
; 1431 : 			//_sntprintf_s(szMessage,CountArray(szMessage),TEXT("点击查看比赛排行：http://service.foxuc.com/GameMatch.aspx?PlazaStationID=%d&TypeID=2&MatchID=%d"),
; 1432 : 			//pIServerUserItem->GetPlazaStationID(),m_pMatchOption->dwMatchID);
; 1433 : 
; 1434 : 			////发送消息
; 1435 : 			//m_pIGameServiceFrame->SendGameMessage(pIServerUserItem,szMessage,SMT_CHAT|SMT_GLOBAL);	
; 1436 : 		}
; 1437 : 	}
; 1438 : 	else

  0018f	eb 48		 jmp	 SHORT $LN5@WriteUserA
$LN4@WriteUserA:

; 1439 : 	{
; 1440 : 		//构造消息
; 1441 : 		TCHAR szMessage[256];
; 1442 : 		_sntprintf_s(szMessage,CountArray(szMessage),TEXT("比赛已结束，恭喜您获得第%d名，欢迎您参加其他场次的比赛！"),pMatchRankInfo->wRankID);

  00191	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00194	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00197	51		 push	 ecx
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@PHNPOIHK@?$LB?H?H?$PM?R?Q?$LN?a?J?x?$KD?$KM?$LJ?$KH?O?$LC?D?z?$LL?q?$LF?C?$LF?Z?$CFd?C?$PL?$KD?$KM?$LL@
  0019d	68 00 01 00 00	 push	 256			; 00000100H
  001a2	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _szMessage$2[ebp]
  001a8	52		 push	 edx
  001a9	e8 00 00 00 00	 call	 ??$_snprintf_s@$0BAA@@@YAHAAY0BAA@DIPBDZZ ; _snprintf_s<256>
  001ae	83 c4 10	 add	 esp, 16			; 00000010H

; 1443 : 
; 1444 : 		//发送消息
; 1445 : 		SendGameMessage(pIServerUserItem, szMessage, SMT_CHAT|SMT_EJECT|SMT_CLOSE_GAME|SMT_MATCHRESULT);

  001b1	68 03 12 00 00	 push	 4611			; 00001203H
  001b6	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _szMessage$2[ebp]
  001bc	50		 push	 eax
  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001c0	51		 push	 ecx
  001c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	83 c1 04	 add	 ecx, 4
  001c7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001ca	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001cd	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  001d0	ff d2		 call	 edx

; 1446 : 
; 1447 : 		return true;

  001d2	b0 01		 mov	 al, 1
  001d4	e9 ce 00 00 00	 jmp	 $LN1@WriteUserA
$LN5@WriteUserA:

; 1448 : 	}
; 1449 : 
; 1450 : 	//写入记录
; 1451 : 	if(m_pIDataBaseEngine!=NULL)

  001d9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001dc	83 b8 d8 01 00
	00 00		 cmp	 DWORD PTR [eax+472], 0
  001e3	0f 84 bc 00 00
	00		 je	 $LN7@WriteUserA

; 1452 : 	{
; 1453 : 		//变量定义
; 1454 : 		DBR_GR_MatchReward MatchReward;
; 1455 : 		ZeroMemory(&MatchReward,sizeof(MatchReward));

  001e9	6a 20		 push	 32			; 00000020H
  001eb	6a 00		 push	 0
  001ed	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _MatchReward$1[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 _memset
  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1456 : 		
; 1457 : 		//构造结构
; 1458 : 		MatchReward.dwUserID=pMatchRankInfo->dwUserID;			

  001fc	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  001ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00202	89 8d 4c fe ff
	ff		 mov	 DWORD PTR _MatchReward$1[ebp], ecx

; 1459 : 		MatchReward.lRewardGold=pMatchRankInfo->lRewardGold;

  00208	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  0020b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0020e	89 8d 54 fe ff
	ff		 mov	 DWORD PTR _MatchReward$1[ebp+8], ecx
  00214	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00217	89 95 58 fe ff
	ff		 mov	 DWORD PTR _MatchReward$1[ebp+12], edx

; 1460 : 		MatchReward.lRewardIngot=pMatchRankInfo->lRewardIngot;

  0021d	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00220	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00223	89 8d 5c fe ff
	ff		 mov	 DWORD PTR _MatchReward$1[ebp+16], ecx
  00229	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0022c	89 95 60 fe ff
	ff		 mov	 DWORD PTR _MatchReward$1[ebp+20], edx

; 1461 : 		MatchReward.dwRewardExperience=pMatchRankInfo->dwRewardExperience;

  00232	8b 45 0c	 mov	 eax, DWORD PTR _pMatchRankInfo$[ebp]
  00235	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00238	89 8d 64 fe ff
	ff		 mov	 DWORD PTR _MatchReward$1[ebp+24], ecx

; 1462 : 		MatchReward.dwClientAddr=pIServerUserItem?pIServerUserItem->GetClientAddr():0;

  0023e	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00242	74 15		 je	 SHORT $LN13@WriteUserA
  00244	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00247	8b 10		 mov	 edx, DWORD PTR [eax]
  00249	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0024c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0024f	ff d0		 call	 eax
  00251	89 85 08 fe ff
	ff		 mov	 DWORD PTR tv186[ebp], eax
  00257	eb 0a		 jmp	 SHORT $LN14@WriteUserA
$LN13@WriteUserA:
  00259	c7 85 08 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
$LN14@WriteUserA:
  00263	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR tv186[ebp]
  00269	89 8d 68 fe ff
	ff		 mov	 DWORD PTR _MatchReward$1[ebp+28], ecx

; 1463 : 
; 1464 : 		//投递数据
; 1465 : 		m_pIDataBaseEngine->PostDataBaseRequest(MatchReward.dwUserID,DBR_GR_MATCH_REWARD,0,&MatchReward,sizeof(MatchReward));

  0026f	6a 00		 push	 0
  00271	6a 20		 push	 32			; 00000020H
  00273	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _MatchReward$1[ebp]
  00279	50		 push	 eax
  0027a	6a 00		 push	 0
  0027c	68 60 02 00 00	 push	 608			; 00000260H
  00281	8b 8d 4c fe ff
	ff		 mov	 ecx, DWORD PTR _MatchReward$1[ebp]
  00287	51		 push	 ecx
  00288	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0028b	8b 82 d8 01 00
	00		 mov	 eax, DWORD PTR [edx+472]
  00291	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00294	8b 91 d8 01 00
	00		 mov	 edx, DWORD PTR [ecx+472]
  0029a	8b 00		 mov	 eax, DWORD PTR [eax]
  0029c	52		 push	 edx
  0029d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002a0	ff d1		 call	 ecx
  002a2	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN7@WriteUserA:

; 1466 : 	}
; 1467 : 
; 1468 : 	return true;

  002a5	b0 01		 mov	 al, 1
$LN1@WriteUserA:

; 1469 : }

  002a7	5f		 pop	 edi
  002a8	5e		 pop	 esi
  002a9	5b		 pop	 ebx
  002aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ad	33 cd		 xor	 ecx, ebp
  002af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b4	8b e5		 mov	 esp, ebp
  002b6	5d		 pop	 ebp
  002b7	c2 08 00	 ret	 8
?WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z ENDP ; CImmediateMatch::WriteUserAward
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_pOnLineUserItem$1 = -12				; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z PROC ; CImmediateMatch::RemoveMatchUserItem, COMDAT
; _this$ = ecx

; 1549 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1550 : 	for (INT_PTR i=0;i<m_OnMatchUserItem.GetCount();i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@RemoveMatc
$LN2@RemoveMatc:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@RemoveMatc:
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 24	 add	 ecx, 36			; 00000024H
  00024	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QBEHXZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::GetCount
  00029	39 45 f8	 cmp	 DWORD PTR _i$2[ebp], eax
  0002c	7d 6f		 jge	 SHORT $LN3@RemoveMatc

; 1551 : 	{
; 1552 : 		//获取用户
; 1553 : 		IServerUserItem * pOnLineUserItem=m_OnMatchUserItem[i];

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 24	 add	 ecx, 36			; 00000024H
  00038	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::operator[]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 4d f4	 mov	 DWORD PTR _pOnLineUserItem$1[ebp], ecx

; 1554 : 		
; 1555 : 		//用户判断
; 1556 : 		if (pOnLineUserItem==pIServerUserItem)

  00042	8b 45 f4	 mov	 eax, DWORD PTR _pOnLineUserItem$1[ebp]
  00045	3b 45 08	 cmp	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00048	75 4e		 jne	 SHORT $LN5@RemoveMatc

; 1557 : 		{
; 1558 : 			ASSERT(pOnLineUserItem->GetUserID()==pIServerUserItem->GetUserID());

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _pOnLineUserItem$1[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _pOnLineUserItem$1[ebp]
  00052	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00055	ff d0		 call	 eax
  00057	8b f0		 mov	 esi, eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0005c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00061	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00064	ff d0		 call	 eax
  00066	3b f0		 cmp	 esi, eax
  00068	74 19		 je	 SHORT $LN7@RemoveMatc
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z@4JA
  00070	83 c1 09	 add	 ecx, 9
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00079	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007e	85 c0		 test	 eax, eax
  00080	74 01		 je	 SHORT $LN7@RemoveMatc
  00082	cc		 int	 3
$LN7@RemoveMatc:

; 1559 : 
; 1560 : 			m_OnMatchUserItem.RemoveAt(i);

  00083	6a 01		 push	 1
  00085	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00088	50		 push	 eax
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 24	 add	 ecx, 36			; 00000024H
  0008f	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHH@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::RemoveAt

; 1561 : 			return true;

  00094	b0 01		 mov	 al, 1
  00096	eb 07		 jmp	 SHORT $LN1@RemoveMatc
$LN5@RemoveMatc:

; 1562 : 		}
; 1563 : 	}

  00098	e9 78 ff ff ff	 jmp	 $LN2@RemoveMatc
$LN3@RemoveMatc:

; 1564 : 
; 1565 : 	return false;

  0009d	32 c0		 xor	 al, al
$LN1@RemoveMatc:

; 1566 : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z ENDP ; CImmediateMatch::RemoveMatchUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?DeleteUserItem@CImmediateMatch@@AAE_NK@Z
_TEXT	SEGMENT
$T2 = -89						; size = 1
$T3 = -88						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_dwUserIndex$ = 8					; size = 4
?DeleteUserItem@CImmediateMatch@@AAE_NK@Z PROC		; CImmediateMatch::DeleteUserItem, COMDAT
; _this$ = ecx

; 1529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 : 	try

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1531 : 	{
; 1532 : 		if (m_pITCPNetworkEngineEvent == NULL)

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 b8 dc 01 00
	00 00		 cmp	 DWORD PTR [eax+476], 0
  00040	75 15		 jne	 SHORT $LN3@DeleteUser

; 1533 : 		{
; 1534 : 			throw 0;

  00042	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  00049	68 00 00 00 00	 push	 OFFSET __TI1H
  0004e	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@DeleteUser:

; 1535 : 		}
; 1536 : 		m_pITCPNetworkEngineEvent->OnEventTCPNetworkShut(dwUserIndex,0,0L);

  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	8b 45 08	 mov	 eax, DWORD PTR _dwUserIndex$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  0006b	8b 10		 mov	 edx, DWORD PTR [eax]
  0006d	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  00073	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00076	ff d0		 call	 eax

; 1537 : 	}

  00078	eb 2d		 jmp	 SHORT $LN6@DeleteUser
__catch$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z$0:

; 1538 : 	catch (...)
; 1539 : 	{
; 1540 : 		//错误断言
; 1541 : 		ASSERT(FALSE);

  0007a	33 c0		 xor	 eax, eax
  0007c	75 19		 jne	 SHORT $LN5@DeleteUser
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DeleteUserItem@CImmediateMatch@@AAE_NK@Z@4JA
  00084	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00087	51		 push	 ecx
  00088	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0008d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00092	85 c0		 test	 eax, eax
  00094	74 01		 je	 SHORT $LN5@DeleteUser
  00096	cc		 int	 3
$LN5@DeleteUser:

; 1542 : 		return false;

  00097	c6 45 a7 00	 mov	 BYTE PTR $T2[ebp], 0
  0009b	b8 00 00 00 00	 mov	 eax, $LN9@DeleteUser
  000a0	c3		 ret	 0

; 1543 : 	}

  000a1	b8 00 00 00 00	 mov	 eax, $LN6@DeleteUser
  000a6	c3		 ret	 0
$LN6@DeleteUser:
  000a7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ae	eb 0c		 jmp	 SHORT $LN8@DeleteUser
$LN9@DeleteUser:
  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1542 : 		return false;

  000b7	8a 45 a7	 mov	 al, BYTE PTR $T2[ebp]
  000ba	eb 02		 jmp	 SHORT $LN4@DeleteUser
$LN8@DeleteUser:

; 1544 : 	return true;

  000bc	b0 01		 mov	 al, 1
$LN4@DeleteUser:

; 1545 : }

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DeleteUserItem@CImmediateMatch@@AAE_NK@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DeleteUserItem@CImmediateMatch@@AAE_NK@Z ENDP		; CImmediateMatch::DeleteUserItem
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?CalcMatchNo@CImmediateMatch@@AAE_JXZ
_TEXT	SEGMENT
_dwSecond$ = -40					; size = 4
_wYear$ = -36						; size = 2
_wMonth$ = -32						; size = 2
_wDay$ = -28						; size = 2
_SystemTime$ = -24					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?CalcMatchNo@CImmediateMatch@@AAE_JXZ PROC		; CImmediateMatch::CalcMatchNo, COMDAT
; _this$ = ecx

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1474 : 	//获取时间
; 1475 : 	SYSTEMTIME SystemTime;
; 1476 : 	GetLocalTime(&SystemTime); 

  00016	8d 45 e8	 lea	 eax, DWORD PTR _SystemTime$[ebp]
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 1477 : 
; 1478 : 	//时间分量
; 1479 : 	WORD wDay=SystemTime.wDay;	

  00020	66 8b 45 ee	 mov	 ax, WORD PTR _SystemTime$[ebp+6]
  00024	66 89 45 e4	 mov	 WORD PTR _wDay$[ebp], ax

; 1480 : 	WORD wMonth=SystemTime.wMonth;

  00028	66 8b 45 ea	 mov	 ax, WORD PTR _SystemTime$[ebp+2]
  0002c	66 89 45 e0	 mov	 WORD PTR _wMonth$[ebp], ax

; 1481 : 	WORD wYear=SystemTime.wYear-1980;

  00030	0f b7 45 e8	 movzx	 eax, WORD PTR _SystemTime$[ebp]
  00034	2d bc 07 00 00	 sub	 eax, 1980		; 000007bcH
  00039	66 89 45 dc	 mov	 WORD PTR _wYear$[ebp], ax

; 1482 : 	DWORD dwSecond=SystemTime.wHour*3600+SystemTime.wMinute*60+SystemTime.wSecond;

  0003d	0f b7 45 f0	 movzx	 eax, WORD PTR _SystemTime$[ebp+8]
  00041	69 c8 10 0e 00
	00		 imul	 ecx, eax, 3600
  00047	0f b7 55 f2	 movzx	 edx, WORD PTR _SystemTime$[ebp+10]
  0004b	6b c2 3c	 imul	 eax, edx, 60
  0004e	03 c8		 add	 ecx, eax
  00050	0f b7 55 f4	 movzx	 edx, WORD PTR _SystemTime$[ebp+12]
  00054	03 ca		 add	 ecx, edx
  00056	89 4d d8	 mov	 DWORD PTR _dwSecond$[ebp], ecx

; 1483 : 
; 1484 : 	//记录变量
; 1485 : 	static DWORD wMatchCount=0;
; 1486 : 	static DWORD wLastDay=SystemTime.wDay;	

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0005e	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00065	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4HA
  0006d	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00073	7e 2c		 jle	 SHORT $LN2@CalcMatchN
  00075	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4HA
  0007a	e8 00 00 00 00	 call	 __Init_thread_header
  0007f	83 c4 04	 add	 esp, 4
  00082	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4HA, -1
  00089	75 16		 jne	 SHORT $LN2@CalcMatchN
  0008b	0f b7 45 ee	 movzx	 eax, WORD PTR _SystemTime$[ebp+6]
  0008f	a3 00 00 00 00	 mov	 DWORD PTR ?wLastDay@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA, eax
  00094	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4HA
  00099	e8 00 00 00 00	 call	 __Init_thread_footer
  0009e	83 c4 04	 add	 esp, 4
$LN2@CalcMatchN:

; 1487 : 
; 1488 : 	//更新记录
; 1489 : 	if (SystemTime.wDay>wLastDay)

  000a1	0f b7 45 ee	 movzx	 eax, WORD PTR _SystemTime$[ebp+6]
  000a5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?wLastDay@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA
  000ab	76 15		 jbe	 SHORT $LN3@CalcMatchN

; 1490 : 	{
; 1491 : 		wMatchCount=1;

  000ad	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?wMatchCount@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA, 1

; 1492 : 		wLastDay=SystemTime.wDay;

  000b7	0f b7 45 ee	 movzx	 eax, WORD PTR _SystemTime$[ebp+6]
  000bb	a3 00 00 00 00	 mov	 DWORD PTR ?wLastDay@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA, eax

; 1493 : 	}
; 1494 : 	else

  000c0	eb 0d		 jmp	 SHORT $LN4@CalcMatchN
$LN3@CalcMatchN:

; 1495 : 	{
; 1496 : 		wMatchCount++;

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wMatchCount@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA
  000c7	83 c0 01	 add	 eax, 1
  000ca	a3 00 00 00 00	 mov	 DWORD PTR ?wMatchCount@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA, eax
$LN4@CalcMatchN:

; 1497 : 	}
; 1498 : 
; 1499 : 	return (LONGLONG(wYear)<<44|LONGLONG(wMonth)<<40|LONGLONG(wDay)<<34|LONGLONG(dwSecond)<<16|LONGLONG(wMatchCount));

  000cf	0f b7 45 dc	 movzx	 eax, WORD PTR _wYear$[ebp]
  000d3	99		 cdq
  000d4	b1 2c		 mov	 cl, 44			; 0000002cH
  000d6	e8 00 00 00 00	 call	 __allshl
  000db	8b f0		 mov	 esi, eax
  000dd	8b fa		 mov	 edi, edx
  000df	0f b7 45 e0	 movzx	 eax, WORD PTR _wMonth$[ebp]
  000e3	99		 cdq
  000e4	b1 28		 mov	 cl, 40			; 00000028H
  000e6	e8 00 00 00 00	 call	 __allshl
  000eb	0b f0		 or	 esi, eax
  000ed	0b fa		 or	 edi, edx
  000ef	0f b7 45 e4	 movzx	 eax, WORD PTR _wDay$[ebp]
  000f3	99		 cdq
  000f4	b1 22		 mov	 cl, 34			; 00000022H
  000f6	e8 00 00 00 00	 call	 __allshl
  000fb	0b f0		 or	 esi, eax
  000fd	0b fa		 or	 edi, edx
  000ff	33 d2		 xor	 edx, edx
  00101	8b 45 d8	 mov	 eax, DWORD PTR _dwSecond$[ebp]
  00104	b1 10		 mov	 cl, 16			; 00000010H
  00106	e8 00 00 00 00	 call	 __allshl
  0010b	0b f0		 or	 esi, eax
  0010d	0b fa		 or	 edi, edx
  0010f	33 c0		 xor	 eax, eax
  00111	0b 35 00 00 00
	00		 or	 esi, DWORD PTR ?wMatchCount@?1??CalcMatchNo@CImmediateMatch@@AAE_JXZ@4KA
  00117	0b f8		 or	 edi, eax
  00119	8b c6		 mov	 eax, esi
  0011b	8b d7		 mov	 edx, edi

; 1500 : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?CalcMatchNo@CImmediateMatch@@AAE_JXZ ENDP		; CImmediateMatch::CalcMatchNo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?GetNullTable@CImmediateMatch@@AAEGXZ
_TEXT	SEGMENT
_wTableID$1 = -32					; size = 2
_k$2 = -28						; size = 4
_wMatchGroupTableCount$3 = -24				; size = 2
_j$4 = -20						; size = 4
_bIsInsert$5 = -16					; size = 4
_i$6 = -12						; size = 4
_wTableCount$ = -8					; size = 2
_this$ = -4						; size = 4
?GetNullTable@CImmediateMatch@@AAEGXZ PROC		; CImmediateMatch::GetNullTable, COMDAT
; _this$ = ecx

; 1504 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1505 : 	WORD wTableCount=0;

  0000c	33 c0		 xor	 eax, eax
  0000e	66 89 45 f8	 mov	 WORD PTR _wTableCount$[ebp], ax

; 1506 : 	for (int i=0;i<m_pGameServiceOption->wTableCount;i++)

  00012	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  00019	eb 09		 jmp	 SHORT $LN4@GetNullTab
$LN2@GetNullTab:
  0001b	8b 45 f4	 mov	 eax, DWORD PTR _i$6[ebp]
  0001e	83 c0 01	 add	 eax, 1
  00021	89 45 f4	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@GetNullTab:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 88 c8 01 00
	00		 mov	 ecx, DWORD PTR [eax+456]
  0002d	0f b7 51 46	 movzx	 edx, WORD PTR [ecx+70]
  00031	39 55 f4	 cmp	 DWORD PTR _i$6[ebp], edx
  00034	0f 8d f1 00 00
	00		 jge	 $LN3@GetNullTab

; 1507 : 	{
; 1508 : 		BOOL bIsInsert=true;

  0003a	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bIsInsert$5[ebp], 1

; 1509 : 		for (int j=0;j<m_MatchGroup.GetCount();j++)

  00041	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$4[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN7@GetNullTab
$LN5@GetNullTab:
  0004a	8b 45 ec	 mov	 eax, DWORD PTR _j$4[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 ec	 mov	 DWORD PTR _j$4[ebp], eax
$LN7@GetNullTab:
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00059	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  0005e	39 45 ec	 cmp	 DWORD PTR _j$4[ebp], eax
  00061	7d 78		 jge	 SHORT $LN6@GetNullTab

; 1510 : 		{
; 1511 : 			WORD wMatchGroupTableCount=(WORD)m_MatchGroup[j]->m_MatchTableArray.GetCount();

  00063	8b 45 ec	 mov	 eax, DWORD PTR _j$4[ebp]
  00066	50		 push	 eax
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0006d	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 c1 68	 add	 ecx, 104		; 00000068H
  00077	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount
  0007c	66 89 45 e8	 mov	 WORD PTR _wMatchGroupTableCount$3[ebp], ax

; 1512 : 			for (int k=0;k<wMatchGroupTableCount;k++)

  00080	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _k$2[ebp], 0
  00087	eb 09		 jmp	 SHORT $LN10@GetNullTab
$LN8@GetNullTab:
  00089	8b 45 e4	 mov	 eax, DWORD PTR _k$2[ebp]
  0008c	83 c0 01	 add	 eax, 1
  0008f	89 45 e4	 mov	 DWORD PTR _k$2[ebp], eax
$LN10@GetNullTab:
  00092	0f b7 45 e8	 movzx	 eax, WORD PTR _wMatchGroupTableCount$3[ebp]
  00096	39 45 e4	 cmp	 DWORD PTR _k$2[ebp], eax
  00099	7d 3b		 jge	 SHORT $LN9@GetNullTab

; 1513 : 			{
; 1514 : 				WORD wTableID=m_MatchGroup[j]->m_MatchTableArray[k]->wTableID;

  0009b	8b 45 e4	 mov	 eax, DWORD PTR _k$2[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d ec	 mov	 ecx, DWORD PTR _j$4[ebp]
  000a2	51		 push	 ecx
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000a9	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	83 c1 68	 add	 ecx, 104		; 00000068H
  000b3	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[]
  000b8	8b 10		 mov	 edx, DWORD PTR [eax]
  000ba	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  000be	66 89 45 e0	 mov	 WORD PTR _wTableID$1[ebp], ax

; 1515 : 				if(i==wTableID){bIsInsert=false;break;}//其他组已经分配了该桌

  000c2	0f b7 45 e0	 movzx	 eax, WORD PTR _wTableID$1[ebp]
  000c6	39 45 f4	 cmp	 DWORD PTR _i$6[ebp], eax
  000c9	75 09		 jne	 SHORT $LN11@GetNullTab
  000cb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bIsInsert$5[ebp], 0
  000d2	eb 02		 jmp	 SHORT $LN9@GetNullTab
$LN11@GetNullTab:

; 1516 : 			}

  000d4	eb b3		 jmp	 SHORT $LN8@GetNullTab
$LN9@GetNullTab:

; 1517 : 		}

  000d6	e9 6f ff ff ff	 jmp	 $LN5@GetNullTab
$LN6@GetNullTab:

; 1518 : 		//插入桌子
; 1519 : 		if( bIsInsert&&m_ppITableFrame[i]->GetNullChairCount()==m_pGameServiceAttrib->wChairCount)

  000db	83 7d f0 00	 cmp	 DWORD PTR _bIsInsert$5[ebp], 0
  000df	74 45		 je	 SHORT $LN12@GetNullTab
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  000ea	8b 55 f4	 mov	 edx, DWORD PTR _i$6[ebp]
  000ed	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR _i$6[ebp]
  000fc	8b 00		 mov	 eax, DWORD PTR [eax]
  000fe	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00101	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00104	ff d2		 call	 edx
  00106	0f b7 c0	 movzx	 eax, ax
  00109	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	8b 91 cc 01 00
	00		 mov	 edx, DWORD PTR [ecx+460]
  00112	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  00116	3b c1		 cmp	 eax, ecx
  00118	75 0c		 jne	 SHORT $LN12@GetNullTab

; 1520 : 		{
; 1521 : 			wTableCount++;

  0011a	66 8b 45 f8	 mov	 ax, WORD PTR _wTableCount$[ebp]
  0011e	66 83 c0 01	 add	 ax, 1
  00122	66 89 45 f8	 mov	 WORD PTR _wTableCount$[ebp], ax
$LN12@GetNullTab:

; 1522 : 		}
; 1523 : 	}

  00126	e9 f0 fe ff ff	 jmp	 $LN2@GetNullTab
$LN3@GetNullTab:

; 1524 : 	return wTableCount;

  0012b	66 8b 45 f8	 mov	 ax, WORD PTR _wTableCount$[ebp]

; 1525 : }

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c3		 ret	 0
?GetNullTable@CImmediateMatch@@AAEGXZ ENDP		; CImmediateMatch::GetNullTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?GetFreeAndroidUserItem@CImmediateMatch@@UAEPAUIAndroidUserItem@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFreeAndroidUserItem@CImmediateMatch@@UAEPAUIAndroidUserItem@@XZ PROC ; CImmediateMatch::GetFreeAndroidUserItem, COMDAT
; _this$ = ecx

; 1394 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1395 : 	return NULL;

  0000c	33 c0		 xor	 eax, eax

; 1396 : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetFreeAndroidUserItem@CImmediateMatch@@UAEPAUIAndroidUserItem@@XZ ENDP ; CImmediateMatch::GetFreeAndroidUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?InsertNullTable@CImmediateMatch@@UAEXXZ
_TEXT	SEGMENT
tv218 = -116						; size = 4
tv248 = -112						; size = 4
tv224 = -112						; size = 4
$T1 = -108						; size = 4
_pFrameHook$2 = -40					; size = 4
_pTableFrameInfo$3 = -36				; size = 4
_wTableID$4 = -32					; size = 2
_k$5 = -28						; size = 4
_wMatchGroupTableCount$6 = -24				; size = 2
_j$7 = -20						; size = 4
_bIsInsert$8 = -16					; size = 4
_nCurTableCount$9 = -12					; size = 2
_i$10 = -8						; size = 4
_this$ = -4						; size = 4
?InsertNullTable@CImmediateMatch@@UAEXXZ PROC		; CImmediateMatch::InsertNullTable, COMDAT
; _this$ = ecx

; 1360 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1361 : 	for (int i=0;i<m_pGameServiceOption->wTableCount;i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$10[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@InsertNull
$LN2@InsertNull:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$10[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$10[ebp], eax
$LN4@InsertNull:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  00027	0f b7 51 46	 movzx	 edx, WORD PTR [ecx+70]
  0002b	39 55 f8	 cmp	 DWORD PTR _i$10[ebp], edx
  0002e	0f 8d 5c 02 00
	00		 jge	 $LN1@InsertNull

; 1362 : 	{
; 1363 : 		//超过就退出
; 1364 : 		WORD nCurTableCount=(WORD)m_pCurMatchGroup->m_MatchTableArray.GetCount();

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  0003a	83 c1 68	 add	 ecx, 104		; 00000068H
  0003d	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount
  00042	66 89 45 f4	 mov	 WORD PTR _nCurTableCount$9[ebp], ax

; 1365 : 		if(nCurTableCount>=m_pImmediateMatch->wStartUserCount/CImmediateGroup::m_wChairCount)break;

  00046	0f b7 4d f4	 movzx	 ecx, WORD PTR _nCurTableCount$9[ebp]
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 82 c0 01 00
	00		 mov	 eax, DWORD PTR [edx+448]
  00053	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00056	0f b7 35 00 00
	00 00		 movzx	 esi, WORD PTR ?m_wChairCount@CImmediateGroup@@1GA ; CImmediateGroup::m_wChairCount
  0005d	99		 cdq
  0005e	f7 fe		 idiv	 esi
  00060	3b c8		 cmp	 ecx, eax
  00062	7c 05		 jl	 SHORT $LN11@InsertNull
  00064	e9 27 02 00 00	 jmp	 $LN1@InsertNull
$LN11@InsertNull:

; 1366 : 
; 1367 : 		BOOL bIsInsert=true;

  00069	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bIsInsert$8[ebp], 1

; 1368 : 		for (int j=0;j<m_MatchGroup.GetCount();j++)

  00070	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$7[ebp], 0
  00077	eb 09		 jmp	 SHORT $LN7@InsertNull
$LN5@InsertNull:
  00079	8b 45 ec	 mov	 eax, DWORD PTR _j$7[ebp]
  0007c	83 c0 01	 add	 eax, 1
  0007f	89 45 ec	 mov	 DWORD PTR _j$7[ebp], eax
$LN7@InsertNull:
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	83 c1 48	 add	 ecx, 72			; 00000048H
  00088	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  0008d	39 45 ec	 cmp	 DWORD PTR _j$7[ebp], eax
  00090	7d 78		 jge	 SHORT $LN6@InsertNull

; 1369 : 		{
; 1370 : 			WORD wMatchGroupTableCount=(WORD)m_MatchGroup[j]->m_MatchTableArray.GetCount();

  00092	8b 45 ec	 mov	 eax, DWORD PTR _j$7[ebp]
  00095	50		 push	 eax
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 48	 add	 ecx, 72			; 00000048H
  0009c	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	83 c1 68	 add	 ecx, 104		; 00000068H
  000a6	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount
  000ab	66 89 45 e8	 mov	 WORD PTR _wMatchGroupTableCount$6[ebp], ax

; 1371 : 			for (int k=0;k<wMatchGroupTableCount;k++)

  000af	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _k$5[ebp], 0
  000b6	eb 09		 jmp	 SHORT $LN10@InsertNull
$LN8@InsertNull:
  000b8	8b 45 e4	 mov	 eax, DWORD PTR _k$5[ebp]
  000bb	83 c0 01	 add	 eax, 1
  000be	89 45 e4	 mov	 DWORD PTR _k$5[ebp], eax
$LN10@InsertNull:
  000c1	0f b7 45 e8	 movzx	 eax, WORD PTR _wMatchGroupTableCount$6[ebp]
  000c5	39 45 e4	 cmp	 DWORD PTR _k$5[ebp], eax
  000c8	7d 3b		 jge	 SHORT $LN9@InsertNull

; 1372 : 			{
; 1373 : 				WORD wTableID=m_MatchGroup[j]->m_MatchTableArray[k]->wTableID;

  000ca	8b 45 e4	 mov	 eax, DWORD PTR _k$5[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d ec	 mov	 ecx, DWORD PTR _j$7[ebp]
  000d1	51		 push	 ecx
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	83 c1 48	 add	 ecx, 72			; 00000048H
  000d8	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	83 c1 68	 add	 ecx, 104		; 00000068H
  000e2	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[]
  000e7	8b 10		 mov	 edx, DWORD PTR [eax]
  000e9	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  000ed	66 89 45 e0	 mov	 WORD PTR _wTableID$4[ebp], ax

; 1374 : 				if(i==wTableID){bIsInsert=false;break;}//其他组已经分配了该桌

  000f1	0f b7 45 e0	 movzx	 eax, WORD PTR _wTableID$4[ebp]
  000f5	39 45 f8	 cmp	 DWORD PTR _i$10[ebp], eax
  000f8	75 09		 jne	 SHORT $LN12@InsertNull
  000fa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bIsInsert$8[ebp], 0
  00101	eb 02		 jmp	 SHORT $LN9@InsertNull
$LN12@InsertNull:

; 1375 : 			}

  00103	eb b3		 jmp	 SHORT $LN8@InsertNull
$LN9@InsertNull:

; 1376 : 		}

  00105	e9 6f ff ff ff	 jmp	 $LN5@InsertNull
$LN6@InsertNull:

; 1377 : 		//插入桌子
; 1378 : 		if( bIsInsert&&m_ppITableFrame[i]->GetNullChairCount()==m_pGameServiceAttrib->wChairCount)

  0010a	83 7d f0 00	 cmp	 DWORD PTR _bIsInsert$8[ebp], 0
  0010e	0f 84 77 01 00
	00		 je	 $LN13@InsertNull
  00114	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00117	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  0011d	8b 55 f8	 mov	 edx, DWORD PTR _i$10[ebp]
  00120	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00123	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	8b 91 cc 01 00
	00		 mov	 edx, DWORD PTR [ecx+460]
  0012c	8b 4d f8	 mov	 ecx, DWORD PTR _i$10[ebp]
  0012f	8b 00		 mov	 eax, DWORD PTR [eax]
  00131	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00134	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00137	ff d2		 call	 edx
  00139	0f b7 c0	 movzx	 eax, ax
  0013c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	8b 91 c8 01 00
	00		 mov	 edx, DWORD PTR [ecx+456]
  00145	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  00149	3b c1		 cmp	 eax, ecx
  0014b	0f 85 3a 01 00
	00		 jne	 $LN13@InsertNull

; 1379 : 		{
; 1380 : 			tagTableFrameInfo * pTableFrameInfo=new tagTableFrameInfo;

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??InsertNullTable@CImmediateMatch@@UAEXXZ@4JA
  00156	83 c0 14	 add	 eax, 20			; 00000014H
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0015f	6a 18		 push	 24			; 00000018H
  00161	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  00166	83 c4 0c	 add	 esp, 12			; 0000000cH
  00169	89 45 94	 mov	 DWORD PTR $T1[ebp], eax
  0016c	8b 4d 94	 mov	 ecx, DWORD PTR $T1[ebp]
  0016f	89 4d dc	 mov	 DWORD PTR _pTableFrameInfo$3[ebp], ecx

; 1381 : 			ZeroMemory(pTableFrameInfo,sizeof(tagTableFrameInfo));			

  00172	6a 18		 push	 24			; 00000018H
  00174	6a 00		 push	 0
  00176	8b 45 dc	 mov	 eax, DWORD PTR _pTableFrameInfo$3[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 _memset
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1382 : 			pTableFrameInfo->wTableID=i;

  00182	8b 45 dc	 mov	 eax, DWORD PTR _pTableFrameInfo$3[ebp]
  00185	66 8b 4d f8	 mov	 cx, WORD PTR _i$10[ebp]
  00189	66 89 48 04	 mov	 WORD PTR [eax+4], cx

; 1383 : 			pTableFrameInfo->pTableFrame=m_ppITableFrame[i];

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00190	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  00196	8b 55 dc	 mov	 edx, DWORD PTR _pTableFrameInfo$3[ebp]
  00199	8b 45 f8	 mov	 eax, DWORD PTR _i$10[ebp]
  0019c	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0019f	89 0a		 mov	 DWORD PTR [edx], ecx

; 1384 : 			pTableFrameInfo->lBaseScore=m_pImmediateMatch->lInitalBase;

  001a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a4	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  001aa	8b 55 dc	 mov	 edx, DWORD PTR _pTableFrameInfo$3[ebp]
  001ad	8b 41 06	 mov	 eax, DWORD PTR [ecx+6]
  001b0	89 42 08	 mov	 DWORD PTR [edx+8], eax
  001b3	8b 49 0a	 mov	 ecx, DWORD PTR [ecx+10]
  001b6	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1385 : 			ITableFrameHook * pFrameHook=QUERY_OBJECT_PTR_INTERFACE(m_ppITableFrame[i]->GetTableFrameHook(),ITableFrameHook);

  001b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bc	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  001c2	8b 55 f8	 mov	 edx, DWORD PTR _i$10[ebp]
  001c5	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001cb	8b 91 cc 01 00
	00		 mov	 edx, DWORD PTR [ecx+460]
  001d1	8b 4d f8	 mov	 ecx, DWORD PTR _i$10[ebp]
  001d4	8b 00		 mov	 eax, DWORD PTR [eax]
  001d6	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  001d9	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [eax+232]
  001df	ff d2		 call	 edx
  001e1	85 c0		 test	 eax, eax
  001e3	75 09		 jne	 SHORT $LN15@InsertNull
  001e5	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv224[ebp], 0
  001ec	eb 45		 jmp	 SHORT $LN16@InsertNull
$LN15@InsertNull:
  001ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f1	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  001f7	8b 55 f8	 mov	 edx, DWORD PTR _i$10[ebp]
  001fa	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00200	8b 91 cc 01 00
	00		 mov	 edx, DWORD PTR [ecx+460]
  00206	8b 4d f8	 mov	 ecx, DWORD PTR _i$10[ebp]
  00209	8b 00		 mov	 eax, DWORD PTR [eax]
  0020b	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  0020e	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [eax+232]
  00214	ff d2		 call	 edx
  00216	89 45 8c	 mov	 DWORD PTR tv218[ebp], eax
  00219	68 00 01 01 06	 push	 100729088		; 06010100H
  0021e	68 00 00 00 00	 push	 OFFSET ?IID_ITableFrameHook@@3U_GUID@@B
  00223	8b 45 8c	 mov	 eax, DWORD PTR tv218[ebp]
  00226	8b 10		 mov	 edx, DWORD PTR [eax]
  00228	8b 4d 8c	 mov	 ecx, DWORD PTR tv218[ebp]
  0022b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0022e	ff d0		 call	 eax
  00230	89 45 90	 mov	 DWORD PTR tv224[ebp], eax
$LN16@InsertNull:
  00233	8b 4d 90	 mov	 ecx, DWORD PTR tv224[ebp]
  00236	89 4d d8	 mov	 DWORD PTR _pFrameHook$2[ebp], ecx

; 1386 : 			pFrameHook->SetMatchEventSink(QUERY_OBJECT_PTR_INTERFACE(m_pCurMatchGroup,IUnknownEx));

  00239	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023c	83 78 70 00	 cmp	 DWORD PTR [eax+112], 0
  00240	75 09		 jne	 SHORT $LN17@InsertNull
  00242	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv248[ebp], 0
  00249	eb 20		 jmp	 SHORT $LN18@InsertNull
$LN17@InsertNull:
  0024b	68 00 01 01 06	 push	 100729088		; 06010100H
  00250	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00258	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0025b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025e	8b 12		 mov	 edx, DWORD PTR [edx]
  00260	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00263	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00266	ff d0		 call	 eax
  00268	89 45 90	 mov	 DWORD PTR tv248[ebp], eax
$LN18@InsertNull:
  0026b	8b 4d 90	 mov	 ecx, DWORD PTR tv248[ebp]
  0026e	51		 push	 ecx
  0026f	8b 55 d8	 mov	 edx, DWORD PTR _pFrameHook$2[ebp]
  00272	8b 02		 mov	 eax, DWORD PTR [edx]
  00274	8b 4d d8	 mov	 ecx, DWORD PTR _pFrameHook$2[ebp]
  00277	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0027a	ff d2		 call	 edx

; 1387 : 			m_pCurMatchGroup->AddMatchTable(pTableFrameInfo);

  0027c	8b 45 dc	 mov	 eax, DWORD PTR _pTableFrameInfo$3[ebp]
  0027f	50		 push	 eax
  00280	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00283	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00286	e8 00 00 00 00	 call	 ?AddMatchTable@CImmediateGroup@@IAEXPAUtagTableFrameInfo@@@Z ; CImmediateGroup::AddMatchTable
$LN13@InsertNull:

; 1388 : 		}
; 1389 : 	}

  0028b	e9 85 fd ff ff	 jmp	 $LN2@InsertNull
$LN1@InsertNull:

; 1390 : }

  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	5b		 pop	 ebx
  00293	8b e5		 mov	 esp, ebp
  00295	5d		 pop	 ebp
  00296	c3		 ret	 0
?InsertNullTable@CImmediateMatch@@UAEXXZ ENDP		; CImmediateMatch::InsertNullTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendData@CImmediateMatch@@UAE_NPAUIServerUserItem@@GGPAXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
_wMainCmdID$ = 12					; size = 2
_wSubCmdID$ = 16					; size = 2
_pData$ = 20						; size = 4
_wDataSize$ = 24					; size = 2
?SendData@CImmediateMatch@@UAE_NPAUIServerUserItem@@GGPAXG@Z PROC ; CImmediateMatch::SendData, COMDAT
; _this$ = ecx

; 1349 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1350 : 	if(pIServerUserItem!=NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00010	74 34		 je	 SHORT $LN2@SendData

; 1351 : 		return m_pIGameServiceFrame->SendData(pIServerUserItem,wMainCmdID,wSubCmdID,pData,wDataSize);

  00012	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 14	 mov	 ecx, DWORD PTR _pData$[ebp]
  0001a	51		 push	 ecx
  0001b	0f b7 55 10	 movzx	 edx, WORD PTR _wSubCmdID$[ebp]
  0001f	52		 push	 edx
  00020	0f b7 45 0c	 movzx	 eax, WORD PTR _wMainCmdID$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  0003d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00040	ff d0		 call	 eax
  00042	eb 37		 jmp	 SHORT $LN1@SendData

; 1352 : 	else

  00044	eb 33		 jmp	 SHORT $LN3@SendData
$LN2@SendData:

; 1353 : 		return m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,wMainCmdID,wSubCmdID, pData, wDataSize);

  00046	0f b7 45 18	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 14	 mov	 ecx, DWORD PTR _pData$[ebp]
  0004e	51		 push	 ecx
  0004f	0f b7 55 10	 movzx	 edx, WORD PTR _wSubCmdID$[ebp]
  00053	52		 push	 edx
  00054	0f b7 45 0c	 movzx	 eax, WORD PTR _wMainCmdID$[ebp]
  00058	50		 push	 eax
  00059	68 ff 00 00 00	 push	 255			; 000000ffH
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	8b 91 dc 01 00
	00		 mov	 edx, DWORD PTR [ecx+476]
  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 12		 mov	 edx, DWORD PTR [edx]
  0006c	8b 88 dc 01 00
	00		 mov	 ecx, DWORD PTR [eax+476]
  00072	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00075	ff d0		 call	 eax
  00077	eb 02		 jmp	 SHORT $LN1@SendData
$LN3@SendData:

; 1354 :     
; 1355 : 	return true;

  00079	b0 01		 mov	 al, 1
$LN1@SendData:

; 1356 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 14 00	 ret	 20			; 00000014H
?SendData@CImmediateMatch@@UAE_NPAUIServerUserItem@@GGPAXG@Z ENDP ; CImmediateMatch::SendData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendGroupData@CImmediateMatch@@UAE_NGGPAXGPAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_dwUserID$ = -16					; size = 4
_pUserItem$ = -12					; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_wMainCmdID$ = 8					; size = 2
_wSubCmdID$ = 12					; size = 2
_pData$ = 16						; size = 4
_wDataSize$ = 20					; size = 2
_pMatch$ = 24						; size = 4
?SendGroupData@CImmediateMatch@@UAE_NGGPAXGPAVCImmediateGroup@@@Z PROC ; CImmediateMatch::SendGroupData, COMDAT
; _this$ = ecx

; 1335 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1336 : 	POSITION pos=pMatch->m_OnMatchUserMap.GetStartPosition();

  0000c	8b 4d 18	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  0000f	83 c1 38	 add	 ecx, 56			; 00000038H
  00012	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition
  00017	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 1337 : 	IServerUserItem *pUserItem=NULL;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pUserItem$[ebp], 0

; 1338 : 	DWORD dwUserID=0;

  00021	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwUserID$[ebp], 0
$LN2@SendGroupD:

; 1339 : 	while(pos!=NULL)

  00028	83 7d f8 00	 cmp	 DWORD PTR _pos$[ebp], 0
  0002c	74 49		 je	 SHORT $LN3@SendGroupD

; 1340 : 	{
; 1341 : 		pMatch->m_OnMatchUserMap.GetNextAssoc(pos,dwUserID, pUserItem);

  0002e	8d 45 f4	 lea	 eax, DWORD PTR _pUserItem$[ebp]
  00031	50		 push	 eax
  00032	8d 4d f0	 lea	 ecx, DWORD PTR _dwUserID$[ebp]
  00035	51		 push	 ecx
  00036	8d 55 f8	 lea	 edx, DWORD PTR _pos$[ebp]
  00039	52		 push	 edx
  0003a	8b 4d 18	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  0003d	83 c1 38	 add	 ecx, 56			; 00000038H
  00040	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc

; 1342 : 		m_pIGameServiceFrame->SendData(pUserItem,wMainCmdID,wSubCmdID,pData,wDataSize);	

  00045	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR _pData$[ebp]
  0004d	51		 push	 ecx
  0004e	0f b7 55 0c	 movzx	 edx, WORD PTR _wSubCmdID$[ebp]
  00052	52		 push	 edx
  00053	0f b7 45 08	 movzx	 eax, WORD PTR _wMainCmdID$[ebp]
  00057	50		 push	 eax
  00058	8b 4d f4	 mov	 ecx, DWORD PTR _pUserItem$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 10		 mov	 edx, DWORD PTR [eax]
  0006a	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  00070	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00073	ff d0		 call	 eax

; 1343 : 	}

  00075	eb b1		 jmp	 SHORT $LN2@SendGroupD
$LN3@SendGroupD:

; 1344 : 	return true;

  00077	b0 01		 mov	 al, 1

; 1345 : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 14 00	 ret	 20			; 00000014H
?SendGroupData@CImmediateMatch@@UAE_NGGPAXGPAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::SendGroupData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z
_TEXT	SEGMENT
_wSendSize$1 = -1040					; size = 2
_Message$2 = -1036					; size = 1028
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_lpszMessage$ = 12					; size = 4
_wMessageType$ = 16					; size = 2
?SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z PROC ; CImmediateMatch::SendRoomMessage, COMDAT
; _this$ = ecx

; 1311 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 04 00
	00		 sub	 esp, 1232		; 000004d0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1312 : 	ASSERT(pIServerUserItem!=-NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN5@SendRoomMe
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA
  00024	83 c0 01	 add	 eax, 1
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN5@SendRoomMe
  00036	cc		 int	 3
$LN5@SendRoomMe:

; 1313 : 	if (pIServerUserItem==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN2@SendRoomMe
  0003d	32 c0		 xor	 al, al
  0003f	e9 b3 00 00 00	 jmp	 $LN1@SendRoomMe
$LN2@SendRoomMe:

; 1314 : 
; 1315 : 	//发送数据
; 1316 : 	if (pIServerUserItem->GetBindIndex()!=INVALID_WORD && false==pIServerUserItem->IsAndroidUser())

  00044	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0004c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004f	ff d0		 call	 eax
  00051	0f b7 c8	 movzx	 ecx, ax
  00054	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0005a	0f 84 95 00 00
	00		 je	 $LN3@SendRoomMe
  00060	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00068	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0006e	ff d0		 call	 eax
  00070	0f b6 c8	 movzx	 ecx, al
  00073	85 c9		 test	 ecx, ecx
  00075	75 7e		 jne	 SHORT $LN3@SendRoomMe

; 1317 : 	{
; 1318 : 		//构造数据包
; 1319 : 		CMD_CM_SystemMessage Message;
; 1320 : 		Message.wType=wMessageType;

  00077	66 8b 45 10	 mov	 ax, WORD PTR _wMessageType$[ebp]
  0007b	66 89 85 f4 fb
	ff ff		 mov	 WORD PTR _Message$2[ebp], ax

; 1321 : 
; 1322 : 		lstrcpyn(Message.szString,lpszMessage,CountArray(Message.szString));

  00082	68 00 04 00 00	 push	 1024			; 00000400H
  00087	8b 45 0c	 mov	 eax, DWORD PTR _lpszMessage$[ebp]
  0008a	50		 push	 eax
  0008b	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _Message$2[ebp+4]
  00091	51		 push	 ecx
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1323 : 		Message.wLength=CountStringBuffer(Message.szString);

  00098	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _Message$2[ebp+4]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000a5	83 c0 01	 add	 eax, 1
  000a8	66 89 85 f6 fb
	ff ff		 mov	 WORD PTR _Message$2[ebp+2], ax

; 1324 : 
; 1325 : 		//发送数据
; 1326 : 		WORD wSendSize=sizeof(Message)-sizeof(Message.szString)+Message.wLength*sizeof(TCHAR);

  000af	0f b7 85 f6 fb
	ff ff		 movzx	 eax, WORD PTR _Message$2[ebp+2]
  000b6	83 c0 04	 add	 eax, 4
  000b9	66 89 85 f0 fb
	ff ff		 mov	 WORD PTR _wSendSize$1[ebp], ax

; 1327 : 		return m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_CM_SYSTEM,SUB_CM_SYSTEM_MESSAGE,&Message,wSendSize);

  000c0	0f b7 85 f0 fb
	ff ff		 movzx	 eax, WORD PTR _wSendSize$1[ebp]
  000c7	50		 push	 eax
  000c8	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR _Message$2[ebp]
  000ce	51		 push	 ecx
  000cf	6a 01		 push	 1
  000d1	68 e8 03 00 00	 push	 1000			; 000003e8H
  000d6	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  000d9	52		 push	 edx
  000da	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	8b 88 dc 01 00
	00		 mov	 ecx, DWORD PTR [eax+476]
  000e3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e8	8b 8a dc 01 00
	00		 mov	 ecx, DWORD PTR [edx+476]
  000ee	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  000f1	ff d2		 call	 edx
  000f3	eb 02		 jmp	 SHORT $LN1@SendRoomMe
$LN3@SendRoomMe:

; 1328 : 	}
; 1329 : 
; 1330 : 	return true;

  000f5	b0 01		 mov	 al, 1
$LN1@SendRoomMe:

; 1331 : }

  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx
  000fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 0c 00	 ret	 12			; 0000000cH
?SendRoomMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z ENDP ; CImmediateMatch::SendRoomMessage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z
_TEXT	SEGMENT
_wSendSize$1 = -1040					; size = 2
_Message$2 = -1036					; size = 1028
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_lpszMessage$ = 12					; size = 4
_wMessageType$ = 16					; size = 2
?SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z PROC ; CImmediateMatch::SendGameMessage, COMDAT
; _this$ = ecx

; 1287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 04 00
	00		 sub	 esp, 1232		; 000004d0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1288 : 	ASSERT(pIServerUserItem!=-NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN5@SendGameMe
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z@4JA
  00024	83 c0 01	 add	 eax, 1
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN5@SendGameMe
  00036	cc		 int	 3
$LN5@SendGameMe:

; 1289 : 	if (pIServerUserItem==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN2@SendGameMe
  0003d	32 c0		 xor	 al, al
  0003f	e9 cf 00 00 00	 jmp	 $LN1@SendGameMe
$LN2@SendGameMe:

; 1290 : 
; 1291 : 	//发送数据
; 1292 : 	if ((pIServerUserItem->GetBindIndex()!=INVALID_WORD)&&(pIServerUserItem->IsClientReady()==true)&&(pIServerUserItem->IsAndroidUser()==false))

  00044	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0004c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004f	ff d0		 call	 eax
  00051	0f b7 c8	 movzx	 ecx, ax
  00054	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  0005a	0f 84 b1 00 00
	00		 je	 $LN3@SendGameMe
  00060	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00068	8b 82 c0 00 00
	00		 mov	 eax, DWORD PTR [edx+192]
  0006e	ff d0		 call	 eax
  00070	0f b6 c8	 movzx	 ecx, al
  00073	83 f9 01	 cmp	 ecx, 1
  00076	0f 85 95 00 00
	00		 jne	 $LN3@SendGameMe
  0007c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0007f	8b 10		 mov	 edx, DWORD PTR [eax]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00084	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0008a	ff d0		 call	 eax
  0008c	0f b6 c8	 movzx	 ecx, al
  0008f	85 c9		 test	 ecx, ecx
  00091	75 7e		 jne	 SHORT $LN3@SendGameMe

; 1293 : 	{
; 1294 : 		//构造数据包
; 1295 : 		CMD_CM_SystemMessage Message;
; 1296 : 		Message.wType=wMessageType;

  00093	66 8b 45 10	 mov	 ax, WORD PTR _wMessageType$[ebp]
  00097	66 89 85 f4 fb
	ff ff		 mov	 WORD PTR _Message$2[ebp], ax

; 1297 : 		lstrcpyn(Message.szString,lpszMessage,CountArray(Message.szString));

  0009e	68 00 04 00 00	 push	 1024			; 00000400H
  000a3	8b 45 0c	 mov	 eax, DWORD PTR _lpszMessage$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _Message$2[ebp+4]
  000ad	51		 push	 ecx
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1298 : 		Message.wLength=CountStringBuffer(Message.szString);

  000b4	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _Message$2[ebp+4]
  000ba	50		 push	 eax
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  000c1	83 c0 01	 add	 eax, 1
  000c4	66 89 85 f6 fb
	ff ff		 mov	 WORD PTR _Message$2[ebp+2], ax

; 1299 : 
; 1300 : 		//发送数据
; 1301 : 		WORD wSendSize=sizeof(Message)-sizeof(Message.szString)+Message.wLength*sizeof(TCHAR);

  000cb	0f b7 85 f6 fb
	ff ff		 movzx	 eax, WORD PTR _Message$2[ebp+2]
  000d2	83 c0 04	 add	 eax, 4
  000d5	66 89 85 f0 fb
	ff ff		 mov	 WORD PTR _wSendSize$1[ebp], ax

; 1302 : 		return m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GF_FRAME,SUB_GF_SYSTEM_MESSAGE,&Message,wSendSize);

  000dc	0f b7 85 f0 fb
	ff ff		 movzx	 eax, WORD PTR _wSendSize$1[ebp]
  000e3	50		 push	 eax
  000e4	8d 8d f4 fb ff
	ff		 lea	 ecx, DWORD PTR _Message$2[ebp]
  000ea	51		 push	 ecx
  000eb	68 c8 00 00 00	 push	 200			; 000000c8H
  000f0	6a 64		 push	 100			; 00000064H
  000f2	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  000f5	52		 push	 edx
  000f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	8b 88 dc 01 00
	00		 mov	 ecx, DWORD PTR [eax+476]
  000ff	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00102	8b 01		 mov	 eax, DWORD PTR [ecx]
  00104	8b 8a dc 01 00
	00		 mov	 ecx, DWORD PTR [edx+476]
  0010a	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0010d	ff d2		 call	 edx
  0010f	eb 02		 jmp	 SHORT $LN1@SendGameMe
$LN3@SendGameMe:

; 1303 : 	}
; 1304 : 
; 1305 : 	return true;

  00111	b0 01		 mov	 al, 1
$LN1@SendGameMe:

; 1306 : }

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00119	33 cd		 xor	 ecx, ebp
  0011b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 0c 00	 ret	 12			; 0000000cH
?SendGameMessage@CImmediateMatch@@UAE_NPAUIServerUserItem@@PBDG@Z ENDP ; CImmediateMatch::SendGameMessage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_dwUserID$ = -36					; size = 4
_pUserItem$ = -32					; size = 4
_pos$ = -28						; size = 4
_pUserData$ = -24					; size = 4
_UserStatus$ = -20					; size = 9
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_pMatch$ = 12						; size = 4
?SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z PROC ; CImmediateMatch::SendGroupUserStatus, COMDAT
; _this$ = ecx

; 1254 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1255 : 	//效验参数
; 1256 : 	ASSERT(pIServerUserItem!=NULL);

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001a	75 18		 jne	 SHORT $LN7@SendGroupU
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z@4JA
  00021	83 c0 02	 add	 eax, 2
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0002a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002f	85 c0		 test	 eax, eax
  00031	74 01		 je	 SHORT $LN7@SendGroupU
  00033	cc		 int	 3
$LN7@SendGroupU:

; 1257 : 	ASSERT(pIServerUserItem->IsClientReady()==true);

  00034	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00037	8b 10		 mov	 edx, DWORD PTR [eax]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0003c	8b 82 c0 00 00
	00		 mov	 eax, DWORD PTR [edx+192]
  00042	ff d0		 call	 eax
  00044	0f b6 c8	 movzx	 ecx, al
  00047	83 f9 01	 cmp	 ecx, 1
  0004a	74 19		 je	 SHORT $LN8@SendGroupU
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z@4JA
  00052	83 c2 03	 add	 edx, 3
  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0005b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00060	85 c0		 test	 eax, eax
  00062	74 01		 je	 SHORT $LN8@SendGroupU
  00064	cc		 int	 3
$LN8@SendGroupU:

; 1258 : 	if (pIServerUserItem->IsClientReady()==false) return false;

  00065	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00068	8b 10		 mov	 edx, DWORD PTR [eax]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0006d	8b 82 c0 00 00
	00		 mov	 eax, DWORD PTR [edx+192]
  00073	ff d0		 call	 eax
  00075	0f b6 c8	 movzx	 ecx, al
  00078	85 c9		 test	 ecx, ecx
  0007a	75 07		 jne	 SHORT $LN4@SendGroupU
  0007c	32 c0		 xor	 al, al
  0007e	e9 cb 00 00 00	 jmp	 $LN1@SendGroupU
$LN4@SendGroupU:

; 1259 : 
; 1260 : 	//变量定义
; 1261 : 	CMD_GR_UserStatus UserStatus;
; 1262 : 	ZeroMemory(&UserStatus,sizeof(UserStatus));

  00083	6a 09		 push	 9
  00085	6a 00		 push	 0
  00087	8d 45 ec	 lea	 eax, DWORD PTR _UserStatus$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _memset
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1263 : 
; 1264 : 	tagUserInfo * pUserData=pIServerUserItem->GetUserInfo();

  00093	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00096	8b 10		 mov	 edx, DWORD PTR [eax]
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0009b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0009e	ff d0		 call	 eax
  000a0	89 45 e8	 mov	 DWORD PTR _pUserData$[ebp], eax

; 1265 : 
; 1266 : 	//构造数据
; 1267 : 	UserStatus.dwUserID=pUserData->dwUserID;

  000a3	8b 45 e8	 mov	 eax, DWORD PTR _pUserData$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	89 4d ec	 mov	 DWORD PTR _UserStatus$[ebp], ecx

; 1268 : 	UserStatus.UserStatus.wTableID=pUserData->wTableID;

  000ab	8b 45 e8	 mov	 eax, DWORD PTR _pUserData$[ebp]
  000ae	66 8b 88 91 00
	00 00		 mov	 cx, WORD PTR [eax+145]
  000b5	66 89 4d f0	 mov	 WORD PTR _UserStatus$[ebp+4], cx

; 1269 : 	UserStatus.UserStatus.wChairID=pUserData->wChairID;

  000b9	8b 45 e8	 mov	 eax, DWORD PTR _pUserData$[ebp]
  000bc	66 8b 88 95 00
	00 00		 mov	 cx, WORD PTR [eax+149]
  000c3	66 89 4d f2	 mov	 WORD PTR _UserStatus$[ebp+6], cx

; 1270 : 	UserStatus.UserStatus.cbUserStatus=pUserData->cbUserStatus;

  000c7	8b 45 e8	 mov	 eax, DWORD PTR _pUserData$[ebp]
  000ca	8a 88 97 00 00
	00		 mov	 cl, BYTE PTR [eax+151]
  000d0	88 4d f4	 mov	 BYTE PTR _UserStatus$[ebp+8], cl

; 1271 : 
; 1272 : 	POSITION pos=pMatch->m_OnMatchUserMap.GetStartPosition();

  000d3	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  000d6	83 c1 38	 add	 ecx, 56			; 00000038H
  000d9	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition
  000de	89 45 e4	 mov	 DWORD PTR _pos$[ebp], eax

; 1273 : 	IServerUserItem *pUserItem=NULL;

  000e1	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pUserItem$[ebp], 0

; 1274 : 	DWORD dwUserID=0;

  000e8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dwUserID$[ebp], 0
$LN2@SendGroupU:

; 1275 : 	while(pos!=NULL)

  000ef	83 7d e4 00	 cmp	 DWORD PTR _pos$[ebp], 0
  000f3	74 57		 je	 SHORT $LN3@SendGroupU

; 1276 : 	{
; 1277 : 		pMatch->m_OnMatchUserMap.GetNextAssoc(pos,dwUserID, pUserItem);

  000f5	8d 45 e0	 lea	 eax, DWORD PTR _pUserItem$[ebp]
  000f8	50		 push	 eax
  000f9	8d 4d dc	 lea	 ecx, DWORD PTR _dwUserID$[ebp]
  000fc	51		 push	 ecx
  000fd	8d 55 e4	 lea	 edx, DWORD PTR _pos$[ebp]
  00100	52		 push	 edx
  00101	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  00104	83 c1 38	 add	 ecx, 56			; 00000038H
  00107	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc

; 1278 : 		if(pUserItem->IsClientReady())

  0010c	8b 45 e0	 mov	 eax, DWORD PTR _pUserItem$[ebp]
  0010f	8b 10		 mov	 edx, DWORD PTR [eax]
  00111	8b 4d e0	 mov	 ecx, DWORD PTR _pUserItem$[ebp]
  00114	8b 82 c0 00 00
	00		 mov	 eax, DWORD PTR [edx+192]
  0011a	ff d0		 call	 eax
  0011c	0f b6 c8	 movzx	 ecx, al
  0011f	85 c9		 test	 ecx, ecx
  00121	74 27		 je	 SHORT $LN5@SendGroupU

; 1279 : 			m_pIGameServiceFrame->SendData(pUserItem,MDM_GR_USER,SUB_GR_USER_STATUS,&UserStatus,sizeof(UserStatus));	

  00123	6a 09		 push	 9
  00125	8d 45 ec	 lea	 eax, DWORD PTR _UserStatus$[ebp]
  00128	50		 push	 eax
  00129	6a 66		 push	 102			; 00000066H
  0012b	6a 03		 push	 3
  0012d	8b 4d e0	 mov	 ecx, DWORD PTR _pUserItem$[ebp]
  00130	51		 push	 ecx
  00131	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00134	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  0013a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	8b 10		 mov	 edx, DWORD PTR [eax]
  0013f	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  00145	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00148	ff d0		 call	 eax
$LN5@SendGroupU:

; 1280 : 	}

  0014a	eb a3		 jmp	 SHORT $LN2@SendGroupU
$LN3@SendGroupU:

; 1281 : 	return true;

  0014c	b0 01		 mov	 al, 1
$LN1@SendGroupU:

; 1282 : }

  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	5b		 pop	 ebx
  00151	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00154	33 cd		 xor	 ecx, ebp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c2 08 00	 ret	 8
?SendGroupUserStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::SendGroupUserStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendGroupUserScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_dwUserID$1 = -128					; size = 4
_pUserItem$2 = -124					; size = 4
_pos$3 = -120						; size = 4
_pUserInfo$ = -116					; size = 4
_UserScore$ = -112					; size = 104
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_pMatch$ = 12						; size = 4
?SendGroupUserScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z PROC ; CImmediateMatch::SendGroupUserScore, COMDAT
; _this$ = ecx

; 1213 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1214 : 	//发送数据
; 1215 : 	CMD_GR_UserScore UserScore;
; 1216 : 	ZeroMemory(&UserScore,sizeof(UserScore));

  00019	6a 68		 push	 104			; 00000068H
  0001b	6a 00		 push	 0
  0001d	8d 45 90	 lea	 eax, DWORD PTR _UserScore$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1217 : 
; 1218 : 	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();

  00029	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00031	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00034	ff d0		 call	 eax
  00036	89 45 8c	 mov	 DWORD PTR _pUserInfo$[ebp], eax

; 1219 : 
; 1220 : 	//构造数据
; 1221 : 	UserScore.dwUserID=pUserInfo->dwUserID;

  00039	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d 90	 mov	 DWORD PTR _UserScore$[ebp], ecx

; 1222 : 	UserScore.UserScore.dwWinCount=pUserInfo->dwWinCount;

  00041	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00044	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0004a	89 4d d4	 mov	 DWORD PTR _UserScore$[ebp+68], ecx

; 1223 : 	UserScore.UserScore.dwLostCount=pUserInfo->dwLostCount;

  0004d	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00050	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  00056	89 4d d8	 mov	 DWORD PTR _UserScore$[ebp+72], ecx

; 1224 : 	UserScore.UserScore.dwDrawCount=pUserInfo->dwDrawCount;

  00059	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0005c	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00062	89 4d dc	 mov	 DWORD PTR _UserScore$[ebp+76], ecx

; 1225 : 	UserScore.UserScore.dwFleeCount=pUserInfo->dwFleeCount;	

  00065	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00068	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  0006e	89 4d e0	 mov	 DWORD PTR _UserScore$[ebp+80], ecx

; 1226 : 	UserScore.UserScore.dwExperience=pUserInfo->dwExperience;

  00071	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00074	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  0007a	89 4d f0	 mov	 DWORD PTR _UserScore$[ebp+96], ecx

; 1227 : 	UserScore.UserScore.lLoveLiness=pUserInfo->lLoveLiness;

  0007d	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00080	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00086	89 4d f4	 mov	 DWORD PTR _UserScore$[ebp+100], ecx

; 1228 : 	UserScore.UserScore.lIntegralCount =pUserInfo->lIntegralCount;

  00089	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0008c	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  00092	89 4d e4	 mov	 DWORD PTR _UserScore$[ebp+84], ecx
  00095	8b 90 f8 00 00
	00		 mov	 edx, DWORD PTR [eax+248]
  0009b	89 55 e8	 mov	 DWORD PTR _UserScore$[ebp+88], edx

; 1229 : 
; 1230 : 	//构造积分
; 1231 : 	UserScore.UserScore.bConsumptionType.lScore = pUserInfo->bConsumptionType.lScore;

  0009e	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000a1	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  000a7	89 4d a4	 mov	 DWORD PTR _UserScore$[ebp+20], ecx
  000aa	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  000b0	89 55 a8	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 1232 : 	UserScore.UserScore.bConsumptionType.lIngot = pUserInfo->bConsumptionType.lIngot;

  000b3	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000b6	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000bc	89 4d ac	 mov	 DWORD PTR _UserScore$[ebp+28], ecx
  000bf	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  000c5	89 55 b0	 mov	 DWORD PTR _UserScore$[ebp+32], edx

; 1233 : 	UserScore.UserScore.bConsumptionType.lBeans = pUserInfo->bConsumptionType.lBeans;

  000c8	8b 45 8c	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000cb	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  000d1	89 4d b4	 mov	 DWORD PTR _UserScore$[ebp+36], ecx
  000d4	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  000da	89 55 b8	 mov	 DWORD PTR _UserScore$[ebp+40], edx

; 1234 : 
; 1235 : 	if(pMatch!=NULL)

  000dd	83 7d 0c 00	 cmp	 DWORD PTR _pMatch$[ebp], 0
  000e1	74 66		 je	 SHORT $LN4@SendGroupU

; 1236 : 	{
; 1237 : 		POSITION pos=pMatch->m_OnMatchUserMap.GetStartPosition();

  000e3	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  000e6	83 c1 38	 add	 ecx, 56			; 00000038H
  000e9	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition
  000ee	89 45 88	 mov	 DWORD PTR _pos$3[ebp], eax

; 1238 : 		IServerUserItem *pUserItem=NULL;

  000f1	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _pUserItem$2[ebp], 0

; 1239 : 		DWORD dwUserID=0;

  000f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _dwUserID$1[ebp], 0
$LN2@SendGroupU:

; 1240 : 		while(pos!=NULL)

  000ff	83 7d 88 00	 cmp	 DWORD PTR _pos$3[ebp], 0
  00103	74 40		 je	 SHORT $LN3@SendGroupU

; 1241 : 		{
; 1242 : 			pMatch->m_OnMatchUserMap.GetNextAssoc(pos,dwUserID, pUserItem);

  00105	8d 45 84	 lea	 eax, DWORD PTR _pUserItem$2[ebp]
  00108	50		 push	 eax
  00109	8d 4d 80	 lea	 ecx, DWORD PTR _dwUserID$1[ebp]
  0010c	51		 push	 ecx
  0010d	8d 55 88	 lea	 edx, DWORD PTR _pos$3[ebp]
  00110	52		 push	 edx
  00111	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  00114	83 c1 38	 add	 ecx, 56			; 00000038H
  00117	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc

; 1243 : 			m_pIGameServiceFrame->SendData(pUserItem,MDM_GR_USER,SUB_GR_USER_SCORE,&UserScore,sizeof(UserScore));	

  0011c	6a 68		 push	 104			; 00000068H
  0011e	8d 45 90	 lea	 eax, DWORD PTR _UserScore$[ebp]
  00121	50		 push	 eax
  00122	6a 65		 push	 101			; 00000065H
  00124	6a 03		 push	 3
  00126	8b 4d 84	 mov	 ecx, DWORD PTR _pUserItem$2[ebp]
  00129	51		 push	 ecx
  0012a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0012d	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  00133	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	8b 10		 mov	 edx, DWORD PTR [eax]
  00138	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  0013e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00141	ff d0		 call	 eax

; 1244 : 		}

  00143	eb ba		 jmp	 SHORT $LN2@SendGroupU
$LN3@SendGroupU:

; 1245 : 		return true;

  00145	b0 01		 mov	 al, 1
  00147	eb 28		 jmp	 SHORT $LN1@SendGroupU
$LN4@SendGroupU:

; 1246 : 	}
; 1247 : 
; 1248 : 	return m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_USER,SUB_GR_USER_SCORE,&UserScore,sizeof(UserScore));

  00149	6a 68		 push	 104			; 00000068H
  0014b	8d 45 90	 lea	 eax, DWORD PTR _UserScore$[ebp]
  0014e	50		 push	 eax
  0014f	6a 65		 push	 101			; 00000065H
  00151	6a 03		 push	 3
  00153	68 ff 00 00 00	 push	 255			; 000000ffH
  00158	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	8b 91 dc 01 00
	00		 mov	 edx, DWORD PTR [ecx+476]
  00161	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00164	8b 12		 mov	 edx, DWORD PTR [edx]
  00166	8b 88 dc 01 00
	00		 mov	 ecx, DWORD PTR [eax+476]
  0016c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0016f	ff d0		 call	 eax
$LN1@SendGroupU:

; 1249 : }

  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	5b		 pop	 ebx
  00174	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 08 00	 ret	 8
?SendGroupUserScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@PAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::SendGroupUserScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendGroupUserMessage@CImmediateMatch@@UAE_NPBDPAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_dwUserID$ = -16					; size = 4
_pUserItem$ = -12					; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_pStrMessage$ = 8					; size = 4
_pMatch$ = 12						; size = 4
?SendGroupUserMessage@CImmediateMatch@@UAE_NPBDPAVCImmediateGroup@@@Z PROC ; CImmediateMatch::SendGroupUserMessage, COMDAT
; _this$ = ecx

; 1198 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1199 : 	POSITION pos=pMatch->m_OnMatchUserMap.GetStartPosition();

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  0000f	83 c1 38	 add	 ecx, 56			; 00000038H
  00012	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition
  00017	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 1200 : 	IServerUserItem *pUserItem=NULL;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pUserItem$[ebp], 0

; 1201 : 	DWORD dwUserID=0;

  00021	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwUserID$[ebp], 0
$LN2@SendGroupU:

; 1202 : 	while(pos!=NULL)

  00028	83 7d f8 00	 cmp	 DWORD PTR _pos$[ebp], 0
  0002c	74 30		 je	 SHORT $LN3@SendGroupU

; 1203 : 	{
; 1204 : 		pMatch->m_OnMatchUserMap.GetNextAssoc(pos,dwUserID, pUserItem);

  0002e	8d 45 f4	 lea	 eax, DWORD PTR _pUserItem$[ebp]
  00031	50		 push	 eax
  00032	8d 4d f0	 lea	 ecx, DWORD PTR _dwUserID$[ebp]
  00035	51		 push	 ecx
  00036	8d 55 f8	 lea	 edx, DWORD PTR _pos$[ebp]
  00039	52		 push	 edx
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  0003d	83 c1 38	 add	 ecx, 56			; 00000038H
  00040	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc

; 1205 : 		SendGameMessage(pUserItem,pStrMessage, SMT_CHAT|SMT_TABLE_ROLL);

  00045	6a 11		 push	 17			; 00000011H
  00047	8b 45 08	 mov	 eax, DWORD PTR _pStrMessage$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR _pUserItem$[ebp]
  0004e	51		 push	 ecx
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 02		 mov	 eax, DWORD PTR [edx]
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  0005a	ff d2		 call	 edx

; 1206 : 	}

  0005c	eb ca		 jmp	 SHORT $LN2@SendGroupU
$LN3@SendGroupU:

; 1207 : 	return true;

  0005e	b0 01		 mov	 al, 1

; 1208 : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?SendGroupUserMessage@CImmediateMatch@@UAE_NPBDPAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::SendGroupUserMessage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SendMatchInfo@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv268 = -96						; size = 4
_pUserScore$ = -28					; size = 4
_cbUserMatchStatus$1 = -21				; size = 1
_i$2 = -20						; size = 4
_dwUserCount$ = -16					; size = 4
_MatchNum$ = -12					; size = 8
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?SendMatchInfo@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z PROC ; CImmediateMatch::SendMatchInfo, COMDAT
; _this$ = ecx

; 1157 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1158 : 
; 1159 : 	CMD_GR_Match_Num MatchNum;
; 1160 : 	MatchNum.dwWaitting=(DWORD)m_pCurMatchGroup->m_OnMatchUserMap.GetCount();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00012	83 c1 38	 add	 ecx, 56			; 00000038H
  00015	e8 00 00 00 00	 call	 ?GetCount@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEHXZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetCount
  0001a	89 45 f4	 mov	 DWORD PTR _MatchNum$[ebp], eax

; 1161 : 	MatchNum.dwTotal=m_pImmediateMatch->wStartUserCount;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00026	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00029	89 55 f8	 mov	 DWORD PTR _MatchNum$[ebp+4], edx

; 1162 : 	m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_MATCH,SUB_GR_MATCH_NUM,&MatchNum, sizeof(MatchNum));

  0002c	6a 08		 push	 8
  0002e	8d 45 f4	 lea	 eax, DWORD PTR _MatchNum$[ebp]
  00031	50		 push	 eax
  00032	6a 04		 push	 4
  00034	6a 0a		 push	 10			; 0000000aH
  00036	68 ff 00 00 00	 push	 255			; 000000ffH
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 91 dc 01 00
	00		 mov	 edx, DWORD PTR [ecx+476]
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 12		 mov	 edx, DWORD PTR [edx]
  00049	8b 88 dc 01 00
	00		 mov	 ecx, DWORD PTR [eax+476]
  0004f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00052	ff d0		 call	 eax

; 1163 : 	if(pIServerUserItem==NULL)

  00054	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00058	75 07		 jne	 SHORT $LN5@SendMatchI

; 1164 : 	{
; 1165 : 		return true;

  0005a	b0 01		 mov	 al, 1
  0005c	e9 6c 01 00 00	 jmp	 $LN1@SendMatchI
$LN5@SendMatchI:

; 1166 : 	}
; 1167 : 
; 1168 : 	//发送比赛信息
; 1169 : 	m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_NUM,&MatchNum, sizeof(MatchNum));

  00061	6a 08		 push	 8
  00063	8d 45 f4	 lea	 eax, DWORD PTR _MatchNum$[ebp]
  00066	50		 push	 eax
  00067	6a 04		 push	 4
  00069	6a 0a		 push	 10			; 0000000aH
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	8b 10		 mov	 edx, DWORD PTR [eax]
  0007d	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  00083	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00086	ff d0		 call	 eax

; 1170 : 	m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_DESC, &m_MatchDesc, sizeof(m_MatchDesc));

  00088	68 48 01 00 00	 push	 328			; 00000148H
  0008d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00090	83 c0 74	 add	 eax, 116		; 00000074H
  00093	50		 push	 eax
  00094	6a 0c		 push	 12			; 0000000cH
  00096	6a 0a		 push	 10			; 0000000aH
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009f	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	8b 10		 mov	 edx, DWORD PTR [eax]
  000aa	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  000b0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000b3	ff d0		 call	 eax

; 1171 : 
; 1172 : 	//发送报名状态
; 1173 : 	INT_PTR dwUserCount=m_OnMatchUserItem.GetCount();

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	83 c1 20	 add	 ecx, 32			; 00000020H
  000bb	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QBEHXZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::GetCount
  000c0	89 45 f0	 mov	 DWORD PTR _dwUserCount$[ebp], eax

; 1174 : 	for (INT_PTR i=0;i<dwUserCount;i++)

  000c3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  000ca	eb 09		 jmp	 SHORT $LN4@SendMatchI
$LN2@SendMatchI:
  000cc	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  000cf	83 c0 01	 add	 eax, 1
  000d2	89 45 ec	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@SendMatchI:
  000d5	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  000d8	3b 45 f0	 cmp	 eax, DWORD PTR _dwUserCount$[ebp]
  000db	7d 59		 jge	 SHORT $LN3@SendMatchI

; 1175 : 	{
; 1176 : 		if(m_OnMatchUserItem[i]==pIServerUserItem)

  000dd	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  000e0	50		 push	 eax
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	83 c1 20	 add	 ecx, 32			; 00000020H
  000e7	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::operator[]
  000ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ee	3b 4d 08	 cmp	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000f1	75 41		 jne	 SHORT $LN6@SendMatchI

; 1177 : 		{
; 1178 : 			BYTE cbUserMatchStatus=pIServerUserItem->GetUserMatchStatus();

  000f3	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000f6	8b 10		 mov	 edx, DWORD PTR [eax]
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000fb	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00101	ff d0		 call	 eax
  00103	88 45 eb	 mov	 BYTE PTR _cbUserMatchStatus$1[ebp], al

; 1179 : 			m_pIGameServiceFrame->SendData(pIServerUserItem, MDM_GR_MATCH, SUB_GR_MATCH_USTATUS, &cbUserMatchStatus, sizeof(cbUserMatchStatus));

  00106	6a 01		 push	 1
  00108	8d 45 eb	 lea	 eax, DWORD PTR _cbUserMatchStatus$1[ebp]
  0010b	50		 push	 eax
  0010c	6a 0b		 push	 11			; 0000000bH
  0010e	6a 0a		 push	 10			; 0000000aH
  00110	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00113	51		 push	 ecx
  00114	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00117	8b 82 dc 01 00
	00		 mov	 eax, DWORD PTR [edx+476]
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 10		 mov	 edx, DWORD PTR [eax]
  00122	8b 89 dc 01 00
	00		 mov	 ecx, DWORD PTR [ecx+476]
  00128	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0012b	ff d0		 call	 eax

; 1180 : 
; 1181 : 			return true;

  0012d	b0 01		 mov	 al, 1
  0012f	e9 99 00 00 00	 jmp	 $LN1@SendMatchI
$LN6@SendMatchI:

; 1182 : 		}
; 1183 : 	}

  00134	eb 96		 jmp	 SHORT $LN2@SendMatchI
$LN3@SendMatchI:

; 1184 : 
; 1185 : 	tagUserInfo *pUserScore=pIServerUserItem->GetUserInfo();

  00136	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00139	8b 10		 mov	 edx, DWORD PTR [eax]
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0013e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00141	ff d0		 call	 eax
  00143	89 45 e4	 mov	 DWORD PTR _pUserScore$[ebp], eax

; 1186 : 	pUserScore->dwWinCount=pUserScore->dwLostCount=pUserScore->dwFleeCount=pUserScore->dwDrawCount=pUserScore->cbGender=0;

  00146	8b 45 e4	 mov	 eax, DWORD PTR _pUserScore$[ebp]
  00149	c6 80 8e 00 00
	00 00		 mov	 BYTE PTR [eax+142], 0
  00150	8b 4d e4	 mov	 ecx, DWORD PTR _pUserScore$[ebp]
  00153	c7 81 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+224], 0
  0015d	8b 55 e4	 mov	 edx, DWORD PTR _pUserScore$[ebp]
  00160	c7 82 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+228], 0
  0016a	8b 45 e4	 mov	 eax, DWORD PTR _pUserScore$[ebp]
  0016d	c7 80 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+220], 0
  00177	8b 4d e4	 mov	 ecx, DWORD PTR _pUserScore$[ebp]
  0017a	c7 81 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+216], 0

; 1187 : 	if((LONGLONG)m_pImmediateMatch->lInitalScore!=0)

  00184	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00187	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0018d	89 4d a0	 mov	 DWORD PTR tv268[ebp], ecx
  00190	8b 55 a0	 mov	 edx, DWORD PTR tv268[ebp]
  00193	8b 45 a0	 mov	 eax, DWORD PTR tv268[ebp]
  00196	8b 4a 0e	 mov	 ecx, DWORD PTR [edx+14]
  00199	0b 48 12	 or	 ecx, DWORD PTR [eax+18]
  0019c	74 1c		 je	 SHORT $LN7@SendMatchI

; 1188 : 	{
; 1189 : 		pUserScore->bConsumptionType.lScore = (LONG)m_pImmediateMatch->lInitalScore;

  0019e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a1	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  001a7	8b 41 0e	 mov	 eax, DWORD PTR [ecx+14]
  001aa	99		 cdq
  001ab	8b 4d e4	 mov	 ecx, DWORD PTR _pUserScore$[ebp]
  001ae	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
  001b4	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx
$LN7@SendMatchI:

; 1190 : 	}
; 1191 : 
; 1192 : 	return SendGroupUserScore(pIServerUserItem, NULL);

  001ba	6a 00		 push	 0
  001bc	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001bf	50		 push	 eax
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c8	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001cb	ff d0		 call	 eax
$LN1@SendMatchI:

; 1193 : }

  001cd	5f		 pop	 edi
  001ce	5e		 pop	 esi
  001cf	5b		 pop	 ebx
  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c2 04 00	 ret	 4
?SendMatchInfo@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ENDP ; CImmediateMatch::SendMatchInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?SetGameTimer@CImmediateMatch@@UAE_NKKKIPAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwTimerID$ = 8						; size = 4
_dwElapse$ = 12						; size = 4
_dwRepeat$ = 16						; size = 4
_dwBindParameter$ = 20					; size = 4
_pMatch$ = 24						; size = 4
?SetGameTimer@CImmediateMatch@@UAE_NKKKIPAVCImmediateGroup@@@Z PROC ; CImmediateMatch::SetGameTimer, COMDAT
; _this$ = ecx

; 1150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1151 : 	return m_pITimerEngine->SetTimer(dwTimerID,dwElapse,dwRepeat,dwBindParameter);

  0000c	8b 45 14	 mov	 eax, DWORD PTR _dwBindParameter$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 10	 mov	 ecx, DWORD PTR _dwRepeat$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _dwElapse$[ebp]
  00017	52		 push	 edx
  00018	8b 45 08	 mov	 eax, DWORD PTR _dwTimerID$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 12		 mov	 edx, DWORD PTR [edx]
  0002a	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00030	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00033	ff d0		 call	 eax

; 1152 : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 14 00	 ret	 20			; 00000014H
?SetGameTimer@CImmediateMatch@@UAE_NKKKIPAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::SetGameTimer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?KillGameTimer@CImmediateMatch@@UAE_NKPAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwTimerID$ = 8						; size = 4
_pMatch$ = 12						; size = 4
?KillGameTimer@CImmediateMatch@@UAE_NKPAVCImmediateGroup@@@Z PROC ; CImmediateMatch::KillGameTimer, COMDAT
; _this$ = ecx

; 1142 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1143 : 	m_pITimerEngine->KillTimer(dwTimerID);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dwTimerID$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 12		 mov	 edx, DWORD PTR [edx]
  0001e	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00024	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00027	ff d0		 call	 eax

; 1144 : 
; 1145 : 	return false;

  00029	32 c0		 xor	 al, al

; 1146 : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?KillGameTimer@CImmediateMatch@@UAE_NKPAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::KillGameTimer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventMatchOver@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z
_TEXT	SEGMENT
$T1 = -136						; size = 8
_MatchOver$2 = -64					; size = 56
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pMatch$ = 8						; size = 4
?OnEventMatchOver@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z PROC ; CImmediateMatch::OnEventMatchOver, COMDAT
; _this$ = ecx

; 1114 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1115 : 	//比赛结束
; 1116 : 	if(pMatch!=NULL)

  00019	83 7d 08 00	 cmp	 DWORD PTR _pMatch$[ebp], 0
  0001d	0f 84 be 00 00
	00		 je	 $LN2@OnEventMat

; 1117 : 	{
; 1118 : 		DBR_GR_MatchOver MatchOver;
; 1119 : 		ZeroMemory(&MatchOver,sizeof(MatchOver));

  00023	6a 38		 push	 56			; 00000038H
  00025	6a 00		 push	 0
  00027	8d 45 c0	 lea	 eax, DWORD PTR _MatchOver$2[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1120 : 
; 1121 : 		//构造数据				
; 1122 : 		MatchOver.bMatchFinish=TRUE;

  00033	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _MatchOver$2[ebp+4], 1

; 1123 : 		MatchOver.dwMatchID=m_pMatchOption->dwMatchID;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 88 bc 01 00
	00		 mov	 ecx, DWORD PTR [eax+444]
  00043	8b 11		 mov	 edx, DWORD PTR [ecx]
  00045	89 55 cc	 mov	 DWORD PTR _MatchOver$2[ebp+12], edx

; 1124 : 		MatchOver.lMatchNo=pMatch->m_lMatchNo;		

  00048	8b 45 08	 mov	 eax, DWORD PTR _pMatch$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d d0	 mov	 DWORD PTR _MatchOver$2[ebp+16], ecx
  00051	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00054	89 55 d4	 mov	 DWORD PTR _MatchOver$2[ebp+20], edx

; 1125 : 		MatchOver.cbMatchType=MATCH_TYPE_IMMEDIATE;

  00057	c6 45 c2 01	 mov	 BYTE PTR _MatchOver$2[ebp+2], 1

; 1126 : 		MatchOver.wPlayCount=m_pImmediateMatch->wPlayCount;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00064	66 8b 51 16	 mov	 dx, WORD PTR [ecx+22]
  00068	66 89 55 c8	 mov	 WORD PTR _MatchOver$2[ebp+8], dx

; 1127 : 		MatchOver.wServerID=m_pGameServiceOption->wServerID;

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  00075	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  00079	66 89 55 c0	 mov	 WORD PTR _MatchOver$2[ebp], dx

; 1128 : 		
; 1129 : 		//获取时间
; 1130 : 		MatchOver.MatchStartTime=pMatch->m_MatchStartTime;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _pMatch$[ebp]
  00080	83 c0 1c	 add	 eax, 28			; 0000001cH
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	89 4d d8	 mov	 DWORD PTR _MatchOver$2[ebp+24], ecx
  00088	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008b	89 55 dc	 mov	 DWORD PTR _MatchOver$2[ebp+28], edx
  0008e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00091	89 4d e0	 mov	 DWORD PTR _MatchOver$2[ebp+32], ecx
  00094	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00097	89 55 e4	 mov	 DWORD PTR _MatchOver$2[ebp+36], edx

; 1131 : 		CTime::GetCurrentTime().GetAsSystemTime(MatchOver.MatchEndTime);

  0009a	8d 45 e8	 lea	 eax, DWORD PTR _MatchOver$2[ebp+40]
  0009d	50		 push	 eax
  0009e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount
  000aa	8b c8		 mov	 ecx, eax
  000ac	e8 00 00 00 00	 call	 ?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ; ATL::CTime::GetAsSystemTime

; 1132 : 
; 1133 : 		//投递请求
; 1134 : 		m_pIDataBaseEngine->PostDataBaseRequest(MatchOver.dwMatchID,DBR_GR_MATCH_OVER,0,&MatchOver,sizeof(MatchOver));

  000b1	6a 00		 push	 0
  000b3	6a 38		 push	 56			; 00000038H
  000b5	8d 45 c0	 lea	 eax, DWORD PTR _MatchOver$2[ebp]
  000b8	50		 push	 eax
  000b9	6a 00		 push	 0
  000bb	68 5e 02 00 00	 push	 606			; 0000025eH
  000c0	8b 4d cc	 mov	 ecx, DWORD PTR _MatchOver$2[ebp+12]
  000c3	51		 push	 ecx
  000c4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 82 d4 01 00
	00		 mov	 eax, DWORD PTR [edx+468]
  000cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8b 91 d4 01 00
	00		 mov	 edx, DWORD PTR [ecx+468]
  000d6	8b 00		 mov	 eax, DWORD PTR [eax]
  000d8	52		 push	 edx
  000d9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000dc	ff d1		 call	 ecx
  000de	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@OnEventMat:

; 1135 : 	}
; 1136 : 
; 1137 : 	return true;

  000e1	b0 01		 mov	 al, 1

; 1138 : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
?OnEventMatchOver@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::OnEventMatchOver
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z
_TEXT	SEGMENT
tv191 = -120						; size = 4
tv179 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 4
_cbMatchStatus$4 = -37					; size = 1
_MatchStart$5 = -36					; size = 16
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pMatch$ = 8						; size = 4
?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z PROC ; CImmediateMatch::OnEventMatchStart, COMDAT
; _this$ = ecx

; 1077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1078 : 	ASSERT(pMatch==m_pCurMatchGroup&&m_LoopTimer.GetCount()>0);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  00034	3b 48 70	 cmp	 ecx, DWORD PTR [eax+112]
  00037	75 0f		 jne	 SHORT $LN4@OnEventMat
  00039	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 34	 add	 ecx, 52			; 00000034H
  0003f	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@EABE@@QBEHXZ ; CWHArray<unsigned char,unsigned char const &>::GetCount
  00044	85 c0		 test	 eax, eax
  00046	7f 19		 jg	 SHORT $LN5@OnEventMat
$LN4@OnEventMat:
  00048	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z@4JA
  0004e	83 c2 01	 add	 edx, 1
  00051	52		 push	 edx
  00052	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00057	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005c	85 c0		 test	 eax, eax
  0005e	74 01		 je	 SHORT $LN5@OnEventMat
  00060	cc		 int	 3
$LN5@OnEventMat:

; 1079 : 
; 1080 : 	if (pMatch!=NULL)

  00061	83 7d 08 00	 cmp	 DWORD PTR _pMatch$[ebp], 0
  00065	0f 84 65 01 00
	00		 je	 $LN2@OnEventMat

; 1081 : 	{
; 1082 : 		//变量定义
; 1083 : 		DBR_GR_MatchStart MatchStart;
; 1084 : 
; 1085 : 		//构造结构
; 1086 : 		MatchStart.dwMatchID=m_pMatchOption->dwMatchID;

  0006b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 88 bc 01 00
	00		 mov	 ecx, DWORD PTR [eax+444]
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 55 e0	 mov	 DWORD PTR _MatchStart$5[ebp+4], edx

; 1087 : 		MatchStart.lMatchNo=pMatch->m_lMatchNo;

  00079	8b 45 08	 mov	 eax, DWORD PTR _pMatch$[ebp]
  0007c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007f	89 4d e4	 mov	 DWORD PTR _MatchStart$5[ebp+8], ecx
  00082	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00085	89 55 e8	 mov	 DWORD PTR _MatchStart$5[ebp+12], edx

; 1088 : 		MatchStart.cbMatchType=m_pMatchOption->cbMatchType;

  00088	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	8b 88 bc 01 00
	00		 mov	 ecx, DWORD PTR [eax+444]
  00091	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00094	88 55 de	 mov	 BYTE PTR _MatchStart$5[ebp+2], dl

; 1089 : 		MatchStart.wServerID=m_pGameServiceOption->wServerID;

  00097	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  000a0	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  000a4	66 89 55 dc	 mov	 WORD PTR _MatchStart$5[ebp], dx

; 1090 : 
; 1091 : 		//投递请求
; 1092 : 		m_pIDataBaseEngine->PostDataBaseRequest(MatchStart.dwMatchID,DBR_GR_MATCH_START,0,&MatchStart,sizeof(MatchStart));

  000a8	6a 00		 push	 0
  000aa	6a 10		 push	 16			; 00000010H
  000ac	8d 45 dc	 lea	 eax, DWORD PTR _MatchStart$5[ebp]
  000af	50		 push	 eax
  000b0	6a 00		 push	 0
  000b2	68 5d 02 00 00	 push	 605			; 0000025dH
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _MatchStart$5[ebp+4]
  000ba	51		 push	 ecx
  000bb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000be	8b 82 d4 01 00
	00		 mov	 eax, DWORD PTR [edx+468]
  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	8b 91 d4 01 00
	00		 mov	 edx, DWORD PTR [ecx+468]
  000cd	8b 00		 mov	 eax, DWORD PTR [eax]
  000cf	52		 push	 edx
  000d0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d3	ff d1		 call	 ecx
  000d5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1093 : 	
; 1094 : 		//编号不够 不能报名的
; 1095 : 		pMatch->m_LoopTimer=m_LoopTimer[0];

  000d8	6a 00		 push	 0
  000da	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	83 c1 34	 add	 ecx, 52			; 00000034H
  000e0	e8 00 00 00 00	 call	 ??A?$CWHArray@EABE@@QAEAAEH@Z ; CWHArray<unsigned char,unsigned char const &>::operator[]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _pMatch$[ebp]
  000e8	8a 10		 mov	 dl, BYTE PTR [eax]
  000ea	88 51 19	 mov	 BYTE PTR [ecx+25], dl

; 1096 : 		m_LoopTimer.RemoveAt(0);

  000ed	6a 01		 push	 1
  000ef	6a 00		 push	 0
  000f1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f4	83 c1 34	 add	 ecx, 52			; 00000034H
  000f7	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@EABE@@QAEXHH@Z ; CWHArray<unsigned char,unsigned char const &>::RemoveAt

; 1097 : 		m_MatchGroup.Add(pMatch);

  000fc	8d 45 08	 lea	 eax, DWORD PTR _pMatch$[ebp]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	83 c1 48	 add	 ecx, 72			; 00000048H
  00106	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABQAVCImmediateGroup@@@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Add

; 1098 : 
; 1099 : 		//准备新的一组比赛
; 1100 : 		m_dwStartTime=(DWORD)time(NULL);

  0010b	6a 00		 push	 0
  0010d	e8 00 00 00 00	 call	 _time
  00112	83 c4 04	 add	 esp, 4
  00115	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1101 : 		m_pCurMatchGroup=new CImmediateGroup(CalcMatchNo(),m_pMatchOption,this);

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z@4JA
  00120	83 c0 18	 add	 eax, 24			; 00000018H
  00123	50		 push	 eax
  00124	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00129	68 90 00 00 00	 push	 144			; 00000090H
  0012e	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH
  00136	89 45 90	 mov	 DWORD PTR $T2[ebp], eax
  00139	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00140	83 7d 90 00	 cmp	 DWORD PTR $T2[ebp], 0
  00144	74 3f		 je	 SHORT $LN8@OnEventMat
  00146	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	83 e9 04	 sub	 ecx, 4
  0014c	74 08		 je	 SHORT $LN6@OnEventMat
  0014e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00151	89 55 8c	 mov	 DWORD PTR tv179[ebp], edx
  00154	eb 07		 jmp	 SHORT $LN7@OnEventMat
$LN6@OnEventMat:
  00156	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN7@OnEventMat:
  0015d	8b 45 8c	 mov	 eax, DWORD PTR tv179[ebp]
  00160	50		 push	 eax
  00161	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00164	8b 91 bc 01 00
	00		 mov	 edx, DWORD PTR [ecx+444]
  0016a	52		 push	 edx
  0016b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	83 e9 04	 sub	 ecx, 4
  00171	e8 00 00 00 00	 call	 ?CalcMatchNo@CImmediateMatch@@AAE_JXZ ; CImmediateMatch::CalcMatchNo
  00176	52		 push	 edx
  00177	50		 push	 eax
  00178	8b 4d 90	 mov	 ecx, DWORD PTR $T2[ebp]
  0017b	e8 00 00 00 00	 call	 ??0CImmediateGroup@@QAE@_JPAUtagGameMatchOption@@PAUIImmediateGroupSink@@@Z ; CImmediateGroup::CImmediateGroup
  00180	89 45 88	 mov	 DWORD PTR tv191[ebp], eax
  00183	eb 07		 jmp	 SHORT $LN9@OnEventMat
$LN8@OnEventMat:
  00185	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv191[ebp], 0
$LN9@OnEventMat:
  0018c	8b 45 88	 mov	 eax, DWORD PTR tv191[ebp]
  0018f	89 45 94	 mov	 DWORD PTR $T3[ebp], eax
  00192	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00199	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	8b 55 94	 mov	 edx, DWORD PTR $T3[ebp]
  0019f	89 51 70	 mov	 DWORD PTR [ecx+112], edx

; 1102 : 		
; 1103 : 		SendMatchInfo(NULL);

  001a2	6a 00		 push	 0
  001a4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001a7	8b 10		 mov	 edx, DWORD PTR [eax]
  001a9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001af	ff d0		 call	 eax

; 1104 : 		BYTE cbMatchStatus=MS_MATCHING;

  001b1	c6 45 db 02	 mov	 BYTE PTR _cbMatchStatus$4[ebp], 2

; 1105 : 		SendGroupData( MDM_GR_MATCH, SUB_GR_MATCH_STATUS, &cbMatchStatus, sizeof(cbMatchStatus),pMatch);

  001b5	8b 45 08	 mov	 eax, DWORD PTR _pMatch$[ebp]
  001b8	50		 push	 eax
  001b9	6a 01		 push	 1
  001bb	8d 4d db	 lea	 ecx, DWORD PTR _cbMatchStatus$4[ebp]
  001be	51		 push	 ecx
  001bf	6a 0a		 push	 10			; 0000000aH
  001c1	6a 0a		 push	 10			; 0000000aH
  001c3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001c6	8b 02		 mov	 eax, DWORD PTR [edx]
  001c8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001cb	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  001ce	ff d2		 call	 edx
$LN2@OnEventMat:

; 1106 : 	}
; 1107 : 
; 1108 : 	return true;

  001d0	b0 01		 mov	 al, 1

; 1109 : }

  001d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001dc	59		 pop	 ecx
  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
  001df	5b		 pop	 ebx
  001e0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e3	33 cd		 xor	 ecx, ebp
  001e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z@4JA
  00005	83 c0 18	 add	 eax, 24			; 00000018H
  00008	50		 push	 eax
  00009	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0000e	8b 45 90	 mov	 eax, DWORD PTR $T2[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	c3		 ret	 0
__ehhandler$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnEventMatchStart@CImmediateMatch@@UAE_NPAVCImmediateGroup@@@Z ENDP ; CImmediateMatch::OnEventMatchStart
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserItemRight@CImmediateMatch@@UAE_NPAUIServerUserItem@@KKE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
_dwAddRight$ = 12					; size = 4
_dwRemoveRight$ = 16					; size = 4
_cbRightKind$ = 20					; size = 1
?OnEventUserItemRight@CImmediateMatch@@UAE_NPAUIServerUserItem@@KKE@Z PROC ; CImmediateMatch::OnEventUserItemRight, COMDAT
; _this$ = ecx

; 1066 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1067 : 	if(m_pIServerUserItemSink!=NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 e4 01 00
	00 00		 cmp	 DWORD PTR [eax+484], 0
  00016	74 2c		 je	 SHORT $LN2@OnEventUse

; 1068 : 	{
; 1069 : 		return m_pIServerUserItemSink->OnEventUserItemRight(pIServerUserItem,dwAddRight,dwRemoveRight,cbRightKind);

  00018	0f b6 45 14	 movzx	 eax, BYTE PTR _cbRightKind$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 10	 mov	 ecx, DWORD PTR _dwRemoveRight$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 0c	 mov	 edx, DWORD PTR _dwAddRight$[ebp]
  00024	52		 push	 edx
  00025	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 91 e4 01 00
	00		 mov	 edx, DWORD PTR [ecx+484]
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 12		 mov	 edx, DWORD PTR [edx]
  00037	8b 88 e4 01 00
	00		 mov	 ecx, DWORD PTR [eax+484]
  0003d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00040	ff d0		 call	 eax
  00042	eb 02		 jmp	 SHORT $LN1@OnEventUse
$LN2@OnEventUse:

; 1070 : 	}
; 1071 : 
; 1072 : 	return true;

  00044	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1073 : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
?OnEventUserItemRight@CImmediateMatch@@UAE_NPAUIServerUserItem@@KKE@Z ENDP ; CImmediateMatch::OnEventUserItemRight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserItemStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@GG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
_wLastTableID$ = 12					; size = 2
_wLastChairID$ = 16					; size = 2
?OnEventUserItemStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@GG@Z PROC ; CImmediateMatch::OnEventUserItemStatus, COMDAT
; _this$ = ecx

; 1051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1052 : 	//清除数据
; 1053 : 	if(pIServerUserItem->GetUserStatus()==US_NULL) pIServerUserItem->SetMatchData(NULL);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00014	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00017	ff d0		 call	 eax
  00019	0f b6 c8	 movzx	 ecx, al
  0001c	85 c9		 test	 ecx, ecx
  0001e	75 12		 jne	 SHORT $LN2@OnEventUse
  00020	6a 00		 push	 0
  00022	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0002a	8b 82 dc 00 00
	00		 mov	 eax, DWORD PTR [edx+220]
  00030	ff d0		 call	 eax
$LN2@OnEventUse:

; 1054 : 
; 1055 : 	//回调接口
; 1056 : 	if(m_pIServerUserItemSink!=NULL)

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 b8 e4 01 00
	00 00		 cmp	 DWORD PTR [eax+484], 0
  0003c	74 29		 je	 SHORT $LN3@OnEventUse

; 1057 : 	{
; 1058 : 		return m_pIServerUserItemSink->OnEventUserItemStatus(pIServerUserItem,wLastTableID,wLastChairID);

  0003e	0f b7 45 10	 movzx	 eax, WORD PTR _wLastChairID$[ebp]
  00042	50		 push	 eax
  00043	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wLastTableID$[ebp]
  00047	51		 push	 ecx
  00048	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 88 e4 01 00
	00		 mov	 ecx, DWORD PTR [eax+484]
  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005a	8b 8a e4 01 00
	00		 mov	 ecx, DWORD PTR [edx+484]
  00060	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00063	ff d2		 call	 edx
  00065	eb 02		 jmp	 SHORT $LN1@OnEventUse
$LN3@OnEventUse:

; 1059 : 	}
; 1060 : 
; 1061 : 	return true;

  00067	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1062 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 0c 00	 ret	 12			; 0000000cH
?OnEventUserItemStatus@CImmediateMatch@@UAE_NPAUIServerUserItem@@GG@Z ENDP ; CImmediateMatch::OnEventUserItemStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserItemGameData@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
?OnEventUserItemGameData@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z PROC ; CImmediateMatch::OnEventUserItemGameData, COMDAT
; _this$ = ecx

; 1040 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1041 : 	if(m_pIServerUserItemSink!=NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 e4 01 00
	00 00		 cmp	 DWORD PTR [eax+484], 0
  00016	74 24		 je	 SHORT $LN2@OnEventUse

; 1042 : 	{
; 1043 : 		return m_pIServerUserItemSink->OnEventUserItemGameData(pIServerUserItem,cbReason);

  00018	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbReason$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 82 e4 01 00
	00		 mov	 eax, DWORD PTR [edx+484]
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 10		 mov	 edx, DWORD PTR [eax]
  0002f	8b 89 e4 01 00
	00		 mov	 ecx, DWORD PTR [ecx+484]
  00035	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00038	ff d0		 call	 eax
  0003a	eb 02		 jmp	 SHORT $LN1@OnEventUse
$LN2@OnEventUse:

; 1044 : 	}
; 1045 : 
; 1046 : 	return true;

  0003c	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1047 : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?OnEventUserItemGameData@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z ENDP ; CImmediateMatch::OnEventUserItemGameData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z
_TEXT	SEGMENT
_WriteVideoPlayer$1 = -384				; size = 48
_WriteGameScore$2 = -336				; size = 120
_MobileUserScore$ = -216				; size = 96
_pUserInfo$ = -120					; size = 4
_UserScore$ = -116					; size = 104
_pImmediateGroup$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
?OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z PROC ; CImmediateMatch::OnEventUserItemScore, COMDAT
; _this$ = ecx

; 924  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 925  : 	//效验参数
; 926  : 	ASSERT(pIServerUserItem!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN9@OnEventUse
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN9@OnEventUse
  00036	cc		 int	 3
$LN9@OnEventUse:

; 927  : 	if (pIServerUserItem==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN2@OnEventUse
  0003d	32 c0		 xor	 al, al
  0003f	e9 02 05 00 00	 jmp	 $LN1@OnEventUse
$LN2@OnEventUse:

; 928  : 
; 929  : 	//获取对象
; 930  : 	CImmediateGroup * pImmediateGroup = static_cast<CImmediateGroup *>(pIServerUserItem->GetMatchData());

  00044	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0004c	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  00052	ff d0		 call	 eax
  00054	89 45 f4	 mov	 DWORD PTR _pImmediateGroup$[ebp], eax

; 931  : 	if(pImmediateGroup==NULL)

  00057	83 7d f4 00	 cmp	 DWORD PTR _pImmediateGroup$[ebp], 0
  0005b	75 27		 jne	 SHORT $LN3@OnEventUse

; 932  : 	{
; 933  : 		return m_pIServerUserItemSink->OnEventUserItemScore(pIServerUserItem, cbReason);

  0005d	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbReason$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00069	8b 82 e4 01 00
	00		 mov	 eax, DWORD PTR [edx+484]
  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 10		 mov	 edx, DWORD PTR [eax]
  00074	8b 89 e4 01 00
	00		 mov	 ecx, DWORD PTR [ecx+484]
  0007a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0007d	ff d0		 call	 eax
  0007f	e9 c2 04 00 00	 jmp	 $LN1@OnEventUse
$LN3@OnEventUse:

; 934  : 	}
; 935  : 
; 936  : 	//效验参数
; 937  : 	ASSERT(pIServerUserItem!=NULL);

  00084	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00088	75 18		 jne	 SHORT $LN10@OnEventUse
  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z@4JA
  0008f	83 c0 0d	 add	 eax, 13			; 0000000dH
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00098	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0009d	85 c0		 test	 eax, eax
  0009f	74 01		 je	 SHORT $LN10@OnEventUse
  000a1	cc		 int	 3
$LN10@OnEventUse:

; 938  : 	if (pIServerUserItem==NULL) return false;

  000a2	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  000a6	75 07		 jne	 SHORT $LN4@OnEventUse
  000a8	32 c0		 xor	 al, al
  000aa	e9 97 04 00 00	 jmp	 $LN1@OnEventUse
$LN4@OnEventUse:

; 939  : 
; 940  : 	//变量定义
; 941  : 	CMD_GR_UserScore UserScore;
; 942  : 	ZeroMemory(&UserScore,sizeof(UserScore));

  000af	6a 68		 push	 104			; 00000068H
  000b1	6a 00		 push	 0
  000b3	8d 45 8c	 lea	 eax, DWORD PTR _UserScore$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _memset
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 943  : 	tagUserInfo * pUserInfo=pIServerUserItem->GetUserInfo();

  000bf	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000c2	8b 10		 mov	 edx, DWORD PTR [eax]
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000c7	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000ca	ff d0		 call	 eax
  000cc	89 45 88	 mov	 DWORD PTR _pUserInfo$[ebp], eax

; 944  : 
; 945  : 	//构造数据
; 946  : 	UserScore.dwUserID=pUserInfo->dwUserID;

  000cf	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d4	89 4d 8c	 mov	 DWORD PTR _UserScore$[ebp], ecx

; 947  : 	UserScore.UserScore.dwWinCount=pUserInfo->dwWinCount;

  000d7	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000da	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  000e0	89 4d d0	 mov	 DWORD PTR _UserScore$[ebp+68], ecx

; 948  : 	UserScore.UserScore.dwLostCount=pUserInfo->dwLostCount;

  000e3	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000e6	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  000ec	89 4d d4	 mov	 DWORD PTR _UserScore$[ebp+72], ecx

; 949  : 	UserScore.UserScore.dwDrawCount=pUserInfo->dwDrawCount;

  000ef	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000f2	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  000f8	89 4d d8	 mov	 DWORD PTR _UserScore$[ebp+76], ecx

; 950  : 	UserScore.UserScore.dwFleeCount=pUserInfo->dwFleeCount;	

  000fb	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  000fe	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  00104	89 4d dc	 mov	 DWORD PTR _UserScore$[ebp+80], ecx

; 951  : 	UserScore.UserScore.dwExperience=pUserInfo->dwExperience;

  00107	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0010a	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  00110	89 4d ec	 mov	 DWORD PTR _UserScore$[ebp+96], ecx

; 952  : 	UserScore.UserScore.lLoveLiness=pUserInfo->lLoveLiness;

  00113	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00116	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  0011c	89 4d f0	 mov	 DWORD PTR _UserScore$[ebp+100], ecx

; 953  : 	UserScore.UserScore.lIntegralCount =pUserInfo->lIntegralCount;

  0011f	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00122	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  00128	89 4d e0	 mov	 DWORD PTR _UserScore$[ebp+84], ecx
  0012b	8b 90 f8 00 00
	00		 mov	 edx, DWORD PTR [eax+248]
  00131	89 55 e4	 mov	 DWORD PTR _UserScore$[ebp+88], edx

; 954  : 
; 955  : 	//构造积分
; 956  : 	UserScore.UserScore.bConsumptionType.lGrade = pUserInfo->bConsumptionType.lGrade;

  00134	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00137	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0013d	89 4d 90	 mov	 DWORD PTR _UserScore$[ebp+4], ecx
  00140	8b 90 9c 00 00
	00		 mov	 edx, DWORD PTR [eax+156]
  00146	89 55 94	 mov	 DWORD PTR _UserScore$[ebp+8], edx

; 957  : 	UserScore.UserScore.bConsumptionType.lInsure = pUserInfo->bConsumptionType.lInsure;

  00149	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0014c	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00152	89 4d 98	 mov	 DWORD PTR _UserScore$[ebp+12], ecx
  00155	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  0015b	89 55 9c	 mov	 DWORD PTR _UserScore$[ebp+16], edx

; 958  : 	UserScore.UserScore.bConsumptionType.lIngot = pUserInfo->bConsumptionType.lIngot;

  0015e	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00161	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00167	89 4d a8	 mov	 DWORD PTR _UserScore$[ebp+28], ecx
  0016a	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  00170	89 55 ac	 mov	 DWORD PTR _UserScore$[ebp+32], edx

; 959  : 	UserScore.UserScore.bConsumptionType.lBeans = pUserInfo->bConsumptionType.lBeans;

  00173	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00176	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  0017c	89 4d b0	 mov	 DWORD PTR _UserScore$[ebp+36], ecx
  0017f	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  00185	89 55 b4	 mov	 DWORD PTR _UserScore$[ebp+40], edx

; 960  : 
; 961  : 	//构造积分
; 962  : 	UserScore.UserScore.bConsumptionType.lScore = pUserInfo->bConsumptionType.lScore;

  00188	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0018b	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00191	89 4d a0	 mov	 DWORD PTR _UserScore$[ebp+20], ecx
  00194	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  0019a	89 55 a4	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 963  : 	UserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetTrusteeScore();

  0019d	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001a0	8b 10		 mov	 edx, DWORD PTR [eax]
  001a2	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001a5	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001ab	ff d0		 call	 eax
  001ad	03 45 a0	 add	 eax, DWORD PTR _UserScore$[ebp+20]
  001b0	13 55 a4	 adc	 edx, DWORD PTR _UserScore$[ebp+24]
  001b3	89 45 a0	 mov	 DWORD PTR _UserScore$[ebp+20], eax
  001b6	89 55 a4	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 964  : 	UserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetFrozenedScore();

  001b9	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001bc	8b 10		 mov	 edx, DWORD PTR [eax]
  001be	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001c1	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  001c7	ff d0		 call	 eax
  001c9	03 45 a0	 add	 eax, DWORD PTR _UserScore$[ebp+20]
  001cc	13 55 a4	 adc	 edx, DWORD PTR _UserScore$[ebp+24]
  001cf	89 45 a0	 mov	 DWORD PTR _UserScore$[ebp+20], eax
  001d2	89 55 a4	 mov	 DWORD PTR _UserScore$[ebp+24], edx

; 965  : 
; 966  : 	//发送数据
; 967  : 	m_pIGameServiceFrame->SendData(BG_ALL_CLIENT,MDM_GR_USER,SUB_GR_USER_SCORE,&UserScore,sizeof(UserScore));

  001d5	6a 68		 push	 104			; 00000068H
  001d7	8d 45 8c	 lea	 eax, DWORD PTR _UserScore$[ebp]
  001da	50		 push	 eax
  001db	6a 65		 push	 101			; 00000065H
  001dd	6a 03		 push	 3
  001df	68 ff 00 00 00	 push	 255			; 000000ffH
  001e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e7	8b 91 d8 01 00
	00		 mov	 edx, DWORD PTR [ecx+472]
  001ed	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f0	8b 12		 mov	 edx, DWORD PTR [edx]
  001f2	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  001f8	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001fb	ff d0		 call	 eax

; 968  : 
; 969  : 	//变量定义
; 970  : 	CMD_GR_MobileUserScore MobileUserScore;
; 971  : 	ZeroMemory(&MobileUserScore,sizeof(MobileUserScore));

  001fd	6a 60		 push	 96			; 00000060H
  001ff	6a 00		 push	 0
  00201	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _MobileUserScore$[ebp]
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 _memset
  0020d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 972  : 
; 973  : 	//构造数据
; 974  : 	MobileUserScore.dwUserID=pUserInfo->dwUserID;

  00210	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00213	8b 08		 mov	 ecx, DWORD PTR [eax]
  00215	89 8d 28 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp], ecx

; 975  : 	MobileUserScore.UserScore.dwWinCount=pUserInfo->dwWinCount;

  0021b	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0021e	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00224	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+68], ecx

; 976  : 	MobileUserScore.UserScore.dwLostCount=pUserInfo->dwLostCount;

  0022a	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0022d	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  00233	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+72], ecx

; 977  : 	MobileUserScore.UserScore.dwDrawCount=pUserInfo->dwDrawCount;

  00239	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0023c	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00242	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+76], ecx

; 978  : 	MobileUserScore.UserScore.dwFleeCount=pUserInfo->dwFleeCount;

  00248	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0024b	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  00251	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+80], ecx

; 979  : 	MobileUserScore.UserScore.dwExperience=pUserInfo->dwExperience;

  00257	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0025a	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  00260	89 4d 84	 mov	 DWORD PTR _MobileUserScore$[ebp+92], ecx

; 980  : 	MobileUserScore.UserScore.lIntegralCount=pUserInfo->lIntegralCount;

  00263	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  00266	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  0026c	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+84], ecx
  00272	8b 90 f8 00 00
	00		 mov	 edx, DWORD PTR [eax+248]
  00278	89 55 80	 mov	 DWORD PTR _MobileUserScore$[ebp+88], edx

; 981  : 
; 982  : 	//构造积分
; 983  : 	MobileUserScore.UserScore.bConsumptionType.lScore = pUserInfo->bConsumptionType.lScore;

  0027b	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  0027e	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00284	89 8d 3c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+20], ecx
  0028a	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  00290	89 95 40 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+24], edx

; 984  : 	MobileUserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetTrusteeScore();

  00296	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00299	8b 10		 mov	 edx, DWORD PTR [eax]
  0029b	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0029e	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  002a4	ff d0		 call	 eax
  002a6	03 85 3c ff ff
	ff		 add	 eax, DWORD PTR _MobileUserScore$[ebp+20]
  002ac	13 95 40 ff ff
	ff		 adc	 edx, DWORD PTR _MobileUserScore$[ebp+24]
  002b2	89 85 3c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+20], eax
  002b8	89 95 40 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+24], edx

; 985  : 	MobileUserScore.UserScore.bConsumptionType.lScore += pIServerUserItem->GetFrozenedScore();

  002be	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  002c1	8b 10		 mov	 edx, DWORD PTR [eax]
  002c3	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002c6	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  002cc	ff d0		 call	 eax
  002ce	03 85 3c ff ff
	ff		 add	 eax, DWORD PTR _MobileUserScore$[ebp+20]
  002d4	13 95 40 ff ff
	ff		 adc	 edx, DWORD PTR _MobileUserScore$[ebp+24]
  002da	89 85 3c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+20], eax
  002e0	89 95 40 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+24], edx

; 986  : 	MobileUserScore.UserScore.bConsumptionType.lBeans = pUserInfo->bConsumptionType.lBeans;

  002e6	8b 45 88	 mov	 eax, DWORD PTR _pUserInfo$[ebp]
  002e9	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  002ef	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+36], ecx
  002f5	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  002fb	89 95 50 ff ff
	ff		 mov	 DWORD PTR _MobileUserScore$[ebp+40], edx

; 987  : 
; 988  : 	//发送数据
; 989  : 	m_pIGameServiceFrame->SendDataBatchToMobileUser(pIServerUserItem->GetTableID(),MDM_GR_USER,SUB_GR_USER_SCORE,&MobileUserScore,sizeof(MobileUserScore));

  00301	6a 60		 push	 96			; 00000060H
  00303	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _MobileUserScore$[ebp]
  00309	50		 push	 eax
  0030a	6a 65		 push	 101			; 00000065H
  0030c	6a 03		 push	 3
  0030e	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00311	8b 11		 mov	 edx, DWORD PTR [ecx]
  00313	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00316	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00319	ff d0		 call	 eax
  0031b	0f b7 c8	 movzx	 ecx, ax
  0031e	51		 push	 ecx
  0031f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00322	8b 82 d8 01 00
	00		 mov	 eax, DWORD PTR [edx+472]
  00328	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	8b 10		 mov	 edx, DWORD PTR [eax]
  0032d	8b 89 d8 01 00
	00		 mov	 ecx, DWORD PTR [ecx+472]
  00333	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00336	ff d0		 call	 eax

; 990  : 
; 991  : 	//即时写分
; 992  : 	if ((CServerRule::IsImmediateWriteScore(m_pGameServiceOption->dwServerRule)==true)&&(pIServerUserItem->IsVariation()==true))

  00338	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0033b	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00341	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00344	52		 push	 edx
  00345	e8 00 00 00 00	 call	 ?IsImmediateWriteScore@CServerRule@@SA_NK@Z ; CServerRule::IsImmediateWriteScore
  0034a	83 c4 04	 add	 esp, 4
  0034d	0f b6 c0	 movzx	 eax, al
  00350	83 f8 01	 cmp	 eax, 1
  00353	0f 85 eb 01 00
	00		 jne	 $LN5@OnEventUse
  00359	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0035c	8b 10		 mov	 edx, DWORD PTR [eax]
  0035e	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00361	8b 82 f0 00 00
	00		 mov	 eax, DWORD PTR [edx+240]
  00367	ff d0		 call	 eax
  00369	0f b6 c8	 movzx	 ecx, al
  0036c	83 f9 01	 cmp	 ecx, 1
  0036f	0f 85 cf 01 00
	00		 jne	 $LN5@OnEventUse

; 993  : 	{
; 994  : 		//变量定义
; 995  : 		DBR_GR_WriteGameScore WriteGameScore;
; 996  : 		ZeroMemory(&WriteGameScore,sizeof(WriteGameScore));

  00375	6a 78		 push	 120			; 00000078H
  00377	6a 00		 push	 0
  00379	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _WriteGameScore$2[ebp]
  0037f	50		 push	 eax
  00380	e8 00 00 00 00	 call	 _memset
  00385	83 c4 0c	 add	 esp, 12			; 0000000cH

; 997  : 
; 998  : 		//用户信息
; 999  : 		WriteGameScore.dwUserID=pIServerUserItem->GetUserID();

  00388	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0038b	8b 10		 mov	 edx, DWORD PTR [eax]
  0038d	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00390	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00393	ff d0		 call	 eax
  00395	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp], eax

; 1000 : 		WriteGameScore.dwDBQuestID=pIServerUserItem->GetDBQuestID();

  0039b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0039e	8b 10		 mov	 edx, DWORD PTR [eax]
  003a0	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  003a3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003a6	ff d0		 call	 eax
  003a8	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+8], eax

; 1001 : 		WriteGameScore.dwClientAddr=pIServerUserItem->GetClientAddr();

  003ae	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  003b1	8b 10		 mov	 edx, DWORD PTR [eax]
  003b3	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  003b6	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003b9	ff d0		 call	 eax
  003bb	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+4], eax

; 1002 : 		WriteGameScore.dwInoutIndex=pIServerUserItem->GetInoutIndex();

  003c1	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  003c4	8b 10		 mov	 edx, DWORD PTR [eax]
  003c6	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  003c9	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  003cc	ff d0		 call	 eax
  003ce	89 85 bc fe ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+12], eax

; 1003 : 
; 1004 : 		//提取积分
; 1005 : 		pIServerUserItem->DistillVariation(WriteGameScore.VariationInfo);

  003d4	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _WriteGameScore$2[ebp+24]
  003da	50		 push	 eax
  003db	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  003de	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e0	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  003e3	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  003e9	ff d0		 call	 eax

; 1006 : 
; 1007 : 		//比赛信息
; 1008 : 		WriteGameScore.dwMatchID=m_pMatchOption->dwMatchID;

  003eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ee	8b 88 b8 01 00
	00		 mov	 ecx, DWORD PTR [eax+440]
  003f4	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f6	89 95 18 ff ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+104], edx

; 1009 : 		WriteGameScore.lMatchNo=pImmediateGroup->m_lMatchNo;

  003fc	8b 45 f4	 mov	 eax, DWORD PTR _pImmediateGroup$[ebp]
  003ff	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00402	89 8d 20 ff ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+112], ecx
  00408	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0040b	89 95 24 ff ff
	ff		 mov	 DWORD PTR _WriteGameScore$2[ebp+116], edx

; 1010 : 
; 1011 : 		//投递请求
; 1012 : 		m_pIDataBaseEngine->PostDataBaseRequest(WriteGameScore.dwUserID,DBR_GR_WRITE_GAME_SCORE,0L,&WriteGameScore,sizeof(WriteGameScore),TRUE);

  00411	6a 01		 push	 1
  00413	6a 78		 push	 120			; 00000078H
  00415	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _WriteGameScore$2[ebp]
  0041b	50		 push	 eax
  0041c	6a 00		 push	 0
  0041e	68 c8 00 00 00	 push	 200			; 000000c8H
  00423	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _WriteGameScore$2[ebp]
  00429	51		 push	 ecx
  0042a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0042d	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  00433	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00436	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  0043c	8b 00		 mov	 eax, DWORD PTR [eax]
  0043e	52		 push	 edx
  0043f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00442	ff d1		 call	 ecx
  00444	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1013 : 
; 1014 : 		//视频回放
; 1015 : 		if(CServerRule::IsSuportPlayBack(m_pGameServiceOption->dwServerRule))

  00447	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0044a	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00450	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00453	52		 push	 edx
  00454	e8 00 00 00 00	 call	 ?IsSuportPlayBack@CServerRule@@SA_NK@Z ; CServerRule::IsSuportPlayBack
  00459	83 c4 04	 add	 esp, 4
  0045c	0f b6 c0	 movzx	 eax, al
  0045f	85 c0		 test	 eax, eax
  00461	0f 84 dd 00 00
	00		 je	 $LN5@OnEventUse

; 1016 : 		{
; 1017 : 			DBR_GR_WriteVideoPlayer WriteVideoPlayer;
; 1018 : 			ZeroMemory(&WriteVideoPlayer, sizeof(DBR_GR_WriteVideoPlayer));

  00467	6a 30		 push	 48			; 00000030H
  00469	6a 00		 push	 0
  0046b	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _WriteVideoPlayer$1[ebp]
  00471	50		 push	 eax
  00472	e8 00 00 00 00	 call	 _memset
  00477	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1019 : 
; 1020 : 			memcpy(WriteVideoPlayer.szVideoID,pIServerUserItem->GetVideoNumber(),sizeof(WriteVideoPlayer.szVideoID) );

  0047a	6a 16		 push	 22			; 00000016H
  0047c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0047f	8b 10		 mov	 edx, DWORD PTR [eax]
  00481	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00484	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00487	ff d0		 call	 eax
  00489	50		 push	 eax
  0048a	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR _WriteVideoPlayer$1[ebp+4]
  00490	51		 push	 ecx
  00491	e8 00 00 00 00	 call	 _memcpy
  00496	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1021 : 			if(WriteVideoPlayer.szVideoID[0] != '\0')

  00499	b8 01 00 00 00	 mov	 eax, 1
  0049e	6b c8 00	 imul	 ecx, eax, 0
  004a1	0f be 94 0d 84
	fe ff ff	 movsx	 edx, BYTE PTR _WriteVideoPlayer$1[ebp+ecx+4]
  004a9	85 d2		 test	 edx, edx
  004ab	0f 84 93 00 00
	00		 je	 $LN5@OnEventUse

; 1022 : 			{
; 1023 : 				WriteVideoPlayer.dwUserID	= WriteGameScore.dwUserID;

  004b1	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _WriteGameScore$2[ebp]
  004b7	89 85 80 fe ff
	ff		 mov	 DWORD PTR _WriteVideoPlayer$1[ebp], eax

; 1024 : 				WriteVideoPlayer.lScore		= WriteGameScore.VariationInfo.lScore;

  004bd	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _WriteGameScore$2[ebp+24]
  004c3	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _WriteVideoPlayer$1[ebp+32], eax
  004c9	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _WriteGameScore$2[ebp+28]
  004cf	89 8d a4 fe ff
	ff		 mov	 DWORD PTR _WriteVideoPlayer$1[ebp+36], ecx

; 1025 : 				WriteVideoPlayer.wChairID	= pIServerUserItem->GetChairID();

  004d5	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  004d8	8b 10		 mov	 edx, DWORD PTR [eax]
  004da	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  004dd	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  004e0	ff d0		 call	 eax
  004e2	66 89 85 a8 fe
	ff ff		 mov	 WORD PTR _WriteVideoPlayer$1[ebp+40], ax

; 1026 : 				WriteVideoPlayer.wKindID	= m_pGameServiceAttrib->wKindID;

  004e9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004ec	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  004f2	66 8b 11	 mov	 dx, WORD PTR [ecx]
  004f5	66 89 95 aa fe
	ff ff		 mov	 WORD PTR _WriteVideoPlayer$1[ebp+42], dx

; 1027 : 
; 1028 : 				m_pIDataBaseEngine->PostDataBaseRequest(WriteVideoPlayer.dwUserID,DBR_GR_WRITE_VIDEO_PLAYER_INFO,0L,&WriteVideoPlayer,sizeof(WriteVideoPlayer), TRUE);

  004fc	6a 01		 push	 1
  004fe	6a 30		 push	 48			; 00000030H
  00500	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _WriteVideoPlayer$1[ebp]
  00506	50		 push	 eax
  00507	6a 00		 push	 0
  00509	68 40 06 00 00	 push	 1600			; 00000640H
  0050e	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR _WriteVideoPlayer$1[ebp]
  00514	51		 push	 ecx
  00515	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00518	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  0051e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00521	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00527	8b 00		 mov	 eax, DWORD PTR [eax]
  00529	52		 push	 edx
  0052a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0052d	ff d1		 call	 ecx
  0052f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1029 : 				
; 1030 : 				pIServerUserItem->SetVideoNumber("");

  00532	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00537	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0053a	8b 10		 mov	 edx, DWORD PTR [eax]
  0053c	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0053f	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00542	ff d0		 call	 eax
$LN5@OnEventUse:

; 1031 : 			}		
; 1032 : 		}
; 1033 : 	}
; 1034 : 
; 1035 : 	return true;

  00544	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 1036 : }

  00546	5f		 pop	 edi
  00547	5e		 pop	 esi
  00548	5b		 pop	 ebx
  00549	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0054c	33 cd		 xor	 ecx, ebp
  0054e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00553	8b e5		 mov	 esp, ebp
  00555	5d		 pop	 ebp
  00556	c2 08 00	 ret	 8
?OnEventUserItemScore@CImmediateMatch@@UAE_NPAUIServerUserItem@@E@Z ENDP ; CImmediateMatch::OnEventUserItemScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z
_TEXT	SEGMENT
tv277 = -164						; size = 4
_MatchUnSignup$1 = -96					; size = 72
_pMatch$2 = -24						; size = 4
_i$3 = -20						; size = 4
_nGroupCount$4 = -16					; size = 4
_cbUserMatchStatus$ = -9				; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
_pBestRank$ = 16					; size = 4
_dwContextID$ = 20					; size = 4
?OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z PROC ; CImmediateMatch::OnEventUserQuitMatch, COMDAT
; _this$ = ecx

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 846  : 	ASSERT(pIServerUserItem!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN16@OnEventUse
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z@4JA
  00024	83 c0 01	 add	 eax, 1
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN16@OnEventUse
  00036	cc		 int	 3
$LN16@OnEventUse:

; 847  : 	if (pIServerUserItem==NULL) return false;

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN5@OnEventUse
  0003d	32 c0		 xor	 al, al
  0003f	e9 1b 02 00 00	 jmp	 $LN1@OnEventUse
$LN5@OnEventUse:

; 848  : 
; 849  : 	//正在游戏状态
; 850  : 	if (pIServerUserItem->GetUserStatus()>=US_PLAYING)

  00044	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0004c	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0004f	ff d0		 call	 eax
  00051	0f b6 c8	 movzx	 ecx, al
  00054	83 f9 05	 cmp	 ecx, 5
  00057	7c 07		 jl	 SHORT $LN6@OnEventUse

; 851  : 	{
; 852  : 		return true;

  00059	b0 01		 mov	 al, 1
  0005b	e9 ff 01 00 00	 jmp	 $LN1@OnEventUse
$LN6@OnEventUse:

; 853  : 	}
; 854  : 
; 855  : 	//正在比赛阶段
; 856  : 	BYTE cbUserMatchStatus=pIServerUserItem->GetUserMatchStatus();

  00060	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00068	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0006e	ff d0		 call	 eax
  00070	88 45 f7	 mov	 BYTE PTR _cbUserMatchStatus$[ebp], al

; 857  : 	if (cbUserMatchStatus==MUS_PLAYING)

  00073	0f b6 45 f7	 movzx	 eax, BYTE PTR _cbUserMatchStatus$[ebp]
  00077	83 f8 04	 cmp	 eax, 4
  0007a	75 07		 jne	 SHORT $LN7@OnEventUse

; 858  : 	{
; 859  : 		return true;

  0007c	b0 01		 mov	 al, 1
  0007e	e9 dc 01 00 00	 jmp	 $LN1@OnEventUse
$LN7@OnEventUse:

; 860  : 	}
; 861  : 
; 862  : 	//否则玩家退赛
; 863  : 	if(RemoveMatchUserItem(pIServerUserItem))

  00083	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00086	50		 push	 eax
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?RemoveMatchUserItem@CImmediateMatch@@AAE_NPAUIServerUserItem@@@Z ; CImmediateMatch::RemoveMatchUserItem
  0008f	0f b6 c8	 movzx	 ecx, al
  00092	85 c9		 test	 ecx, ecx
  00094	0f 84 c3 01 00
	00		 je	 $LN8@OnEventUse

; 864  : 	{
; 865  : 		//从正在比赛的组中删除该玩家
; 866  : 		INT_PTR nGroupCount=m_MatchGroup.GetCount();

  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000a0	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  000a5	89 45 f0	 mov	 DWORD PTR _nGroupCount$4[ebp], eax

; 867  : 		for (INT_PTR i=0;i<nGroupCount;i++)

  000a8	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  000af	eb 09		 jmp	 SHORT $LN4@OnEventUse
$LN2@OnEventUse:
  000b1	8b 45 ec	 mov	 eax, DWORD PTR _i$3[ebp]
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 45 ec	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@OnEventUse:
  000ba	8b 45 ec	 mov	 eax, DWORD PTR _i$3[ebp]
  000bd	3b 45 f0	 cmp	 eax, DWORD PTR _nGroupCount$4[ebp]
  000c0	7d 57		 jge	 SHORT $LN3@OnEventUse

; 868  : 		{
; 869  : 			CImmediateGroup *pMatch=m_MatchGroup[i];

  000c2	8b 45 ec	 mov	 eax, DWORD PTR _i$3[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000cc	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	89 4d e8	 mov	 DWORD PTR _pMatch$2[ebp], ecx

; 870  : 			if(pMatch->OnUserQuitMatch(pIServerUserItem))

  000d6	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d e8	 mov	 ecx, DWORD PTR _pMatch$2[ebp]
  000dd	e8 00 00 00 00	 call	 ?OnUserQuitMatch@CImmediateGroup@@QAE_NPAUIServerUserItem@@@Z ; CImmediateGroup::OnUserQuitMatch
  000e2	0f b6 c8	 movzx	 ecx, al
  000e5	85 c9		 test	 ecx, ecx
  000e7	74 2e		 je	 SHORT $LN9@OnEventUse

; 871  : 			{
; 872  : 				if (pMatch->m_cbMatchStatus!=MatchStatus_Null)

  000e9	8b 45 e8	 mov	 eax, DWORD PTR _pMatch$2[ebp]
  000ec	0f b6 48 18	 movzx	 ecx, BYTE PTR [eax+24]
  000f0	85 c9		 test	 ecx, ecx
  000f2	74 1c		 je	 SHORT $LN10@OnEventUse

; 873  : 				{
; 874  : 					SendRoomMessage(pIServerUserItem, TEXT("退赛成功，欢迎您继续参加其他比赛！"), SMT_CHAT|SMT_EJECT);

  000f4	6a 03		 push	 3
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CHNMBBKC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?$LL?$LG?S?$KN?D?z?$LM?L?P?x?$LC?N?$LM?S?F?d?K?$PL?$LB?H?H@
  000fb	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000fe	50		 push	 eax
  000ff	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	83 c1 04	 add	 ecx, 4
  00105	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00108	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010b	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  0010e	ff d2		 call	 edx
$LN10@OnEventUse:

; 875  : 				}
; 876  : 				return true;

  00110	b0 01		 mov	 al, 1
  00112	e9 48 01 00 00	 jmp	 $LN1@OnEventUse
$LN9@OnEventUse:

; 877  : 			}
; 878  : 		}

  00117	eb 98		 jmp	 SHORT $LN2@OnEventUse
$LN3@OnEventUse:

; 879  : 
; 880  : 		//从正在报名的组中删除该玩家
; 881  : 		if(m_pCurMatchGroup->OnUserQuitMatch(pIServerUserItem))

  00119	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  00123	e8 00 00 00 00	 call	 ?OnUserQuitMatch@CImmediateGroup@@QAE_NPAUIServerUserItem@@@Z ; CImmediateGroup::OnUserQuitMatch
  00128	0f b6 d0	 movzx	 edx, al
  0012b	85 d2		 test	 edx, edx
  0012d	0f 84 17 01 00
	00		 je	 $LN11@OnEventUse

; 882  : 		{
; 883  : 			//退还报名费
; 884  : 			if(m_pMatchOption->lSignupFee>=0 /*&& !pIServerUserItem->IsAndroidUser()*/)

  00133	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00136	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0013c	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv277[ebp], ecx
  00142	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv277[ebp]
  00148	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  0014c	0f 8c b7 00 00
	00		 jl	 $LN12@OnEventUse
  00152	7f 10		 jg	 SHORT $LN17@OnEventUse
  00154	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv277[ebp]
  0015a	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0015e	0f 82 a5 00 00
	00		 jb	 $LN12@OnEventUse
$LN17@OnEventUse:

; 885  : 			{
; 886  : 				//变量定义
; 887  : 				DBR_GR_MatchUnSignup MatchUnSignup;
; 888  : 				MatchUnSignup.dwReason=cbReason;

  00164	0f b6 45 0c	 movzx	 eax, BYTE PTR _cbReason$[ebp]
  00168	89 45 a0	 mov	 DWORD PTR _MatchUnSignup$1[ebp], eax

; 889  : 				MatchUnSignup.dwUserID=pIServerUserItem->GetUserID();

  0016b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0016e	8b 10		 mov	 edx, DWORD PTR [eax]
  00170	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00173	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00176	ff d0		 call	 eax
  00178	89 45 a4	 mov	 DWORD PTR _MatchUnSignup$1[ebp+4], eax

; 890  : 
; 891  : 				//构造结构
; 892  : 				MatchUnSignup.dwInoutIndex=pIServerUserItem->GetInoutIndex();

  0017b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0017e	8b 10		 mov	 edx, DWORD PTR [eax]
  00180	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00183	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00186	ff d0		 call	 eax
  00188	89 45 a8	 mov	 DWORD PTR _MatchUnSignup$1[ebp+8], eax

; 893  : 				MatchUnSignup.dwClientAddr=pIServerUserItem->GetClientAddr();

  0018b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0018e	8b 10		 mov	 edx, DWORD PTR [eax]
  00190	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00193	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00196	ff d0		 call	 eax
  00198	89 45 ac	 mov	 DWORD PTR _MatchUnSignup$1[ebp+12], eax

; 894  : 				MatchUnSignup.dwMatchID=m_pMatchOption->dwMatchID;

  0019b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  001a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a6	89 55 b0	 mov	 DWORD PTR _MatchUnSignup$1[ebp+16], edx

; 895  : 				MatchUnSignup.lMatchNo=m_pCurMatchGroup->m_lMatchNo;

  001a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001ac	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001af	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001b2	89 55 b8	 mov	 DWORD PTR _MatchUnSignup$1[ebp+24], edx
  001b5	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  001b8	89 45 bc	 mov	 DWORD PTR _MatchUnSignup$1[ebp+28], eax

; 896  : 				lstrcpyn(MatchUnSignup.szMachineID,pIServerUserItem->GetMachineID(),CountArray(MatchUnSignup.szMachineID));

  001bb	6a 21		 push	 33			; 00000021H
  001bd	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001c0	8b 10		 mov	 edx, DWORD PTR [eax]
  001c2	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001c5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001c8	ff d0		 call	 eax
  001ca	50		 push	 eax
  001cb	8d 4d c0	 lea	 ecx, DWORD PTR _MatchUnSignup$1[ebp+32]
  001ce	51		 push	 ecx
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 897  : 
; 898  : 				//投递数据
; 899  : 				m_pIDataBaseEngine->PostDataBaseRequest(MatchUnSignup.dwUserID,DBR_GR_MATCH_UNSIGNUP,dwContextID,&MatchUnSignup,sizeof(MatchUnSignup));

  001d5	6a 00		 push	 0
  001d7	6a 48		 push	 72			; 00000048H
  001d9	8d 45 a0	 lea	 eax, DWORD PTR _MatchUnSignup$1[ebp]
  001dc	50		 push	 eax
  001dd	8b 4d 14	 mov	 ecx, DWORD PTR _dwContextID$[ebp]
  001e0	51		 push	 ecx
  001e1	68 59 02 00 00	 push	 601			; 00000259H
  001e6	8b 55 a4	 mov	 edx, DWORD PTR _MatchUnSignup$1[ebp+4]
  001e9	52		 push	 edx
  001ea	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001ed	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  001f3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001f6	8b 82 d8 01 00
	00		 mov	 eax, DWORD PTR [edx+472]
  001fc	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001fe	50		 push	 eax
  001ff	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00202	ff d2		 call	 edx
  00204	83 c4 1c	 add	 esp, 28			; 0000001cH

; 900  : 			}
; 901  : 			else

  00207	eb 2a		 jmp	 SHORT $LN13@OnEventUse
$LN12@OnEventUse:

; 902  : 			{
; 903  : 				if (m_pCurMatchGroup->m_cbMatchStatus!=MatchStatus_Null)

  00209	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0020c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0020f	0f b6 51 18	 movzx	 edx, BYTE PTR [ecx+24]
  00213	85 d2		 test	 edx, edx
  00215	74 1c		 je	 SHORT $LN13@OnEventUse

; 904  : 				{
; 905  : 					SendRoomMessage(pIServerUserItem, TEXT("退赛成功，欢迎您继续参加其他比赛！"), SMT_CHAT|SMT_EJECT);

  00217	6a 03		 push	 3
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CHNMBBKC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?$LL?$LG?S?$KN?D?z?$LM?L?P?x?$LC?N?$LM?S?F?d?K?$PL?$LB?H?H@
  0021e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00221	50		 push	 eax
  00222	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00225	83 c1 04	 add	 ecx, 4
  00228	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0022b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0022e	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00231	ff d2		 call	 edx
$LN13@OnEventUse:

; 906  : 				}
; 907  : 			}
; 908  : 
; 909  : 			//发送比赛
; 910  : 			SendMatchInfo(NULL);

  00233	6a 00		 push	 0
  00235	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00238	83 c1 04	 add	 ecx, 4
  0023b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0023e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00241	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00244	ff d0		 call	 eax

; 911  : 
; 912  : 			return true;

  00246	b0 01		 mov	 al, 1
  00248	eb 15		 jmp	 SHORT $LN1@OnEventUse
$LN11@OnEventUse:

; 913  : 		}
; 914  : 
; 915  : 		//发送比赛
; 916  : 		SendMatchInfo(NULL);

  0024a	6a 00		 push	 0
  0024c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0024f	83 c1 04	 add	 ecx, 4
  00252	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00255	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00258	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0025b	ff d0		 call	 eax
$LN8@OnEventUse:

; 917  : 	}
; 918  : 
; 919  : 	return false;

  0025d	32 c0		 xor	 al, al
$LN1@OnEventUse:

; 920  : }

  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	5b		 pop	 ebx
  00262	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00265	33 cd		 xor	 ecx, ebp
  00267	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c2 10 00	 ret	 16			; 00000010H
?OnEventUserQuitMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EPAGK@Z ENDP ; CImmediateMatch::OnEventUserQuitMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z
_TEXT	SEGMENT
tv630 = -396						; size = 4
tv551 = -396						; size = 4
tv180 = -396						; size = 4
_lScore$1 = -328					; size = 8
_cbSignupMode$2 = -317					; size = 1
_wDataSize$3 = -316					; size = 2
_pszFeeType$4 = -312					; size = 8
_MatchFee$5 = -304					; size = 151
_i$6 = -152						; size = 4
_dwUserCount$ = -148					; size = 4
_szString$7 = -144					; size = 128
_wTableCount$ = -16					; size = 2
_dwCurrTime$8 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
_cbReason$ = 12						; size = 1
_dwSocketID$ = 16					; size = 4
?OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z PROC ; CImmediateMatch::OnEventUserJoinMatch, COMDAT
; _this$ = ecx

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 01 00
	00		 sub	 esp, 396		; 0000018cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 692  : 	//参数校验
; 693  : 	ASSERT(pIServerUserItem!=NULL);

  00019	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0001d	75 18		 jne	 SHORT $LN27@OnEventUse
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z@4JA
  00024	83 c0 02	 add	 eax, 2
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0002d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00032	85 c0		 test	 eax, eax
  00034	74 01		 je	 SHORT $LN27@OnEventUse
  00036	cc		 int	 3
$LN27@OnEventUse:

; 694  : 	if (pIServerUserItem == NULL)

  00037	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0003b	75 17		 jne	 SHORT $LN5@OnEventUse

; 695  : 	{
; 696  : 		CTraceService::TraceString(TEXT("用户指针为空!"),TraceLevel_Warning);

  0003d	6a 02		 push	 2
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DGBKFONG@?S?C?$LL?$KH?V?$LI?U?k?N?$KK?$LP?U?$CB@
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TraceString@CTraceService@@SA_NPBDW4enTraceLevel@@@Z
  0004a	83 c4 08	 add	 esp, 8

; 697  : 		return true;

  0004d	b0 01		 mov	 al, 1
  0004f	e9 a4 05 00 00	 jmp	 $LN1@OnEventUse
$LN5@OnEventUse:

; 698  : 	}
; 699  : 
; 700  : 	//机器延迟报名
; 701  : 	if (pIServerUserItem->IsAndroidUser()==true)

  00054	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00057	8b 10		 mov	 edx, DWORD PTR [eax]
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0005c	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00062	ff d0		 call	 eax
  00064	0f b6 c8	 movzx	 ecx, al
  00067	83 f9 01	 cmp	 ecx, 1
  0006a	75 2e		 jne	 SHORT $LN6@OnEventUse

; 702  : 	{
; 703  : 		//获取时间
; 704  : 		DWORD dwCurrTime=(DWORD)time(NULL);

  0006c	6a 00		 push	 0
  0006e	e8 00 00 00 00	 call	 _time
  00073	83 c4 04	 add	 esp, 4
  00076	89 45 f4	 mov	 DWORD PTR _dwCurrTime$8[ebp], eax

; 705  : 		if (dwCurrTime-m_dwStartTime<m_pImmediateMatch->wAndroidDelaySignupTime)

  00079	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _dwCurrTime$8[ebp]
  0007f	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  00082	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00085	8b 82 c4 01 00
	00		 mov	 eax, DWORD PTR [edx+452]
  0008b	0f b7 50 04	 movzx	 edx, WORD PTR [eax+4]
  0008f	3b ca		 cmp	 ecx, edx
  00091	73 07		 jae	 SHORT $LN6@OnEventUse

; 706  : 		{
; 707  : 			return true;

  00093	b0 01		 mov	 al, 1
  00095	e9 5e 05 00 00	 jmp	 $LN1@OnEventUse
$LN6@OnEventUse:

; 708  : 		}
; 709  : 	}
; 710  : 
; 711  : 	//桌子不够
; 712  : 	WORD wTableCount=GetNullTable();

  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?GetNullTable@CImmediateMatch@@AAEGXZ ; CImmediateMatch::GetNullTable
  000a2	66 89 45 f0	 mov	 WORD PTR _wTableCount$[ebp], ax

; 713  : 	if (wTableCount<m_pImmediateMatch->wStartUserCount/CImmediateGroup::m_wChairCount)

  000a6	0f b7 4d f0	 movzx	 ecx, WORD PTR _wTableCount$[ebp]
  000aa	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ad	8b 82 c4 01 00
	00		 mov	 eax, DWORD PTR [edx+452]
  000b3	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b6	0f b7 35 00 00
	00 00		 movzx	 esi, WORD PTR ?m_wChairCount@CImmediateGroup@@1GA ; CImmediateGroup::m_wChairCount
  000bd	99		 cdq
  000be	f7 fe		 idiv	 esi
  000c0	3b c8		 cmp	 ecx, eax
  000c2	7d 5b		 jge	 SHORT $LN8@OnEventUse

; 714  : 	{
; 715  : 		//构造消息
; 716  : 		TCHAR szString[128];
; 717  : 		_sntprintf_s(szString,CountArray(szString),TEXT("抱歉，当前桌子不够请等待。还差 %d 张桌子可以报名"),m_pImmediateMatch->wStartUserCount/CImmediateGroup::m_wChairCount-wTableCount);

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  000cd	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  000d0	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?m_wChairCount@CImmediateGroup@@1GA ; CImmediateGroup::m_wChairCount
  000d7	99		 cdq
  000d8	f7 f9		 idiv	 ecx
  000da	0f b7 55 f0	 movzx	 edx, WORD PTR _wTableCount$[ebp]
  000de	2b c2		 sub	 eax, edx
  000e0	50		 push	 eax
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@GOHKIOLG@?$LB?$KH?G?$LI?$KD?$KM?$LF?$LB?G?$LA?W?$MA?W?S?$LC?$LL?$LJ?$LL?G?k?$LF?H?$LE?$PN?$KB?$KD?$LL?$LJ?$LC?n?5@
  000e6	68 80 00 00 00	 push	 128			; 00000080H
  000eb	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _szString$7[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  000f7	83 c4 10	 add	 esp, 16			; 00000010H

; 718  : 		SendRoomMessage(pIServerUserItem,szString,SMT_CHAT);

  000fa	6a 01		 push	 1
  000fc	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _szString$7[ebp]
  00102	50		 push	 eax
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00106	51		 push	 ecx
  00107	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	83 c1 04	 add	 ecx, 4
  0010d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00110	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00113	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00116	ff d2		 call	 edx

; 719  : 		return true;

  00118	b0 01		 mov	 al, 1
  0011a	e9 d9 04 00 00	 jmp	 $LN1@OnEventUse
$LN8@OnEventUse:

; 720  : 	}
; 721  : 
; 722  : 	//人数已满
; 723  : 	if (m_pCurMatchGroup==NULL || m_pCurMatchGroup->m_cbMatchStatus==MatchStatus_Wait)

  0011f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00122	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00126	74 0f		 je	 SHORT $LN10@OnEventUse
  00128	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0012b	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0012e	0f b6 51 18	 movzx	 edx, BYTE PTR [ecx+24]
  00132	83 fa 02	 cmp	 edx, 2
  00135	75 23		 jne	 SHORT $LN9@OnEventUse
$LN10@OnEventUse:

; 724  : 	{
; 725  : 		SendRoomMessage(pIServerUserItem, TEXT("抱歉，该房间参赛人数已满，请稍后再报名或者进入另一房间比赛。"),SMT_CHAT);

  00137	6a 01		 push	 1
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@EHALDGCC@?$LB?$KH?G?$LI?$KD?$KM?$LI?C?$LH?$LP?$LM?d?$LC?N?H?$PM?H?K?J?$PN?R?Q?B?z?$KD?$KM?G?k?I?T?$LK@
  0013e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00141	50		 push	 eax
  00142	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	83 c1 04	 add	 ecx, 4
  00148	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0014b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0014e	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00151	ff d2		 call	 edx

; 726  : 		return true;

  00153	b0 01		 mov	 al, 1
  00155	e9 9e 04 00 00	 jmp	 $LN1@OnEventUse
$LN9@OnEventUse:

; 727  : 	}
; 728  : 
; 729  : 	//重复报名
; 730  : 	INT_PTR dwUserCount=m_OnMatchUserItem.GetCount();

  0015a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	83 c1 24	 add	 ecx, 36			; 00000024H
  00160	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QBEHXZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::GetCount
  00165	89 85 6c ff ff
	ff		 mov	 DWORD PTR _dwUserCount$[ebp], eax

; 731  : 	for (INT_PTR i=0;i<dwUserCount;i++)

  0016b	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$6[ebp], 0
  00175	eb 0f		 jmp	 SHORT $LN4@OnEventUse
$LN2@OnEventUse:
  00177	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _i$6[ebp]
  0017d	83 c0 01	 add	 eax, 1
  00180	89 85 68 ff ff
	ff		 mov	 DWORD PTR _i$6[ebp], eax
$LN4@OnEventUse:
  00186	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _i$6[ebp]
  0018c	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _dwUserCount$[ebp]
  00192	7d 68		 jge	 SHORT $LN3@OnEventUse

; 732  : 	{
; 733  : 		if(m_OnMatchUserItem[i]->GetUserID()==pIServerUserItem->GetUserID())

  00194	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _i$6[ebp]
  0019a	50		 push	 eax
  0019b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	83 c1 24	 add	 ecx, 36			; 00000024H
  001a1	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::operator[]
  001a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a8	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  001ae	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR tv180[ebp]
  001b4	8b 02		 mov	 eax, DWORD PTR [edx]
  001b6	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR tv180[ebp]
  001bc	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  001bf	ff d2		 call	 edx
  001c1	8b f0		 mov	 esi, eax
  001c3	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001c6	8b 10		 mov	 edx, DWORD PTR [eax]
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001cb	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  001ce	ff d0		 call	 eax
  001d0	3b f0		 cmp	 esi, eax
  001d2	75 23		 jne	 SHORT $LN11@OnEventUse

; 734  : 		{
; 735  : 			SendRoomMessage(pIServerUserItem, TEXT("您已经成功报名，不能重复报名！"),SMT_CHAT|SMT_EJECT);

  001d4	6a 03		 push	 3
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GANJEFPA@?D?z?R?Q?$LO?$KN?$LD?I?$LJ?$KG?$LB?$KI?C?$PL?$KD?$KM?$LC?$LL?D?$NM?V?X?$LI?$LE?$LB?$KI?C?$PL?$KD?$KB@
  001db	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001de	50		 push	 eax
  001df	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e2	83 c1 04	 add	 ecx, 4
  001e5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001e8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001eb	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  001ee	ff d2		 call	 edx

; 736  : 			return true;

  001f0	b0 01		 mov	 al, 1
  001f2	e9 01 04 00 00	 jmp	 $LN1@OnEventUse
$LN11@OnEventUse:

; 737  : 		}
; 738  : 	}

  001f7	e9 7b ff ff ff	 jmp	 $LN2@OnEventUse
$LN3@OnEventUse:

; 739  : 
; 740  : 	//编号不够
; 741  : 	if (m_LoopTimer.GetCount()==0)

  001fc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ff	83 c1 38	 add	 ecx, 56			; 00000038H
  00202	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@EABE@@QBEHXZ ; CWHArray<unsigned char,unsigned char const &>::GetCount
  00207	85 c0		 test	 eax, eax
  00209	75 23		 jne	 SHORT $LN12@OnEventUse

; 742  : 	{
; 743  : 		SendRoomMessage(pIServerUserItem, TEXT("抱歉，比赛编号不够请稍等。"),SMT_CHAT);

  0020b	6a 01		 push	 1
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MIEHDBCF@?$LB?$KH?G?$LI?$KD?$KM?$LB?H?H?$PM?$LB?$OA?$LK?E?$LC?$LL?$LJ?$LL?G?k?I?T?$LF?H?$KB?$KD@
  00212	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00215	50		 push	 eax
  00216	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00219	83 c1 04	 add	 ecx, 4
  0021c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0021f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00222	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00225	ff d2		 call	 edx

; 744  : 		return true;

  00227	b0 01		 mov	 al, 1
  00229	e9 ca 03 00 00	 jmp	 $LN1@OnEventUse
$LN12@OnEventUse:

; 745  : 	}
; 746  : 
; 747  : 	//状态不对
; 748  : 	if (pIServerUserItem->GetUserStatus()!=US_FREE || pIServerUserItem->GetTableID()!=INVALID_TABLE)

  0022e	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00231	8b 10		 mov	 edx, DWORD PTR [eax]
  00233	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00236	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00239	ff d0		 call	 eax
  0023b	0f b6 c8	 movzx	 ecx, al
  0023e	83 f9 01	 cmp	 ecx, 1
  00241	75 18		 jne	 SHORT $LN14@OnEventUse
  00243	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00246	8b 10		 mov	 edx, DWORD PTR [eax]
  00248	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0024b	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0024e	ff d0		 call	 eax
  00250	0f b7 c8	 movzx	 ecx, ax
  00253	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  00259	74 23		 je	 SHORT $LN13@OnEventUse
$LN14@OnEventUse:

; 749  : 	{
; 750  : 		SendRoomMessage(pIServerUserItem, TEXT("对不起，您当前的状态不允许参加比赛！"),SMT_CHAT);

  0025b	6a 01		 push	 1
  0025d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BNBFGJLJ@?$LG?T?$LC?$LL?F?p?$KD?$KM?D?z?$LF?$LB?G?$LA?$LF?D?W?$LE?L?$KM?$LC?$LL?T?J?P?m?$LC?N?$LM?S?$LB@
  00262	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00265	50		 push	 eax
  00266	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00269	83 c1 04	 add	 ecx, 4
  0026c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0026f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00272	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00275	ff d2		 call	 edx

; 751  : 		return true;

  00277	b0 01		 mov	 al, 1
  00279	e9 7a 03 00 00	 jmp	 $LN1@OnEventUse
$LN13@OnEventUse:

; 752  : 	}
; 753  : 
; 754  : 	//会员等级
; 755  : 	if (m_pMatchOption->cbJoinCondition&MATCH_JOINCD_MEMBER_ORDER)

  0027e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00281	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00287	0f b6 51 41	 movzx	 edx, BYTE PTR [ecx+65]
  0028b	83 e2 01	 and	 edx, 1
  0028e	74 4f		 je	 SHORT $LN15@OnEventUse

; 756  : 	{
; 757  : 		if (m_pMatchOption->cbMemberOrder>pIServerUserItem->GetMemberOrder())

  00290	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00293	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00299	0f b6 71 42	 movzx	 esi, BYTE PTR [ecx+66]
  0029d	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  002a0	8b 02		 mov	 eax, DWORD PTR [edx]
  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002a5	8b 90 80 00 00
	00		 mov	 edx, DWORD PTR [eax+128]
  002ab	ff d2		 call	 edx
  002ad	0f b6 c0	 movzx	 eax, al
  002b0	3b f0		 cmp	 esi, eax
  002b2	7e 2b		 jle	 SHORT $LN15@OnEventUse

; 758  : 		{
; 759  : 			//发送消息
; 760  : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("抱歉，您的会员等级达不到报名条件，报名失败！"),SMT_EJECT);

  002b4	6a 02		 push	 2
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MILLHBCL@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LL?a?T?$LB?$LF?H?$LM?$LG?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM@
  002bb	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  002be	50		 push	 eax
  002bf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002c2	8b 91 e0 01 00
	00		 mov	 edx, DWORD PTR [ecx+480]
  002c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002cb	8b 12		 mov	 edx, DWORD PTR [edx]
  002cd	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  002d3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002d6	ff d0		 call	 eax

; 761  : 
; 762  : 			return true;

  002d8	b0 01		 mov	 al, 1
  002da	e9 19 03 00 00	 jmp	 $LN1@OnEventUse
$LN15@OnEventUse:

; 763  : 		}
; 764  : 	}
; 765  : 
; 766  : 	//经验等级
; 767  : 	if (m_pMatchOption->cbJoinCondition&MATCH_JOINCD_EXPERIENCE)

  002df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002e2	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  002e8	0f b6 51 41	 movzx	 edx, BYTE PTR [ecx+65]
  002ec	83 e2 02	 and	 edx, 2
  002ef	74 4c		 je	 SHORT $LN17@OnEventUse

; 768  : 	{
; 769  : 		if (m_pMatchOption->dwExperience>pIServerUserItem->GetUserInfo()->dwExperience)

  002f1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f4	8b b0 c0 01 00
	00		 mov	 esi, DWORD PTR [eax+448]
  002fa	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002fd	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ff	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00302	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00305	ff d0		 call	 eax
  00307	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0030a	3b 88 ec 00 00
	00		 cmp	 ecx, DWORD PTR [eax+236]
  00310	76 2b		 jbe	 SHORT $LN17@OnEventUse

; 770  : 		{
; 771  : 			//发送消息
; 772  : 			m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,TEXT("抱歉，您的经验值达不到报名条件，报名失败！"),SMT_EJECT);

  00312	6a 02		 push	 2
  00314	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NANGINFO@?$LB?$KH?G?$LI?$KD?$KM?D?z?$LF?D?$LO?$KN?Q?i?V?$LF?$LE?o?$LC?$LL?$LF?$LN?$LB?$KI?C?$PL?L?u?$LM?$PO?$KD@
  00319	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0031c	50		 push	 eax
  0031d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00320	8b 91 e0 01 00
	00		 mov	 edx, DWORD PTR [ecx+480]
  00326	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00329	8b 12		 mov	 edx, DWORD PTR [edx]
  0032b	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  00331	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00334	ff d0		 call	 eax

; 773  : 
; 774  : 			return true;

  00336	b0 01		 mov	 al, 1
  00338	e9 bb 02 00 00	 jmp	 $LN1@OnEventUse
$LN17@OnEventUse:

; 775  : 		}
; 776  : 	}
; 777  : 
; 778  : 	//缴纳报名费
; 779  : 	if (m_pMatchOption->cbSignupMode==SIGNUP_MODE_SIGNUP_FEE)

  0033d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00340	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00346	0f b6 51 40	 movzx	 edx, BYTE PTR [ecx+64]
  0034a	83 fa 01	 cmp	 edx, 1
  0034d	0f 85 95 01 00
	00		 jne	 $LN19@OnEventUse

; 780  : 	{
; 781  : 		//真人扣报名费
; 782  : 		if (m_pMatchOption->lSignupFee>0 && pIServerUserItem->IsAndroidUser()==false)

  00353	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00356	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0035c	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv551[ebp], ecx
  00362	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR tv551[ebp]
  00368	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  0036c	0f 8c 76 01 00
	00		 jl	 $LN19@OnEventUse
  00372	7f 10		 jg	 SHORT $LN28@OnEventUse
  00374	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv551[ebp]
  0037a	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0037e	0f 86 64 01 00
	00		 jbe	 $LN19@OnEventUse
$LN28@OnEventUse:
  00384	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00387	8b 10		 mov	 edx, DWORD PTR [eax]
  00389	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0038c	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00392	ff d0		 call	 eax
  00394	0f b6 c8	 movzx	 ecx, al
  00397	85 c9		 test	 ecx, ecx
  00399	0f 85 49 01 00
	00		 jne	 $LN19@OnEventUse

; 783  : 		{
; 784  : 			//构造结构
; 785  : 			CMD_GR_Match_Fee MatchFee;
; 786  : 
; 787  : 			//设置变量
; 788  : 			MatchFee.dwMatchID=m_pMatchOption->dwMatchID;

  0039f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003a2	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  003a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  003aa	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _MatchFee$5[ebp], edx

; 789  : 			MatchFee.lMatchNO=m_pCurMatchGroup->m_lMatchNo;

  003b0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003b3	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  003b6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003b9	89 95 d4 fe ff
	ff		 mov	 DWORD PTR _MatchFee$5[ebp+4], edx
  003bf	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  003c2	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _MatchFee$5[ebp+8], eax

; 790  : 			MatchFee.lSignupFee=m_pMatchOption->lSignupFee;

  003c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003cb	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  003d1	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  003d4	89 95 df fe ff
	ff		 mov	 DWORD PTR _MatchFee$5[ebp+15], edx
  003da	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  003dd	89 85 e3 fe ff
	ff		 mov	 DWORD PTR _MatchFee$5[ebp+19], eax

; 791  : 			MatchFee.cbFeeType=m_pMatchOption->cbFeeType;

  003e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003e6	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  003ec	8a 51 32	 mov	 dl, BYTE PTR [ecx+50]
  003ef	88 95 dd fe ff
	ff		 mov	 BYTE PTR _MatchFee$5[ebp+13], dl

; 792  : 			MatchFee.cbDeductArea=m_pMatchOption->cbDeductArea;

  003f5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003f8	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  003fe	8a 51 33	 mov	 dl, BYTE PTR [ecx+51]
  00401	88 95 de fe ff
	ff		 mov	 BYTE PTR _MatchFee$5[ebp+14], dl

; 793  : 			MatchFee.cbSignupMode=SIGNUP_MODE_SIGNUP_FEE;

  00407	c6 85 dc fe ff
	ff 01		 mov	 BYTE PTR _MatchFee$5[ebp+12], 1

; 794  : 
; 795  : 			//构造提示			
; 796  : 			if (m_pMatchOption->cbDeductArea==DEDUCT_AREA_SERVER && MatchFee.lSignupFee>0)

  0040e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00411	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00417	0f b6 51 33	 movzx	 edx, BYTE PTR [ecx+51]
  0041b	85 d2		 test	 edx, edx
  0041d	75 67		 jne	 SHORT $LN21@OnEventUse
  0041f	83 bd e3 fe ff
	ff 00		 cmp	 DWORD PTR _MatchFee$5[ebp+19], 0
  00426	7c 5e		 jl	 SHORT $LN21@OnEventUse
  00428	7f 09		 jg	 SHORT $LN29@OnEventUse
  0042a	83 bd df fe ff
	ff 00		 cmp	 DWORD PTR _MatchFee$5[ebp+15], 0
  00431	76 53		 jbe	 SHORT $LN21@OnEventUse
$LN29@OnEventUse:

; 797  : 			{
; 798  : 				LPCTSTR pszFeeType[]={TEXT("游戏币"),TEXT("元宝")};

  00433	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszFeeType$4[ebp], OFFSET ??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@
  0043d	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszFeeType$4[ebp+4], OFFSET ??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@

; 799  : 				_sntprintf_s(MatchFee.szNotifyContent,CountArray(MatchFee.szNotifyContent),TEXT("参赛将扣除报名费 %I64d %s，确认要参赛吗？"),m_pMatchOption->lSignupFee,pszFeeType[m_pMatchOption->cbFeeType-FEE_TYPE_GOLD]);

  00447	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0044a	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00450	0f b6 51 32	 movzx	 edx, BYTE PTR [ecx+50]
  00454	8b 84 95 c8 fe
	ff ff		 mov	 eax, DWORD PTR _pszFeeType$4[ebp+edx*4]
  0045b	50		 push	 eax
  0045c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0045f	8b 91 c0 01 00
	00		 mov	 edx, DWORD PTR [ecx+448]
  00465	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00468	50		 push	 eax
  00469	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  0046c	51		 push	 ecx
  0046d	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KBNEFBOJ@?$LC?N?H?$PM?$LN?$KL?$LP?$NL?$LD?$PN?$LB?$KI?C?$PL?$LH?Q?5?$CFI64d?5?$CFs?$KD?$KM?H?$LH?H?O@
  00472	68 80 00 00 00	 push	 128			; 00000080H
  00477	8d 95 e7 fe ff
	ff		 lea	 edx, DWORD PTR _MatchFee$5[ebp+23]
  0047d	52		 push	 edx
  0047e	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00483	83 c4 18	 add	 esp, 24			; 00000018H
$LN21@OnEventUse:

; 800  : 			}
; 801  : 
; 802  : 			//发送消息
; 803  : 			WORD wDataSize=sizeof(MatchFee)-sizeof(MatchFee.szNotifyContent);

  00486	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  0048b	66 89 85 c4 fe
	ff ff		 mov	 WORD PTR _wDataSize$3[ebp], ax

; 804  : 			wDataSize+=CountStringBuffer(MatchFee.szNotifyContent);

  00492	8d 85 e7 fe ff
	ff		 lea	 eax, DWORD PTR _MatchFee$5[ebp+23]
  00498	50		 push	 eax
  00499	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0049f	0f b7 8d c4 fe
	ff ff		 movzx	 ecx, WORD PTR _wDataSize$3[ebp]
  004a6	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  004aa	66 89 95 c4 fe
	ff ff		 mov	 WORD PTR _wDataSize$3[ebp], dx

; 805  : 			m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_FEE,&MatchFee,wDataSize);

  004b1	0f b7 85 c4 fe
	ff ff		 movzx	 eax, WORD PTR _wDataSize$3[ebp]
  004b8	50		 push	 eax
  004b9	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _MatchFee$5[ebp]
  004bf	51		 push	 ecx
  004c0	6a 03		 push	 3
  004c2	6a 0a		 push	 10			; 0000000aH
  004c4	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  004c7	52		 push	 edx
  004c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004cb	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  004d1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004d4	8b 01		 mov	 eax, DWORD PTR [ecx]
  004d6	8b 8a e0 01 00
	00		 mov	 ecx, DWORD PTR [edx+480]
  004dc	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  004df	ff d2		 call	 edx

; 806  : 
; 807  : 			return true;

  004e1	b0 01		 mov	 al, 1
  004e3	e9 10 01 00 00	 jmp	 $LN1@OnEventUse
$LN19@OnEventUse:

; 808  : 		}			
; 809  : 	}
; 810  : 
; 811  : 	//机器人报名
; 812  : 	if (m_pMatchOption->lSignupFee==0 || pIServerUserItem->IsAndroidUser()==true)

  004e8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004eb	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  004f1	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv630[ebp], ecx
  004f7	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR tv630[ebp]
  004fd	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv630[ebp]
  00503	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00506	0b 48 3c	 or	 ecx, DWORD PTR [eax+60]
  00509	74 18		 je	 SHORT $LN23@OnEventUse
  0050b	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0050e	8b 10		 mov	 edx, DWORD PTR [eax]
  00510	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00513	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00519	ff d0		 call	 eax
  0051b	0f b6 c8	 movzx	 ecx, al
  0051e	83 f9 01	 cmp	 ecx, 1
  00521	75 63		 jne	 SHORT $LN22@OnEventUse
$LN23@OnEventUse:

; 813  : 	{
; 814  : 		//机器数判断
; 815  : 		if(pIServerUserItem->IsAndroidUser()==true && (m_pCurMatchGroup->m_wAndroidUserCount >= 

  00523	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00526	8b 10		 mov	 edx, DWORD PTR [eax]
  00528	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0052b	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00531	ff d0		 call	 eax
  00533	0f b6 c8	 movzx	 ecx, al
  00536	83 f9 01	 cmp	 ecx, 1
  00539	75 22		 jne	 SHORT $LN24@OnEventUse
  0053b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0053e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00541	0f b7 51 1a	 movzx	 edx, WORD PTR [ecx+26]
  00545	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00548	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  0054e	0f b7 41 02	 movzx	 eax, WORD PTR [ecx+2]
  00552	3b d0		 cmp	 edx, eax
  00554	7c 07		 jl	 SHORT $LN24@OnEventUse

; 816  : 		   m_pImmediateMatch->wAndroidUserCount))
; 817  : 		{
; 818  : 			return true;

  00556	b0 01		 mov	 al, 1
  00558	e9 9b 00 00 00	 jmp	 $LN1@OnEventUse
$LN24@OnEventUse:

; 819  : 		}
; 820  : 
; 821  : 		//变量定义
; 822  : 		BYTE cbSignupMode=SIGNUP_MODE_SIGNUP_FEE;

  0055d	c6 85 c3 fe ff
	ff 01		 mov	 BYTE PTR _cbSignupMode$2[ebp], 1

; 823  : 		return OnEventSocketMatch(SUB_GR_MATCH_FEE,&cbSignupMode,sizeof(cbSignupMode),pIServerUserItem ,dwSocketID);

  00564	8b 45 10	 mov	 eax, DWORD PTR _dwSocketID$[ebp]
  00567	50		 push	 eax
  00568	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0056b	51		 push	 ecx
  0056c	6a 01		 push	 1
  0056e	8d 95 c3 fe ff
	ff		 lea	 edx, DWORD PTR _cbSignupMode$2[ebp]
  00574	52		 push	 edx
  00575	6a 03		 push	 3
  00577	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0057a	8b 10		 mov	 edx, DWORD PTR [eax]
  0057c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0057f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00582	ff d0		 call	 eax
  00584	eb 72		 jmp	 SHORT $LN1@OnEventUse
$LN22@OnEventUse:

; 824  : 	}
; 825  : 
; 826  : 	//报名成功
; 827  : 	m_OnMatchUserItem.Add(pIServerUserItem);

  00586	8d 45 08	 lea	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00589	50		 push	 eax
  0058a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0058d	83 c1 24	 add	 ecx, 36			; 00000024H
  00590	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEHABQAUIServerUserItem@@@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::Add

; 828  : 	SendMatchInfo(NULL);

  00595	6a 00		 push	 0
  00597	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0059a	83 c1 04	 add	 ecx, 4
  0059d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005a0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005a6	ff d0		 call	 eax

; 829  : 	if (m_pIGameServiceFrame!=NULL)

  005a8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005ab	83 b8 e0 01 00
	00 00		 cmp	 DWORD PTR [eax+480], 0
  005b2	74 42		 je	 SHORT $LN25@OnEventUse

; 830  : 	{
; 831  : 		LONGLONG lScore=LONGLONG(m_pMatchOption->lSignupFee)*-1;

  005b4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005b7	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  005bd	6a ff		 push	 -1
  005bf	6a ff		 push	 -1
  005c1	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  005c4	52		 push	 edx
  005c5	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  005c8	50		 push	 eax
  005c9	e8 00 00 00 00	 call	 __allmul
  005ce	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _lScore$1[ebp], eax
  005d4	89 95 bc fe ff
	ff		 mov	 DWORD PTR _lScore$1[ebp+4], edx

; 832  : 		/*if(m_pImmediateMatch->lInitalScore==0)
; 833  : 		{
; 834  : 			pIServerUserItem->GetUserInfo()->lScore+=lScore;
; 835  : 			m_pIServerUserItemSink->OnEventUserItemScore(pIServerUserItem,SCORE_REASON_MATCH_FEE);
; 836  : 		}*/
; 837  : 		SendRoomMessage(pIServerUserItem, TEXT("恭喜，报名成功，请等待系统为您安排座位！"),SMT_CHAT);

  005da	6a 01		 push	 1
  005dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@OOKPLADN@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LA@
  005e1	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  005e4	50		 push	 eax
  005e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005e8	83 c1 04	 add	 ecx, 4
  005eb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005ee	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  005f1	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  005f4	ff d2		 call	 edx
$LN25@OnEventUse:

; 838  : 	}
; 839  : 
; 840  : 	return true;

  005f6	b0 01		 mov	 al, 1
$LN1@OnEventUse:

; 841  : }

  005f8	5f		 pop	 edi
  005f9	5e		 pop	 esi
  005fa	5b		 pop	 ebx
  005fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005fe	33 cd		 xor	 ecx, ebp
  00600	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00605	8b e5		 mov	 esp, ebp
  00607	5d		 pop	 ebp
  00608	c2 0c 00	 ret	 12			; 0000000cH
?OnEventUserJoinMatch@CImmediateMatch@@UAE_NPAUIServerUserItem@@EK@Z ENDP ; CImmediateMatch::OnEventUserJoinMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventEnterMatch@CImmediateMatch@@UAE_NKPAXK_N@Z
_TEXT	SEGMENT
_LogonUserID$1 = -224					; size = 104
_pLogonUserID$2 = -120					; size = 4
_LogonMobile$3 = -116					; size = 104
_pLogonMobile$4 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dwSocketID$ = 8					; size = 4
_pData$ = 12						; size = 4
_dwUserIP$ = 16						; size = 4
_bIsMobile$ = 20					; size = 1
?OnEventEnterMatch@CImmediateMatch@@UAE_NKPAXK_N@Z PROC	; CImmediateMatch::OnEventEnterMatch, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 637  : 	//手机用户
; 638  : 	if(bIsMobile == true)

  00019	0f b6 45 14	 movzx	 eax, BYTE PTR _bIsMobile$[ebp]
  0001d	83 f8 01	 cmp	 eax, 1
  00020	0f 85 e1 00 00
	00		 jne	 $LN2@OnEventEnt

; 639  : 	{
; 640  : 		//处理消息
; 641  : 		CMD_GR_LogonMobile * pLogonMobile=(CMD_GR_LogonMobile *)pData;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00029	89 45 f4	 mov	 DWORD PTR _pLogonMobile$4[ebp], eax

; 642  : 		pLogonMobile->szPassword[CountArray(pLogonMobile->szPassword)-1]=0;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	c1 e0 05	 shl	 eax, 5
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _pLogonMobile$4[ebp]
  00037	c6 44 01 0f 00	 mov	 BYTE PTR [ecx+eax+15], 0

; 643  : 		pLogonMobile->szMachineID[CountArray(pLogonMobile->szMachineID)-1]=0;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	c1 e0 05	 shl	 eax, 5
  00044	8b 4d f4	 mov	 ecx, DWORD PTR _pLogonMobile$4[ebp]
  00047	c6 44 01 51 00	 mov	 BYTE PTR [ecx+eax+81], 0

; 644  : 
; 645  : 		//变量定义
; 646  : 		DBR_GR_LogonMobile LogonMobile;
; 647  : 		ZeroMemory(&LogonMobile,sizeof(LogonMobile));

  0004c	6a 68		 push	 104			; 00000068H
  0004e	6a 00		 push	 0
  00050	8d 45 8c	 lea	 eax, DWORD PTR _LogonMobile$3[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _memset
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 648  : 
; 649  : 		//构造数据
; 650  : 		LogonMobile.dwUserID=pLogonMobile->dwUserID;

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  0005f	8b 48 0b	 mov	 ecx, DWORD PTR [eax+11]
  00062	89 4d 8c	 mov	 DWORD PTR _LogonMobile$3[ebp], ecx

; 651  : 		LogonMobile.dwClientAddr=dwUserIP;		

  00065	8b 45 10	 mov	 eax, DWORD PTR _dwUserIP$[ebp]
  00068	89 45 c8	 mov	 DWORD PTR _LogonMobile$3[ebp+60], eax

; 652  : 		LogonMobile.dwMatchID=m_pMatchOption->dwMatchID;	

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00074	8b 11		 mov	 edx, DWORD PTR [ecx]
  00076	89 55 b8	 mov	 DWORD PTR _LogonMobile$3[ebp+44], edx

; 653  : 		LogonMobile.lMatchNo=m_pMatchOption->lMatchNo;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00082	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00085	89 55 bc	 mov	 DWORD PTR _LogonMobile$3[ebp+48], edx
  00088	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0008b	89 45 c0	 mov	 DWORD PTR _LogonMobile$3[ebp+52], eax

; 654  : 		LogonMobile.cbDeviceType=pLogonMobile->cbDeviceType;

  0008e	8b 45 f4	 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  00091	8a 48 06	 mov	 cl, BYTE PTR [eax+6]
  00094	88 4d b1	 mov	 BYTE PTR _LogonMobile$3[ebp+37], cl

; 655  : 		LogonMobile.wBehaviorFlags=pLogonMobile->wBehaviorFlags;

  00097	8b 45 f4	 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  0009a	66 8b 48 07	 mov	 cx, WORD PTR [eax+7]
  0009e	66 89 4d b2	 mov	 WORD PTR _LogonMobile$3[ebp+38], cx

; 656  : 		LogonMobile.wPageTableCount=pLogonMobile->wPageTableCount;		

  000a2	8b 45 f4	 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  000a5	66 8b 48 09	 mov	 cx, WORD PTR [eax+9]
  000a9	66 89 4d b4	 mov	 WORD PTR _LogonMobile$3[ebp+40], cx

; 657  : 		lstrcpyn(LogonMobile.szPassword,pLogonMobile->szPassword,CountArray(LogonMobile.szPassword));

  000ad	6a 21		 push	 33			; 00000021H
  000af	8b 45 f4	 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  000b2	83 c0 0f	 add	 eax, 15			; 0000000fH
  000b5	50		 push	 eax
  000b6	8d 4d 90	 lea	 ecx, DWORD PTR _LogonMobile$3[ebp+4]
  000b9	51		 push	 ecx
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 658  : 		lstrcpyn(LogonMobile.szMachineID,pLogonMobile->szMachineID,CountArray(LogonMobile.szMachineID));

  000c0	6a 21		 push	 33			; 00000021H
  000c2	8b 45 f4	 mov	 eax, DWORD PTR _pLogonMobile$4[ebp]
  000c5	83 c0 51	 add	 eax, 81			; 00000051H
  000c8	50		 push	 eax
  000c9	8d 4d cc	 lea	 ecx, DWORD PTR _LogonMobile$3[ebp+64]
  000cc	51		 push	 ecx
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 659  : 
; 660  : 		//投递请求
; 661  : 		m_pIDataBaseEngine->PostDataBaseRequest(LogonMobile.dwUserID,DBR_GR_LOGON_MOBILE,dwSocketID,&LogonMobile,sizeof(LogonMobile));		

  000d3	6a 00		 push	 0
  000d5	6a 68		 push	 104			; 00000068H
  000d7	8d 45 8c	 lea	 eax, DWORD PTR _LogonMobile$3[ebp]
  000da	50		 push	 eax
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  000de	51		 push	 ecx
  000df	6a 65		 push	 101			; 00000065H
  000e1	8b 55 8c	 mov	 edx, DWORD PTR _LogonMobile$3[ebp]
  000e4	52		 push	 edx
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  000ee	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000f1	8b 82 d8 01 00
	00		 mov	 eax, DWORD PTR [edx+472]
  000f7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000f9	50		 push	 eax
  000fa	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000fd	ff d2		 call	 edx
  000ff	83 c4 1c	 add	 esp, 28			; 0000001cH

; 662  : 	}
; 663  : 	else

  00102	e9 db 00 00 00	 jmp	 $LN3@OnEventEnt
$LN2@OnEventEnt:

; 664  : 	{
; 665  : 		//处理消息
; 666  : 		CMD_GR_LogonUserID * pLogonUserID=(CMD_GR_LogonUserID *)pData;

  00107	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  0010a	89 45 88	 mov	 DWORD PTR _pLogonUserID$2[ebp], eax

; 667  : 		pLogonUserID->szPassword[CountArray(pLogonUserID->szPassword)-1]=0;

  0010d	b8 01 00 00 00	 mov	 eax, 1
  00112	c1 e0 05	 shl	 eax, 5
  00115	8b 4d 88	 mov	 ecx, DWORD PTR _pLogonUserID$2[ebp]
  00118	c6 44 01 10 00	 mov	 BYTE PTR [ecx+eax+16], 0

; 668  : 		pLogonUserID->szMachineID[CountArray(pLogonUserID->szMachineID)-1]=0;

  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	c1 e0 05	 shl	 eax, 5
  00125	8b 4d 88	 mov	 ecx, DWORD PTR _pLogonUserID$2[ebp]
  00128	c6 44 01 52 00	 mov	 BYTE PTR [ecx+eax+82], 0

; 669  : 
; 670  : 		//变量定义
; 671  : 		DBR_GR_LogonUserID LogonUserID;
; 672  : 		ZeroMemory(&LogonUserID,sizeof(LogonUserID));

  0012d	6a 68		 push	 104			; 00000068H
  0012f	6a 00		 push	 0
  00131	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _LogonUserID$1[ebp]
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 _memset
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 673  : 
; 674  : 		//构造数据
; 675  : 		LogonUserID.dwClientAddr=dwUserIP;

  00140	8b 45 10	 mov	 eax, DWORD PTR _dwUserIP$[ebp]
  00143	89 85 5c ff ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+60], eax

; 676  : 		LogonUserID.dwUserID=pLogonUserID->dwUserID;

  00149	8b 45 88	 mov	 eax, DWORD PTR _pLogonUserID$2[ebp]
  0014c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0014f	89 8d 20 ff ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp], ecx

; 677  : 		LogonUserID.dwMatchID=m_pMatchOption->dwMatchID;	

  00155	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0015e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00160	89 95 48 ff ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+40], edx

; 678  : 		LogonUserID.lMatchNo=m_pMatchOption->lMatchNo;

  00166	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00169	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0016f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00172	89 95 50 ff ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+48], edx
  00178	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0017b	89 85 54 ff ff
	ff		 mov	 DWORD PTR _LogonUserID$1[ebp+52], eax

; 679  : 		lstrcpyn(LogonUserID.szPassword,pLogonUserID->szPassword,CountArray(LogonUserID.szPassword));

  00181	6a 21		 push	 33			; 00000021H
  00183	8b 45 88	 mov	 eax, DWORD PTR _pLogonUserID$2[ebp]
  00186	83 c0 10	 add	 eax, 16			; 00000010H
  00189	50		 push	 eax
  0018a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _LogonUserID$1[ebp+4]
  00190	51		 push	 ecx
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 680  : 		lstrcpyn(LogonUserID.szMachineID,pLogonUserID->szMachineID,CountArray(LogonUserID.szMachineID));

  00197	6a 21		 push	 33			; 00000021H
  00199	8b 45 88	 mov	 eax, DWORD PTR _pLogonUserID$2[ebp]
  0019c	83 c0 52	 add	 eax, 82			; 00000052H
  0019f	50		 push	 eax
  001a0	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _LogonUserID$1[ebp+64]
  001a6	51		 push	 ecx
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 681  : 
; 682  : 		//投递请求
; 683  : 		m_pIDataBaseEngine->PostDataBaseRequest(LogonUserID.dwUserID,DBR_GR_LOGON_USERID,dwSocketID,&LogonUserID,sizeof(LogonUserID));

  001ad	6a 00		 push	 0
  001af	6a 68		 push	 104			; 00000068H
  001b1	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _LogonUserID$1[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  001bb	51		 push	 ecx
  001bc	6a 64		 push	 100			; 00000064H
  001be	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _LogonUserID$1[ebp]
  001c4	52		 push	 edx
  001c5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001c8	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  001ce	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001d1	8b 82 d8 01 00
	00		 mov	 eax, DWORD PTR [edx+472]
  001d7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001d9	50		 push	 eax
  001da	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001dd	ff d2		 call	 edx
  001df	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN3@OnEventEnt:

; 684  : 	}
; 685  : 
; 686  : 	return true;

  001e2	b0 01		 mov	 al, 1

; 687  : }

  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	5b		 pop	 ebx
  001e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c2 10 00	 ret	 16			; 00000010H
?OnEventEnterMatch@CImmediateMatch@@UAE_NKPAXK_N@Z ENDP	; CImmediateMatch::OnEventEnterMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserLogonFinish@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?OnEventUserLogonFinish@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z PROC ; CImmediateMatch::OnEventUserLogonFinish, COMDAT
; _this$ = ecx

; 629  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	//发送比赛信息
; 631  : 	return SendMatchInfo(pIServerUserItem);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0001f	ff d2		 call	 edx

; 632  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?OnEventUserLogonFinish@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ENDP ; CImmediateMatch::OnEventUserLogonFinish
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserLogout@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?OnEventUserLogout@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z PROC ; CImmediateMatch::OnEventUserLogout, COMDAT
; _this$ = ecx

; 620  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 621  : 	//退出比赛
; 622  : 	OnEventUserQuitMatch(pIServerUserItem, UNSIGNUP_REASON_SYSTEM);

  0000c	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00011	6a 00		 push	 0
  00013	6a 01		 push	 1
  00015	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00024	ff d0		 call	 eax

; 623  : 
; 624  : 	return true;

  00026	b0 01		 mov	 al, 1

; 625  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?OnEventUserLogout@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ENDP ; CImmediateMatch::OnEventUserLogout
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventUserLogon@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv137 = -784						; size = 4
_wDataSize$ = -652					; size = 2
_MatchRule$ = -648					; size = 638
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIServerUserItem$ = 8					; size = 4
?OnEventUserLogon@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z PROC ; CImmediateMatch::OnEventUserLogon, COMDAT
; _this$ = ecx

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 03 00
	00		 sub	 esp, 784		; 00000310H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 579  : 	//构造结构
; 580  : 	CMD_GR_Match_Rule MatchRule;
; 581  : 
; 582  : 	//基本信息
; 583  : 	MatchRule.dwMatchID=m_pMatchOption->dwMatchID;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	89 95 78 fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp], edx

; 584  : 	MatchRule.cbMatchType=m_pMatchOption->cbMatchType;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00033	8a 51 11	 mov	 dl, BYTE PTR [ecx+17]
  00036	88 95 7c fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+4], dl

; 585  : 	lstrcpyn(MatchRule.szMatchName,m_pMatchOption->szMatchName,CountArray(MatchRule.szMatchName));	

  0003c	6a 20		 push	 32			; 00000020H
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00047	83 c1 12	 add	 ecx, 18			; 00000012H
  0004a	51		 push	 ecx
  0004b	8d 95 7d fd ff
	ff		 lea	 edx, DWORD PTR _MatchRule$[ebp+5]
  00051	52		 push	 edx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 586  : 
; 587  : 	//报名信息
; 588  : 	MatchRule.cbFeeType=m_pMatchOption->cbFeeType;

  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00061	8a 51 32	 mov	 dl, BYTE PTR [ecx+50]
  00064	88 95 9d fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+37], dl

; 589  : 	MatchRule.lSignupFee=m_pMatchOption->lSignupFee;	

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00073	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00076	89 95 9f fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp+39], edx
  0007c	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0007f	89 85 a3 fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp+43], eax

; 590  : 	MatchRule.dwExperience=m_pMatchOption->dwExperience;	

  00085	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0008e	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00091	89 95 aa fd ff
	ff		 mov	 DWORD PTR _MatchRule$[ebp+50], edx

; 591  : 	MatchRule.cbDeductArea=m_pMatchOption->cbDeductArea;

  00097	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000a0	8a 51 33	 mov	 dl, BYTE PTR [ecx+51]
  000a3	88 95 9e fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+38], dl

; 592  : 	MatchRule.cbSignupMode=m_pMatchOption->cbSignupMode;

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000b2	8a 51 40	 mov	 dl, BYTE PTR [ecx+64]
  000b5	88 95 a7 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+47], dl

; 593  : 	MatchRule.cbMemberOrder=m_pMatchOption->cbMemberOrder;

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000be	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000c4	8a 51 42	 mov	 dl, BYTE PTR [ecx+66]
  000c7	88 95 a9 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+49], dl

; 594  : 	MatchRule.cbJoinCondition=m_pMatchOption->cbJoinCondition;	

  000cd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000d6	8a 51 41	 mov	 dl, BYTE PTR [ecx+65]
  000d9	88 95 a8 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+48], dl

; 595  : 
; 596  : 	//排名方式
; 597  : 	MatchRule.cbRankingMode=m_pMatchOption->cbRankingMode;

  000df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000e8	8a 51 70	 mov	 dl, BYTE PTR [ecx+112]
  000eb	88 95 ae fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+54], dl

; 598  : 	MatchRule.wCountInnings=m_pMatchOption->wCountInnings;

  000f1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000fa	66 8b 51 72	 mov	 dx, WORD PTR [ecx+114]
  000fe	66 89 95 af fd
	ff ff		 mov	 WORD PTR _MatchRule$[ebp+55], dx

; 599  : 	MatchRule.cbFilterGradesMode=m_pMatchOption->cbFilterGradesMode;

  00105	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00108	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0010e	8a 51 74	 mov	 dl, BYTE PTR [ecx+116]
  00111	88 95 b1 fd ff
	ff		 mov	 BYTE PTR _MatchRule$[ebp+57], dl

; 600  : 
; 601  : 	//比赛规则
; 602  : 	CopyMemory(MatchRule.cbMatchRule,m_pMatchOption->cbMatchRule,sizeof(MatchRule.cbMatchRule));

  00117	68 00 02 00 00	 push	 512			; 00000200H
  0011c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00125	83 c1 7e	 add	 ecx, 126		; 0000007eH
  00128	51		 push	 ecx
  00129	8d 95 f6 fd ff
	ff		 lea	 edx, DWORD PTR _MatchRule$[ebp+126]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 _memcpy
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH

; 603  : 
; 604  : 	//比赛奖励
; 605  : 	MatchRule.wRewardCount=__min(m_pMatchOption->wRewardCount,CountArray(MatchRule.MatchRewardInfo));

  00138	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00141	0f b7 91 7e 02
	00 00		 movzx	 edx, WORD PTR [ecx+638]
  00148	83 fa 03	 cmp	 edx, 3
  0014b	73 18		 jae	 SHORT $LN3@OnEventUse
  0014d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00150	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00156	0f b7 91 7e 02
	00 00		 movzx	 edx, WORD PTR [ecx+638]
  0015d	89 95 f0 fc ff
	ff		 mov	 DWORD PTR tv137[ebp], edx
  00163	eb 0a		 jmp	 SHORT $LN4@OnEventUse
$LN3@OnEventUse:
  00165	c7 85 f0 fc ff
	ff 03 00 00 00	 mov	 DWORD PTR tv137[ebp], 3
$LN4@OnEventUse:
  0016f	66 8b 85 f0 fc
	ff ff		 mov	 ax, WORD PTR tv137[ebp]
  00176	66 89 85 b2 fd
	ff ff		 mov	 WORD PTR _MatchRule$[ebp+58], ax

; 606  : 	CopyMemory(MatchRule.MatchRewardInfo,m_pMatchOption->MatchRewardInfo,MatchRule.wRewardCount* sizeof(MatchRule.MatchRewardInfo[0]));

  0017d	0f b7 85 b2 fd
	ff ff		 movzx	 eax, WORD PTR _MatchRule$[ebp+58]
  00184	6b c8 16	 imul	 ecx, eax, 22
  00187	51		 push	 ecx
  00188	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0018b	8b 82 c0 01 00
	00		 mov	 eax, DWORD PTR [edx+448]
  00191	05 80 02 00 00	 add	 eax, 640		; 00000280H
  00196	50		 push	 eax
  00197	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _MatchRule$[ebp+60]
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 _memcpy
  001a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 607  : 
; 608  : 	//计算大小
; 609  : 	WORD wDataSize=sizeof(MatchRule)-sizeof(MatchRule.MatchRewardInfo);

  001a6	b8 3c 02 00 00	 mov	 eax, 572		; 0000023cH
  001ab	66 89 85 74 fd
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], ax

; 610  : 	wDataSize+=MatchRule.wRewardCount*sizeof(MatchRule.MatchRewardInfo[0]);

  001b2	0f b7 85 b2 fd
	ff ff		 movzx	 eax, WORD PTR _MatchRule$[ebp+58]
  001b9	6b c8 16	 imul	 ecx, eax, 22
  001bc	0f b7 95 74 fd
	ff ff		 movzx	 edx, WORD PTR _wDataSize$[ebp]
  001c3	03 d1		 add	 edx, ecx
  001c5	66 89 95 74 fd
	ff ff		 mov	 WORD PTR _wDataSize$[ebp], dx

; 611  : 
; 612  : 	//发送属性
; 613  : 	m_pIGameServiceFrame->SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_RULE,&MatchRule,wDataSize);

  001cc	0f b7 85 74 fd
	ff ff		 movzx	 eax, WORD PTR _wDataSize$[ebp]
  001d3	50		 push	 eax
  001d4	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR _MatchRule$[ebp]
  001da	51		 push	 ecx
  001db	6a 02		 push	 2
  001dd	6a 0a		 push	 10			; 0000000aH
  001df	8b 55 08	 mov	 edx, DWORD PTR _pIServerUserItem$[ebp]
  001e2	52		 push	 edx
  001e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001e6	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  001ec	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001ef	8b 01		 mov	 eax, DWORD PTR [ecx]
  001f1	8b 8a e0 01 00
	00		 mov	 ecx, DWORD PTR [edx+480]
  001f7	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  001fa	ff d2		 call	 edx

; 614  : 
; 615  : 	return true; 

  001fc	b0 01		 mov	 al, 1

; 616  : }

  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00204	33 cd		 xor	 ecx, ebp
  00206	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 04 00	 ret	 4
?OnEventUserLogon@CImmediateMatch@@UAE_NPAUIServerUserItem@@@Z ENDP ; CImmediateMatch::OnEventUserLogon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z
_TEXT	SEGMENT
tv65 = -160						; size = 4
_MatchSignup$1 = -92					; size = 80
_cbSignupMode$2 = -9					; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_wSubCmdID$ = 8						; size = 2
_pData$ = 12						; size = 4
_wDataSize$ = 16					; size = 2
_pIServerUserItem$ = 20					; size = 4
_dwSocketID$ = 24					; size = 4
?OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z PROC ; CImmediateMatch::OnEventSocketMatch, COMDAT
; _this$ = ecx

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 529  : 	switch (wSubCmdID)

  00019	0f b7 45 08	 movzx	 eax, WORD PTR _wSubCmdID$[ebp]
  0001d	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00023	83 bd 60 ff ff
	ff 03		 cmp	 DWORD PTR tv65[ebp], 3
  0002a	74 12		 je	 SHORT $LN4@OnEventSoc
  0002c	83 bd 60 ff ff
	ff 05		 cmp	 DWORD PTR tv65[ebp], 5
  00033	0f 84 36 01 00
	00		 je	 $LN7@OnEventSoc
  00039	e9 76 01 00 00	 jmp	 $LN2@OnEventSoc
$LN4@OnEventSoc:

; 530  : 	{
; 531  : 	case SUB_GR_MATCH_FEE:	//比赛费用
; 532  : 		{
; 533  : 			//参数效验
; 534  : 			ASSERT(wDataSize==sizeof(BYTE));

  0003e	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00042	83 f8 01	 cmp	 eax, 1
  00045	74 19		 je	 SHORT $LN10@OnEventSoc
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
  0004d	83 c1 06	 add	 ecx, 6
  00050	51		 push	 ecx
  00051	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00056	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005b	85 c0		 test	 eax, eax
  0005d	74 01		 je	 SHORT $LN10@OnEventSoc
  0005f	cc		 int	 3
$LN10@OnEventSoc:

; 535  : 			if(wDataSize!=sizeof(BYTE)) return false;

  00060	0f b7 45 10	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00064	83 f8 01	 cmp	 eax, 1
  00067	74 07		 je	 SHORT $LN5@OnEventSoc
  00069	32 c0		 xor	 al, al
  0006b	e9 46 01 00 00	 jmp	 $LN1@OnEventSoc
$LN5@OnEventSoc:

; 536  : 
; 537  : 			//提取数据
; 538  : 			BYTE cbSignupMode=*(BYTE*)pData;

  00070	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00073	8a 08		 mov	 cl, BYTE PTR [eax]
  00075	88 4d f7	 mov	 BYTE PTR _cbSignupMode$2[ebp], cl

; 539  : 			if ((cbSignupMode&m_pMatchOption->cbSignupMode)==0)return false;

  00078	0f b6 45 f7	 movzx	 eax, BYTE PTR _cbSignupMode$2[ebp]
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8b 91 c0 01 00
	00		 mov	 edx, DWORD PTR [ecx+448]
  00085	0f b6 4a 40	 movzx	 ecx, BYTE PTR [edx+64]
  00089	23 c1		 and	 eax, ecx
  0008b	75 07		 jne	 SHORT $LN6@OnEventSoc
  0008d	32 c0		 xor	 al, al
  0008f	e9 22 01 00 00	 jmp	 $LN1@OnEventSoc
$LN6@OnEventSoc:

; 540  : 
; 541  : 			//变量定义
; 542  : 			DBR_GR_MatchSignup MatchSignup;
; 543  : 			ZeroMemory(&MatchSignup,sizeof(MatchSignup));

  00094	6a 50		 push	 80			; 00000050H
  00096	6a 00		 push	 0
  00098	8d 45 a4	 lea	 eax, DWORD PTR _MatchSignup$1[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _memset
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 544  : 
; 545  : 			//构造结构			
; 546  : 			MatchSignup.cbSignupMode=cbSignupMode;	

  000a4	8a 45 f7	 mov	 al, BYTE PTR _cbSignupMode$2[ebp]
  000a7	88 45 b4	 mov	 BYTE PTR _MatchSignup$1[ebp+16], al

; 547  : 			MatchSignup.dwMatchID=m_pMatchOption->dwMatchID;

  000aa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000b3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b5	89 55 c0	 mov	 DWORD PTR _MatchSignup$1[ebp+28], edx

; 548  : 			MatchSignup.lMatchNo=m_pCurMatchGroup->m_lMatchNo;	

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000be	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000c1	89 55 c4	 mov	 DWORD PTR _MatchSignup$1[ebp+32], edx
  000c4	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000c7	89 45 c8	 mov	 DWORD PTR _MatchSignup$1[ebp+36], eax

; 549  : 			MatchSignup.dwUserID=pIServerUserItem->GetUserID();

  000ca	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000cd	8b 10		 mov	 edx, DWORD PTR [eax]
  000cf	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000d2	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  000d5	ff d0		 call	 eax
  000d7	89 45 a4	 mov	 DWORD PTR _MatchSignup$1[ebp], eax

; 550  : 			MatchSignup.lInitScore=m_pImmediateMatch->lInitalScore;			

  000da	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  000e3	8b 51 0e	 mov	 edx, DWORD PTR [ecx+14]
  000e6	89 55 ac	 mov	 DWORD PTR _MatchSignup$1[ebp+8], edx
  000e9	8b 41 12	 mov	 eax, DWORD PTR [ecx+18]
  000ec	89 45 b0	 mov	 DWORD PTR _MatchSignup$1[ebp+12], eax

; 551  : 			MatchSignup.dwInoutIndex=pIServerUserItem->GetInoutIndex();

  000ef	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000f2	8b 10		 mov	 edx, DWORD PTR [eax]
  000f4	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000f7	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000fa	ff d0		 call	 eax
  000fc	89 45 b8	 mov	 DWORD PTR _MatchSignup$1[ebp+20], eax

; 552  : 			MatchSignup.dwClientAddr=pIServerUserItem->GetClientAddr();					

  000ff	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00102	8b 10		 mov	 edx, DWORD PTR [eax]
  00104	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00107	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0010a	ff d0		 call	 eax
  0010c	89 45 bc	 mov	 DWORD PTR _MatchSignup$1[ebp+24], eax

; 553  : 			MatchSignup.wMaxSignupUser=m_pImmediateMatch->wStartUserCount;

  0010f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 88 c4 01 00
	00		 mov	 ecx, DWORD PTR [eax+452]
  00118	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0011b	66 89 55 b6	 mov	 WORD PTR _MatchSignup$1[ebp+18], dx

; 554  : 			lstrcpyn(MatchSignup.szMachineID,pIServerUserItem->GetMachineID(),CountArray(MatchSignup.szMachineID));

  0011f	6a 21		 push	 33			; 00000021H
  00121	8b 45 14	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00124	8b 10		 mov	 edx, DWORD PTR [eax]
  00126	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00129	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0012c	ff d0		 call	 eax
  0012e	50		 push	 eax
  0012f	8d 4d cc	 lea	 ecx, DWORD PTR _MatchSignup$1[ebp+40]
  00132	51		 push	 ecx
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 555  : 
; 556  : 			//投递数据
; 557  : 			m_pIDataBaseEngine->PostDataBaseRequest(MatchSignup.dwUserID,DBR_GR_MATCH_SIGNUP,dwSocketID,&MatchSignup,sizeof(MatchSignup));

  00139	6a 00		 push	 0
  0013b	6a 50		 push	 80			; 00000050H
  0013d	8d 45 a4	 lea	 eax, DWORD PTR _MatchSignup$1[ebp]
  00140	50		 push	 eax
  00141	8b 4d 18	 mov	 ecx, DWORD PTR _dwSocketID$[ebp]
  00144	51		 push	 ecx
  00145	68 58 02 00 00	 push	 600			; 00000258H
  0014a	8b 55 a4	 mov	 edx, DWORD PTR _MatchSignup$1[ebp]
  0014d	52		 push	 edx
  0014e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00151	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  00157	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	8b 82 d8 01 00
	00		 mov	 eax, DWORD PTR [edx+472]
  00160	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00162	50		 push	 eax
  00163	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00166	ff d2		 call	 edx
  00168	83 c4 1c	 add	 esp, 28			; 0000001cH

; 558  : 
; 559  : 			return true;

  0016b	b0 01		 mov	 al, 1
  0016d	eb 47		 jmp	 SHORT $LN1@OnEventSoc
$LN7@OnEventSoc:

; 560  : 		}
; 561  : 	case SUB_GR_LEAVE_MATCH:	//退出比赛
; 562  : 		{
; 563  : 			//参数效验
; 564  : 			ASSERT(pIServerUserItem!=NULL);

  0016f	83 7d 14 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00173	75 18		 jne	 SHORT $LN11@OnEventSoc
  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z@4JA
  0017a	83 c0 24	 add	 eax, 36			; 00000024H
  0017d	50		 push	 eax
  0017e	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00183	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00188	85 c0		 test	 eax, eax
  0018a	74 01		 je	 SHORT $LN11@OnEventSoc
  0018c	cc		 int	 3
$LN11@OnEventSoc:

; 565  : 			if(pIServerUserItem==NULL) return false;

  0018d	83 7d 14 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00191	75 04		 jne	 SHORT $LN8@OnEventSoc
  00193	32 c0		 xor	 al, al
  00195	eb 1f		 jmp	 SHORT $LN1@OnEventSoc
$LN8@OnEventSoc:

; 566  : 
; 567  : 			//退出比赛
; 568  : 			OnEventUserQuitMatch(pIServerUserItem,UNSIGNUP_REASON_PLAYER,0,dwSocketID);

  00197	8b 45 18	 mov	 eax, DWORD PTR _dwSocketID$[ebp]
  0019a	50		 push	 eax
  0019b	6a 00		 push	 0
  0019d	6a 00		 push	 0
  0019f	8b 4d 14	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001a2	51		 push	 ecx
  001a3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001a6	8b 02		 mov	 eax, DWORD PTR [edx]
  001a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ab	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  001ae	ff d2		 call	 edx

; 569  : 
; 570  : 			return true;

  001b0	b0 01		 mov	 al, 1
  001b2	eb 02		 jmp	 SHORT $LN1@OnEventSoc
$LN2@OnEventSoc:

; 571  : 		}
; 572  : 	}
; 573  : 	return true;

  001b4	b0 01		 mov	 al, 1
$LN1@OnEventSoc:

; 574  : }

  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx
  001b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bc	33 cd		 xor	 ecx, ebp
  001be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c2 14 00	 ret	 20			; 00000014H
?OnEventSocketMatch@CImmediateMatch@@UAE_NGPAXGPAUIServerUserItem@@K@Z ENDP ; CImmediateMatch::OnEventSocketMatch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
_TEXT	SEGMENT
tv958 = -736						; size = 4
tv733 = -736						; size = 4
tv957 = -732						; size = 4
tv867 = -732						; size = 4
tv746 = -732						; size = 4
tv732 = -732						; size = 4
tv587 = -732						; size = 4
tv65 = -732						; size = 4
$T2 = -728						; size = 4
_MatchGoldUpdate$3 = -596				; size = 8
_pMatchRewardResult$4 = -588				; size = 4
_pTempTable$5 = -584					; size = 4
_j$6 = -580						; size = 4
_m$7 = -576						; size = 4
_wTableID$8 = -572					; size = 2
_bTrusteeUser$9 = -566					; size = 1
_bAndroidUser$10 = -565					; size = 1
_wMatchUserCount$11 = -564				; size = 2
_wQuitUserCount$12 = -560				; size = 2
_dwUserID$13 = -556					; size = 4
_pITempUserItem$14 = -552				; size = 4
_pos$15 = -548						; size = 4
_cbMatchStatus$16 = -541				; size = 1
_i$17 = -540						; size = 4
_pImmediateGroup$18 = -536				; size = 4
_wIndex$19 = -532					; size = 2
_pMatchRankInfo$20 = -528				; size = 4
_pIRewardUserItem$21 = -524				; size = 4
_pMatchRankList$22 = -520				; size = 4
_MatchGoldUpdate$23 = -516				; size = 8
_szDescribe$24 = -508					; size = 128
_szDescribe$25 = -380					; size = 128
_pszFeeType$26 = -252					; size = 8
_szDescribe$27 = -244					; size = 128
_cbUserMatchStatus$28 = -113				; size = 1
_pMatchSignupResult$29 = -112				; size = 4
_MatchGoldUpdate$30 = -108				; size = 8
_MatchUnSignup$31 = -100				; size = 72
_pMatchSignupResult$32 = -28				; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_wRequestID$ = 8					; size = 2
_pIServerUserItem$ = 12					; size = 4
_pData$ = 16						; size = 4
_wDataSize$ = 20					; size = 2
_dwContextID$ = 24					; size = 4
?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z PROC ; CImmediateMatch::OnEventDataBase, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec d0 02 00
	00		 sub	 esp, 720		; 000002d0H
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00032	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 223  : 	switch (wRequestID)

  00035	0f b7 45 08	 movzx	 eax, WORD PTR _wRequestID$[ebp]
  00039	89 85 24 fd ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0003f	8b 8d 24 fd ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  00045	81 e9 f5 01 00
	00		 sub	 ecx, 501		; 000001f5H
  0004b	89 8d 24 fd ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00051	83 bd 24 fd ff
	ff 07		 cmp	 DWORD PTR tv65[ebp], 7
  00058	0f 87 cd 0b 00
	00		 ja	 $LN2@OnEventDat
  0005e	8b 95 24 fd ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00064	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN70@OnEventDat[edx*4]
$LN18@OnEventDat:

; 224  : 	{
; 225  : 	case DBO_GR_MATCH_SIGNUP_RESULT:		//报名结果
; 226  : 		{
; 227  : 			//参数效验
; 228  : 			if (pIServerUserItem==NULL) return true;

  0006b	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  0006f	75 07		 jne	 SHORT $LN19@OnEventDat
  00071	b0 01		 mov	 al, 1
  00073	e9 b5 0b 00 00	 jmp	 $LN1@OnEventDat
$LN19@OnEventDat:

; 229  : 			if (wDataSize>sizeof(DBO_GR_MatchSingupResult)) return false;

  00078	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  0007c	3d a8 00 00 00	 cmp	 eax, 168		; 000000a8H
  00081	76 07		 jbe	 SHORT $LN20@OnEventDat
  00083	32 c0		 xor	 al, al
  00085	e9 a3 0b 00 00	 jmp	 $LN1@OnEventDat
$LN20@OnEventDat:

; 230  : 
; 231  : 			//提取数据
; 232  : 			DBO_GR_MatchSingupResult * pMatchSignupResult = (DBO_GR_MatchSingupResult*)pData;			

  0008a	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  0008d	89 45 e4	 mov	 DWORD PTR _pMatchSignupResult$32[ebp], eax

; 233  : 
; 234  : 			//报名失败
; 235  : 			if(pMatchSignupResult->bResultCode==false)

  00090	8b 45 e4	 mov	 eax, DWORD PTR _pMatchSignupResult$32[ebp]
  00093	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00096	85 c9		 test	 ecx, ecx
  00098	75 41		 jne	 SHORT $LN21@OnEventDat

; 236  : 			{
; 237  : 				//提示消息不为空
; 238  : 				if (pMatchSignupResult->szDescribeString[0]!=0)

  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	6b c8 00	 imul	 ecx, eax, 0
  000a2	8b 55 e4	 mov	 edx, DWORD PTR _pMatchSignupResult$32[ebp]
  000a5	0f be 44 0a 28	 movsx	 eax, BYTE PTR [edx+ecx+40]
  000aa	85 c0		 test	 eax, eax
  000ac	74 26		 je	 SHORT $LN22@OnEventDat

; 239  : 				{
; 240  : 					m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,pMatchSignupResult->szDescribeString,SMT_EJECT);

  000ae	6a 02		 push	 2
  000b0	8b 45 e4	 mov	 eax, DWORD PTR _pMatchSignupResult$32[ebp]
  000b3	83 c0 28	 add	 eax, 40			; 00000028H
  000b6	50		 push	 eax
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000be	8b 82 e0 01 00
	00		 mov	 eax, DWORD PTR [edx+480]
  000c4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	8b 10		 mov	 edx, DWORD PTR [eax]
  000c9	8b 89 e0 01 00
	00		 mov	 ecx, DWORD PTR [ecx+480]
  000cf	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000d2	ff d0		 call	 eax
$LN22@OnEventDat:

; 241  : 				}
; 242  : 
; 243  : 				return true;

  000d4	b0 01		 mov	 al, 1
  000d6	e9 52 0b 00 00	 jmp	 $LN1@OnEventDat
$LN21@OnEventDat:

; 244  : 			}
; 245  : 
; 246  : 			//判断场次
; 247  : 			if (m_pCurMatchGroup->m_lMatchNo!=pMatchSignupResult->lMatchNo)

  000db	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000de	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000e1	8b 55 e4	 mov	 edx, DWORD PTR _pMatchSignupResult$32[ebp]
  000e4	89 8d 24 fd ff
	ff		 mov	 DWORD PTR tv732[ebp], ecx
  000ea	89 95 20 fd ff
	ff		 mov	 DWORD PTR tv733[ebp], edx
  000f0	8b 85 24 fd ff
	ff		 mov	 eax, DWORD PTR tv732[ebp]
  000f6	8b 8d 20 fd ff
	ff		 mov	 ecx, DWORD PTR tv733[ebp]
  000fc	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000ff	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00102	75 18		 jne	 SHORT $LN66@OnEventDat
  00104	8b 85 24 fd ff
	ff		 mov	 eax, DWORD PTR tv732[ebp]
  0010a	8b 8d 20 fd ff
	ff		 mov	 ecx, DWORD PTR tv733[ebp]
  00110	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00113	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  00116	0f 84 f4 00 00
	00		 je	 $LN23@OnEventDat
$LN66@OnEventDat:

; 248  : 			{
; 249  : 				SendRoomMessage(pIServerUserItem, TEXT("比赛已经开始,报名失败,请重新报名下一场比赛！"),SMT_CHAT|SMT_EJECT);

  0011c	6a 03		 push	 3
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@HDLOLBPO@?$LB?H?H?$PM?R?Q?$LO?$KN?$LP?$KK?J?$LM?0?$LB?$KI?C?$PL?J?$KH?$LA?$NM?0?G?k?V?X?P?B?$LB?$KI?C@
  00123	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00126	50		 push	 eax
  00127	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	83 c1 04	 add	 ecx, 4
  0012d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00130	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00133	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00136	ff d2		 call	 edx

; 250  : 
; 251  : 				//退还费用
; 252  : 				if (m_pMatchOption->lSignupFee>0)

  00138	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00141	89 8d 24 fd ff
	ff		 mov	 DWORD PTR tv746[ebp], ecx
  00147	8b 95 24 fd ff
	ff		 mov	 edx, DWORD PTR tv746[ebp]
  0014d	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  00151	0f 8c b2 00 00
	00		 jl	 $LN24@OnEventDat
  00157	7f 10		 jg	 SHORT $LN67@OnEventDat
  00159	8b 85 24 fd ff
	ff		 mov	 eax, DWORD PTR tv746[ebp]
  0015f	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00163	0f 86 a0 00 00
	00		 jbe	 $LN24@OnEventDat
$LN67@OnEventDat:

; 253  : 				{
; 254  : 					//变量定义
; 255  : 					DBR_GR_MatchUnSignup MatchUnSignup;
; 256  : 					MatchUnSignup.dwReason=UNSIGNUP_REASON_SYSTEM;

  00169	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR _MatchUnSignup$31[ebp], 1

; 257  : 					MatchUnSignup.dwUserID=pIServerUserItem->GetUserID();

  00170	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00173	8b 10		 mov	 edx, DWORD PTR [eax]
  00175	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00178	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0017b	ff d0		 call	 eax
  0017d	89 45 a0	 mov	 DWORD PTR _MatchUnSignup$31[ebp+4], eax

; 258  : 
; 259  : 					//构造结构
; 260  : 					MatchUnSignup.dwInoutIndex=pIServerUserItem->GetInoutIndex();

  00180	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00183	8b 10		 mov	 edx, DWORD PTR [eax]
  00185	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00188	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0018b	ff d0		 call	 eax
  0018d	89 45 a4	 mov	 DWORD PTR _MatchUnSignup$31[ebp+8], eax

; 261  : 					MatchUnSignup.dwClientAddr=pIServerUserItem->GetClientAddr();

  00190	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00193	8b 10		 mov	 edx, DWORD PTR [eax]
  00195	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00198	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0019b	ff d0		 call	 eax
  0019d	89 45 a8	 mov	 DWORD PTR _MatchUnSignup$31[ebp+12], eax

; 262  : 					MatchUnSignup.dwMatchID=m_pMatchOption->dwMatchID;

  001a0	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  001a9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ab	89 55 ac	 mov	 DWORD PTR _MatchUnSignup$31[ebp+16], edx

; 263  : 					MatchUnSignup.lMatchNo=pMatchSignupResult->lMatchNo;

  001ae	8b 45 e4	 mov	 eax, DWORD PTR _pMatchSignupResult$32[ebp]
  001b1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001b4	89 4d b4	 mov	 DWORD PTR _MatchUnSignup$31[ebp+24], ecx
  001b7	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001ba	89 55 b8	 mov	 DWORD PTR _MatchUnSignup$31[ebp+28], edx

; 264  : 					lstrcpyn(MatchUnSignup.szMachineID,pIServerUserItem->GetMachineID(),CountArray(MatchUnSignup.szMachineID));

  001bd	6a 21		 push	 33			; 00000021H
  001bf	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  001c2	8b 10		 mov	 edx, DWORD PTR [eax]
  001c4	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  001c7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ca	ff d0		 call	 eax
  001cc	50		 push	 eax
  001cd	8d 4d bc	 lea	 ecx, DWORD PTR _MatchUnSignup$31[ebp+32]
  001d0	51		 push	 ecx
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 265  : 
; 266  : 					//投递数据
; 267  : 					m_pIDataBaseEngine->PostDataBaseRequest(MatchUnSignup.dwUserID,DBR_GR_MATCH_UNSIGNUP,dwContextID,&MatchUnSignup,sizeof(MatchUnSignup));

  001d7	6a 00		 push	 0
  001d9	6a 48		 push	 72			; 00000048H
  001db	8d 45 9c	 lea	 eax, DWORD PTR _MatchUnSignup$31[ebp]
  001de	50		 push	 eax
  001df	8b 4d 18	 mov	 ecx, DWORD PTR _dwContextID$[ebp]
  001e2	51		 push	 ecx
  001e3	68 59 02 00 00	 push	 601			; 00000259H
  001e8	8b 55 a0	 mov	 edx, DWORD PTR _MatchUnSignup$31[ebp+4]
  001eb	52		 push	 edx
  001ec	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  001f5	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001f8	8b 82 d8 01 00
	00		 mov	 eax, DWORD PTR [edx+472]
  001fe	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00200	50		 push	 eax
  00201	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00204	ff d2		 call	 edx
  00206	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN24@OnEventDat:

; 268  : 				}
; 269  : 
; 270  : 				return true;

  00209	b0 01		 mov	 al, 1
  0020b	e9 1d 0a 00 00	 jmp	 $LN1@OnEventDat
$LN23@OnEventDat:

; 271  : 			}
; 272  : 
; 273  : 			//加入比赛
; 274  : 			if (m_pCurMatchGroup->OnUserSignUpMatch(pIServerUserItem)==false)

  00210	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00213	50		 push	 eax
  00214	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00217	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  0021a	e8 00 00 00 00	 call	 ?OnUserSignUpMatch@CImmediateGroup@@QAE_NPAUIServerUserItem@@@Z ; CImmediateGroup::OnUserSignUpMatch
  0021f	0f b6 d0	 movzx	 edx, al
  00222	85 d2		 test	 edx, edx
  00224	75 23		 jne	 SHORT $LN25@OnEventDat

; 275  : 			{
; 276  : 				SendRoomMessage(pIServerUserItem, TEXT("报名失败"),SMT_CHAT);

  00226	6a 01		 push	 1
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_08CGCLAKLP@?$LB?$KI?C?$PL?J?$KH?$LA?$NM@
  0022d	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00230	50		 push	 eax
  00231	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00234	83 c1 04	 add	 ecx, 4
  00237	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0023a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0023d	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00240	ff d2		 call	 edx

; 277  : 				return false;

  00242	32 c0		 xor	 al, al
  00244	e9 e4 09 00 00	 jmp	 $LN1@OnEventDat
$LN25@OnEventDat:

; 278  : 			}
; 279  : 
; 280  : 			//报名成功
; 281  : 			m_OnMatchUserItem.Add(pIServerUserItem);

  00249	8d 45 0c	 lea	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0024c	50		 push	 eax
  0024d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00250	83 c1 24	 add	 ecx, 36			; 00000024H
  00253	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEHABQAUIServerUserItem@@@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::Add

; 282  : 			SendMatchInfo(pIServerUserItem);

  00258	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0025b	50		 push	 eax
  0025c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0025f	83 c1 04	 add	 ecx, 4
  00262	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00265	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00268	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0026b	ff d2		 call	 edx

; 283  : 			if (m_pIGameServiceFrame!=NULL)

  0026d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00270	83 b8 e0 01 00
	00 00		 cmp	 DWORD PTR [eax+480], 0
  00277	74 1c		 je	 SHORT $LN26@OnEventDat

; 284  : 			{
; 285  : 				SendRoomMessage(pIServerUserItem, TEXT("恭喜，报名成功，请等待系统为您分配座位！"),SMT_CHAT);

  00279	6a 01		 push	 1
  0027b	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CKEEGDHM@?$LJ?$KH?O?$LC?$KD?$KM?$LB?$KI?C?$PL?$LD?I?$LJ?$KG?$KD?$KM?G?k?$LF?H?$LE?$PN?O?$LF?M?$LD?N?$KK?D?z?$LH@
  00280	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00283	50		 push	 eax
  00284	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00287	83 c1 04	 add	 ecx, 4
  0028a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0028d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00290	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00293	ff d2		 call	 edx
$LN26@OnEventDat:

; 286  : 			}
; 287  : 
; 288  : 			//金币更新
; 289  : 			if (pIServerUserItem->IsAndroidUser()==false)

  00295	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00298	8b 10		 mov	 edx, DWORD PTR [eax]
  0029a	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0029d	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  002a3	ff d0		 call	 eax
  002a5	0f b6 c8	 movzx	 ecx, al
  002a8	85 c9		 test	 ecx, ecx
  002aa	75 33		 jne	 SHORT $LN27@OnEventDat

; 290  : 			{
; 291  : 				//构造结构
; 292  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 293  : 
; 294  : 				//设置变量
; 295  : 				MatchGoldUpdate.lCurrGold=pMatchSignupResult->lCurrGold;

  002ac	8b 45 e4	 mov	 eax, DWORD PTR _pMatchSignupResult$32[ebp]
  002af	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002b2	89 4d 94	 mov	 DWORD PTR _MatchGoldUpdate$30[ebp], ecx
  002b5	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  002b8	89 55 98	 mov	 DWORD PTR _MatchGoldUpdate$30[ebp+4], edx

; 296  : 
; 297  : 				//发送数据
; 298  : 				return SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  002bb	6a 08		 push	 8
  002bd	8d 45 94	 lea	 eax, DWORD PTR _MatchGoldUpdate$30[ebp]
  002c0	50		 push	 eax
  002c1	6a 0d		 push	 13			; 0000000dH
  002c3	6a 0a		 push	 10			; 0000000aH
  002c5	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  002c8	51		 push	 ecx
  002c9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cc	83 c1 04	 add	 ecx, 4
  002cf	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  002d2	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002d5	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  002d8	ff d2		 call	 edx
  002da	e9 4e 09 00 00	 jmp	 $LN1@OnEventDat
$LN27@OnEventDat:

; 299  : 			}
; 300  : 
; 301  : 			break;

  002df	e9 47 09 00 00	 jmp	 $LN2@OnEventDat
$LN28@OnEventDat:

; 302  : 		}
; 303  : 	case DBO_GR_MATCH_UNSIGNUP_RESULT:		//退赛结果
; 304  : 		{
; 305  : 			//参数效验
; 306  : 			if (pIServerUserItem==NULL) return true;

  002e4	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  002e8	75 07		 jne	 SHORT $LN29@OnEventDat
  002ea	b0 01		 mov	 al, 1
  002ec	e9 3c 09 00 00	 jmp	 $LN1@OnEventDat
$LN29@OnEventDat:

; 307  : 			if (wDataSize>sizeof(DBO_GR_MatchSingupResult)) return false;

  002f1	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  002f5	3d a8 00 00 00	 cmp	 eax, 168		; 000000a8H
  002fa	76 07		 jbe	 SHORT $LN30@OnEventDat
  002fc	32 c0		 xor	 al, al
  002fe	e9 2a 09 00 00	 jmp	 $LN1@OnEventDat
$LN30@OnEventDat:

; 308  : 
; 309  : 			//提取数据
; 310  : 			DBO_GR_MatchSingupResult * pMatchSignupResult = (DBO_GR_MatchSingupResult*)pData;			

  00303	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00306	89 45 90	 mov	 DWORD PTR _pMatchSignupResult$29[ebp], eax

; 311  : 
; 312  : 			//退费失败
; 313  : 			if (pMatchSignupResult->bResultCode==false)

  00309	8b 45 90	 mov	 eax, DWORD PTR _pMatchSignupResult$29[ebp]
  0030c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0030f	85 c9		 test	 ecx, ecx
  00311	75 2d		 jne	 SHORT $LN31@OnEventDat

; 314  : 			{
; 315  : 				m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,pMatchSignupResult->szDescribeString,SMT_EJECT);

  00313	6a 02		 push	 2
  00315	8b 45 90	 mov	 eax, DWORD PTR _pMatchSignupResult$29[ebp]
  00318	83 c0 28	 add	 eax, 40			; 00000028H
  0031b	50		 push	 eax
  0031c	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0031f	51		 push	 ecx
  00320	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00323	8b 82 e0 01 00
	00		 mov	 eax, DWORD PTR [edx+480]
  00329	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0032c	8b 10		 mov	 edx, DWORD PTR [eax]
  0032e	8b 89 e0 01 00
	00		 mov	 ecx, DWORD PTR [ecx+480]
  00334	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00337	ff d0		 call	 eax

; 316  : 
; 317  : 				return true;

  00339	b0 01		 mov	 al, 1
  0033b	e9 ed 08 00 00	 jmp	 $LN1@OnEventDat
$LN31@OnEventDat:

; 318  : 			}
; 319  : 
; 320  : 			//设置状态
; 321  : 			pIServerUserItem->SetUserMatchStatus(MUS_NULL);

  00340	6a 00		 push	 0
  00342	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00345	8b 10		 mov	 edx, DWORD PTR [eax]
  00347	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0034a	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  00350	ff d0		 call	 eax

; 322  : 
; 323  : 			//发送比赛状态
; 324  : 			BYTE cbUserMatchStatus=pIServerUserItem->GetUserMatchStatus();

  00352	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00355	8b 10		 mov	 edx, DWORD PTR [eax]
  00357	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0035a	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00360	ff d0		 call	 eax
  00362	88 45 8f	 mov	 BYTE PTR _cbUserMatchStatus$28[ebp], al

; 325  : 			SendData (pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_USTATUS,&cbUserMatchStatus,sizeof(cbUserMatchStatus));

  00365	6a 01		 push	 1
  00367	8d 45 8f	 lea	 eax, DWORD PTR _cbUserMatchStatus$28[ebp]
  0036a	50		 push	 eax
  0036b	6a 0b		 push	 11			; 0000000bH
  0036d	6a 0a		 push	 10			; 0000000aH
  0036f	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00372	51		 push	 ecx
  00373	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00376	83 c1 04	 add	 ecx, 4
  00379	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0037c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0037f	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00382	ff d2		 call	 edx

; 326  : 
; 327  : 			//扣除报名费
; 328  : 			if (pMatchSignupResult->cbSignupMode==SIGNUP_MODE_SIGNUP_FEE)

  00384	8b 45 90	 mov	 eax, DWORD PTR _pMatchSignupResult$29[ebp]
  00387	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0038b	83 f9 01	 cmp	 ecx, 1
  0038e	0f 85 6b 01 00
	00		 jne	 $LN32@OnEventDat

; 329  : 			{
; 330  : 				//房间扣费
; 331  : 				if(m_pMatchOption->cbDeductArea==DEDUCT_AREA_SERVER)

  00394	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00397	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0039d	0f b6 51 33	 movzx	 edx, BYTE PTR [ecx+51]
  003a1	85 d2		 test	 edx, edx
  003a3	0f 85 db 00 00
	00		 jne	 $LN33@OnEventDat

; 332  : 				{
; 333  : 					//退费通知
; 334  : 					TCHAR szDescribe[128]=TEXT("");

  003a9	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  003ae	88 85 0c ff ff
	ff		 mov	 BYTE PTR _szDescribe$27[ebp], al
  003b4	6a 7f		 push	 127			; 0000007fH
  003b6	6a 00		 push	 0
  003b8	8d 85 0d ff ff
	ff		 lea	 eax, DWORD PTR _szDescribe$27[ebp+1]
  003be	50		 push	 eax
  003bf	e8 00 00 00 00	 call	 _memset
  003c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 335  : 					if (m_pMatchOption->lSignupFee>0)

  003c7	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003ca	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  003d0	89 8d 24 fd ff
	ff		 mov	 DWORD PTR tv867[ebp], ecx
  003d6	8b 95 24 fd ff
	ff		 mov	 edx, DWORD PTR tv867[ebp]
  003dc	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  003e0	7c 63		 jl	 SHORT $LN34@OnEventDat
  003e2	7f 0c		 jg	 SHORT $LN68@OnEventDat
  003e4	8b 85 24 fd ff
	ff		 mov	 eax, DWORD PTR tv867[ebp]
  003ea	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  003ee	76 55		 jbe	 SHORT $LN34@OnEventDat
$LN68@OnEventDat:

; 336  : 					{
; 337  : 						LPCTSTR pszFeeType[]={TEXT("游戏币"),TEXT("元宝")};

  003f0	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszFeeType$26[ebp], OFFSET ??_C@_06EPCIHMAO@?S?N?O?$LH?$LB?R@
  003fa	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pszFeeType$26[ebp+4], OFFSET ??_C@_04FLLPKHFC@?T?$KK?$LB?$KG@

; 338  : 						_sntprintf_s(szDescribe,CountArray(szDescribe),TEXT("退赛成功，退还报名费%I64d%s！"),m_pMatchOption->lSignupFee,pszFeeType[m_pMatchOption->cbFeeType-FEE_TYPE_GOLD]);

  00404	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00407	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0040d	0f b6 51 32	 movzx	 edx, BYTE PTR [ecx+50]
  00411	8b 84 95 04 ff
	ff ff		 mov	 eax, DWORD PTR _pszFeeType$26[ebp+edx*4]
  00418	50		 push	 eax
  00419	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0041c	8b 91 c0 01 00
	00		 mov	 edx, DWORD PTR [ecx+448]
  00422	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00425	50		 push	 eax
  00426	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00429	51		 push	 ecx
  0042a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OCKMIBLC@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KM?M?K?$LL?$LJ?$LB?$KI?C?$PL?$LH?Q?$CFI64d?$CFs?$KD?$KB@
  0042f	68 80 00 00 00	 push	 128			; 00000080H
  00434	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR _szDescribe$27[ebp]
  0043a	52		 push	 edx
  0043b	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  00440	83 c4 18	 add	 esp, 24			; 00000018H

; 339  : 					}
; 340  : 					else

  00443	eb 19		 jmp	 SHORT $LN35@OnEventDat
$LN34@OnEventDat:

; 341  : 					{
; 342  : 						_sntprintf_s(szDescribe,CountArray(szDescribe),TEXT("退赛成功！"));

  00445	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@
  0044a	68 80 00 00 00	 push	 128			; 00000080H
  0044f	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _szDescribe$27[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ??$_snprintf_s@$0IA@@@YAHAAY0IA@DIPBDZZ ; _snprintf_s<128>
  0045b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN35@OnEventDat:

; 343  : 					}
; 344  : 					m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,szDescribe,SMT_EJECT);

  0045e	6a 02		 push	 2
  00460	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _szDescribe$27[ebp]
  00466	50		 push	 eax
  00467	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0046a	51		 push	 ecx
  0046b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0046e	8b 82 e0 01 00
	00		 mov	 eax, DWORD PTR [edx+480]
  00474	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00477	8b 10		 mov	 edx, DWORD PTR [eax]
  00479	8b 89 e0 01 00
	00		 mov	 ecx, DWORD PTR [ecx+480]
  0047f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00482	ff d0		 call	 eax
$LN33@OnEventDat:

; 345  : 				}
; 346  : 				
; 347  : 				//网站扣费
; 348  : 				if (m_pMatchOption->cbDeductArea==DEDUCT_AREA_WEBSITE)

  00484	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00487	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0048d	0f b6 51 33	 movzx	 edx, BYTE PTR [ecx+51]
  00491	83 fa 01	 cmp	 edx, 1
  00494	75 69		 jne	 SHORT $LN32@OnEventDat

; 349  : 				{
; 350  : 					TCHAR szDescribe[128]=TEXT("退赛成功！");

  00496	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@
  0049b	89 85 84 fe ff
	ff		 mov	 DWORD PTR _szDescribe$25[ebp], eax
  004a1	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@+4
  004a7	89 8d 88 fe ff
	ff		 mov	 DWORD PTR _szDescribe$25[ebp+4], ecx
  004ad	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@+8
  004b4	66 89 95 8c fe
	ff ff		 mov	 WORD PTR _szDescribe$25[ebp+8], dx
  004bb	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@+10
  004c0	88 85 8e fe ff
	ff		 mov	 BYTE PTR _szDescribe$25[ebp+10], al
  004c6	6a 75		 push	 117			; 00000075H
  004c8	6a 00		 push	 0
  004ca	8d 85 8f fe ff
	ff		 lea	 eax, DWORD PTR _szDescribe$25[ebp+11]
  004d0	50		 push	 eax
  004d1	e8 00 00 00 00	 call	 _memset
  004d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 351  : 					m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,szDescribe,SMT_EJECT);

  004d9	6a 02		 push	 2
  004db	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _szDescribe$25[ebp]
  004e1	50		 push	 eax
  004e2	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  004e5	51		 push	 ecx
  004e6	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  004e9	8b 82 e0 01 00
	00		 mov	 eax, DWORD PTR [edx+480]
  004ef	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  004f2	8b 10		 mov	 edx, DWORD PTR [eax]
  004f4	8b 89 e0 01 00
	00		 mov	 ecx, DWORD PTR [ecx+480]
  004fa	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  004fd	ff d0		 call	 eax
$LN32@OnEventDat:

; 352  : 				}
; 353  : 			}
; 354  : 
; 355  : 			//比赛晋级
; 356  : 			if (pMatchSignupResult->cbSignupMode==SIGNUP_MODE_MATCH_USER)

  004ff	8b 45 90	 mov	 eax, DWORD PTR _pMatchSignupResult$29[ebp]
  00502	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00506	83 f9 02	 cmp	 ecx, 2
  00509	75 69		 jne	 SHORT $LN37@OnEventDat

; 357  : 			{
; 358  : 				TCHAR szDescribe[128]=TEXT("退赛成功！");

  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@
  00510	89 85 04 fe ff
	ff		 mov	 DWORD PTR _szDescribe$24[ebp], eax
  00516	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@+4
  0051c	89 8d 08 fe ff
	ff		 mov	 DWORD PTR _szDescribe$24[ebp+4], ecx
  00522	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@+8
  00529	66 89 95 0c fe
	ff ff		 mov	 WORD PTR _szDescribe$24[ebp+8], dx
  00530	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0L@OLEOCCAL@?M?K?H?$PM?$LD?I?$LJ?$KG?$KD?$KB@+10
  00535	88 85 0e fe ff
	ff		 mov	 BYTE PTR _szDescribe$24[ebp+10], al
  0053b	6a 75		 push	 117			; 00000075H
  0053d	6a 00		 push	 0
  0053f	8d 85 0f fe ff
	ff		 lea	 eax, DWORD PTR _szDescribe$24[ebp+11]
  00545	50		 push	 eax
  00546	e8 00 00 00 00	 call	 _memset
  0054b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 359  : 				m_pIGameServiceFrame->SendRoomMessage(pIServerUserItem,szDescribe,SMT_EJECT);

  0054e	6a 02		 push	 2
  00550	8d 85 04 fe ff
	ff		 lea	 eax, DWORD PTR _szDescribe$24[ebp]
  00556	50		 push	 eax
  00557	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0055a	51		 push	 ecx
  0055b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0055e	8b 82 e0 01 00
	00		 mov	 eax, DWORD PTR [edx+480]
  00564	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00567	8b 10		 mov	 edx, DWORD PTR [eax]
  00569	8b 89 e0 01 00
	00		 mov	 ecx, DWORD PTR [ecx+480]
  0056f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00572	ff d0		 call	 eax
$LN37@OnEventDat:

; 360  : 			}
; 361  : 
; 362  : 			//金币更新
; 363  : 			if(pIServerUserItem->IsAndroidUser()==false)

  00574	8b 45 0c	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00577	8b 10		 mov	 edx, DWORD PTR [eax]
  00579	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0057c	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00582	ff d0		 call	 eax
  00584	0f b6 c8	 movzx	 ecx, al
  00587	85 c9		 test	 ecx, ecx
  00589	75 3c		 jne	 SHORT $LN38@OnEventDat

; 364  : 			{
; 365  : 				//构造结构
; 366  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 367  : 
; 368  : 				//设置变量
; 369  : 				MatchGoldUpdate.lCurrGold=pMatchSignupResult->lCurrGold;

  0058b	8b 45 90	 mov	 eax, DWORD PTR _pMatchSignupResult$29[ebp]
  0058e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00591	89 8d fc fd ff
	ff		 mov	 DWORD PTR _MatchGoldUpdate$23[ebp], ecx
  00597	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  0059a	89 95 00 fe ff
	ff		 mov	 DWORD PTR _MatchGoldUpdate$23[ebp+4], edx

; 370  : 
; 371  : 				//发送数据
; 372  : 				return SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  005a0	6a 08		 push	 8
  005a2	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _MatchGoldUpdate$23[ebp]
  005a8	50		 push	 eax
  005a9	6a 0d		 push	 13			; 0000000dH
  005ab	6a 0a		 push	 10			; 0000000aH
  005ad	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  005b0	51		 push	 ecx
  005b1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  005b4	83 c1 04	 add	 ecx, 4
  005b7	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  005ba	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  005bd	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  005c0	ff d2		 call	 edx
  005c2	e9 66 06 00 00	 jmp	 $LN1@OnEventDat
$LN38@OnEventDat:

; 373  : 			}
; 374  : 
; 375  : 			break;

  005c7	e9 5f 06 00 00	 jmp	 $LN2@OnEventDat
$LN39@OnEventDat:

; 376  : 		}	
; 377  : 	case DBO_GR_MATCH_RANK_LIST:			//比赛排行
; 378  : 		{
; 379  : 			//参数校验
; 380  : 			ASSERT(wDataSize<=sizeof(DBO_GR_MatchRankList));

  005cc	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  005d0	3d 18 14 00 00	 cmp	 eax, 5144		; 00001418H
  005d5	76 1c		 jbe	 SHORT $LN58@OnEventDat
  005d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
  005dd	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  005e3	51		 push	 ecx
  005e4	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  005e9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  005ee	85 c0		 test	 eax, eax
  005f0	74 01		 je	 SHORT $LN58@OnEventDat
  005f2	cc		 int	 3
$LN58@OnEventDat:

; 381  : 			if(wDataSize>sizeof(DBO_GR_MatchRankList)) return false;

  005f3	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  005f7	3d 18 14 00 00	 cmp	 eax, 5144		; 00001418H
  005fc	76 07		 jbe	 SHORT $LN40@OnEventDat
  005fe	32 c0		 xor	 al, al
  00600	e9 28 06 00 00	 jmp	 $LN1@OnEventDat
$LN40@OnEventDat:

; 382  : 
; 383  : 			//提取数据
; 384  : 			DBO_GR_MatchRankList * pMatchRankList = (DBO_GR_MatchRankList*)pData;

  00605	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00608	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _pMatchRankList$22[ebp], eax

; 385  : 
; 386  : 			//变量定义
; 387  : 			IServerUserItem * pIRewardUserItem=NULL;

  0060e	c7 85 f4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIRewardUserItem$21[ebp], 0

; 388  : 			tagMatchRankInfo * pMatchRankInfo=NULL;

  00618	c7 85 f0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMatchRankInfo$20[ebp], 0

; 389  : 
; 390  : 			//发放奖励
; 391  : 			for(WORD wIndex=0;wIndex<pMatchRankList->wUserCount;wIndex++)

  00622	33 c0		 xor	 eax, eax
  00624	66 89 85 ec fd
	ff ff		 mov	 WORD PTR _wIndex$19[ebp], ax
  0062b	eb 12		 jmp	 SHORT $LN6@OnEventDat
$LN4@OnEventDat:
  0062d	66 8b 85 ec fd
	ff ff		 mov	 ax, WORD PTR _wIndex$19[ebp]
  00634	66 83 c0 01	 add	 ax, 1
  00638	66 89 85 ec fd
	ff ff		 mov	 WORD PTR _wIndex$19[ebp], ax
$LN6@OnEventDat:
  0063f	0f b7 85 ec fd
	ff ff		 movzx	 eax, WORD PTR _wIndex$19[ebp]
  00646	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR _pMatchRankList$22[ebp]
  0064c	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00650	3b c2		 cmp	 eax, edx
  00652	0f 8d 8a 00 00
	00		 jge	 $LN5@OnEventDat

; 392  : 			{
; 393  : 				//查找玩家
; 394  : 				pMatchRankInfo=&pMatchRankList->MatchRankInfo[wIndex];

  00658	0f b7 85 ec fd
	ff ff		 movzx	 eax, WORD PTR _wIndex$19[ebp]
  0065f	6b c8 28	 imul	 ecx, eax, 40
  00662	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _pMatchRankList$22[ebp]
  00668	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  0066c	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _pMatchRankInfo$20[ebp], eax

; 395  : 				pIRewardUserItem=m_pIServerUserManager->SearchUserItem(pMatchRankInfo->dwUserID);

  00672	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _pMatchRankInfo$20[ebp]
  00678	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0067b	51		 push	 ecx
  0067c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0067f	8b 82 e4 01 00
	00		 mov	 eax, DWORD PTR [edx+484]
  00685	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00688	8b 10		 mov	 edx, DWORD PTR [eax]
  0068a	8b 89 e4 01 00
	00		 mov	 ecx, DWORD PTR [ecx+484]
  00690	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00693	ff d0		 call	 eax
  00695	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _pIRewardUserItem$21[ebp], eax

; 396  : 				if(pIRewardUserItem==NULL || pIRewardUserItem->IsAndroidUser()==true) continue;

  0069b	83 bd f4 fd ff
	ff 00		 cmp	 DWORD PTR _pIRewardUserItem$21[ebp], 0
  006a2	74 1e		 je	 SHORT $LN42@OnEventDat
  006a4	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _pIRewardUserItem$21[ebp]
  006aa	8b 10		 mov	 edx, DWORD PTR [eax]
  006ac	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _pIRewardUserItem$21[ebp]
  006b2	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  006b8	ff d0		 call	 eax
  006ba	0f b6 c8	 movzx	 ecx, al
  006bd	83 f9 01	 cmp	 ecx, 1
  006c0	75 05		 jne	 SHORT $LN41@OnEventDat
$LN42@OnEventDat:
  006c2	e9 66 ff ff ff	 jmp	 $LN4@OnEventDat
$LN41@OnEventDat:

; 397  : 
; 398  : 				//写入奖励
; 399  : 				WriteUserAward(pIRewardUserItem,pMatchRankInfo);

  006c7	8b 85 f0 fd ff
	ff		 mov	 eax, DWORD PTR _pMatchRankInfo$20[ebp]
  006cd	50		 push	 eax
  006ce	8b 8d f4 fd ff
	ff		 mov	 ecx, DWORD PTR _pIRewardUserItem$21[ebp]
  006d4	51		 push	 ecx
  006d5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  006d8	e8 00 00 00 00	 call	 ?WriteUserAward@CImmediateMatch@@AAE_NPAUIServerUserItem@@PAUtagMatchRankInfo@@@Z ; CImmediateMatch::WriteUserAward

; 400  : 			}

  006dd	e9 4b ff ff ff	 jmp	 $LN4@OnEventDat
$LN5@OnEventDat:

; 401  : 
; 402  : 			//变量定义
; 403  : 			CImmediateGroup * pImmediateGroup=NULL;

  006e2	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pImmediateGroup$18[ebp], 0

; 404  : 
; 405  : 			//查找分组
; 406  : 			for (int i=0;i<m_MatchGroup.GetCount();i++)

  006ec	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$17[ebp], 0
  006f6	eb 0f		 jmp	 SHORT $LN9@OnEventDat
$LN7@OnEventDat:
  006f8	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  006fe	83 c0 01	 add	 eax, 1
  00701	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _i$17[ebp], eax
$LN9@OnEventDat:
  00707	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0070a	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0070d	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  00712	39 85 e4 fd ff
	ff		 cmp	 DWORD PTR _i$17[ebp], eax
  00718	0f 8d a3 04 00
	00		 jge	 $LN8@OnEventDat

; 407  : 			{
; 408  : 				if(m_MatchGroup[i]->m_lMatchNo==pMatchRankList->lMatchNo)

  0071e	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  00724	50		 push	 eax
  00725	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00728	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0072b	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  00730	8b 08		 mov	 ecx, DWORD PTR [eax]
  00732	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _pMatchRankList$22[ebp]
  00738	89 8d 24 fd ff
	ff		 mov	 DWORD PTR tv957[ebp], ecx
  0073e	89 95 20 fd ff
	ff		 mov	 DWORD PTR tv958[ebp], edx
  00744	8b 85 24 fd ff
	ff		 mov	 eax, DWORD PTR tv957[ebp]
  0074a	8b 8d 20 fd ff
	ff		 mov	 ecx, DWORD PTR tv958[ebp]
  00750	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00753	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00756	0f 85 60 04 00
	00		 jne	 $LN43@OnEventDat
  0075c	8b 85 24 fd ff
	ff		 mov	 eax, DWORD PTR tv957[ebp]
  00762	8b 8d 20 fd ff
	ff		 mov	 ecx, DWORD PTR tv958[ebp]
  00768	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0076b	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  0076e	0f 85 48 04 00
	00		 jne	 $LN43@OnEventDat

; 409  : 				{
; 410  : 					pImmediateGroup=m_MatchGroup[i];

  00774	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  0077a	50		 push	 eax
  0077b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0077e	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00781	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  00786	8b 08		 mov	 ecx, DWORD PTR [eax]
  00788	89 8d e8 fd ff
	ff		 mov	 DWORD PTR _pImmediateGroup$18[ebp], ecx

; 411  : 
; 412  : 					if(pImmediateGroup!=NULL)

  0078e	83 bd e8 fd ff
	ff 00		 cmp	 DWORD PTR _pImmediateGroup$18[ebp], 0
  00795	0f 84 f9 03 00
	00		 je	 $LN44@OnEventDat

; 413  : 					{
; 414  : 						//全部起立
; 415  : 						pImmediateGroup->PerformAllUserStandUp();

  0079b	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  007a1	e8 00 00 00 00	 call	 ?PerformAllUserStandUp@CImmediateGroup@@IAEXXZ ; CImmediateGroup::PerformAllUserStandUp

; 416  : 
; 417  : 						//发送状态
; 418  : 						BYTE cbMatchStatus=MS_FREE;

  007a6	c6 85 e3 fd ff
	ff 00		 mov	 BYTE PTR _cbMatchStatus$16[ebp], 0

; 419  : 						SendGroupData (MDM_GR_MATCH,SUB_GR_MATCH_STATUS,&cbMatchStatus,sizeof(cbMatchStatus),pImmediateGroup);

  007ad	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _pImmediateGroup$18[ebp]
  007b3	50		 push	 eax
  007b4	6a 01		 push	 1
  007b6	8d 8d e3 fd ff
	ff		 lea	 ecx, DWORD PTR _cbMatchStatus$16[ebp]
  007bc	51		 push	 ecx
  007bd	6a 0a		 push	 10			; 0000000aH
  007bf	6a 0a		 push	 10			; 0000000aH
  007c1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  007c4	83 c1 04	 add	 ecx, 4
  007c7	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  007ca	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  007cd	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  007d0	ff d2		 call	 edx

; 420  : 
; 421  : 						//还原编号
; 422  : 						m_LoopTimer.Add(pImmediateGroup->m_LoopTimer);

  007d2	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _pImmediateGroup$18[ebp]
  007d8	83 c0 19	 add	 eax, 25			; 00000019H
  007db	50		 push	 eax
  007dc	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  007df	83 c1 38	 add	 ecx, 56			; 00000038H
  007e2	e8 00 00 00 00	 call	 ?Add@?$CWHArray@EABE@@QAEHABE@Z ; CWHArray<unsigned char,unsigned char const &>::Add

; 423  : 
; 424  : 						//参赛玩家退赛
; 425  : 						POSITION pos=pImmediateGroup->m_OnMatchUserMap.GetStartPosition();

  007e7	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  007ed	83 c1 38	 add	 ecx, 56			; 00000038H
  007f0	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition
  007f5	89 85 dc fd ff
	ff		 mov	 DWORD PTR _pos$15[ebp], eax

; 426  : 						IServerUserItem *pITempUserItem=NULL;

  007fb	c7 85 d8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pITempUserItem$14[ebp], 0

; 427  : 						DWORD dwUserID=0;

  00805	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwUserID$13[ebp], 0

; 428  : 						WORD wQuitUserCount=0;

  0080f	33 c0		 xor	 eax, eax
  00811	66 89 85 d0 fd
	ff ff		 mov	 WORD PTR _wQuitUserCount$12[ebp], ax

; 429  : 						WORD wMatchUserCount=(WORD)pImmediateGroup->m_OnMatchUserMap.GetCount();

  00818	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  0081e	83 c1 38	 add	 ecx, 56			; 00000038H
  00821	e8 00 00 00 00	 call	 ?GetCount@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEHXZ ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetCount
  00826	66 89 85 cc fd
	ff ff		 mov	 WORD PTR _wMatchUserCount$11[ebp], ax
$LN10@OnEventDat:

; 430  : 						while(pos!=NULL)

  0082d	83 bd dc fd ff
	ff 00		 cmp	 DWORD PTR _pos$15[ebp], 0
  00834	0f 84 4b 02 00
	00		 je	 $LN11@OnEventDat

; 431  : 						{
; 432  : 							pImmediateGroup->m_OnMatchUserMap.GetNextAssoc(pos,dwUserID, pITempUserItem);

  0083a	8d 85 d8 fd ff
	ff		 lea	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00840	50		 push	 eax
  00841	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _dwUserID$13[ebp]
  00847	51		 push	 ecx
  00848	8d 95 dc fd ff
	ff		 lea	 edx, DWORD PTR _pos$15[ebp]
  0084e	52		 push	 edx
  0084f	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  00855	83 c1 38	 add	 ecx, 56			; 00000038H
  00858	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc

; 433  : 							if (pITempUserItem!=NULL)

  0085d	83 bd d8 fd ff
	ff 00		 cmp	 DWORD PTR _pITempUserItem$14[ebp], 0
  00864	0f 84 16 02 00
	00		 je	 $LN45@OnEventDat

; 434  : 							{
; 435  : 								pITempUserItem->SetUserMatchStatus(MUS_NULL);

  0086a	6a 00		 push	 0
  0086c	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00872	8b 10		 mov	 edx, DWORD PTR [eax]
  00874	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  0087a	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  00880	ff d0		 call	 eax

; 436  : 								if (true==OnEventUserQuitMatch(pITempUserItem,UNSIGNUP_REASON_PLAYER))

  00882	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00887	6a 00		 push	 0
  00889	6a 00		 push	 0
  0088b	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00891	50		 push	 eax
  00892	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00895	8b 11		 mov	 edx, DWORD PTR [ecx]
  00897	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0089a	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0089d	ff d0		 call	 eax
  0089f	0f b6 c8	 movzx	 ecx, al
  008a2	83 f9 01	 cmp	 ecx, 1
  008a5	75 12		 jne	 SHORT $LN46@OnEventDat

; 437  : 									wQuitUserCount++;

  008a7	66 8b 85 d0 fd
	ff ff		 mov	 ax, WORD PTR _wQuitUserCount$12[ebp]
  008ae	66 83 c0 01	 add	 ax, 1
  008b2	66 89 85 d0 fd
	ff ff		 mov	 WORD PTR _wQuitUserCount$12[ebp], ax
$LN46@OnEventDat:

; 438  : 
; 439  : 								//比赛结束后代打玩家未返回，则踢出房间
; 440  : 								bool bAndroidUser=pITempUserItem->IsAndroidUser();

  008b9	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  008bf	8b 10		 mov	 edx, DWORD PTR [eax]
  008c1	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  008c7	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  008cd	ff d0		 call	 eax
  008cf	88 85 cb fd ff
	ff		 mov	 BYTE PTR _bAndroidUser$10[ebp], al

; 441  : 								bool bTrusteeUser=pITempUserItem->IsTrusteeUser();

  008d5	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  008db	8b 10		 mov	 edx, DWORD PTR [eax]
  008dd	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  008e3	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  008e9	ff d0		 call	 eax
  008eb	88 85 ca fd ff
	ff		 mov	 BYTE PTR _bTrusteeUser$9[ebp], al

; 442  : 								if (bAndroidUser==false && bTrusteeUser==true)

  008f1	0f b6 85 cb fd
	ff ff		 movzx	 eax, BYTE PTR _bAndroidUser$10[ebp]
  008f8	85 c0		 test	 eax, eax
  008fa	0f 85 80 01 00
	00		 jne	 $LN45@OnEventDat
  00900	0f b6 85 ca fd
	ff ff		 movzx	 eax, BYTE PTR _bTrusteeUser$9[ebp]
  00907	83 f8 01	 cmp	 eax, 1
  0090a	0f 85 70 01 00
	00		 jne	 $LN45@OnEventDat

; 443  : 								{
; 444  : 									//离开桌子
; 445  : 									WORD wTableID=pITempUserItem->GetTableID();

  00910	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00916	8b 10		 mov	 edx, DWORD PTR [eax]
  00918	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  0091e	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00921	ff d0		 call	 eax
  00923	66 89 85 c4 fd
	ff ff		 mov	 WORD PTR _wTableID$8[ebp], ax

; 446  : 									if (wTableID!=INVALID_TABLE)

  0092a	0f b7 85 c4 fd
	ff ff		 movzx	 eax, WORD PTR _wTableID$8[ebp]
  00931	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00936	0f 84 04 01 00
	00		 je	 $LN48@OnEventDat

; 447  : 									{
; 448  : 										//状态判断
; 449  : 										ASSERT (pITempUserItem->GetUserStatus()!=US_PLAYING);

  0093c	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00942	8b 10		 mov	 edx, DWORD PTR [eax]
  00944	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  0094a	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0094d	ff d0		 call	 eax
  0094f	0f b6 c8	 movzx	 ecx, al
  00952	83 f9 05	 cmp	 ecx, 5
  00955	75 1c		 jne	 SHORT $LN59@OnEventDat
  00957	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
  0095d	81 c2 e3 00 00
	00		 add	 edx, 227		; 000000e3H
  00963	52		 push	 edx
  00964	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00969	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0096e	85 c0		 test	 eax, eax
  00970	74 01		 je	 SHORT $LN59@OnEventDat
  00972	cc		 int	 3
$LN59@OnEventDat:

; 450  : 										SendGameMessage(pITempUserItem,TEXT(""),SMT_CLOSE_GAME);

  00973	68 00 02 00 00	 push	 512			; 00000200H
  00978	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0097d	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00983	50		 push	 eax
  00984	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00987	83 c1 04	 add	 ecx, 4
  0098a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0098d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00990	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00993	ff d2		 call	 edx

; 451  : 										
; 452  : 										//查找桌子并弹起
; 453  : 										for(int m=0;m<pImmediateGroup->m_MatchTableArray.GetCount();m++)

  00995	c7 85 c0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$7[ebp], 0
  0099f	eb 0f		 jmp	 SHORT $LN14@OnEventDat
$LN12@OnEventDat:
  009a1	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _m$7[ebp]
  009a7	83 c0 01	 add	 eax, 1
  009aa	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _m$7[ebp], eax
$LN14@OnEventDat:
  009b0	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  009b6	83 c1 68	 add	 ecx, 104		; 00000068H
  009b9	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount
  009be	39 85 c0 fd ff
	ff		 cmp	 DWORD PTR _m$7[ebp], eax
  009c4	7d 7a		 jge	 SHORT $LN48@OnEventDat

; 454  : 										{
; 455  : 											if(pITempUserItem->GetTableID()==pImmediateGroup->m_MatchTableArray[m]->wTableID)

  009c6	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  009cc	8b 10		 mov	 edx, DWORD PTR [eax]
  009ce	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  009d4	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  009d7	ff d0		 call	 eax
  009d9	0f b7 f0	 movzx	 esi, ax
  009dc	8b 8d c0 fd ff
	ff		 mov	 ecx, DWORD PTR _m$7[ebp]
  009e2	51		 push	 ecx
  009e3	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  009e9	83 c1 68	 add	 ecx, 104		; 00000068H
  009ec	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[]
  009f1	8b 10		 mov	 edx, DWORD PTR [eax]
  009f3	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  009f7	3b f0		 cmp	 esi, eax
  009f9	75 40		 jne	 SHORT $LN49@OnEventDat

; 456  : 											{
; 457  : 												pImmediateGroup->m_MatchTableArray[m]->pTableFrame->PerformStandUpAction(pITempUserItem);

  009fb	8b 85 c0 fd ff
	ff		 mov	 eax, DWORD PTR _m$7[ebp]
  00a01	50		 push	 eax
  00a02	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  00a08	83 c1 68	 add	 ecx, 104		; 00000068H
  00a0b	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[]
  00a10	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a12	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a14	89 95 24 fd ff
	ff		 mov	 DWORD PTR tv587[ebp], edx
  00a1a	6a 00		 push	 0
  00a1c	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00a22	50		 push	 eax
  00a23	8b 8d 24 fd ff
	ff		 mov	 ecx, DWORD PTR tv587[ebp]
  00a29	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a2b	8b 8d 24 fd ff
	ff		 mov	 ecx, DWORD PTR tv587[ebp]
  00a31	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  00a37	ff d0		 call	 eax

; 458  : 												break;

  00a39	eb 05		 jmp	 SHORT $LN48@OnEventDat
$LN49@OnEventDat:

; 459  : 											}
; 460  : 										}

  00a3b	e9 61 ff ff ff	 jmp	 $LN12@OnEventDat
$LN48@OnEventDat:

; 461  : 									}
; 462  : 
; 463  : 									//离开房间
; 464  : 									if (pITempUserItem->GetBindIndex()==INVALID_WORD)

  00a40	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00a46	8b 10		 mov	 edx, DWORD PTR [eax]
  00a48	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  00a4e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00a51	ff d0		 call	 eax
  00a53	0f b7 c8	 movzx	 ecx, ax
  00a56	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  00a5c	75 22		 jne	 SHORT $LN45@OnEventDat

; 465  : 									{
; 466  : 										pITempUserItem->SetUserStatus(US_NULL,INVALID_TABLE,INVALID_CHAIR);

  00a5e	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00a63	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00a68	6a 00		 push	 0
  00a6a	8b 85 d8 fd ff
	ff		 mov	 eax, DWORD PTR _pITempUserItem$14[ebp]
  00a70	8b 10		 mov	 edx, DWORD PTR [eax]
  00a72	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR _pITempUserItem$14[ebp]
  00a78	8b 82 fc 00 00
	00		 mov	 eax, DWORD PTR [edx+252]
  00a7e	ff d0		 call	 eax
$LN45@OnEventDat:

; 467  : 									}
; 468  : 								}
; 469  : 							}
; 470  : 						}

  00a80	e9 a8 fd ff ff	 jmp	 $LN10@OnEventDat
$LN11@OnEventDat:

; 471  : 						
; 472  : 						//校验退赛结果
; 473  : 						ASSERT(wQuitUserCount==wMatchUserCount);

  00a85	0f b7 85 d0 fd
	ff ff		 movzx	 eax, WORD PTR _wQuitUserCount$12[ebp]
  00a8c	0f b7 8d cc fd
	ff ff		 movzx	 ecx, WORD PTR _wMatchUserCount$11[ebp]
  00a93	3b c1		 cmp	 eax, ecx
  00a95	74 1c		 je	 SHORT $LN60@OnEventDat
  00a97	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
  00a9d	81 c2 fb 00 00
	00		 add	 edx, 251		; 000000fbH
  00aa3	52		 push	 edx
  00aa4	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00aa9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00aae	85 c0		 test	 eax, eax
  00ab0	74 01		 je	 SHORT $LN60@OnEventDat
  00ab2	cc		 int	 3
$LN60@OnEventDat:

; 474  : 						if (wQuitUserCount!=wMatchUserCount)

  00ab3	0f b7 85 d0 fd
	ff ff		 movzx	 eax, WORD PTR _wQuitUserCount$12[ebp]
  00aba	0f b7 8d cc fd
	ff ff		 movzx	 ecx, WORD PTR _wMatchUserCount$11[ebp]
  00ac1	3b c1		 cmp	 eax, ecx
  00ac3	74 10		 je	 SHORT $LN51@OnEventDat

; 475  : 						{
; 476  : 							CTraceService::TraceString(TEXT("比赛结束后，退赛人数异常"),TraceLevel_Exception);

  00ac5	6a 03		 push	 3
  00ac7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LHKLICON@?$LB?H?H?$PM?$LN?a?J?x?$LK?s?$KD?$KM?M?K?H?$PM?H?K?J?$PN?R?l?$LD?$KD@
  00acc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TraceString@CTraceService@@SA_NPBDW4enTraceLevel@@@Z
  00ad2	83 c4 08	 add	 esp, 8
$LN51@OnEventDat:

; 477  : 						}
; 478  : 
; 479  : 						//回收全部桌子
; 480  : 						for (int j=0;pImmediateGroup->m_MatchTableArray.GetCount();)

  00ad5	c7 85 bc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$6[ebp], 0
$LN17@OnEventDat:
  00adf	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  00ae5	83 c1 68	 add	 ecx, 104		; 00000068H
  00ae8	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount
  00aed	85 c0		 test	 eax, eax
  00aef	0f 84 9f 00 00
	00		 je	 $LN44@OnEventDat

; 481  : 						{
; 482  : 							tagTableFrameInfo* pTempTable=pImmediateGroup->m_MatchTableArray[j];

  00af5	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _j$6[ebp]
  00afb	50		 push	 eax
  00afc	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  00b02	83 c1 68	 add	 ecx, 104		; 00000068H
  00b05	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[]
  00b0a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b0c	89 8d b8 fd ff
	ff		 mov	 DWORD PTR _pTempTable$5[ebp], ecx

; 483  : 							pImmediateGroup->m_MatchTableArray.RemoveAt(j);

  00b12	6a 01		 push	 1
  00b14	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _j$6[ebp]
  00b1a	50		 push	 eax
  00b1b	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _pImmediateGroup$18[ebp]
  00b21	83 c1 68	 add	 ecx, 104		; 00000068H
  00b24	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::RemoveAt

; 484  : 							SafeDelete(pTempTable);

  00b29	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00b30	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _pTempTable$5[ebp]
  00b36	89 85 28 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00b3c	6a 18		 push	 24			; 00000018H
  00b3e	8b 8d 28 fd ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00b44	51		 push	 ecx
  00b45	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00b4a	83 c4 08	 add	 esp, 8
  00b4d	eb 26		 jmp	 SHORT $LN62@OnEventDat
__catch$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z$0:
  00b4f	33 c0		 xor	 eax, eax
  00b51	75 1c		 jne	 SHORT $LN61@OnEventDat
  00b53	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z@4JA
  00b59	81 c1 06 01 00
	00		 add	 ecx, 262		; 00000106H
  00b5f	51		 push	 ecx
  00b60	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00b65	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00b6a	85 c0		 test	 eax, eax
  00b6c	74 01		 je	 SHORT $LN61@OnEventDat
  00b6e	cc		 int	 3
$LN61@OnEventDat:
  00b6f	b8 00 00 00 00	 mov	 eax, $LN65@OnEventDat
  00b74	c3		 ret	 0
$LN62@OnEventDat:
  00b75	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00b7c	eb 07		 jmp	 SHORT __tryend$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z$1
$LN65@OnEventDat:
  00b7e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z$1:
  00b85	c7 85 b8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _pTempTable$5[ebp], 0

; 485  : 						}

  00b8f	e9 4b ff ff ff	 jmp	 $LN17@OnEventDat
$LN44@OnEventDat:

; 486  : 					}
; 487  : 					//移除对象
; 488  : 					m_MatchGroup.RemoveAt(i);

  00b94	6a 01		 push	 1
  00b96	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  00b9c	50		 push	 eax
  00b9d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba0	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00ba3	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAt

; 489  : 					m_OverMatchGroup.Add(pImmediateGroup);

  00ba8	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _pImmediateGroup$18[ebp]
  00bae	50		 push	 eax
  00baf	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00bb2	83 c1 60	 add	 ecx, 96			; 00000060H
  00bb5	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABQAVCImmediateGroup@@@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Add

; 490  : 
; 491  : 					break;

  00bba	eb 05		 jmp	 SHORT $LN8@OnEventDat
$LN43@OnEventDat:

; 492  : 				}
; 493  : 			}

  00bbc	e9 37 fb ff ff	 jmp	 $LN7@OnEventDat
$LN8@OnEventDat:

; 494  : 
; 495  : 
; 496  : 			break;

  00bc1	eb 68		 jmp	 SHORT $LN2@OnEventDat
$LN53@OnEventDat:

; 497  : 		}
; 498  : 	case DBO_GR_MATCH_REWARD_RESULT:		//奖励结果
; 499  : 		{
; 500  : 			//参数效验
; 501  : 			if(pIServerUserItem==NULL) return true;

  00bc3	83 7d 0c 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00bc7	75 04		 jne	 SHORT $LN54@OnEventDat
  00bc9	b0 01		 mov	 al, 1
  00bcb	eb 60		 jmp	 SHORT $LN1@OnEventDat
$LN54@OnEventDat:

; 502  : 			if(wDataSize>sizeof(DBO_GR_MatchRewardResult)) return false;

  00bcd	0f b7 45 14	 movzx	 eax, WORD PTR _wDataSize$[ebp]
  00bd1	83 f8 10	 cmp	 eax, 16			; 00000010H
  00bd4	76 04		 jbe	 SHORT $LN55@OnEventDat
  00bd6	32 c0		 xor	 al, al
  00bd8	eb 53		 jmp	 SHORT $LN1@OnEventDat
$LN55@OnEventDat:

; 503  : 
; 504  : 			//提取数据
; 505  : 			DBO_GR_MatchRewardResult * pMatchRewardResult = (DBO_GR_MatchRewardResult*)pData;

  00bda	8b 45 10	 mov	 eax, DWORD PTR _pData$[ebp]
  00bdd	89 85 b4 fd ff
	ff		 mov	 DWORD PTR _pMatchRewardResult$4[ebp], eax

; 506  : 
; 507  : 			//奖励成功
; 508  : 			if(pMatchRewardResult->bResultCode==true)

  00be3	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _pMatchRewardResult$4[ebp]
  00be9	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00bec	83 f9 01	 cmp	 ecx, 1
  00bef	75 3a		 jne	 SHORT $LN2@OnEventDat

; 509  : 			{
; 510  : 				//构造结构
; 511  : 				CMD_GR_MatchGoldUpdate MatchGoldUpdate;
; 512  : 
; 513  : 				//设置变量
; 514  : 				MatchGoldUpdate.lCurrGold=pMatchRewardResult->lCurrGold;

  00bf1	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR _pMatchRewardResult$4[ebp]
  00bf7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00bfa	89 8d ac fd ff
	ff		 mov	 DWORD PTR _MatchGoldUpdate$3[ebp], ecx
  00c00	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00c03	89 95 b0 fd ff
	ff		 mov	 DWORD PTR _MatchGoldUpdate$3[ebp+4], edx

; 515  : 
; 516  : 				//发送数据
; 517  : 				SendData(pIServerUserItem,MDM_GR_MATCH,SUB_GR_MATCH_GOLDUPDATE,&MatchGoldUpdate,sizeof(MatchGoldUpdate));

  00c09	6a 08		 push	 8
  00c0b	8d 85 ac fd ff
	ff		 lea	 eax, DWORD PTR _MatchGoldUpdate$3[ebp]
  00c11	50		 push	 eax
  00c12	6a 0d		 push	 13			; 0000000dH
  00c14	6a 0a		 push	 10			; 0000000aH
  00c16	8b 4d 0c	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  00c19	51		 push	 ecx
  00c1a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00c1d	83 c1 04	 add	 ecx, 4
  00c20	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00c23	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00c26	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00c29	ff d2		 call	 edx
$LN2@OnEventDat:

; 518  : 			}
; 519  : 
; 520  : 			break;
; 521  : 		}
; 522  : 	}
; 523  : 	return true;

  00c2b	b0 01		 mov	 al, 1
$LN1@OnEventDat:

; 524  : }

  00c2d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00c30	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c37	59		 pop	 ecx
  00c38	5f		 pop	 edi
  00c39	5e		 pop	 esi
  00c3a	5b		 pop	 ebx
  00c3b	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c3e	33 cd		 xor	 ecx, ebp
  00c40	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c45	8b e5		 mov	 esp, ebp
  00c47	5d		 pop	 ebp
  00c48	c2 14 00	 ret	 20			; 00000014H
  00c4b	90		 npad	 1
$LN70@OnEventDat:
  00c4c	00 00 00 00	 DD	 $LN18@OnEventDat
  00c50	00 00 00 00	 DD	 $LN28@OnEventDat
  00c54	00 00 00 00	 DD	 $LN2@OnEventDat
  00c58	00 00 00 00	 DD	 $LN2@OnEventDat
  00c5c	00 00 00 00	 DD	 $LN2@OnEventDat
  00c60	00 00 00 00	 DD	 $LN2@OnEventDat
  00c64	00 00 00 00	 DD	 $LN39@OnEventDat
  00c68	00 00 00 00	 DD	 $LN53@OnEventDat
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c fd ff
	ff		 mov	 ecx, DWORD PTR [edx-740]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnEventDataBase@CImmediateMatch@@UAE_NGPAUIServerUserItem@@PAXGK@Z ENDP ; CImmediateMatch::OnEventDataBase
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnEventTimer@CImmediateMatch@@UAE_NKI@Z
_TEXT	SEGMENT
tv160 = -112						; size = 4
tv152 = -112						; size = 4
tv85 = -112						; size = 4
$T2 = -108						; size = 4
$T3 = -104						; size = 4
_pOverMatch$4 = -36					; size = 4
_i$5 = -32						; size = 4
_i$6 = -28						; size = 4
_i$7 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_dwTimerID$ = 8						; size = 4
_dwBindParameter$ = 12					; size = 4
?OnEventTimer@CImmediateMatch@@UAE_NKI@Z PROC		; CImmediateMatch::OnEventTimer, COMDAT
; _this$ = ecx

; 178  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 60	 sub	 esp, 96			; 00000060H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 179  : 	if(dwTimerID>=IDI_GROUP_TIMER_START)

  0002f	81 7d 08 d2 00
	00 00		 cmp	 DWORD PTR _dwTimerID$[ebp], 210 ; 000000d2H
  00036	0f 82 8d 00 00
	00		 jb	 $LN13@OnEventTim

; 180  : 	{
; 181  : 		for (INT_PTR i=m_MatchGroup.GetCount()-1;i>=0;i--)

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00042	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  00047	83 e8 01	 sub	 eax, 1
  0004a	89 45 e8	 mov	 DWORD PTR _i$7[ebp], eax
  0004d	eb 09		 jmp	 SHORT $LN4@OnEventTim
$LN2@OnEventTim:
  0004f	8b 45 e8	 mov	 eax, DWORD PTR _i$7[ebp]
  00052	83 e8 01	 sub	 eax, 1
  00055	89 45 e8	 mov	 DWORD PTR _i$7[ebp], eax
$LN4@OnEventTim:
  00058	83 7d e8 00	 cmp	 DWORD PTR _i$7[ebp], 0
  0005c	7c 64		 jl	 SHORT $LN3@OnEventTim

; 182  : 		{
; 183  : 			//查看是哪场比赛的定时器
; 184  : 			if (m_MatchGroup[i]->m_LoopTimer==((dwTimerID-IDI_GROUP_TIMER_START)/10))

  0005e	8b 45 e8	 mov	 eax, DWORD PTR _i$7[ebp]
  00061	50		 push	 eax
  00062	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00068	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	0f b6 49 19	 movzx	 ecx, BYTE PTR [ecx+25]
  00073	8b 45 08	 mov	 eax, DWORD PTR _dwTimerID$[ebp]
  00076	2d d2 00 00 00	 sub	 eax, 210		; 000000d2H
  0007b	33 d2		 xor	 edx, edx
  0007d	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  00082	f7 f6		 div	 esi
  00084	3b c8		 cmp	 ecx, eax
  00086	75 38		 jne	 SHORT $LN14@OnEventTim

; 185  : 			{
; 186  : 				m_MatchGroup[i]->OnTimeMessage(dwTimerID-(m_MatchGroup[i]->m_LoopTimer*10),dwBindParameter);

  00088	8b 45 0c	 mov	 eax, DWORD PTR _dwBindParameter$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR _i$7[ebp]
  0008f	51		 push	 ecx
  00090	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00096	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  0009b	8b 10		 mov	 edx, DWORD PTR [eax]
  0009d	0f b6 42 19	 movzx	 eax, BYTE PTR [edx+25]
  000a1	6b c8 0a	 imul	 ecx, eax, 10
  000a4	8b 55 08	 mov	 edx, DWORD PTR _dwTimerID$[ebp]
  000a7	2b d1		 sub	 edx, ecx
  000a9	52		 push	 edx
  000aa	8b 45 e8	 mov	 eax, DWORD PTR _i$7[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000b4	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  000b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bb	e8 00 00 00 00	 call	 ?OnTimeMessage@CImmediateGroup@@IAE_NKI@Z ; CImmediateGroup::OnTimeMessage
$LN14@OnEventTim:

; 187  : 			}
; 188  : 		}

  000c0	eb 8d		 jmp	 SHORT $LN2@OnEventTim
$LN3@OnEventTim:

; 189  : 		return true;

  000c2	b0 01		 mov	 al, 1
  000c4	e9 32 01 00 00	 jmp	 $LN1@OnEventTim
$LN13@OnEventTim:

; 190  : 	}
; 191  : 
; 192  : 	switch(dwTimerID)

  000c9	8b 45 08	 mov	 eax, DWORD PTR _dwTimerID$[ebp]
  000cc	89 45 90	 mov	 DWORD PTR tv85[ebp], eax
  000cf	81 7d 90 c9 00
	00 00		 cmp	 DWORD PTR tv85[ebp], 201 ; 000000c9H
  000d6	74 4f		 je	 SHORT $LN16@OnEventTim
  000d8	81 7d 90 ca 00
	00 00		 cmp	 DWORD PTR tv85[ebp], 202 ; 000000caH
  000df	74 05		 je	 SHORT $LN15@OnEventTim
  000e1	e9 13 01 00 00	 jmp	 $LN5@OnEventTim
$LN15@OnEventTim:

; 193  : 	{
; 194  : 	case IDI_CHECK_OVER_MATCH:
; 195  : 		{
; 196  : 			//定时检测一下 那些比赛人数不够被卡的问题
; 197  : 			for (INT_PTR i=m_MatchGroup.GetCount()-1;i>=0;i--)

  000e6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	83 c1 4c	 add	 ecx, 76			; 0000004cH
  000ec	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  000f1	83 e8 01	 sub	 eax, 1
  000f4	89 45 e4	 mov	 DWORD PTR _i$6[ebp], eax
  000f7	eb 09		 jmp	 SHORT $LN9@OnEventTim
$LN7@OnEventTim:
  000f9	8b 45 e4	 mov	 eax, DWORD PTR _i$6[ebp]
  000fc	83 e8 01	 sub	 eax, 1
  000ff	89 45 e4	 mov	 DWORD PTR _i$6[ebp], eax
$LN9@OnEventTim:
  00102	83 7d e4 00	 cmp	 DWORD PTR _i$6[ebp], 0
  00106	7c 18		 jl	 SHORT $LN8@OnEventTim

; 198  : 			{
; 199  : 				//参赛用户小于椅子数量 就要结束
; 200  : 				m_MatchGroup[i]->CheckMatchUser();

  00108	8b 45 e4	 mov	 eax, DWORD PTR _i$6[ebp]
  0010b	50		 push	 eax
  0010c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00112	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  00117	8b 08		 mov	 ecx, DWORD PTR [eax]
  00119	e8 00 00 00 00	 call	 ?CheckMatchUser@CImmediateGroup@@IAE_NXZ ; CImmediateGroup::CheckMatchUser

; 201  : 			}

  0011e	eb d9		 jmp	 SHORT $LN7@OnEventTim
$LN8@OnEventTim:

; 202  : 			return true;

  00120	b0 01		 mov	 al, 1
  00122	e9 d4 00 00 00	 jmp	 $LN1@OnEventTim
$LN16@OnEventTim:

; 203  : 		}
; 204  : 	case IDI_DELETE_OVER_MATCH:
; 205  : 		{
; 206  : 			for (int i=0;m_OverMatchGroup.GetCount();i++)

  00127	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  0012e	eb 09		 jmp	 SHORT $LN12@OnEventTim
$LN10@OnEventTim:
  00130	8b 45 e0	 mov	 eax, DWORD PTR _i$5[ebp]
  00133	83 c0 01	 add	 eax, 1
  00136	89 45 e0	 mov	 DWORD PTR _i$5[ebp], eax
$LN12@OnEventTim:
  00139	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	83 c1 60	 add	 ecx, 96			; 00000060H
  0013f	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  00144	85 c0		 test	 eax, eax
  00146	0f 84 a9 00 00
	00		 je	 $LN11@OnEventTim

; 207  : 			{
; 208  : 				CImmediateGroup * pOverMatch=m_OverMatchGroup[i];

  0014c	8b 45 e0	 mov	 eax, DWORD PTR _i$5[ebp]
  0014f	50		 push	 eax
  00150	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	83 c1 60	 add	 ecx, 96			; 00000060H
  00156	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 4d dc	 mov	 DWORD PTR _pOverMatch$4[ebp], ecx

; 209  : 				m_OverMatchGroup.RemoveAt(i--);

  00160	8b 45 e0	 mov	 eax, DWORD PTR _i$5[ebp]
  00163	89 45 90	 mov	 DWORD PTR tv152[ebp], eax
  00166	8b 4d e0	 mov	 ecx, DWORD PTR _i$5[ebp]
  00169	83 e9 01	 sub	 ecx, 1
  0016c	89 4d e0	 mov	 DWORD PTR _i$5[ebp], ecx
  0016f	6a 01		 push	 1
  00171	8b 55 90	 mov	 edx, DWORD PTR tv152[ebp]
  00174	52		 push	 edx
  00175	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00178	83 c1 60	 add	 ecx, 96			; 00000060H
  0017b	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAt

; 210  : 				SafeDelete(pOverMatch);

  00180	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00187	8b 45 dc	 mov	 eax, DWORD PTR _pOverMatch$4[ebp]
  0018a	89 45 94	 mov	 DWORD PTR $T2[ebp], eax
  0018d	8b 4d 94	 mov	 ecx, DWORD PTR $T2[ebp]
  00190	89 4d 98	 mov	 DWORD PTR $T3[ebp], ecx
  00193	83 7d 98 00	 cmp	 DWORD PTR $T3[ebp], 0
  00197	74 14		 je	 SHORT $LN19@OnEventTim
  00199	6a 01		 push	 1
  0019b	8b 55 98	 mov	 edx, DWORD PTR $T3[ebp]
  0019e	8b 02		 mov	 eax, DWORD PTR [edx]
  001a0	8b 4d 98	 mov	 ecx, DWORD PTR $T3[ebp]
  001a3	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  001a6	ff d2		 call	 edx
  001a8	89 45 90	 mov	 DWORD PTR tv160[ebp], eax
  001ab	eb 07		 jmp	 SHORT $LN20@OnEventTim
$LN19@OnEventTim:
  001ad	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN20@OnEventTim:
  001b4	eb 23		 jmp	 SHORT $LN22@OnEventTim
__catch$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z$0:
  001b6	33 c0		 xor	 eax, eax
  001b8	75 19		 jne	 SHORT $LN21@OnEventTim
  001ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??OnEventTimer@CImmediateMatch@@UAE_NKI@Z@4JA
  001c0	83 c1 20	 add	 ecx, 32			; 00000020H
  001c3	51		 push	 ecx
  001c4	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  001c9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001ce	85 c0		 test	 eax, eax
  001d0	74 01		 je	 SHORT $LN21@OnEventTim
  001d2	cc		 int	 3
$LN21@OnEventTim:
  001d3	b8 00 00 00 00	 mov	 eax, $LN25@OnEventTim
  001d8	c3		 ret	 0
$LN22@OnEventTim:
  001d9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001e0	eb 07		 jmp	 SHORT __tryend$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z$1
$LN25@OnEventTim:
  001e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z$1:
  001e9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pOverMatch$4[ebp], 0

; 211  : 			}

  001f0	e9 3b ff ff ff	 jmp	 $LN10@OnEventTim
$LN11@OnEventTim:

; 212  : 			return true;

  001f5	b0 01		 mov	 al, 1
  001f7	eb 02		 jmp	 SHORT $LN1@OnEventTim
$LN5@OnEventTim:

; 213  : 		}
; 214  : 	}
; 215  : 
; 216  : 	return true;

  001f9	b0 01		 mov	 al, 1
$LN1@OnEventTim:

; 217  : }

  001fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00205	59		 pop	 ecx
  00206	5f		 pop	 edi
  00207	5e		 pop	 esi
  00208	5b		 pop	 ebx
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnEventTimer@CImmediateMatch@@UAE_NKI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnEventTimer@CImmediateMatch@@UAE_NKI@Z ENDP		; CImmediateMatch::OnEventTimer
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
_MatchManagerParameter$ = 8				; size = 4
?InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z PROC ; CImmediateMatch::InitMatchInterface, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 123  : 	//服务配置
; 124  : 	m_pMatchOption=MatchManagerParameter.pGameMatchOption;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	89 90 c0 01 00
	00		 mov	 DWORD PTR [eax+448], edx

; 125  : 	m_pGameServiceOption=MatchManagerParameter.pGameServiceOption;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00020	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00023	89 90 c8 01 00
	00		 mov	 DWORD PTR [eax+456], edx

; 126  : 	m_pGameServiceAttrib=MatchManagerParameter.pGameServiceAttrib;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  0002f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00032	89 90 cc 01 00
	00		 mov	 DWORD PTR [eax+460], edx

; 127  : 
; 128  : 	//内核组件
; 129  : 	m_pITimerEngine=MatchManagerParameter.pITimerEngine;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  0003e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00041	89 90 d4 01 00
	00		 mov	 DWORD PTR [eax+468], edx

; 130  : 	m_pIDataBaseEngine=MatchManagerParameter.pICorrespondManager;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  0004d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00050	89 90 d8 01 00
	00		 mov	 DWORD PTR [eax+472], edx

; 131  : 	m_pITCPNetworkEngineEvent=MatchManagerParameter.pTCPNetworkEngine;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  0005c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005f	89 90 dc 01 00
	00		 mov	 DWORD PTR [eax+476], edx

; 132  : 
; 133  : 	//服务组件		
; 134  : 	m_pIGameServiceFrame=MatchManagerParameter.pIMainServiceFrame;		

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0006e	89 90 e0 01 00
	00		 mov	 DWORD PTR [eax+480], edx

; 135  : 	m_pIServerUserManager=MatchManagerParameter.pIServerUserManager;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  0007a	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0007d	89 90 e4 01 00
	00		 mov	 DWORD PTR [eax+484], edx

; 136  : 	m_pAndroidUserManager=MatchManagerParameter.pIAndroidUserManager;

  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00089	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0008c	89 90 e8 01 00
	00		 mov	 DWORD PTR [eax+488], edx

; 137  : 	m_pIServerUserItemSink=MatchManagerParameter.pIServerUserItemSink;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _MatchManagerParameter$[ebp]
  00098	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0009b	89 90 ec 01 00
	00		 mov	 DWORD PTR [eax+492], edx

; 138  : 
; 139  : 	//比赛规则
; 140  : 	m_pImmediateMatch=(tagImmediateMatch *)m_pMatchOption->cbMatchRule;

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000aa	83 c1 7e	 add	 ecx, 126		; 0000007eH
  000ad	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b0	89 8a c4 01 00
	00		 mov	 DWORD PTR [edx+452], ecx

; 141  : 
; 142  : 	//调整人数
; 143  : 	if (m_pMatchOption->wMaxPartakeGameUser<2) 

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000bf	0f b7 51 7c	 movzx	 edx, WORD PTR [ecx+124]
  000c3	83 fa 02	 cmp	 edx, 2
  000c6	7d 1a		 jge	 SHORT $LN2@InitMatchI

; 144  : 	{
; 145  : 		m_pMatchOption->wMaxPartakeGameUser=m_pGameServiceAttrib->wChairCount;

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  000d1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d4	8b 82 c0 01 00
	00		 mov	 eax, DWORD PTR [edx+448]
  000da	66 8b 49 02	 mov	 cx, WORD PTR [ecx+2]
  000de	66 89 48 7c	 mov	 WORD PTR [eax+124], cx
$LN2@InitMatchI:

; 146  : 	}
; 147  : 
; 148  : 	//调整人数
; 149  : 	if (m_pMatchOption->wMaxPartakeGameUser>m_pGameServiceAttrib->wChairCount)

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  000eb	0f b7 51 7c	 movzx	 edx, WORD PTR [ecx+124]
  000ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  000f8	0f b7 41 02	 movzx	 eax, WORD PTR [ecx+2]
  000fc	3b d0		 cmp	 edx, eax
  000fe	7e 1a		 jle	 SHORT $LN3@InitMatchI

; 150  : 	{
; 151  : 		m_pMatchOption->wMaxPartakeGameUser=m_pGameServiceAttrib->wChairCount;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  00109	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010c	8b 82 c0 01 00
	00		 mov	 eax, DWORD PTR [edx+448]
  00112	66 8b 49 02	 mov	 cx, WORD PTR [ecx+2]
  00116	66 89 48 7c	 mov	 WORD PTR [eax+124], cx
$LN3@InitMatchI:

; 152  : 	}
; 153  : 
; 154  : 	//调整人数
; 155  : 	if (m_pMatchOption->wMinPartakeGameUser<2) 

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00123	0f b7 51 7a	 movzx	 edx, WORD PTR [ecx+122]
  00127	83 fa 02	 cmp	 edx, 2
  0012a	7d 1a		 jge	 SHORT $LN4@InitMatchI

; 156  : 	{
; 157  : 		m_pMatchOption->wMinPartakeGameUser=m_pGameServiceAttrib->wChairCount;

  0012c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 88 cc 01 00
	00		 mov	 ecx, DWORD PTR [eax+460]
  00135	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00138	8b 82 c0 01 00
	00		 mov	 eax, DWORD PTR [edx+448]
  0013e	66 8b 49 02	 mov	 cx, WORD PTR [ecx+2]
  00142	66 89 48 7a	 mov	 WORD PTR [eax+122], cx
$LN4@InitMatchI:

; 158  : 	}	
; 159  : 
; 160  : 	//调整人数
; 161  : 	if (m_pMatchOption->wMinPartakeGameUser>m_pMatchOption->wMaxPartakeGameUser)

  00146	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00149	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0014f	0f b7 51 7a	 movzx	 edx, WORD PTR [ecx+122]
  00153	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0015c	0f b7 41 7c	 movzx	 eax, WORD PTR [ecx+124]
  00160	3b d0		 cmp	 edx, eax
  00162	7e 1a		 jle	 SHORT $LN5@InitMatchI

; 162  : 	{
; 163  : 		m_pMatchOption->wMinPartakeGameUser=m_pMatchOption->wMaxPartakeGameUser;

  00164	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00167	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  0016d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00170	8b 82 c0 01 00
	00		 mov	 eax, DWORD PTR [edx+448]
  00176	66 8b 49 7c	 mov	 cx, WORD PTR [ecx+124]
  0017a	66 89 48 7a	 mov	 WORD PTR [eax+122], cx
$LN5@InitMatchI:

; 164  : 	}
; 165  : 
; 166  : 	//创建桌子数组
; 167  : 	CImmediateGroup::m_wChairCount=m_pMatchOption->wMinPartakeGameUser;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00181	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00187	66 8b 51 7a	 mov	 dx, WORD PTR [ecx+122]
  0018b	66 89 15 00 00
	00 00		 mov	 WORD PTR ?m_wChairCount@CImmediateGroup@@1GA, dx ; CImmediateGroup::m_wChairCount

; 168  : 	if (m_ppITableFrame==NULL)

  00192	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00195	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR [eax+464], 0
  0019c	75 43		 jne	 SHORT $LN6@InitMatchI

; 169  : 	{
; 170  : 		m_ppITableFrame=new ITableFrame*[m_pGameServiceOption->wTableCount];

  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z@4JA
  001a3	83 c0 30	 add	 eax, 48			; 00000030H
  001a6	50		 push	 eax
  001a7	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	8b 91 c8 01 00
	00		 mov	 edx, DWORD PTR [ecx+456]
  001b5	0f b7 42 46	 movzx	 eax, WORD PTR [edx+70]
  001b9	33 c9		 xor	 ecx, ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	f7 e2		 mul	 edx
  001c2	0f 90 c1	 seto	 cl
  001c5	f7 d9		 neg	 ecx
  001c7	0b c8		 or	 ecx, eax
  001c9	51		 push	 ecx
  001ca	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  001cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d2	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
  001d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d8	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  001db	89 88 d0 01 00
	00		 mov	 DWORD PTR [eax+464], ecx
$LN6@InitMatchI:

; 171  : 	}
; 172  : 
; 173  : 	return true;

  001e1	b0 01		 mov	 al, 1

; 174  : }

  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	5b		 pop	 ebx
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 04 00	 ret	 4
?InitMatchInterface@CImmediateMatch@@UAE_NAAUtagMatchManagerParameter@@@Z ENDP ; CImmediateMatch::InitMatchInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z
_TEXT	SEGMENT
tv180 = -96						; size = 4
tv164 = -96						; size = 4
tv144 = -96						; size = 4
tv93 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 4
_pTableFrameHook$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pTableFrame$ = 8					; size = 4
_wTableID$ = 12						; size = 2
?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z PROC ; CImmediateMatch::BindTableFrame, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 	if(pTableFrame==NULL || wTableID>m_pGameServiceOption->wTableCount)

  0002b	83 7d 08 00	 cmp	 DWORD PTR _pTableFrame$[ebp], 0
  0002f	74 15		 je	 SHORT $LN3@BindTableF
  00031	0f b7 45 0c	 movzx	 eax, WORD PTR _wTableID$[ebp]
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 91 c8 01 00
	00		 mov	 edx, DWORD PTR [ecx+456]
  0003e	0f b7 4a 46	 movzx	 ecx, WORD PTR [edx+70]
  00042	3b c1		 cmp	 eax, ecx
  00044	7e 24		 jle	 SHORT $LN2@BindTableF
$LN3@BindTableF:

; 103  : 	{
; 104  : 		ASSERT(false);

  00046	33 c0		 xor	 eax, eax
  00048	75 19		 jne	 SHORT $LN5@BindTableF
  0004a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z@4JA
  00050	83 c1 03	 add	 ecx, 3
  00053	51		 push	 ecx
  00054	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00059	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005e	85 c0		 test	 eax, eax
  00060	74 01		 je	 SHORT $LN5@BindTableF
  00062	cc		 int	 3
$LN5@BindTableF:

; 105  : 		return false;

  00063	32 c0		 xor	 al, al
  00065	e9 15 01 00 00	 jmp	 $LN1@BindTableF
$LN2@BindTableF:

; 106  : 	}
; 107  : 
; 108  : 	//创建钩子
; 109  : 	CTableFrameHook * pTableFrameHook=new CTableFrameHook();

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z@4JA
  0006f	83 c0 08	 add	 eax, 8
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00078	6a 14		 push	 20			; 00000014H
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00082	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	83 7d a4 00	 cmp	 DWORD PTR $T2[ebp], 0
  00090	74 0d		 je	 SHORT $LN6@BindTableF
  00092	8b 4d a4	 mov	 ecx, DWORD PTR $T2[ebp]
  00095	e8 00 00 00 00	 call	 ??0CTableFrameHook@@QAE@XZ ; CTableFrameHook::CTableFrameHook
  0009a	89 45 a0	 mov	 DWORD PTR tv93[ebp], eax
  0009d	eb 07		 jmp	 SHORT $LN7@BindTableF
$LN6@BindTableF:
  0009f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN7@BindTableF:
  000a6	8b 4d a0	 mov	 ecx, DWORD PTR tv93[ebp]
  000a9	89 4d a8	 mov	 DWORD PTR $T3[ebp], ecx
  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	8b 55 a8	 mov	 edx, DWORD PTR $T3[ebp]
  000b6	89 55 ec	 mov	 DWORD PTR _pTableFrameHook$[ebp], edx

; 110  : 	pTableFrameHook->InitTableFrameHook(QUERY_OBJECT_PTR_INTERFACE(pTableFrame,IUnknownEx));

  000b9	83 7d 08 00	 cmp	 DWORD PTR _pTableFrame$[ebp], 0
  000bd	75 09		 jne	 SHORT $LN8@BindTableF
  000bf	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv144[ebp], 0
  000c6	eb 1a		 jmp	 SHORT $LN9@BindTableF
$LN8@BindTableF:
  000c8	68 00 01 01 06	 push	 100729088		; 06010100H
  000cd	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  000d2	8b 45 08	 mov	 eax, DWORD PTR _pTableFrame$[ebp]
  000d5	8b 10		 mov	 edx, DWORD PTR [eax]
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _pTableFrame$[ebp]
  000da	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000dd	ff d0		 call	 eax
  000df	89 45 a0	 mov	 DWORD PTR tv144[ebp], eax
$LN9@BindTableF:
  000e2	8b 4d a0	 mov	 ecx, DWORD PTR tv144[ebp]
  000e5	51		 push	 ecx
  000e6	8b 55 ec	 mov	 edx, DWORD PTR _pTableFrameHook$[ebp]
  000e9	8b 02		 mov	 eax, DWORD PTR [edx]
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _pTableFrameHook$[ebp]
  000ee	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000f1	ff d2		 call	 edx

; 111  : 	pTableFrameHook->SetMatchEventSink(QUERY_OBJECT_PTR_INTERFACE(this,IUnknownEx));

  000f3	83 7d f0 00	 cmp	 DWORD PTR _this$[ebp], 0
  000f7	75 09		 jne	 SHORT $LN10@BindTableF
  000f9	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
  00100	eb 1a		 jmp	 SHORT $LN11@BindTableF
$LN10@BindTableF:
  00102	68 00 01 01 06	 push	 100729088		; 06010100H
  00107	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  0010c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	8b 10		 mov	 edx, DWORD PTR [eax]
  00111	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00117	ff d0		 call	 eax
  00119	89 45 a0	 mov	 DWORD PTR tv164[ebp], eax
$LN11@BindTableF:
  0011c	8b 4d a0	 mov	 ecx, DWORD PTR tv164[ebp]
  0011f	51		 push	 ecx
  00120	8b 55 ec	 mov	 edx, DWORD PTR _pTableFrameHook$[ebp]
  00123	8b 02		 mov	 eax, DWORD PTR [edx]
  00125	8b 4d ec	 mov	 ecx, DWORD PTR _pTableFrameHook$[ebp]
  00128	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0012b	ff d2		 call	 edx

; 112  : 
; 113  : 	//设置接口
; 114  : 	pTableFrame->SetTableFrameHook(QUERY_OBJECT_PTR_INTERFACE(pTableFrameHook,IUnknownEx));

  0012d	83 7d ec 00	 cmp	 DWORD PTR _pTableFrameHook$[ebp], 0
  00131	75 09		 jne	 SHORT $LN12@BindTableF
  00133	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  0013a	eb 1a		 jmp	 SHORT $LN13@BindTableF
$LN12@BindTableF:
  0013c	68 00 01 01 06	 push	 100729088		; 06010100H
  00141	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00146	8b 45 ec	 mov	 eax, DWORD PTR _pTableFrameHook$[ebp]
  00149	8b 10		 mov	 edx, DWORD PTR [eax]
  0014b	8b 4d ec	 mov	 ecx, DWORD PTR _pTableFrameHook$[ebp]
  0014e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00151	ff d0		 call	 eax
  00153	89 45 a0	 mov	 DWORD PTR tv180[ebp], eax
$LN13@BindTableF:
  00156	8b 4d a0	 mov	 ecx, DWORD PTR tv180[ebp]
  00159	51		 push	 ecx
  0015a	8b 55 08	 mov	 edx, DWORD PTR _pTableFrame$[ebp]
  0015d	8b 02		 mov	 eax, DWORD PTR [edx]
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _pTableFrame$[ebp]
  00162	8b 90 ec 00 00
	00		 mov	 edx, DWORD PTR [eax+236]
  00168	ff d2		 call	 edx

; 115  : 	m_ppITableFrame[wTableID]=pTableFrame;

  0016a	0f b7 45 0c	 movzx	 eax, WORD PTR _wTableID$[ebp]
  0016e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00177	8b 4d 08	 mov	 ecx, DWORD PTR _pTableFrame$[ebp]
  0017a	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 116  : 
; 117  : 	return true;

  0017d	b0 01		 mov	 al, 1
$LN1@BindTableF:

; 118  : }

  0017f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00182	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00189	59		 pop	 ecx
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z@4JA
  00005	83 c0 08	 add	 eax, 8
  00008	50		 push	 eax
  00009	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0000e	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	c3		 ret	 0
__ehhandler$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?BindTableFrame@CImmediateMatch@@UAE_NPAUITableFrame@@G@Z ENDP ; CImmediateMatch::BindTableFrame
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?OnStartService@CImmediateMatch@@UAEXXZ
_TEXT	SEGMENT
tv131 = -104						; size = 4
tv91 = -100						; size = 4
$T2 = -93						; size = 1
$T3 = -92						; size = 4
$T4 = -88						; size = 4
_i$5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnStartService@CImmediateMatch@@UAEXXZ PROC		; CImmediateMatch::OnStartService, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnStartService@CImmediateMatch@@UAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	//创建分组
; 81   : 	if (m_pCurMatchGroup==NULL)

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00032	0f 85 95 00 00
	00		 jne	 $LN5@OnStartSer

; 82   : 	{
; 83   : 		//设置时间
; 84   : 		m_dwStartTime=(DWORD)time(NULL);

  00038	6a 00		 push	 0
  0003a	e8 00 00 00 00	 call	 _time
  0003f	83 c4 04	 add	 esp, 4
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 85   : 		m_pCurMatchGroup=new CImmediateGroup(CalcMatchNo(),m_pMatchOption,this);

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnStartService@CImmediateMatch@@UAEXXZ@4JA
  0004d	83 c0 06	 add	 eax, 6
  00050	50		 push	 eax
  00051	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00056	68 90 00 00 00	 push	 144			; 00000090H
  0005b	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	89 45 a4	 mov	 DWORD PTR $T3[ebp], eax
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	83 7d a4 00	 cmp	 DWORD PTR $T3[ebp], 0
  00071	74 3d		 je	 SHORT $LN9@OnStartSer
  00073	83 7d f0 00	 cmp	 DWORD PTR _this$[ebp], 0
  00077	74 0b		 je	 SHORT $LN7@OnStartSer
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	83 c1 04	 add	 ecx, 4
  0007f	89 4d 9c	 mov	 DWORD PTR tv91[ebp], ecx
  00082	eb 07		 jmp	 SHORT $LN8@OnStartSer
$LN7@OnStartSer:
  00084	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN8@OnStartSer:
  0008b	8b 55 9c	 mov	 edx, DWORD PTR tv91[ebp]
  0008e	52		 push	 edx
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 88 c0 01 00
	00		 mov	 ecx, DWORD PTR [eax+448]
  00098	51		 push	 ecx
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?CalcMatchNo@CImmediateMatch@@AAE_JXZ ; CImmediateMatch::CalcMatchNo
  000a1	52		 push	 edx
  000a2	50		 push	 eax
  000a3	8b 4d a4	 mov	 ecx, DWORD PTR $T3[ebp]
  000a6	e8 00 00 00 00	 call	 ??0CImmediateGroup@@QAE@_JPAUtagGameMatchOption@@PAUIImmediateGroupSink@@@Z ; CImmediateGroup::CImmediateGroup
  000ab	89 45 98	 mov	 DWORD PTR tv131[ebp], eax
  000ae	eb 07		 jmp	 SHORT $LN10@OnStartSer
$LN9@OnStartSer:
  000b0	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN10@OnStartSer:
  000b7	8b 55 98	 mov	 edx, DWORD PTR tv131[ebp]
  000ba	89 55 a8	 mov	 DWORD PTR $T4[ebp], edx
  000bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 4d a8	 mov	 ecx, DWORD PTR $T4[ebp]
  000ca	89 48 74	 mov	 DWORD PTR [eax+116], ecx
$LN5@OnStartSer:

; 86   : 	}
; 87   : 
; 88   : 	//最多同时9组编号
; 89   : 	for (int i=0;i<79;i++) m_LoopTimer.Add(i);

  000cd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  000d4	eb 09		 jmp	 SHORT $LN4@OnStartSer
$LN2@OnStartSer:
  000d6	8b 45 ec	 mov	 eax, DWORD PTR _i$5[ebp]
  000d9	83 c0 01	 add	 eax, 1
  000dc	89 45 ec	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@OnStartSer:
  000df	83 7d ec 4f	 cmp	 DWORD PTR _i$5[ebp], 79	; 0000004fH
  000e3	7d 17		 jge	 SHORT $LN3@OnStartSer
  000e5	8a 45 ec	 mov	 al, BYTE PTR _i$5[ebp]
  000e8	88 45 a3	 mov	 BYTE PTR $T2[ebp], al
  000eb	8d 4d a3	 lea	 ecx, DWORD PTR $T2[ebp]
  000ee	51		 push	 ecx
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	83 c1 38	 add	 ecx, 56			; 00000038H
  000f5	e8 00 00 00 00	 call	 ?Add@?$CWHArray@EABE@@QAEHABE@Z ; CWHArray<unsigned char,unsigned char const &>::Add
  000fa	eb da		 jmp	 SHORT $LN2@OnStartSer
$LN3@OnStartSer:

; 90   : 
; 91   : 	//设置定时器
; 92   : 	m_pITimerEngine->SetTimer(IDI_CHECK_OVER_MATCH,60000L,TIMES_INFINITY,0);

  000fc	6a 00		 push	 0
  000fe	6a ff		 push	 -1
  00100	68 60 ea 00 00	 push	 60000			; 0000ea60H
  00105	68 ca 00 00 00	 push	 202			; 000000caH
  0010a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	8b 88 d4 01 00
	00		 mov	 ecx, DWORD PTR [eax+468]
  00113	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00116	8b 01		 mov	 eax, DWORD PTR [ecx]
  00118	8b 8a d4 01 00
	00		 mov	 ecx, DWORD PTR [edx+468]
  0011e	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00121	ff d2		 call	 edx

; 93   : 	m_pITimerEngine->SetTimer(IDI_DELETE_OVER_MATCH, 6000,TIMES_INFINITY,0);

  00123	6a 00		 push	 0
  00125	6a ff		 push	 -1
  00127	68 70 17 00 00	 push	 6000			; 00001770H
  0012c	68 c9 00 00 00	 push	 201			; 000000c9H
  00131	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 88 d4 01 00
	00		 mov	 ecx, DWORD PTR [eax+468]
  0013a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013f	8b 8a d4 01 00
	00		 mov	 ecx, DWORD PTR [edx+468]
  00145	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00148	ff d2		 call	 edx

; 94   : 
; 95   : 	//插入空桌
; 96   : 	InsertNullTable();

  0014a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	83 c1 04	 add	 ecx, 4
  00150	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00153	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00156	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00159	ff d0		 call	 eax

; 97   : }

  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnStartService@CImmediateMatch@@UAEXXZ$0:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??OnStartService@CImmediateMatch@@UAEXXZ@4JA
  00005	83 c0 06	 add	 eax, 6
  00008	50		 push	 eax
  00009	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  0000e	8b 45 a4	 mov	 eax, DWORD PTR $T3[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	c3		 ret	 0
__ehhandler$?OnStartService@CImmediateMatch@@UAEXXZ:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnStartService@CImmediateMatch@@UAEXXZ
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnStartService@CImmediateMatch@@UAEXXZ ENDP		; CImmediateMatch::OnStartService
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?QueryInterface@CImmediateMatch@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
tv92 = -72						; size = 4
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CImmediateMatch@@UAEPAXABU_GUID@@K@Z PROC ; CImmediateMatch::QueryInterface, COMDAT
; _this$ = ecx

; 70   : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 71   : 	QUERYINTERFACE(IGameMatchItem,Guid,dwQueryVer);	

  0000c	68 00 00 00 00	 push	 OFFSET ?IID_IGameMatchItem@@3U_GUID@@B
  00011	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _==
  0001a	83 c4 08	 add	 esp, 8
  0001d	0f b6 c8	 movzx	 ecx, al
  00020	85 c9		 test	 ecx, ecx
  00022	74 20		 je	 SHORT $LN2@QueryInter
  00024	68 00 01 01 06	 push	 100729088		; 06010100H
  00029	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00032	83 c4 08	 add	 esp, 8
  00035	0f b6 c8	 movzx	 ecx, al
  00038	85 c9		 test	 ecx, ecx
  0003a	74 08		 je	 SHORT $LN2@QueryInter
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	e9 84 00 00 00	 jmp	 $LN1@QueryInter
$LN2@QueryInter:

; 72   : 	QUERYINTERFACE(IServerUserItemSink,Guid,dwQueryVer);	

  00044	68 00 00 00 00	 push	 OFFSET ?IID_IServerUserItemSink@@3U_GUID@@B
  00049	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _==
  00052	83 c4 08	 add	 esp, 8
  00055	0f b6 c8	 movzx	 ecx, al
  00058	85 c9		 test	 ecx, ecx
  0005a	74 35		 je	 SHORT $LN3@QueryInter
  0005c	68 00 01 01 06	 push	 100729088		; 06010100H
  00061	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  0006a	83 c4 08	 add	 esp, 8
  0006d	0f b6 c8	 movzx	 ecx, al
  00070	85 c9		 test	 ecx, ecx
  00072	74 1d		 je	 SHORT $LN3@QueryInter
  00074	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00078	74 0b		 je	 SHORT $LN6@QueryInter
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	83 c0 08	 add	 eax, 8
  00080	89 45 b8	 mov	 DWORD PTR tv92[ebp], eax
  00083	eb 07		 jmp	 SHORT $LN7@QueryInter
$LN6@QueryInter:
  00085	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN7@QueryInter:
  0008c	8b 45 b8	 mov	 eax, DWORD PTR tv92[ebp]
  0008f	eb 37		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:

; 73   : 	QUERYINTERFACE_IUNKNOWNEX(IGameMatchItem,Guid,dwQueryVer);

  00091	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00096	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _==
  0009f	83 c4 08	 add	 esp, 8
  000a2	0f b6 c8	 movzx	 ecx, al
  000a5	85 c9		 test	 ecx, ecx
  000a7	74 1d		 je	 SHORT $LN4@QueryInter
  000a9	68 00 01 01 06	 push	 100729088		; 06010100H
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  000b7	83 c4 08	 add	 esp, 8
  000ba	0f b6 c8	 movzx	 ecx, al
  000bd	85 c9		 test	 ecx, ecx
  000bf	74 05		 je	 SHORT $LN4@QueryInter
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN4@QueryInter:

; 74   : 	return NULL;

  000c6	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 75   : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 08 00	 ret	 8
?QueryInterface@CImmediateMatch@@UAEPAXABU_GUID@@K@Z ENDP ; CImmediateMatch::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.h
;	COMDAT ?Release@CImmediateMatch@@UAEXXZ
_TEXT	SEGMENT
tv70 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Release@CImmediateMatch@@UAEXXZ PROC			; CImmediateMatch::Release, COMDAT
; _this$ = ecx

; 104  :  	virtual VOID Release(){ delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00012	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00015	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  00018	83 7d b8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0001c	74 14		 je	 SHORT $LN3@Release
  0001e	6a 01		 push	 1
  00020	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	8b 4d b8	 mov	 ecx, DWORD PTR $T2[ebp]
  00028	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  0002b	ff d2		 call	 edx
  0002d	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  00030	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  00032	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN1@Release:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?Release@CImmediateMatch@@UAEXXZ ENDP			; CImmediateMatch::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ??1CImmediateMatch@@UAE@XZ
_TEXT	SEGMENT
tv168 = -116						; size = 4
tv212 = -112						; size = 4
tv140 = -112						; size = 4
$T2 = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
$T5 = -96						; size = 4
$T6 = -92						; size = 4
_i$7 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CImmediateMatch@@UAE@XZ PROC				; CImmediateMatch::~CImmediateMatch, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CImmediateMatch@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 64	 sub	 esp, 100		; 00000064H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CImmediateMatch@@6BIGameMatchItem@@@
  00038	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CImmediateMatch@@6BIImmediateGroupSink@@@
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET ??_7CImmediateMatch@@6BIServerUserItemSink@@@
  0004c	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 54   : 	SafeDeleteArray(m_ppITableFrame);

  00053	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00057	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00060	89 4d a4	 mov	 DWORD PTR $T6[ebp], ecx
  00063	8b 55 a4	 mov	 edx, DWORD PTR $T6[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0006c	83 c4 04	 add	 esp, 4
  0006f	eb 23		 jmp	 SHORT $LN16@CImmediate
__catch$??1CImmediateMatch@@UAE@XZ$0:
  00071	33 c0		 xor	 eax, eax
  00073	75 19		 jne	 SHORT $LN9@CImmediate
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CImmediateMatch@@UAE@XZ@4JA
  0007b	83 c1 01	 add	 ecx, 1
  0007e	51		 push	 ecx
  0007f	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00084	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00089	85 c0		 test	 eax, eax
  0008b	74 01		 je	 SHORT $LN9@CImmediate
  0008d	cc		 int	 3
$LN9@CImmediate:
  0008e	b8 00 00 00 00	 mov	 eax, $LN28@CImmediate
  00093	c3		 ret	 0
$LN16@CImmediate:
  00094	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  0009b	eb 07		 jmp	 SHORT __tryend$??1CImmediateMatch@@UAE@XZ$1
$LN28@CImmediate:
  0009d	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
__tryend$??1CImmediateMatch@@UAE@XZ$1:
  000a4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	c7 80 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+464], 0

; 55   : 	
; 56   : 	m_LoopTimer.RemoveAll();

  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	83 c1 38	 add	 ecx, 56			; 00000038H
  000b7	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@EABE@@QAEXXZ ; CWHArray<unsigned char,unsigned char const &>::RemoveAll

; 57   : 	SafeDelete(m_pCurMatchGroup);

  000bc	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  000c0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000c6	89 4d 9c	 mov	 DWORD PTR $T4[ebp], ecx
  000c9	8b 55 9c	 mov	 edx, DWORD PTR $T4[ebp]
  000cc	89 55 a0	 mov	 DWORD PTR $T5[ebp], edx
  000cf	83 7d a0 00	 cmp	 DWORD PTR $T5[ebp], 0
  000d3	74 14		 je	 SHORT $LN10@CImmediate
  000d5	6a 01		 push	 1
  000d7	8b 45 a0	 mov	 eax, DWORD PTR $T5[ebp]
  000da	8b 10		 mov	 edx, DWORD PTR [eax]
  000dc	8b 4d a0	 mov	 ecx, DWORD PTR $T5[ebp]
  000df	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000e2	ff d0		 call	 eax
  000e4	89 45 90	 mov	 DWORD PTR tv140[ebp], eax
  000e7	eb 07		 jmp	 SHORT $LN11@CImmediate
$LN10@CImmediate:
  000e9	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN11@CImmediate:
  000f0	eb 23		 jmp	 SHORT $LN18@CImmediate
__catch$??1CImmediateMatch@@UAE@XZ$2:
  000f2	33 c0		 xor	 eax, eax
  000f4	75 19		 jne	 SHORT $LN12@CImmediate
  000f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CImmediateMatch@@UAE@XZ@4JA
  000fc	83 c1 04	 add	 ecx, 4
  000ff	51		 push	 ecx
  00100	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00105	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0010a	85 c0		 test	 eax, eax
  0010c	74 01		 je	 SHORT $LN12@CImmediate
  0010e	cc		 int	 3
$LN12@CImmediate:
  0010f	b8 00 00 00 00	 mov	 eax, $LN30@CImmediate
  00114	c3		 ret	 0
$LN18@CImmediate:
  00115	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  0011c	eb 07		 jmp	 SHORT __tryend$??1CImmediateMatch@@UAE@XZ$3
$LN30@CImmediate:
  0011e	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
__tryend$??1CImmediateMatch@@UAE@XZ$3:
  00125	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00128	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 58   : 	m_MatchGroup.Append(m_OverMatchGroup);

  0012f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00132	83 c0 60	 add	 eax, 96			; 00000060H
  00135	50		 push	 eax
  00136	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0013c	e8 00 00 00 00	 call	 ?Append@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABV1@@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Append

; 59   : 	for (int i=0; i<m_MatchGroup.GetCount(); i++)

  00141	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  00148	eb 09		 jmp	 SHORT $LN4@CImmediate
$LN2@CImmediate:
  0014a	8b 45 e8	 mov	 eax, DWORD PTR _i$7[ebp]
  0014d	83 c0 01	 add	 eax, 1
  00150	89 45 e8	 mov	 DWORD PTR _i$7[ebp], eax
$LN4@CImmediate:
  00153	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00159	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
  0015e	39 45 e8	 cmp	 DWORD PTR _i$7[ebp], eax
  00161	0f 8d 94 00 00
	00		 jge	 $LN3@CImmediate

; 60   : 	{
; 61   : 		SafeDelete(m_MatchGroup[i]);

  00167	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9
  0016b	8b 45 e8	 mov	 eax, DWORD PTR _i$7[ebp]
  0016e	50		 push	 eax
  0016f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00172	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00175	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  0017a	89 45 90	 mov	 DWORD PTR tv212[ebp], eax
  0017d	8b 4d 90	 mov	 ecx, DWORD PTR tv212[ebp]
  00180	8b 11		 mov	 edx, DWORD PTR [ecx]
  00182	89 55 94	 mov	 DWORD PTR $T2[ebp], edx
  00185	8b 45 94	 mov	 eax, DWORD PTR $T2[ebp]
  00188	89 45 98	 mov	 DWORD PTR $T3[ebp], eax
  0018b	83 7d 98 00	 cmp	 DWORD PTR $T3[ebp], 0
  0018f	74 14		 je	 SHORT $LN13@CImmediate
  00191	6a 01		 push	 1
  00193	8b 4d 98	 mov	 ecx, DWORD PTR $T3[ebp]
  00196	8b 11		 mov	 edx, DWORD PTR [ecx]
  00198	8b 4d 98	 mov	 ecx, DWORD PTR $T3[ebp]
  0019b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0019e	ff d0		 call	 eax
  001a0	89 45 8c	 mov	 DWORD PTR tv168[ebp], eax
  001a3	eb 07		 jmp	 SHORT $LN14@CImmediate
$LN13@CImmediate:
  001a5	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
$LN14@CImmediate:
  001ac	eb 23		 jmp	 SHORT $LN20@CImmediate
__catch$??1CImmediateMatch@@UAE@XZ$4:
  001ae	33 c0		 xor	 eax, eax
  001b0	75 19		 jne	 SHORT $LN15@CImmediate
  001b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CImmediateMatch@@UAE@XZ@4JA
  001b8	83 c1 08	 add	 ecx, 8
  001bb	51		 push	 ecx
  001bc	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  001c1	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001c6	85 c0		 test	 eax, eax
  001c8	74 01		 je	 SHORT $LN15@CImmediate
  001ca	cc		 int	 3
$LN15@CImmediate:
  001cb	b8 00 00 00 00	 mov	 eax, $LN32@CImmediate
  001d0	c3		 ret	 0
$LN20@CImmediate:
  001d1	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  001d8	eb 07		 jmp	 SHORT __tryend$??1CImmediateMatch@@UAE@XZ$5
$LN32@CImmediate:
  001da	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
__tryend$??1CImmediateMatch@@UAE@XZ$5:
  001e1	8b 45 e8	 mov	 eax, DWORD PTR _i$7[ebp]
  001e4	50		 push	 eax
  001e5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	83 c1 4c	 add	 ecx, 76			; 0000004cH
  001eb	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
  001f0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 62   : 	}

  001f6	e9 4f ff ff ff	 jmp	 $LN2@CImmediate
$LN3@CImmediate:

; 63   : 
; 64   : 	m_MatchGroup.RemoveAll();

  001fb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001fe	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00201	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAll

; 65   : 	m_OverMatchGroup.RemoveAll();

  00206	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00209	83 c1 60	 add	 ecx, 96			; 00000060H
  0020c	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXXZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAll

; 66   : }

  00211	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00215	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00218	83 c1 60	 add	 ecx, 96			; 00000060H
  0021b	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
  00220	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00224	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00227	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0022a	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
  0022f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00233	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00236	83 c1 38	 add	 ecx, 56			; 00000038H
  00239	e8 00 00 00 00	 call	 ??1?$CWHArray@EABE@@UAE@XZ ; CWHArray<unsigned char,unsigned char const &>::~CWHArray<unsigned char,unsigned char const &>
  0023e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00242	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00245	83 c1 24	 add	 ecx, 36			; 00000024H
  00248	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::~CWHArray<IServerUserItem *,IServerUserItem * const &>
  0024d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00254	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00257	83 c1 10	 add	 ecx, 16			; 00000010H
  0025a	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::~CWHArray<CTableFrameHook *,CTableFrameHook * const &>
  0025f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00262	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00269	59		 pop	 ecx
  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	5b		 pop	 ebx
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CImmediateMatch@@UAE@XZ$6:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::~CWHArray<CTableFrameHook *,CTableFrameHook * const &>
__unwindfunclet$??1CImmediateMatch@@UAE@XZ$7:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::~CWHArray<IServerUserItem *,IServerUserItem * const &>
__unwindfunclet$??1CImmediateMatch@@UAE@XZ$8:
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 38	 add	 ecx, 56			; 00000038H
  0001c	e9 00 00 00 00	 jmp	 ??1?$CWHArray@EABE@@UAE@XZ ; CWHArray<unsigned char,unsigned char const &>::~CWHArray<unsigned char,unsigned char const &>
__unwindfunclet$??1CImmediateMatch@@UAE@XZ$9:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00027	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
__unwindfunclet$??1CImmediateMatch@@UAE@XZ$10:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 60	 add	 ecx, 96			; 00000060H
  00032	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
__ehhandler$??1CImmediateMatch@@UAE@XZ:
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CImmediateMatch@@UAE@XZ
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CImmediateMatch@@UAE@XZ ENDP				; CImmediateMatch::~CImmediateMatch
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ??0CImmediateMatch@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CImmediateMatch@@QAE@XZ PROC				; CImmediateMatch::CImmediateMatch, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CImmediateMatch@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0IGameMatchItem@@QAE@XZ
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	83 c1 04	 add	 ecx, 4
  00039	e8 00 00 00 00	 call	 ??0IImmediateGroupSink@@QAE@XZ
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 08	 add	 ecx, 8
  00044	e8 00 00 00 00	 call	 ??0IServerUserItemSink@@QAE@XZ
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CImmediateMatch@@6BIGameMatchItem@@@
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CImmediateMatch@@6BIImmediateGroupSink@@@
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET ??_7CImmediateMatch@@6BIServerUserItemSink@@@
  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 10	 add	 ecx, 16			; 00000010H
  0006c	e8 00 00 00 00	 call	 ??0?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@QAE@XZ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::CWHArray<CTableFrameHook *,CTableFrameHook * const &>
  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	83 c1 24	 add	 ecx, 36			; 00000024H
  0007e	e8 00 00 00 00	 call	 ??0?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAE@XZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::CWHArray<IServerUserItem *,IServerUserItem * const &>
  00083	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	83 c1 38	 add	 ecx, 56			; 00000038H
  0008d	e8 00 00 00 00	 call	 ??0?$CWHArray@EABE@@QAE@XZ ; CWHArray<unsigned char,unsigned char const &>::CWHArray<unsigned char,unsigned char const &>
  00092	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00096	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0009c	e8 00 00 00 00	 call	 ??0?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::CWHArray<CImmediateGroup *,CImmediateGroup * const &>
  000a1	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000a5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	83 c1 60	 add	 ecx, 96			; 00000060H
  000ab	e8 00 00 00 00	 call	 ??0?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::CWHArray<CImmediateGroup *,CImmediateGroup * const &>

; 26   : 	//变量定义
; 27   : 	m_dwStartTime=0;

  000b0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 28   : 
; 29   : 	//比赛配置
; 30   : 	m_pMatchOption=NULL;	

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	c7 80 c0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+448], 0

; 31   : 	m_pImmediateMatch=NULL;

  000c7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 80 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+452], 0

; 32   : 	m_pGameServiceOption=NULL;

  000d4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	c7 80 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+456], 0

; 33   : 	m_pGameServiceAttrib=NULL;

  000e1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	c7 80 cc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+460], 0

; 34   : 
; 35   : 	//设置指针
; 36   : 	m_ppITableFrame=NULL;

  000ee	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	c7 80 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+464], 0

; 37   : 	m_pCurMatchGroup=NULL;

  000fb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fe	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 38   : 
; 39   : 	//内核接口
; 40   : 	m_pITimerEngine=NULL;

  00105	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00108	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0

; 41   : 	m_pIDataBaseEngine=NULL;

  00112	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00115	c7 80 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+472], 0

; 42   : 	m_pIDataBaseEngine=NULL;

  0011f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00122	c7 80 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+472], 0

; 43   : 	m_pITCPNetworkEngineEvent=NULL;

  0012c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	c7 80 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+476], 0

; 44   : 
; 45   : 	//服务接口
; 46   : 	m_pIGameServiceFrame=NULL;

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	c7 80 e0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+480], 0

; 47   : 	m_pIServerUserManager=NULL;

  00146	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00149	c7 80 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+484], 0

; 48   : 	m_pAndroidUserManager=NULL;

  00153	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00156	c7 80 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+488], 0

; 49   : 	m_pIServerUserItemSink=NULL;

  00160	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00163	c7 80 ec 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+492], 0

; 50   : }

  0016d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00174	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00177	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00181	59		 pop	 ecx
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CImmediateMatch@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::~CWHArray<CTableFrameHook *,CTableFrameHook * const &>
__unwindfunclet$??0CImmediateMatch@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 24	 add	 ecx, 36			; 00000024H
  00011	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::~CWHArray<IServerUserItem *,IServerUserItem * const &>
__unwindfunclet$??0CImmediateMatch@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 38	 add	 ecx, 56			; 00000038H
  0001c	e9 00 00 00 00	 jmp	 ??1?$CWHArray@EABE@@UAE@XZ ; CWHArray<unsigned char,unsigned char const &>::~CWHArray<unsigned char,unsigned char const &>
__unwindfunclet$??0CImmediateMatch@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00027	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
__ehhandler$??0CImmediateMatch@@QAE@XZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00033	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CImmediateMatch@@QAE@XZ
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CImmediateMatch@@QAE@XZ ENDP				; CImmediateMatch::CImmediateMatch
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAEPAXI@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAEPAXI@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXXZ PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 44		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	c1 e1 02	 shl	 ecx, 2
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?RemoveAll@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXXZ ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHH@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHH@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHABQAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHABQAVCImmediateGroup@@@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHABQAVCImmediateGroup@@@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEAAPAVCImmediateGroup@@H@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Append@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABV1@@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nOldCount$2 = -8					; size = 4
_this$ = -4						; size = 4
_Src$ = 8						; size = 4
?Append@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABV1@@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Append, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 193  : 	//效验参数
; 194  : 	ASSERT(this!=&Src);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR _Src$[ebp]
  00012	75 14		 jne	 SHORT $LN8@Append
  00014	68 c2 00 00 00	 push	 194			; 000000c2H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00023	85 c0		 test	 eax, eax
  00025	74 01		 je	 SHORT $LN8@Append
  00027	cc		 int	 3
$LN8@Append:

; 195  : 	if (this==&Src) AfxThrowInvalidArgException();

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	3b 45 08	 cmp	 eax, DWORD PTR _Src$[ebp]
  0002e	75 05		 jne	 SHORT $LN5@Append
  00030	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@Append:

; 196  : 
; 197  : 	//拷贝数组
; 198  : 	if (Src.m_nElementCount>0)

  00035	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  00038	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0003c	7e 6d		 jle	 SHORT $LN6@Append

; 199  : 	{
; 200  : 		INT_PTR nOldCount=m_nElementCount;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00044	89 4d f8	 mov	 DWORD PTR _nOldCount$2[ebp], ecx

; 201  : 		AllocMemory(m_nElementCount+Src.m_nElementCount);

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _Src$[ebp]
  00050	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00053	51		 push	 ecx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXH@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::AllocMemory

; 202  : 		for (INT_PTR i=0;i<Src.m_nElementCount;i++)	m_pData[m_nElementCount+i]=Src.m_pData[i];

  0005c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00063	eb 09		 jmp	 SHORT $LN4@Append
$LN2@Append:
  00065	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Append:
  0006e	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  00074	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00077	7d 20		 jge	 SHORT $LN3@Append
  00079	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00085	03 45 f4	 add	 eax, DWORD PTR _i$1[ebp]
  00088	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0008e	8b 75 f4	 mov	 esi, DWORD PTR _i$1[ebp]
  00091	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00094	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
  00097	eb cc		 jmp	 SHORT $LN2@Append
$LN3@Append:

; 203  : 		m_nElementCount+=Src.m_nElementCount;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009f	8b 55 08	 mov	 edx, DWORD PTR _Src$[ebp]
  000a2	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN6@Append:

; 204  : 	}
; 205  : 
; 206  : 	return m_nElementCount;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
$LN7@Append:

; 207  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
?Append@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABV1@@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Append
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABQAVCImmediateGroup@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABQAVCImmediateGroup@@@Z PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEXHABQAVCImmediateGroup@@@Z ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAEHABQAVCImmediateGroup@@@Z ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ PROC ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QBEHXZ ENDP ; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ PROC	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@UAE@XZ ENDP	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::~CWHArray<CImmediateGroup *,CImmediateGroup * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAE@XZ PROC	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::CWHArray<CImmediateGroup *,CImmediateGroup * const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@PAVCImmediateGroup@@ABQAV1@@@QAE@XZ ENDP	; CWHArray<CImmediateGroup *,CImmediateGroup * const &>::CWHArray<CImmediateGroup *,CImmediateGroup * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@EABE@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@EABE@@UAEPAXI@Z PROC			; CWHArray<unsigned char,unsigned char const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@EABE@@UAE@XZ ; CWHArray<unsigned char,unsigned char const &>::~CWHArray<unsigned char,unsigned char const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@EABE@@UAEPAXI@Z ENDP			; CWHArray<unsigned char,unsigned char const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@EABE@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@EABE@@QAEXH@Z PROC		; CWHArray<unsigned char,unsigned char const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e d1 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009b	83 c4 04	 add	 esp, 4
  0009e	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a1	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a4	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ad	51		 push	 ecx
  000ae	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b4	50		 push	 eax
  000b5	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 _memcpy
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000c7	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000ca	51		 push	 ecx
  000cb	6a 00		 push	 0
  000cd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d0	8b 45 f4	 mov	 eax, DWORD PTR _pNewData$3[ebp]
  000d3	03 42 10	 add	 eax, DWORD PTR [edx+16]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _memset
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e5	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000e8	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000f1	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  000f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000fa	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  000fd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00100	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  00103	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@EABE@@QAEXH@Z ENDP		; CWHArray<unsigned char,unsigned char const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@EABE@@QAEAAEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@EABE@@QAEAAEH@Z PROC			; CWHArray<unsigned char,unsigned char const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@EABE@@QAEAAEH@Z ; CWHArray<unsigned char,unsigned char const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@EABE@@QAEAAEH@Z ENDP			; CWHArray<unsigned char,unsigned char const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@EABE@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@EABE@@QAEXXZ PROC			; CWHArray<unsigned char,unsigned char const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 41		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	51		 push	 ecx
  0003b	6a 00		 push	 0
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00040	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _memset
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?RemoveAll@?$CWHArray@EABE@@QAEXXZ ENDP			; CWHArray<unsigned char,unsigned char const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@EABE@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@EABE@@QAEXHH@Z PROC		; CWHArray<unsigned char,unsigned char const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 23		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000be	03 55 08	 add	 edx, DWORD PTR _nIndex$[ebp]
  000c1	03 55 0c	 add	 edx, DWORD PTR _nCount$[ebp]
  000c4	52		 push	 edx
  000c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cb	03 4d 08	 add	 ecx, DWORD PTR _nIndex$[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000dd	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000e0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e3	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@EABE@@QAEXHH@Z ENDP		; CWHArray<unsigned char,unsigned char const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@EABE@@QAEXHABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@EABE@@QAEXHABE@Z PROC		; CWHArray<unsigned char,unsigned char const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@EABE@@QAEXH@Z ; CWHArray<unsigned char,unsigned char const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8a 00		 mov	 al, BYTE PTR [eax]
  0005c	88 04 11	 mov	 BYTE PTR [ecx+edx], al
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@EABE@@QAEXHABE@Z ENDP		; CWHArray<unsigned char,unsigned char const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@EABE@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@EABE@@QAEXH@Z PROC			; CWHArray<unsigned char,unsigned char const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@EABE@@QAEXH@Z ; CWHArray<unsigned char,unsigned char const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 37		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 19		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	03 4d f8	 add	 ecx, DWORD PTR _i$3[ebp]
  0006d	51		 push	 ecx
  0006e	6a 01		 push	 1
  00070	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00075	83 c4 08	 add	 esp, 8
  00078	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007b	eb d6		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  0007d	eb 47		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00085	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00088	7d 3c		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008a	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00090	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00092	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00095	83 c0 01	 add	 eax, 1
  00098	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a1	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a4	7d 02		 jge	 SHORT $LN6@SetSize
  000a6	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ae	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b1	51		 push	 ecx
  000b2	6a 00		 push	 0
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	03 45 08	 add	 eax, DWORD PTR _nNewSize$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _memset
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000cc	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
?SetSize@?$CWHArray@EABE@@QAEXH@Z ENDP			; CWHArray<unsigned char,unsigned char const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@EABE@@QAEAAEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@EABE@@QAEAAEH@Z PROC		; CWHArray<unsigned char,unsigned char const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004d	03 45 08	 add	 eax, DWORD PTR _nIndex$[ebp]
$LN3@ElementAt:

; 237  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@EABE@@QAEAAEH@Z ENDP		; CWHArray<unsigned char,unsigned char const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@EABE@@QAEHABE@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@EABE@@QAEHABE@Z PROC			; CWHArray<unsigned char,unsigned char const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@EABE@@QAEXHABE@Z ; CWHArray<unsigned char,unsigned char const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@EABE@@QAEHABE@Z ENDP			; CWHArray<unsigned char,unsigned char const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@EABE@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@EABE@@QBEHXZ PROC			; CWHArray<unsigned char,unsigned char const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@EABE@@QBEHXZ ENDP			; CWHArray<unsigned char,unsigned char const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@EABE@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@EABE@@UAE@XZ PROC				; CWHArray<unsigned char,unsigned char const &>::~CWHArray<unsigned char,unsigned char const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@EABE@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@EABE@@UAE@XZ ENDP				; CWHArray<unsigned char,unsigned char const &>::~CWHArray<unsigned char,unsigned char const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@EABE@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@EABE@@QAE@XZ PROC				; CWHArray<unsigned char,unsigned char const &>::CWHArray<unsigned char,unsigned char const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@EABE@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@EABE@@QAE@XZ ENDP				; CWHArray<unsigned char,unsigned char const &>::CWHArray<unsigned char,unsigned char const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAEPAXI@Z PROC ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::~CWHArray<CTableFrameHook *,CTableFrameHook * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAEPAXI@Z ENDP ; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ PROC	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::~CWHArray<CTableFrameHook *,CTableFrameHook * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@UAE@XZ ENDP	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::~CWHArray<CTableFrameHook *,CTableFrameHook * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@QAE@XZ PROC	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::CWHArray<CTableFrameHook *,CTableFrameHook * const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@PAVCTableFrameHook@@ABQAV1@@@QAE@XZ ENDP	; CWHArray<CTableFrameHook *,CTableFrameHook * const &>::CWHArray<CTableFrameHook *,CTableFrameHook * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECMatchServiceManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECMatchServiceManager@@UAEPAXI@Z PROC		; CMatchServiceManager::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECMatchServiceManager@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 43		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CMatchServiceManager@@UAE@XZ ; CMatchServiceManager::~CMatchServiceManager
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 10		 push	 16			; 00000010H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1c		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00058	c1 e1 04	 shl	 ecx, 4
  0005b	83 c1 04	 add	 ecx, 4
  0005e	51		 push	 ecx
  0005f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00062	83 ea 04	 sub	 edx, 4
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006b	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 e8 04	 sub	 eax, 4
  00074	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00076	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ??1CMatchServiceManager@@UAE@XZ ; CMatchServiceManager::~CMatchServiceManager
  0007e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00081	83 e0 01	 and	 eax, 1
  00084	74 0e		 je	 SHORT $LN4@vector
  00086	6a 10		 push	 16			; 00000010H
  00088	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00091	83 c4 08	 add	 esp, 8
$LN4@vector:
  00094	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00097	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECMatchServiceManager@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECMatchServiceManager@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECMatchServiceManager@@UAEPAXI@Z ENDP		; CMatchServiceManager::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCMatchServiceManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMatchServiceManager@@UAEPAXI@Z PROC		; CMatchServiceManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CMatchServiceManager@@UAE@XZ ; CMatchServiceManager::~CMatchServiceManager
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 10		 push	 16			; 00000010H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCMatchServiceManager@@UAEPAXI@Z ENDP		; CMatchServiceManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CMatchServiceManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CMatchServiceManager@@QAEAAV0@ABV0@@Z PROC		; CMatchServiceManager::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??4IMatchServiceManager@@QAEAAU0@ABU0@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00021	88 50 04	 mov	 BYTE PTR [eax+4], dl
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0002a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00036	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00039	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??4CMatchServiceManager@@QAEAAV0@ABV0@@Z ENDP		; CMatchServiceManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CMatchServiceManager@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMatchServiceManager@@QAE@ABV0@@Z PROC		; CMatchServiceManager::CMatchServiceManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0IMatchServiceManager@@QAE@ABU0@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CMatchServiceManager@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00027	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  0002a	88 50 04	 mov	 BYTE PTR [eax+4], dl
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00033	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00036	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0003f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00042	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0CMatchServiceManager@@QAE@ABV0@@Z ENDP		; CMatchServiceManager::CMatchServiceManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\matchservicemanager.h
;	COMDAT ?Release@CMatchServiceManager@@UAEXXZ
_TEXT	SEGMENT
tv70 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Release@CMatchServiceManager@@UAEXXZ PROC		; CMatchServiceManager::Release, COMDAT
; _this$ = ecx

; 36   : 	virtual VOID  Release() { delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00012	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00015	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  00018	83 7d b8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0001c	74 14		 je	 SHORT $LN3@Release
  0001e	6a 01		 push	 1
  00020	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	8b 4d b8	 mov	 ecx, DWORD PTR $T2[ebp]
  00028	8b 50 44	 mov	 edx, DWORD PTR [eax+68]
  0002b	ff d2		 call	 edx
  0002d	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  00030	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  00032	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN1@Release:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?Release@CMatchServiceManager@@UAEXXZ ENDP		; CMatchServiceManager::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediategroup.h
;	COMDAT ?AddMatchTable@CImmediateGroup@@IAEXPAUtagTableFrameInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTableFrameInfo$ = 8					; size = 4
?AddMatchTable@CImmediateGroup@@IAEXPAUtagTableFrameInfo@@@Z PROC ; CImmediateGroup::AddMatchTable, COMDAT
; _this$ = ecx

; 223  : 	VOID AddMatchTable(tagTableFrameInfo* pTableFrameInfo){ m_MatchTableArray.Add(pTableFrameInfo);} 		

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8d 45 08	 lea	 eax, DWORD PTR _pTableFrameInfo$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 68	 add	 ecx, 104		; 00000068H
  00016	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEHABQAUtagTableFrameInfo@@@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::Add
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?AddMatchTable@CImmediateGroup@@IAEXPAUtagTableFrameInfo@@@Z ENDP ; CImmediateGroup::AddMatchTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHH@Z PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHH@Z ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHABQAUtagTableFrameInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHABQAUtagTableFrameInfo@@@Z PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHABQAUtagTableFrameInfo@@@Z ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEAAPAUtagTableFrameInfo@@H@Z ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEHABQAUtagTableFrameInfo@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEHABQAUtagTableFrameInfo@@@Z PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEXHABQAUtagTableFrameInfo@@@Z ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QAEHABQAUtagTableFrameInfo@@@Z ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ PROC ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PAUtagTableFrameInfo@@ABQAU1@@@QBEHXZ ENDP ; CWHArray<tagTableFrameInfo *,tagTableFrameInfo * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAEPAXI@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ ; CWHArray<IServerUserItem *,IServerUserItem * const &>::~CWHArray<IServerUserItem *,IServerUserItem * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAEPAXI@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHH@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHH@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHABQAUIServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHABQAUIServerUserItem@@@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHABQAUIServerUserItem@@@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEAAPAUIServerUserItem@@H@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEHABQAUIServerUserItem@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEHABQAUIServerUserItem@@@Z PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEXHABQAUIServerUserItem@@@Z ; CWHArray<IServerUserItem *,IServerUserItem * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAEHABQAUIServerUserItem@@@Z ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QBEHXZ PROC ; CWHArray<IServerUserItem *,IServerUserItem * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QBEHXZ ENDP ; CWHArray<IServerUserItem *,IServerUserItem * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ PROC	; CWHArray<IServerUserItem *,IServerUserItem * const &>::~CWHArray<IServerUserItem *,IServerUserItem * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PAUIServerUserItem@@ABQAU1@@@UAE@XZ ENDP	; CWHArray<IServerUserItem *,IServerUserItem * const &>::~CWHArray<IServerUserItem *,IServerUserItem * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAE@XZ PROC	; CWHArray<IServerUserItem *,IServerUserItem * const &>::CWHArray<IServerUserItem *,IServerUserItem * const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUIServerUserItem@@ABQAU1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@PAUIServerUserItem@@ABQAU1@@@QAE@XZ ENDP	; CWHArray<IServerUserItem *,IServerUserItem * const &>::CWHArray<IServerUserItem *,IServerUserItem * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z
_TEXT	SEGMENT
tv133 = -100						; size = 4
tv83 = -100						; size = 4
tv73 = -100						; size = 4
_nBucket$1 = -32					; size = 4
_pAssocNext$ = -28					; size = 4
___afx_condVal$2 = -24					; size = 4
_nBucket$3 = -20					; size = 4
___afx_condVal$4 = -16					; size = 4
_pAssocRet$ = -12					; size = 4
___afx_condVal$5 = -8					; size = 4
_this$ = -4						; size = 4
_rNextPosition$ = 8					; size = 4
_rKey$ = 12						; size = 4
_rValue$ = 16						; size = 4
?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z PROC ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc, COMDAT
; _this$ = ecx

; 1640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 	ASSERT_VALID(this);

  0000c	68 69 06 00 00	 push	 1641			; 00000669H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@GetNextAss:

; 1642 : 	ENSURE(m_pHashTable != NULL);  // never call on empty map

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN25@GetNextAss
  00028	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN26@GetNextAss
$LN25@GetNextAss:
  00031	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN26@GetNextAss:
  00038	8b 4d 9c	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$5[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  00042	75 14		 jne	 SHORT $LN27@GetNextAss
  00044	68 6a 06 00 00	 push	 1642			; 0000066aH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN27@GetNextAss
  00057	cc		 int	 3
$LN27@GetNextAss:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@GetNextAss
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetNextAss:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@GetNextAss

; 1643 : 
; 1644 : 	CAssoc* pAssocRet = (CAssoc*)rNextPosition;

  00067	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	89 4d f4	 mov	 DWORD PTR _pAssocRet$[ebp], ecx
$LN7@GetNextAss:

; 1645 : 	ENSURE(pAssocRet != NULL);

  0006f	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  00073	74 09		 je	 SHORT $LN28@GetNextAss
  00075	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  0007c	eb 07		 jmp	 SHORT $LN29@GetNextAss
$LN28@GetNextAss:
  0007e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN29@GetNextAss:
  00085	8b 45 9c	 mov	 eax, DWORD PTR tv83[ebp]
  00088	89 45 f0	 mov	 DWORD PTR ___afx_condVal$4[ebp], eax
  0008b	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  0008f	75 14		 jne	 SHORT $LN30@GetNextAss
  00091	68 6d 06 00 00	 push	 1645			; 0000066dH
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a0	85 c0		 test	 eax, eax
  000a2	74 01		 je	 SHORT $LN30@GetNextAss
  000a4	cc		 int	 3
$LN30@GetNextAss:
  000a5	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  000a9	75 05		 jne	 SHORT $LN5@GetNextAss
  000ab	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@GetNextAss:
  000b0	33 c0		 xor	 eax, eax
  000b2	75 bb		 jne	 SHORT $LN7@GetNextAss

; 1646 : 
; 1647 : 	if (pAssocRet == (CAssoc*) BEFORE_START_POSITION)

  000b4	83 7d f4 ff	 cmp	 DWORD PTR _pAssocRet$[ebp], -1
  000b8	75 7b		 jne	 SHORT $LN19@GetNextAss

; 1648 : 	{
; 1649 : 		// find the first association
; 1650 : 		for (UINT nBucket = 0; nBucket < m_nHashTableSize; nBucket++)

  000ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBucket$3[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN10@GetNextAss
$LN8@GetNextAss:
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _nBucket$3[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _nBucket$3[ebp], eax
$LN10@GetNextAss:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _nBucket$3[ebp]
  000d2	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d5	73 19		 jae	 SHORT $LN13@GetNextAss

; 1651 : 		{
; 1652 : 			if ((pAssocRet = m_pHashTable[nBucket]) != NULL)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _nBucket$3[ebp]
  000e0	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000e3	89 45 f4	 mov	 DWORD PTR _pAssocRet$[ebp], eax
  000e6	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000ea	74 02		 je	 SHORT $LN20@GetNextAss

; 1653 : 			{
; 1654 : 				break;

  000ec	eb 02		 jmp	 SHORT $LN13@GetNextAss
$LN20@GetNextAss:

; 1655 : 			}
; 1656 : 		}

  000ee	eb d3		 jmp	 SHORT $LN8@GetNextAss
$LN13@GetNextAss:

; 1657 : 		ENSURE(pAssocRet != NULL);  // must find something

  000f0	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000f4	74 09		 je	 SHORT $LN31@GetNextAss
  000f6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN32@GetNextAss
$LN31@GetNextAss:
  000ff	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN32@GetNextAss:
  00106	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  00109	89 45 e8	 mov	 DWORD PTR ___afx_condVal$2[ebp], eax
  0010c	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  00110	75 14		 jne	 SHORT $LN33@GetNextAss
  00112	68 79 06 00 00	 push	 1657			; 00000679H
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0011c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00121	85 c0		 test	 eax, eax
  00123	74 01		 je	 SHORT $LN33@GetNextAss
  00125	cc		 int	 3
$LN33@GetNextAss:
  00126	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  0012a	75 05		 jne	 SHORT $LN11@GetNextAss
  0012c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN11@GetNextAss:
  00131	33 c0		 xor	 eax, eax
  00133	75 bb		 jne	 SHORT $LN13@GetNextAss
$LN19@GetNextAss:

; 1658 : 	}
; 1659 : 
; 1660 : 	// find next association
; 1661 : 	ASSERT(AfxIsValidAddress(pAssocRet, sizeof(CAssoc)));

  00135	6a 01		 push	 1
  00137	6a 10		 push	 16			; 00000010H
  00139	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00142	85 c0		 test	 eax, eax
  00144	75 14		 jne	 SHORT $LN34@GetNextAss
  00146	68 7d 06 00 00	 push	 1661			; 0000067dH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00150	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00155	85 c0		 test	 eax, eax
  00157	74 01		 je	 SHORT $LN34@GetNextAss
  00159	cc		 int	 3
$LN34@GetNextAss:

; 1662 : 	CAssoc* pAssocNext;
; 1663 : 	if ((pAssocNext = pAssocRet->pNext) == NULL)

  0015a	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0015d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00160	89 4d e4	 mov	 DWORD PTR _pAssocNext$[ebp], ecx
  00163	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  00167	75 43		 jne	 SHORT $LN22@GetNextAss

; 1664 : 	{
; 1665 : 		// go to next bucket
; 1666 : 		for (UINT nBucket = (pAssocRet->nHashValue % m_nHashTableSize) + 1;

  00169	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00172	33 d2		 xor	 edx, edx
  00174	f7 71 08	 div	 DWORD PTR [ecx+8]
  00177	83 c2 01	 add	 edx, 1
  0017a	89 55 e0	 mov	 DWORD PTR _nBucket$1[ebp], edx
  0017d	eb 09		 jmp	 SHORT $LN16@GetNextAss
$LN14@GetNextAss:

; 1667 : 		  nBucket < m_nHashTableSize; nBucket++)

  0017f	8b 45 e0	 mov	 eax, DWORD PTR _nBucket$1[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 e0	 mov	 DWORD PTR _nBucket$1[ebp], eax
$LN16@GetNextAss:
  00188	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 4d e0	 mov	 ecx, DWORD PTR _nBucket$1[ebp]
  0018e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00191	73 19		 jae	 SHORT $LN22@GetNextAss

; 1668 : 			if ((pAssocNext = m_pHashTable[nBucket]) != NULL)

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00199	8b 55 e0	 mov	 edx, DWORD PTR _nBucket$1[ebp]
  0019c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0019f	89 45 e4	 mov	 DWORD PTR _pAssocNext$[ebp], eax
  001a2	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  001a6	74 02		 je	 SHORT $LN23@GetNextAss

; 1669 : 				break;

  001a8	eb 02		 jmp	 SHORT $LN22@GetNextAss
$LN23@GetNextAss:

; 1670 : 	}

  001aa	eb d3		 jmp	 SHORT $LN14@GetNextAss
$LN22@GetNextAss:

; 1671 : 
; 1672 : 	rNextPosition = (POSITION) pAssocNext;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  001af	8b 4d e4	 mov	 ecx, DWORD PTR _pAssocNext$[ebp]
  001b2	89 08		 mov	 DWORD PTR [eax], ecx

; 1673 : 
; 1674 : 	// fill in return data
; 1675 : 	rKey = pAssocRet->key;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _rKey$[ebp]
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bc	89 10		 mov	 DWORD PTR [eax], edx

; 1676 : 	rValue = pAssocRet->value;

  001be	8b 45 10	 mov	 eax, DWORD PTR _rValue$[ebp]
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001c4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c7	89 10		 mov	 DWORD PTR [eax], edx
$LN24@GetNextAss:

; 1677 : }

  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 0c 00	 ret	 12			; 0000000cH
?GetNextAssoc@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUIServerUserItem@@@Z ENDP ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetNextAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ PROC ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition, COMDAT
; _this$ = ecx

; 1354 : 	{ return (m_nCount == 0) ? NULL : BEFORE_START_POSITION; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	75 09		 jne	 SHORT $LN3@GetStartPo
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@GetStartPo
$LN3@GetStartPo:
  0001e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv66[ebp], -1
$LN4@GetStartPo:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetStartPosition@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEPAU__POSITION@@XZ ENDP ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetStartPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetCount@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEHXZ PROC ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetCount, COMDAT
; _this$ = ecx

; 1338 : 	{ return m_nCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CMap@KKPAUIServerUserItem@@PAU1@@@QBEHXZ ENDP ; CMap<unsigned long,unsigned long,IServerUserItem *,IServerUserItem *>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IImmediateGroupSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IImmediateGroupSink@@QAE@XZ PROC			; IImmediateGroupSink::IImmediateGroupSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IImmediateGroupSink@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IImmediateGroupSink@@QAE@XZ ENDP			; IImmediateGroupSink::IImmediateGroupSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IGameMatchItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IGameMatchItem@@QAE@XZ PROC				; IGameMatchItem::IGameMatchItem, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IGameMatchItem@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IGameMatchItem@@QAE@XZ ENDP				; IGameMatchItem::IGameMatchItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4IMatchServiceManager@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4IMatchServiceManager@@QAEAAU0@ABU0@@Z PROC		; IMatchServiceManager::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??4IUnknownEx@@QAEAAU0@ABU0@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4IMatchServiceManager@@QAEAAU0@ABU0@@Z ENDP		; IMatchServiceManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IMatchServiceManager@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0IMatchServiceManager@@QAE@ABU0@@Z PROC		; IMatchServiceManager::IMatchServiceManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@ABU0@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IMatchServiceManager@@6B@
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0IMatchServiceManager@@QAE@ABU0@@Z ENDP		; IMatchServiceManager::IMatchServiceManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IServerUserItemSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServerUserItemSink@@QAE@XZ PROC			; IServerUserItemSink::IServerUserItemSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IServerUserItemSink@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IServerUserItemSink@@QAE@XZ ENDP			; IServerUserItemSink::IServerUserItemSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\serverrule.h
;	COMDAT ?IsSuportPlayBack@CServerRule@@SA_NK@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_dwServerRule$ = 8					; size = 4
?IsSuportPlayBack@CServerRule@@SA_NK@Z PROC		; CServerRule::IsSuportPlayBack, COMDAT

; 181  : 	static bool IsSuportPlayBack(DWORD dwServerRule) { return (dwServerRule&SR_SUPORT_PLAY_BACK)!=0; }	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _dwServerRule$[ebp]
  0000c	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00011	74 09		 je	 SHORT $LN3@IsSuportPl
  00013	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001a	eb 07		 jmp	 SHORT $LN4@IsSuportPl
$LN3@IsSuportPl:
  0001c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@IsSuportPl:
  00023	8a 45 bc	 mov	 al, BYTE PTR tv66[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?IsSuportPlayBack@CServerRule@@SA_NK@Z ENDP		; CServerRule::IsSuportPlayBack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\serverrule.h
;	COMDAT ?IsImmediateWriteScore@CServerRule@@SA_NK@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_dwServerRule$ = 8					; size = 4
?IsImmediateWriteScore@CServerRule@@SA_NK@Z PROC	; CServerRule::IsImmediateWriteScore, COMDAT

; 79   : 	static bool IsImmediateWriteScore(DWORD dwServerRule) { return (dwServerRule&SR_IMMEDIATE_WRITE_SCORE)!=0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _dwServerRule$[ebp]
  0000c	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00011	74 09		 je	 SHORT $LN3@IsImmediat
  00013	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001a	eb 07		 jmp	 SHORT $LN4@IsImmediat
$LN3@IsImmediat:
  0001c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@IsImmediat:
  00023	8a 45 bc	 mov	 al, BYTE PTR tv66[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?IsImmediateWriteScore@CServerRule@@SA_NK@Z ENDP	; CServerRule::IsImmediateWriteScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00012	83 c4 04	 add	 esp, 4
  00015	0f b6 f0	 movzx	 esi, al
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00021	83 c4 04	 add	 esp, 4
  00024	0f b6 d0	 movzx	 edx, al
  00027	3b f2		 cmp	 esi, edx
  00029	7e 04		 jle	 SHORT $LN2@InterfaceV
  0002b	32 c0		 xor	 al, al
  0002d	eb 74		 jmp	 SHORT $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00038	83 c4 04	 add	 esp, 4
  0003b	0f b6 f0	 movzx	 esi, al
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00047	83 c4 04	 add	 esp, 4
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	3b f2		 cmp	 esi, edx
  0004f	74 04		 je	 SHORT $LN3@InterfaceV
  00051	32 c0		 xor	 al, al
  00053	eb 4e		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00055	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0005e	83 c4 04	 add	 esp, 4
  00061	0f b6 f0	 movzx	 esi, al
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0006d	83 c4 04	 add	 esp, 4
  00070	0f b6 d0	 movzx	 edx, al
  00073	3b f2		 cmp	 esi, edx
  00075	74 04		 je	 SHORT $LN4@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 28		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00084	83 c4 04	 add	 esp, 4
  00087	0f b6 f0	 movzx	 esi, al
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00093	83 c4 04	 add	 esp, 4
  00096	0f b6 d0	 movzx	 edx, al
  00099	3b f2		 cmp	 esi, edx
  0009b	74 04		 je	 SHORT $LN5@InterfaceV
  0009d	32 c0		 xor	 al, al
  0009f	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000a1	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	d1 e0		 shl	 eax, 1
  00010	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4IUnknownEx@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4IUnknownEx@@QAEAAU0@ABU0@@Z PROC			; IUnknownEx::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??4IUnknownEx@@QAEAAU0@ABU0@@Z ENDP			; IUnknownEx::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUnknownEx@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0IUnknownEx@@QAE@ABU0@@Z PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0IUnknownEx@@QAE@ABU0@@Z ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z
_TEXT	SEGMENT
_ptm$ = -48						; size = 4
_ttm$ = -44						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_timeDest$ = 8						; size = 4
?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z PROC ; ATL::CTime::GetAsSystemTime, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);

  00016	8d 45 d4	 lea	 eax, DWORD PTR _ttm$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  00022	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 634  : 	if(!ptm)

  00025	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00029	75 04		 jne	 SHORT $LN2@GetAsSyste

; 635  : 	{
; 636  : 		return false;

  0002b	32 c0		 xor	 al, al
  0002d	eb 72		 jmp	 SHORT $LN1@GetAsSyste
$LN2@GetAsSyste:

; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);

  0002f	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  00032	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00035	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  0003b	8b 55 08	 mov	 edx, DWORD PTR _timeDest$[ebp]
  0003e	66 89 0a	 mov	 WORD PTR [edx], cx

; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);

  00041	8b 45 d0	 mov	 eax, DWORD PTR _ptm$[ebp]
  00044	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00047	83 c1 01	 add	 ecx, 1
  0004a	8b 55 08	 mov	 edx, DWORD PTR _timeDest$[ebp]
  0004d	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;

  00051	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  00054	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00057	66 8b 51 18	 mov	 dx, WORD PTR [ecx+24]
  0005b	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  00062	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00065	66 8b 51 0c	 mov	 dx, WORD PTR [ecx+12]
  00069	66 89 50 06	 mov	 WORD PTR [eax+6], dx

; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  00070	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00073	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  00077	66 89 50 08	 mov	 WORD PTR [eax+8], dx

; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  0007e	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00081	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  00085	66 89 50 0a	 mov	 WORD PTR [eax+10], dx

; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;

  00089	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  0008c	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0008f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00092	66 89 50 0c	 mov	 WORD PTR [eax+12], dx

; 646  : 	timeDest.wMilliseconds = 0;

  00096	33 c0		 xor	 eax, eax
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _timeDest$[ebp]
  0009b	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax

; 647  : 
; 648  : 	return true;

  0009f	b0 01		 mov	 al, 1
$LN1@GetAsSyste:

; 649  : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ENDP ; ATL::CTime::GetAsSystemTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
tv65 = -120						; size = 4
_err$1 = -52						; size = 4
_ptmTemp$2 = -48					; size = 36
___atl_condVal$3 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@GetLocalTm:

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00016	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0001a	74 09		 je	 SHORT $LN12@GetLocalTm
  0001c	c7 45 88 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00023	eb 07		 jmp	 SHORT $LN13@GetLocalTm
$LN12@GetLocalTm:
  00025	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN13@GetLocalTm:
  0002c	8b 45 88	 mov	 eax, DWORD PTR tv65[ebp]
  0002f	89 45 f4	 mov	 DWORD PTR ___atl_condVal$3[ebp], eax
$LN7@GetLocalTm:
  00032	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  00036	75 2b		 jne	 SHORT $LN5@GetLocalTm
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00042	6a 00		 push	 0
  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU4@@Z@4JA
  00049	83 c0 02	 add	 eax, 2
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1OC@IALJLBM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00052	6a 02		 push	 2
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 01		 jne	 SHORT $LN5@GetLocalTm
  00062	cc		 int	 3
$LN5@GetLocalTm:
  00063	33 c0		 xor	 eax, eax
  00065	75 cb		 jne	 SHORT $LN7@GetLocalTm
  00067	83 7d f4 00	 cmp	 DWORD PTR ___atl_condVal$3[ebp], 0
  0006b	75 0a		 jne	 SHORT $LN2@GetLocalTm
  0006d	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00072	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@GetLocalTm:
  00077	33 c0		 xor	 eax, eax
  00079	75 9b		 jne	 SHORT $LN4@GetLocalTm

; 610  : 
; 611  : 	if (ptm != NULL)

  0007b	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0007f	74 30		 je	 SHORT $LN9@GetLocalTm

; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00081	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00084	50		 push	 eax
  00085	8d 4d d0	 lea	 ecx, DWORD PTR _ptmTemp$2[ebp]
  00088	51		 push	 ecx
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  0008f	83 c4 08	 add	 esp, 8
  00092	89 45 cc	 mov	 DWORD PTR _err$1[ebp], eax

; 615  : 
; 616  : 		if (err != 0)

  00095	83 7d cc 00	 cmp	 DWORD PTR _err$1[ebp], 0
  00099	74 04		 je	 SHORT $LN10@GetLocalTm

; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!

  0009b	33 c0		 xor	 eax, eax
  0009d	eb 14		 jmp	 SHORT $LN11@GetLocalTm
$LN10@GetLocalTm:

; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;

  0009f	b9 09 00 00 00	 mov	 ecx, 9
  000a4	8d 75 d0	 lea	 esi, DWORD PTR _ptmTemp$2[ebp]
  000a7	8b 7d 08	 mov	 edi, DWORD PTR _ptm$[ebp]
  000aa	f3 a5		 rep movsd

; 622  : 		return ptm;

  000ac	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  000af	eb 02		 jmp	 SHORT $LN11@GetLocalTm
$LN9@GetLocalTm:

; 623  : 	}
; 624  : 
; 625  : 	return NULL;

  000b1	33 c0		 xor	 eax, eax
$LN11@GetLocalTm:

; 626  : }

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	33 cd		 xor	 ecx, ebp
  000bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 04 00	 ret	 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 417  : 	m_time( time )

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 419  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltime.h
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00009	6a 00		 push	 0
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00011	83 c4 04	 add	 esp, 4
  00014	52		 push	 edx
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 375  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
_TEXT	SEGMENT
_ptr$ = -20						; size = 4
_ple$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 421  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 422  : 		CPreserveLastError ple;

  00028	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::CPreserveLastError
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 423  : 		va_list ptr; va_start(ptr, pszFmt);

  00037	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0003a	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax

; 424  : 		ATL::CTrace::TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  0003d	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 14	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 10	 mov	 edx, DWORD PTR _nLevel$[ebp]
  00048	52		 push	 edx
  00049	8b 45 0c	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00053	52		 push	 edx
  00054	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ; ATL::CTrace::TraceV
  0005f	83 c4 18	 add	 esp, 24			; 00000018H

; 425  : 		va_end(ptr);

  00062	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 426  : 	}

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00073	e8 00 00 00 00	 call	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _ple$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
__ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 411  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 		: m_pszFileName(pszFileName), m_nLineNo(nLineNo)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _nLineNo$[ebp]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 412  : 	}

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??1CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::~CPreserveLastError, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 		SetLastError(m_dwLastError);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4

; 398  : 	}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??1CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::~CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::CPreserveLastError, COMDAT
; _this$ = ecx

; 390  : 	CPreserveLastError()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	{
; 392  : 		m_dwLastError = GetLastError();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 01		 push	 1
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -8						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		size_t nBytes=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00013	6a 02		 push	 2
  00015	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00018	50		 push	 eax
  00019	8d 4d f8	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN2@Allocate

; 458  : 		{
; 459  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 462  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 434  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 435  : 	{

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>

; 436  : 	}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 408  : 		Allocator::Free(m_pData);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00017	83 c4 04	 add	 esp, 4

; 409  : 		m_pData = NULL;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 410  : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		ATLASSERT(m_pData == NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 27		 je	 SHORT $LN4@AllocateBy
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0001e	6a 00		 push	 0
  00020	68 7e 01 00 00	 push	 382			; 0000017eH
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@IAPLKPHI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 01		 jne	 SHORT $LN4@AllocateBy
  0003a	cc		 int	 3
$LN4@AllocateBy:

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  0003b	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		if (m_pData == NULL)

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	75 04		 jne	 SHORT $LN2@AllocateBy

; 385  : 			return false;

  00054	32 c0		 xor	 al, al
  00056	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 386  : 
; 387  : 		return true;

  00058	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 388  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 363  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 		return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 365  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		Free();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free

; 351  : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		m_pData(NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 337  : 	}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 330  : 		if (pszCategory == nullptr)

  00016	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0001c	e9 a9 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00021	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00028	72 2d		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0002a	33 c0		 xor	 eax, eax
  0002c	75 27		 jne	 SHORT $LN5@RegisterCa
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 51 01 00 00	 push	 337			; 00000151H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 01		 jne	 SHORT $LN5@RegisterCa
  00054	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  00055	eb 73		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00057	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  00064	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	6a 00		 push	 0
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  00080	8b 45 08	 mov	 eax, DWORD PTR _pszCategory$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  00089	6a 7f		 push	 127			; 0000007fH
  0008b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _swprintf_s
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 7f		 push	 127			; 0000007fH
  000a3	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000ad	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000b3	51		 push	 ecx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000c2	83 c0 01	 add	 eax, 1
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
_TEXT	SEGMENT
_wszBuf$ = -24						; size = 4
_szBuf$ = -20						; size = 4
_cchNeeded$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pszFmt$ = 24						; size = 4
_args$ = 28						; size = 4
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 239  : 		int cchNeeded = _vscprintf(pszFmt, args);

  00028	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 __vscprintf
  00035	83 c4 08	 add	 esp, 8
  00038	89 45 f0	 mov	 DWORD PTR _cchNeeded$[ebp], eax

; 240  : 		if (cchNeeded < 0)

  0003b	83 7d f0 00	 cmp	 DWORD PTR _cchNeeded$[ebp], 0
  0003f	7d 05		 jge	 SHORT $LN2@TraceV

; 241  : 		{
; 242  : 			return;

  00041	e9 64 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 243  : 		}
; 244  : 
; 245  : 		CHeapPtr<char> szBuf;

  00046	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00049	e8 00 00 00 00	 call	 ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 246  : 		if (!szBuf.Allocate(cchNeeded + 1))

  00055	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	50		 push	 eax
  0005c	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0005f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
  00064	0f b6 c8	 movzx	 ecx, al
  00067	85 c9		 test	 ecx, ecx
  00069	75 14		 jne	 SHORT $LN3@TraceV

; 247  : 		{
; 248  : 			return;

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00075	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0007a	e9 2b 01 00 00	 jmp	 $LN1@TraceV
$LN3@TraceV:

; 249  : 		}
; 250  : 
; 251  : 		szBuf[0] = '\0';

  0007f	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00082	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	6b d1 00	 imul	 edx, ecx, 0
  0008f	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 252  : 
; 253  : 		if (_vsnprintf_s(szBuf, cchNeeded + 1, cchNeeded, pszFmt, args) == -1)

  00093	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 f0	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	50		 push	 eax
  000a6	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000a9	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 __vsnprintf_s
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
  000b7	83 f8 ff	 cmp	 eax, -1
  000ba	75 14		 jne	 SHORT $LN4@TraceV

; 254  : 		{
; 255  : 			return;

  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000cb	e9 da 00 00 00	 jmp	 $LN1@TraceV
$LN4@TraceV:

; 256  : 		}
; 257  : 
; 258  : 		CHeapPtr<wchar_t> wszBuf;

  000d0	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000d3	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 259  : 		if (!wszBuf.Allocate(cchNeeded + 1))

  000dc	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000df	83 c0 01	 add	 eax, 1
  000e2	50		 push	 eax
  000e3	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000e6	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  000eb	0f b6 c8	 movzx	 ecx, al
  000ee	85 c9		 test	 ecx, ecx
  000f0	75 20		 jne	 SHORT $LN5@TraceV

; 260  : 		{
; 261  : 			return;

  000f2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f6	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000f9	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00105	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00108	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0010d	e9 98 00 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 262  : 		}
; 263  : 
; 264  : 		wszBuf[0] = '\0';

  00112	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00115	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  0011a	b9 02 00 00 00	 mov	 ecx, 2
  0011f	6b d1 00	 imul	 edx, ecx, 0
  00122	33 c9		 xor	 ecx, ecx
  00124	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 265  : 
; 266  : 		if (::MultiByteToWideChar(CP_ACP, 0, szBuf, -1, wszBuf, cchNeeded + 1) == 0)

  00128	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  0012b	83 c0 01	 add	 eax, 1
  0012e	50		 push	 eax
  0012f	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00132	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00137	50		 push	 eax
  00138	6a ff		 push	 -1
  0013a	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0013d	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  00142	50		 push	 eax
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  0014d	85 c0		 test	 eax, eax
  0014f	75 1d		 jne	 SHORT $LN6@TraceV

; 267  : 		{
; 268  : 			return;

  00151	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00155	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00158	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0015d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00164	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00167	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0016c	eb 3c		 jmp	 SHORT $LN1@TraceV
$LN6@TraceV:

; 269  : 		}
; 270  : 
; 271  : 		TraceV(pszFileName, nLine, dwCategory, nLevel, wszBuf);

  0016e	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00171	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00176	50		 push	 eax
  00177	8b 45 14	 mov	 eax, DWORD PTR _nLevel$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d 10	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  0017e	51		 push	 ecx
  0017f	8b 55 0c	 mov	 edx, DWORD PTR _nLine$[ebp]
  00182	52		 push	 edx
  00183	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ; ATL::CTrace::TraceV
  0018c	83 c4 14	 add	 esp, 20			; 00000014H

; 272  : 	}

  0018f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00193	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00196	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0019b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a2	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  001a5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b4	59		 pop	 ecx
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	5b		 pop	 ebx
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z
_TEXT	SEGMENT
_fileName$ = -2588					; size = 520
_wszBuf$ = -2068					; size = 4
_chCount$ = -2064					; size = 4
_pwszCategoryName$ = -2060				; size = 4
_categoryLength$ = -2056				; size = 4
_wszCategory$ = -2052					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszMessage$ = 24					; size = 4
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 150  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 0b 00
	00		 sub	 esp, 2972		; 00000b9cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 151  : 		if (CTrace::m_nLevel == CTrace::DisableTracing || CTrace::m_nLevel < nLevel || (CTrace::m_nCategory & dwCategory) == 0)

  00016	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_nLevel@CTrace@ATL@@1IA, -1 ; ATL::CTrace::m_nLevel
  0001d	74 14		 je	 SHORT $LN3@TraceV
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLevel@CTrace@ATL@@1IA ; ATL::CTrace::m_nLevel
  00024	3b 45 14	 cmp	 eax, DWORD PTR _nLevel$[ebp]
  00027	72 0a		 jb	 SHORT $LN3@TraceV
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nCategory
  0002e	23 45 10	 and	 eax, DWORD PTR _dwCategory$[ebp]
  00031	75 05		 jne	 SHORT $LN2@TraceV
$LN3@TraceV:

; 152  : 		{
; 153  : 			return;

  00033	e9 c2 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 154  : 		}
; 155  : 
; 156  : 		wchar_t wszCategory[TraceBufferSize] = {'\0'};

  00038	68 00 08 00 00	 push	 2048			; 00000800H
  0003d	6a 00		 push	 0
  0003f	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memset
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		int categoryLength = 0;

  0004e	c7 85 f8 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _categoryLength$[ebp], 0

; 158  : 		const wchar_t *const pwszCategoryName = GetCategoryName(dwCategory);

  00058	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ; ATL::CTrace::GetCategoryName
  00061	83 c4 04	 add	 esp, 4
  00064	89 85 f4 f7 ff
	ff		 mov	 DWORD PTR _pwszCategoryName$[ebp], eax

; 159  : 		if (pwszCategoryName != nullptr)

  0006a	83 bd f4 f7 ff
	ff 00		 cmp	 DWORD PTR _pwszCategoryName$[ebp], 0
  00071	74 36		 je	 SHORT $LN4@TraceV

; 160  : 		{
; 161  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%ls - ", pwszCategoryName)) == -1)

  00073	8b 85 f4 f7 ff
	ff		 mov	 eax, DWORD PTR _pwszCategoryName$[ebp]
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
  0007f	68 00 04 00 00	 push	 1024			; 00000400H
  00084	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _swprintf_s
  00090	83 c4 10	 add	 esp, 16			; 00000010H
  00093	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  00099	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000a0	75 05		 jne	 SHORT $LN6@TraceV

; 162  : 			{
; 163  : 				return;

  000a2	e9 53 01 00 00	 jmp	 $LN1@TraceV
$LN6@TraceV:

; 164  : 			}
; 165  : 		}
; 166  : 		else

  000a7	eb 31		 jmp	 SHORT $LN5@TraceV
$LN4@TraceV:

; 167  : 		{
; 168  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%u - ", dwCategory)) == -1)

  000a9	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
  000b2	68 00 04 00 00	 push	 1024			; 00000400H
  000b7	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _swprintf_s
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	89 85 f8 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000cc	83 bd f8 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000d3	75 05		 jne	 SHORT $LN5@TraceV

; 169  : 			{
; 170  : 				return;

  000d5	e9 20 01 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 171  : 			}
; 172  : 		}
; 173  : 
; 174  : 		int chCount = (int)wcslen(pwszMessage) + categoryLength + 1;

  000da	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  000dd	50		 push	 eax
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  000e4	83 c4 04	 add	 esp, 4
  000e7	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _categoryLength$[ebp]
  000ed	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  000f1	89 95 f0 f7 ff
	ff		 mov	 DWORD PTR _chCount$[ebp], edx

; 175  : 		CHeapPtr<wchar_t> wszBuf;

  000f7	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000fd	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 176  : 		if (!wszBuf.Allocate(chCount))

  00102	8b 85 f0 f7 ff
	ff		 mov	 eax, DWORD PTR _chCount$[ebp]
  00108	50		 push	 eax
  00109	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0010f	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00114	0f b6 c8	 movzx	 ecx, al
  00117	85 c9		 test	 ecx, ecx
  00119	75 10		 jne	 SHORT $LN8@TraceV

; 177  : 		{
; 178  : 			return;

  0011b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00121	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00126	e9 cf 00 00 00	 jmp	 $LN1@TraceV
$LN8@TraceV:

; 179  : 		}
; 180  : 
; 181  : 		wszBuf[0] = '\0';

  0012b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00131	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00136	b9 02 00 00 00	 mov	 ecx, 2
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	33 c9		 xor	 ecx, ecx
  00140	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 182  : 
; 183  : 		if (swprintf_s(wszBuf, chCount, L"%ls%ls", wszCategory, pwszMessage) == -1)

  00144	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  00147	50		 push	 eax
  00148	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  0014e	51		 push	 ecx
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
  00154	8b 95 f0 f7 ff
	ff		 mov	 edx, DWORD PTR _chCount$[ebp]
  0015a	52		 push	 edx
  0015b	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00161	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00166	50		 push	 eax
  00167	e8 00 00 00 00	 call	 _swprintf_s
  0016c	83 c4 14	 add	 esp, 20			; 00000014H
  0016f	83 f8 ff	 cmp	 eax, -1
  00172	75 0d		 jne	 SHORT $LN9@TraceV

; 184  : 		{
; 185  : 			return;

  00174	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0017a	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0017f	eb 79		 jmp	 SHORT $LN1@TraceV
$LN9@TraceV:

; 186  : 		}
; 187  : 
; 188  : 		wchar_t fileName[_MAX_PATH] = {'\0'};	

  00181	68 08 02 00 00	 push	 520			; 00000208H
  00186	6a 00		 push	 0
  00188	8d 85 e4 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 _memset
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : #if _MSC_VER < 1900
; 190  : 		if (swprintf_s(fileName, _MAX_PATH, L"%S", pszFileName) == -1)
; 191  : #else
; 192  : 		if (swprintf_s(fileName, _MAX_PATH, L"%hs", pszFileName) == -1)

  00197	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  001a0	68 04 01 00 00	 push	 260			; 00000104H
  001a5	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 _swprintf_s
  001b1	83 c4 10	 add	 esp, 16			; 00000010H
  001b4	83 f8 ff	 cmp	 eax, -1
  001b7	75 0d		 jne	 SHORT $LN10@TraceV

; 193  : #endif
; 194  : 		{
; 195  : 			return;

  001b9	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001bf	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001c4	eb 34		 jmp	 SHORT $LN1@TraceV
$LN10@TraceV:

; 196  : 		}
; 197  : 
; 198  : 		_CrtDbgReportW(_CRT_WARN, fileName, nLine, nullptr, L"%ls", static_cast<const wchar_t*>(wszBuf));

  001c6	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001cc	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  001d1	50		 push	 eax
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001d7	6a 00		 push	 0
  001d9	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  001dc	50		 push	 eax
  001dd	8d 8d e4 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  001e3	51		 push	 ecx
  001e4	6a 00		 push	 0
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  001ec	83 c4 18	 add	 esp, 24			; 00000018H

; 199  : 	}

  001ef	8d 8d ec f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001f5	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001fa	5f		 pop	 edi
  001fb	5e		 pop	 esi
  001fc	5b		 pop	 ebx
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_nCategory$ = 8						; size = 4
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z PROC		; ATL::CTrace::GetCategoryName, COMDAT

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 133  : 		for(unsigned int i = 0; i < m_nLastCategory; i++) 

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@GetCategor
$LN2@GetCategor:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetCategor:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0001e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00024	73 22		 jae	 SHORT $LN3@GetCategor

; 134  : 		{
; 135  : 			if (m_nMap[i].nCategory == nCategory)

  00026	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0002d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax]
  00033	3b 4d 08	 cmp	 ecx, DWORD PTR _nCategory$[ebp]
  00036	75 0e		 jne	 SHORT $LN5@GetCategor

; 136  : 			{
; 137  : 				return m_nMap[i].categryName;

  00038	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0003f	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00044	eb 04		 jmp	 SHORT $LN1@GetCategor
$LN5@GetCategor:

; 138  : 			}
; 139  : 		}

  00046	eb ca		 jmp	 SHORT $LN2@GetCategor
$LN3@GetCategor:

; 140  : 
; 141  : 		return nullptr;

  00048	33 c0		 xor	 eax, eax
$LN1@GetCategor:

; 142  : 	}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ENDP		; ATL::CTrace::GetCategoryName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMFNIFA@atlTraceException@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  0000c	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 20 00 00	 push	 8192			; 00002000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 266  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 267  : 		free(p);

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00013	83 c4 04	 add	 esp, 4

; 268  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 261  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 262  : 		return malloc(nBytes);

  00009	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00013	83 c4 04	 add	 esp, 4

; 263  : 	}

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_i64Result$ = -8					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  0000c	f7 65 10	 mul	 DWORD PTR _iRight$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _i64Result$[ebp], eax
  00012	89 55 fc	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 137  : 	if(i64Result>UINT_MAX)

  00015	83 7d fc 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00019	77 06		 ja	 SHORT $LN4@AtlMultipl
  0001b	83 7d f8 ff	 cmp	 DWORD PTR _i64Result$[ebp], -1
  0001f	76 0f		 jbe	 SHORT $LN2@AtlMultipl
$LN4@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  00021	68 16 02 00 00	 push	 534			; 00000216H
  00026	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  0002b	83 c4 04	 add	 esp, 4
  0002e	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _i64Result$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _piResult$[ebp]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 142  : 	return S_OK;

  00038	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 143  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T1 = -72						; size = 8
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00009	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6@
  00012	6a 00		 push	 0
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00019	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
  0001e	50		 push	 eax
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
  00025	83 c1 01	 add	 ecx, 1
  00028	51		 push	 ecx
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0HD@OEBHCJKM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002e	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  00031	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  0003c	83 c4 14	 add	 esp, 20			; 00000014H

; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  0003f	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  00046	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00048	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  0004d	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  0004f	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  :             return _time64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00013	83 c4 04	 add	 esp, 4

; 537  :         }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1675 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 __vscprintf_l
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 :     }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1658 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1659 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	83 c9 02	 or	 ecx, 2
  00023	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00026	52		 push	 edx
  00027	51		 push	 ecx
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0002e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00031	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;

  00034	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00038	7d 09		 jge	 SHORT $LN3@vscprintf_
  0003a	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00041	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00043	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00046	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  00049	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1664 :     }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1605 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __vsnprintf_s_l
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 1607 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1584 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1585 :         int const _Result = __stdio_common_vsnprintf_s(

  00009	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00033	83 c4 20	 add	 esp, 32			; 00000020H
  00036	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;

  00039	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003d	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003f	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00046	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00048	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004b	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004e	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1590 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1538 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1539 :             int _Result;
; 1540 :             va_list _ArgList;
; 1541 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1542 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vswprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1543 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1544 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1545 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = -68						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 28640: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	7f 08		 jg	 SHORT $LN3@HRESULT_FR
  0000f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00012	89 45 bc	 mov	 DWORD PTR tv68[ebp], eax
  00015	eb 18		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00020	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00026	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0002c	89 4d bc	 mov	 DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv68[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -68						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _IsEqualGUID
  00016	83 c4 08	 add	 esp, 8
  00019	85 c0		 test	 eax, eax
  0001b	74 09		 je	 SHORT $LN3@
  0001d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00024	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00026	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  0002d	8a 45 bc	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -68						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memcmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN3@IsEqualGUI
  0001f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  00028	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]

; 162  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\比赛服务\immediatematch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
