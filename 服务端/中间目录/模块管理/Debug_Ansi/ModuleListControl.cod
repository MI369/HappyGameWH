; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\模块管理\ModuleListControl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IGameServiceManager@@3U_GUID@@B DD 04b2b9d8fH	; IID_IGameServiceManager
	DW	0ce1bH
	DW	044f3H
	DB	0a5H
	DB	022H
	DB	065H
	DB	01aH
	DB	065H
	DB	0c9H
	DB	0aH
	DB	025H
?IID_IAndroidUserItemSink@@3U_GUID@@B DD 01e8a1918H	; IID_IAndroidUserItemSink
	DW	0572bH
	DW	0453bH
	DB	0bcH
	DB	0bH
	DB	06bH
	DB	061H
	DB	070H
	DB	0a3H
	DB	03cH
	DB	0caH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__global_delete@@YAXPAX@Z			; __global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__global_delete@@YAXPAXI@Z			; __global_delete
PUBLIC	?__global_array_delete@@YAXPAX@Z		; __global_array_delete
PUBLIC	?__global_array_delete@@YAXPAXI@Z		; __global_array_delete
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	_wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0CModuleListControl@@QAE@XZ			; CModuleListControl::CModuleListControl
PUBLIC	??1CModuleListControl@@UAE@XZ			; CModuleListControl::~CModuleListControl
PUBLIC	?InitListControl@CModuleListControl@@UAEXXZ	; CModuleListControl::InitListControl
PUBLIC	?SortListItemData@CModuleListControl@@UAEHJJG@Z	; CModuleListControl::SortListItemData
PUBLIC	?GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z ; CModuleListControl::GetListItemColor
PUBLIC	?InsertModuleInfo@CModuleListControl@@QAE_NPAUtagGameModuleInfo@@@Z ; CModuleListControl::InsertModuleInfo
PUBLIC	?GetInsertIndex@CModuleListControl@@AAEGPAUtagGameModuleInfo@@@Z ; CModuleListControl::GetInsertIndex
PUBLIC	?GetDescribeString@CModuleListControl@@AAEPBDPAUtagGameModuleInfo@@G@Z ; CModuleListControl::GetDescribeString
PUBLIC	??_GCModuleListControl@@UAEPAXI@Z		; CModuleListControl::`scalar deleting destructor'
PUBLIC	??_ECModuleListControl@@UAEPAXI@Z		; CModuleListControl::`vector deleting destructor'
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R3CWnd@@8					; CWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWnd@@8					; CWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R3CCmdTarget@@8				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCmdTarget@@8				; CCmdTarget::`RTTI Base Class Array'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7CModuleListControl@@6B@			; CModuleListControl::`vftable'
PUBLIC	??_C@_08MGLMENIG@?S?N?O?$LH?C?$PL?W?V@		; `string'
PUBLIC	??_C@_08OIAECBD@?W?i?$LM?$PO?W?$LE?L?$KM@	; `string'
PUBLIC	??_C@_08ENLFOAJ@?J?$PN?$LO?$NN?$LP?b?C?$PL@	; `string'
PUBLIC	??_C@_08IHOHCJJH@?A?$KM?$LN?S?$LF?X?V?$LH@	; `string'
PUBLIC	??_C@_08IELLENBN@?$LH?$PO?N?q?F?w?C?$PL@	; `string'
PUBLIC	??_C@_08BDIJAICL@?$LP?M?$LL?$KH?$LG?K?C?$PL@	; `string'
PUBLIC	?__LINE__Var@?0??GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z@4JA ; `CModuleListControl::GetListItemColor'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@GCCBHGFM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_08FAIKBINC@?C?$LL?S?P?$LA?$LC?W?$LA@	; `string'
PUBLIC	??_C@_08DNKKCEAP@?$LE?f?T?Z?$LI?$PM?P?B@	; `string'
PUBLIC	??_C@_08PHMHMBKJ@?R?Q?$LO?$KN?$LA?$LC?W?$LA@	; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4CModuleListControl@@6B@			; CModuleListControl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCModuleListControl@@@8			; CModuleListControl `RTTI Type Descriptor'
PUBLIC	??_R3CModuleListControl@@8			; CModuleListControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CModuleListControl@@8			; CModuleListControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CModuleListControl@@8		; CModuleListControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CListControl@@8			; CListControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCListControl@@@8			; CListControl `RTTI Type Descriptor'
PUBLIC	??_R3CListControl@@8				; CListControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CListControl@@8				; CListControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CListCtrl@@8			; CListCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCListCtrl@@@8				; CListCtrl `RTTI Type Descriptor'
PUBLIC	??_R3CListCtrl@@8				; CListCtrl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CListCtrl@@8				; CListCtrl::`RTTI Base Class Array'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__lstrcmpA@8:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:PROC ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:PROC	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:PROC ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:PROC	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:PROC ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:PROC ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:PROC ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:PROC ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:PROC ; CCmdTarget::GetConnectionMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:PROC ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:PROC	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:PROC ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:PROC ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:PROC ; CCmdTarget::GetConnectionHook
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:PROC ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:PROC ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:PROC ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:PROC		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:PROC ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:PROC	; CWnd::CalcWindowRect
EXTRN	?GetMenu@CWnd@@UBEPAVCMenu@@XZ:PROC		; CWnd::GetMenu
EXTRN	?SetMenu@CWnd@@UAEHPAVCMenu@@@Z:PROC		; CWnd::SetMenu
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:PROC ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:PROC ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:PROC		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:PROC		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:PROC		; CWnd::EndModalLoop
EXTRN	?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z:PROC ; CWnd::OnDrawIconicThumbnailOrLivePreview
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:PROC ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:PROC			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:PROC ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:PROC		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:PROC ; CWnd::get_accChild
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDescription
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accRole
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:PROC ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDefaultAction
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:PROC	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:PROC ; CWnd::accLocation
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:PROC	; CWnd::accHitTest
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:PROC ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:PROC ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:PROC	; CWnd::CreateAccessibleProxy
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:PROC			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:PROC		; CWnd::OnNotify
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:PROC ; CWnd::GetSuperWndProcAddr
EXTRN	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z:PROC ; CWnd::DoDataExchange
EXTRN	?BeginModalState@CWnd@@UAEXXZ:PROC		; CWnd::BeginModalState
EXTRN	?EndModalState@CWnd@@UAEXXZ:PROC		; CWnd::EndModalState
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:PROC ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:PROC ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:PROC		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:PROC		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:PROC		; CWnd::PostNcDestroy
EXTRN	?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInputs
EXTRN	?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInput
EXTRN	?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z:PROC	; CWnd::GetGestureStatus
EXTRN	?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z:PROC	; CWnd::OnGestureZoom
EXTRN	?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z:PROC	; CWnd::OnGesturePan
EXTRN	?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z:PROC	; CWnd::OnGestureRotate
EXTRN	?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z:PROC ; CWnd::OnGestureTwoFingerTap
EXTRN	?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z:PROC ; CWnd::OnGesturePressAndTap
EXTRN	?ResizeDynamicLayout@CWnd@@MAEXXZ:PROC		; CWnd::ResizeDynamicLayout
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:PROC		; CWnd::CheckAutoCenter
EXTRN	?AssertValid@CWnd@@UBEXXZ:PROC			; CWnd::AssertValid
EXTRN	?Dump@CWnd@@UBEXAAVCDumpContext@@@Z:PROC	; CWnd::Dump
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:PROC			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:PROC		; CWnd::OnFinalRelease
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:PROC ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:PROC ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:PROC ; CWnd::SetOccDialogInfo
EXTRN	?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ:PROC ; CWnd::GetOccDialogInfo
EXTRN	?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ:PROC ; CListCtrl::GetRuntimeClass
EXTRN	?GetItemCount@CListCtrl@@QBEHXZ:PROC		; CListCtrl::GetItemCount
EXTRN	?SetItem@CListCtrl@@QAEHHHIPBDHIIJ@Z:PROC	; CListCtrl::SetItem
EXTRN	?GetItemData@CListCtrl@@QBEKH@Z:PROC		; CListCtrl::GetItemData
EXTRN	?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z:PROC ; CListCtrl::FindItem
EXTRN	?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z:PROC	; CListCtrl::InsertColumn
EXTRN	?InsertItem@CListCtrl@@QAEHIHPBDIIHJ@Z:PROC	; CListCtrl::InsertItem
EXTRN	?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z:PROC	; CListCtrl::OnChildNotify
EXTRN	?GetItemCount@CHeaderCtrl@@QBEHXZ:PROC		; CHeaderCtrl::GetItemCount
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	??0CListControl@@QAE@XZ:PROC			; CListControl::CListControl
EXTRN	??1CListControl@@UAE@XZ:PROC			; CListControl::~CListControl
EXTRN	?PreSubclassWindow@CListControl@@UAEXXZ:PROC	; CListControl::PreSubclassWindow
EXTRN	?DrawItem@CListControl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:PROC ; CListControl::DrawItem
EXTRN	?GetMessageMap@CListControl@@MBEPBUAFX_MSGMAP@@XZ:PROC ; CListControl::GetMessageMap
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R2CListCtrl@@8
rdata$r	SEGMENT
??_R2CListCtrl@@8 DD FLAT:??_R1A@?0A@EA@CListCtrl@@8	; CListCtrl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CListCtrl@@8
rdata$r	SEGMENT
??_R3CListCtrl@@8 DD 00H				; CListCtrl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CListCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCListCtrl@@@8
data$r	SEGMENT
??_R0?AVCListCtrl@@@8 DD FLAT:??_7type_info@@6B@	; CListCtrl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCListCtrl@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CListCtrl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CListCtrl@@8 DD FLAT:??_R0?AVCListCtrl@@@8 ; CListCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CListCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R2CListControl@@8
rdata$r	SEGMENT
??_R2CListControl@@8 DD FLAT:??_R1A@?0A@EA@CListControl@@8 ; CListControl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CListCtrl@@8
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CListControl@@8
rdata$r	SEGMENT
??_R3CListControl@@8 DD 00H				; CListControl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CListControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCListControl@@@8
data$r	SEGMENT
??_R0?AVCListControl@@@8 DD FLAT:??_7type_info@@6B@	; CListControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCListControl@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CListControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CListControl@@8 DD FLAT:??_R0?AVCListControl@@@8 ; CListControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CListControl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CModuleListControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CModuleListControl@@8 DD FLAT:??_R0?AVCModuleListControl@@@8 ; CModuleListControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CModuleListControl@@8
rdata$r	ENDS
;	COMDAT ??_R2CModuleListControl@@8
rdata$r	SEGMENT
??_R2CModuleListControl@@8 DD FLAT:??_R1A@?0A@EA@CModuleListControl@@8 ; CModuleListControl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CListControl@@8
	DD	FLAT:??_R1A@?0A@EA@CListCtrl@@8
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CModuleListControl@@8
rdata$r	SEGMENT
??_R3CModuleListControl@@8 DD 00H			; CModuleListControl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2CModuleListControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCModuleListControl@@@8
data$r	SEGMENT
??_R0?AVCModuleListControl@@@8 DD FLAT:??_7type_info@@6B@ ; CModuleListControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCModuleListControl@@', 00H
data$r	ENDS
;	COMDAT ??_R4CModuleListControl@@6B@
rdata$r	SEGMENT
??_R4CModuleListControl@@6B@ DD 00H			; CModuleListControl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCModuleListControl@@@8
	DD	FLAT:??_R3CModuleListControl@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PHMHMBKJ@?R?Q?$LO?$KN?$LA?$LC?W?$LA@
CONST	SEGMENT
??_C@_08PHMHMBKJ@?R?Q?$LO?$KN?$LA?$LC?W?$LA@ DB 0d2H, 0d1H, 0beH, 0adH, 0b0H
	DB	0b2H, 0d7H, 0b0H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DNKKCEAP@?$LE?f?T?Z?$LI?$PM?P?B@
CONST	SEGMENT
??_C@_08DNKKCEAP@?$LE?f?T?Z?$LI?$PM?P?B@ DB 0b4H, 0e6H, 0d4H, 0daH, 0b8H, 0fcH
	DB	0d0H, 0c2H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08FAIKBINC@?C?$LL?S?P?$LA?$LC?W?$LA@
CONST	SEGMENT
??_C@_08FAIKBINC@?C?$LL?S?P?$LA?$LC?W?$LA@ DB 0c3H, 0bbH, 0d3H, 0d0H, 0b0H
	DB	0b2H, 0d7H, 0b0H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@GCCBHGFM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EO@GCCBHGFM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0c4H, 0a3H, 0bfH, 0e9H, 0b9H, 0dcH, 0c0H, 0edH, '\m'
	DB	'odulelistcontrol.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z@4JA DD 05dH ; `CModuleListControl::GetListItemColor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08BDIJAICL@?$LP?M?$LL?$KH?$LG?K?C?$PL@
CONST	SEGMENT
??_C@_08BDIJAICL@?$LP?M?$LL?$KH?$LG?K?C?$PL@ DB 0bfH, 0cdH, 0bbH, 0a7H, 0b6H
	DB	0cbH, 0c3H, 0fbH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IELLENBN@?$LH?$PO?N?q?F?w?C?$PL@
CONST	SEGMENT
??_C@_08IELLENBN@?$LH?$PO?N?q?F?w?C?$PL@ DB 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H
	DB	0c3H, 0fbH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHOHCJJH@?A?$KM?$LN?S?$LF?X?V?$LH@
CONST	SEGMENT
??_C@_08IHOHCJJH@?A?$KM?$LN?S?$LF?X?V?$LH@ DB 0c1H, 0acH, 0bdH, 0d3H, 0b5H
	DB	0d8H, 0d6H, 0b7H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENLFOAJ@?J?$PN?$LO?$NN?$LP?b?C?$PL@
CONST	SEGMENT
??_C@_08ENLFOAJ@?J?$PN?$LO?$NN?$LP?b?C?$PL@ DB 0caH, 0fdH, 0beH, 0ddH, 0bfH
	DB	0e2H, 0c3H, 0fbH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIAECBD@?W?i?$LM?$PO?W?$LE?L?$KM@
CONST	SEGMENT
??_C@_08OIAECBD@?W?i?$LM?$PO?W?$LE?L?$KM@ DB 0d7H, 0e9H, 0bcH, 0feH, 0d7H
	DB	0b4H, 0ccH, 0acH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGLMENIG@?S?N?O?$LH?C?$PL?W?V@
CONST	SEGMENT
??_C@_08MGLMENIG@?S?N?O?$LH?C?$PL?W?V@ DB 0d3H, 0ceH, 0cfH, 0b7H, 0c3H, 0fbH
	DB	0d7H, 0d6H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CModuleListControl@@6B@
CONST	SEGMENT
??_7CModuleListControl@@6B@ DD FLAT:??_R4CModuleListControl@@6B@ ; CModuleListControl::`vftable'
	DD	FLAT:?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECModuleListControl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CWnd@@UBEXXZ
	DD	FLAT:?Dump@CWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CListControl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CListControl@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?ResizeDynamicLayout@CWnd@@MAEXXZ
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?DrawItem@CListControl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:?InitListControl@CModuleListControl@@UAEXXZ
	DD	FLAT:?SortListItemData@CModuleListControl@@UAEHJJG@Z
	DD	FLAT:?GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 061H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_R2CCmdTarget@@8
rdata$r	SEGMENT
??_R2CCmdTarget@@8 DD FLAT:??_R1A@?0A@EA@CCmdTarget@@8	; CCmdTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCmdTarget@@8
rdata$r	SEGMENT
??_R3CCmdTarget@@8 DD 00H				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
data$r	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CWnd@@8
rdata$r	SEGMENT
??_R2CWnd@@8 DD	FLAT:??_R1A@?0A@EA@CWnd@@8		; CWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CWnd@@8
rdata$r	SEGMENT
??_R3CWnd@@8 DD	00H					; CWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
data$r	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECModuleListControl@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001b	68 9c 02 00 00	 push	 668			; 0000029cH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00039	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0003d	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0003f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0004a	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  00067	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006b	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00073	8a 11		 mov	 dl, BYTE PTR [ecx]
  00075	88 10		 mov	 BYTE PTR [eax], dl
  00077	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECModuleListControl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECModuleListControl@@UAEPAXI@Z PROC			; CModuleListControl::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECModuleListControl@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 47		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CModuleListControl@@UAE@XZ ; CModuleListControl::~CModuleListControl
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	68 08 01 00 00	 push	 264			; 00000108H
  00044	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00050	83 e0 01	 and	 eax, 1
  00053	74 1d		 je	 SHORT $LN3@vector
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	69 48 fc 08 01
	00 00		 imul	 ecx, DWORD PTR [eax-4], 264
  0005f	83 c1 04	 add	 ecx, 4
  00062	51		 push	 ecx
  00063	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 ea 04	 sub	 edx, 4
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006f	83 c4 08	 add	 esp, 8
$LN3@vector:
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 e8 04	 sub	 eax, 4
  00078	eb 37		 jmp	 SHORT $LN8@vector
$LN2@vector:
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1CModuleListControl@@UAE@XZ ; CModuleListControl::~CModuleListControl
  00082	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00085	83 e0 01	 and	 eax, 1
  00088	74 24		 je	 SHORT $LN4@vector
  0008a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0008d	83 e0 04	 and	 eax, 4
  00090	75 0b		 jne	 SHORT $LN5@vector
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0009b	eb 11		 jmp	 SHORT $LN4@vector
$LN5@vector:
  0009d	68 08 01 00 00	 push	 264			; 00000108H
  000a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  000ab	83 c4 08	 add	 esp, 8
$LN4@vector:
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN8@vector:
  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECModuleListControl@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECModuleListControl@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECModuleListControl@@UAEPAXI@Z ENDP			; CModuleListControl::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCModuleListControl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCModuleListControl@@UAEPAXI@Z PROC			; CModuleListControl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CModuleListControl@@UAE@XZ ; CModuleListControl::~CModuleListControl
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 24		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 11		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	68 08 01 00 00	 push	 264			; 00000108H
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003d	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??_GCModuleListControl@@UAEPAXI@Z ENDP			; CModuleListControl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?GetDescribeString@CModuleListControl@@AAEPBDPAUtagGameModuleInfo@@G@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
_this$ = -4						; size = 4
_pGameModuleInfo$ = 8					; size = 4
_wColumnIndex$ = 12					; size = 2
?GetDescribeString@CModuleListControl@@AAEPBDPAUtagGameModuleInfo@@G@Z PROC ; CModuleListControl::GetDescribeString, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 198  : 	//构造字符
; 199  : 	switch (wColumnIndex)

  0000c	0f b7 45 0c	 movzx	 eax, WORD PTR _wColumnIndex$[ebp]
  00010	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  00013	83 7d b8 05	 cmp	 DWORD PTR tv65[ebp], 5
  00017	77 5e		 ja	 SHORT $LN2@GetDescrib
  00019	8b 4d b8	 mov	 ecx, DWORD PTR tv65[ebp]
  0001c	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@GetDescrib[ecx*4]
$LN4@GetDescrib:

; 200  : 	{
; 201  : 	case 0:		//游戏名字
; 202  : 		{
; 203  : 			return pGameModuleInfo->szGameName;

  00023	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  00026	83 c0 3d	 add	 eax, 61			; 0000003dH
  00029	eb 4e		 jmp	 SHORT $LN1@GetDescrib
$LN5@GetDescrib:

; 204  : 		}
; 205  : 	case 1:		//组件状态
; 206  : 		{
; 207  : 			if (pGameModuleInfo->dwNativeVersion==0L) return TEXT("没有安装");

  0002b	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  0002e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00032	75 07		 jne	 SHORT $LN6@GetDescrib
  00034	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08FAIKBINC@?C?$LL?S?P?$LA?$LC?W?$LA@
  00039	eb 3e		 jmp	 SHORT $LN1@GetDescrib
$LN6@GetDescrib:

; 208  : 			if (pGameModuleInfo->dwServerVersion!=pGameModuleInfo->dwNativeVersion) return TEXT("存在更新");

  0003b	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _pGameModuleInfo$[ebp]
  00041	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00044	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00047	74 07		 je	 SHORT $LN7@GetDescrib
  00049	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08DNKKCEAP@?$LE?f?T?Z?$LI?$PM?P?B@
  0004e	eb 29		 jmp	 SHORT $LN1@GetDescrib
$LN7@GetDescrib:

; 209  : 			return TEXT("已经安装");

  00050	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08PHMHMBKJ@?R?Q?$LO?$KN?$LA?$LC?W?$LA@
  00055	eb 22		 jmp	 SHORT $LN1@GetDescrib
$LN8@GetDescrib:

; 210  : 		}
; 211  : 	case 2:		//数据库名
; 212  : 		{
; 213  : 			return pGameModuleInfo->szDataBaseName;

  00057	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  0005a	83 c0 1d	 add	 eax, 29			; 0000001dH
  0005d	eb 1a		 jmp	 SHORT $LN1@GetDescrib
$LN9@GetDescrib:

; 214  : 		}
; 215  : 	case 3:		//连接地址
; 216  : 		{
; 217  : 			return pGameModuleInfo->szDataBaseAddr;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  00062	83 c0 0e	 add	 eax, 14			; 0000000eH
  00065	eb 12		 jmp	 SHORT $LN1@GetDescrib
$LN10@GetDescrib:

; 218  : 		}
; 219  : 	case 4:		//服务器名
; 220  : 		{
; 221  : 			return pGameModuleInfo->szServerDLLName;

  00067	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  0006a	83 c0 5d	 add	 eax, 93			; 0000005dH
  0006d	eb 0a		 jmp	 SHORT $LN1@GetDescrib
$LN11@GetDescrib:

; 222  : 		}
; 223  : 	case 5:		//客户端名
; 224  : 		{
; 225  : 			return pGameModuleInfo->szClientEXEName;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  00072	83 c0 7d	 add	 eax, 125		; 0000007dH
  00075	eb 02		 jmp	 SHORT $LN1@GetDescrib
$LN2@GetDescrib:

; 226  : 		}
; 227  : 	}
; 228  : 
; 229  : 	return NULL;

  00077	33 c0		 xor	 eax, eax
$LN1@GetDescrib:

; 230  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
  00082	66 90		 npad	 2
$LN13@GetDescrib:
  00084	00 00 00 00	 DD	 $LN4@GetDescrib
  00088	00 00 00 00	 DD	 $LN5@GetDescrib
  0008c	00 00 00 00	 DD	 $LN8@GetDescrib
  00090	00 00 00 00	 DD	 $LN9@GetDescrib
  00094	00 00 00 00	 DD	 $LN10@GetDescrib
  00098	00 00 00 00	 DD	 $LN11@GetDescrib
?GetDescribeString@CModuleListControl@@AAEPBDPAUtagGameModuleInfo@@G@Z ENDP ; CModuleListControl::GetDescribeString
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?GetInsertIndex@CModuleListControl@@AAEGPAUtagGameModuleInfo@@@Z
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_pGameModuleTemp$ = -12					; size = 4
_nItemCount$ = -8					; size = 4
_this$ = -4						; size = 4
_pGameModuleInfo$ = 8					; size = 4
?GetInsertIndex@CModuleListControl@@AAEGPAUtagGameModuleInfo@@@Z PROC ; CModuleListControl::GetInsertIndex, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 	//变量定义
; 170  : 	INT nItemCount=GetItemCount();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?GetItemCount@CListCtrl@@QBEHXZ ; CListCtrl::GetItemCount
  00014	89 45 f8	 mov	 DWORD PTR _nItemCount$[ebp], eax

; 171  : 	tagGameModuleInfo * pGameModuleTemp=NULL;

  00017	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pGameModuleTemp$[ebp], 0

; 172  : 
; 173  : 	//获取位置
; 174  : 	for (INT i=0;i<nItemCount;i++)

  0001e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@GetInsertI
$LN2@GetInsertI:
  00027	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetInsertI:
  00030	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  00033	3b 45 f8	 cmp	 eax, DWORD PTR _nItemCount$[ebp]
  00036	7d 43		 jge	 SHORT $LN3@GetInsertI

; 175  : 	{
; 176  : 		//获取数据
; 177  : 		pGameModuleTemp=(tagGameModuleInfo *)GetItemData(i);

  00038	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?GetItemData@CListCtrl@@QBEKH@Z ; CListCtrl::GetItemData
  00044	89 45 f4	 mov	 DWORD PTR _pGameModuleTemp$[ebp], eax

; 178  : 
; 179  : 		//安装判断
; 180  : 		if ((pGameModuleInfo->dwNativeVersion==0)&&(pGameModuleTemp->dwNativeVersion!=0))

  00047	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  0004a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004e	75 0b		 jne	 SHORT $LN5@GetInsertI
  00050	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleTemp$[ebp]
  00053	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00057	74 02		 je	 SHORT $LN5@GetInsertI

; 181  : 		{
; 182  : 			continue;

  00059	eb cc		 jmp	 SHORT $LN2@GetInsertI
$LN5@GetInsertI:

; 183  : 		}
; 184  : 		
; 185  : 		//名字判断
; 186  : 		if (lstrcmp(pGameModuleInfo->szGameName,pGameModuleTemp->szGameName)<0)

  0005b	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleTemp$[ebp]
  0005e	83 c0 3d	 add	 eax, 61			; 0000003dH
  00061	50		 push	 eax
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _pGameModuleInfo$[ebp]
  00065	83 c1 3d	 add	 ecx, 61			; 0000003dH
  00068	51		 push	 ecx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpA@8
  0006f	85 c0		 test	 eax, eax
  00071	7d 06		 jge	 SHORT $LN6@GetInsertI

; 187  : 		{
; 188  : 			return i;

  00073	66 8b 45 f0	 mov	 ax, WORD PTR _i$1[ebp]
  00077	eb 06		 jmp	 SHORT $LN1@GetInsertI
$LN6@GetInsertI:

; 189  : 		}
; 190  : 	}

  00079	eb ac		 jmp	 SHORT $LN2@GetInsertI
$LN3@GetInsertI:

; 191  : 
; 192  : 	return nItemCount;

  0007b	66 8b 45 f8	 mov	 ax, WORD PTR _nItemCount$[ebp]
$LN1@GetInsertI:

; 193  : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?GetInsertIndex@CModuleListControl@@AAEGPAUtagGameModuleInfo@@@Z ENDP ; CModuleListControl::GetInsertIndex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?InsertModuleInfo@CModuleListControl@@QAE_NPAUtagGameModuleInfo@@@Z
_TEXT	SEGMENT
_pszDescribe$1 = -44					; size = 4
_nIndex$2 = -40						; size = 4
_i$3 = -36						; size = 2
_nInsertItem$ = -32					; size = 4
_FindInfo$ = -28					; size = 24
_this$ = -4						; size = 4
_pGameModuleInfo$ = 8					; size = 4
?InsertModuleInfo@CModuleListControl@@QAE_NPAUtagGameModuleInfo@@@Z PROC ; CModuleListControl::InsertModuleInfo, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 134  : 	//变量定义
; 135  : 	LVFINDINFO FindInfo;
; 136  : 	ZeroMemory(&FindInfo,sizeof(FindInfo));

  0000c	6a 18		 push	 24			; 00000018H
  0000e	6a 00		 push	 0
  00010	8d 45 e4	 lea	 eax, DWORD PTR _FindInfo$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 137  : 
; 138  : 	//设置变量
; 139  : 	FindInfo.flags=LVFI_PARAM;

  0001c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _FindInfo$[ebp], 1

; 140  : 	FindInfo.lParam=(LPARAM)pGameModuleInfo;

  00023	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR _FindInfo$[ebp+8], eax

; 141  : 
; 142  : 	//存在判断
; 143  : 	INT nInsertItem=FindItem(&FindInfo);

  00029	6a ff		 push	 -1
  0002b	8d 45 e4	 lea	 eax, DWORD PTR _FindInfo$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?FindItem@CListCtrl@@QBEHPAUtagLVFINDINFOA@@H@Z ; CListCtrl::FindItem
  00037	89 45 e0	 mov	 DWORD PTR _nInsertItem$[ebp], eax

; 144  : 	if (nInsertItem!=LB_ERR) return true;

  0003a	83 7d e0 ff	 cmp	 DWORD PTR _nInsertItem$[ebp], -1
  0003e	74 07		 je	 SHORT $LN5@InsertModu
  00040	b0 01		 mov	 al, 1
  00042	e9 b1 00 00 00	 jmp	 $LN1@InsertModu
$LN5@InsertModu:

; 145  : 
; 146  : 	//插入列表
; 147  : 	for (WORD i=0;i<m_ListHeaderCtrl.GetItemCount();i++)

  00047	33 c0		 xor	 eax, eax
  00049	66 89 45 dc	 mov	 WORD PTR _i$3[ebp], ax
  0004d	eb 0c		 jmp	 SHORT $LN4@InsertModu
$LN2@InsertModu:
  0004f	66 8b 45 dc	 mov	 ax, WORD PTR _i$3[ebp]
  00053	66 83 c0 01	 add	 ax, 1
  00057	66 89 45 dc	 mov	 WORD PTR _i$3[ebp], ax
$LN4@InsertModu:
  0005b	0f b7 75 dc	 movzx	 esi, WORD PTR _i$3[ebp]
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00068	e8 00 00 00 00	 call	 ?GetItemCount@CHeaderCtrl@@QBEHXZ ; CHeaderCtrl::GetItemCount
  0006d	3b f0		 cmp	 esi, eax
  0006f	0f 8d 81 00 00
	00		 jge	 $LN3@InsertModu

; 148  : 	{
; 149  : 		if (i==0)

  00075	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  00079	85 c0		 test	 eax, eax
  0007b	75 47		 jne	 SHORT $LN6@InsertModu

; 150  : 		{
; 151  : 			//插入首项
; 152  : 			INT nIndex=GetInsertIndex(pGameModuleInfo);

  0007d	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  00080	50		 push	 eax
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?GetInsertIndex@CModuleListControl@@AAEGPAUtagGameModuleInfo@@@Z ; CModuleListControl::GetInsertIndex
  00089	0f b7 c8	 movzx	 ecx, ax
  0008c	89 4d d8	 mov	 DWORD PTR _nIndex$2[ebp], ecx

; 153  : 			LPCTSTR pszDescribe=GetDescribeString(pGameModuleInfo,i);

  0008f	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  00093	50		 push	 eax
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _pGameModuleInfo$[ebp]
  00097	51		 push	 ecx
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ?GetDescribeString@CModuleListControl@@AAEPBDPAUtagGameModuleInfo@@G@Z ; CModuleListControl::GetDescribeString
  000a0	89 45 d4	 mov	 DWORD PTR _pszDescribe$1[ebp], eax

; 154  : 			nInsertItem=InsertItem(LVIF_TEXT|LVIF_PARAM,nIndex,pszDescribe,0,0,0,(LPARAM)pGameModuleInfo);

  000a3	8b 45 08	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  000a6	50		 push	 eax
  000a7	6a 00		 push	 0
  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	8b 4d d4	 mov	 ecx, DWORD PTR _pszDescribe$1[ebp]
  000b0	51		 push	 ecx
  000b1	8b 55 d8	 mov	 edx, DWORD PTR _nIndex$2[ebp]
  000b4	52		 push	 edx
  000b5	6a 05		 push	 5
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?InsertItem@CListCtrl@@QAEHIHPBDIIHJ@Z ; CListCtrl::InsertItem
  000bf	89 45 e0	 mov	 DWORD PTR _nInsertItem$[ebp], eax

; 155  : 		}
; 156  : 		else

  000c2	eb 2d		 jmp	 SHORT $LN7@InsertModu
$LN6@InsertModu:

; 157  : 		{
; 158  : 			//字符子项
; 159  : 			SetItem(nInsertItem,i,LVIF_TEXT,GetDescribeString(pGameModuleInfo,i),0,0,0,0);

  000c4	6a 00		 push	 0
  000c6	6a 00		 push	 0
  000c8	6a 00		 push	 0
  000ca	6a 00		 push	 0
  000cc	0f b7 45 dc	 movzx	 eax, WORD PTR _i$3[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _pGameModuleInfo$[ebp]
  000d4	51		 push	 ecx
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	e8 00 00 00 00	 call	 ?GetDescribeString@CModuleListControl@@AAEPBDPAUtagGameModuleInfo@@G@Z ; CModuleListControl::GetDescribeString
  000dd	50		 push	 eax
  000de	6a 01		 push	 1
  000e0	0f b7 55 dc	 movzx	 edx, WORD PTR _i$3[ebp]
  000e4	52		 push	 edx
  000e5	8b 45 e0	 mov	 eax, DWORD PTR _nInsertItem$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?SetItem@CListCtrl@@QAEHHHIPBDHIIJ@Z ; CListCtrl::SetItem
$LN7@InsertModu:

; 160  : 		}
; 161  : 	}

  000f1	e9 59 ff ff ff	 jmp	 $LN2@InsertModu
$LN3@InsertModu:

; 162  : 
; 163  : 	return true;

  000f6	b0 01		 mov	 al, 1
$LN1@InsertModu:

; 164  : }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 04 00	 ret	 4
?InsertModuleInfo@CModuleListControl@@QAE_NPAUtagGameModuleInfo@@@Z ENDP ; CModuleListControl::InsertModuleInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z
_TEXT	SEGMENT
tv128 = -76						; size = 4
tv92 = -76						; size = 4
tv85 = -76						; size = 4
tv77 = -76						; size = 4
_pGameModuleInfo$ = -8					; size = 4
_this$ = -4						; size = 4
_lItemParam$ = 8					; size = 4
_uItemStatus$ = 12					; size = 4
_ListItemColor$ = 16					; size = 4
?GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z PROC ; CModuleListControl::GetListItemColor, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	//变量定义
; 95   : 	ASSERT(lItemParam!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _lItemParam$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@GetListIte
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GCCBHGFM@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN6@GetListIte
  00029	cc		 int	 3
$LN6@GetListIte:

; 96   : 	tagGameModuleInfo * pGameModuleInfo=(tagGameModuleInfo *)lItemParam;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _lItemParam$[ebp]
  0002d	89 45 f8	 mov	 DWORD PTR _pGameModuleInfo$[ebp], eax

; 97   : 
; 98   : 	//没有安装
; 99   : 	if (pGameModuleInfo->dwNativeVersion==0L)

  00030	8b 45 f8	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  00033	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00037	75 2f		 jne	 SHORT $LN2@GetListIte

; 100  : 	{
; 101  : 		//设置颜色
; 102  : 		ListItemColor.rcTextColor=RGB(125,125,125);

  00039	8b 45 10	 mov	 eax, DWORD PTR _ListItemColor$[ebp]
  0003c	c7 00 7d 7d 7d
	00		 mov	 DWORD PTR [eax], 8224125 ; 007d7d7dH

; 103  : 		ListItemColor.rcBackColor=(uItemStatus&ODS_SELECTED)?RGB(50,50,50):CR_NORMAL_BK;

  00042	8b 45 0c	 mov	 eax, DWORD PTR _uItemStatus$[ebp]
  00045	83 e0 01	 and	 eax, 1
  00048	74 09		 je	 SHORT $LN7@GetListIte
  0004a	c7 45 b4 32 32
	32 00		 mov	 DWORD PTR tv77[ebp], 3289650 ; 00323232H
  00051	eb 07		 jmp	 SHORT $LN8@GetListIte
$LN7@GetListIte:
  00053	c7 45 b4 ff ff
	ff 00		 mov	 DWORD PTR tv77[ebp], 16777215 ; 00ffffffH
$LN8@GetListIte:
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _ListItemColor$[ebp]
  0005d	8b 55 b4	 mov	 edx, DWORD PTR tv77[ebp]
  00060	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 104  : 
; 105  : 		return;

  00063	e9 89 00 00 00	 jmp	 $LN1@GetListIte
$LN2@GetListIte:

; 106  : 	}
; 107  : 
; 108  : 	//存在更新
; 109  : 	if (pGameModuleInfo->dwNativeVersion!=pGameModuleInfo->dwServerVersion)

  00068	8b 45 f8	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo$[ebp]
  0006e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00071	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00074	74 2c		 je	 SHORT $LN3@GetListIte

; 110  : 	{
; 111  : 		//设置颜色
; 112  : 		ListItemColor.rcTextColor=RGB(128,0,0);

  00076	8b 45 10	 mov	 eax, DWORD PTR _ListItemColor$[ebp]
  00079	c7 00 80 00 00
	00		 mov	 DWORD PTR [eax], 128	; 00000080H

; 113  : 		ListItemColor.rcBackColor=(uItemStatus&ODS_SELECTED)?RGB(230,230,0):CR_NORMAL_BK;

  0007f	8b 45 0c	 mov	 eax, DWORD PTR _uItemStatus$[ebp]
  00082	83 e0 01	 and	 eax, 1
  00085	74 09		 je	 SHORT $LN9@GetListIte
  00087	c7 45 b4 e6 e6
	00 00		 mov	 DWORD PTR tv85[ebp], 59110 ; 0000e6e6H
  0008e	eb 07		 jmp	 SHORT $LN10@GetListIte
$LN9@GetListIte:
  00090	c7 45 b4 ff ff
	ff 00		 mov	 DWORD PTR tv85[ebp], 16777215 ; 00ffffffH
$LN10@GetListIte:
  00097	8b 4d 10	 mov	 ecx, DWORD PTR _ListItemColor$[ebp]
  0009a	8b 55 b4	 mov	 edx, DWORD PTR tv85[ebp]
  0009d	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 114  : 
; 115  : 		return;

  000a0	eb 4f		 jmp	 SHORT $LN1@GetListIte
$LN3@GetListIte:

; 116  : 	}
; 117  : 
; 118  : 	//版本一致
; 119  : 	if (pGameModuleInfo->dwNativeVersion==pGameModuleInfo->dwServerVersion)

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _pGameModuleInfo$[ebp]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo$[ebp]
  000a8	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ab	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000ae	75 41		 jne	 SHORT $LN1@GetListIte

; 120  : 	{
; 121  : 		//设置颜色
; 122  : 		ListItemColor.rcBackColor=(uItemStatus&ODS_SELECTED)?RGB(0,0,128):CR_NORMAL_BK;

  000b0	8b 45 0c	 mov	 eax, DWORD PTR _uItemStatus$[ebp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	74 09		 je	 SHORT $LN11@GetListIte
  000b8	c7 45 b4 00 00
	80 00		 mov	 DWORD PTR tv92[ebp], 8388608 ; 00800000H
  000bf	eb 07		 jmp	 SHORT $LN12@GetListIte
$LN11@GetListIte:
  000c1	c7 45 b4 ff ff
	ff 00		 mov	 DWORD PTR tv92[ebp], 16777215 ; 00ffffffH
$LN12@GetListIte:
  000c8	8b 4d 10	 mov	 ecx, DWORD PTR _ListItemColor$[ebp]
  000cb	8b 55 b4	 mov	 edx, DWORD PTR tv92[ebp]
  000ce	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 123  : 		ListItemColor.rcTextColor=(uItemStatus&ODS_SELECTED)?RGB(255,255,255):RGB(0,0,0);

  000d1	8b 45 0c	 mov	 eax, DWORD PTR _uItemStatus$[ebp]
  000d4	83 e0 01	 and	 eax, 1
  000d7	74 09		 je	 SHORT $LN13@GetListIte
  000d9	c7 45 b4 ff ff
	ff 00		 mov	 DWORD PTR tv128[ebp], 16777215 ; 00ffffffH
  000e0	eb 07		 jmp	 SHORT $LN14@GetListIte
$LN13@GetListIte:
  000e2	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN14@GetListIte:
  000e9	8b 4d 10	 mov	 ecx, DWORD PTR _ListItemColor$[ebp]
  000ec	8b 55 b4	 mov	 edx, DWORD PTR tv128[ebp]
  000ef	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@GetListIte:

; 124  : 
; 125  : 		return;
; 126  : 	}
; 127  : 
; 128  : 	return;
; 129  : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 0c 00	 ret	 12			; 0000000cH
?GetListItemColor@CModuleListControl@@UAEXJIAAUtagListItemColor@@@Z ENDP ; CModuleListControl::GetListItemColor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?SortListItemData@CModuleListControl@@UAEHJJG@Z
_TEXT	SEGMENT
tv134 = -84						; size = 4
tv129 = -84						; size = 4
tv90 = -84						; size = 4
tv79 = -84						; size = 4
tv77 = -84						; size = 4
tv70 = -84						; size = 4
tv66 = -84						; size = 4
_cbStatus2$1 = -16					; size = 1
_cbStatus1$2 = -15					; size = 1
_bInstall2$ = -14					; size = 1
_bInstall1$ = -13					; size = 1
_pGameModuleInfo2$ = -12				; size = 4
_pGameModuleInfo1$ = -8					; size = 4
_this$ = -4						; size = 4
_lParam1$ = 8						; size = 4
_lParam2$ = 12						; size = 4
_wColumnIndex$ = 16					; size = 2
?SortListItemData@CModuleListControl@@UAEHJJG@Z PROC	; CModuleListControl::SortListItemData, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 	//变量定义
; 37   : 	tagGameModuleInfo * pGameModuleInfo1=(tagGameModuleInfo *)lParam1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lParam1$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _pGameModuleInfo1$[ebp], eax

; 38   : 	tagGameModuleInfo * pGameModuleInfo2=(tagGameModuleInfo *)lParam2;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _lParam2$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR _pGameModuleInfo2$[ebp], eax

; 39   : 
; 40   : 	//安装排序
; 41   : 	bool bInstall1=(pGameModuleInfo1->dwNativeVersion!=0L);

  00018	8b 45 f8	 mov	 eax, DWORD PTR _pGameModuleInfo1$[ebp]
  0001b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001f	74 09		 je	 SHORT $LN14@SortListIt
  00021	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00028	eb 07		 jmp	 SHORT $LN15@SortListIt
$LN14@SortListIt:
  0002a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN15@SortListIt:
  00031	8a 4d ac	 mov	 cl, BYTE PTR tv66[ebp]
  00034	88 4d f3	 mov	 BYTE PTR _bInstall1$[ebp], cl

; 42   : 	bool bInstall2=(pGameModuleInfo2->dwNativeVersion!=0L);

  00037	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  0003a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003e	74 09		 je	 SHORT $LN16@SortListIt
  00040	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00047	eb 07		 jmp	 SHORT $LN17@SortListIt
$LN16@SortListIt:
  00049	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN17@SortListIt:
  00050	8a 4d ac	 mov	 cl, BYTE PTR tv70[ebp]
  00053	88 4d f2	 mov	 BYTE PTR _bInstall2$[ebp], cl

; 43   : 	if (bInstall1!=bInstall2) return (bInstall1==true)?1:-1;

  00056	0f b6 45 f3	 movzx	 eax, BYTE PTR _bInstall1$[ebp]
  0005a	0f b6 4d f2	 movzx	 ecx, BYTE PTR _bInstall2$[ebp]
  0005e	3b c1		 cmp	 eax, ecx
  00060	74 21		 je	 SHORT $LN4@SortListIt
  00062	0f b6 45 f3	 movzx	 eax, BYTE PTR _bInstall1$[ebp]
  00066	83 f8 01	 cmp	 eax, 1
  00069	75 09		 jne	 SHORT $LN18@SortListIt
  0006b	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  00072	eb 07		 jmp	 SHORT $LN19@SortListIt
$LN18@SortListIt:
  00074	c7 45 ac ff ff
	ff ff		 mov	 DWORD PTR tv77[ebp], -1
$LN19@SortListIt:
  0007b	8b 45 ac	 mov	 eax, DWORD PTR tv77[ebp]
  0007e	e9 11 01 00 00	 jmp	 $LN1@SortListIt
$LN4@SortListIt:

; 44   : 
; 45   : 	//子项排序
; 46   : 	switch (wColumnIndex)

  00083	0f b7 45 10	 movzx	 eax, WORD PTR _wColumnIndex$[ebp]
  00087	89 45 ac	 mov	 DWORD PTR tv79[ebp], eax
  0008a	83 7d ac 05	 cmp	 DWORD PTR tv79[ebp], 5
  0008e	0f 87 fe 00 00
	00		 ja	 $LN2@SortListIt
  00094	8b 4d ac	 mov	 ecx, DWORD PTR tv79[ebp]
  00097	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN26@SortListIt[ecx*4]
$LN5@SortListIt:

; 47   : 	{
; 48   : 	case 0:		//游戏名字
; 49   : 		{
; 50   : 			return lstrcmp(pGameModuleInfo1->szGameName,pGameModuleInfo2->szGameName);

  0009e	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  000a1	83 c0 3d	 add	 eax, 61			; 0000003dH
  000a4	50		 push	 eax
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo1$[ebp]
  000a8	83 c1 3d	 add	 ecx, 61			; 0000003dH
  000ab	51		 push	 ecx
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpA@8
  000b2	e9 dd 00 00 00	 jmp	 $LN1@SortListIt
$LN6@SortListIt:

; 51   : 		}
; 52   : 	case 1:		//组件状态
; 53   : 		{
; 54   : 			//组件状态
; 55   : 			BYTE cbStatus1=0;

  000b7	c6 45 f1 00	 mov	 BYTE PTR _cbStatus1$2[ebp], 0

; 56   : 			if (pGameModuleInfo1->dwNativeVersion!=0)

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _pGameModuleInfo1$[ebp]
  000be	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000c2	74 24		 je	 SHORT $LN7@SortListIt

; 57   : 			{
; 58   : 				cbStatus1=(pGameModuleInfo1->dwNativeVersion==pGameModuleInfo1->dwServerVersion)?2:1;

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _pGameModuleInfo1$[ebp]
  000c7	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo1$[ebp]
  000ca	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000cd	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000d0	75 09		 jne	 SHORT $LN20@SortListIt
  000d2	c7 45 ac 02 00
	00 00		 mov	 DWORD PTR tv90[ebp], 2
  000d9	eb 07		 jmp	 SHORT $LN21@SortListIt
$LN20@SortListIt:
  000db	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
$LN21@SortListIt:
  000e2	8a 45 ac	 mov	 al, BYTE PTR tv90[ebp]
  000e5	88 45 f1	 mov	 BYTE PTR _cbStatus1$2[ebp], al
$LN7@SortListIt:

; 59   : 			}
; 60   : 
; 61   : 			//组件状态
; 62   : 			BYTE cbStatus2=0;

  000e8	c6 45 f0 00	 mov	 BYTE PTR _cbStatus2$1[ebp], 0

; 63   : 			if (pGameModuleInfo2->dwNativeVersion!=0)

  000ec	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  000ef	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000f3	74 24		 je	 SHORT $LN8@SortListIt

; 64   : 			{
; 65   : 				cbStatus2=(pGameModuleInfo2->dwNativeVersion==pGameModuleInfo2->dwServerVersion)?2:1;

  000f5	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  000f8	8b 4d f4	 mov	 ecx, DWORD PTR _pGameModuleInfo2$[ebp]
  000fb	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000fe	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00101	75 09		 jne	 SHORT $LN22@SortListIt
  00103	c7 45 ac 02 00
	00 00		 mov	 DWORD PTR tv129[ebp], 2
  0010a	eb 07		 jmp	 SHORT $LN23@SortListIt
$LN22@SortListIt:
  0010c	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv129[ebp], 1
$LN23@SortListIt:
  00113	8a 45 ac	 mov	 al, BYTE PTR tv129[ebp]
  00116	88 45 f0	 mov	 BYTE PTR _cbStatus2$1[ebp], al
$LN8@SortListIt:

; 66   : 			}
; 67   : 
; 68   : 			return (cbStatus1>cbStatus2)?SORT_POSITION_AFTER:SORT_POSITION_FRONT;

  00119	0f b6 45 f1	 movzx	 eax, BYTE PTR _cbStatus1$2[ebp]
  0011d	0f b6 4d f0	 movzx	 ecx, BYTE PTR _cbStatus2$1[ebp]
  00121	3b c1		 cmp	 eax, ecx
  00123	7e 09		 jle	 SHORT $LN24@SortListIt
  00125	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv134[ebp], 1
  0012c	eb 07		 jmp	 SHORT $LN25@SortListIt
$LN24@SortListIt:
  0012e	c7 45 ac ff ff
	ff ff		 mov	 DWORD PTR tv134[ebp], -1
$LN25@SortListIt:
  00135	8b 45 ac	 mov	 eax, DWORD PTR tv134[ebp]
  00138	eb 5a		 jmp	 SHORT $LN1@SortListIt
$LN9@SortListIt:

; 69   : 		}
; 70   : 	case 2:		//数据库名
; 71   : 		{
; 72   : 			return lstrcmp(pGameModuleInfo1->szDataBaseName,pGameModuleInfo2->szDataBaseName);

  0013a	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  0013d	83 c0 1d	 add	 eax, 29			; 0000001dH
  00140	50		 push	 eax
  00141	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo1$[ebp]
  00144	83 c1 1d	 add	 ecx, 29			; 0000001dH
  00147	51		 push	 ecx
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpA@8
  0014e	eb 44		 jmp	 SHORT $LN1@SortListIt
$LN10@SortListIt:

; 73   : 		}
; 74   : 	case 3:		//连接地址
; 75   : 		{
; 76   : 			return lstrcmp(pGameModuleInfo1->szDataBaseAddr,pGameModuleInfo2->szDataBaseAddr);

  00150	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  00153	83 c0 0e	 add	 eax, 14			; 0000000eH
  00156	50		 push	 eax
  00157	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo1$[ebp]
  0015a	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0015d	51		 push	 ecx
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpA@8
  00164	eb 2e		 jmp	 SHORT $LN1@SortListIt
$LN11@SortListIt:

; 77   : 		}
; 78   : 	case 4:		//服务器名
; 79   : 		{
; 80   : 			return lstrcmp(pGameModuleInfo1->szServerDLLName,pGameModuleInfo2->szServerDLLName);

  00166	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  00169	83 c0 5d	 add	 eax, 93			; 0000005dH
  0016c	50		 push	 eax
  0016d	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo1$[ebp]
  00170	83 c1 5d	 add	 ecx, 93			; 0000005dH
  00173	51		 push	 ecx
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpA@8
  0017a	eb 18		 jmp	 SHORT $LN1@SortListIt
$LN12@SortListIt:

; 81   : 		}
; 82   : 	case 5:		//客户端名
; 83   : 		{
; 84   : 			return lstrcmp(pGameModuleInfo1->szClientEXEName,pGameModuleInfo2->szClientEXEName);

  0017c	8b 45 f4	 mov	 eax, DWORD PTR _pGameModuleInfo2$[ebp]
  0017f	83 c0 7d	 add	 eax, 125		; 0000007dH
  00182	50		 push	 eax
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _pGameModuleInfo1$[ebp]
  00186	83 c1 7d	 add	 ecx, 125		; 0000007dH
  00189	51		 push	 ecx
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpA@8
  00190	eb 02		 jmp	 SHORT $LN1@SortListIt
$LN2@SortListIt:

; 85   : 		}
; 86   : 	}
; 87   : 
; 88   : 	return 0;

  00192	33 c0		 xor	 eax, eax
$LN1@SortListIt:

; 89   : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 0c 00	 ret	 12			; 0000000cH
  0019d	0f 1f 00	 npad	 3
$LN26@SortListIt:
  001a0	00 00 00 00	 DD	 $LN5@SortListIt
  001a4	00 00 00 00	 DD	 $LN6@SortListIt
  001a8	00 00 00 00	 DD	 $LN9@SortListIt
  001ac	00 00 00 00	 DD	 $LN10@SortListIt
  001b0	00 00 00 00	 DD	 $LN11@SortListIt
  001b4	00 00 00 00	 DD	 $LN12@SortListIt
?SortListItemData@CModuleListControl@@UAEHJJG@Z ENDP	; CModuleListControl::SortListItemData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?InitListControl@CModuleListControl@@UAEXXZ
_TEXT	SEGMENT
tv167 = -76						; size = 4
tv155 = -76						; size = 4
tv143 = -76						; size = 4
tv131 = -76						; size = 4
tv87 = -76						; size = 4
tv75 = -76						; size = 4
_nColIndex$ = -8					; size = 4
_this$ = -4						; size = 4
?InitListControl@CModuleListControl@@UAEXXZ PROC	; CModuleListControl::InitListControl, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	//变量定义
; 20   : 	INT nColIndex=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nColIndex$[ebp], 0

; 21   : 
; 22   : 	//配置列表
; 23   : 	InsertColumn(nColIndex++,TEXT("游戏名字"),LVCFMT_CENTER,80);

  00013	8b 45 f8	 mov	 eax, DWORD PTR _nColIndex$[ebp]
  00016	89 45 b4	 mov	 DWORD PTR tv75[ebp], eax
  00019	6a ff		 push	 -1
  0001b	6a 50		 push	 80			; 00000050H
  0001d	6a 02		 push	 2
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_08MGLMENIG@?S?N?O?$LH?C?$PL?W?V@
  00024	8b 4d b4	 mov	 ecx, DWORD PTR tv75[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn
  00030	8b 55 f8	 mov	 edx, DWORD PTR _nColIndex$[ebp]
  00033	83 c2 01	 add	 edx, 1
  00036	89 55 f8	 mov	 DWORD PTR _nColIndex$[ebp], edx

; 24   : 	InsertColumn(nColIndex++,TEXT("组件状态"),LVCFMT_CENTER,80);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _nColIndex$[ebp]
  0003c	89 45 b4	 mov	 DWORD PTR tv87[ebp], eax
  0003f	6a ff		 push	 -1
  00041	6a 50		 push	 80			; 00000050H
  00043	6a 02		 push	 2
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_08OIAECBD@?W?i?$LM?$PO?W?$LE?L?$KM@
  0004a	8b 4d b4	 mov	 ecx, DWORD PTR tv87[ebp]
  0004d	51		 push	 ecx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn
  00056	8b 55 f8	 mov	 edx, DWORD PTR _nColIndex$[ebp]
  00059	83 c2 01	 add	 edx, 1
  0005c	89 55 f8	 mov	 DWORD PTR _nColIndex$[ebp], edx

; 25   : 	InsertColumn(nColIndex++,TEXT("数据库名"),LVCFMT_LEFT,100);

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _nColIndex$[ebp]
  00062	89 45 b4	 mov	 DWORD PTR tv131[ebp], eax
  00065	6a ff		 push	 -1
  00067	6a 64		 push	 100			; 00000064H
  00069	6a 00		 push	 0
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_08ENLFOAJ@?J?$PN?$LO?$NN?$LP?b?C?$PL@
  00070	8b 4d b4	 mov	 ecx, DWORD PTR tv131[ebp]
  00073	51		 push	 ecx
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn
  0007c	8b 55 f8	 mov	 edx, DWORD PTR _nColIndex$[ebp]
  0007f	83 c2 01	 add	 edx, 1
  00082	89 55 f8	 mov	 DWORD PTR _nColIndex$[ebp], edx

; 26   : 	InsertColumn(nColIndex++,TEXT("连接地址"),LVCFMT_LEFT,100);

  00085	8b 45 f8	 mov	 eax, DWORD PTR _nColIndex$[ebp]
  00088	89 45 b4	 mov	 DWORD PTR tv143[ebp], eax
  0008b	6a ff		 push	 -1
  0008d	6a 64		 push	 100			; 00000064H
  0008f	6a 00		 push	 0
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_08IHOHCJJH@?A?$KM?$LN?S?$LF?X?V?$LH@
  00096	8b 4d b4	 mov	 ecx, DWORD PTR tv143[ebp]
  00099	51		 push	 ecx
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _nColIndex$[ebp]
  000a5	83 c2 01	 add	 edx, 1
  000a8	89 55 f8	 mov	 DWORD PTR _nColIndex$[ebp], edx

; 27   : 	InsertColumn(nColIndex++,TEXT("服务器名"),LVCFMT_LEFT,140);

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _nColIndex$[ebp]
  000ae	89 45 b4	 mov	 DWORD PTR tv155[ebp], eax
  000b1	6a ff		 push	 -1
  000b3	68 8c 00 00 00	 push	 140			; 0000008cH
  000b8	6a 00		 push	 0
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_08IELLENBN@?$LH?$PO?N?q?F?w?C?$PL@
  000bf	8b 4d b4	 mov	 ecx, DWORD PTR tv155[ebp]
  000c2	51		 push	 ecx
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn
  000cb	8b 55 f8	 mov	 edx, DWORD PTR _nColIndex$[ebp]
  000ce	83 c2 01	 add	 edx, 1
  000d1	89 55 f8	 mov	 DWORD PTR _nColIndex$[ebp], edx

; 28   : 	InsertColumn(nColIndex++,TEXT("客户端名"),LVCFMT_LEFT,120);

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _nColIndex$[ebp]
  000d7	89 45 b4	 mov	 DWORD PTR tv167[ebp], eax
  000da	6a ff		 push	 -1
  000dc	6a 78		 push	 120			; 00000078H
  000de	6a 00		 push	 0
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_08BDIJAICL@?$LP?M?$LL?$KH?$LG?K?C?$PL@
  000e5	8b 4d b4	 mov	 ecx, DWORD PTR tv167[ebp]
  000e8	51		 push	 ecx
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?InsertColumn@CListCtrl@@QAEHHPBDHHH@Z ; CListCtrl::InsertColumn
  000f1	8b 55 f8	 mov	 edx, DWORD PTR _nColIndex$[ebp]
  000f4	83 c2 01	 add	 edx, 1
  000f7	89 55 f8	 mov	 DWORD PTR _nColIndex$[ebp], edx

; 29   : 
; 30   : 	return;
; 31   : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
?InitListControl@CModuleListControl@@UAEXXZ ENDP	; CModuleListControl::InitListControl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ??1CModuleListControl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CModuleListControl@@UAE@XZ PROC			; CModuleListControl::~CModuleListControl, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CModuleListControl@@6B@

; 14   : }

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1CListControl@@UAE@XZ	; CListControl::~CListControl
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1CModuleListControl@@UAE@XZ ENDP			; CModuleListControl::~CModuleListControl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ??0CModuleListControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CModuleListControl@@QAE@XZ PROC			; CModuleListControl::CModuleListControl, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CListControl@@QAE@XZ	; CListControl::CListControl
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CModuleListControl@@6B@

; 9    : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CModuleListControl@@QAE@XZ ENDP			; CModuleListControl::CModuleListControl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00013	83 c4 04	 add	 esp, 4
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002a	6a 02		 push	 2
  0002c	6a 02		 push	 2
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  0003e	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00042	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  00044	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 105  : 	_CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _wmemcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	return (_Ptrdest);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -48						; size = 8
__Ptrnext$ = -40					; size = 4
__Ptrdest$ = -36					; size = 4
__Mbst1$ = -32						; size = 8
__Wc$ = -24						; size = 2
__Bytes$ = -20						; size = 4
__Ptr1$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Count1$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 e0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000e	89 45 e4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00033	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00036	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00044	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00047	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00053	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00057	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00059	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 45 f0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 __Mbrtowc
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  00078	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0007c	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0007e	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  00080	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  00082	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR __Wchars$[ebp], eax

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  0008b	68 ba 02 00 00	 push	 698			; 000002baH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	6a 02		 push	 2
  00099	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000a9	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000ad	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000af	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000b4	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000b7	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 703  : 	mbstate_t _Mbst2 = {};

  000ba	33 c0		 xor	 eax, eax
  000bc	89 45 d0	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000bf	89 45 d4	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000c2	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  000c7	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d0	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000d3	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000d6	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000d9	83 ea 01	 sub	 edx, 1
  000dc	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000df	8b 45 d8	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  000e2	83 c0 02	 add	 eax, 2
  000e5	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e8	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  000ec	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  000ee	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d d0	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __Count1$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 __Mbrtowc
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  0010d	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00111	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00113	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00115	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00117	33 c0		 xor	 eax, eax
  00119	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0011c	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0011f	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00009	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?__global_array_delete@@YAXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sz$ = 12						; size = 4
?__global_array_delete@@YAXPAXI@Z PROC			; __global_array_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?__global_array_delete@@YAXPAXI@Z ENDP			; __global_array_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?__global_array_delete@@YAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?__global_array_delete@@YAXPAX@Z PROC			; __global_array_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	83 c4 04	 add	 esp, 4
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?__global_array_delete@@YAXPAX@Z ENDP			; __global_array_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?__global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sz$ = 12						; size = 4
?__global_delete@@YAXPAXI@Z PROC			; __global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?__global_delete@@YAXPAXI@Z ENDP			; __global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?__global_delete@@YAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?__global_delete@@YAXPAX@Z PROC				; __global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?__global_delete@@YAXPAX@Z ENDP				; __global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\modulelistcontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
