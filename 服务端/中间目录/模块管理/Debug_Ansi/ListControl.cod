; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\模块管理\ListControl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?OnPaint@CListHeaderCtrl@@IAEXXZ		; CListHeaderCtrl::OnPaint
PUBLIC	?OnEraseBkgnd@CListControl@@IAEHPAVCDC@@@Z	; CListControl::OnEraseBkgnd
PUBLIC	?OnColumnclick@CListControl@@IAEXPAUtagNMHDR@@PAJ@Z ; CListControl::OnColumnclick
EXTRN	?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ:PROC ; CWnd::GetThisMessageMap
EXTRN	?GetThisMessageMap@CListCtrl@@KGPBUAFX_MSGMAP@@XZ:PROC ; CListCtrl::GetThisMessageMap
CONST	SEGMENT
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IGameServiceManager@@3U_GUID@@B DD 04b2b9d8fH	; IID_IGameServiceManager
	DW	0ce1bH
	DW	044f3H
	DB	0a5H
	DB	022H
	DB	065H
	DB	01aH
	DB	065H
	DB	0c9H
	DB	0aH
	DB	025H
?IID_IAndroidUserItemSink@@3U_GUID@@B DD 01e8a1918H	; IID_IAndroidUserItemSink
	DW	0572bH
	DW	0453bH
	DB	0bcH
	DB	0bH
	DB	06bH
	DB	061H
	DB	070H
	DB	0a3H
	DB	03cH
	DB	0caH
?_messageEntries@?1??GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 0fH ; `CListHeaderCtrl::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	013H
	DD	FLAT:?OnPaint@CListHeaderCtrl@@IAEXXZ
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?messageMap@?1??GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ ; `CListHeaderCtrl::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
?_messageEntries@?1??GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 014H ; `CListControl::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:?OnEraseBkgnd@CListControl@@IAEHPAVCDC@@@Z
	DD	0bc4eH
	DD	0ff94H
	DD	00H
	DD	00H
	DD	03eH
	DD	FLAT:?OnColumnclick@CListControl@@IAEXPAUtagNMHDR@@PAJ@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?messageMap@?1??GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CListCtrl@@KGPBUAFX_MSGMAP@@XZ ; `CListControl::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__global_delete@@YAXPAX@Z			; __global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__global_delete@@YAXPAXI@Z			; __global_delete
PUBLIC	?__global_array_delete@@YAXPAX@Z		; __global_array_delete
PUBLIC	?__global_array_delete@@YAXPAXI@Z		; __global_array_delete
PUBLIC	_wmemcpy
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	??0CRect@@QAE@ABUtagRECT@@@Z			; CRect::CRect
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?DeflateRect@CRect@@QAEXHHHH@Z			; CRect::DeflateRect
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0CListHeaderCtrl@@QAE@XZ			; CListHeaderCtrl::CListHeaderCtrl
PUBLIC	??1CListHeaderCtrl@@UAE@XZ			; CListHeaderCtrl::~CListHeaderCtrl
PUBLIC	?GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ ; CListHeaderCtrl::GetThisMessageMap
PUBLIC	?GetMessageMap@CListHeaderCtrl@@MBEPBUAFX_MSGMAP@@XZ ; CListHeaderCtrl::GetMessageMap
PUBLIC	??_GCListHeaderCtrl@@UAEPAXI@Z			; CListHeaderCtrl::`scalar deleting destructor'
PUBLIC	??_ECListHeaderCtrl@@UAEPAXI@Z			; CListHeaderCtrl::`vector deleting destructor'
PUBLIC	??0CListControl@@QAE@XZ				; CListControl::CListControl
PUBLIC	??1CListControl@@UAE@XZ				; CListControl::~CListControl
PUBLIC	?PreSubclassWindow@CListControl@@UAEXXZ		; CListControl::PreSubclassWindow
PUBLIC	?DrawItem@CListControl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z ; CListControl::DrawItem
PUBLIC	?SortFunction@CListControl@@KGHJJJ@Z		; CListControl::SortFunction
PUBLIC	?GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ ; CListControl::GetThisMessageMap
PUBLIC	?GetMessageMap@CListControl@@MBEPBUAFX_MSGMAP@@XZ ; CListControl::GetMessageMap
PUBLIC	??_GCListControl@@UAEPAXI@Z			; CListControl::`scalar deleting destructor'
PUBLIC	??_ECListControl@@UAEPAXI@Z			; CListControl::`vector deleting destructor'
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R3CWnd@@8					; CWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWnd@@8					; CWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R3CCmdTarget@@8				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCmdTarget@@8				; CCmdTarget::`RTTI Base Class Array'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7CListHeaderCtrl@@6B@			; CListHeaderCtrl::`vftable'
PUBLIC	??_7CListControl@@6B@				; CListControl::`vftable'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4CListHeaderCtrl@@6B@			; CListHeaderCtrl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCListHeaderCtrl@@@8			; CListHeaderCtrl `RTTI Type Descriptor'
PUBLIC	??_R3CListHeaderCtrl@@8				; CListHeaderCtrl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CListHeaderCtrl@@8				; CListHeaderCtrl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CListHeaderCtrl@@8		; CListHeaderCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CHeaderCtrl@@8			; CHeaderCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCHeaderCtrl@@@8				; CHeaderCtrl `RTTI Type Descriptor'
PUBLIC	??_R3CHeaderCtrl@@8				; CHeaderCtrl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHeaderCtrl@@8				; CHeaderCtrl::`RTTI Base Class Array'
PUBLIC	??_R4CListControl@@6B@				; CListControl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCListControl@@@8			; CListControl `RTTI Type Descriptor'
PUBLIC	??_R3CListControl@@8				; CListControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CListControl@@8				; CListControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CListControl@@8			; CListControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CListCtrl@@8			; CListCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCListCtrl@@@8				; CListCtrl `RTTI Type Descriptor'
PUBLIC	??_R3CListCtrl@@8				; CListCtrl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CListCtrl@@8				; CListCtrl::`RTTI Base Class Array'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__CopyRect@8:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z:PROC	; CDC::FromHandle
EXTRN	?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z:PROC	; CDC::SelectObject
EXTRN	?SetBkMode@CDC@@QAEHH@Z:PROC			; CDC::SetBkMode
EXTRN	?DrawFocusRect@CDC@@QAEXPBUtagRECT@@@Z:PROC	; CDC::DrawFocusRect
EXTRN	?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z:PROC	; CDC::DrawTextA
EXTRN	?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z:PROC ; CDC::DrawFrameControl
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:PROC	; CDC::FillSolidRect
EXTRN	?FillSolidRect@CDC@@QAEXHHHHK@Z:PROC		; CDC::FillSolidRect
EXTRN	??0CPaintDC@@QAE@PAVCWnd@@@Z:PROC		; CPaintDC::CPaintDC
EXTRN	??1CPaintDC@@UAE@XZ:PROC			; CPaintDC::~CPaintDC
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:PROC ; CCmdTarget::OnCmdMsg
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:PROC	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:PROC ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:PROC	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:PROC ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:PROC ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:PROC ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:PROC ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:PROC ; CCmdTarget::GetConnectionMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:PROC ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:PROC	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:PROC ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:PROC ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:PROC ; CCmdTarget::GetConnectionHook
EXTRN	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ:PROC	; CWnd::GetSafeHwnd
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:PROC		; CWnd::PreSubclassWindow
EXTRN	?SubclassWindow@CWnd@@QAEHPAUHWND__@@@Z:PROC	; CWnd::SubclassWindow
EXTRN	?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:PROC ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:PROC ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z:PROC ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:PROC		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z:PROC ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:PROC	; CWnd::CalcWindowRect
EXTRN	?GetFont@CWnd@@QBEPAVCFont@@XZ:PROC		; CWnd::GetFont
EXTRN	?GetMenu@CWnd@@UBEPAVCMenu@@XZ:PROC		; CWnd::GetMenu
EXTRN	?SetMenu@CWnd@@UAEHPAVCMenu@@@Z:PROC		; CWnd::SetMenu
EXTRN	?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z:PROC	; CWnd::GetWindowRect
EXTRN	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z:PROC	; CWnd::GetClientRect
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z:PROC ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:PROC ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::WinHelpA
EXTRN	?HtmlHelpA@CWnd@@UAEXKI@Z:PROC			; CWnd::HtmlHelpA
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:PROC		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:PROC		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:PROC		; CWnd::EndModalLoop
EXTRN	?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z:PROC ; CWnd::OnDrawIconicThumbnailOrLivePreview
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:PROC ; CWnd::GetInterfaceMap
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:PROC			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:PROC ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:PROC		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:PROC ; CWnd::get_accChild
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDescription
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accRole
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:PROC ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDefaultAction
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:PROC	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:PROC ; CWnd::accLocation
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:PROC	; CWnd::accHitTest
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:PROC ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:PROC ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:PROC	; CWnd::CreateAccessibleProxy
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:PROC			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:PROC		; CWnd::OnNotify
EXTRN	?OnEraseBkgnd@CWnd@@IAEHPAVCDC@@@Z:PROC		; CWnd::OnEraseBkgnd
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:PROC ; CWnd::GetSuperWndProcAddr
EXTRN	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z:PROC ; CWnd::DoDataExchange
EXTRN	?BeginModalState@CWnd@@UAEXXZ:PROC		; CWnd::BeginModalState
EXTRN	?EndModalState@CWnd@@UAEXXZ:PROC		; CWnd::EndModalState
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:PROC ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:PROC ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:PROC		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnWndMsg
EXTRN	?DefWindowProcA@CWnd@@MAEJIIJ@Z:PROC		; CWnd::DefWindowProcA
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:PROC		; CWnd::PostNcDestroy
EXTRN	?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInputs
EXTRN	?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInput
EXTRN	?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z:PROC	; CWnd::GetGestureStatus
EXTRN	?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z:PROC	; CWnd::OnGestureZoom
EXTRN	?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z:PROC	; CWnd::OnGesturePan
EXTRN	?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z:PROC	; CWnd::OnGestureRotate
EXTRN	?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z:PROC ; CWnd::OnGestureTwoFingerTap
EXTRN	?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z:PROC ; CWnd::OnGesturePressAndTap
EXTRN	?ResizeDynamicLayout@CWnd@@MAEXXZ:PROC		; CWnd::ResizeDynamicLayout
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:PROC		; CWnd::CheckAutoCenter
EXTRN	?AssertValid@CWnd@@UBEXXZ:PROC			; CWnd::AssertValid
EXTRN	?Dump@CWnd@@UBEXAAVCDumpContext@@@Z:PROC	; CWnd::Dump
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:PROC			; CWnd::IsFrameWnd
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:PROC		; CWnd::OnFinalRelease
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:PROC ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:PROC ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:PROC ; CWnd::SetOccDialogInfo
EXTRN	?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ:PROC ; CWnd::GetOccDialogInfo
EXTRN	?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ:PROC ; CListCtrl::GetRuntimeClass
EXTRN	??0CListCtrl@@QAE@XZ:PROC			; CListCtrl::CListCtrl
EXTRN	?GetBkColor@CListCtrl@@QBEKXZ:PROC		; CListCtrl::GetBkColor
EXTRN	?SetBkColor@CListCtrl@@QAEHK@Z:PROC		; CListCtrl::SetBkColor
EXTRN	?GetItemText@CListCtrl@@QBEHHHPADH@Z:PROC	; CListCtrl::GetItemText
EXTRN	?GetHeaderCtrl@CListCtrl@@QBEPAVCHeaderCtrl@@XZ:PROC ; CListCtrl::GetHeaderCtrl
EXTRN	?GetSubItemRect@CListCtrl@@QBEHHHHAAVCRect@@@Z:PROC ; CListCtrl::GetSubItemRect
EXTRN	?SetExtendedStyle@CListCtrl@@QAEKK@Z:PROC	; CListCtrl::SetExtendedStyle
EXTRN	?SortItems@CListCtrl@@QAEHP6GHJJJ@ZK@Z:PROC	; CListCtrl::SortItems
EXTRN	??1CListCtrl@@UAE@XZ:PROC			; CListCtrl::~CListCtrl
EXTRN	?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z:PROC	; CListCtrl::OnChildNotify
EXTRN	?GetRuntimeClass@CHeaderCtrl@@UBEPAUCRuntimeClass@@XZ:PROC ; CHeaderCtrl::GetRuntimeClass
EXTRN	??0CHeaderCtrl@@QAE@XZ:PROC			; CHeaderCtrl::CHeaderCtrl
EXTRN	?Create@CHeaderCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z:PROC ; CHeaderCtrl::Create
EXTRN	?CreateEx@CHeaderCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z:PROC ; CHeaderCtrl::CreateEx
EXTRN	?GetItemCount@CHeaderCtrl@@QBEHXZ:PROC		; CHeaderCtrl::GetItemCount
EXTRN	?GetItem@CHeaderCtrl@@QBEHHPAU_HD_ITEMA@@@Z:PROC ; CHeaderCtrl::GetItem
EXTRN	?GetItemRect@CHeaderCtrl@@QBEHHPAUtagRECT@@@Z:PROC ; CHeaderCtrl::GetItemRect
EXTRN	?DrawItem@CHeaderCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:PROC ; CHeaderCtrl::DrawItem
EXTRN	??1CHeaderCtrl@@UAE@XZ:PROC			; CHeaderCtrl::~CHeaderCtrl
EXTRN	?OnChildNotify@CHeaderCtrl@@MAEHIIJPAJ@Z:PROC	; CHeaderCtrl::OnChildNotify
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R2CListCtrl@@8
rdata$r	SEGMENT
??_R2CListCtrl@@8 DD FLAT:??_R1A@?0A@EA@CListCtrl@@8	; CListCtrl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CListCtrl@@8
rdata$r	SEGMENT
??_R3CListCtrl@@8 DD 00H				; CListCtrl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CListCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCListCtrl@@@8
data$r	SEGMENT
??_R0?AVCListCtrl@@@8 DD FLAT:??_7type_info@@6B@	; CListCtrl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCListCtrl@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CListCtrl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CListCtrl@@8 DD FLAT:??_R0?AVCListCtrl@@@8 ; CListCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CListCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CListControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CListControl@@8 DD FLAT:??_R0?AVCListControl@@@8 ; CListControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CListControl@@8
rdata$r	ENDS
;	COMDAT ??_R2CListControl@@8
rdata$r	SEGMENT
??_R2CListControl@@8 DD FLAT:??_R1A@?0A@EA@CListControl@@8 ; CListControl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CListCtrl@@8
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CListControl@@8
rdata$r	SEGMENT
??_R3CListControl@@8 DD 00H				; CListControl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CListControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCListControl@@@8
data$r	SEGMENT
??_R0?AVCListControl@@@8 DD FLAT:??_7type_info@@6B@	; CListControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCListControl@@', 00H
data$r	ENDS
;	COMDAT ??_R4CListControl@@6B@
rdata$r	SEGMENT
??_R4CListControl@@6B@ DD 00H				; CListControl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCListControl@@@8
	DD	FLAT:??_R3CListControl@@8
rdata$r	ENDS
;	COMDAT ??_R2CHeaderCtrl@@8
rdata$r	SEGMENT
??_R2CHeaderCtrl@@8 DD FLAT:??_R1A@?0A@EA@CHeaderCtrl@@8 ; CHeaderCtrl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CHeaderCtrl@@8
rdata$r	SEGMENT
??_R3CHeaderCtrl@@8 DD 00H				; CHeaderCtrl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CHeaderCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHeaderCtrl@@@8
data$r	SEGMENT
??_R0?AVCHeaderCtrl@@@8 DD FLAT:??_7type_info@@6B@	; CHeaderCtrl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHeaderCtrl@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHeaderCtrl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHeaderCtrl@@8 DD FLAT:??_R0?AVCHeaderCtrl@@@8 ; CHeaderCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHeaderCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CListHeaderCtrl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CListHeaderCtrl@@8 DD FLAT:??_R0?AVCListHeaderCtrl@@@8 ; CListHeaderCtrl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CListHeaderCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R2CListHeaderCtrl@@8
rdata$r	SEGMENT
??_R2CListHeaderCtrl@@8 DD FLAT:??_R1A@?0A@EA@CListHeaderCtrl@@8 ; CListHeaderCtrl::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CHeaderCtrl@@8
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CListHeaderCtrl@@8
rdata$r	SEGMENT
??_R3CListHeaderCtrl@@8 DD 00H				; CListHeaderCtrl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CListHeaderCtrl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCListHeaderCtrl@@@8
data$r	SEGMENT
??_R0?AVCListHeaderCtrl@@@8 DD FLAT:??_7type_info@@6B@	; CListHeaderCtrl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCListHeaderCtrl@@', 00H
data$r	ENDS
;	COMDAT ??_R4CListHeaderCtrl@@6B@
rdata$r	SEGMENT
??_R4CListHeaderCtrl@@6B@ DD 00H			; CListHeaderCtrl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCListHeaderCtrl@@@8
	DD	FLAT:??_R3CListHeaderCtrl@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CListControl@@6B@
CONST	SEGMENT
??_7CListControl@@6B@ DD FLAT:??_R4CListControl@@6B@	; CListControl::`vftable'
	DD	FLAT:?GetRuntimeClass@CListCtrl@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECListControl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CWnd@@UBEXXZ
	DD	FLAT:?Dump@CWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CListControl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CListControl@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CListCtrl@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?ResizeDynamicLayout@CWnd@@MAEXXZ
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?DrawItem@CListControl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7CListHeaderCtrl@@6B@
CONST	SEGMENT
??_7CListHeaderCtrl@@6B@ DD FLAT:??_R4CListHeaderCtrl@@6B@ ; CListHeaderCtrl::`vftable'
	DD	FLAT:?GetRuntimeClass@CHeaderCtrl@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECListHeaderCtrl@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CWnd@@UBEXXZ
	DD	FLAT:?Dump@CWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CListHeaderCtrl@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CHeaderCtrl@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?ResizeDynamicLayout@CWnd@@MAEXXZ
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CHeaderCtrl@@UAEHKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?CreateEx@CHeaderCtrl@@UAEHKKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?DrawItem@CHeaderCtrl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 061H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_R2CCmdTarget@@8
rdata$r	SEGMENT
??_R2CCmdTarget@@8 DD FLAT:??_R1A@?0A@EA@CCmdTarget@@8	; CCmdTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCmdTarget@@8
rdata$r	SEGMENT
??_R3CCmdTarget@@8 DD 00H				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
data$r	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CWnd@@8
rdata$r	SEGMENT
??_R2CWnd@@8 DD	FLAT:??_R1A@?0A@EA@CWnd@@8		; CWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CWnd@@8
rdata$r	SEGMENT
??_R3CWnd@@8 DD	00H					; CWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
data$r	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECListControl@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CListControl@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CListControl@@QAE@XZ$0
__ehfuncinfo$??0CListControl@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CListControl@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECListHeaderCtrl@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnPaint@CListHeaderCtrl@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnPaint@CListHeaderCtrl@@IAEXXZ$0
__ehfuncinfo$?OnPaint@CListHeaderCtrl@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnPaint@CListHeaderCtrl@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001b	68 9c 02 00 00	 push	 668			; 0000029cH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00039	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0003d	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0003f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0004a	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  00067	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006b	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00073	8a 11		 mov	 dl, BYTE PTR [ecx]
  00075	88 10		 mov	 BYTE PTR [eax], dl
  00077	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECListControl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECListControl@@UAEPAXI@Z PROC			; CListControl::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECListControl@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 47		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CListControl@@UAE@XZ ; CListControl::~CListControl
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	68 08 01 00 00	 push	 264			; 00000108H
  00044	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00050	83 e0 01	 and	 eax, 1
  00053	74 1d		 je	 SHORT $LN3@vector
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	69 48 fc 08 01
	00 00		 imul	 ecx, DWORD PTR [eax-4], 264
  0005f	83 c1 04	 add	 ecx, 4
  00062	51		 push	 ecx
  00063	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 ea 04	 sub	 edx, 4
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006f	83 c4 08	 add	 esp, 8
$LN3@vector:
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 e8 04	 sub	 eax, 4
  00078	eb 37		 jmp	 SHORT $LN8@vector
$LN2@vector:
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1CListControl@@UAE@XZ	; CListControl::~CListControl
  00082	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00085	83 e0 01	 and	 eax, 1
  00088	74 24		 je	 SHORT $LN4@vector
  0008a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0008d	83 e0 04	 and	 eax, 4
  00090	75 0b		 jne	 SHORT $LN5@vector
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0009b	eb 11		 jmp	 SHORT $LN4@vector
$LN5@vector:
  0009d	68 08 01 00 00	 push	 264			; 00000108H
  000a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  000ab	83 c4 08	 add	 esp, 8
$LN4@vector:
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN8@vector:
  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECListControl@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECListControl@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECListControl@@UAEPAXI@Z ENDP			; CListControl::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCListControl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCListControl@@UAEPAXI@Z PROC			; CListControl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CListControl@@UAE@XZ	; CListControl::~CListControl
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 24		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 11		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	68 08 01 00 00	 push	 264			; 00000108H
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003d	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??_GCListControl@@UAEPAXI@Z ENDP			; CListControl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?GetMessageMap@CListControl@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMessageMap@CListControl@@MBEPBUAFX_MSGMAP@@XZ PROC	; CListControl::GetMessageMap, COMDAT
; _this$ = ecx

; 26   : BEGIN_MESSAGE_MAP(CListControl, CListCtrl)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	e8 00 00 00 00	 call	 ?GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ ; CListControl::GetThisMessageMap
  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetMessageMap@CListControl@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CListControl::GetMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ PROC ; CListControl::GetThisMessageMap, COMDAT

; 26   : BEGIN_MESSAGE_MAP(CListControl, CListCtrl)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 27   : 	ON_WM_ERASEBKGND()
; 28   : 	ON_NOTIFY_REFLECT(LVN_COLUMNCLICK, OnColumnclick)
; 29   : END_MESSAGE_MAP()

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetThisMessageMap@CListControl@@KGPBUAFX_MSGMAP@@XZ ENDP ; CListControl::GetThisMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?OnColumnclick@CListControl@@IAEXPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT
tv73 = -84						; size = 4
_SortParameter$ = -16					; size = 8
_pNMListView$ = -8					; size = 4
_this$ = -4						; size = 4
_pNMHDR$ = 8						; size = 4
_pResult$ = 12						; size = 4
?OnColumnclick@CListControl@@IAEXPAUtagNMHDR@@PAJ@Z PROC ; CListControl::OnColumnclick, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 231  : 	//变量定义
; 232  : 	NM_LISTVIEW * pNMListView=(NM_LISTVIEW *)pNMHDR;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pNMHDR$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR _pNMListView$[ebp], eax

; 233  : 
; 234  : 	//变量定义
; 235  : 	tagSortParameter SortParameter;
; 236  : 	ZeroMemory(&SortParameter,sizeof(SortParameter));

  00012	6a 08		 push	 8
  00014	6a 00		 push	 0
  00016	8d 45 f0	 lea	 eax, DWORD PTR _SortParameter$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _memset
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  : 
; 238  : 	//设置变量
; 239  : 	SortParameter.pListControl=this;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	89 45 f4	 mov	 DWORD PTR _SortParameter$[ebp+4], eax

; 240  : 	SortParameter.bAscendSort=m_bAscendSort;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8a 88 80 00 00
	00		 mov	 cl, BYTE PTR [eax+128]
  00031	88 4d f0	 mov	 BYTE PTR _SortParameter$[ebp], cl

; 241  : 	SortParameter.wColumnIndex=pNMListView->iSubItem;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _pNMListView$[ebp]
  00037	66 8b 48 10	 mov	 cx, WORD PTR [eax+16]
  0003b	66 89 4d f2	 mov	 WORD PTR _SortParameter$[ebp+2], cx

; 242  : 
; 243  : 	//设置状态
; 244  : 	m_bAscendSort=!m_bAscendSort;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	0f b6 88 80 00
	00 00		 movzx	 ecx, BYTE PTR [eax+128]
  00049	85 c9		 test	 ecx, ecx
  0004b	75 09		 jne	 SHORT $LN3@OnColumncl
  0004d	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00054	eb 07		 jmp	 SHORT $LN4@OnColumncl
$LN3@OnColumncl:
  00056	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@OnColumncl:
  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8a 45 ac	 mov	 al, BYTE PTR tv73[ebp]
  00063	88 82 80 00 00
	00		 mov	 BYTE PTR [edx+128], al

; 245  : 
; 246  : 	//排列列表
; 247  : 	SortItems(SortFunction,(LPARAM)&SortParameter);

  00069	8d 45 f0	 lea	 eax, DWORD PTR _SortParameter$[ebp]
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ?SortFunction@CListControl@@KGHJJJ@Z ; CListControl::SortFunction
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?SortItems@CListCtrl@@QAEHP6GHJJJ@ZK@Z ; CListCtrl::SortItems

; 248  : 
; 249  : 	return;
; 250  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?OnColumnclick@CListControl@@IAEXPAUtagNMHDR@@PAJ@Z ENDP ; CListControl::OnColumnclick
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?OnEraseBkgnd@CListControl@@IAEHPAVCDC@@@Z
_TEXT	SEGMENT
_rcHeaderCtrl$1 = -40					; size = 16
_rcClient$2 = -24					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDC$ = 8						; size = 4
?OnEraseBkgnd@CListControl@@IAEHPAVCDC@@@Z PROC		; CListControl::OnEraseBkgnd, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 209  : 	//绘画背景
; 210  : 	if (m_ListHeaderCtrl.m_hWnd!=NULL)

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  00020	74 55		 je	 SHORT $LN2@OnEraseBkg

; 211  : 	{
; 212  : 		//获取位置
; 213  : 		CRect rcClient;

  00022	8d 4d e8	 lea	 ecx, DWORD PTR _rcClient$2[ebp]
  00025	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 214  : 		CRect rcHeaderCtrl;

  0002a	8d 4d d8	 lea	 ecx, DWORD PTR _rcHeaderCtrl$1[ebp]
  0002d	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 215  : 		GetClientRect(&rcClient);

  00032	8d 45 e8	 lea	 eax, DWORD PTR _rcClient$2[ebp]
  00035	50		 push	 eax
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 216  : 		m_ListHeaderCtrl.GetWindowRect(&rcHeaderCtrl);

  0003e	8d 45 d8	 lea	 eax, DWORD PTR _rcHeaderCtrl$1[ebp]
  00041	50		 push	 eax
  00042	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0004b	e8 00 00 00 00	 call	 ?GetWindowRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetWindowRect

; 217  : 
; 218  : 		//绘画背景
; 219  : 		rcClient.top=rcHeaderCtrl.Height();

  00050	8d 4d d8	 lea	 ecx, DWORD PTR _rcHeaderCtrl$1[ebp]
  00053	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00058	89 45 ec	 mov	 DWORD PTR _rcClient$2[ebp+4], eax

; 220  : 		pDC->FillSolidRect(&rcClient,GetBkColor());

  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?GetBkColor@CListCtrl@@QBEKXZ ; CListCtrl::GetBkColor
  00063	50		 push	 eax
  00064	8d 45 e8	 lea	 eax, DWORD PTR _rcClient$2[ebp]
  00067	50		 push	 eax
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0006b	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 221  : 
; 222  : 		return TRUE;

  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	eb 0c		 jmp	 SHORT $LN1@OnEraseBkg
$LN2@OnEraseBkg:

; 223  : 	}
; 224  : 
; 225  : 	return __super::OnEraseBkgnd(pDC);

  00077	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?OnEraseBkgnd@CWnd@@IAEHPAVCDC@@@Z ; CWnd::OnEraseBkgnd
$LN1@OnEraseBkg:

; 226  : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?OnEraseBkgnd@CListControl@@IAEHPAVCDC@@@Z ENDP		; CListControl::OnEraseBkgnd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?SortFunction@CListControl@@KGHJJJ@Z
_TEXT	SEGMENT
tv77 = -84						; size = 4
_nResult$ = -16						; size = 4
_pListControl$ = -12					; size = 4
_wColumnIndex$ = -8					; size = 2
_pSortParameter$ = -4					; size = 4
_lParam1$ = 8						; size = 4
_lParam2$ = 12						; size = 4
_lParamList$ = 16					; size = 4
?SortFunction@CListControl@@KGHJJJ@Z PROC		; CListControl::SortFunction, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 193  : 	//变量定义
; 194  :     tagSortParameter * pSortParameter=(tagSortParameter *)lParamList;

  00009	8b 45 10	 mov	 eax, DWORD PTR _lParamList$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _pSortParameter$[ebp], eax

; 195  : 
; 196  : 	//排序变量
; 197  : 	WORD wColumnIndex=pSortParameter->wColumnIndex;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _pSortParameter$[ebp]
  00012	66 8b 48 02	 mov	 cx, WORD PTR [eax+2]
  00016	66 89 4d f8	 mov	 WORD PTR _wColumnIndex$[ebp], cx

; 198  : 	CListControl * pListControl=pSortParameter->pListControl;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _pSortParameter$[ebp]
  0001d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00020	89 4d f4	 mov	 DWORD PTR _pListControl$[ebp], ecx

; 199  : 
; 200  : 	//子项排序
; 201  : 	INT nResult=pListControl->SortListItemData(lParam1,lParam2,wColumnIndex);

  00023	0f b7 45 f8	 movzx	 eax, WORD PTR _wColumnIndex$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _lParam2$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 08	 mov	 edx, DWORD PTR _lParam1$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 f4	 mov	 eax, DWORD PTR _pListControl$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	8b 4d f4	 mov	 ecx, DWORD PTR _pListControl$[ebp]
  00038	8b 82 74 01 00
	00		 mov	 eax, DWORD PTR [edx+372]
  0003e	ff d0		 call	 eax
  00040	89 45 f0	 mov	 DWORD PTR _nResult$[ebp], eax

; 202  : 
; 203  : 	return (pSortParameter->bAscendSort)?nResult:-nResult;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _pSortParameter$[ebp]
  00046	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 08		 je	 SHORT $LN3@SortFuncti
  0004d	8b 55 f0	 mov	 edx, DWORD PTR _nResult$[ebp]
  00050	89 55 ac	 mov	 DWORD PTR tv77[ebp], edx
  00053	eb 08		 jmp	 SHORT $LN4@SortFuncti
$LN3@SortFuncti:
  00055	8b 45 f0	 mov	 eax, DWORD PTR _nResult$[ebp]
  00058	f7 d8		 neg	 eax
  0005a	89 45 ac	 mov	 DWORD PTR tv77[ebp], eax
$LN4@SortFuncti:
  0005d	8b 45 ac	 mov	 eax, DWORD PTR tv77[ebp]

; 204  : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 0c 00	 ret	 12			; 0000000cH
?SortFunction@CListControl@@KGHJJJ@Z ENDP		; CListControl::SortFunction
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?DrawItem@CListControl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
_TEXT	SEGMENT
_uFormat$1 = -392					; size = 4
_HDItem$2 = -388					; size = 44
_szString$3 = -344					; size = 256
_nXFill$4 = -88						; size = 4
_nYFill$5 = -84						; size = 4
_rcSubItem$6 = -80					; size = 16
_i$7 = -64						; size = 4
_rcClipBox$ = -60					; size = 16
_ListItemColor$ = -44					; size = 8
_nColumnCount$ = -36					; size = 4
_nItemID$ = -32						; size = 4
_pDC$ = -28						; size = 4
_rcItem$ = -24						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpDrawItemStruct$ = 8					; size = 4
?DrawItem@CListControl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z PROC ; CListControl::DrawItem, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 01 00
	00		 sub	 esp, 456		; 000001c8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 	//变量定义
; 122  : 	CRect rcItem=lpDrawItemStruct->rcItem;

  00019	8b 45 08	 mov	 eax, DWORD PTR _lpDrawItemStruct$[ebp]
  0001c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0001f	50		 push	 eax
  00020	8d 4d e8	 lea	 ecx, DWORD PTR _rcItem$[ebp]
  00023	e8 00 00 00 00	 call	 ??0CRect@@QAE@ABUtagRECT@@@Z ; CRect::CRect

; 123  : 	CDC * pDC=CDC::FromHandle(lpDrawItemStruct->hDC);

  00028	8b 45 08	 mov	 eax, DWORD PTR _lpDrawItemStruct$[ebp]
  0002b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?FromHandle@CDC@@SGPAV1@PAUHDC__@@@Z ; CDC::FromHandle
  00034	89 45 e4	 mov	 DWORD PTR _pDC$[ebp], eax

; 124  : 
; 125  : 	//获取属性
; 126  : 	INT nItemID=lpDrawItemStruct->itemID;

  00037	8b 45 08	 mov	 eax, DWORD PTR _lpDrawItemStruct$[ebp]
  0003a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003d	89 4d e0	 mov	 DWORD PTR _nItemID$[ebp], ecx

; 127  : 	INT nColumnCount=m_ListHeaderCtrl.GetItemCount();

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00049	e8 00 00 00 00	 call	 ?GetItemCount@CHeaderCtrl@@QBEHXZ ; CHeaderCtrl::GetItemCount
  0004e	89 45 dc	 mov	 DWORD PTR _nColumnCount$[ebp], eax

; 128  : 
; 129  : 	//获取颜色
; 130  : 	tagListItemColor ListItemColor;
; 131  : 	GetListItemColor(lpDrawItemStruct->itemData,lpDrawItemStruct->itemState,ListItemColor);

  00051	8d 45 d4	 lea	 eax, DWORD PTR _ListItemColor$[ebp]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _lpDrawItemStruct$[ebp]
  00058	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005b	52		 push	 edx
  0005c	8b 45 08	 mov	 eax, DWORD PTR _lpDrawItemStruct$[ebp]
  0005f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00062	51		 push	 ecx
  00063	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00066	8b 02		 mov	 eax, DWORD PTR [edx]
  00068	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 90 78 01 00
	00		 mov	 edx, DWORD PTR [eax+376]
  00071	ff d2		 call	 edx

; 132  : 
; 133  : 	//绘画区域
; 134  : 	CRect rcClipBox;

  00073	8d 4d c4	 lea	 ecx, DWORD PTR _rcClipBox$[ebp]
  00076	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 135  : 	pDC->GetClipBox(&rcClipBox);

  0007b	8d 45 c4	 lea	 eax, DWORD PTR _rcClipBox$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00087	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0008a	ff d0		 call	 eax

; 136  : 
; 137  : 	//设置 DC
; 138  : 	pDC->SetBkColor(ListItemColor.rcBackColor);

  0008c	8b 45 d8	 mov	 eax, DWORD PTR _ListItemColor$[ebp+4]
  0008f	50		 push	 eax
  00090	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00098	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0009b	ff d0		 call	 eax

; 139  : 	pDC->SetTextColor(ListItemColor.rcTextColor);

  0009d	8b 45 d4	 mov	 eax, DWORD PTR _ListItemColor$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  000a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a6	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  000a9	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000ac	ff d0		 call	 eax

; 140  : 
; 141  : 	//绘画子项
; 142  : 	for (INT i=0;i<nColumnCount;i++)

  000ae	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  000b5	eb 09		 jmp	 SHORT $LN4@DrawItem
$LN2@DrawItem:
  000b7	8b 45 c0	 mov	 eax, DWORD PTR _i$7[ebp]
  000ba	83 c0 01	 add	 eax, 1
  000bd	89 45 c0	 mov	 DWORD PTR _i$7[ebp], eax
$LN4@DrawItem:
  000c0	8b 45 c0	 mov	 eax, DWORD PTR _i$7[ebp]
  000c3	3b 45 dc	 cmp	 eax, DWORD PTR _nColumnCount$[ebp]
  000c6	0f 8d 8c 01 00
	00		 jge	 $LN3@DrawItem

; 143  : 	{
; 144  : 		//获取位置
; 145  : 		CRect rcSubItem;

  000cc	8d 4d b0	 lea	 ecx, DWORD PTR _rcSubItem$6[ebp]
  000cf	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 146  : 		GetSubItemRect(nItemID,i,LVIR_LABEL,rcSubItem);

  000d4	8d 45 b0	 lea	 eax, DWORD PTR _rcSubItem$6[ebp]
  000d7	50		 push	 eax
  000d8	6a 02		 push	 2
  000da	8b 4d c0	 mov	 ecx, DWORD PTR _i$7[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 e0	 mov	 edx, DWORD PTR _nItemID$[ebp]
  000e1	52		 push	 edx
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	e8 00 00 00 00	 call	 ?GetSubItemRect@CListCtrl@@QBEHHHHAAVCRect@@@Z ; CListCtrl::GetSubItemRect

; 147  : 
; 148  : 		//填充空隙
; 149  : 		if ((i==0)&&(rcItem.left<rcSubItem.left))

  000ea	83 7d c0 00	 cmp	 DWORD PTR _i$7[ebp], 0
  000ee	75 36		 jne	 SHORT $LN5@DrawItem
  000f0	8b 45 e8	 mov	 eax, DWORD PTR _rcItem$[ebp]
  000f3	3b 45 b0	 cmp	 eax, DWORD PTR _rcSubItem$6[ebp]
  000f6	7d 2e		 jge	 SHORT $LN5@DrawItem

; 150  : 		{
; 151  : 			INT nYFill=rcItem.bottom-rcItem.top;

  000f8	8b 45 f4	 mov	 eax, DWORD PTR _rcItem$[ebp+12]
  000fb	2b 45 ec	 sub	 eax, DWORD PTR _rcItem$[ebp+4]
  000fe	89 45 ac	 mov	 DWORD PTR _nYFill$5[ebp], eax

; 152  : 			INT nXFill=rcSubItem.left-rcItem.left;

  00101	8b 45 b0	 mov	 eax, DWORD PTR _rcSubItem$6[ebp]
  00104	2b 45 e8	 sub	 eax, DWORD PTR _rcItem$[ebp]
  00107	89 45 a8	 mov	 DWORD PTR _nXFill$4[ebp], eax

; 153  : 			pDC->FillSolidRect(rcItem.left,rcItem.top,nXFill,nYFill,ListItemColor.rcBackColor);

  0010a	8b 45 d8	 mov	 eax, DWORD PTR _ListItemColor$[ebp+4]
  0010d	50		 push	 eax
  0010e	8b 4d ac	 mov	 ecx, DWORD PTR _nYFill$5[ebp]
  00111	51		 push	 ecx
  00112	8b 55 a8	 mov	 edx, DWORD PTR _nXFill$4[ebp]
  00115	52		 push	 edx
  00116	8b 45 ec	 mov	 eax, DWORD PTR _rcItem$[ebp+4]
  00119	50		 push	 eax
  0011a	8b 4d e8	 mov	 ecx, DWORD PTR _rcItem$[ebp]
  0011d	51		 push	 ecx
  0011e	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00121	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXHHHHK@Z ; CDC::FillSolidRect
$LN5@DrawItem:

; 154  : 		}
; 155  : 
; 156  : 		//绘画判断
; 157  : 		if (rcSubItem.left>rcClipBox.right) break;

  00126	8b 45 b0	 mov	 eax, DWORD PTR _rcSubItem$6[ebp]
  00129	3b 45 cc	 cmp	 eax, DWORD PTR _rcClipBox$[ebp+8]
  0012c	7e 05		 jle	 SHORT $LN6@DrawItem
  0012e	e9 25 01 00 00	 jmp	 $LN3@DrawItem
$LN6@DrawItem:

; 158  : 		if (rcSubItem.right<rcClipBox.left) continue;

  00133	8b 45 b8	 mov	 eax, DWORD PTR _rcSubItem$6[ebp+8]
  00136	3b 45 c4	 cmp	 eax, DWORD PTR _rcClipBox$[ebp]
  00139	7d 05		 jge	 SHORT $LN7@DrawItem
  0013b	e9 77 ff ff ff	 jmp	 $LN2@DrawItem
$LN7@DrawItem:

; 159  : 		if (rcSubItem.left==rcSubItem.right) continue;

  00140	8b 45 b0	 mov	 eax, DWORD PTR _rcSubItem$6[ebp]
  00143	3b 45 b8	 cmp	 eax, DWORD PTR _rcSubItem$6[ebp+8]
  00146	75 05		 jne	 SHORT $LN8@DrawItem
  00148	e9 6a ff ff ff	 jmp	 $LN2@DrawItem
$LN8@DrawItem:

; 160  : 
; 161  : 		//绘画背景
; 162  : 		pDC->FillSolidRect(&rcSubItem,ListItemColor.rcBackColor);

  0014d	8b 45 d8	 mov	 eax, DWORD PTR _ListItemColor$[ebp+4]
  00150	50		 push	 eax
  00151	8d 4d b0	 lea	 ecx, DWORD PTR _rcSubItem$6[ebp]
  00154	51		 push	 ecx
  00155	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00158	e8 00 00 00 00	 call	 ?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z ; CDC::FillSolidRect

; 163  : 
; 164  : 		//获取文字
; 165  : 		TCHAR szString[256]=TEXT("");

  0015d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  00162	88 85 a8 fe ff
	ff		 mov	 BYTE PTR _szString$3[ebp], al
  00168	68 ff 00 00 00	 push	 255			; 000000ffH
  0016d	6a 00		 push	 0
  0016f	8d 85 a9 fe ff
	ff		 lea	 eax, DWORD PTR _szString$3[ebp+1]
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 _memset
  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 166  : 		GetItemText(nItemID,i,szString,CountArray(szString));

  0017e	68 00 01 00 00	 push	 256			; 00000100H
  00183	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _szString$3[ebp]
  00189	50		 push	 eax
  0018a	8b 4d c0	 mov	 ecx, DWORD PTR _i$7[ebp]
  0018d	51		 push	 ecx
  0018e	8b 55 e0	 mov	 edx, DWORD PTR _nItemID$[ebp]
  00191	52		 push	 edx
  00192	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	e8 00 00 00 00	 call	 ?GetItemText@CListCtrl@@QBEHHHPADH@Z ; CListCtrl::GetItemText

; 167  : 
; 168  : 		//获取格式
; 169  : 		HDITEM HDItem;
; 170  : 		HDItem.mask=HDI_FORMAT;

  0019a	c7 85 7c fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _HDItem$2[ebp], 4

; 171  : 		m_ListHeaderCtrl.GetItem(i,&HDItem);

  001a4	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _HDItem$2[ebp]
  001aa	50		 push	 eax
  001ab	8b 4d c0	 mov	 ecx, DWORD PTR _i$7[ebp]
  001ae	51		 push	 ecx
  001af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  001b8	e8 00 00 00 00	 call	 ?GetItem@CHeaderCtrl@@QBEHHPAU_HD_ITEMA@@@Z ; CHeaderCtrl::GetItem

; 172  : 
; 173  : 		//设置格式
; 174  : 		UINT uFormat=0;

  001bd	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _uFormat$1[ebp], 0

; 175  : 		if (HDItem.fmt&HDF_LEFT) uFormat|=DT_LEFT;

  001c7	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _HDItem$2[ebp+20]
  001cd	83 e0 00	 and	 eax, 0
  001d0	74 0c		 je	 SHORT $LN9@DrawItem
  001d2	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _uFormat$1[ebp]
  001d8	89 85 78 fe ff
	ff		 mov	 DWORD PTR _uFormat$1[ebp], eax
$LN9@DrawItem:

; 176  : 		if (HDItem.fmt&HDF_RIGHT) uFormat|=DT_RIGHT;

  001de	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _HDItem$2[ebp+20]
  001e4	83 e0 01	 and	 eax, 1
  001e7	74 0f		 je	 SHORT $LN10@DrawItem
  001e9	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _uFormat$1[ebp]
  001ef	83 c8 02	 or	 eax, 2
  001f2	89 85 78 fe ff
	ff		 mov	 DWORD PTR _uFormat$1[ebp], eax
$LN10@DrawItem:

; 177  : 		if (HDItem.fmt&HDF_CENTER) uFormat|=DT_CENTER;

  001f8	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _HDItem$2[ebp+20]
  001fe	83 e0 02	 and	 eax, 2
  00201	74 0f		 je	 SHORT $LN11@DrawItem
  00203	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _uFormat$1[ebp]
  00209	83 c8 01	 or	 eax, 1
  0020c	89 85 78 fe ff
	ff		 mov	 DWORD PTR _uFormat$1[ebp], eax
$LN11@DrawItem:

; 178  : 
; 179  : 		//绘画文字
; 180  : 		rcSubItem.left+=5;

  00212	8b 45 b0	 mov	 eax, DWORD PTR _rcSubItem$6[ebp]
  00215	83 c0 05	 add	 eax, 5
  00218	89 45 b0	 mov	 DWORD PTR _rcSubItem$6[ebp], eax

; 181  : 		pDC->DrawText(szString,lstrlen(szString),&rcSubItem,uFormat|DT_VCENTER|DT_SINGLELINE|DT_END_ELLIPSIS);

  0021b	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _uFormat$1[ebp]
  00221	83 c8 04	 or	 eax, 4
  00224	83 c8 20	 or	 eax, 32			; 00000020H
  00227	0d 00 80 00 00	 or	 eax, 32768		; 00008000H
  0022c	50		 push	 eax
  0022d	8d 4d b0	 lea	 ecx, DWORD PTR _rcSubItem$6[ebp]
  00230	51		 push	 ecx
  00231	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR _szString$3[ebp]
  00237	52		 push	 edx
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0023e	50		 push	 eax
  0023f	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _szString$3[ebp]
  00245	50		 push	 eax
  00246	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00249	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024b	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0024e	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  00251	ff d0		 call	 eax

; 182  : 	}

  00253	e9 5f fe ff ff	 jmp	 $LN2@DrawItem
$LN3@DrawItem:

; 183  : 
; 184  : 	//绘画选择
; 185  : 	if (lpDrawItemStruct->itemState&ODS_FOCUS) pDC->DrawFocusRect(&rcItem);

  00258	8b 45 08	 mov	 eax, DWORD PTR _lpDrawItemStruct$[ebp]
  0025b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0025e	83 e1 10	 and	 ecx, 16			; 00000010H
  00261	74 0c		 je	 SHORT $LN1@DrawItem
  00263	8d 45 e8	 lea	 eax, DWORD PTR _rcItem$[ebp]
  00266	50		 push	 eax
  00267	8b 4d e4	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0026a	e8 00 00 00 00	 call	 ?DrawFocusRect@CDC@@QAEXPBUtagRECT@@@Z ; CDC::DrawFocusRect
$LN1@DrawItem:

; 186  : 
; 187  : 	return;
; 188  : }

  0026f	5f		 pop	 edi
  00270	5e		 pop	 esi
  00271	5b		 pop	 ebx
  00272	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00275	33 cd		 xor	 ecx, ebp
  00277	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027c	8b e5		 mov	 esp, ebp
  0027e	5d		 pop	 ebp
  0027f	c2 04 00	 ret	 4
?DrawItem@CListControl@@UAEXPAUtagDRAWITEMSTRUCT@@@Z ENDP ; CListControl::DrawItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?PreSubclassWindow@CListControl@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PreSubclassWindow@CListControl@@UAEXXZ PROC		; CListControl::PreSubclassWindow, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 	__super::PreSubclassWindow();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow

; 104  : 
; 105  : 	//设置属性
; 106  : 	SetBkColor(CR_NORMAL_BK);

  00014	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?SetBkColor@CListCtrl@@QAEHK@Z ; CListCtrl::SetBkColor

; 107  : 	SetExtendedStyle(LIST_STYTE);

  00021	68 30 01 00 00	 push	 304			; 00000130H
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?SetExtendedStyle@CListCtrl@@QAEKK@Z ; CListCtrl::SetExtendedStyle

; 108  : 
; 109  : 	//绑定控件
; 110  : 	m_ListHeaderCtrl.SubclassWindow(GetHeaderCtrl()->GetSafeHwnd());

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetHeaderCtrl@CListCtrl@@QBEPAVCHeaderCtrl@@XZ ; CListCtrl::GetHeaderCtrl
  00036	8b c8		 mov	 ecx, eax
  00038	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  0003d	50		 push	 eax
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00047	e8 00 00 00 00	 call	 ?SubclassWindow@CWnd@@QAEHPAUHWND__@@@Z ; CWnd::SubclassWindow

; 111  : 
; 112  : 	//配置列表
; 113  : 	InitListControl();

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 10		 mov	 edx, DWORD PTR [eax]
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  0005a	ff d0		 call	 eax

; 114  : 
; 115  : 	return;
; 116  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?PreSubclassWindow@CListControl@@UAEXXZ ENDP		; CListControl::PreSubclassWindow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ??1CListControl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CListControl@@UAE@XZ PROC				; CListControl::~CListControl, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CListControl@@6B@

; 98   : }

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0001e	e8 00 00 00 00	 call	 ??1CListHeaderCtrl@@UAE@XZ ; CListHeaderCtrl::~CListHeaderCtrl
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1CListCtrl@@UAE@XZ	; CListCtrl::~CListCtrl
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??1CListControl@@UAE@XZ ENDP				; CListControl::~CListControl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ??0CListControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CListControl@@QAE@XZ PROC				; CListControl::CListControl, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CListControl@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CListCtrl@@QAE@XZ	; CListCtrl::CListCtrl
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CListControl@@6B@
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0004c	e8 00 00 00 00	 call	 ??0CListHeaderCtrl@@QAE@XZ ; CListHeaderCtrl::CListHeaderCtrl

; 89   : 	//设置变量
; 90   : 	m_bAscendSort=true;

  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c6 80 80 00 00
	00 01		 mov	 BYTE PTR [eax+128], 1

; 91   : 
; 92   : 	return;
; 93   : }

  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CListControl@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CListCtrl@@UAE@XZ	; CListCtrl::~CListCtrl
__ehhandler$??0CListControl@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CListControl@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CListControl@@QAE@XZ ENDP				; CListControl::CListControl
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECListHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECListHeaderCtrl@@UAEPAXI@Z PROC			; CListHeaderCtrl::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECListHeaderCtrl@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 46		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CListHeaderCtrl@@UAE@XZ ; CListHeaderCtrl::~CListHeaderCtrl
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	68 80 00 00 00	 push	 128			; 00000080H
  00044	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00050	83 e0 01	 and	 eax, 1
  00053	74 1c		 je	 SHORT $LN3@vector
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0005b	c1 e1 07	 shl	 ecx, 7
  0005e	83 c1 04	 add	 ecx, 4
  00061	51		 push	 ecx
  00062	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00065	83 ea 04	 sub	 edx, 4
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006e	83 c4 08	 add	 esp, 8
$LN3@vector:
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	83 e8 04	 sub	 eax, 4
  00077	eb 37		 jmp	 SHORT $LN8@vector
$LN2@vector:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ??1CListHeaderCtrl@@UAE@XZ ; CListHeaderCtrl::~CListHeaderCtrl
  00081	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00084	83 e0 01	 and	 eax, 1
  00087	74 24		 je	 SHORT $LN4@vector
  00089	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0008c	83 e0 04	 and	 eax, 4
  0008f	75 0b		 jne	 SHORT $LN5@vector
  00091	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0009a	eb 11		 jmp	 SHORT $LN4@vector
$LN5@vector:
  0009c	68 80 00 00 00	 push	 128			; 00000080H
  000a1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  000aa	83 c4 08	 add	 esp, 8
$LN4@vector:
  000ad	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN8@vector:
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECListHeaderCtrl@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECListHeaderCtrl@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECListHeaderCtrl@@UAEPAXI@Z ENDP			; CListHeaderCtrl::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCListHeaderCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCListHeaderCtrl@@UAEPAXI@Z PROC			; CListHeaderCtrl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CListHeaderCtrl@@UAE@XZ ; CListHeaderCtrl::~CListHeaderCtrl
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 24		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 11		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	68 80 00 00 00	 push	 128			; 00000080H
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003d	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??_GCListHeaderCtrl@@UAEPAXI@Z ENDP			; CListHeaderCtrl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?GetMessageMap@CListHeaderCtrl@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMessageMap@CListHeaderCtrl@@MBEPBUAFX_MSGMAP@@XZ PROC ; CListHeaderCtrl::GetMessageMap, COMDAT
; _this$ = ecx

; 22   : BEGIN_MESSAGE_MAP(CListHeaderCtrl, CHeaderCtrl)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	e8 00 00 00 00	 call	 ?GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ ; CListHeaderCtrl::GetThisMessageMap
  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetMessageMap@CListHeaderCtrl@@MBEPBUAFX_MSGMAP@@XZ ENDP ; CListHeaderCtrl::GetMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ PROC ; CListHeaderCtrl::GetThisMessageMap, COMDAT

; 22   : BEGIN_MESSAGE_MAP(CListHeaderCtrl, CHeaderCtrl)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 23   : 	ON_WM_PAINT()
; 24   : END_MESSAGE_MAP()

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?GetThisMessageMap@CListHeaderCtrl@@KGPBUAFX_MSGMAP@@XZ ENDP ; CListHeaderCtrl::GetThisMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?OnPaint@CListHeaderCtrl@@IAEXXZ
_TEXT	SEGMENT
_uFormat$2 = -252					; size = 4
_i$3 = -248						; size = 4
_szBuffer$ = -244					; size = 64
_HDItem$ = -180						; size = 44
_rcItem$ = -136						; size = 16
_rcRect$ = -120						; size = 16
_dc$ = -104						; size = 84
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OnPaint@CListHeaderCtrl@@IAEXXZ PROC			; CListHeaderCtrl::OnPaint, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnPaint@CListHeaderCtrl@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	CPaintDC dc(this);

  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	8d 4d 98	 lea	 ecx, DWORD PTR _dc$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CPaintDC@@QAE@PAVCWnd@@@Z ; CPaintDC::CPaintDC
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 47   : 
; 48   : 	//获取位置
; 49   : 	CRect rcRect;

  00044	8d 4d 88	 lea	 ecx, DWORD PTR _rcRect$[ebp]
  00047	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 50   : 	GetClientRect(&rcRect);

  0004c	8d 45 88	 lea	 eax, DWORD PTR _rcRect$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 51   : 
; 52   : 	//设置 DC
; 53   : 	dc.SetBkMode(TRANSPARENT);

  00058	6a 01		 push	 1
  0005a	8d 4d 98	 lea	 ecx, DWORD PTR _dc$[ebp]
  0005d	e8 00 00 00 00	 call	 ?SetBkMode@CDC@@QAEHH@Z	; CDC::SetBkMode

; 54   : 	dc.SelectObject(GetFont());

  00062	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?GetFont@CWnd@@QBEPAVCFont@@XZ ; CWnd::GetFont
  0006a	50		 push	 eax
  0006b	8d 4d 98	 lea	 ecx, DWORD PTR _dc$[ebp]
  0006e	e8 00 00 00 00	 call	 ?SelectObject@CDC@@UAEPAVCFont@@PAV2@@Z ; CDC::SelectObject

; 55   : 
; 56   : 	//绘画子项
; 57   : 	CRect rcItem;

  00073	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rcItem$[ebp]
  00079	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 58   : 	HDITEM HDItem;
; 59   : 	TCHAR szBuffer[64];
; 60   : 	for (INT i=0;i<GetItemCount();i++)

  0007e	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$3[ebp], 0
  00088	eb 0f		 jmp	 SHORT $LN4@OnPaint
$LN2@OnPaint:
  0008a	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _i$3[ebp]
  00090	83 c0 01	 add	 eax, 1
  00093	89 85 08 ff ff
	ff		 mov	 DWORD PTR _i$3[ebp], eax
$LN4@OnPaint:
  00099	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?GetItemCount@CHeaderCtrl@@QBEHXZ ; CHeaderCtrl::GetItemCount
  000a1	39 85 08 ff ff
	ff		 cmp	 DWORD PTR _i$3[ebp], eax
  000a7	0f 8d aa 00 00
	00		 jge	 $LN3@OnPaint

; 61   : 	{
; 62   : 		//构造变量
; 63   : 		HDItem.mask=HDI_TEXT;

  000ad	c7 85 4c ff ff
	ff 02 00 00 00	 mov	 DWORD PTR _HDItem$[ebp], 2

; 64   : 		HDItem.pszText=szBuffer;

  000b7	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  000bd	89 85 54 ff ff
	ff		 mov	 DWORD PTR _HDItem$[ebp+8], eax

; 65   : 		HDItem.cchTextMax=CountArray(szBuffer);

  000c3	c7 85 5c ff ff
	ff 40 00 00 00	 mov	 DWORD PTR _HDItem$[ebp+16], 64 ; 00000040H

; 66   : 
; 67   : 		//获取信息
; 68   : 		GetItem(i,&HDItem);

  000cd	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _HDItem$[ebp]
  000d3	50		 push	 eax
  000d4	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _i$3[ebp]
  000da	51		 push	 ecx
  000db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	e8 00 00 00 00	 call	 ?GetItem@CHeaderCtrl@@QBEHHPAU_HD_ITEMA@@@Z ; CHeaderCtrl::GetItem

; 69   : 		GetItemRect(i,&rcItem);

  000e3	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rcItem$[ebp]
  000e9	50		 push	 eax
  000ea	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _i$3[ebp]
  000f0	51		 push	 ecx
  000f1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f4	e8 00 00 00 00	 call	 ?GetItemRect@CHeaderCtrl@@QBEHHPAUtagRECT@@@Z ; CHeaderCtrl::GetItemRect

; 70   : 
; 71   : 		//绘画背景
; 72   : 		dc.DrawFrameControl(&rcItem,DFC_BUTTON,DFCS_BUTTONPUSH);

  000f9	6a 10		 push	 16			; 00000010H
  000fb	6a 04		 push	 4
  000fd	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rcItem$[ebp]
  00103	50		 push	 eax
  00104	8d 4d 98	 lea	 ecx, DWORD PTR _dc$[ebp]
  00107	e8 00 00 00 00	 call	 ?DrawFrameControl@CDC@@QAEHPAUtagRECT@@II@Z ; CDC::DrawFrameControl

; 73   : 
; 74   : 		//绘画标题
; 75   : 		rcItem.DeflateRect(3,1,3,1);

  0010c	6a 01		 push	 1
  0010e	6a 03		 push	 3
  00110	6a 01		 push	 1
  00112	6a 03		 push	 3
  00114	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _rcItem$[ebp]
  0011a	e8 00 00 00 00	 call	 ?DeflateRect@CRect@@QAEXHHHH@Z ; CRect::DeflateRect

; 76   : 		const UINT uFormat=DT_WORDBREAK|DT_EDITCONTROL|DT_END_ELLIPSIS|DT_SINGLELINE|DT_VCENTER|DT_CENTER;

  0011f	c7 85 04 ff ff
	ff 35 a0 00 00	 mov	 DWORD PTR _uFormat$2[ebp], 41013 ; 0000a035H

; 77   : 		dc.DrawText(szBuffer,lstrlen(szBuffer),&rcItem,uFormat);

  00129	68 35 a0 00 00	 push	 41013			; 0000a035H
  0012e	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rcItem$[ebp]
  00134	50		 push	 eax
  00135	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _szBuffer$[ebp]
  0013b	51		 push	 ecx
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00142	50		 push	 eax
  00143	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR _szBuffer$[ebp]
  00149	52		 push	 edx
  0014a	8d 4d 98	 lea	 ecx, DWORD PTR _dc$[ebp]
  0014d	e8 00 00 00 00	 call	 ?DrawTextA@CDC@@UAEHPBDHPAUtagRECT@@I@Z ; CDC::DrawTextA

; 78   : 	}

  00152	e9 33 ff ff ff	 jmp	 $LN2@OnPaint
$LN3@OnPaint:

; 79   : 
; 80   : 
; 81   : 	return;

  00157	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015e	8d 4d 98	 lea	 ecx, DWORD PTR _dc$[ebp]
  00161	e8 00 00 00 00	 call	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC

; 82   : }

  00166	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00169	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00170	59		 pop	 ecx
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	5b		 pop	 ebx
  00174	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnPaint@CListHeaderCtrl@@IAEXXZ$0:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR _dc$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CPaintDC@@UAE@XZ	; CPaintDC::~CPaintDC
__ehhandler$?OnPaint@CListHeaderCtrl@@IAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a c0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-320]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnPaint@CListHeaderCtrl@@IAEXXZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnPaint@CListHeaderCtrl@@IAEXXZ ENDP			; CListHeaderCtrl::OnPaint
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ??1CListHeaderCtrl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CListHeaderCtrl@@UAE@XZ PROC				; CListHeaderCtrl::~CListHeaderCtrl, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CListHeaderCtrl@@6B@

; 41   : }

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??1CHeaderCtrl@@UAE@XZ	; CHeaderCtrl::~CHeaderCtrl
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1CListHeaderCtrl@@UAE@XZ ENDP				; CListHeaderCtrl::~CListHeaderCtrl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ??0CListHeaderCtrl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CListHeaderCtrl@@QAE@XZ PROC				; CListHeaderCtrl::CListHeaderCtrl, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CHeaderCtrl@@QAE@XZ	; CHeaderCtrl::CHeaderCtrl
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CListHeaderCtrl@@6B@

; 36   : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0CListHeaderCtrl@@QAE@XZ ENDP				; CListHeaderCtrl::CListHeaderCtrl
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00013	83 c4 04	 add	 esp, 4
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002a	6a 02		 push	 2
  0002c	6a 02		 push	 2
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  0003e	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00042	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  00044	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 105  : 	_CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _wmemcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	return (_Ptrdest);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -48						; size = 8
__Ptrnext$ = -40					; size = 4
__Ptrdest$ = -36					; size = 4
__Mbst1$ = -32						; size = 8
__Wc$ = -24						; size = 2
__Bytes$ = -20						; size = 4
__Ptr1$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Count1$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 e0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000e	89 45 e4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00033	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00036	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00044	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00047	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00053	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00057	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00059	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 45 f0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 __Mbrtowc
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  00078	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0007c	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0007e	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  00080	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  00082	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR __Wchars$[ebp], eax

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  0008b	68 ba 02 00 00	 push	 698			; 000002baH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	6a 02		 push	 2
  00099	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000a9	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000ad	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000af	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000b4	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000b7	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 703  : 	mbstate_t _Mbst2 = {};

  000ba	33 c0		 xor	 eax, eax
  000bc	89 45 d0	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000bf	89 45 d4	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000c2	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  000c7	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d0	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000d3	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000d6	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000d9	83 ea 01	 sub	 edx, 1
  000dc	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000df	8b 45 d8	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  000e2	83 c0 02	 add	 eax, 2
  000e5	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e8	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  000ec	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  000ee	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d d0	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __Count1$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 __Mbrtowc
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  0010d	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00111	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00113	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00115	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00117	33 c0		 xor	 eax, eax
  00119	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0011c	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0011f	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltypes.h
;	COMDAT ?DeflateRect@CRect@@QAEXHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_l$ = 8							; size = 4
_t$ = 12						; size = 4
_r$ = 16						; size = 4
_b$ = 20						; size = 4
?DeflateRect@CRect@@QAEXHHHH@Z PROC			; CRect::DeflateRect, COMDAT
; _this$ = ecx

; 931  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 932  : 	left += l;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	03 4d 08	 add	 ecx, DWORD PTR _l$[ebp]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 933  : 	top += t;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001f	03 4d 0c	 add	 ecx, DWORD PTR _t$[ebp]
  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 934  : 	right -= r;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002e	2b 4d 10	 sub	 ecx, DWORD PTR _r$[ebp]
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 935  : 	bottom -= b;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003d	2b 4d 14	 sub	 ecx, DWORD PTR _b$[ebp]
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 936  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
?DeflateRect@CRect@@QAEXHHHH@Z ENDP			; CRect::DeflateRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltypes.h
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC				; CRect::Height, COMDAT
; _this$ = ecx

; 580  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 581  : 	return bottom - top;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00015	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]

; 582  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltypes.h
;	COMDAT ??0CRect@@QAE@ABUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_srcRect$ = 8						; size = 4
??0CRect@@QAE@ABUtagRECT@@@Z PROC			; CRect::CRect, COMDAT
; _this$ = ecx

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 548  : 	::CopyRect(this, &srcRect);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _srcRect$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	51		 push	 ecx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyRect@8

; 549  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0CRect@@QAE@ABUtagRECT@@@Z ENDP			; CRect::CRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltypes.h
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC					; CRect::CRect, COMDAT
; _this$ = ecx

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 528  : 	left = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 529  : 	top = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 530  : 	right = 0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 531  : 	bottom = 0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 532  : }

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00009	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?__global_array_delete@@YAXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sz$ = 12						; size = 4
?__global_array_delete@@YAXPAXI@Z PROC			; __global_array_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?__global_array_delete@@YAXPAXI@Z ENDP			; __global_array_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?__global_array_delete@@YAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?__global_array_delete@@YAXPAX@Z PROC			; __global_array_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00012	83 c4 04	 add	 esp, 4
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?__global_array_delete@@YAXPAX@Z ENDP			; __global_array_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?__global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sz$ = 12						; size = 4
?__global_delete@@YAXPAXI@Z PROC			; __global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 0c	 mov	 eax, DWORD PTR _sz$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00016	83 c4 08	 add	 esp, 8
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?__global_delete@@YAXPAXI@Z ENDP			; __global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?__global_delete@@YAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?__global_delete@@YAXPAX@Z PROC				; __global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?__global_delete@@YAXPAX@Z ENDP				; __global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\模块管理\listcontrol.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
