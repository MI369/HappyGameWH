; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\游戏服务\ServerUserManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IGameServiceManager@@3U_GUID@@B DD 04b2b9d8fH	; IID_IGameServiceManager
	DW	0ce1bH
	DW	044f3H
	DB	0a5H
	DB	022H
	DB	065H
	DB	01aH
	DB	065H
	DB	0c9H
	DB	0aH
	DB	025H
?IID_IServerUserItem@@3U_GUID@@B DD 0b5ce01a7H		; IID_IServerUserItem
	DW	05cd1H
	DW	04788H
	DB	094H
	DB	06cH
	DB	0a1H
	DB	0efH
	DB	05bH
	DB	030H
	DB	02cH
	DB	0b7H
?IID_IServerUserService@@3U_GUID@@B DD 0cc4e885fH	; IID_IServerUserService
	DW	03357H
	DW	04d68H
	DB	0b2H
	DB	06bH
	DB	078H
	DB	08fH
	DB	04bH
	DB	03eH
	DB	064H
	DB	0c3H
?IID_IMatchUserItemSink@@3U_GUID@@B DD 0e1aeb013H	; IID_IMatchUserItemSink
	DW	0b63cH
	DW	045cbH
	DB	08bH
	DB	060H
	DB	0a2H
	DB	075H
	DB	034H
	DB	0e5H
	DB	02eH
	DB	0daH
?IID_IServerUserItemSink@@3U_GUID@@B DD 09d0cfe02H	; IID_IServerUserItemSink
	DW	0fe9H
	DW	04a8bH
	DB	097H
	DB	095H
	DB	0acH
	DB	032H
	DB	067H
	DB	05aH
	DB	0f8H
	DB	0b1H
?IID_IServerUserManager@@3U_GUID@@B DD 077a3c4dfH	; IID_IServerUserManager
	DW	01d95H
	DW	048c6H
	DB	0acH
	DB	09dH
	DB	075H
	DB	0d7H
	DB	06cH
	DB	02aH
	DB	03cH
	DB	0eH
?IID_IAndroidUserItemSink@@3U_GUID@@B DD 01e8a1918H	; IID_IAndroidUserItemSink
	DW	0572bH
	DW	0453bH
	DB	0bcH
	DB	0bH
	DB	06bH
	DB	061H
	DB	070H
	DB	0a3H
	DB	03cH
	DB	0caH
?g_szGameDataSpe@@3QBDB DB ':;', 00H			; g_szGameDataSpe
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	_wmemcpy
PUBLIC	?data@CPlex@@QAEPAXXZ				; CPlex::data
PUBLIC	??$HashKey@K@@YGIK@Z				; HashKey<unsigned long>
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??0IUnknownEx@@QAE@XZ				; IUnknownEx::IUnknownEx
PUBLIC	?GetProductVer@@YAEK@Z				; GetProductVer
PUBLIC	?GetMainVer@@YAEK@Z				; GetMainVer
PUBLIC	?GetSubVer@@YAEK@Z				; GetSubVer
PUBLIC	?GetBuildVer@@YAEK@Z				; GetBuildVer
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0IServerUserItem@@QAE@XZ			; IServerUserItem::IServerUserItem
PUBLIC	??0IServerUserService@@QAE@XZ			; IServerUserService::IServerUserService
PUBLIC	??0IServerUserManager@@QAE@XZ			; IServerUserManager::IServerUserManager
PUBLIC	??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
PUBLIC	?Lookup@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEHHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Lookup
PUBLIC	??A?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEAAPAUtagGameDataItem@@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::operator[]
PUBLIC	?SetAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::SetAt
PUBLIC	?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::RemoveAll
PUBLIC	?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition
PUBLIC	?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc
PUBLIC	?InitHashTable@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXIH@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::InitHashTable
PUBLIC	?NewAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAEPAVCAssoc@1@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::NewAssoc
PUBLIC	?GetAssocAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IBEPAVCAssoc@1@HAAI0@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetAssocAt
PUBLIC	??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::~CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
PUBLIC	?Serialize@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEXAAVCArchive@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Serialize
PUBLIC	?Dump@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXAAVCDumpContext@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Dump
PUBLIC	?AssertValid@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXXZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::AssertValid
PUBLIC	??_G?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEPAXI@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`scalar deleting destructor'
PUBLIC	??0CServerUserItem@@IAE@XZ			; CServerUserItem::CServerUserItem
PUBLIC	??1CServerUserItem@@MAE@XZ			; CServerUserItem::~CServerUserItem
PUBLIC	?Release@CServerUserItem@@UAEXXZ		; CServerUserItem::Release
PUBLIC	?QueryInterface@CServerUserItem@@UAEPAXABU_GUID@@K@Z ; CServerUserItem::QueryInterface
PUBLIC	?GetBindIndex@CServerUserItem@@UAEGXZ		; CServerUserItem::GetBindIndex
PUBLIC	?GetClientAddr@CServerUserItem@@UAEKXZ		; CServerUserItem::GetClientAddr
PUBLIC	?GetMachineID@CServerUserItem@@UAEPBDXZ		; CServerUserItem::GetMachineID
PUBLIC	?GetDBQuestID@CServerUserItem@@UAEKXZ		; CServerUserItem::GetDBQuestID
PUBLIC	?GetLogonTime@CServerUserItem@@UAEKXZ		; CServerUserItem::GetLogonTime
PUBLIC	?GetInoutIndex@CServerUserItem@@UAEKXZ		; CServerUserItem::GetInoutIndex
PUBLIC	?GetUserInfo@CServerUserItem@@UAEPAUtagUserInfo@@XZ ; CServerUserItem::GetUserInfo
PUBLIC	?GetUserRule@CServerUserItem@@UAEPAUtagUserRule@@XZ ; CServerUserItem::GetUserRule
PUBLIC	?GetFormerScore@CServerUserItem@@UAEPAUtagUserScore@@XZ ; CServerUserItem::GetFormerScore
PUBLIC	?GetUserProperty@CServerUserItem@@UAEPAUtagUserProperty@@XZ ; CServerUserItem::GetUserProperty
PUBLIC	?GetTimeInfo@CServerUserItem@@UAEPAUtagTimeInfo@@XZ ; CServerUserItem::GetTimeInfo
PUBLIC	?GetUserGameData@CServerUserItem@@UAEPBDXZ	; CServerUserItem::GetUserGameData
PUBLIC	?GetUserGameData@CServerUserItem@@UAEXHPADH@Z	; CServerUserItem::GetUserGameData
PUBLIC	?SetUserGameData@CServerUserItem@@UAEXPBDH@Z	; CServerUserItem::SetUserGameData
PUBLIC	?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z	; CServerUserItem::SetUserGameData
PUBLIC	?WriteUserGameData@CServerUserItem@@UAEXXZ	; CServerUserItem::WriteUserGameData
PUBLIC	?SetVideoNumber@CServerUserItem@@UAEXPAD@Z	; CServerUserItem::SetVideoNumber
PUBLIC	?GetVideoNumber@CServerUserItem@@UAEPADXZ	; CServerUserItem::GetVideoNumber
PUBLIC	?SetGameoverData@CServerUserItem@@UAEXPAE@Z	; CServerUserItem::SetGameoverData
PUBLIC	?GetGameoverData@CServerUserItem@@UAEPAEXZ	; CServerUserItem::GetGameoverData
PUBLIC	?GetGender@CServerUserItem@@UAEEXZ		; CServerUserItem::GetGender
PUBLIC	?GetUserID@CServerUserItem@@UAEKXZ		; CServerUserItem::GetUserID
PUBLIC	?GetGameID@CServerUserItem@@UAEKXZ		; CServerUserItem::GetGameID
PUBLIC	?GetNickName@CServerUserItem@@UAEPBDXZ		; CServerUserItem::GetNickName
PUBLIC	?GetTableID@CServerUserItem@@UAEGXZ		; CServerUserItem::GetTableID
PUBLIC	?GetLastTableID@CServerUserItem@@UAEGXZ		; CServerUserItem::GetLastTableID
PUBLIC	?GetChairID@CServerUserItem@@UAEGXZ		; CServerUserItem::GetChairID
PUBLIC	?GetUserStatus@CServerUserItem@@UAEEXZ		; CServerUserItem::GetUserStatus
PUBLIC	?GetUserRight@CServerUserItem@@UAEKXZ		; CServerUserItem::GetUserRight
PUBLIC	?GetMasterRight@CServerUserItem@@UAEKXZ		; CServerUserItem::GetMasterRight
PUBLIC	?GetMemberOrder@CServerUserItem@@UAEEXZ		; CServerUserItem::GetMemberOrder
PUBLIC	?GetMasterOrder@CServerUserItem@@UAEEXZ		; CServerUserItem::GetMasterOrder
PUBLIC	?GetUserScore@CServerUserItem@@UAE_JXZ		; CServerUserItem::GetUserScore
PUBLIC	?GetUserGrade@CServerUserItem@@UAE_JXZ		; CServerUserItem::GetUserGrade
PUBLIC	?GetUserInsure@CServerUserItem@@UAE_JXZ		; CServerUserItem::GetUserInsure
PUBLIC	?GetTrusteeScore@CServerUserItem@@UAE_JXZ	; CServerUserItem::GetTrusteeScore
PUBLIC	?GetFrozenedScore@CServerUserItem@@UAE_JXZ	; CServerUserItem::GetFrozenedScore
PUBLIC	?GetUserWinRate@CServerUserItem@@UAEGXZ		; CServerUserItem::GetUserWinRate
PUBLIC	?GetUserLostRate@CServerUserItem@@UAEGXZ	; CServerUserItem::GetUserLostRate
PUBLIC	?GetUserDrawRate@CServerUserItem@@UAEGXZ	; CServerUserItem::GetUserDrawRate
PUBLIC	?GetUserFleeRate@CServerUserItem@@UAEGXZ	; CServerUserItem::GetUserFleeRate
PUBLIC	?GetUserPlayCount@CServerUserItem@@UAEKXZ	; CServerUserItem::GetUserPlayCount
PUBLIC	?ContrastNickName@CServerUserItem@@UAE_NPBD@Z	; CServerUserItem::ContrastNickName
PUBLIC	?ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z	; CServerUserItem::ContrastLogonPass
PUBLIC	?IsTrusteeUser@CServerUserItem@@UAE_NXZ		; CServerUserItem::IsTrusteeUser
PUBLIC	?SetTrusteeUser@CServerUserItem@@UAEX_N@Z	; CServerUserItem::SetTrusteeUser
PUBLIC	?IsClientReady@CServerUserItem@@UAE_NXZ		; CServerUserItem::IsClientReady
PUBLIC	?SetClientReady@CServerUserItem@@UAEX_N@Z	; CServerUserItem::SetClientReady
PUBLIC	?IsMobileUser@CServerUserItem@@UAE_NXZ		; CServerUserItem::IsMobileUser
PUBLIC	?SetMobileUser@CServerUserItem@@UAEX_N@Z	; CServerUserItem::SetMobileUser
PUBLIC	?IsAndroidUser@CServerUserItem@@UAE_NXZ		; CServerUserItem::IsAndroidUser
PUBLIC	?SetAndroidUser@CServerUserItem@@UAEX_N@Z	; CServerUserItem::SetAndroidUser
PUBLIC	?GetMatchData@CServerUserItem@@UAEPAXXZ		; CServerUserItem::GetMatchData
PUBLIC	?SetMatchData@CServerUserItem@@UAEXPAX@Z	; CServerUserItem::SetMatchData
PUBLIC	?GetSignUpTime@CServerUserItem@@UAEKXZ		; CServerUserItem::GetSignUpTime
PUBLIC	?SetSignUpTime@CServerUserItem@@UAEXK@Z		; CServerUserItem::SetSignUpTime
PUBLIC	?GetUserMatchStatus@CServerUserItem@@UAEEXZ	; CServerUserItem::GetUserMatchStatus
PUBLIC	?SetUserMatchStatus@CServerUserItem@@UAEXE@Z	; CServerUserItem::SetUserMatchStatus
PUBLIC	?IsVariation@CServerUserItem@@UAE_NXZ		; CServerUserItem::IsVariation
PUBLIC	?QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z ; CServerUserItem::QueryRecordInfo
PUBLIC	?DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z ; CServerUserItem::DistillVariation
PUBLIC	?SetUserStatus@CServerUserItem@@UAE_NEGG@Z	; CServerUserItem::SetUserStatus
PUBLIC	?WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z ; CServerUserItem::WriteUserScore
PUBLIC	?SetUserTaskReward@CServerUserItem@@UAE_N_J0@Z	; CServerUserItem::SetUserTaskReward
PUBLIC	?FrozenedUserScore@CServerUserItem@@UAE_N_J@Z	; CServerUserItem::FrozenedUserScore
PUBLIC	?UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z	; CServerUserItem::UnFrozenedUserScore
PUBLIC	?ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z	; CServerUserItem::ModifyUserProperty
PUBLIC	?DetachBindStatus@CServerUserItem@@UAE_NXZ	; CServerUserItem::DetachBindStatus
PUBLIC	?ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z	; CServerUserItem::ModifyUserInsure
PUBLIC	?SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z ; CServerUserItem::SetUserParameter
PUBLIC	?ModifyUserRight@CServerUserItem@@UAEXKKE@Z	; CServerUserItem::ModifyUserRight
PUBLIC	?ResetUserItem@CServerUserItem@@AAEXXZ		; CServerUserItem::ResetUserItem
PUBLIC	?InitUserGameDataMap@CServerUserItem@@AAEXXZ	; CServerUserItem::InitUserGameDataMap
PUBLIC	?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z ; CServerUserItem::SplitString
PUBLIC	?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CServerUserItem::IsPureDigitString
PUBLIC	?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ; CServerUserItem::IsValidGameData
PUBLIC	?GetMobileUserRule@CServerUserItem@@UAEGXZ	; CServerUserItem::GetMobileUserRule
PUBLIC	?SetMobileUserRule@CServerUserItem@@UAEXG@Z	; CServerUserItem::SetMobileUserRule
PUBLIC	?GetMobileUserDeskPos@CServerUserItem@@UAEGXZ	; CServerUserItem::GetMobileUserDeskPos
PUBLIC	?SetMobileUserDeskPos@CServerUserItem@@UAEXG@Z	; CServerUserItem::SetMobileUserDeskPos
PUBLIC	??_GCServerUserItem@@MAEPAXI@Z			; CServerUserItem::`scalar deleting destructor'
PUBLIC	??_ECServerUserItem@@MAEPAXI@Z			; CServerUserItem::`vector deleting destructor'
PUBLIC	??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
PUBLIC	??A?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEAAPAVCServerUserItem@@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::operator[]
PUBLIC	?SetAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXKPAVCServerUserItem@@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::SetAt
PUBLIC	?RemoveKey@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEHK@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveKey
PUBLIC	?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveAll
PUBLIC	?GetStartPosition@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetStartPosition
PUBLIC	?GetNextAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEXAAPAU__POSITION@@AAKAAPAVCServerUserItem@@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetNextAssoc
PUBLIC	?InitHashTable@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::InitHashTable
PUBLIC	?NewAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEPAVCAssoc@1@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::NewAssoc
PUBLIC	?FreeAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEXPAVCAssoc@1@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::FreeAssoc
PUBLIC	?GetAssocAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetAssocAt
PUBLIC	??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::~CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
PUBLIC	?Serialize@?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEXAAVCArchive@@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::Serialize
PUBLIC	?Dump@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXAAVCDumpContext@@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::Dump
PUBLIC	?AssertValid@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXXZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::AssertValid
PUBLIC	??_G?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEPAXI@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`scalar deleting destructor'
PUBLIC	??0?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::CWHArray<CServerUserItem *,CServerUserItem * const &>
PUBLIC	??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>
PUBLIC	?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABQAVCServerUserItem@@@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Add
PUBLIC	?Append@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABV1@@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Append
PUBLIC	?ElementAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHABQAVCServerUserItem@@@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAt
PUBLIC	?RemoveAll@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAll
PUBLIC	??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::AllocMemory
PUBLIC	??_G?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAEPAXI@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`scalar deleting destructor'
PUBLIC	??0CServerUserManager@@QAE@XZ			; CServerUserManager::CServerUserManager
PUBLIC	??1CServerUserManager@@UAE@XZ			; CServerUserManager::~CServerUserManager
PUBLIC	?Release@CServerUserManager@@UAEXXZ		; CServerUserManager::Release
PUBLIC	?QueryInterface@CServerUserManager@@UAEPAXABU_GUID@@K@Z ; CServerUserManager::QueryInterface
PUBLIC	?SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z ; CServerUserManager::SetServerUserItemSink
PUBLIC	?SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z ; CServerUserManager::SetMatchUserItemSink
PUBLIC	?EnumUserItem@CServerUserManager@@UAEPAUIServerUserItem@@G@Z ; CServerUserManager::EnumUserItem
PUBLIC	?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@K@Z ; CServerUserManager::SearchUserItem
PUBLIC	?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@PBD@Z ; CServerUserManager::SearchUserItem
PUBLIC	?GetAndroidCount@CServerUserManager@@UAEKXZ	; CServerUserManager::GetAndroidCount
PUBLIC	?GetUserItemCount@CServerUserManager@@UAEKXZ	; CServerUserManager::GetUserItemCount
PUBLIC	?DeleteUserItem@CServerUserManager@@UAE_NXZ	; CServerUserManager::DeleteUserItem
PUBLIC	?DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z ; CServerUserManager::DeleteUserItem
PUBLIC	?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z ; CServerUserManager::InsertUserItem
PUBLIC	??_GCServerUserManager@@UAEPAXI@Z		; CServerUserManager::`scalar deleting destructor'
PUBLIC	??_ECServerUserManager@@UAEPAXI@Z		; CServerUserManager::`vector deleting destructor'
PUBLIC	??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ		; _snprintf_s<32>
PUBLIC	??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ		; _snprintf_s<64>
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??0CPair@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAE@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CPair::CPair
PUBLIC	??0CAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CAssoc::CAssoc
PUBLIC	??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z	; SerializeElements<int>
PUBLIC	??$SerializeElements@PAUtagGameDataItem@@@@YGXAAVCArchive@@PAPAUtagGameDataItem@@H@Z ; SerializeElements<tagGameDataItem *>
PUBLIC	??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z	; DumpElements<int>
PUBLIC	??$DumpElements@PAUtagGameDataItem@@@@YGXAAVCDumpContext@@PBQAUtagGameDataItem@@H@Z ; DumpElements<tagGameDataItem *>
PUBLIC	??0CPair@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAE@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CPair::CPair
PUBLIC	??0CAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CAssoc::CAssoc
PUBLIC	??$CompareElements@KK@@YGHPBK0@Z		; CompareElements<unsigned long,unsigned long>
PUBLIC	??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z	; SerializeElements<unsigned long>
PUBLIC	??$SerializeElements@PAVCServerUserItem@@@@YGXAAVCArchive@@PAPAVCServerUserItem@@H@Z ; SerializeElements<CServerUserItem *>
PUBLIC	??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z	; DumpElements<unsigned long>
PUBLIC	??$DumpElements@PAVCServerUserItem@@@@YGXAAVCDumpContext@@PBQAVCServerUserItem@@H@Z ; DumpElements<CServerUserItem *>
PUBLIC	??$HashKey@H@@YGIH@Z				; HashKey<int>
PUBLIC	??$CompareElements@HH@@YGHPBH0@Z		; CompareElements<int,int>
PUBLIC	?Release@CServerUserItem@@W3AEXXZ		; [thunk]:CServerUserItem::Release`adjustor{4}'
PUBLIC	?QueryInterface@CServerUserItem@@W3AEPAXABU_GUID@@K@Z ; [thunk]:CServerUserItem::QueryInterface`adjustor{4}'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_0BC@PGMFNIFA@atlTraceException@		; `string'
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	??_C@_0P@MBNHGHMI@atlTraceString@		; `string'
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_05PLCFPPOI@with?5@			; `string'
PUBLIC	??_C@_09HCLNAIDE@?5elements@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IServerUserItem@@6B@			; IServerUserItem::`vftable'
PUBLIC	??_7IServerUserService@@6B@			; IServerUserService::`vftable'
PUBLIC	??_7IServerUserManager@@6B@			; IServerUserManager::`vftable'
PUBLIC	??_7?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`vftable'
PUBLIC	??_7CServerUserItem@@6BIServerUserItem@@@	; CServerUserItem::`vftable'
PUBLIC	??_7CServerUserItem@@6BIServerUserService@@@	; CServerUserItem::`vftable'
PUBLIC	??_7?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`vftable'
PUBLIC	??_7?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@	; CWHArray<CServerUserItem *,CServerUserItem * const &>::`vftable'
PUBLIC	??_7CServerUserManager@@6B@			; CServerUserManager::`vftable'
PUBLIC	?__LINE__Var@?0???1CServerUserItem@@MAE@XZ@4JA	; `CServerUserItem::~CServerUserItem'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_06HKALLNOM@?$CFd?3?$CFs?$DL@		; `string'
PUBLIC	?__LINE__Var@?0??GetUserGameData@CServerUserItem@@UAEXHPADH@Z@4JA ; `CServerUserItem::GetUserGameData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXPBDH@Z@4JA ; `CServerUserItem::SetUserGameData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXHPBDH@Z@4JA ; `CServerUserItem::SetUserGameData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteUserGameData@CServerUserItem@@UAEXXZ@4JA ; `CServerUserItem::WriteUserGameData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ContrastNickName@CServerUserItem@@UAE_NPBD@Z@4JA ; `CServerUserItem::ContrastNickName'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z@4JA ; `CServerUserItem::ContrastLogonPass'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SetUserStatus@CServerUserItem@@UAE_NEGG@Z@4JA ; `CServerUserItem::SetUserStatus'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z@4JA ; `CServerUserItem::WriteUserScore'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA ; `CServerUserItem::QueryRecordInfo'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA ; `CServerUserItem::DistillVariation'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??FrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA ; `CServerUserItem::FrozenedUserScore'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA ; `CServerUserItem::UnFrozenedUserScore'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z@4JA ; `CServerUserItem::ModifyUserProperty'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DetachBindStatus@CServerUserItem@@UAE_NXZ@4JA ; `CServerUserItem::DetachBindStatus'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z@4JA ; `CServerUserItem::ModifyUserInsure'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z@4JA ; `CServerUserItem::SetUserParameter'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ModifyUserRight@CServerUserItem@@UAEXKKE@Z@4JA ; `CServerUserItem::ModifyUserRight'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ResetUserItem@CServerUserItem@@AAEXXZ@4JA ; `CServerUserItem::ResetUserItem'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??InitUserGameDataMap@CServerUserItem@@AAEXXZ@4JA ; `CServerUserItem::InitUserGameDataMap'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z@4JA ; `CServerUserItem::IsPureDigitString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z@4JA ; `CServerUserItem::IsValidGameData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA ; `CServerUserManager::SetServerUserItemSink'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA ; `CServerUserManager::SetMatchUserItemSink'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z@4JA ; `CServerUserManager::DeleteUserItem'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z@4JA ; `CServerUserManager::InsertUserItem'::`1'::__LINE__Var
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_C@_03OHJIHPJH@?6?7?$FL@			; `string'
PUBLIC	??_C@_04OAFLPOMH@?$FN?5?$DN?5@			; `string'
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServerUserItem@@6B@			; IServerUserItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServerUserItem@@@8			; IServerUserItem `RTTI Type Descriptor'
PUBLIC	??_R3IServerUserItem@@8				; IServerUserItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServerUserItem@@8				; IServerUserItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServerUserItem@@8		; IServerUserItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServerUserManager@@6B@			; IServerUserManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServerUserManager@@@8			; IServerUserManager `RTTI Type Descriptor'
PUBLIC	??_R3IServerUserManager@@8			; IServerUserManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServerUserManager@@8			; IServerUserManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServerUserManager@@8		; IServerUserManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IServerUserService@@6B@			; IServerUserService::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIServerUserService@@@8			; IServerUserService `RTTI Type Descriptor'
PUBLIC	??_R3IServerUserService@@8			; IServerUserService::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IServerUserService@@8			; IServerUserService::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IServerUserService@@8		; IServerUserService::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@@8 ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8 ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CServerUserItem@@6BIServerUserItem@@@	; CServerUserItem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCServerUserItem@@@8			; CServerUserItem `RTTI Type Descriptor'
PUBLIC	??_R3CServerUserItem@@8				; CServerUserItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CServerUserItem@@8				; CServerUserItem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CServerUserItem@@8		; CServerUserItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EC@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IServerUserService@@8		; IServerUserService::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R4CServerUserItem@@6BIServerUserService@@@	; CServerUserItem::`RTTI Complete Object Locator'
PUBLIC	??_R4CServerUserManager@@6B@			; CServerUserManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCServerUserManager@@@8			; CServerUserManager `RTTI Type Descriptor'
PUBLIC	??_R3CServerUserManager@@8			; CServerUserManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CServerUserManager@@8			; CServerUserManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CServerUserManager@@8		; CServerUserManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PAVCServerUserItem@@ABQAV1@@@@8 ; CWHArray<CServerUserItem *,CServerUserItem * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8	; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8	; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8 ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CMap@KKPAVCServerUserItem@@PAV1@@@@8	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CMap@KKPAVCServerUserItem@@PAV1@@@8	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CMap@KKPAVCServerUserItem@@PAV1@@@8	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CMap@KKPAVCServerUserItem@@PAV1@@@8 ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__CompareStringA@24:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp__ldiv:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:PROC ; AfxAssertValidObject
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	??1CObject@@UAE@XZ:PROC				; CObject::~CObject
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	??0CObject@@IAE@XZ:PROC				; CObject::CObject
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?AssertValid@CObject@@UBEXXZ:PROC		; CObject::AssertValid
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:PROC	; CObject::Dump
EXTRN	__imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z:PROC
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:PROC
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:PROC
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_?Tokenize@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@PBDAAH@Z:PROC
EXTRN	__imp_?AppendFormat@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:PROC		; AfxIsValidAddress
EXTRN	??_U@YAPAXIPBDH@Z:PROC				; operator new[]
EXTRN	?IsStoring@CArchive@@QBEHXZ:PROC		; CArchive::IsStoring
EXTRN	?EnsureRead@CArchive@@QAEXPAXI@Z:PROC		; CArchive::EnsureRead
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?GetDepth@CDumpContext@@QBEHXZ:PROC		; CDumpContext::GetDepth
EXTRN	??6CDumpContext@@QAEAAV0@PBD@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@H@Z:PROC		; CDumpContext::operator<<
EXTRN	??0CStringArray@@QAE@XZ:PROC			; CStringArray::CStringArray
EXTRN	?GetCount@CStringArray@@QBEHXZ:PROC		; CStringArray::GetCount
EXTRN	?RemoveAll@CStringArray@@QAEXXZ:PROC		; CStringArray::RemoveAll
EXTRN	?GetAt@CStringArray@@QBEABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z:PROC ; CStringArray::GetAt
EXTRN	?Add@CStringArray@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC ; CStringArray::Add
EXTRN	??1CStringArray@@UAE@XZ:PROC			; CStringArray::~CStringArray
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	??_E?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEPAXI@Z:PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`vector deleting destructor'
EXTRN	??_E?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEPAXI@Z:PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`vector deleting destructor'
EXTRN	??_E?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAEPAXI@Z:PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CMap@KKPAVCServerUserItem@@PAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CMap@KKPAVCServerUserItem@@PAV1@@@8 DD FLAT:??_R0?AV?$CMap@KKPAVCServerUserItem@@PAV1@@@@8 ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CMap@KKPAVCServerUserItem@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CMap@KKPAVCServerUserItem@@PAV1@@@8
rdata$r	SEGMENT
??_R2?$CMap@KKPAVCServerUserItem@@PAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CMap@KKPAVCServerUserItem@@PAV1@@@8 ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CMap@KKPAVCServerUserItem@@PAV1@@@8
rdata$r	SEGMENT
??_R3?$CMap@KKPAVCServerUserItem@@PAV1@@@8 DD 00H	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CMap@KKPAVCServerUserItem@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CMap@KKPAVCServerUserItem@@PAV1@@@@8
data$r	SEGMENT
??_R0?AV?$CMap@KKPAVCServerUserItem@@PAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CMap@KKPAVCServerUserItem@@PAV1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@ DD 00H	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CMap@KKPAVCServerUserItem@@PAV1@@@@8
	DD	FLAT:??_R3?$CMap@KKPAVCServerUserItem@@PAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8 DD FLAT:??_R0?AV?$CWHArray@PAVCServerUserItem@@ABQAV1@@@@8 ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8 ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8 DD 00H	; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PAVCServerUserItem@@ABQAV1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PAVCServerUserItem@@ABQAV1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<CServerUserItem *,CServerUserItem * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PAVCServerUserItem@@ABQAV1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@ DD 00H	; CWHArray<CServerUserItem *,CServerUserItem * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PAVCServerUserItem@@ABQAV1@@@@8
	DD	FLAT:??_R3?$CWHArray@PAVCServerUserItem@@ABQAV1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CServerUserManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CServerUserManager@@8 DD FLAT:??_R0?AVCServerUserManager@@@8 ; CServerUserManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CServerUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CServerUserManager@@8
rdata$r	SEGMENT
??_R2CServerUserManager@@8 DD FLAT:??_R1A@?0A@EA@CServerUserManager@@8 ; CServerUserManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IServerUserManager@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CServerUserManager@@8
rdata$r	SEGMENT
??_R3CServerUserManager@@8 DD 00H			; CServerUserManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CServerUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCServerUserManager@@@8
data$r	SEGMENT
??_R0?AVCServerUserManager@@@8 DD FLAT:??_7type_info@@6B@ ; CServerUserManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCServerUserManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CServerUserManager@@6B@
rdata$r	SEGMENT
??_R4CServerUserManager@@6B@ DD 00H			; CServerUserManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCServerUserManager@@@8
	DD	FLAT:??_R3CServerUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CServerUserItem@@6BIServerUserService@@@
rdata$r	SEGMENT
??_R4CServerUserItem@@6BIServerUserService@@@ DD 00H	; CServerUserItem::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCServerUserItem@@@8
	DD	FLAT:??_R3CServerUserItem@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknownEx@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@IServerUserService@@8
rdata$r	SEGMENT
??_R13?0A@EA@IServerUserService@@8 DD FLAT:??_R0?AUIServerUserService@@@8 ; IServerUserService::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServerUserService@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CServerUserItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CServerUserItem@@8 DD FLAT:??_R0?AVCServerUserItem@@@8 ; CServerUserItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CServerUserItem@@8
rdata$r	ENDS
;	COMDAT ??_R2CServerUserItem@@8
rdata$r	SEGMENT
??_R2CServerUserItem@@8 DD FLAT:??_R1A@?0A@EA@CServerUserItem@@8 ; CServerUserItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IServerUserItem@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknownEx@@8
	DD	FLAT:??_R13?0A@EA@IServerUserService@@8
	DD	FLAT:??_R13?0A@EC@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CServerUserItem@@8
rdata$r	SEGMENT
??_R3CServerUserItem@@8 DD 00H				; CServerUserItem::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	05H
	DD	FLAT:??_R2CServerUserItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCServerUserItem@@@8
data$r	SEGMENT
??_R0?AVCServerUserItem@@@8 DD FLAT:??_7type_info@@6B@	; CServerUserItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCServerUserItem@@', 00H
data$r	ENDS
;	COMDAT ??_R4CServerUserItem@@6BIServerUserItem@@@
rdata$r	SEGMENT
??_R4CServerUserItem@@6BIServerUserItem@@@ DD 00H	; CServerUserItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCServerUserItem@@@8
	DD	FLAT:??_R3CServerUserItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8 DD FLAT:??_R0?AV?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@@8 ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8
rdata$r	SEGMENT
??_R2?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8 ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8
rdata$r	SEGMENT
??_R3?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8 DD 00H	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@ DD 00H	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@@8
	DD	FLAT:??_R3?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServerUserService@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServerUserService@@8 DD FLAT:??_R0?AUIServerUserService@@@8 ; IServerUserService::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServerUserService@@8
rdata$r	ENDS
;	COMDAT ??_R2IServerUserService@@8
rdata$r	SEGMENT
??_R2IServerUserService@@8 DD FLAT:??_R1A@?0A@EA@IServerUserService@@8 ; IServerUserService::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServerUserService@@8
rdata$r	SEGMENT
??_R3IServerUserService@@8 DD 00H			; IServerUserService::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServerUserService@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServerUserService@@@8
data$r	SEGMENT
??_R0?AUIServerUserService@@@8 DD FLAT:??_7type_info@@6B@ ; IServerUserService `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServerUserService@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServerUserService@@6B@
rdata$r	SEGMENT
??_R4IServerUserService@@6B@ DD 00H			; IServerUserService::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServerUserService@@@8
	DD	FLAT:??_R3IServerUserService@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServerUserManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServerUserManager@@8 DD FLAT:??_R0?AUIServerUserManager@@@8 ; IServerUserManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServerUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R2IServerUserManager@@8
rdata$r	SEGMENT
??_R2IServerUserManager@@8 DD FLAT:??_R1A@?0A@EA@IServerUserManager@@8 ; IServerUserManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServerUserManager@@8
rdata$r	SEGMENT
??_R3IServerUserManager@@8 DD 00H			; IServerUserManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServerUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServerUserManager@@@8
data$r	SEGMENT
??_R0?AUIServerUserManager@@@8 DD FLAT:??_7type_info@@6B@ ; IServerUserManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServerUserManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServerUserManager@@6B@
rdata$r	SEGMENT
??_R4IServerUserManager@@6B@ DD 00H			; IServerUserManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServerUserManager@@@8
	DD	FLAT:??_R3IServerUserManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IServerUserItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IServerUserItem@@8 DD FLAT:??_R0?AUIServerUserItem@@@8 ; IServerUserItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IServerUserItem@@8
rdata$r	ENDS
;	COMDAT ??_R2IServerUserItem@@8
rdata$r	SEGMENT
??_R2IServerUserItem@@8 DD FLAT:??_R1A@?0A@EA@IServerUserItem@@8 ; IServerUserItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IServerUserItem@@8
rdata$r	SEGMENT
??_R3IServerUserItem@@8 DD 00H				; IServerUserItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IServerUserItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIServerUserItem@@@8
data$r	SEGMENT
??_R0?AUIServerUserItem@@@8 DD FLAT:??_7type_info@@6B@	; IServerUserItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIServerUserItem@@', 00H
data$r	ENDS
;	COMDAT ??_R4IServerUserItem@@6B@
rdata$r	SEGMENT
??_R4IServerUserItem@@6B@ DD 00H			; IServerUserItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIServerUserItem@@@8
	DD	FLAT:??_R3IServerUserItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
CONST	SEGMENT
??_C@_04OAFLPOMH@?$FN?5?$DN?5@ DB '] = ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHJIHPJH@?6?7?$FL@
CONST	SEGMENT
??_C@_03OHJIHPJH@?6?7?$FL@ DB 0aH, 09H, '[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z@4JA DD 040bH ; `CServerUserManager::InsertUserItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z@4JA DD 03e8H ; `CServerUserManager::DeleteUserItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA DD 039bH ; `CServerUserManager::SetMatchUserItemSink'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA DD 0389H ; `CServerUserManager::SetServerUserItemSink'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z@4JA DD 0347H ; `CServerUserItem::IsValidGameData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z@4JA DD 0337H ; `CServerUserItem::IsPureDigitString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??InitUserGameDataMap@CServerUserItem@@AAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InitUserGameDataMap@CServerUserItem@@AAEXXZ@4JA DD 02f6H ; `CServerUserItem::InitUserGameDataMap'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ResetUserItem@CServerUserItem@@AAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ResetUserItem@CServerUserItem@@AAEXXZ@4JA DD 02aaH ; `CServerUserItem::ResetUserItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ModifyUserRight@CServerUserItem@@UAEXKKE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ModifyUserRight@CServerUserItem@@UAEXKKE@Z@4JA DD 029aH ; `CServerUserItem::ModifyUserRight'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z@4JA DD 0287H ; `CServerUserItem::SetUserParameter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z@4JA DD 0259H ; `CServerUserItem::ModifyUserInsure'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DetachBindStatus@CServerUserItem@@UAE_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DetachBindStatus@CServerUserItem@@UAE_NXZ@4JA DD 0249H ; `CServerUserItem::DetachBindStatus'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z@4JA DD 021aH ; `CServerUserItem::ModifyUserProperty'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA DD 01f5H ; `CServerUserItem::UnFrozenedUserScore'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??FrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??FrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA DD 01d6H ; `CServerUserItem::FrozenedUserScore'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA DD 01bcH ; `CServerUserItem::DistillVariation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA DD 01afH ; `CServerUserItem::QueryRecordInfo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z@4JA DD 0144H ; `CServerUserItem::WriteUserScore'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetUserStatus@CServerUserItem@@UAE_NEGG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetUserStatus@CServerUserItem@@UAE_NEGG@Z@4JA DD 0116H ; `CServerUserItem::SetUserStatus'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z@4JA DD 0104H ; `CServerUserItem::ContrastLogonPass'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ContrastNickName@CServerUserItem@@UAE_NPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ContrastNickName@CServerUserItem@@UAE_NPBD@Z@4JA DD 0f2H ; `CServerUserItem::ContrastNickName'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??WriteUserGameData@CServerUserItem@@UAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??WriteUserGameData@CServerUserItem@@UAEXXZ@4JA DD 0e8H ; `CServerUserItem::WriteUserGameData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXHPBDH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXHPBDH@Z@4JA DD 0c8H ; `CServerUserItem::SetUserGameData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXPBDH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXPBDH@Z@4JA DD 0b4H ; `CServerUserItem::SetUserGameData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??GetUserGameData@CServerUserItem@@UAEXHPADH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetUserGameData@CServerUserItem@@UAEXHPADH@Z@4JA DD 0a9H ; `CServerUserItem::GetUserGameData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06HKALLNOM@?$CFd?3?$CFs?$DL@
CONST	SEGMENT
??_C@_06HKALLNOM@?$CFd?3?$CFs?$DL@ DB '%d:%s;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0d3H, 0ceH, 0cfH, 0b7H, 0b7H, 0feH, 0ceH, 0f1H, '\s'
	DB	'erverusermanager.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???1CServerUserItem@@MAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1CServerUserItem@@MAE@XZ@4JA DD 052H	; `CServerUserItem::~CServerUserItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CServerUserManager@@6B@
CONST	SEGMENT
??_7CServerUserManager@@6B@ DD FLAT:??_R4CServerUserManager@@6B@ ; CServerUserManager::`vftable'
	DD	FLAT:?Release@CServerUserManager@@UAEXXZ
	DD	FLAT:?QueryInterface@CServerUserManager@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z
	DD	FLAT:?SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z
	DD	FLAT:?EnumUserItem@CServerUserManager@@UAEPAUIServerUserItem@@G@Z
	DD	FLAT:?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@PBD@Z
	DD	FLAT:?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@K@Z
	DD	FLAT:?GetAndroidCount@CServerUserManager@@UAEKXZ
	DD	FLAT:?GetUserItemCount@CServerUserManager@@UAEKXZ
	DD	FLAT:?DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z
	DD	FLAT:?DeleteUserItem@CServerUserManager@@UAE_NXZ
	DD	FLAT:?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z
	DD	FLAT:??_ECServerUserManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@ DD FLAT:??_R4?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@
CONST	SEGMENT
??_7?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@ DD FLAT:??_R4?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXXZ
	DD	FLAT:?Dump@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7CServerUserItem@@6BIServerUserService@@@
CONST	SEGMENT
??_7CServerUserItem@@6BIServerUserService@@@ DD FLAT:??_R4CServerUserItem@@6BIServerUserService@@@ ; CServerUserItem::`vftable'
	DD	FLAT:?Release@CServerUserItem@@W3AEXXZ
	DD	FLAT:?QueryInterface@CServerUserItem@@W3AEPAXABU_GUID@@K@Z
CONST	ENDS
;	COMDAT ??_7CServerUserItem@@6BIServerUserItem@@@
CONST	SEGMENT
??_7CServerUserItem@@6BIServerUserItem@@@ DD FLAT:??_R4CServerUserItem@@6BIServerUserItem@@@ ; CServerUserItem::`vftable'
	DD	FLAT:?Release@CServerUserItem@@UAEXXZ
	DD	FLAT:?QueryInterface@CServerUserItem@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?GetBindIndex@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetClientAddr@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetMachineID@CServerUserItem@@UAEPBDXZ
	DD	FLAT:?GetDBQuestID@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetLogonTime@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetInoutIndex@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetUserInfo@CServerUserItem@@UAEPAUtagUserInfo@@XZ
	DD	FLAT:?GetFormerScore@CServerUserItem@@UAEPAUtagUserScore@@XZ
	DD	FLAT:?GetUserRule@CServerUserItem@@UAEPAUtagUserRule@@XZ
	DD	FLAT:?GetUserProperty@CServerUserItem@@UAEPAUtagUserProperty@@XZ
	DD	FLAT:?GetTimeInfo@CServerUserItem@@UAEPAUtagTimeInfo@@XZ
	DD	FLAT:?GetUserGameData@CServerUserItem@@UAEXHPADH@Z
	DD	FLAT:?GetUserGameData@CServerUserItem@@UAEPBDXZ
	DD	FLAT:?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z
	DD	FLAT:?SetUserGameData@CServerUserItem@@UAEXPBDH@Z
	DD	FLAT:?WriteUserGameData@CServerUserItem@@UAEXXZ
	DD	FLAT:?SetVideoNumber@CServerUserItem@@UAEXPAD@Z
	DD	FLAT:?GetVideoNumber@CServerUserItem@@UAEPADXZ
	DD	FLAT:?SetGameoverData@CServerUserItem@@UAEXPAE@Z
	DD	FLAT:?GetGameoverData@CServerUserItem@@UAEPAEXZ
	DD	FLAT:?GetGender@CServerUserItem@@UAEEXZ
	DD	FLAT:?GetUserID@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetGameID@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetNickName@CServerUserItem@@UAEPBDXZ
	DD	FLAT:?GetTableID@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetLastTableID@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetChairID@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetUserStatus@CServerUserItem@@UAEEXZ
	DD	FLAT:?GetUserRight@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetMasterRight@CServerUserItem@@UAEKXZ
	DD	FLAT:?GetMemberOrder@CServerUserItem@@UAEEXZ
	DD	FLAT:?GetMasterOrder@CServerUserItem@@UAEEXZ
	DD	FLAT:?GetUserScore@CServerUserItem@@UAE_JXZ
	DD	FLAT:?GetUserGrade@CServerUserItem@@UAE_JXZ
	DD	FLAT:?GetUserInsure@CServerUserItem@@UAE_JXZ
	DD	FLAT:?GetTrusteeScore@CServerUserItem@@UAE_JXZ
	DD	FLAT:?GetFrozenedScore@CServerUserItem@@UAE_JXZ
	DD	FLAT:?GetUserWinRate@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetUserLostRate@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetUserDrawRate@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetUserFleeRate@CServerUserItem@@UAEGXZ
	DD	FLAT:?GetUserPlayCount@CServerUserItem@@UAEKXZ
	DD	FLAT:?ContrastNickName@CServerUserItem@@UAE_NPBD@Z
	DD	FLAT:?ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z
	DD	FLAT:?IsTrusteeUser@CServerUserItem@@UAE_NXZ
	DD	FLAT:?SetTrusteeUser@CServerUserItem@@UAEX_N@Z
	DD	FLAT:?IsClientReady@CServerUserItem@@UAE_NXZ
	DD	FLAT:?SetClientReady@CServerUserItem@@UAEX_N@Z
	DD	FLAT:?IsMobileUser@CServerUserItem@@UAE_NXZ
	DD	FLAT:?SetMobileUser@CServerUserItem@@UAEX_N@Z
	DD	FLAT:?IsAndroidUser@CServerUserItem@@UAE_NXZ
	DD	FLAT:?SetAndroidUser@CServerUserItem@@UAEX_N@Z
	DD	FLAT:?GetMatchData@CServerUserItem@@UAEPAXXZ
	DD	FLAT:?SetMatchData@CServerUserItem@@UAEXPAX@Z
	DD	FLAT:?GetSignUpTime@CServerUserItem@@UAEKXZ
	DD	FLAT:?SetSignUpTime@CServerUserItem@@UAEXK@Z
	DD	FLAT:?GetUserMatchStatus@CServerUserItem@@UAEEXZ
	DD	FLAT:?SetUserMatchStatus@CServerUserItem@@UAEXE@Z
	DD	FLAT:?IsVariation@CServerUserItem@@UAE_NXZ
	DD	FLAT:?QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z
	DD	FLAT:?DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z
	DD	FLAT:?SetUserStatus@CServerUserItem@@UAE_NEGG@Z
	DD	FLAT:?WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z
	DD	FLAT:?SetUserTaskReward@CServerUserItem@@UAE_N_J0@Z
	DD	FLAT:?ModifyUserRight@CServerUserItem@@UAEXKKE@Z
	DD	FLAT:?FrozenedUserScore@CServerUserItem@@UAE_N_J@Z
	DD	FLAT:?UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z
	DD	FLAT:?ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z
	DD	FLAT:?DetachBindStatus@CServerUserItem@@UAE_NXZ
	DD	FLAT:?ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z
	DD	FLAT:?SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z
	DD	FLAT:?GetMobileUserRule@CServerUserItem@@UAEGXZ
	DD	FLAT:?SetMobileUserRule@CServerUserItem@@UAEXG@Z
	DD	FLAT:?GetMobileUserDeskPos@CServerUserItem@@UAEGXZ
	DD	FLAT:?SetMobileUserDeskPos@CServerUserItem@@UAEXG@Z
	DD	FLAT:??_ECServerUserItem@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@
CONST	SEGMENT
??_7?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@ DD FLAT:??_R4?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXXZ
	DD	FLAT:?Dump@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7IServerUserManager@@6B@
CONST	SEGMENT
??_7IServerUserManager@@6B@ DD FLAT:??_R4IServerUserManager@@6B@ ; IServerUserManager::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IServerUserService@@6B@
CONST	SEGMENT
??_7IServerUserService@@6B@ DD FLAT:??_R4IServerUserService@@6B@ ; IServerUserService::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IServerUserItem@@6B@
CONST	SEGMENT
??_7IServerUserItem@@6B@ DD FLAT:??_R4IServerUserItem@@6B@ ; IServerUserItem::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 061H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCLNAIDE@?5elements@
CONST	SEGMENT
??_C@_09HCLNAIDE@?5elements@ DB ' elements', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLCFPPOI@with?5@
CONST	SEGMENT
??_C@_05PLCFPPOI@with?5@ DB 'with ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\afxtempl.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBNHGHMI@atlTraceString@
CONST	SEGMENT
??_C@_0P@MBNHGHMI@atlTraceString@ DB 'atlTraceString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PGMFNIFA@atlTraceException@
CONST	SEGMENT
??_C@_0BC@PGMFNIFA@atlTraceException@ DB 'atlTraceException', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECServerUserManager@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$0
__tryblocktable$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$5
__unwindtable$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$2
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$3
__ehfuncinfo$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CServerUserManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CServerUserManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CServerUserManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CServerUserManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CServerUserManager@@QAE@XZ$2
__ehfuncinfo$??0CServerUserManager@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CServerUserManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z$0
__ehfuncinfo$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECServerUserItem@@MAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$3
__ehfuncinfo$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0
__ehfuncinfo$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z$2
__ehfuncinfo$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$0
__tryblocktable$?InitUserGameDataMap@CServerUserItem@@AAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$7
__ehfuncinfo$?InitUserGameDataMap@CServerUserItem@@AAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?InitUserGameDataMap@CServerUserItem@@AAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?InitUserGameDataMap@CServerUserItem@@AAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitUserGameDataMap@CServerUserItem@@AAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?ResetUserItem@CServerUserItem@@AAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ResetUserItem@CServerUserItem@@AAEXXZ$0
__unwindtable$?ResetUserItem@CServerUserItem@@AAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ResetUserItem@CServerUserItem@@AAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ResetUserItem@CServerUserItem@@AAEXXZ$2
__ehfuncinfo$?ResetUserItem@CServerUserItem@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ResetUserItem@CServerUserItem@@AAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?ResetUserItem@CServerUserItem@@AAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z$0
__unwindtable$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z$2
__ehfuncinfo$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z$0
__ehfuncinfo$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUserGameData@CServerUserItem@@UAEPBDXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUserGameData@CServerUserItem@@UAEPBDXZ$0
__ehfuncinfo$?GetUserGameData@CServerUserItem@@UAEPBDXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUserGameData@CServerUserItem@@UAEPBDXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CServerUserItem@@MAE@XZ$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CServerUserItem@@MAE@XZ$0
__tryblocktable$??1CServerUserItem@@MAE@XZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??1CServerUserItem@@MAE@XZ$3
__unwindtable$??1CServerUserItem@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CServerUserItem@@MAE@XZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??1CServerUserItem@@MAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CServerUserItem@@MAE@XZ
	DD	01H
	DD	FLAT:__tryblocktable$??1CServerUserItem@@MAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CServerUserItem@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CServerUserItem@@IAE@XZ$0
__ehfuncinfo$??0CServerUserItem@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CServerUserItem@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z$0
__ehfuncinfo$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceString$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceString@ATL@@YAXXZ ; ATL::atlTraceString$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?QueryInterface@CServerUserItem@@W3AEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
?QueryInterface@CServerUserItem@@W3AEPAXABU_GUID@@K@Z PROC ; [thunk]:CServerUserItem::QueryInterface`adjustor{4}', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?QueryInterface@CServerUserItem@@UAEPAXABU_GUID@@K@Z ; CServerUserItem::QueryInterface
?QueryInterface@CServerUserItem@@W3AEPAXABU_GUID@@K@Z ENDP ; [thunk]:CServerUserItem::QueryInterface`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp /ZI
;	COMDAT ?Release@CServerUserItem@@W3AEXXZ
_TEXT	SEGMENT
?Release@CServerUserItem@@W3AEXXZ PROC			; [thunk]:CServerUserItem::Release`adjustor{4}', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ?Release@CServerUserItem@@UAEXXZ ; CServerUserItem::Release
?Release@CServerUserItem@@W3AEXXZ ENDP			; [thunk]:CServerUserItem::Release`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$CompareElements@HH@@YGHPBH0@Z
_TEXT	SEGMENT
tv128 = -72						; size = 4
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_pElement1$ = 8						; size = 4
_pElement2$ = 12					; size = 4
??$CompareElements@HH@@YGHPBH0@Z PROC			; CompareElements<int,int>, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@CompareEle:

; 152  : 	ENSURE(pElement1 != NULL && pElement2 != NULL);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pElement1$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@CompareEle
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElement2$[ebp], 0
  00013	74 09		 je	 SHORT $LN7@CompareEle
  00015	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN8@CompareEle
$LN7@CompareEle:
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN8@CompareEle:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@CompareEle
  00031	68 98 00 00 00	 push	 152			; 00000098H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@CompareEle
  00044	cc		 int	 3
$LN9@CompareEle:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@CompareEle
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@CompareEle:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@CompareEle

; 153  : 	ASSERT(AfxIsValidAddress(pElement1, sizeof(TYPE), FALSE));

  00054	6a 00		 push	 0
  00056	6a 04		 push	 4
  00058	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00061	85 c0		 test	 eax, eax
  00063	75 14		 jne	 SHORT $LN10@CompareEle
  00065	68 99 00 00 00	 push	 153			; 00000099H
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00074	85 c0		 test	 eax, eax
  00076	74 01		 je	 SHORT $LN10@CompareEle
  00078	cc		 int	 3
$LN10@CompareEle:

; 154  : 	ASSERT(AfxIsValidAddress(pElement2, sizeof(ARG_TYPE), FALSE));

  00079	6a 00		 push	 0
  0007b	6a 04		 push	 4
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pElement2$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00086	85 c0		 test	 eax, eax
  00088	75 14		 jne	 SHORT $LN11@CompareEle
  0008a	68 9a 00 00 00	 push	 154			; 0000009aH
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00094	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00099	85 c0		 test	 eax, eax
  0009b	74 01		 je	 SHORT $LN11@CompareEle
  0009d	cc		 int	 3
$LN11@CompareEle:

; 155  : 
; 156  : 	return *pElement1 == *pElement2;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _pElement2$[ebp]
  000a4	8b 10		 mov	 edx, DWORD PTR [eax]
  000a6	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a8	75 09		 jne	 SHORT $LN12@CompareEle
  000aa	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv128[ebp], 1
  000b1	eb 07		 jmp	 SHORT $LN13@CompareEle
$LN12@CompareEle:
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN13@CompareEle:
  000ba	8b 45 b8	 mov	 eax, DWORD PTR tv128[ebp]
$LN6@CompareEle:

; 157  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
??$CompareElements@HH@@YGHPBH0@Z ENDP			; CompareElements<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$HashKey@H@@YGIH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 8
_HashVal$ = -8						; size = 8
_key$ = 8						; size = 4
??$HashKey@H@@YGIH@Z PROC				; HashKey<int>, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 162  : 	// (algorithm copied from STL hash in xfunctional)
; 163  : #pragma warning(suppress: 4302) // 'type cast' : truncation
; 164  : #pragma warning(suppress: 4311) // pointer truncation
; 165  : 	ldiv_t HashVal = ldiv((long)(ARG_KEY)key, 127773);

  00009	68 1d f3 01 00	 push	 127773			; 0001f31dH
  0000e	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ldiv
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0001e	89 55 b4	 mov	 DWORD PTR $T1[ebp+4], edx
  00021	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  00024	89 4d f8	 mov	 DWORD PTR _HashVal$[ebp], ecx
  00027	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp+4]
  0002a	89 55 fc	 mov	 DWORD PTR _HashVal$[ebp+4], edx

; 166  : 	HashVal.rem = 16807 * HashVal.rem - 2836 * HashVal.quot;

  0002d	69 45 fc a7 41
	00 00		 imul	 eax, DWORD PTR _HashVal$[ebp+4], 16807
  00034	69 4d f8 14 0b
	00 00		 imul	 ecx, DWORD PTR _HashVal$[ebp], 2836
  0003b	2b c1		 sub	 eax, ecx
  0003d	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax

; 167  : 	if (HashVal.rem < 0)

  00040	79 0b		 jns	 SHORT $LN2@HashKey

; 168  : 		HashVal.rem += 2147483647;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]
  00045	05 ff ff ff 7f	 add	 eax, 2147483647		; 7fffffffH
  0004a	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax
$LN2@HashKey:

; 169  : 	return ((UINT)HashVal.rem);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]

; 170  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$HashKey@H@@YGIH@Z ENDP				; HashKey<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@PAVCServerUserItem@@@@YGXAAVCDumpContext@@PBQAVCServerUserItem@@H@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAVCServerUserItem@@@@YGXAAVCDumpContext@@PBQAVCServerUserItem@@H@Z PROC ; DumpElements<CServerUserItem *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAVCServerUserItem@@@@YGXAAVCDumpContext@@PBQAVCServerUserItem@@H@Z ENDP ; DumpElements<CServerUserItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z PROC	; DumpElements<unsigned long>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z ENDP	; DumpElements<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAVCServerUserItem@@@@YGXAAVCArchive@@PAPAVCServerUserItem@@H@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAVCServerUserItem@@@@YGXAAVCArchive@@PAPAVCServerUserItem@@H@Z PROC ; SerializeElements<CServerUserItem *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAVCServerUserItem@@@@YGXAAVCArchive@@PAPAVCServerUserItem@@H@Z ENDP ; SerializeElements<CServerUserItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z PROC	; SerializeElements<unsigned long>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ENDP	; SerializeElements<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$CompareElements@KK@@YGHPBK0@Z
_TEXT	SEGMENT
tv128 = -72						; size = 4
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_pElement1$ = 8						; size = 4
_pElement2$ = 12					; size = 4
??$CompareElements@KK@@YGHPBK0@Z PROC			; CompareElements<unsigned long,unsigned long>, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@CompareEle:

; 152  : 	ENSURE(pElement1 != NULL && pElement2 != NULL);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pElement1$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@CompareEle
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElement2$[ebp], 0
  00013	74 09		 je	 SHORT $LN7@CompareEle
  00015	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN8@CompareEle
$LN7@CompareEle:
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN8@CompareEle:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@CompareEle
  00031	68 98 00 00 00	 push	 152			; 00000098H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@CompareEle
  00044	cc		 int	 3
$LN9@CompareEle:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@CompareEle
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@CompareEle:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@CompareEle

; 153  : 	ASSERT(AfxIsValidAddress(pElement1, sizeof(TYPE), FALSE));

  00054	6a 00		 push	 0
  00056	6a 04		 push	 4
  00058	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00061	85 c0		 test	 eax, eax
  00063	75 14		 jne	 SHORT $LN10@CompareEle
  00065	68 99 00 00 00	 push	 153			; 00000099H
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00074	85 c0		 test	 eax, eax
  00076	74 01		 je	 SHORT $LN10@CompareEle
  00078	cc		 int	 3
$LN10@CompareEle:

; 154  : 	ASSERT(AfxIsValidAddress(pElement2, sizeof(ARG_TYPE), FALSE));

  00079	6a 00		 push	 0
  0007b	6a 04		 push	 4
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pElement2$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00086	85 c0		 test	 eax, eax
  00088	75 14		 jne	 SHORT $LN11@CompareEle
  0008a	68 9a 00 00 00	 push	 154			; 0000009aH
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00094	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00099	85 c0		 test	 eax, eax
  0009b	74 01		 je	 SHORT $LN11@CompareEle
  0009d	cc		 int	 3
$LN11@CompareEle:

; 155  : 
; 156  : 	return *pElement1 == *pElement2;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _pElement2$[ebp]
  000a4	8b 10		 mov	 edx, DWORD PTR [eax]
  000a6	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a8	75 09		 jne	 SHORT $LN12@CompareEle
  000aa	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv128[ebp], 1
  000b1	eb 07		 jmp	 SHORT $LN13@CompareEle
$LN12@CompareEle:
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN13@CompareEle:
  000ba	8b 45 b8	 mov	 eax, DWORD PTR tv128[ebp]
$LN6@CompareEle:

; 157  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
??$CompareElements@KK@@YGHPBK0@Z ENDP			; CompareElements<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??0CAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@K@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CAssoc::CAssoc, COMDAT
; _this$ = ecx

; 1267 : 		CAssoc( ARG_KEY key ) : CPair( key ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CPair@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAE@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CPair::CPair
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0CAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@K@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CAssoc::CAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CPair@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyval$ = 8						; size = 4
??0CPair@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAE@K@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CPair::CPair, COMDAT
; _this$ = ecx

; 1256 : 		CPair( ARG_KEY keyval ) : key( keyval )	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _keyval$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??0CPair@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAE@K@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CPair::CPair
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@PAUtagGameDataItem@@@@YGXAAVCDumpContext@@PBQAUtagGameDataItem@@H@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAUtagGameDataItem@@@@YGXAAVCDumpContext@@PBQAUtagGameDataItem@@H@Z PROC ; DumpElements<tagGameDataItem *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAUtagGameDataItem@@@@YGXAAVCDumpContext@@PBQAUtagGameDataItem@@H@Z ENDP ; DumpElements<tagGameDataItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z PROC	; DumpElements<int>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z ENDP	; DumpElements<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAUtagGameDataItem@@@@YGXAAVCArchive@@PAPAUtagGameDataItem@@H@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAUtagGameDataItem@@@@YGXAAVCArchive@@PAPAUtagGameDataItem@@H@Z PROC ; SerializeElements<tagGameDataItem *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAUtagGameDataItem@@@@YGXAAVCArchive@@PAPAUtagGameDataItem@@H@Z ENDP ; SerializeElements<tagGameDataItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z PROC	; SerializeElements<int>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ENDP	; SerializeElements<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??0CAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CAssoc::CAssoc, COMDAT
; _this$ = ecx

; 1267 : 		CAssoc( ARG_KEY key ) : CPair( key ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CPair@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAE@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CPair::CPair
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0CAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CAssoc::CAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CPair@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyval$ = 8						; size = 4
??0CPair@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAE@H@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CPair::CPair, COMDAT
; _this$ = ecx

; 1256 : 		CPair( ARG_KEY keyval ) : key( keyval )	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _keyval$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??0CPair@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAE@H@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CPair::CPair
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001b	68 9c 02 00 00	 push	 668			; 0000029cH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00039	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0003d	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0003f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0004a	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  00067	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006b	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00073	8a 11		 mov	 dl, BYTE PTR [ecx]
  00075	88 10		 mov	 BYTE PTR [eax], dl
  00077	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ PROC		; _snprintf_s<64>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	6a 40		 push	 64			; 00000040H
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vsnprintf_s
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ENDP		; _snprintf_s<64>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT ??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ PROC		; _snprintf_s<32>, COMDAT

; 2079 :         )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2073 :     __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_2_ARGLIST(

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001a	52		 push	 edx
  0001b	6a 20		 push	 32			; 00000020H
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vsnprintf_s
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ ENDP		; _snprintf_s<32>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECServerUserManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECServerUserManager@@UAEPAXI@Z PROC			; CServerUserManager::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECServerUserManager@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 41		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CServerUserManager@@UAE@XZ ; CServerUserManager::~CServerUserManager
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 50		 push	 80			; 00000050H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1a		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	6b 48 fc 50	 imul	 ecx, DWORD PTR [eax-4], 80
  00059	83 c1 04	 add	 ecx, 4
  0005c	51		 push	 ecx
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 ea 04	 sub	 edx, 4
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00069	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 e8 04	 sub	 eax, 4
  00072	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1CServerUserManager@@UAE@XZ ; CServerUserManager::~CServerUserManager
  0007c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007f	83 e0 01	 and	 eax, 1
  00082	74 0e		 je	 SHORT $LN4@vector
  00084	6a 50		 push	 80			; 00000050H
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
$LN4@vector:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECServerUserManager@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECServerUserManager@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECServerUserManager@@UAEPAXI@Z ENDP			; CServerUserManager::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCServerUserManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCServerUserManager@@UAEPAXI@Z PROC			; CServerUserManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CServerUserManager@@UAE@XZ ; CServerUserManager::~CServerUserManager
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 50		 push	 80			; 00000050H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCServerUserManager@@UAEPAXI@Z ENDP			; CServerUserManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z
_TEXT	SEGMENT
tv92 = -124						; size = 4
tv400 = -120						; size = 4
tv278 = -120						; size = 4
tv271 = -117						; size = 1
tv399 = -116						; size = 4
tv392 = -116						; size = 4
tv279 = -116						; size = 4
tv275 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 4
$T4 = -101						; size = 1
$T5 = -100						; size = 4
$T6 = -96						; size = 4
_nItemPostion$7 = -28					; size = 4
_pServerUserItem$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_pIServerUserResult$ = 8				; size = 4
_UserInfo$ = 12						; size = 4
_UserInfoPlus$ = 16					; size = 4
?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z PROC ; CServerUserManager::InsertUserItem, COMDAT
; _this$ = ecx

; 1035 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1036 : 	//变量定义
; 1037 : 	CServerUserItem * pServerUserItem=NULL;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pServerUserItem$[ebp], 0

; 1038 : 
; 1039 : 	//获取指针
; 1040 : 	if (m_UserItemStore.GetCount()>0)

  00036	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 34	 add	 ecx, 52			; 00000034H
  0003c	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00041	85 c0		 test	 eax, eax
  00043	7e 43		 jle	 SHORT $LN2@InsertUser

; 1041 : 	{
; 1042 : 		INT_PTR nItemPostion=m_UserItemStore.GetCount()-1;

  00045	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 34	 add	 ecx, 52			; 00000034H
  0004b	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00050	83 e8 01	 sub	 eax, 1
  00053	89 45 e4	 mov	 DWORD PTR _nItemPostion$7[ebp], eax

; 1043 : 		pServerUserItem=m_UserItemStore[nItemPostion];

  00056	8b 45 e4	 mov	 eax, DWORD PTR _nItemPostion$7[ebp]
  00059	50		 push	 eax
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 34	 add	 ecx, 52			; 00000034H
  00060	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	89 4d e8	 mov	 DWORD PTR _pServerUserItem$[ebp], ecx

; 1044 : 		m_UserItemStore.RemoveAt(nItemPostion);

  0006a	6a 01		 push	 1
  0006c	8b 45 e4	 mov	 eax, DWORD PTR _nItemPostion$7[ebp]
  0006f	50		 push	 eax
  00070	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 34	 add	 ecx, 52			; 00000034H
  00076	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAt

; 1045 : 
; 1046 : 		//重置对象
; 1047 : 		pServerUserItem->ResetUserItem();		

  0007b	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  0007e	e8 00 00 00 00	 call	 ?ResetUserItem@CServerUserItem@@AAEXXZ ; CServerUserItem::ResetUserItem

; 1048 : 	}
; 1049 : 	else

  00083	e9 80 00 00 00	 jmp	 $LN11@InsertUser
$LN2@InsertUser:

; 1050 : 	{
; 1051 : 		try

  00088	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1052 : 		{
; 1053 : 			pServerUserItem=new CServerUserItem;

  0008f	68 78 07 00 00	 push	 1912			; 00000778H
  00094	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00099	83 c4 04	 add	 esp, 4
  0009c	89 45 8c	 mov	 DWORD PTR tv275[ebp], eax
  0009f	8b 45 8c	 mov	 eax, DWORD PTR tv275[ebp]
  000a2	89 45 9c	 mov	 DWORD PTR $T5[ebp], eax
  000a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a9	83 7d 9c 00	 cmp	 DWORD PTR $T5[ebp], 0
  000ad	74 13		 je	 SHORT $LN8@InsertUser
  000af	8b 4d 9c	 mov	 ecx, DWORD PTR $T5[ebp]
  000b2	e8 00 00 00 00	 call	 ??0CServerUserItem@@IAE@XZ ; CServerUserItem::CServerUserItem
  000b7	89 45 88	 mov	 DWORD PTR tv278[ebp], eax
  000ba	8b 4d 88	 mov	 ecx, DWORD PTR tv278[ebp]
  000bd	89 4d 84	 mov	 DWORD PTR tv92[ebp], ecx
  000c0	eb 07		 jmp	 SHORT $LN9@InsertUser
$LN8@InsertUser:
  000c2	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN9@InsertUser:
  000c9	8b 55 84	 mov	 edx, DWORD PTR tv92[ebp]
  000cc	89 55 a0	 mov	 DWORD PTR $T6[ebp], edx
  000cf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000d3	8b 45 a0	 mov	 eax, DWORD PTR $T6[ebp]
  000d6	89 45 e8	 mov	 DWORD PTR _pServerUserItem$[ebp], eax

; 1054 : 		}

  000d9	eb 2d		 jmp	 SHORT $LN11@InsertUser
__catch$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$0:

; 1055 : 		catch (...)
; 1056 : 		{
; 1057 : 			ASSERT(FALSE);

  000db	33 c0		 xor	 eax, eax
  000dd	75 19		 jne	 SHORT $LN10@InsertUser
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z@4JA
  000e5	83 c1 16	 add	 ecx, 22			; 00000016H
  000e8	51		 push	 ecx
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000ee	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000f3	85 c0		 test	 eax, eax
  000f5	74 01		 je	 SHORT $LN10@InsertUser
  000f7	cc		 int	 3
$LN10@InsertUser:

; 1058 : 			return false;

  000f8	c6 45 9b 00	 mov	 BYTE PTR $T4[ebp], 0
  000fc	b8 00 00 00 00	 mov	 eax, $LN17@InsertUser
  00101	c3		 ret	 0

; 1059 : 		}

  00102	b8 00 00 00 00	 mov	 eax, $LN11@InsertUser
  00107	c3		 ret	 0
$LN11@InsertUser:
  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0010f	eb 0f		 jmp	 SHORT $LN16@InsertUser
$LN17@InsertUser:
  00111	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1058 : 			return false;

  00118	8a 45 9b	 mov	 al, BYTE PTR $T4[ebp]
  0011b	e9 fe 02 00 00	 jmp	 $LN1@InsertUser
$LN16@InsertUser:

; 1060 : 	}
; 1061 : 
; 1062 : 	//设置接口
; 1063 : 	pServerUserItem->m_pIServerUserItemSink=m_pIServerUserItemSink;

  00120	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00123	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00129	89 90 20 07 00
	00		 mov	 DWORD PTR [eax+1824], edx

; 1064 : 	pServerUserItem->m_pIMatchUserItemSink=m_pIMatchUserItemSink;

  0012f	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00132	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00138	89 90 24 07 00
	00		 mov	 DWORD PTR [eax+1828], edx

; 1065 : 
; 1066 : 	//原始变量
; 1067 : 	pServerUserItem->m_ScoreFormer.bConsumptionType.lScore = UserInfo.bConsumptionType.lScore;

  0013e	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00141	8b 4d 0c	 mov	 ecx, DWORD PTR _UserInfo$[ebp]
  00144	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  0014a	89 90 5c 01 00
	00		 mov	 DWORD PTR [eax+348], edx
  00150	8b 89 ac 00 00
	00		 mov	 ecx, DWORD PTR [ecx+172]
  00156	89 88 60 01 00
	00		 mov	 DWORD PTR [eax+352], ecx

; 1068 : 	pServerUserItem->m_ScoreFormer.dwWinCount=UserInfo.dwWinCount;

  0015c	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  0015f	8b 4d 0c	 mov	 ecx, DWORD PTR _UserInfo$[ebp]
  00162	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00168	89 90 8c 01 00
	00		 mov	 DWORD PTR [eax+396], edx

; 1069 : 	pServerUserItem->m_ScoreFormer.dwLostCount=UserInfo.dwLostCount;

  0016e	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00171	8b 4d 0c	 mov	 ecx, DWORD PTR _UserInfo$[ebp]
  00174	8b 91 dc 00 00
	00		 mov	 edx, DWORD PTR [ecx+220]
  0017a	89 90 90 01 00
	00		 mov	 DWORD PTR [eax+400], edx

; 1070 : 	pServerUserItem->m_ScoreFormer.dwDrawCount=UserInfo.dwDrawCount;

  00180	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00183	8b 4d 0c	 mov	 ecx, DWORD PTR _UserInfo$[ebp]
  00186	8b 91 e0 00 00
	00		 mov	 edx, DWORD PTR [ecx+224]
  0018c	89 90 94 01 00
	00		 mov	 DWORD PTR [eax+404], edx

; 1071 : 	pServerUserItem->m_ScoreFormer.dwFleeCount=UserInfo.dwFleeCount;

  00192	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00195	8b 4d 0c	 mov	 ecx, DWORD PTR _UserInfo$[ebp]
  00198	8b 91 e4 00 00
	00		 mov	 edx, DWORD PTR [ecx+228]
  0019e	89 90 98 01 00
	00		 mov	 DWORD PTR [eax+408], edx

; 1072 : 	pServerUserItem->m_ScoreFormer.dwExperience=UserInfo.dwExperience;

  001a4	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  001a7	8b 4d 0c	 mov	 ecx, DWORD PTR _UserInfo$[ebp]
  001aa	8b 91 ec 00 00
	00		 mov	 edx, DWORD PTR [ecx+236]
  001b0	89 90 a8 01 00
	00		 mov	 DWORD PTR [eax+424], edx

; 1073 : 	pServerUserItem->m_ScoreFormer.lIntegralCount = UserInfo.lIntegralCount;

  001b6	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  001b9	8b 4d 0c	 mov	 ecx, DWORD PTR _UserInfo$[ebp]
  001bc	8b 91 f4 00 00
	00		 mov	 edx, DWORD PTR [ecx+244]
  001c2	89 90 9c 01 00
	00		 mov	 DWORD PTR [eax+412], edx
  001c8	8b 89 f8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+248]
  001ce	89 88 a0 01 00
	00		 mov	 DWORD PTR [eax+416], ecx

; 1074 : 
; 1075 : 	//属性变量
; 1076 : 	CopyMemory(&pServerUserItem->m_UserInfo,&UserInfo,sizeof(UserInfo));

  001d4	68 10 01 00 00	 push	 272			; 00000110H
  001d9	8b 45 0c	 mov	 eax, DWORD PTR _UserInfo$[ebp]
  001dc	50		 push	 eax
  001dd	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  001e0	83 c1 08	 add	 ecx, 8
  001e3	51		 push	 ecx
  001e4	e8 00 00 00 00	 call	 _memcpy
  001e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1077 : 	ZeroMemory(&pServerUserItem->m_RecordInfo,sizeof(pServerUserItem->m_RecordInfo));

  001ec	6a 50		 push	 80			; 00000050H
  001ee	6a 00		 push	 0
  001f0	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  001f3	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 _memset
  001fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1078 : 	ZeroMemory(&pServerUserItem->m_VariationInfo,sizeof(pServerUserItem->m_VariationInfo));

  00201	6a 50		 push	 80			; 00000050H
  00203	6a 00		 push	 0
  00205	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00208	05 28 02 00 00	 add	 eax, 552		; 00000228H
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 _memset
  00213	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1079 : 
; 1080 : 	//登录信息
; 1081 : 	pServerUserItem->m_dwLogonTime=UserInfoPlus.dwLogonTime;

  00216	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00219	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  0021c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0021e	89 90 9c 02 00
	00		 mov	 DWORD PTR [eax+668], edx

; 1082 : 	pServerUserItem->m_dwInoutIndex=UserInfoPlus.dwInoutIndex;

  00224	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00227	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  0022a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0022d	89 90 a0 02 00
	00		 mov	 DWORD PTR [eax+672], edx

; 1083 : 
; 1084 : 	//用户权限
; 1085 : 	pServerUserItem->m_dwUserRight=UserInfoPlus.dwUserRight;

  00233	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00236	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  00239	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0023c	89 90 78 02 00
	00		 mov	 DWORD PTR [eax+632], edx

; 1086 : 	pServerUserItem->m_dwMasterRight=UserInfoPlus.dwMasterRight;

  00242	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00245	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  00248	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0024b	89 90 7c 02 00
	00		 mov	 DWORD PTR [eax+636], edx

; 1087 : 	pServerUserItem->m_lRestrictScore=UserInfoPlus.lRestrictScore;

  00251	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00254	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  00257	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0025a	89 90 88 02 00
	00		 mov	 DWORD PTR [eax+648], edx
  00260	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  00263	89 88 8c 02 00
	00		 mov	 DWORD PTR [eax+652], ecx

; 1088 : 
; 1089 : 	//连接信息
; 1090 : 	pServerUserItem->m_wBindIndex=UserInfoPlus.wBindIndex;

  00269	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  0026c	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  0026f	66 8b 51 08	 mov	 dx, WORD PTR [ecx+8]
  00273	66 89 90 f4 06
	00 00		 mov	 WORD PTR [eax+1780], dx

; 1091 : 	pServerUserItem->m_dwClientAddr=UserInfoPlus.dwClientAddr;

  0027a	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  0027d	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  00280	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00283	89 90 f8 06 00
	00		 mov	 DWORD PTR [eax+1784], edx

; 1092 : 	lstrcpyn(pServerUserItem->m_szMachineID,UserInfoPlus.szMachineID,CountArray(pServerUserItem->m_szMachineID));

  00289	6a 21		 push	 33			; 00000021H
  0028b	8b 45 10	 mov	 eax, DWORD PTR _UserInfoPlus$[ebp]
  0028e	83 c0 10	 add	 eax, 16			; 00000010H
  00291	50		 push	 eax
  00292	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  00295	81 c1 fc 06 00
	00		 add	 ecx, 1788		; 000006fcH
  0029b	51		 push	 ecx
  0029c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1093 : 
; 1094 : 	//辅助变量
; 1095 : 	pServerUserItem->m_bClientReady=false;

  002a2	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  002a5	c6 80 b5 02 00
	00 00		 mov	 BYTE PTR [eax+693], 0

; 1096 : 	pServerUserItem->m_bModifyScore=false;

  002ac	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  002af	c6 80 b6 02 00
	00 00		 mov	 BYTE PTR [eax+694], 0

; 1097 : 	pServerUserItem->m_bTrusteeUser=false;

  002b6	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  002b9	c6 80 b4 02 00
	00 00		 mov	 BYTE PTR [eax+692], 0

; 1098 : 	pServerUserItem->m_bMobileUser=UserInfoPlus.bMobileUser;

  002c0	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  002c3	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  002c6	8a 51 48	 mov	 dl, BYTE PTR [ecx+72]
  002c9	88 90 a4 02 00
	00		 mov	 BYTE PTR [eax+676], dl

; 1099 : 	pServerUserItem->m_bAndroidUser=UserInfoPlus.bAndroidUser;

  002cf	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  002d2	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  002d5	8a 51 49	 mov	 dl, BYTE PTR [ecx+73]
  002d8	88 90 a5 02 00
	00		 mov	 BYTE PTR [eax+677], dl

; 1100 : 	lstrcpyn(pServerUserItem->m_szLogonPass,UserInfoPlus.szPassword,CountArray(pServerUserItem->m_szLogonPass));

  002de	6a 21		 push	 33			; 00000021H
  002e0	8b 45 10	 mov	 eax, DWORD PTR _UserInfoPlus$[ebp]
  002e3	83 c0 4a	 add	 eax, 74			; 0000004aH
  002e6	50		 push	 eax
  002e7	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  002ea	81 c1 b7 02 00
	00		 add	 ecx, 695		; 000002b7H
  002f0	51		 push	 ecx
  002f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1101 : 	lstrcpyn(pServerUserItem->m_szUserGameData,UserInfoPlus.szUserGameData,CountArray(pServerUserItem->m_szUserGameData));

  002f7	68 00 04 00 00	 push	 1024			; 00000400H
  002fc	8b 45 10	 mov	 eax, DWORD PTR _UserInfoPlus$[ebp]
  002ff	83 c0 6b	 add	 eax, 107		; 0000006bH
  00302	50		 push	 eax
  00303	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  00306	81 c1 d8 02 00
	00		 add	 ecx, 728		; 000002d8H
  0030c	51		 push	 ecx
  0030d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 1102 : 	if (pServerUserItem->IsValidGameData(pServerUserItem->m_szUserGameData,g_szGameDataSpe)==true)

  00313	51		 push	 ecx
  00314	8b cc		 mov	 ecx, esp
  00316	89 65 94	 mov	 DWORD PTR $T3[ebp], esp
  00319	68 00 00 00 00	 push	 OFFSET ?g_szGameDataSpe@@3QBDB
  0031e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00324	89 45 8c	 mov	 DWORD PTR tv279[ebp], eax
  00327	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  0032e	51		 push	 ecx
  0032f	8b cc		 mov	 ecx, esp
  00331	89 65 90	 mov	 DWORD PTR $T2[ebp], esp
  00334	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00337	05 d8 02 00 00	 add	 eax, 728		; 000002d8H
  0033c	50		 push	 eax
  0033d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00343	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0034a	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  0034d	e8 00 00 00 00	 call	 ?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ; CServerUserItem::IsValidGameData
  00352	88 45 8b	 mov	 BYTE PTR tv271[ebp], al
  00355	0f b6 4d 8b	 movzx	 ecx, BYTE PTR tv271[ebp]
  00359	83 f9 01	 cmp	 ecx, 1
  0035c	75 08		 jne	 SHORT $LN5@InsertUser

; 1103 : 	{
; 1104 : 		pServerUserItem->InitUserGameDataMap();

  0035e	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  00361	e8 00 00 00 00	 call	 ?InitUserGameDataMap@CServerUserItem@@AAEXXZ ; CServerUserItem::InitUserGameDataMap
$LN5@InsertUser:

; 1105 : 	}
; 1106 : 
; 1107 : 	//托管调整
; 1108 : 	if ((UserInfoPlus.lRestrictScore>0L) && (UserInfo.bConsumptionType.lScore>UserInfoPlus.lRestrictScore))

  00366	8b 45 10	 mov	 eax, DWORD PTR _UserInfoPlus$[ebp]
  00369	89 45 8c	 mov	 DWORD PTR tv392[ebp], eax
  0036c	8b 4d 8c	 mov	 ecx, DWORD PTR tv392[ebp]
  0036f	83 79 44 00	 cmp	 DWORD PTR [ecx+68], 0
  00373	7c 7a		 jl	 SHORT $LN6@InsertUser
  00375	7f 09		 jg	 SHORT $LN18@InsertUser
  00377	8b 55 8c	 mov	 edx, DWORD PTR tv392[ebp]
  0037a	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  0037e	76 6f		 jbe	 SHORT $LN6@InsertUser
$LN18@InsertUser:
  00380	8b 45 0c	 mov	 eax, DWORD PTR _UserInfo$[ebp]
  00383	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  00386	89 45 8c	 mov	 DWORD PTR tv399[ebp], eax
  00389	89 4d 88	 mov	 DWORD PTR tv400[ebp], ecx
  0038c	8b 55 8c	 mov	 edx, DWORD PTR tv399[ebp]
  0038f	8b 45 88	 mov	 eax, DWORD PTR tv400[ebp]
  00392	8b 8a ac 00 00
	00		 mov	 ecx, DWORD PTR [edx+172]
  00398	3b 48 44	 cmp	 ecx, DWORD PTR [eax+68]
  0039b	7c 52		 jl	 SHORT $LN6@InsertUser
  0039d	7f 11		 jg	 SHORT $LN19@InsertUser
  0039f	8b 55 8c	 mov	 edx, DWORD PTR tv399[ebp]
  003a2	8b 45 88	 mov	 eax, DWORD PTR tv400[ebp]
  003a5	8b 8a a8 00 00
	00		 mov	 ecx, DWORD PTR [edx+168]
  003ab	3b 48 40	 cmp	 ecx, DWORD PTR [eax+64]
  003ae	76 3f		 jbe	 SHORT $LN6@InsertUser
$LN19@InsertUser:

; 1109 : 	{
; 1110 : 		pServerUserItem->m_UserInfo.bConsumptionType.lScore = UserInfoPlus.lRestrictScore;

  003b0	8b 45 e8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  003b3	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  003b6	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  003b9	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  003bf	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  003c2	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 1111 : 		pServerUserItem->m_lTrusteeScore = UserInfo.bConsumptionType.lScore - UserInfoPlus.lRestrictScore;

  003c8	8b 45 0c	 mov	 eax, DWORD PTR _UserInfo$[ebp]
  003cb	8b 4d 10	 mov	 ecx, DWORD PTR _UserInfoPlus$[ebp]
  003ce	8b 90 a8 00 00
	00		 mov	 edx, DWORD PTR [eax+168]
  003d4	2b 51 40	 sub	 edx, DWORD PTR [ecx+64]
  003d7	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [eax+172]
  003dd	1b 41 44	 sbb	 eax, DWORD PTR [ecx+68]
  003e0	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  003e3	89 91 80 02 00
	00		 mov	 DWORD PTR [ecx+640], edx
  003e9	89 81 84 02 00
	00		 mov	 DWORD PTR [ecx+644], eax
$LN6@InsertUser:

; 1112 : 	}
; 1113 : 
; 1114 : 	//插入用户
; 1115 : 	m_UserItemArray.Add(pServerUserItem);

  003ef	8d 45 e8	 lea	 eax, DWORD PTR _pServerUserItem$[ebp]
  003f2	50		 push	 eax
  003f3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003f6	83 c1 20	 add	 ecx, 32			; 00000020H
  003f9	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABQAVCServerUserItem@@@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Add

; 1116 : 	m_UserIDMap[UserInfo.dwUserID]=pServerUserItem;

  003fe	8b 45 0c	 mov	 eax, DWORD PTR _UserInfo$[ebp]
  00401	8b 08		 mov	 ecx, DWORD PTR [eax]
  00403	51		 push	 ecx
  00404	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00407	83 c1 04	 add	 ecx, 4
  0040a	e8 00 00 00 00	 call	 ??A?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEAAPAVCServerUserItem@@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::operator[]
  0040f	8b 55 e8	 mov	 edx, DWORD PTR _pServerUserItem$[ebp]
  00412	89 10		 mov	 DWORD PTR [eax], edx

; 1117 : 
; 1118 : 	//设置变量
; 1119 : 	*pIServerUserResult=pServerUserItem;

  00414	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserResult$[ebp]
  00417	8b 4d e8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  0041a	89 08		 mov	 DWORD PTR [eax], ecx

; 1120 : 
; 1121 : 	return true;

  0041c	b0 01		 mov	 al, 1
$LN1@InsertUser:

; 1122 : }

  0041e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00421	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00428	59		 pop	 ecx
  00429	5f		 pop	 edi
  0042a	5e		 pop	 esi
  0042b	5b		 pop	 ebx
  0042c	8b e5		 mov	 esp, ebp
  0042e	5d		 pop	 ebp
  0042f	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$2:
  00000	68 78 07 00 00	 push	 1912			; 00000778H
  00005	8b 45 9c	 mov	 eax, DWORD PTR $T5[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z$3:
  00012	8b 4d 94	 mov	 ecx, DWORD PTR $T3[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InsertUserItem@CServerUserManager@@UAE_NPAPAUIServerUserItem@@AAUtagUserInfo@@AAUtagUserInfoPlus@@@Z ENDP ; CServerUserManager::InsertUserItem
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_dwUserID$ = -12					; size = 4
_pTempUserItem$ = -8					; size = 4
_this$ = -4						; size = 4
_pIServerUserItem$ = 8					; size = 4
?DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z PROC ; CServerUserManager::DeleteUserItem, COMDAT
; _this$ = ecx

; 1000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1001 : 	//效验参数
; 1002 : 	ASSERT((pIServerUserItem!=NULL)&&(pIServerUserItem->GetUserStatus()==US_NULL));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00010	74 14		 je	 SHORT $LN9@DeleteUser
  00012	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0001a	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  0001d	ff d0		 call	 eax
  0001f	0f b6 c8	 movzx	 ecx, al
  00022	85 c9		 test	 ecx, ecx
  00024	74 19		 je	 SHORT $LN10@DeleteUser
$LN9@DeleteUser:
  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z@4JA
  0002c	83 c2 02	 add	 edx, 2
  0002f	52		 push	 edx
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00035	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003a	85 c0		 test	 eax, eax
  0003c	74 01		 je	 SHORT $LN10@DeleteUser
  0003e	cc		 int	 3
$LN10@DeleteUser:

; 1003 : 	if ((pIServerUserItem==NULL)||(pIServerUserItem->GetUserStatus()!=US_NULL)) return false;

  0003f	83 7d 08 00	 cmp	 DWORD PTR _pIServerUserItem$[ebp], 0
  00043	74 14		 je	 SHORT $LN6@DeleteUser
  00045	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  00048	8b 10		 mov	 edx, DWORD PTR [eax]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0004d	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00050	ff d0		 call	 eax
  00052	0f b6 c8	 movzx	 ecx, al
  00055	85 c9		 test	 ecx, ecx
  00057	74 07		 je	 SHORT $LN5@DeleteUser
$LN6@DeleteUser:
  00059	32 c0		 xor	 al, al
  0005b	e9 b3 00 00 00	 jmp	 $LN1@DeleteUser
$LN5@DeleteUser:

; 1004 : 
; 1005 : 	//变量定义
; 1006 : 	CServerUserItem * pTempUserItem=NULL;

  00060	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pTempUserItem$[ebp], 0

; 1007 : 	DWORD dwUserID=pIServerUserItem->GetUserID();

  00067	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  0006a	8b 10		 mov	 edx, DWORD PTR [eax]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _pIServerUserItem$[ebp]
  0006f	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00072	ff d0		 call	 eax
  00074	89 45 f4	 mov	 DWORD PTR _dwUserID$[ebp], eax

; 1008 : 
; 1009 : 	//寻找对象
; 1010 : 	for (INT_PTR i=0;i<m_UserItemArray.GetCount();i++)

  00077	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0007e	eb 09		 jmp	 SHORT $LN4@DeleteUser
$LN2@DeleteUser:
  00080	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  00083	83 c0 01	 add	 eax, 1
  00086	89 45 f0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@DeleteUser:
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 20	 add	 ecx, 32			; 00000020H
  0008f	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00094	39 45 f0	 cmp	 DWORD PTR _i$1[ebp], eax
  00097	7d 5b		 jge	 SHORT $LN3@DeleteUser

; 1011 : 	{
; 1012 : 		//获取用户
; 1013 : 		pTempUserItem=m_UserItemArray[i];

  00099	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	83 c1 20	 add	 ecx, 32			; 00000020H
  000a3	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	89 4d f8	 mov	 DWORD PTR _pTempUserItem$[ebp], ecx

; 1014 : 		if (pIServerUserItem!=pTempUserItem) continue;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _pIServerUserItem$[ebp]
  000b0	3b 45 f8	 cmp	 eax, DWORD PTR _pTempUserItem$[ebp]
  000b3	74 02		 je	 SHORT $LN7@DeleteUser
  000b5	eb c9		 jmp	 SHORT $LN2@DeleteUser
$LN7@DeleteUser:

; 1015 : 
; 1016 : 		//重置对象
; 1017 : 		pTempUserItem->ResetUserItem();

  000b7	8b 4d f8	 mov	 ecx, DWORD PTR _pTempUserItem$[ebp]
  000ba	e8 00 00 00 00	 call	 ?ResetUserItem@CServerUserItem@@AAEXXZ ; CServerUserItem::ResetUserItem

; 1018 : 
; 1019 : 		//删除对象
; 1020 : 		m_UserItemArray.RemoveAt(i);

  000bf	6a 01		 push	 1
  000c1	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	83 c1 20	 add	 ecx, 32			; 00000020H
  000cb	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAt

; 1021 : 		m_UserIDMap.RemoveKey(dwUserID);

  000d0	8b 45 f4	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  000d3	50		 push	 eax
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	83 c1 04	 add	 ecx, 4
  000da	e8 00 00 00 00	 call	 ?RemoveKey@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEHK@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveKey

; 1022 : 		m_UserItemStore.Add(pTempUserItem);

  000df	8d 45 f8	 lea	 eax, DWORD PTR _pTempUserItem$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	83 c1 34	 add	 ecx, 52			; 00000034H
  000e9	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABQAVCServerUserItem@@@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Add

; 1023 : 
; 1024 : 		return true;

  000ee	b0 01		 mov	 al, 1
  000f0	eb 21		 jmp	 SHORT $LN1@DeleteUser

; 1025 : 	}

  000f2	eb 8c		 jmp	 SHORT $LN2@DeleteUser
$LN3@DeleteUser:

; 1026 : 
; 1027 : 	//错误断言
; 1028 : 	ASSERT(FALSE);

  000f4	33 c0		 xor	 eax, eax
  000f6	75 19		 jne	 SHORT $LN11@DeleteUser
  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z@4JA
  000fe	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00101	51		 push	 ecx
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00107	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0010c	85 c0		 test	 eax, eax
  0010e	74 01		 je	 SHORT $LN11@DeleteUser
  00110	cc		 int	 3
$LN11@DeleteUser:

; 1029 : 
; 1030 : 	return false;

  00111	32 c0		 xor	 al, al
$LN1@DeleteUser:

; 1031 : }

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c2 04 00	 ret	 4
?DeleteUserItem@CServerUserManager@@UAE_NPAUIServerUserItem@@@Z ENDP ; CServerUserManager::DeleteUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?DeleteUserItem@CServerUserManager@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeleteUserItem@CServerUserManager@@UAE_NXZ PROC	; CServerUserManager::DeleteUserItem, COMDAT
; _this$ = ecx

; 987  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 988  : 	//存储对象
; 989  : 	m_UserItemStore.Append(m_UserItemArray);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 20	 add	 eax, 32			; 00000020H
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 34	 add	 ecx, 52			; 00000034H
  00019	e8 00 00 00 00	 call	 ?Append@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABV1@@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Append

; 990  : 
; 991  : 	//删除对象
; 992  : 	m_UserIDMap.RemoveAll();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 04	 add	 ecx, 4
  00024	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveAll

; 993  : 	m_UserItemArray.RemoveAll();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 20	 add	 ecx, 32			; 00000020H
  0002f	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAll

; 994  : 
; 995  : 	return true;

  00034	b0 01		 mov	 al, 1

; 996  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?DeleteUserItem@CServerUserManager@@UAE_NXZ ENDP	; CServerUserManager::DeleteUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserItemCount@CServerUserManager@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserItemCount@CServerUserManager@@UAEKXZ PROC	; CServerUserManager::GetUserItemCount, COMDAT
; _this$ = ecx

; 386  : 	virtual DWORD GetUserItemCount() { return (DWORD)m_UserItemArray.GetCount(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 20	 add	 ecx, 32			; 00000020H
  00012	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?GetUserItemCount@CServerUserManager@@UAEKXZ ENDP	; CServerUserManager::GetUserItemCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?GetAndroidCount@CServerUserManager@@UAEKXZ
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_pServerUserItem$ = -12					; size = 4
_dwAndroidCount$ = -8					; size = 4
_this$ = -4						; size = 4
?GetAndroidCount@CServerUserManager@@UAEKXZ PROC	; CServerUserManager::GetAndroidCount, COMDAT
; _this$ = ecx

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 955  : 	//变量定义
; 956  : 	DWORD dwAndroidCount=0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwAndroidCount$[ebp], 0

; 957  : 	CServerUserItem * pServerUserItem=NULL;

  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pServerUserItem$[ebp], 0

; 958  : 
; 959  : 	//搜索用户
; 960  : 	for (INT_PTR i=0;i<m_UserItemArray.GetCount();i++)

  0001a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00021	eb 09		 jmp	 SHORT $LN4@GetAndroid
$LN2@GetAndroid:
  00023	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  00026	83 c0 01	 add	 eax, 1
  00029	89 45 f0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetAndroid:
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 20	 add	 ecx, 32			; 00000020H
  00032	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00037	39 45 f0	 cmp	 DWORD PTR _i$1[ebp], eax
  0003a	7d 37		 jge	 SHORT $LN3@GetAndroid

; 961  : 	{
; 962  : 		pServerUserItem=m_UserItemArray[i];

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 20	 add	 ecx, 32			; 00000020H
  00046	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	89 4d f4	 mov	 DWORD PTR _pServerUserItem$[ebp], ecx

; 963  : 		if(pServerUserItem->IsAndroidUser() == true) dwAndroidCount++;

  00050	8b 45 f4	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00053	8b 10		 mov	 edx, DWORD PTR [eax]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  00058	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0005e	ff d0		 call	 eax
  00060	0f b6 c8	 movzx	 ecx, al
  00063	83 f9 01	 cmp	 ecx, 1
  00066	75 09		 jne	 SHORT $LN5@GetAndroid
  00068	8b 45 f8	 mov	 eax, DWORD PTR _dwAndroidCount$[ebp]
  0006b	83 c0 01	 add	 eax, 1
  0006e	89 45 f8	 mov	 DWORD PTR _dwAndroidCount$[ebp], eax
$LN5@GetAndroid:

; 964  : 	}

  00071	eb b0		 jmp	 SHORT $LN2@GetAndroid
$LN3@GetAndroid:

; 965  : 
; 966  : 	return dwAndroidCount;

  00073	8b 45 f8	 mov	 eax, DWORD PTR _dwAndroidCount$[ebp]

; 967  : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?GetAndroidCount@CServerUserManager@@UAEKXZ ENDP	; CServerUserManager::GetAndroidCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@PBD@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_pServerUserItem$ = -8					; size = 4
_this$ = -4						; size = 4
_pszNickName$ = 8					; size = 4
?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@PBD@Z PROC ; CServerUserManager::SearchUserItem, COMDAT
; _this$ = ecx

; 971  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 972  : 	//变量定义
; 973  : 	CServerUserItem * pServerUserItem=NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pServerUserItem$[ebp], 0

; 974  : 
; 975  : 	//搜索用户
; 976  : 	for (INT_PTR i=0;i<m_UserItemArray.GetCount();i++)

  00013	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN4@SearchUser
$LN2@SearchUser:
  0001c	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@SearchUser:
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	83 c1 20	 add	 ecx, 32			; 00000020H
  0002b	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00030	39 45 f4	 cmp	 DWORD PTR _i$1[ebp], eax
  00033	7d 37		 jge	 SHORT $LN3@SearchUser

; 977  : 	{
; 978  : 		pServerUserItem=m_UserItemArray[i];

  00035	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  00038	50		 push	 eax
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 20	 add	 ecx, 32			; 00000020H
  0003f	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 4d f8	 mov	 DWORD PTR _pServerUserItem$[ebp], ecx

; 979  : 		if (pServerUserItem->ContrastNickName(pszNickName)==true) return pServerUserItem;

  00049	8b 45 08	 mov	 eax, DWORD PTR _pszNickName$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  00050	8b 11		 mov	 edx, DWORD PTR [ecx]
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _pServerUserItem$[ebp]
  00055	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0005b	ff d0		 call	 eax
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	83 f9 01	 cmp	 ecx, 1
  00063	75 05		 jne	 SHORT $LN5@SearchUser
  00065	8b 45 f8	 mov	 eax, DWORD PTR _pServerUserItem$[ebp]
  00068	eb 04		 jmp	 SHORT $LN1@SearchUser
$LN5@SearchUser:

; 980  : 	}

  0006a	eb b0		 jmp	 SHORT $LN2@SearchUser
$LN3@SearchUser:

; 981  : 
; 982  : 	return NULL;

  0006c	33 c0		 xor	 eax, eax
$LN1@SearchUser:

; 983  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@PBD@Z ENDP ; CServerUserManager::SearchUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@K@Z PROC ; CServerUserManager::SearchUserItem, COMDAT
; _this$ = ecx

; 948  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 949  : 	return m_UserIDMap[dwUserID];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e8 00 00 00 00	 call	 ??A?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEAAPAVCServerUserItem@@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::operator[]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]

; 950  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SearchUserItem@CServerUserManager@@UAEPAUIServerUserItem@@K@Z ENDP ; CServerUserManager::SearchUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?EnumUserItem@CServerUserManager@@UAEPAUIServerUserItem@@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wEnumIndex$ = 8					; size = 2
?EnumUserItem@CServerUserManager@@UAEPAUIServerUserItem@@G@Z PROC ; CServerUserManager::EnumUserItem, COMDAT
; _this$ = ecx

; 941  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 942  : 	if (wEnumIndex>=m_UserItemArray.GetCount()) return NULL;

  0000c	0f b7 75 08	 movzx	 esi, WORD PTR _wEnumIndex$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 20	 add	 ecx, 32			; 00000020H
  00016	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  0001b	3b f0		 cmp	 esi, eax
  0001d	7c 04		 jl	 SHORT $LN2@EnumUserIt
  0001f	33 c0		 xor	 eax, eax
  00021	eb 12		 jmp	 SHORT $LN1@EnumUserIt
$LN2@EnumUserIt:

; 943  : 	return m_UserItemArray[wEnumIndex];

  00023	0f b7 45 08	 movzx	 eax, WORD PTR _wEnumIndex$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 20	 add	 ecx, 32			; 00000020H
  0002e	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@EnumUserIt:

; 944  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?EnumUserItem@CServerUserManager@@UAEPAUIServerUserItem@@G@Z ENDP ; CServerUserManager::EnumUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z
_TEXT	SEGMENT
tv88 = -72						; size = 4
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_pIUnknownEx$ = 8					; size = 4
?SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z PROC ; CServerUserManager::SetMatchUserItemSink, COMDAT
; _this$ = ecx

; 923  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 924  : 	//设置接口
; 925  : 	if (pIUnknownEx!=NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00010	0f 84 89 00 00
	00		 je	 $LN2@SetMatchUs

; 926  : 	{
; 927  : 		//查询接口
; 928  : 		ASSERT(QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IMatchUserItemSink)!=NULL);

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  0001a	75 09		 jne	 SHORT $LN6@SetMatchUs
  0001c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  00023	eb 1a		 jmp	 SHORT $LN7@SetMatchUs
$LN6@SetMatchUs:
  00025	68 00 01 01 06	 push	 100729088		; 06010100H
  0002a	68 00 00 00 00	 push	 OFFSET ?IID_IMatchUserItemSink@@3U_GUID@@B
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  00037	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003a	ff d0		 call	 eax
  0003c	89 45 b8	 mov	 DWORD PTR tv72[ebp], eax
$LN7@SetMatchUs:
  0003f	83 7d b8 00	 cmp	 DWORD PTR tv72[ebp], 0
  00043	75 19		 jne	 SHORT $LN8@SetMatchUs
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA
  0004b	83 c1 05	 add	 ecx, 5
  0004e	51		 push	 ecx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00054	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00059	85 c0		 test	 eax, eax
  0005b	74 01		 je	 SHORT $LN8@SetMatchUs
  0005d	cc		 int	 3
$LN8@SetMatchUs:

; 929  : 		m_pIMatchUserItemSink=QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IMatchUserItemSink);

  0005e	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00062	75 09		 jne	 SHORT $LN9@SetMatchUs
  00064	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
  0006b	eb 1a		 jmp	 SHORT $LN10@SetMatchUs
$LN9@SetMatchUs:
  0006d	68 00 01 01 06	 push	 100729088		; 06010100H
  00072	68 00 00 00 00	 push	 OFFSET ?IID_IMatchUserItemSink@@3U_GUID@@B
  00077	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  0007a	8b 10		 mov	 edx, DWORD PTR [eax]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	ff d0		 call	 eax
  00084	89 45 b8	 mov	 DWORD PTR tv88[ebp], eax
$LN10@SetMatchUs:
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 55 b8	 mov	 edx, DWORD PTR tv88[ebp]
  0008d	89 51 4c	 mov	 DWORD PTR [ecx+76], edx

; 930  : 
; 931  : 		//成功判断
; 932  : 		if (m_pIMatchUserItemSink==NULL) return false;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00097	75 04		 jne	 SHORT $LN4@SetMatchUs
  00099	32 c0		 xor	 al, al
  0009b	eb 0e		 jmp	 SHORT $LN1@SetMatchUs
$LN4@SetMatchUs:

; 933  : 	}

  0009d	eb 0a		 jmp	 SHORT $LN3@SetMatchUs
$LN2@SetMatchUs:

; 934  : 	else m_pIMatchUserItemSink=NULL;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
$LN3@SetMatchUs:

; 935  : 
; 936  : 	return true;

  000a9	b0 01		 mov	 al, 1
$LN1@SetMatchUs:

; 937  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?SetMatchUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z ENDP ; CServerUserManager::SetMatchUserItemSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z
_TEXT	SEGMENT
tv88 = -72						; size = 4
tv72 = -72						; size = 4
_this$ = -4						; size = 4
_pIUnknownEx$ = 8					; size = 4
?SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z PROC ; CServerUserManager::SetServerUserItemSink, COMDAT
; _this$ = ecx

; 905  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 906  : 	//设置接口
; 907  : 	if (pIUnknownEx!=NULL)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00010	0f 84 89 00 00
	00		 je	 $LN2@SetServerU

; 908  : 	{
; 909  : 		//查询接口
; 910  : 		ASSERT(QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IServerUserItemSink)!=NULL);

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  0001a	75 09		 jne	 SHORT $LN6@SetServerU
  0001c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  00023	eb 1a		 jmp	 SHORT $LN7@SetServerU
$LN6@SetServerU:
  00025	68 00 01 01 06	 push	 100729088		; 06010100H
  0002a	68 00 00 00 00	 push	 OFFSET ?IID_IServerUserItemSink@@3U_GUID@@B
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  00037	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003a	ff d0		 call	 eax
  0003c	89 45 b8	 mov	 DWORD PTR tv72[ebp], eax
$LN7@SetServerU:
  0003f	83 7d b8 00	 cmp	 DWORD PTR tv72[ebp], 0
  00043	75 19		 jne	 SHORT $LN8@SetServerU
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z@4JA
  0004b	83 c1 05	 add	 ecx, 5
  0004e	51		 push	 ecx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00054	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00059	85 c0		 test	 eax, eax
  0005b	74 01		 je	 SHORT $LN8@SetServerU
  0005d	cc		 int	 3
$LN8@SetServerU:

; 911  : 		m_pIServerUserItemSink=QUERY_OBJECT_PTR_INTERFACE(pIUnknownEx,IServerUserItemSink);

  0005e	83 7d 08 00	 cmp	 DWORD PTR _pIUnknownEx$[ebp], 0
  00062	75 09		 jne	 SHORT $LN9@SetServerU
  00064	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
  0006b	eb 1a		 jmp	 SHORT $LN10@SetServerU
$LN9@SetServerU:
  0006d	68 00 01 01 06	 push	 100729088		; 06010100H
  00072	68 00 00 00 00	 push	 OFFSET ?IID_IServerUserItemSink@@3U_GUID@@B
  00077	8b 45 08	 mov	 eax, DWORD PTR _pIUnknownEx$[ebp]
  0007a	8b 10		 mov	 edx, DWORD PTR [eax]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _pIUnknownEx$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	ff d0		 call	 eax
  00084	89 45 b8	 mov	 DWORD PTR tv88[ebp], eax
$LN10@SetServerU:
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 55 b8	 mov	 edx, DWORD PTR tv88[ebp]
  0008d	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 912  : 
; 913  : 		//成功判断
; 914  : 		if (m_pIServerUserItemSink==NULL) return false;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	83 78 48 00	 cmp	 DWORD PTR [eax+72], 0
  00097	75 04		 jne	 SHORT $LN4@SetServerU
  00099	32 c0		 xor	 al, al
  0009b	eb 0e		 jmp	 SHORT $LN1@SetServerU
$LN4@SetServerU:

; 915  : 	}

  0009d	eb 0a		 jmp	 SHORT $LN3@SetServerU
$LN2@SetServerU:

; 916  : 	else m_pIServerUserItemSink=NULL;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
$LN3@SetServerU:

; 917  : 
; 918  : 	return true;

  000a9	b0 01		 mov	 al, 1
$LN1@SetServerU:

; 919  : }

  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 04 00	 ret	 4
?SetServerUserItemSink@CServerUserManager@@UAE_NPAUIUnknownEx@@@Z ENDP ; CServerUserManager::SetServerUserItemSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?QueryInterface@CServerUserManager@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CServerUserManager@@UAEPAXABU_GUID@@K@Z PROC ; CServerUserManager::QueryInterface, COMDAT
; _this$ = ecx

; 897  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 898  : 	QUERYINTERFACE(IServerUserManager,Guid,dwQueryVer);

  0000c	68 00 00 00 00	 push	 OFFSET ?IID_IServerUserManager@@3U_GUID@@B
  00011	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _==
  0001a	83 c4 08	 add	 esp, 8
  0001d	0f b6 c8	 movzx	 ecx, al
  00020	85 c9		 test	 ecx, ecx
  00022	74 1d		 je	 SHORT $LN2@QueryInter
  00024	68 00 01 01 06	 push	 100729088		; 06010100H
  00029	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00032	83 c4 08	 add	 esp, 8
  00035	0f b6 c8	 movzx	 ecx, al
  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN2@QueryInter
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	eb 37		 jmp	 SHORT $LN1@QueryInter
$LN2@QueryInter:

; 899  : 	QUERYINTERFACE_IUNKNOWNEX(IServerUserManager,Guid,dwQueryVer);

  00041	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00046	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _==
  0004f	83 c4 08	 add	 esp, 8
  00052	0f b6 c8	 movzx	 ecx, al
  00055	85 c9		 test	 ecx, ecx
  00057	74 1d		 je	 SHORT $LN3@QueryInter
  00059	68 00 01 01 06	 push	 100729088		; 06010100H
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00067	83 c4 08	 add	 esp, 8
  0006a	0f b6 c8	 movzx	 ecx, al
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 05		 je	 SHORT $LN3@QueryInter
  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:

; 900  : 	return NULL;

  00076	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 901  : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?QueryInterface@CServerUserManager@@UAEPAXABU_GUID@@K@Z ENDP ; CServerUserManager::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?Release@CServerUserManager@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@CServerUserManager@@UAEXXZ PROC		; CServerUserManager::Release, COMDAT
; _this$ = ecx

; 361  : 	virtual VOID Release() { return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Release@CServerUserManager@@UAEXXZ ENDP		; CServerUserManager::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ??1CServerUserManager@@UAE@XZ
_TEXT	SEGMENT
tv140 = -92						; size = 4
tv90 = -92						; size = 4
_i$2 = -24						; size = 4
_i$3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CServerUserManager@@UAE@XZ PROC			; CServerUserManager::~CServerUserManager, COMDAT
; _this$ = ecx

; 882  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CServerUserManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CServerUserManager@@6B@

; 883  : 	//释放用户
; 884  : 	for (INT_PTR i=0;i<m_UserItemStore.GetCount();i++) m_UserItemStore[i]->Release();

  00034	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  0003b	eb 09		 jmp	 SHORT $LN4@CServerUse
$LN2@CServerUse:
  0003d	8b 45 ec	 mov	 eax, DWORD PTR _i$3[ebp]
  00040	83 c0 01	 add	 eax, 1
  00043	89 45 ec	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@CServerUse:
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 34	 add	 ecx, 52			; 00000034H
  0004c	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00051	39 45 ec	 cmp	 DWORD PTR _i$3[ebp], eax
  00054	7d 22		 jge	 SHORT $LN3@CServerUse
  00056	8b 45 ec	 mov	 eax, DWORD PTR _i$3[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 34	 add	 ecx, 52			; 00000034H
  00060	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	89 4d a4	 mov	 DWORD PTR tv90[ebp], ecx
  0006a	8b 55 a4	 mov	 edx, DWORD PTR tv90[ebp]
  0006d	8b 02		 mov	 eax, DWORD PTR [edx]
  0006f	8b 4d a4	 mov	 ecx, DWORD PTR tv90[ebp]
  00072	8b 10		 mov	 edx, DWORD PTR [eax]
  00074	ff d2		 call	 edx
  00076	eb c5		 jmp	 SHORT $LN2@CServerUse
$LN3@CServerUse:

; 885  : 	for (INT_PTR i=0;i<m_UserItemArray.GetCount();i++) m_UserItemArray[i]->Release();

  00078	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0007f	eb 09		 jmp	 SHORT $LN7@CServerUse
$LN5@CServerUse:
  00081	8b 45 e8	 mov	 eax, DWORD PTR _i$2[ebp]
  00084	83 c0 01	 add	 eax, 1
  00087	89 45 e8	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@CServerUse:
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	83 c1 20	 add	 ecx, 32			; 00000020H
  00090	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
  00095	39 45 e8	 cmp	 DWORD PTR _i$2[ebp], eax
  00098	7d 22		 jge	 SHORT $LN6@CServerUse
  0009a	8b 45 e8	 mov	 eax, DWORD PTR _i$2[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	83 c1 20	 add	 ecx, 32			; 00000020H
  000a4	e8 00 00 00 00	 call	 ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	89 4d a4	 mov	 DWORD PTR tv140[ebp], ecx
  000ae	8b 55 a4	 mov	 edx, DWORD PTR tv140[ebp]
  000b1	8b 02		 mov	 eax, DWORD PTR [edx]
  000b3	8b 4d a4	 mov	 ecx, DWORD PTR tv140[ebp]
  000b6	8b 10		 mov	 edx, DWORD PTR [eax]
  000b8	ff d2		 call	 edx
  000ba	eb c5		 jmp	 SHORT $LN5@CServerUse
$LN6@CServerUse:

; 886  : 
; 887  : 	//删除数据
; 888  : 	m_UserIDMap.RemoveAll();

  000bc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	83 c1 04	 add	 ecx, 4
  000c2	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveAll

; 889  : 	m_UserItemStore.RemoveAll();

  000c7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	83 c1 34	 add	 ecx, 52			; 00000034H
  000cd	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAll

; 890  : 	m_UserItemArray.RemoveAll();

  000d2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	83 c1 20	 add	 ecx, 32			; 00000020H
  000d8	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXXZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAll

; 891  : 
; 892  : 	return;
; 893  : }

  000dd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	83 c1 34	 add	 ecx, 52			; 00000034H
  000e3	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>
  000e8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	83 c1 20	 add	 ecx, 32			; 00000020H
  000ee	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>
  000f3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	83 c1 04	 add	 ecx, 4
  000f9	e8 00 00 00 00	 call	 ??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::~CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
  000fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00101	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00108	59		 pop	 ecx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CServerUserManager@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CServerUserManager@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CServerUserManager@@UAE@XZ ENDP			; CServerUserManager::~CServerUserManager
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ??0CServerUserManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CServerUserManager@@QAE@XZ PROC			; CServerUserManager::CServerUserManager, COMDAT
; _this$ = ecx

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CServerUserManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0IServerUserManager@@QAE@XZ
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CServerUserManager@@6B@
  0003c	6a 0a		 push	 10			; 0000000aH
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 04	 add	 ecx, 4
  00044	e8 00 00 00 00	 call	 ??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 20	 add	 ecx, 32			; 00000020H
  00056	e8 00 00 00 00	 call	 ??0?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::CWHArray<CServerUserItem *,CServerUserItem * const &>
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 34	 add	 ecx, 52			; 00000034H
  00065	e8 00 00 00 00	 call	 ??0?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::CWHArray<CServerUserItem *,CServerUserItem * const &>
  0006a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 870  : 	//组件接口
; 871  : 	m_pIServerUserItemSink=NULL;

  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0

; 872  : 	m_pIMatchUserItemSink=NULL;

  00078	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0

; 873  : 
; 874  : 	//设置质数
; 875  : 	m_UserIDMap.InitHashTable(PRIME_SERVER_USER);

  00082	6a 01		 push	 1
  00084	68 f7 01 00 00	 push	 503			; 000001f7H
  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 04	 add	 ecx, 4
  0008f	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::InitHashTable

; 876  : 
; 877  : 	return;
; 878  : }

  00094	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CServerUserManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::~CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
__unwindfunclet$??0CServerUserManager@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>
__unwindfunclet$??0CServerUserManager@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 34	 add	 ecx, 52			; 00000034H
  0001c	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>
__ehhandler$??0CServerUserManager@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CServerUserManager@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CServerUserManager@@QAE@XZ ENDP			; CServerUserManager::CServerUserManager
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAEPAXI@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ ; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAEPAXI@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXXZ PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 44		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	c1 e1 02	 shl	 ecx, 2
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?RemoveAll@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXXZ ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHH@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHH@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHABQAVCServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHABQAVCServerUserItem@@@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHABQAVCServerUserItem@@@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEAAPAVCServerUserItem@@H@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Append@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABV1@@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nOldCount$2 = -8					; size = 4
_this$ = -4						; size = 4
_Src$ = 8						; size = 4
?Append@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABV1@@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Append, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 193  : 	//效验参数
; 194  : 	ASSERT(this!=&Src);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR _Src$[ebp]
  00012	75 14		 jne	 SHORT $LN8@Append
  00014	68 c2 00 00 00	 push	 194			; 000000c2H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00023	85 c0		 test	 eax, eax
  00025	74 01		 je	 SHORT $LN8@Append
  00027	cc		 int	 3
$LN8@Append:

; 195  : 	if (this==&Src) AfxThrowInvalidArgException();

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	3b 45 08	 cmp	 eax, DWORD PTR _Src$[ebp]
  0002e	75 05		 jne	 SHORT $LN5@Append
  00030	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@Append:

; 196  : 
; 197  : 	//拷贝数组
; 198  : 	if (Src.m_nElementCount>0)

  00035	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  00038	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0003c	7e 6d		 jle	 SHORT $LN6@Append

; 199  : 	{
; 200  : 		INT_PTR nOldCount=m_nElementCount;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00044	89 4d f8	 mov	 DWORD PTR _nOldCount$2[ebp], ecx

; 201  : 		AllocMemory(m_nElementCount+Src.m_nElementCount);

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _Src$[ebp]
  00050	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  00053	51		 push	 ecx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXH@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::AllocMemory

; 202  : 		for (INT_PTR i=0;i<Src.m_nElementCount;i++)	m_pData[m_nElementCount+i]=Src.m_pData[i];

  0005c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00063	eb 09		 jmp	 SHORT $LN4@Append
$LN2@Append:
  00065	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Append:
  0006e	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  00074	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00077	7d 20		 jge	 SHORT $LN3@Append
  00079	8b 45 08	 mov	 eax, DWORD PTR _Src$[ebp]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00085	03 45 f4	 add	 eax, DWORD PTR _i$1[ebp]
  00088	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0008e	8b 75 f4	 mov	 esi, DWORD PTR _i$1[ebp]
  00091	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00094	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
  00097	eb cc		 jmp	 SHORT $LN2@Append
$LN3@Append:

; 203  : 		m_nElementCount+=Src.m_nElementCount;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009f	8b 55 08	 mov	 edx, DWORD PTR _Src$[ebp]
  000a2	03 4a 10	 add	 ecx, DWORD PTR [edx+16]
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN6@Append:

; 204  : 	}
; 205  : 
; 206  : 	return m_nElementCount;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
$LN7@Append:

; 207  : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
?Append@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABV1@@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Append
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABQAVCServerUserItem@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABQAVCServerUserItem@@@Z PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEXHABQAVCServerUserItem@@@Z ; CWHArray<CServerUserItem *,CServerUserItem * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAEHABQAVCServerUserItem@@@Z ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ PROC ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QBEHXZ ENDP ; CWHArray<CServerUserItem *,CServerUserItem * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ PROC	; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PAVCServerUserItem@@ABQAV1@@@UAE@XZ ENDP	; CWHArray<CServerUserItem *,CServerUserItem * const &>::~CWHArray<CServerUserItem *,CServerUserItem * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAE@XZ PROC	; CWHArray<CServerUserItem *,CServerUserItem * const &>::CWHArray<CServerUserItem *,CServerUserItem * const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAVCServerUserItem@@ABQAV1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@PAVCServerUserItem@@ABQAV1@@@QAE@XZ ENDP	; CWHArray<CServerUserItem *,CServerUserItem * const &>::CWHArray<CServerUserItem *,CServerUserItem * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEPAXI@Z PROC	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::~CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 21		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 0e		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	6a 1c		 push	 28			; 0000001cH
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEPAXI@Z ENDP	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AssertValid@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXXZ PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::AssertValid, COMDAT
; _this$ = ecx

; 1820 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1821 : 	CObject::AssertValid();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 1822 : 
; 1823 : 	ASSERT(m_nHashTableSize > 0);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001b	77 14		 ja	 SHORT $LN3@AssertVali
  0001d	68 1f 07 00 00	 push	 1823			; 0000071fH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN3@AssertVali
  00030	cc		 int	 3
$LN3@AssertVali:

; 1824 : 	ASSERT(m_nCount == 0 || m_pHashTable != NULL);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00038	74 1d		 je	 SHORT $LN1@AssertVali
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00041	75 14		 jne	 SHORT $LN1@AssertVali
  00043	68 20 07 00 00	 push	 1824			; 00000720H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN1@AssertVali
  00056	cc		 int	 3
$LN1@AssertVali:

; 1825 : 		// non-empty map should have hash table
; 1826 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?AssertValid@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXXZ ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Dump@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_pos$1 = -16						; size = 4
_val$2 = -12						; size = 4
_key$3 = -8						; size = 4
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXAAVCDumpContext@@@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::Dump, COMDAT
; _this$ = ecx

; 1794 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1795 : 	CObject::Dump(dc);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 1796 : 
; 1797 : 	dc << "with " << m_nCount << " elements";

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_09HCLNAIDE@?5elements@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_05PLCFPPOI@with?5@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1798 : 	if (dc.GetDepth() > 0)

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00047	85 c0		 test	 eax, eax
  00049	7e 71		 jle	 SHORT $LN4@Dump

; 1799 : 	{
; 1800 : 		// Dump in format "[key] -> value"
; 1801 : 		KEY key[1];
; 1802 : 		VALUE val[1];
; 1803 : 
; 1804 : 		POSITION pos = GetStartPosition();

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetStartPosition
  00053	89 45 f0	 mov	 DWORD PTR _pos$1[ebp], eax
$LN2@Dump:

; 1805 : 		while (pos != NULL)

  00056	83 7d f0 00	 cmp	 DWORD PTR _pos$1[ebp], 0
  0005a	74 60		 je	 SHORT $LN4@Dump

; 1806 : 		{
; 1807 : 			GetNextAssoc(pos, key[0], val[0]);

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8d 54 0d f4	 lea	 edx, DWORD PTR _val$2[ebp+ecx]
  00068	52		 push	 edx
  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	6b c8 00	 imul	 ecx, eax, 0
  00071	8d 54 0d f8	 lea	 edx, DWORD PTR _key$3[ebp+ecx]
  00075	52		 push	 edx
  00076	8d 45 f0	 lea	 eax, DWORD PTR _pos$1[ebp]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEXAAPAU__POSITION@@AAKAAPAVCServerUserItem@@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetNextAssoc

; 1808 : 			dc << "\n\t[";

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_03OHJIHPJH@?6?7?$FL@
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0008a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1809 : 			DumpElements<KEY>(dc, key, 1);

  0008f	6a 01		 push	 1
  00091	8d 45 f8	 lea	 eax, DWORD PTR _key$3[ebp]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z ; DumpElements<unsigned long>

; 1810 : 			dc << "] = ";

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000a6	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1811 : 			DumpElements<VALUE>(dc, val, 1);

  000ab	6a 01		 push	 1
  000ad	8d 45 f4	 lea	 eax, DWORD PTR _val$2[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ??$DumpElements@PAVCServerUserItem@@@@YGXAAVCDumpContext@@PBQAVCServerUserItem@@H@Z ; DumpElements<CServerUserItem *>

; 1812 : 		}

  000ba	eb 9a		 jmp	 SHORT $LN2@Dump
$LN4@Dump:

; 1813 : 	}
; 1814 : 
; 1815 : 	dc << "\n";

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000c4	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1816 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?Dump@?$CMap@KKPAVCServerUserItem@@PAV1@@@UBEXAAVCDumpContext@@@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
tv154 = -100						; size = 4
_newValue$1 = -32					; size = 4
_newKey$2 = -28						; size = 4
_nNewCount$3 = -24					; size = 4
_pValue$4 = -20						; size = 4
_pKey$5 = -16						; size = 4
_pAssoc$6 = -12						; size = 4
_nHash$7 = -8						; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEXAAVCArchive@@@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::Serialize, COMDAT
; _this$ = ecx

; 1743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1744 : 	ASSERT_VALID(this);

  0000c	68 d0 06 00 00	 push	 1744			; 000006d0H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1745 : 
; 1746 : 	CObject::Serialize(ar);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 1747 : 
; 1748 : 	if (ar.IsStoring())

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00033	85 c0		 test	 eax, eax
  00035	0f 84 b3 00 00
	00		 je	 $LN10@Serialize

; 1749 : 	{
; 1750 : 		ar.WriteCount(m_nCount);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00041	51		 push	 ecx
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00045	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1751 : 		if (m_nCount == 0)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00051	75 05		 jne	 SHORT $LN12@Serialize

; 1752 : 			return;  // nothing more to do

  00053	e9 f8 00 00 00	 jmp	 $LN1@Serialize
$LN12@Serialize:

; 1753 : 
; 1754 : 		ASSERT(m_pHashTable != NULL);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005f	75 14		 jne	 SHORT $LN15@Serialize
  00061	68 da 06 00 00	 push	 1754			; 000006daH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN15@Serialize
  00074	cc		 int	 3
$LN15@Serialize:

; 1755 : 		if (m_pHashTable != NULL)

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0007c	74 6e		 je	 SHORT $LN13@Serialize

; 1756 : 		{
; 1757 : 			for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$7[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN4@Serialize
$LN2@Serialize:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _nHash$7[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _nHash$7[ebp], eax
$LN4@Serialize:
  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$7[ebp]
  00096	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00099	73 51		 jae	 SHORT $LN13@Serialize

; 1758 : 			{
; 1759 : 				CAssoc* pAssoc;
; 1760 : 				for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	8b 55 f8	 mov	 edx, DWORD PTR _nHash$7[ebp]
  000a4	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000a7	89 45 f4	 mov	 DWORD PTR _pAssoc$6[ebp], eax
  000aa	eb 09		 jmp	 SHORT $LN7@Serialize
$LN5@Serialize:
  000ac	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	89 4d f4	 mov	 DWORD PTR _pAssoc$6[ebp], ecx
$LN7@Serialize:
  000b5	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$6[ebp], 0
  000b9	74 2f		 je	 SHORT $LN6@Serialize

; 1761 : 				{
; 1762 : 					KEY* pKey;
; 1763 : 					VALUE* pValue;
; 1764 : 					/*
; 1765 : 					* in some cases the & operator might be overloaded, and we cannot use it to
; 1766 : 					* obtain the address of a given object.  We then use the following trick to
; 1767 : 					* get the address
; 1768 : 					*/
; 1769 : 					pKey = reinterpret_cast< KEY* >( &reinterpret_cast< int& >( const_cast< KEY& > ( static_cast< const KEY& >( pAssoc->key ) ) ) );

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000be	89 45 f0	 mov	 DWORD PTR _pKey$5[ebp], eax

; 1770 : 					pValue = reinterpret_cast< VALUE* >( &reinterpret_cast< int& >( static_cast< VALUE& >( pAssoc->value ) ) );

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000c4	83 c0 04	 add	 eax, 4
  000c7	89 45 ec	 mov	 DWORD PTR _pValue$4[ebp], eax

; 1771 : 					SerializeElements<KEY>(ar, pKey, 1);

  000ca	6a 01		 push	 1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pKey$5[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ; SerializeElements<unsigned long>

; 1772 : 					SerializeElements<VALUE>(ar, pValue, 1);

  000d9	6a 01		 push	 1
  000db	8b 45 ec	 mov	 eax, DWORD PTR _pValue$4[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$SerializeElements@PAVCServerUserItem@@@@YGXAAVCArchive@@PAPAVCServerUserItem@@H@Z ; SerializeElements<CServerUserItem *>

; 1773 : 				}

  000e8	eb c2		 jmp	 SHORT $LN5@Serialize
$LN6@Serialize:

; 1774 : 			}

  000ea	eb 9b		 jmp	 SHORT $LN2@Serialize
$LN13@Serialize:

; 1775 : 		}
; 1776 : 	}
; 1777 : 	else

  000ec	eb 62		 jmp	 SHORT $LN1@Serialize
$LN10@Serialize:

; 1778 : 	{
; 1779 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000f1	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  000f6	89 45 e8	 mov	 DWORD PTR _nNewCount$3[ebp], eax
$LN8@Serialize:

; 1780 : 		while (nNewCount--)

  000f9	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$3[ebp]
  000fc	89 45 9c	 mov	 DWORD PTR tv154[ebp], eax
  000ff	8b 4d e8	 mov	 ecx, DWORD PTR _nNewCount$3[ebp]
  00102	83 e9 01	 sub	 ecx, 1
  00105	89 4d e8	 mov	 DWORD PTR _nNewCount$3[ebp], ecx
  00108	83 7d 9c 00	 cmp	 DWORD PTR tv154[ebp], 0
  0010c	74 42		 je	 SHORT $LN1@Serialize

; 1781 : 		{
; 1782 : 			KEY newKey[1];
; 1783 : 			VALUE newValue[1];
; 1784 : 			SerializeElements<KEY>(ar, newKey, 1);

  0010e	6a 01		 push	 1
  00110	8d 45 e4	 lea	 eax, DWORD PTR _newKey$2[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ; SerializeElements<unsigned long>

; 1785 : 			SerializeElements<VALUE>(ar, newValue, 1);

  0011d	6a 01		 push	 1
  0011f	8d 45 e0	 lea	 eax, DWORD PTR _newValue$1[ebp]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$SerializeElements@PAVCServerUserItem@@@@YGXAAVCArchive@@PAPAVCServerUserItem@@H@Z ; SerializeElements<CServerUserItem *>

; 1786 : 			SetAt(newKey[0], newValue[0]);

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	8b 54 0d e0	 mov	 edx, DWORD PTR _newValue$1[ebp+ecx]
  00138	52		 push	 edx
  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	6b c8 00	 imul	 ecx, eax, 0
  00141	8b 54 0d e4	 mov	 edx, DWORD PTR _newKey$2[ebp+ecx]
  00145	52		 push	 edx
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	e8 00 00 00 00	 call	 ?SetAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXKPAVCServerUserItem@@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::SetAt

; 1787 : 		}

  0014e	eb a9		 jmp	 SHORT $LN8@Serialize
$LN1@Serialize:

; 1788 : 	}
; 1789 : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 04 00	 ret	 4
?Serialize@?$CMap@KKPAVCServerUserItem@@PAV1@@@UAEXAAVCArchive@@@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ PROC	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::~CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>, COMDAT
; _this$ = ecx

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@

; 1473 : 	RemoveAll();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveAll

; 1474 : 	ASSERT(m_nCount == 0);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $LN1@CMap
  00045	68 c2 05 00 00	 push	 1474			; 000005c2H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN1@CMap
  00058	cc		 int	 3
$LN1@CMap:

; 1475 : }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CMap@KKPAVCServerUserItem@@PAV1@@@UAE@XZ ENDP	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::~CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetAssocAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@IBEPAVCAssoc@1@KAAI0@Z
_TEXT	SEGMENT
_pAssoc$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_nHashBucket$ = 12					; size = 4
_nHashValue$ = 16					; size = 4
?GetAssocAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@IBEPAVCAssoc@1@KAAI0@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetAssocAt, COMDAT
; _this$ = ecx

; 1532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 : 	nHashValue = HashKey<ARG_KEY>(key);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$HashKey@K@@YGIK@Z	; HashKey<unsigned long>
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00018	89 01		 mov	 DWORD PTR [ecx], eax

; 1534 : 	nHashBucket = nHashValue % m_nHashTableSize;

  0001a	8b 45 10	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	33 d2		 xor	 edx, edx
  00024	f7 71 08	 div	 DWORD PTR [ecx+8]
  00027	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1535 : 
; 1536 : 	if (m_pHashTable == NULL)

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00033	75 04		 jne	 SHORT $LN5@GetAssocAt

; 1537 : 		return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 49		 jmp	 SHORT $LN1@GetAssocAt
$LN5@GetAssocAt:

; 1538 : 
; 1539 : 	// see if it exists
; 1540 : 	CAssoc* pAssoc;
; 1541 : 	for (pAssoc = m_pHashTable[nHashBucket]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  00039	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00047	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0004a	eb 09		 jmp	 SHORT $LN4@GetAssocAt
$LN2@GetAssocAt:
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@GetAssocAt:
  00055	83 7d f8 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  00059	74 25		 je	 SHORT $LN3@GetAssocAt

; 1542 : 	{
; 1543 : 		if (pAssoc->nHashValue == nHashValue && CompareElements(&pAssoc->key, &key))

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00061	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00064	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00066	75 16		 jne	 SHORT $LN6@GetAssocAt
  00068	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ??$CompareElements@KK@@YGHPBK0@Z ; CompareElements<unsigned long,unsigned long>
  00075	85 c0		 test	 eax, eax
  00077	74 05		 je	 SHORT $LN6@GetAssocAt

; 1544 : 			return pAssoc;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0007c	eb 04		 jmp	 SHORT $LN1@GetAssocAt
$LN6@GetAssocAt:

; 1545 : 	}

  0007e	eb cc		 jmp	 SHORT $LN2@GetAssocAt
$LN3@GetAssocAt:

; 1546 : 	return NULL;

  00080	33 c0		 xor	 eax, eax
$LN1@GetAssocAt:

; 1547 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?GetAssocAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@IBEPAVCAssoc@1@KAAI0@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetAssocAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?FreeAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEXPAVCAssoc@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pAssoc$ = 8						; size = 4
?FreeAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEXPAVCAssoc@1@@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::FreeAssoc, COMDAT
; _this$ = ecx

; 1516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1517 : 	pAssoc->CAssoc::~CAssoc();
; 1518 : 	pAssoc->pNext = m_pFreeList;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00015	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1519 : 	m_pFreeList = pAssoc;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0001e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1520 : 	m_nCount--;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00027	83 e9 01	 sub	 ecx, 1
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1521 : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00037	7d 14		 jge	 SHORT $LN4@FreeAssoc
  00039	68 f1 05 00 00	 push	 1521			; 000005f1H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00043	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00048	85 c0		 test	 eax, eax
  0004a	74 01		 je	 SHORT $LN4@FreeAssoc
  0004c	cc		 int	 3
$LN4@FreeAssoc:

; 1522 : 
; 1523 : 	// if no more elements, cleanup completely
; 1524 : 	if (m_nCount == 0)

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00054	75 08		 jne	 SHORT $LN1@FreeAssoc

; 1525 : 		RemoveAll();

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveAll
$LN1@FreeAssoc:

; 1526 : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?FreeAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEXPAVCAssoc@1@@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::FreeAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?NewAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEPAVCAssoc@1@K@Z
_TEXT	SEGMENT
tv88 = -100						; size = 4
$T1 = -96						; size = 4
_pTemp$ = -28						; size = 4
_pAssoc$ = -24						; size = 4
___afx_condVal$2 = -20					; size = 4
_i$3 = -16						; size = 4
_pAssoc$4 = -12						; size = 4
_newBlock$5 = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?NewAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEPAVCAssoc@1@K@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::NewAssoc, COMDAT
; _this$ = ecx

; 1480 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1481 : 	if (m_pFreeList == NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	75 72		 jne	 SHORT $LN7@NewAssoc

; 1482 : 	{
; 1483 : 		// add another block
; 1484 : 		CPlex* newBlock = CPlex::Create(m_pBlocks, m_nBlockSize, sizeof(CMap::CAssoc));

  00015	6a 10		 push	 16			; 00000010H
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 14	 add	 edx, 20			; 00000014H
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create
  0002a	89 45 f8	 mov	 DWORD PTR _newBlock$5[ebp], eax

; 1485 : 		// chain them into free list
; 1486 : 		CMap::CAssoc* pAssoc = (CMap::CAssoc*) newBlock->data();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _newBlock$5[ebp]
  00030	e8 00 00 00 00	 call	 ?data@CPlex@@QAEPAXXZ	; CPlex::data
  00035	89 45 f4	 mov	 DWORD PTR _pAssoc$4[ebp], eax

; 1487 : 		// free in reverse order to make it easier to debug
; 1488 : 		pAssoc += m_nBlockSize - 1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	c1 e1 04	 shl	 ecx, 4
  00044	03 4d f4	 add	 ecx, DWORD PTR _pAssoc$4[ebp]
  00047	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx

; 1489 : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pAssoc--)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d f0	 mov	 DWORD PTR _i$3[ebp], ecx
  00056	eb 12		 jmp	 SHORT $LN4@NewAssoc
$LN2@NewAssoc:
  00058	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00064	83 e9 10	 sub	 ecx, 16			; 00000010H
  00067	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx
$LN4@NewAssoc:
  0006a	83 7d f0 00	 cmp	 DWORD PTR _i$3[ebp], 0
  0006e	7c 17		 jl	 SHORT $LN7@NewAssoc

; 1490 : 		{
; 1491 : 			pAssoc->pNext = m_pFreeList;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$4[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1492 : 			m_pFreeList = pAssoc;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00082	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1493 : 		}

  00085	eb d1		 jmp	 SHORT $LN2@NewAssoc
$LN7@NewAssoc:

; 1494 : 	}
; 1495 : 	ENSURE(m_pFreeList != NULL);  // we must have something

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008e	74 09		 je	 SHORT $LN11@NewAssoc
  00090	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00097	eb 07		 jmp	 SHORT $LN12@NewAssoc
$LN11@NewAssoc:
  00099	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN12@NewAssoc:
  000a0	8b 4d 9c	 mov	 ecx, DWORD PTR tv88[ebp]
  000a3	89 4d ec	 mov	 DWORD PTR ___afx_condVal$2[ebp], ecx
  000a6	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000aa	75 14		 jne	 SHORT $LN13@NewAssoc
  000ac	68 d7 05 00 00	 push	 1495			; 000005d7H
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b6	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000bb	85 c0		 test	 eax, eax
  000bd	74 01		 je	 SHORT $LN13@NewAssoc
  000bf	cc		 int	 3
$LN13@NewAssoc:
  000c0	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000c4	75 05		 jne	 SHORT $LN5@NewAssoc
  000c6	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@NewAssoc:
  000cb	33 c0		 xor	 eax, eax
  000cd	75 b8		 jne	 SHORT $LN7@NewAssoc

; 1496 : 
; 1497 : 	CMap::CAssoc* pAssoc = m_pFreeList;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d5	89 4d e8	 mov	 DWORD PTR _pAssoc$[ebp], ecx

; 1498 : 
; 1499 : 	// zero the memory
; 1500 : 	CMap::CAssoc* pTemp = pAssoc->pNext;

  000d8	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000db	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000de	89 4d e4	 mov	 DWORD PTR _pTemp$[ebp], ecx

; 1501 : 	memset( pAssoc, 0, sizeof(CMap::CAssoc) );

  000e1	6a 10		 push	 16			; 00000010H
  000e3	6a 00		 push	 0
  000e5	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _memset
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1502 : 	pAssoc->pNext = pTemp;

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _pTemp$[ebp]
  000f7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1503 : 
; 1504 : 	m_pFreeList = m_pFreeList->pNext;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00100	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00106	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1505 : 	m_nCount++;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010f	83 c1 01	 add	 ecx, 1
  00112	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00115	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1506 : 	ASSERT(m_nCount > 0);  // make sure we don't overflow

  00118	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0011f	7f 14		 jg	 SHORT $LN14@NewAssoc
  00121	68 e2 05 00 00	 push	 1506			; 000005e2H
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0012b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00130	85 c0		 test	 eax, eax
  00132	74 01		 je	 SHORT $LN14@NewAssoc
  00134	cc		 int	 3
$LN14@NewAssoc:

; 1507 : #pragma push_macro("new")
; 1508 : #undef new
; 1509 : 	::new(pAssoc) CMap::CAssoc(key);

  00135	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00138	50		 push	 eax
  00139	6a 10		 push	 16			; 00000010H
  0013b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00140	83 c4 08	 add	 esp, 8
  00143	89 45 a0	 mov	 DWORD PTR $T1[ebp], eax
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00149	51		 push	 ecx
  0014a	8b 4d a0	 mov	 ecx, DWORD PTR $T1[ebp]
  0014d	e8 00 00 00 00	 call	 ??0CAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CAssoc::CAssoc

; 1510 : #pragma pop_macro("new")
; 1511 : 	return pAssoc;

  00152	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
$LN10@NewAssoc:

; 1512 : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
?NewAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEPAVCAssoc@1@K@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::NewAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?InitHashTable@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXIH@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
___afx_condVal$3 = -8					; size = 4
_this$ = -4						; size = 4
_nHashSize$ = 8						; size = 4
_bAllocNow$ = 12					; size = 4
?InitHashTable@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXIH@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::InitHashTable, COMDAT
; _this$ = ecx

; 1420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 : 	ASSERT_VALID(this);

  0000c	68 8d 05 00 00	 push	 1421			; 0000058dH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1422 : 	ASSERT(m_nCount == 0);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00026	74 14		 je	 SHORT $LN9@InitHashTa
  00028	68 8e 05 00 00	 push	 1422			; 0000058eH
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $LN9@InitHashTa
  0003b	cc		 int	 3
$LN9@InitHashTa:

; 1423 : 	ASSERT(nHashSize > 0);

  0003c	83 7d 08 00	 cmp	 DWORD PTR _nHashSize$[ebp], 0
  00040	77 14		 ja	 SHORT $LN10@InitHashTa
  00042	68 8f 05 00 00	 push	 1423			; 0000058fH
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00051	85 c0		 test	 eax, eax
  00053	74 01		 je	 SHORT $LN10@InitHashTa
  00055	cc		 int	 3
$LN10@InitHashTa:

; 1424 : 
; 1425 : 	if (m_pHashTable != NULL)

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005d	74 1f		 je	 SHORT $LN5@InitHashTa

; 1426 : 	{
; 1427 : 		// free hash table
; 1428 : 		delete[] m_pHashTable;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	89 4d b4	 mov	 DWORD PTR $T2[ebp], ecx
  00068	8b 55 b4	 mov	 edx, DWORD PTR $T2[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00071	83 c4 04	 add	 esp, 4

; 1429 : 		m_pHashTable = NULL;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN5@InitHashTa:

; 1430 : 	}
; 1431 : 
; 1432 : 	if (bAllocNow)

  0007e	83 7d 0c 00	 cmp	 DWORD PTR _bAllocNow$[ebp], 0
  00082	0f 84 92 00 00
	00		 je	 $LN6@InitHashTa

; 1433 : 	{
; 1434 : 		m_pHashTable = new CAssoc* [nHashSize];

  00088	68 9a 05 00 00	 push	 1434			; 0000059aH
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00092	33 c9		 xor	 ecx, ecx
  00094	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00097	ba 04 00 00 00	 mov	 edx, 4
  0009c	f7 e2		 mul	 edx
  0009e	0f 90 c1	 seto	 cl
  000a1	f7 d9		 neg	 ecx
  000a3	0b c8		 or	 ecx, eax
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  000b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN4@InitHashTa:

; 1435 : 		ENSURE(m_pHashTable != NULL);

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000c1	74 09		 je	 SHORT $LN11@InitHashTa
  000c3	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  000ca	eb 07		 jmp	 SHORT $LN12@InitHashTa
$LN11@InitHashTa:
  000cc	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN12@InitHashTa:
  000d3	8b 4d ac	 mov	 ecx, DWORD PTR tv137[ebp]
  000d6	89 4d f8	 mov	 DWORD PTR ___afx_condVal$3[ebp], ecx
  000d9	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000dd	75 14		 jne	 SHORT $LN13@InitHashTa
  000df	68 9b 05 00 00	 push	 1435			; 0000059bH
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000e9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ee	85 c0		 test	 eax, eax
  000f0	74 01		 je	 SHORT $LN13@InitHashTa
  000f2	cc		 int	 3
$LN13@InitHashTa:
  000f3	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000f7	75 05		 jne	 SHORT $LN2@InitHashTa
  000f9	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@InitHashTa:
  000fe	33 c0		 xor	 eax, eax
  00100	75 b8		 jne	 SHORT $LN4@InitHashTa

; 1436 : 		memset(m_pHashTable, 0, sizeof(CAssoc*) * nHashSize);

  00102	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00105	c1 e0 02	 shl	 eax, 2
  00108	50		 push	 eax
  00109	6a 00		 push	 0
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _memset
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@InitHashTa:

; 1437 : 	}
; 1438 : 	m_nHashTableSize = nHashSize;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _nHashSize$[ebp]
  00120	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@InitHashTa:

; 1439 : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
?InitHashTable@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXIH@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::InitHashTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNextAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEXAAPAU__POSITION@@AAKAAPAVCServerUserItem@@@Z
_TEXT	SEGMENT
tv133 = -100						; size = 4
tv83 = -100						; size = 4
tv73 = -100						; size = 4
_nBucket$1 = -32					; size = 4
_pAssocNext$ = -28					; size = 4
___afx_condVal$2 = -24					; size = 4
_nBucket$3 = -20					; size = 4
___afx_condVal$4 = -16					; size = 4
_pAssocRet$ = -12					; size = 4
___afx_condVal$5 = -8					; size = 4
_this$ = -4						; size = 4
_rNextPosition$ = 8					; size = 4
_rKey$ = 12						; size = 4
_rValue$ = 16						; size = 4
?GetNextAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEXAAPAU__POSITION@@AAKAAPAVCServerUserItem@@@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetNextAssoc, COMDAT
; _this$ = ecx

; 1640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 	ASSERT_VALID(this);

  0000c	68 69 06 00 00	 push	 1641			; 00000669H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@GetNextAss:

; 1642 : 	ENSURE(m_pHashTable != NULL);  // never call on empty map

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN25@GetNextAss
  00028	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN26@GetNextAss
$LN25@GetNextAss:
  00031	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN26@GetNextAss:
  00038	8b 4d 9c	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$5[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  00042	75 14		 jne	 SHORT $LN27@GetNextAss
  00044	68 6a 06 00 00	 push	 1642			; 0000066aH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN27@GetNextAss
  00057	cc		 int	 3
$LN27@GetNextAss:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@GetNextAss
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetNextAss:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@GetNextAss

; 1643 : 
; 1644 : 	CAssoc* pAssocRet = (CAssoc*)rNextPosition;

  00067	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	89 4d f4	 mov	 DWORD PTR _pAssocRet$[ebp], ecx
$LN7@GetNextAss:

; 1645 : 	ENSURE(pAssocRet != NULL);

  0006f	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  00073	74 09		 je	 SHORT $LN28@GetNextAss
  00075	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  0007c	eb 07		 jmp	 SHORT $LN29@GetNextAss
$LN28@GetNextAss:
  0007e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN29@GetNextAss:
  00085	8b 45 9c	 mov	 eax, DWORD PTR tv83[ebp]
  00088	89 45 f0	 mov	 DWORD PTR ___afx_condVal$4[ebp], eax
  0008b	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  0008f	75 14		 jne	 SHORT $LN30@GetNextAss
  00091	68 6d 06 00 00	 push	 1645			; 0000066dH
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a0	85 c0		 test	 eax, eax
  000a2	74 01		 je	 SHORT $LN30@GetNextAss
  000a4	cc		 int	 3
$LN30@GetNextAss:
  000a5	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  000a9	75 05		 jne	 SHORT $LN5@GetNextAss
  000ab	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@GetNextAss:
  000b0	33 c0		 xor	 eax, eax
  000b2	75 bb		 jne	 SHORT $LN7@GetNextAss

; 1646 : 
; 1647 : 	if (pAssocRet == (CAssoc*) BEFORE_START_POSITION)

  000b4	83 7d f4 ff	 cmp	 DWORD PTR _pAssocRet$[ebp], -1
  000b8	75 7b		 jne	 SHORT $LN19@GetNextAss

; 1648 : 	{
; 1649 : 		// find the first association
; 1650 : 		for (UINT nBucket = 0; nBucket < m_nHashTableSize; nBucket++)

  000ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBucket$3[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN10@GetNextAss
$LN8@GetNextAss:
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _nBucket$3[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _nBucket$3[ebp], eax
$LN10@GetNextAss:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _nBucket$3[ebp]
  000d2	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d5	73 19		 jae	 SHORT $LN13@GetNextAss

; 1651 : 		{
; 1652 : 			if ((pAssocRet = m_pHashTable[nBucket]) != NULL)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _nBucket$3[ebp]
  000e0	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000e3	89 45 f4	 mov	 DWORD PTR _pAssocRet$[ebp], eax
  000e6	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000ea	74 02		 je	 SHORT $LN20@GetNextAss

; 1653 : 			{
; 1654 : 				break;

  000ec	eb 02		 jmp	 SHORT $LN13@GetNextAss
$LN20@GetNextAss:

; 1655 : 			}
; 1656 : 		}

  000ee	eb d3		 jmp	 SHORT $LN8@GetNextAss
$LN13@GetNextAss:

; 1657 : 		ENSURE(pAssocRet != NULL);  // must find something

  000f0	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000f4	74 09		 je	 SHORT $LN31@GetNextAss
  000f6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN32@GetNextAss
$LN31@GetNextAss:
  000ff	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN32@GetNextAss:
  00106	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  00109	89 45 e8	 mov	 DWORD PTR ___afx_condVal$2[ebp], eax
  0010c	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  00110	75 14		 jne	 SHORT $LN33@GetNextAss
  00112	68 79 06 00 00	 push	 1657			; 00000679H
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0011c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00121	85 c0		 test	 eax, eax
  00123	74 01		 je	 SHORT $LN33@GetNextAss
  00125	cc		 int	 3
$LN33@GetNextAss:
  00126	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  0012a	75 05		 jne	 SHORT $LN11@GetNextAss
  0012c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN11@GetNextAss:
  00131	33 c0		 xor	 eax, eax
  00133	75 bb		 jne	 SHORT $LN13@GetNextAss
$LN19@GetNextAss:

; 1658 : 	}
; 1659 : 
; 1660 : 	// find next association
; 1661 : 	ASSERT(AfxIsValidAddress(pAssocRet, sizeof(CAssoc)));

  00135	6a 01		 push	 1
  00137	6a 10		 push	 16			; 00000010H
  00139	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00142	85 c0		 test	 eax, eax
  00144	75 14		 jne	 SHORT $LN34@GetNextAss
  00146	68 7d 06 00 00	 push	 1661			; 0000067dH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00150	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00155	85 c0		 test	 eax, eax
  00157	74 01		 je	 SHORT $LN34@GetNextAss
  00159	cc		 int	 3
$LN34@GetNextAss:

; 1662 : 	CAssoc* pAssocNext;
; 1663 : 	if ((pAssocNext = pAssocRet->pNext) == NULL)

  0015a	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0015d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00160	89 4d e4	 mov	 DWORD PTR _pAssocNext$[ebp], ecx
  00163	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  00167	75 43		 jne	 SHORT $LN22@GetNextAss

; 1664 : 	{
; 1665 : 		// go to next bucket
; 1666 : 		for (UINT nBucket = (pAssocRet->nHashValue % m_nHashTableSize) + 1;

  00169	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00172	33 d2		 xor	 edx, edx
  00174	f7 71 08	 div	 DWORD PTR [ecx+8]
  00177	83 c2 01	 add	 edx, 1
  0017a	89 55 e0	 mov	 DWORD PTR _nBucket$1[ebp], edx
  0017d	eb 09		 jmp	 SHORT $LN16@GetNextAss
$LN14@GetNextAss:

; 1667 : 		  nBucket < m_nHashTableSize; nBucket++)

  0017f	8b 45 e0	 mov	 eax, DWORD PTR _nBucket$1[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 e0	 mov	 DWORD PTR _nBucket$1[ebp], eax
$LN16@GetNextAss:
  00188	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 4d e0	 mov	 ecx, DWORD PTR _nBucket$1[ebp]
  0018e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00191	73 19		 jae	 SHORT $LN22@GetNextAss

; 1668 : 			if ((pAssocNext = m_pHashTable[nBucket]) != NULL)

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00199	8b 55 e0	 mov	 edx, DWORD PTR _nBucket$1[ebp]
  0019c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0019f	89 45 e4	 mov	 DWORD PTR _pAssocNext$[ebp], eax
  001a2	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  001a6	74 02		 je	 SHORT $LN23@GetNextAss

; 1669 : 				break;

  001a8	eb 02		 jmp	 SHORT $LN22@GetNextAss
$LN23@GetNextAss:

; 1670 : 	}

  001aa	eb d3		 jmp	 SHORT $LN14@GetNextAss
$LN22@GetNextAss:

; 1671 : 
; 1672 : 	rNextPosition = (POSITION) pAssocNext;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  001af	8b 4d e4	 mov	 ecx, DWORD PTR _pAssocNext$[ebp]
  001b2	89 08		 mov	 DWORD PTR [eax], ecx

; 1673 : 
; 1674 : 	// fill in return data
; 1675 : 	rKey = pAssocRet->key;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _rKey$[ebp]
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bc	89 10		 mov	 DWORD PTR [eax], edx

; 1676 : 	rValue = pAssocRet->value;

  001be	8b 45 10	 mov	 eax, DWORD PTR _rValue$[ebp]
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001c4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c7	89 10		 mov	 DWORD PTR [eax], edx
$LN24@GetNextAss:

; 1677 : }

  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 0c 00	 ret	 12			; 0000000cH
?GetNextAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEXAAPAU__POSITION@@AAKAAPAVCServerUserItem@@@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetNextAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetStartPosition@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?GetStartPosition@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEPAU__POSITION@@XZ PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetStartPosition, COMDAT
; _this$ = ecx

; 1354 : 	{ return (m_nCount == 0) ? NULL : BEFORE_START_POSITION; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	75 09		 jne	 SHORT $LN3@GetStartPo
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@GetStartPo
$LN3@GetStartPo:
  0001e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv66[ebp], -1
$LN4@GetStartPo:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetStartPosition@?$CMap@KKPAVCServerUserItem@@PAV1@@@QBEPAU__POSITION@@XZ ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetStartPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_pAssoc$2 = -12						; size = 4
_nHash$3 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveAll, COMDAT
; _this$ = ecx

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1444 : 	ASSERT_VALID(this);

  0000c	68 a4 05 00 00	 push	 1444			; 000005a4H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1445 : 
; 1446 : 	if (m_pHashTable != NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 60		 je	 SHORT $LN8@RemoveAll

; 1447 : 	{
; 1448 : 		// destroy elements (values and keys)
; 1449 : 		for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _nHash$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _nHash$3[ebp], eax
$LN4@RemoveAll:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$3[ebp]
  00040	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00043	73 24		 jae	 SHORT $LN3@RemoveAll

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _nHash$3[ebp]
  0004e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00051	89 45 f4	 mov	 DWORD PTR _pAssoc$2[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN7@RemoveAll
$LN5@RemoveAll:

; 1453 : 			  pAssoc = pAssoc->pNext)

  00056	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$2[ebp]
  00059	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005c	89 4d f4	 mov	 DWORD PTR _pAssoc$2[ebp], ecx
$LN7@RemoveAll:

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  0005f	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$2[ebp], 0
  00063	74 02		 je	 SHORT $LN6@RemoveAll

; 1454 : 			{
; 1455 : 				pAssoc->CAssoc::~CAssoc();
; 1456 : 			}

  00065	eb ef		 jmp	 SHORT $LN5@RemoveAll
$LN6@RemoveAll:

; 1457 : 		}

  00067	eb c8		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 1458 : 
; 1459 : 		// free hash table
; 1460 : 		delete[] m_pHashTable;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  00072	8b 55 b0	 mov	 edx, DWORD PTR $T1[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0007b	83 c4 04	 add	 esp, 4

; 1461 : 		m_pHashTable = NULL;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN8@RemoveAll:

; 1462 : 	}
; 1463 : 
; 1464 : 	m_nCount = 0;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1465 : 	m_pFreeList = NULL;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1466 : 	m_pBlocks->FreeDataChain();

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a2	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 1467 : 	m_pBlocks = NULL;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1468 : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?RemoveAll@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXXZ ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveKey@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEHK@Z
_TEXT	SEGMENT
_pAssoc$ = -16						; size = 4
_ppAssocPrev$ = -12					; size = 4
_nHashValue$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?RemoveKey@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEHK@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveKey, COMDAT
; _this$ = ecx

; 1611 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1612 : 	ASSERT_VALID(this);

  0000c	68 4c 06 00 00	 push	 1612			; 0000064cH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1613 : 
; 1614 : 	if (m_pHashTable == NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	75 07		 jne	 SHORT $LN5@RemoveKey

; 1615 : 		return FALSE;  // nothing in the table

  00028	33 c0		 xor	 eax, eax
  0002a	e9 83 00 00 00	 jmp	 $LN1@RemoveKey
$LN5@RemoveKey:

; 1616 : 
; 1617 : 	UINT nHashValue;
; 1618 : 	CAssoc** ppAssocPrev;
; 1619 : 	nHashValue = HashKey<ARG_KEY>(key);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$HashKey@K@@YGIK@Z	; HashKey<unsigned long>
  00038	89 45 f8	 mov	 DWORD PTR _nHashValue$[ebp], eax

; 1620 : 	ppAssocPrev = &m_pHashTable[nHashValue%m_nHashTableSize];

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  00041	33 d2		 xor	 edx, edx
  00043	f7 71 08	 div	 DWORD PTR [ecx+8]
  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0004f	89 55 f4	 mov	 DWORD PTR _ppAssocPrev$[ebp], edx

; 1621 : 
; 1622 : 	CAssoc* pAssoc;
; 1623 : 	for (pAssoc = *ppAssocPrev; pAssoc != NULL; pAssoc = pAssoc->pNext)

  00052	8b 45 f4	 mov	 eax, DWORD PTR _ppAssocPrev$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	89 4d f0	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0005a	eb 09		 jmp	 SHORT $LN4@RemoveKey
$LN2@RemoveKey:
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00062	89 4d f0	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@RemoveKey:
  00065	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  00069	74 45		 je	 SHORT $LN3@RemoveKey

; 1624 : 	{
; 1625 : 		if ((pAssoc->nHashValue == nHashValue) && CompareElements(&pAssoc->key, &key))

  0006b	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0006e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00071	3b 4d f8	 cmp	 ecx, DWORD PTR _nHashValue$[ebp]
  00074	75 2f		 jne	 SHORT $LN6@RemoveKey
  00076	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 ??$CompareElements@KK@@YGHPBK0@Z ; CompareElements<unsigned long,unsigned long>
  00083	85 c0		 test	 eax, eax
  00085	74 1e		 je	 SHORT $LN6@RemoveKey

; 1626 : 		{
; 1627 : 			// remove it
; 1628 : 			*ppAssocPrev = pAssoc->pNext;  // remove from list

  00087	8b 45 f4	 mov	 eax, DWORD PTR _ppAssocPrev$[ebp]
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0008d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00090	89 10		 mov	 DWORD PTR [eax], edx

; 1629 : 			FreeAssoc(pAssoc);

  00092	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00095	50		 push	 eax
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?FreeAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEXPAVCAssoc@1@@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::FreeAssoc

; 1630 : 			return TRUE;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	eb 0d		 jmp	 SHORT $LN1@RemoveKey
$LN6@RemoveKey:

; 1631 : 		}
; 1632 : 		ppAssocPrev = &pAssoc->pNext;

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000a8	83 c0 08	 add	 eax, 8
  000ab	89 45 f4	 mov	 DWORD PTR _ppAssocPrev$[ebp], eax

; 1633 : 	}

  000ae	eb ac		 jmp	 SHORT $LN2@RemoveKey
$LN3@RemoveKey:

; 1634 : 	return FALSE;  // not found

  000b0	33 c0		 xor	 eax, eax
$LN1@RemoveKey:

; 1635 : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
?RemoveKey@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEHK@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::RemoveKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?SetAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXKPAVCServerUserItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_newValue$ = 12						; size = 4
?SetAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXKPAVCServerUserItem@@@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::SetAt, COMDAT
; _this$ = ecx

; 1350 : 	{ (*this)[key] = newValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??A?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEAAPAVCServerUserItem@@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::operator[]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _newValue$[ebp]
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXKPAVCServerUserItem@@@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::SetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??A?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEAAPAVCServerUserItem@@K@Z
_TEXT	SEGMENT
tv85 = -88						; size = 4
___afx_condVal$1 = -20					; size = 4
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??A?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEAAPAVCServerUserItem@@K@Z PROC ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::operator[], COMDAT
; _this$ = ecx

; 1585 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 : 	ASSERT_VALID(this);

  0000c	68 32 06 00 00	 push	 1586			; 00000632H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1587 : 
; 1588 : 	UINT nHashBucket, nHashValue;
; 1589 : 	CAssoc* pAssoc;
; 1590 : 	if ((pAssoc = GetAssocAt(key, nHashBucket, nHashValue)) == NULL)

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@KKPAVCServerUserItem@@PAV1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::GetAssocAt
  00033	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax
  00036	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003a	0f 85 9b 00 00
	00		 jne	 $LN5@operator

; 1591 : 	{
; 1592 : 		if (m_pHashTable == NULL)

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00047	75 11		 jne	 SHORT $LN4@operator

; 1593 : 			InitHashTable(m_nHashTableSize);

  00049	6a 01		 push	 1
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00051	51		 push	 ecx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::InitHashTable
$LN4@operator:

; 1594 : 
; 1595 : 		ENSURE(m_pHashTable);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00061	74 09		 je	 SHORT $LN9@operator
  00063	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  0006a	eb 07		 jmp	 SHORT $LN10@operator
$LN9@operator:
  0006c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN10@operator:
  00073	8b 4d a8	 mov	 ecx, DWORD PTR tv85[ebp]
  00076	89 4d ec	 mov	 DWORD PTR ___afx_condVal$1[ebp], ecx
  00079	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0007d	75 14		 jne	 SHORT $LN11@operator
  0007f	68 3b 06 00 00	 push	 1595			; 0000063bH
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00089	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008e	85 c0		 test	 eax, eax
  00090	74 01		 je	 SHORT $LN11@operator
  00092	cc		 int	 3
$LN11@operator:
  00093	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00097	75 05		 jne	 SHORT $LN2@operator
  00099	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@operator:
  0009e	33 c0		 xor	 eax, eax
  000a0	75 b8		 jne	 SHORT $LN4@operator

; 1596 : 		// it doesn't exist, add a new Association
; 1597 : 		pAssoc = NewAssoc(key);

  000a2	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?NewAssoc@?$CMap@KKPAVCServerUserItem@@PAV1@@@IAEPAVCAssoc@1@K@Z ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::NewAssoc
  000ae	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1598 : 		pAssoc->nHashValue = nHashValue;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000b4	8b 4d f4	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  000b7	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1599 : 		//'pAssoc->value' is a constructed object, nothing more
; 1600 : 
; 1601 : 		// put into hash table
; 1602 : 		pAssoc->pNext = m_pHashTable[nHashBucket];

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c0	8b 55 f0	 mov	 edx, DWORD PTR _pAssoc$[ebp]
  000c3	8b 45 f8	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  000c6	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  000c9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1603 : 		m_pHashTable[nHashBucket] = pAssoc;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	8b 55 f8	 mov	 edx, DWORD PTR _nHashBucket$[ebp]
  000d5	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000d8	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN5@operator:

; 1604 : 	}
; 1605 : 	return pAssoc->value;  // return new reference

  000db	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000de	83 c0 04	 add	 eax, 4
$LN8@operator:

; 1606 : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
??A?$CMap@KKPAVCServerUserItem@@PAV1@@@QAEAAPAVCServerUserItem@@K@Z ENDP ; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nBlockSize$ = 8					; size = 4
??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z PROC	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>, COMDAT
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@KKPAVCServerUserItem@@PAV1@@@6B@

; 1404 : 	ASSERT(nBlockSize > 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nBlockSize$[ebp], 0
  00047	7f 14		 jg	 SHORT $LN3@CMap
  00049	68 7c 05 00 00	 push	 1404			; 0000057cH
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@CMap
  0005c	cc		 int	 3
$LN3@CMap:

; 1405 : 
; 1406 : 	m_pHashTable = NULL;

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1407 : 	m_nHashTableSize = 17;  // default size

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 08 11 00
	00 00		 mov	 DWORD PTR [eax+8], 17	; 00000011H

; 1408 : 	m_nCount = 0;

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1409 : 	m_pFreeList = NULL;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1410 : 	m_pBlocks = NULL;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1411 : 	m_nBlockSize = nBlockSize;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _nBlockSize$[ebp]
  00095	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1412 : }

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CMap@KKPAVCServerUserItem@@PAV1@@@QAE@H@Z ENDP	; CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>::CMap<unsigned long,unsigned long,CServerUserItem *,CServerUserItem *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECServerUserItem@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECServerUserItem@@MAEPAXI@Z PROC			; CServerUserItem::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECServerUserItem@@MAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 47		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CServerUserItem@@MAE@XZ ; CServerUserItem::~CServerUserItem
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	68 78 07 00 00	 push	 1912			; 00000778H
  00044	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00050	83 e0 01	 and	 eax, 1
  00053	74 1d		 je	 SHORT $LN3@vector
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	69 48 fc 78 07
	00 00		 imul	 ecx, DWORD PTR [eax-4], 1912
  0005f	83 c1 04	 add	 ecx, 4
  00062	51		 push	 ecx
  00063	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 ea 04	 sub	 edx, 4
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0006f	83 c4 08	 add	 esp, 8
$LN3@vector:
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 e8 04	 sub	 eax, 4
  00078	eb 24		 jmp	 SHORT $LN5@vector
$LN2@vector:
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1CServerUserItem@@MAE@XZ ; CServerUserItem::~CServerUserItem
  00082	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00085	83 e0 01	 and	 eax, 1
  00088	74 11		 je	 SHORT $LN4@vector
  0008a	68 78 07 00 00	 push	 1912			; 00000778H
  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00098	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECServerUserItem@@MAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECServerUserItem@@MAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECServerUserItem@@MAEPAXI@Z ENDP			; CServerUserItem::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCServerUserItem@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCServerUserItem@@MAEPAXI@Z PROC			; CServerUserItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CServerUserItem@@MAE@XZ ; CServerUserItem::~CServerUserItem
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 11		 je	 SHORT $LN2@scalar
  0001c	68 78 07 00 00	 push	 1912			; 00000778H
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??_GCServerUserItem@@MAEPAXI@Z ENDP			; CServerUserItem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetMobileUserDeskPos@CServerUserItem@@UAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wMobileUserDeskPos$ = 8				; size = 2
?SetMobileUserDeskPos@CServerUserItem@@UAEXG@Z PROC	; CServerUserItem::SetMobileUserDeskPos, COMDAT
; _this$ = ecx

; 328  : 	virtual VOID SetMobileUserDeskPos(WORD wMobileUserDeskPos){m_wDeskPos=wMobileUserDeskPos;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 4d 08	 mov	 cx, WORD PTR _wMobileUserDeskPos$[ebp]
  00013	66 89 88 28 07
	00 00		 mov	 WORD PTR [eax+1832], cx
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?SetMobileUserDeskPos@CServerUserItem@@UAEXG@Z ENDP	; CServerUserItem::SetMobileUserDeskPos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetMobileUserDeskPos@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMobileUserDeskPos@CServerUserItem@@UAEGXZ PROC	; CServerUserItem::GetMobileUserDeskPos, COMDAT
; _this$ = ecx

; 326  : 	virtual WORD GetMobileUserDeskPos(){return m_wDeskPos;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 80 28 07
	00 00		 mov	 ax, WORD PTR [eax+1832]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetMobileUserDeskPos@CServerUserItem@@UAEGXZ ENDP	; CServerUserItem::GetMobileUserDeskPos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetMobileUserRule@CServerUserItem@@UAEXG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wMobileUserRule$ = 8					; size = 2
?SetMobileUserRule@CServerUserItem@@UAEXG@Z PROC	; CServerUserItem::SetMobileUserRule, COMDAT
; _this$ = ecx

; 324  : 	virtual VOID SetMobileUserRule(WORD wMobileUserRule) { m_wMobileUserRule=wMobileUserRule; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 4d 08	 mov	 cx, WORD PTR _wMobileUserRule$[ebp]
  00013	66 89 88 2a 07
	00 00		 mov	 WORD PTR [eax+1834], cx
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?SetMobileUserRule@CServerUserItem@@UAEXG@Z ENDP	; CServerUserItem::SetMobileUserRule
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetMobileUserRule@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMobileUserRule@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetMobileUserRule, COMDAT
; _this$ = ecx

; 322  : 	virtual WORD GetMobileUserRule(){return m_wMobileUserRule;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 80 2a 07
	00 00		 mov	 ax, WORD PTR [eax+1834]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetMobileUserRule@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetMobileUserRule
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
_TEXT	SEGMENT
tv186 = -204						; size = 4
tv67 = -204						; size = 4
tv206 = -199						; size = 1
$T2 = -198						; size = 1
$T3 = -197						; size = 1
$T4 = -196						; size = 4
$T5 = -189						; size = 1
$T6 = -188						; size = 4
$T7 = -184						; size = 4
_bChString$8 = -114					; size = 1
_bPureDigit$9 = -113					; size = 1
_i$10 = -112						; size = 4
_szSubItem$ = -108					; size = 64
_nSubItemCount$ = -44					; size = 4
_SubItemArray$ = -40					; size = 20
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strSource$ = 8						; size = 4
_strSpliter$ = 12					; size = 4
?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z PROC ; CServerUserItem::IsValidGameData, COMDAT
; _this$ = ecx

; 839  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00031	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 840  : 	////参数校验
; 841  : 	//ASSERT(strSource.GetLength()>0 && strSpliter.GetLength()>0);
; 842  : 	//if (strSource.GetLength()<=0 || strSpliter.GetLength()<=0) return false;
; 843  : 
; 844  : 	CStringArray SubItemArray;

  00038	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0CStringArray@@QAE@XZ	; CStringArray::CStringArray
  00040	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 845  : 	SplitString(strSource,strSpliter,SubItemArray);

  00044	8d 45 d8	 lea	 eax, DWORD PTR _SubItemArray$[ebp]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	8b cc		 mov	 ecx, esp
  0004b	89 a5 48 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], esp
  00051	8d 55 0c	 lea	 edx, DWORD PTR _strSpliter$[ebp]
  00054	52		 push	 edx
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0005b	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
  00061	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00065	51		 push	 ecx
  00066	8b cc		 mov	 ecx, esp
  00068	89 a5 44 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], esp
  0006e	8d 45 08	 lea	 eax, DWORD PTR _strSource$[ebp]
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00078	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0007c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z ; CServerUserItem::SplitString

; 846  : 
; 847  : 	INT nSubItemCount=(INT)SubItemArray.GetCount();

  00084	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  00087	e8 00 00 00 00	 call	 ?GetCount@CStringArray@@QBEHXZ ; CStringArray::GetCount
  0008c	89 45 d4	 mov	 DWORD PTR _nSubItemCount$[ebp], eax

; 848  : 	ASSERT(nSubItemCount%2==0);

  0008f	8b 45 d4	 mov	 eax, DWORD PTR _nSubItemCount$[ebp]
  00092	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00097	79 05		 jns	 SHORT $LN19@IsValidGam
  00099	48		 dec	 eax
  0009a	83 c8 fe	 or	 eax, -2			; fffffffeH
  0009d	40		 inc	 eax
$LN19@IsValidGam:
  0009e	85 c0		 test	 eax, eax
  000a0	74 19		 je	 SHORT $LN9@IsValidGam
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z@4JA
  000a8	83 c1 09	 add	 ecx, 9
  000ab	51		 push	 ecx
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000b1	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b6	85 c0		 test	 eax, eax
  000b8	74 01		 je	 SHORT $LN9@IsValidGam
  000ba	cc		 int	 3
$LN9@IsValidGam:

; 849  : 	if(nSubItemCount%2!=0) return false;

  000bb	8b 45 d4	 mov	 eax, DWORD PTR _nSubItemCount$[ebp]
  000be	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000c3	79 05		 jns	 SHORT $LN20@IsValidGam
  000c5	48		 dec	 eax
  000c6	83 c8 fe	 or	 eax, -2			; fffffffeH
  000c9	40		 inc	 eax
$LN20@IsValidGam:
  000ca	85 c0		 test	 eax, eax
  000cc	74 3b		 je	 SHORT $LN5@IsValidGam
  000ce	c6 85 43 ff ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0
  000d5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d9	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  000dc	e8 00 00 00 00	 call	 ??1CStringArray@@UAE@XZ	; CStringArray::~CStringArray
  000e1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e5	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f5	8d 4d 0c	 lea	 ecx, DWORD PTR _strSpliter$[ebp]
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000fe	8a 85 43 ff ff
	ff		 mov	 al, BYTE PTR $T5[ebp]
  00104	e9 3f 01 00 00	 jmp	 $LN1@IsValidGam
$LN5@IsValidGam:

; 850  : 
; 851  : 	TCHAR szSubItem[LEN_GAME_ITEM]=TEXT("");

  00109	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0010e	88 45 94	 mov	 BYTE PTR _szSubItem$[ebp], al
  00111	6a 3f		 push	 63			; 0000003fH
  00113	6a 00		 push	 0
  00115	8d 45 95	 lea	 eax, DWORD PTR _szSubItem$[ebp+1]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 _memset
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  : 	for (INT i=0; i<nSubItemCount; i+=2)

  00121	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _i$10[ebp], 0
  00128	eb 09		 jmp	 SHORT $LN4@IsValidGam
$LN2@IsValidGam:
  0012a	8b 45 90	 mov	 eax, DWORD PTR _i$10[ebp]
  0012d	83 c0 02	 add	 eax, 2
  00130	89 45 90	 mov	 DWORD PTR _i$10[ebp], eax
$LN4@IsValidGam:
  00133	8b 45 90	 mov	 eax, DWORD PTR _i$10[ebp]
  00136	3b 45 d4	 cmp	 eax, DWORD PTR _nSubItemCount$[ebp]
  00139	0f 8d d3 00 00
	00		 jge	 $LN3@IsValidGam

; 853  : 	{
; 854  : 		_sntprintf_s(szSubItem,CountArray(szSubItem),TEXT("%s"),SubItemArray.GetAt(i));

  0013f	8b 45 90	 mov	 eax, DWORD PTR _i$10[ebp]
  00142	50		 push	 eax
  00143	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  00146	e8 00 00 00 00	 call	 ?GetAt@CStringArray@@QBEABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CStringArray::GetAt
  0014b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014d	51		 push	 ecx
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00153	6a 40		 push	 64			; 00000040H
  00155	8d 55 94	 lea	 edx, DWORD PTR _szSubItem$[ebp]
  00158	52		 push	 edx
  00159	e8 00 00 00 00	 call	 ??$_snprintf_s@$0EA@@@YAHAAY0EA@DIPBDZZ ; _snprintf_s<64>
  0015e	83 c4 10	 add	 esp, 16			; 00000010H

; 855  : 
; 856  : 		bool bPureDigit=IsPureDigitString(szSubItem);

  00161	51		 push	 ecx
  00162	8b cc		 mov	 ecx, esp
  00164	89 a5 3c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  0016a	8d 45 94	 lea	 eax, DWORD PTR _szSubItem$[ebp]
  0016d	50		 push	 eax
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00174	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	e8 00 00 00 00	 call	 ?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CServerUserItem::IsPureDigitString
  0017c	88 85 39 ff ff
	ff		 mov	 BYTE PTR tv206[ebp], al
  00182	8a 8d 39 ff ff
	ff		 mov	 cl, BYTE PTR tv206[ebp]
  00188	88 4d 8f	 mov	 BYTE PTR _bPureDigit$9[ebp], cl

; 857  : 		bool bChString=SubItemArray.GetAt(i+1).GetLength()>0;

  0018b	8b 45 90	 mov	 eax, DWORD PTR _i$10[ebp]
  0018e	83 c0 01	 add	 eax, 1
  00191	50		 push	 eax
  00192	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  00195	e8 00 00 00 00	 call	 ?GetAt@CStringArray@@QBEABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CStringArray::GetAt
  0019a	8b c8		 mov	 ecx, eax
  0019c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  001a2	85 c0		 test	 eax, eax
  001a4	7e 0c		 jle	 SHORT $LN10@IsValidGam
  001a6	c7 85 34 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv186[ebp], 1
  001b0	eb 0a		 jmp	 SHORT $LN11@IsValidGam
$LN10@IsValidGam:
  001b2	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
$LN11@IsValidGam:
  001bc	8a 8d 34 ff ff
	ff		 mov	 cl, BYTE PTR tv186[ebp]
  001c2	88 4d 8e	 mov	 BYTE PTR _bChString$8[ebp], cl

; 858  : 
; 859  : 		if (bPureDigit==false || bChString==false)

  001c5	0f b6 45 8f	 movzx	 eax, BYTE PTR _bPureDigit$9[ebp]
  001c9	85 c0		 test	 eax, eax
  001cb	74 08		 je	 SHORT $LN7@IsValidGam
  001cd	0f b6 45 8e	 movzx	 eax, BYTE PTR _bChString$8[ebp]
  001d1	85 c0		 test	 eax, eax
  001d3	75 38		 jne	 SHORT $LN6@IsValidGam
$LN7@IsValidGam:

; 860  : 			return false;

  001d5	c6 85 3b ff ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  001dc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001e0	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  001e3	e8 00 00 00 00	 call	 ??1CStringArray@@UAE@XZ	; CStringArray::~CStringArray
  001e8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ec	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001fc	8d 4d 0c	 lea	 ecx, DWORD PTR _strSpliter$[ebp]
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00205	8a 85 3b ff ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  0020b	eb 3b		 jmp	 SHORT $LN1@IsValidGam
$LN6@IsValidGam:

; 861  : 	}

  0020d	e9 18 ff ff ff	 jmp	 $LN2@IsValidGam
$LN3@IsValidGam:

; 862  : 
; 863  : 	return true;

  00212	c6 85 3a ff ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  00219	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0021d	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  00220	e8 00 00 00 00	 call	 ??1CStringArray@@UAE@XZ	; CStringArray::~CStringArray
  00225	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00229	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00232	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00239	8d 4d 0c	 lea	 ecx, DWORD PTR _strSpliter$[ebp]
  0023c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00242	8a 85 3a ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@IsValidGam:

; 864  : }

  00248	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0024b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00252	59		 pop	 ecx
  00253	5f		 pop	 edi
  00254	5e		 pop	 esi
  00255	5b		 pop	 ebx
  00256	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00259	33 cd		 xor	 ecx, ebp
  0025b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _strSpliter$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$1:
  00009	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$2:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1CStringArray@@UAE@XZ	; CStringArray::~CStringArray
__unwindfunclet$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$3:
  0001a	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ENDP ; CServerUserItem::IsValidGameData
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
_TEXT	SEGMENT
$T2 = -87						; size = 1
$T3 = -86						; size = 1
_chSplit$4 = -21					; size = 1
_i$5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strSource$ = 8						; size = 4
?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CServerUserItem::IsPureDigitString, COMDAT
; _this$ = ecx

; 823  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 824  : 	for (INT i=0; i< strSource.GetLength(); i++)

  00032	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@IsPureDigi
$LN2@IsPureDigi:
  0003b	8b 45 ec	 mov	 eax, DWORD PTR _i$5[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 ec	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@IsPureDigi:
  00044	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0004d	39 45 ec	 cmp	 DWORD PTR _i$5[ebp], eax
  00050	7d 5a		 jge	 SHORT $LN3@IsPureDigi

; 825  : 	{
; 826  : 		TCHAR chSplit=strSource[i];

  00052	8b 45 ec	 mov	 eax, DWORD PTR _i$5[ebp]
  00055	50		 push	 eax
  00056	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  0005f	88 45 eb	 mov	 BYTE PTR _chSplit$4[ebp], al

; 827  : 		if (chSplit<TEXT('0') || chSplit>TEXT('9'))

  00062	0f be 45 eb	 movsx	 eax, BYTE PTR _chSplit$4[ebp]
  00066	83 f8 30	 cmp	 eax, 48			; 00000030H
  00069	7c 09		 jl	 SHORT $LN6@IsPureDigi
  0006b	0f be 45 eb	 movsx	 eax, BYTE PTR _chSplit$4[ebp]
  0006f	83 f8 39	 cmp	 eax, 57			; 00000039H
  00072	7e 36		 jle	 SHORT $LN5@IsPureDigi
$LN6@IsPureDigi:

; 828  : 		{
; 829  : 			ASSERT(FALSE);

  00074	33 c0		 xor	 eax, eax
  00076	75 19		 jne	 SHORT $LN8@IsPureDigi
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z@4JA
  0007e	83 c1 06	 add	 ecx, 6
  00081	51		 push	 ecx
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00087	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008c	85 c0		 test	 eax, eax
  0008e	74 01		 je	 SHORT $LN8@IsPureDigi
  00090	cc		 int	 3
$LN8@IsPureDigi:

; 830  : 			return false;

  00091	c6 45 aa 00	 mov	 BYTE PTR $T3[ebp], 0
  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a5	8a 45 aa	 mov	 al, BYTE PTR $T3[ebp]
  000a8	eb 19		 jmp	 SHORT $LN1@IsPureDigi
$LN5@IsPureDigi:

; 831  : 		}
; 832  : 	}

  000aa	eb 8f		 jmp	 SHORT $LN2@IsPureDigi
$LN3@IsPureDigi:

; 833  : 
; 834  : 	return true;

  000ac	c6 45 a9 01	 mov	 BYTE PTR $T2[ebp], 1
  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000c0	8a 45 a9	 mov	 al, BYTE PTR $T2[ebp]
$LN1@IsPureDigi:

; 835  : }

  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CServerUserItem::IsPureDigitString
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z
_TEXT	SEGMENT
_strToken$2 = -24					; size = 4
_nPostion$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strSource$ = 8						; size = 4
_strSpliter$ = 12					; size = 4
_ResultArray$ = 16					; size = 4
?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z PROC ; CServerUserItem::SplitString, COMDAT
; _this$ = ecx

; 803  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 804  : 	////参数校验
; 805  : 	//ASSERT(strSource.GetLength()>0 && strSpliter.GetLength()>0);
; 806  : 	//if (strSource.GetLength()<=0 || strSpliter.GetLength()<=0) return;
; 807  : 
; 808  : 	//清空数组
; 809  : 	ResultArray.RemoveAll();

  00032	8b 4d 10	 mov	 ecx, DWORD PTR _ResultArray$[ebp]
  00035	e8 00 00 00 00	 call	 ?RemoveAll@CStringArray@@QAEXXZ ; CStringArray::RemoveAll

; 810  : 
; 811  : 	int nPostion=0;

  0003a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nPostion$[ebp], 0
$LN2@SplitStrin:

; 812  : 	while (1)

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	85 c0		 test	 eax, eax
  00048	74 59		 je	 SHORT $LN3@SplitStrin

; 813  : 	{
; 814  : 		CString strToken=strSource.Tokenize(strSpliter,nPostion);

  0004a	8d 45 ec	 lea	 eax, DWORD PTR _nPostion$[ebp]
  0004d	50		 push	 eax
  0004e	8d 4d 0c	 lea	 ecx, DWORD PTR _strSpliter$[ebp]
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00057	50		 push	 eax
  00058	8d 4d e8	 lea	 ecx, DWORD PTR _strToken$2[ebp]
  0005b	51		 push	 ecx
  0005c	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Tokenize@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@PBDAAH@Z
  00065	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 815  : 		if (strToken.IsEmpty())

  00069	8d 4d e8	 lea	 ecx, DWORD PTR _strToken$2[ebp]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	74 0f		 je	 SHORT $LN4@SplitStrin

; 816  : 			break;

  00079	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007d	8d 4d e8	 lea	 ecx, DWORD PTR _strToken$2[ebp]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00086	eb 1b		 jmp	 SHORT $LN3@SplitStrin
$LN4@SplitStrin:

; 817  : 		ResultArray.Add(strToken);

  00088	8d 45 e8	 lea	 eax, DWORD PTR _strToken$2[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d 10	 mov	 ecx, DWORD PTR _ResultArray$[ebp]
  0008f	e8 00 00 00 00	 call	 ?Add@CStringArray@@QAEHABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CStringArray::Add

; 818  : 	}

  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00098	8d 4d e8	 lea	 ecx, DWORD PTR _strToken$2[ebp]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a1	eb 9e		 jmp	 SHORT $LN2@SplitStrin
$LN3@SplitStrin:

; 819  : }

  000a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a7	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8d 4d 0c	 lea	 ecx, DWORD PTR _strSpliter$[ebp]
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _strSpliter$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z$1:
  00009	8d 4d 08	 lea	 ecx, DWORD PTR _strSource$[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z$2:
  00012	8d 4d e8	 lea	 ecx, DWORD PTR _strToken$2[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z ENDP ; CServerUserItem::SplitString
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?InitUserGameDataMap@CServerUserItem@@AAEXXZ
_TEXT	SEGMENT
tv85 = -200						; size = 4
tv238 = -197						; size = 1
$T2 = -196						; size = 4
$T3 = -192						; size = 4
$T4 = -188						; size = 4
$T5 = -184						; size = 4
$T6 = -180						; size = 4
_pNewDataItem$7 = -112					; size = 4
_pszValue$8 = -108					; size = 4
_nKey$9 = -104						; size = 4
_bPureDigit$10 = -97					; size = 1
_i$11 = -96						; size = 4
_szSubItem$ = -92					; size = 32
_nSubItemCount$ = -60					; size = 4
_SubItemArray$ = -56					; size = 20
_Position$ = -36					; size = 4
_pGameDataItem$ = -32					; size = 4
_wKey$ = -28						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?InitUserGameDataMap@CServerUserItem@@AAEXXZ PROC	; CServerUserItem::InitUserGameDataMap, COMDAT
; _this$ = ecx

; 758  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InitUserGameDataMap@CServerUserItem@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00032	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 759  : 	//清空数据
; 760  : 	INT wKey=0;

  00035	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _wKey$[ebp], 0

; 761  : 	tagGameDataItem * pGameDataItem=NULL;

  0003c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 762  : 	POSITION Position=m_UserGameDataMap.GetStartPosition();

  00043	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  0004c	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition
  00051	89 45 dc	 mov	 DWORD PTR _Position$[ebp], eax
$LN2@InitUserGa:

; 763  : 	while (Position!=NULL)

  00054	83 7d dc 00	 cmp	 DWORD PTR _Position$[ebp], 0
  00058	74 79		 je	 SHORT $LN3@InitUserGa

; 764  : 	{
; 765  : 		m_UserGameDataMap.GetNextAssoc(Position,wKey,pGameDataItem);

  0005a	8d 45 e0	 lea	 eax, DWORD PTR _pGameDataItem$[ebp]
  0005d	50		 push	 eax
  0005e	8d 4d e4	 lea	 ecx, DWORD PTR _wKey$[ebp]
  00061	51		 push	 ecx
  00062	8d 55 dc	 lea	 edx, DWORD PTR _Position$[ebp]
  00065	52		 push	 edx
  00066	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  0006f	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc

; 766  : 		SafeDelete(pGameDataItem);

  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0007b	8b 45 e0	 mov	 eax, DWORD PTR _pGameDataItem$[ebp]
  0007e	89 85 4c ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00084	6a 44		 push	 68			; 00000044H
  00086	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
  00095	eb 23		 jmp	 SHORT $LN13@InitUserGa
__catch$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$0:
  00097	33 c0		 xor	 eax, eax
  00099	75 19		 jne	 SHORT $LN11@InitUserGa
  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InitUserGameDataMap@CServerUserItem@@AAEXXZ@4JA
  000a1	83 c1 08	 add	 ecx, 8
  000a4	51		 push	 ecx
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000aa	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000af	85 c0		 test	 eax, eax
  000b1	74 01		 je	 SHORT $LN11@InitUserGa
  000b3	cc		 int	 3
$LN11@InitUserGa:
  000b4	b8 00 00 00 00	 mov	 eax, $LN21@InitUserGa
  000b9	c3		 ret	 0
$LN13@InitUserGa:
  000ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000c1	eb 07		 jmp	 SHORT __tryend$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$1
$LN21@InitUserGa:
  000c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$1:
  000ca	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 767  : 	}

  000d1	eb 81		 jmp	 SHORT $LN2@InitUserGa
$LN3@InitUserGa:

; 768  : 	m_UserGameDataMap.RemoveAll();

  000d3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  000dc	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::RemoveAll

; 769  : 
; 770  : 	//游戏数据格式如 Key1:Value1;Key2:Value2;Key3:Value3;Key4:Value4;
; 771  : 	CStringArray SubItemArray;

  000e1	8d 4d c8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  000e4	e8 00 00 00 00	 call	 ??0CStringArray@@QAE@XZ	; CStringArray::CStringArray
  000e9	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2

; 772  : 	SplitString(m_szUserGameData,g_szGameDataSpe,SubItemArray);

  000f0	8d 45 c8	 lea	 eax, DWORD PTR _SubItemArray$[ebp]
  000f3	50		 push	 eax
  000f4	51		 push	 ecx
  000f5	8b cc		 mov	 ecx, esp
  000f7	89 a5 48 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
  000fd	68 00 00 00 00	 push	 OFFSET ?g_szGameDataSpe@@3QBDB
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00108	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv85[ebp], eax
  0010e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00112	51		 push	 ecx
  00113	8b cc		 mov	 ecx, esp
  00115	89 a5 44 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  0011b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	81 c2 d8 02 00
	00		 add	 edx, 728		; 000002d8H
  00124	52		 push	 edx
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0012b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	e8 00 00 00 00	 call	 ?SplitString@CServerUserItem@@AAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0AAVCStringArray@@@Z ; CServerUserItem::SplitString

; 773  : 
; 774  : 	INT nSubItemCount=(INT)SubItemArray.GetCount();

  00137	8d 4d c8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  0013a	e8 00 00 00 00	 call	 ?GetCount@CStringArray@@QBEHXZ ; CStringArray::GetCount
  0013f	89 45 c4	 mov	 DWORD PTR _nSubItemCount$[ebp], eax

; 775  : 	ASSERT(nSubItemCount%2==0);

  00142	8b 45 c4	 mov	 eax, DWORD PTR _nSubItemCount$[ebp]
  00145	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0014a	79 05		 jns	 SHORT $LN23@InitUserGa
  0014c	48		 dec	 eax
  0014d	83 c8 fe	 or	 eax, -2			; fffffffeH
  00150	40		 inc	 eax
$LN23@InitUserGa:
  00151	85 c0		 test	 eax, eax
  00153	74 19		 je	 SHORT $LN12@InitUserGa
  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??InitUserGameDataMap@CServerUserItem@@AAEXXZ@4JA
  0015b	83 c1 11	 add	 ecx, 17			; 00000011H
  0015e	51		 push	 ecx
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00164	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00169	85 c0		 test	 eax, eax
  0016b	74 01		 je	 SHORT $LN12@InitUserGa
  0016d	cc		 int	 3
$LN12@InitUserGa:

; 776  : 	if(nSubItemCount%2!=0) return;

  0016e	8b 45 c4	 mov	 eax, DWORD PTR _nSubItemCount$[ebp]
  00171	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00176	79 05		 jns	 SHORT $LN24@InitUserGa
  00178	48		 dec	 eax
  00179	83 c8 fe	 or	 eax, -2			; fffffffeH
  0017c	40		 inc	 eax
$LN24@InitUserGa:
  0017d	85 c0		 test	 eax, eax
  0017f	74 14		 je	 SHORT $LN8@InitUserGa
  00181	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00188	8d 4d c8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  0018b	e8 00 00 00 00	 call	 ??1CStringArray@@UAE@XZ	; CStringArray::~CStringArray
  00190	e9 3b 01 00 00	 jmp	 $LN1@InitUserGa
$LN8@InitUserGa:

; 777  : 
; 778  : 	TCHAR szSubItem[32]=TEXT("");

  00195	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@@
  0019a	88 45 a4	 mov	 BYTE PTR _szSubItem$[ebp], al
  0019d	33 c0		 xor	 eax, eax
  0019f	89 45 a5	 mov	 DWORD PTR _szSubItem$[ebp+1], eax
  001a2	89 45 a9	 mov	 DWORD PTR _szSubItem$[ebp+5], eax
  001a5	89 45 ad	 mov	 DWORD PTR _szSubItem$[ebp+9], eax
  001a8	89 45 b1	 mov	 DWORD PTR _szSubItem$[ebp+13], eax
  001ab	89 45 b5	 mov	 DWORD PTR _szSubItem$[ebp+17], eax
  001ae	89 45 b9	 mov	 DWORD PTR _szSubItem$[ebp+21], eax
  001b1	89 45 bd	 mov	 DWORD PTR _szSubItem$[ebp+25], eax
  001b4	66 89 45 c1	 mov	 WORD PTR _szSubItem$[ebp+29], ax
  001b8	88 45 c3	 mov	 BYTE PTR _szSubItem$[ebp+31], al

; 779  : 	for (INT i=nSubItemCount-1; i>=0; i-=2)

  001bb	8b 45 c4	 mov	 eax, DWORD PTR _nSubItemCount$[ebp]
  001be	83 e8 01	 sub	 eax, 1
  001c1	89 45 a0	 mov	 DWORD PTR _i$11[ebp], eax
  001c4	eb 09		 jmp	 SHORT $LN6@InitUserGa
$LN4@InitUserGa:
  001c6	8b 45 a0	 mov	 eax, DWORD PTR _i$11[ebp]
  001c9	83 e8 02	 sub	 eax, 2
  001cc	89 45 a0	 mov	 DWORD PTR _i$11[ebp], eax
$LN6@InitUserGa:
  001cf	83 7d a0 00	 cmp	 DWORD PTR _i$11[ebp], 0
  001d3	0f 8c e8 00 00
	00		 jl	 $LN5@InitUserGa

; 780  : 	{
; 781  : 		_sntprintf_s(szSubItem,CountArray(szSubItem),TEXT("%s"),SubItemArray.GetAt(i-1));

  001d9	8b 45 a0	 mov	 eax, DWORD PTR _i$11[ebp]
  001dc	83 e8 01	 sub	 eax, 1
  001df	50		 push	 eax
  001e0	8d 4d c8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  001e3	e8 00 00 00 00	 call	 ?GetAt@CStringArray@@QBEABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CStringArray::GetAt
  001e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ea	51		 push	 ecx
  001eb	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  001f0	6a 20		 push	 32			; 00000020H
  001f2	8d 55 a4	 lea	 edx, DWORD PTR _szSubItem$[ebp]
  001f5	52		 push	 edx
  001f6	e8 00 00 00 00	 call	 ??$_snprintf_s@$0CA@@@YAHAAY0CA@DIPBDZZ ; _snprintf_s<32>
  001fb	83 c4 10	 add	 esp, 16			; 00000010H

; 782  : 	
; 783  : 		bool bPureDigit=IsPureDigitString(szSubItem);

  001fe	51		 push	 ecx
  001ff	8b cc		 mov	 ecx, esp
  00201	89 a5 40 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00207	8d 45 a4	 lea	 eax, DWORD PTR _szSubItem$[ebp]
  0020a	50		 push	 eax
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00211	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00214	e8 00 00 00 00	 call	 ?IsPureDigitString@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CServerUserItem::IsPureDigitString
  00219	88 85 3b ff ff
	ff		 mov	 BYTE PTR tv238[ebp], al
  0021f	8a 8d 3b ff ff
	ff		 mov	 cl, BYTE PTR tv238[ebp]
  00225	88 4d 9f	 mov	 BYTE PTR _bPureDigit$10[ebp], cl

; 784  : 		if (bPureDigit)

  00228	0f b6 45 9f	 movzx	 eax, BYTE PTR _bPureDigit$10[ebp]
  0022c	85 c0		 test	 eax, eax
  0022e	0f 84 88 00 00
	00		 je	 $LN9@InitUserGa

; 785  : 		{
; 786  : 			INT nKey=_ttoi(szSubItem);

  00234	8d 45 a4	 lea	 eax, DWORD PTR _szSubItem$[ebp]
  00237	50		 push	 eax
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0023e	83 c4 04	 add	 esp, 4
  00241	89 45 98	 mov	 DWORD PTR _nKey$9[ebp], eax

; 787  : 			CString pszValue=SubItemArray.GetAt(i);

  00244	8b 45 a0	 mov	 eax, DWORD PTR _i$11[ebp]
  00247	50		 push	 eax
  00248	8d 4d c8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  0024b	e8 00 00 00 00	 call	 ?GetAt@CStringArray@@QBEABV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CStringArray::GetAt
  00250	50		 push	 eax
  00251	8d 4d 94	 lea	 ecx, DWORD PTR _pszValue$8[ebp]
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0025a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4

; 788  : 
; 789  : 			tagGameDataItem *pNewDataItem=new tagGameDataItem;

  0025e	6a 44		 push	 68			; 00000044H
  00260	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00265	83 c4 04	 add	 esp, 4
  00268	89 85 3c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0026e	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00274	89 45 90	 mov	 DWORD PTR _pNewDataItem$7[ebp], eax

; 790  : 			pNewDataItem->nKey=nKey;

  00277	8b 45 90	 mov	 eax, DWORD PTR _pNewDataItem$7[ebp]
  0027a	8b 4d 98	 mov	 ecx, DWORD PTR _nKey$9[ebp]
  0027d	89 08		 mov	 DWORD PTR [eax], ecx

; 791  : 			lstrcpyn(pNewDataItem->szValue,pszValue,CountArray(pNewDataItem->szValue));

  0027f	6a 40		 push	 64			; 00000040H
  00281	8d 4d 94	 lea	 ecx, DWORD PTR _pszValue$8[ebp]
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0028a	50		 push	 eax
  0028b	8b 45 90	 mov	 eax, DWORD PTR _pNewDataItem$7[ebp]
  0028e	83 c0 04	 add	 eax, 4
  00291	50		 push	 eax
  00292	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 792  : 
; 793  : 			//加入集合
; 794  : 			m_UserGameDataMap[nKey]=pNewDataItem;

  00298	8b 45 98	 mov	 eax, DWORD PTR _nKey$9[ebp]
  0029b	50		 push	 eax
  0029c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0029f	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  002a5	e8 00 00 00 00	 call	 ??A?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEAAPAUtagGameDataItem@@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::operator[]
  002aa	8b 4d 90	 mov	 ecx, DWORD PTR _pNewDataItem$7[ebp]
  002ad	89 08		 mov	 DWORD PTR [eax], ecx

; 795  : 		}

  002af	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  002b3	8d 4d 94	 lea	 ecx, DWORD PTR _pszValue$8[ebp]
  002b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN9@InitUserGa:

; 796  : 	}

  002bc	e9 05 ff ff ff	 jmp	 $LN4@InitUserGa
$LN5@InitUserGa:

; 797  : 
; 798  : 	return;

  002c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002c8	8d 4d c8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  002cb	e8 00 00 00 00	 call	 ??1CStringArray@@UAE@XZ	; CStringArray::~CStringArray
$LN1@InitUserGa:

; 799  : }

  002d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002da	59		 pop	 ecx
  002db	5f		 pop	 edi
  002dc	5e		 pop	 esi
  002dd	5b		 pop	 ebx
  002de	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e1	33 cd		 xor	 ecx, ebp
  002e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _SubItemArray$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CStringArray@@UAE@XZ	; CStringArray::~CStringArray
__unwindfunclet$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$3:
  00008	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?InitUserGameDataMap@CServerUserItem@@AAEXXZ$6:
  00014	8d 4d 94	 lea	 ecx, DWORD PTR _pszValue$8[ebp]
  00017	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?InitUserGameDataMap@CServerUserItem@@AAEXXZ:
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 34 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-204]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitUserGameDataMap@CServerUserItem@@AAEXXZ
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitUserGameDataMap@CServerUserItem@@AAEXXZ ENDP	; CServerUserItem::InitUserGameDataMap
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?ResetUserItem@CServerUserItem@@AAEXXZ
_TEXT	SEGMENT
$T2 = -100						; size = 4
_Position$ = -32					; size = 4
_pGameDataItem$ = -28					; size = 4
_wKey$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?ResetUserItem@CServerUserItem@@AAEXXZ PROC		; CServerUserItem::ResetUserItem, COMDAT
; _this$ = ecx

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ResetUserItem@CServerUserItem@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 54	 sub	 esp, 84			; 00000054H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 683  : 	//附加变量
; 684  : 	m_dwUserRight=0L;

  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 80 78 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+632], 0

; 685  : 	m_dwMasterRight=0L;

  0003c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 80 7c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+636], 0

; 686  : 
; 687  : 	//托管变量
; 688  : 	m_lTrusteeScore=0L;

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 80 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+640], 0
  00056	c7 80 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+644], 0

; 689  : 	m_lRestrictScore=0L;

  00060	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 80 88 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+648], 0
  0006d	c7 80 8c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+652], 0

; 690  : 	m_lFrozenedScore=0L;

  00077	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	c7 80 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+656], 0
  00084	c7 80 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+660], 0

; 691  : 	m_lFrozenedScore=0L;

  0008e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00091	c7 80 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+656], 0
  0009b	c7 80 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+660], 0

; 692  : 
; 693  : 	//登录信息
; 694  : 	m_dwDBQuestID=0L;

  000a5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	c7 80 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+664], 0

; 695  : 	m_dwLogonTime=0L;

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	c7 80 9c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+668], 0

; 696  : 	m_dwInoutIndex=INVALID_DWORD;

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	c7 80 a0 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+672], -1

; 697  : 
; 698  : 	//系统属性
; 699  : 	m_wBindIndex=INVALID_WORD;

  000cc	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000d1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	66 89 81 f4 06
	00 00		 mov	 WORD PTR [ecx+1780], ax

; 700  : 	m_dwClientAddr=INADDR_ANY;

  000db	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000de	c7 80 f8 06 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1784], 0

; 701  : 	ZeroMemory(m_szMachineID,sizeof(m_szMachineID));

  000e8	6a 21		 push	 33			; 00000021H
  000ea	6a 00		 push	 0
  000ec	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	05 fc 06 00 00	 add	 eax, 1788		; 000006fcH
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _memset
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 702  : 
; 703  : 	//客户类型
; 704  : 	m_bMobileUser=false;

  000fd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00100	c6 80 a4 02 00
	00 00		 mov	 BYTE PTR [eax+676], 0

; 705  : 	m_bAndroidUser=false;

  00107	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	c6 80 a5 02 00
	00 00		 mov	 BYTE PTR [eax+677], 0

; 706  : 
; 707  : 	//比赛信息
; 708  : 	m_dwSignUpTime=0;

  00111	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00114	c7 80 a8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+680], 0

; 709  : 	m_cbMatchStatus=0;

  0011e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00121	c6 80 ac 02 00
	00 00		 mov	 BYTE PTR [eax+684], 0

; 710  : 	m_pMatchData=NULL;

  00128	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012b	c7 80 b0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+688], 0

; 711  : 
; 712  : 	//辅助变量
; 713  : 	m_bTrusteeUser=false;

  00135	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00138	c6 80 b4 02 00
	00 00		 mov	 BYTE PTR [eax+692], 0

; 714  : 	m_bClientReady=false;

  0013f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00142	c6 80 b5 02 00
	00 00		 mov	 BYTE PTR [eax+693], 0

; 715  : 	m_bModifyScore=false;

  00149	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	c6 80 b6 02 00
	00 00		 mov	 BYTE PTR [eax+694], 0

; 716  : 	ZeroMemory(m_szLogonPass,sizeof(m_szLogonPass));

  00153	6a 21		 push	 33			; 00000021H
  00155	6a 00		 push	 0
  00157	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0015a	05 b7 02 00 00	 add	 eax, 695		; 000002b7H
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 _memset
  00165	83 c4 0c	 add	 esp, 12			; 0000000cH

; 717  : 	ZeroMemory(m_szUserGameData,sizeof(m_szUserGameData));

  00168	68 00 04 00 00	 push	 1024			; 00000400H
  0016d	6a 00		 push	 0
  0016f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00172	05 d8 02 00 00	 add	 eax, 728		; 000002d8H
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 _memset
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 718  : 
; 719  : 	//属性变量
; 720  : 	ZeroMemory(&m_UserInfo,sizeof(m_UserInfo));

  00180	68 10 01 00 00	 push	 272			; 00000110H
  00185	6a 00		 push	 0
  00187	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0018a	83 c0 08	 add	 eax, 8
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 _memset
  00193	83 c4 0c	 add	 esp, 12			; 0000000cH

; 721  : 	ZeroMemory(&m_UserRule,sizeof(m_UserRule));

  00196	6a 34		 push	 52			; 00000034H
  00198	6a 00		 push	 0
  0019a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0019d	05 18 01 00 00	 add	 eax, 280		; 00000118H
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _memset
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 722  : 	ZeroMemory(&m_ScoreFormer,sizeof(m_ScoreFormer));

  001ab	6a 64		 push	 100			; 00000064H
  001ad	6a 00		 push	 0
  001af	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	05 4c 01 00 00	 add	 eax, 332		; 0000014cH
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 _memset
  001bd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 723  : 	ZeroMemory(&m_UserProperty,sizeof(m_UserProperty));

  001c0	6a 22		 push	 34			; 00000022H
  001c2	6a 00		 push	 0
  001c4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001c7	05 b0 01 00 00	 add	 eax, 432		; 000001b0H
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 _memset
  001d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 724  : 	m_UserInfo.wTableID=INVALID_TABLE;

  001d5	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  001da	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	66 89 81 99 00
	00 00		 mov	 WORD PTR [ecx+153], ax

; 725  : 	m_UserInfo.wLastTableID=INVALID_TABLE;

  001e4	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  001e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ec	66 89 81 9b 00
	00 00		 mov	 WORD PTR [ecx+155], ax

; 726  : 	m_UserInfo.wChairID=INVALID_CHAIR;

  001f3	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  001f8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001fb	66 89 81 9d 00
	00 00		 mov	 WORD PTR [ecx+157], ax

; 727  : 
; 728  : 	//记录信息
; 729  : 	ZeroMemory(&m_RecordInfo,sizeof(m_RecordInfo));

  00202	6a 50		 push	 80			; 00000050H
  00204	6a 00		 push	 0
  00206	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00209	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 _memset
  00214	83 c4 0c	 add	 esp, 12			; 0000000cH

; 730  : 	ZeroMemory(&m_VariationInfo,sizeof(m_VariationInfo));

  00217	6a 50		 push	 80			; 00000050H
  00219	6a 00		 push	 0
  0021b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0021e	05 28 02 00 00	 add	 eax, 552		; 00000228H
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 _memset
  00229	83 c4 0c	 add	 esp, 12			; 0000000cH

; 731  : 
; 732  : 	//手机定义
; 733  : 	m_wMobileUserRule=0;

  0022c	33 c0		 xor	 eax, eax
  0022e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00231	66 89 81 2a 07
	00 00		 mov	 WORD PTR [ecx+1834], ax

; 734  : 	m_wMobileUserRule |= VIEW_MODE_PART;

  00238	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0023b	0f b7 88 2a 07
	00 00		 movzx	 ecx, WORD PTR [eax+1834]
  00242	83 c9 02	 or	 ecx, 2
  00245	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00248	66 89 8a 2a 07
	00 00		 mov	 WORD PTR [edx+1834], cx

; 735  : 	m_wMobileUserRule |= VIEW_INFO_LEVEL_1;

  0024f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00252	0f b7 88 2a 07
	00 00		 movzx	 ecx, WORD PTR [eax+1834]
  00259	83 c9 10	 or	 ecx, 16			; 00000010H
  0025c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0025f	66 89 8a 2a 07
	00 00		 mov	 WORD PTR [edx+1834], cx

; 736  : 	m_wDeskPos=0;

  00266	33 c0		 xor	 eax, eax
  00268	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0026b	66 89 81 28 07
	00 00		 mov	 WORD PTR [ecx+1832], ax

; 737  : 
; 738  : 	//接口变量
; 739  : 	m_pIServerUserItemSink=NULL;

  00272	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00275	c7 80 20 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1824], 0

; 740  : 	m_pIMatchUserItemSink=NULL;

  0027f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00282	c7 80 24 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1828], 0

; 741  : 
; 742  : 	//清空数据
; 743  : 	INT wKey=0;

  0028c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _wKey$[ebp], 0

; 744  : 	tagGameDataItem * pGameDataItem=NULL;

  00293	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 745  : 	POSITION Position=m_UserGameDataMap.GetStartPosition();

  0029a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0029d	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  002a3	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition
  002a8	89 45 e0	 mov	 DWORD PTR _Position$[ebp], eax
$LN2@ResetUserI:

; 746  : 	while (Position!=NULL)

  002ab	83 7d e0 00	 cmp	 DWORD PTR _Position$[ebp], 0
  002af	74 73		 je	 SHORT $LN3@ResetUserI

; 747  : 	{
; 748  : 		m_UserGameDataMap.GetNextAssoc(Position,wKey,pGameDataItem);

  002b1	8d 45 e4	 lea	 eax, DWORD PTR _pGameDataItem$[ebp]
  002b4	50		 push	 eax
  002b5	8d 4d e8	 lea	 ecx, DWORD PTR _wKey$[ebp]
  002b8	51		 push	 ecx
  002b9	8d 55 e0	 lea	 edx, DWORD PTR _Position$[ebp]
  002bc	52		 push	 edx
  002bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002c0	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  002c6	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc

; 749  : 		SafeDelete(pGameDataItem);

  002cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  002d2	8b 45 e4	 mov	 eax, DWORD PTR _pGameDataItem$[ebp]
  002d5	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  002d8	6a 44		 push	 68			; 00000044H
  002da	8b 4d 9c	 mov	 ecx, DWORD PTR $T2[ebp]
  002dd	51		 push	 ecx
  002de	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002e3	83 c4 08	 add	 esp, 8
  002e6	eb 23		 jmp	 SHORT $LN7@ResetUserI
__catch$?ResetUserItem@CServerUserItem@@AAEXXZ$0:
  002e8	33 c0		 xor	 eax, eax
  002ea	75 19		 jne	 SHORT $LN6@ResetUserI
  002ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ResetUserItem@CServerUserItem@@AAEXXZ@4JA
  002f2	83 c1 43	 add	 ecx, 67			; 00000043H
  002f5	51		 push	 ecx
  002f6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  002fb	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00300	85 c0		 test	 eax, eax
  00302	74 01		 je	 SHORT $LN6@ResetUserI
  00304	cc		 int	 3
$LN6@ResetUserI:
  00305	b8 00 00 00 00	 mov	 eax, $LN10@ResetUserI
  0030a	c3		 ret	 0
$LN7@ResetUserI:
  0030b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00312	eb 07		 jmp	 SHORT __tryend$?ResetUserItem@CServerUserItem@@AAEXXZ$1
$LN10@ResetUserI:
  00314	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?ResetUserItem@CServerUserItem@@AAEXXZ$1:
  0031b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 750  : 	}

  00322	eb 87		 jmp	 SHORT $LN2@ResetUserI
$LN3@ResetUserI:

; 751  : 	m_UserGameDataMap.RemoveAll();

  00324	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00327	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  0032d	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::RemoveAll

; 752  : 
; 753  : 	return;
; 754  : }

  00332	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00335	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0033c	59		 pop	 ecx
  0033d	5f		 pop	 edi
  0033e	5e		 pop	 esi
  0033f	5b		 pop	 ebx
  00340	8b e5		 mov	 esp, ebp
  00342	5d		 pop	 ebp
  00343	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ResetUserItem@CServerUserItem@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ResetUserItem@CServerUserItem@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ResetUserItem@CServerUserItem@@AAEXXZ ENDP		; CServerUserItem::ResetUserItem
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?ModifyUserRight@CServerUserItem@@UAEXKKE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwAddRight$ = 8					; size = 4
_dwRemoveRight$ = 12					; size = 4
_cbRightKind$ = 16					; size = 1
?ModifyUserRight@CServerUserItem@@UAEXKKE@Z PROC	; CServerUserItem::ModifyUserRight, COMDAT
; _this$ = ecx

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 667  : 	//添加权限
; 668  : 	m_dwUserRight |= dwAddRight;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 78 02 00
	00		 mov	 ecx, DWORD PTR [eax+632]
  00015	0b 4d 08	 or	 ecx, DWORD PTR _dwAddRight$[ebp]
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	89 8a 78 02 00
	00		 mov	 DWORD PTR [edx+632], ecx

; 669  : 
; 670  : 	//删除权限
; 671  : 	m_dwUserRight &= ~dwRemoveRight;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _dwRemoveRight$[ebp]
  00024	f7 d0		 not	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	23 81 78 02 00
	00		 and	 eax, DWORD PTR [ecx+632]
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	89 82 78 02 00
	00		 mov	 DWORD PTR [edx+632], eax

; 672  : 
; 673  : 	//发送状态
; 674  : 	ASSERT(m_pIServerUserItemSink!=NULL);

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  00042	75 19		 jne	 SHORT $LN4@ModifyUser
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ModifyUserRight@CServerUserItem@@UAEXKKE@Z@4JA
  0004a	83 c1 08	 add	 ecx, 8
  0004d	51		 push	 ecx
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN4@ModifyUser
  0005c	cc		 int	 3
$LN4@ModifyUser:

; 675  : 	if (m_pIServerUserItemSink!=NULL) m_pIServerUserItemSink->OnEventUserItemRight(this,dwAddRight,dwRemoveRight,cbRightKind);

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  00067	74 2a		 je	 SHORT $LN1@ModifyUser
  00069	0f b6 45 10	 movzx	 eax, BYTE PTR _cbRightKind$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwRemoveRight$[ebp]
  00071	51		 push	 ecx
  00072	8b 55 08	 mov	 edx, DWORD PTR _dwAddRight$[ebp]
  00075	52		 push	 edx
  00076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	8b 91 20 07 00
	00		 mov	 edx, DWORD PTR [ecx+1824]
  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 12		 mov	 edx, DWORD PTR [edx]
  00088	8b 88 20 07 00
	00		 mov	 ecx, DWORD PTR [eax+1824]
  0008e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00091	ff d0		 call	 eax
$LN1@ModifyUser:

; 676  : 
; 677  : 	return;
; 678  : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 0c 00	 ret	 12			; 0000000cH
?ModifyUserRight@CServerUserItem@@UAEXKKE@Z ENDP	; CServerUserItem::ModifyUserRight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwClientAddr$ = 8					; size = 4
_wBindIndex$ = 12					; size = 2
_szMachineID$ = 16					; size = 4
_bAndroidUser$ = 20					; size = 1
_bClientReady$ = 24					; size = 1
?SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z PROC	; CServerUserItem::SetUserParameter, COMDAT
; _this$ = ecx

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 648  : 	//效验状态
; 649  : 	ASSERT(m_UserInfo.dwUserID!=0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 19		 jne	 SHORT $LN4@SetUserPar
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN4@SetUserPar
  0002d	cc		 int	 3
$LN4@SetUserPar:

; 650  : 	if (m_UserInfo.dwUserID==0L) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00035	75 04		 jne	 SHORT $LN2@SetUserPar
  00037	32 c0		 xor	 al, al
  00039	eb 4a		 jmp	 SHORT $LN1@SetUserPar
$LN2@SetUserPar:

; 651  : 
; 652  : 	//用户属性
; 653  : 	m_bAndroidUser=bAndroidUser;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8a 4d 14	 mov	 cl, BYTE PTR _bAndroidUser$[ebp]
  00041	88 88 a5 02 00
	00		 mov	 BYTE PTR [eax+677], cl

; 654  : 	m_bClientReady=bClientReady;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8a 4d 18	 mov	 cl, BYTE PTR _bClientReady$[ebp]
  0004d	88 88 b5 02 00
	00		 mov	 BYTE PTR [eax+693], cl

; 655  : 
; 656  : 	//连接属性
; 657  : 	m_wBindIndex=wBindIndex;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	66 8b 4d 0c	 mov	 cx, WORD PTR _wBindIndex$[ebp]
  0005a	66 89 88 f4 06
	00 00		 mov	 WORD PTR [eax+1780], cx

; 658  : 	m_dwClientAddr=dwClientAddr;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _dwClientAddr$[ebp]
  00067	89 88 f8 06 00
	00		 mov	 DWORD PTR [eax+1784], ecx

; 659  : 	lstrcpyn(m_szMachineID,szMachineID,CountArray(m_szMachineID));

  0006d	6a 21		 push	 33			; 00000021H
  0006f	8b 45 10	 mov	 eax, DWORD PTR _szMachineID$[ebp]
  00072	50		 push	 eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	81 c1 fc 06 00
	00		 add	 ecx, 1788		; 000006fcH
  0007c	51		 push	 ecx
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 660  : 
; 661  : 	return true;

  00083	b0 01		 mov	 al, 1
$LN1@SetUserPar:

; 662  : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 14 00	 ret	 20			; 00000014H
?SetUserParameter@CServerUserItem@@UAE_NKGQAD_N1@Z ENDP	; CServerUserItem::SetUserParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z
_TEXT	SEGMENT
tv287 = -84						; size = 8
tv266 = -84						; size = 8
tv244 = -84						; size = 8
tv224 = -84						; size = 8
tv354 = -80						; size = 4
tv339 = -80						; size = 4
_lTotalScore$1 = -12					; size = 8
_this$ = -4						; size = 4
_lScore$ = 8						; size = 8
_lInsure$ = 16						; size = 8
_lRevenue$ = 24						; size = 8
?ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z PROC	; CServerUserItem::ModifyUserInsure, COMDAT
; _this$ = ecx

; 601  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 602  : 	//平衡效验
; 603  : 	ASSERT((m_bAndroidUser==true)||(((lScore+lInsure+lRevenue)==0L)&&(lRevenue>=0L)));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 88 a5 02
	00 00		 movzx	 ecx, BYTE PTR [eax+677]
  00016	83 f9 01	 cmp	 ecx, 1
  00019	74 47		 je	 SHORT $LN12@ModifyUser
  0001b	8b 55 08	 mov	 edx, DWORD PTR _lScore$[ebp]
  0001e	03 55 10	 add	 edx, DWORD PTR _lInsure$[ebp]
  00021	8b 45 0c	 mov	 eax, DWORD PTR _lScore$[ebp+4]
  00024	13 45 14	 adc	 eax, DWORD PTR _lInsure$[ebp+4]
  00027	03 55 18	 add	 edx, DWORD PTR _lRevenue$[ebp]
  0002a	13 45 1c	 adc	 eax, DWORD PTR _lRevenue$[ebp+4]
  0002d	89 55 ac	 mov	 DWORD PTR tv224[ebp], edx
  00030	89 45 b0	 mov	 DWORD PTR tv224[ebp+4], eax
  00033	8b 4d ac	 mov	 ecx, DWORD PTR tv224[ebp]
  00036	0b 4d b0	 or	 ecx, DWORD PTR tv224[ebp+4]
  00039	75 0e		 jne	 SHORT $LN11@ModifyUser
  0003b	83 7d 1c 00	 cmp	 DWORD PTR _lRevenue$[ebp+4], 0
  0003f	7f 21		 jg	 SHORT $LN12@ModifyUser
  00041	7c 06		 jl	 SHORT $LN11@ModifyUser
  00043	83 7d 18 00	 cmp	 DWORD PTR _lRevenue$[ebp], 0
  00047	73 19		 jae	 SHORT $LN12@ModifyUser
$LN11@ModifyUser:
  00049	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z@4JA
  0004f	83 c2 02	 add	 edx, 2
  00052	52		 push	 edx
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN12@ModifyUser
  00061	cc		 int	 3
$LN12@ModifyUser:

; 604  : 	if ((m_bAndroidUser==false)&&(((lScore+lInsure+lRevenue)!=0L)||(lRevenue<0L))) return false;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	0f b6 88 a5 02
	00 00		 movzx	 ecx, BYTE PTR [eax+677]
  0006c	85 c9		 test	 ecx, ecx
  0006e	75 35		 jne	 SHORT $LN2@ModifyUser
  00070	8b 45 08	 mov	 eax, DWORD PTR _lScore$[ebp]
  00073	03 45 10	 add	 eax, DWORD PTR _lInsure$[ebp]
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _lScore$[ebp+4]
  00079	13 4d 14	 adc	 ecx, DWORD PTR _lInsure$[ebp+4]
  0007c	03 45 18	 add	 eax, DWORD PTR _lRevenue$[ebp]
  0007f	13 4d 1c	 adc	 ecx, DWORD PTR _lRevenue$[ebp+4]
  00082	89 45 ac	 mov	 DWORD PTR tv244[ebp], eax
  00085	89 4d b0	 mov	 DWORD PTR tv244[ebp+4], ecx
  00088	8b 55 ac	 mov	 edx, DWORD PTR tv244[ebp]
  0008b	0b 55 b0	 or	 edx, DWORD PTR tv244[ebp+4]
  0008e	75 0e		 jne	 SHORT $LN3@ModifyUser
  00090	83 7d 1c 00	 cmp	 DWORD PTR _lRevenue$[ebp+4], 0
  00094	7f 0f		 jg	 SHORT $LN2@ModifyUser
  00096	7c 06		 jl	 SHORT $LN3@ModifyUser
  00098	83 7d 18 00	 cmp	 DWORD PTR _lRevenue$[ebp], 0
  0009c	73 07		 jae	 SHORT $LN2@ModifyUser
$LN3@ModifyUser:
  0009e	32 c0		 xor	 al, al
  000a0	e9 88 02 00 00	 jmp	 $LN1@ModifyUser
$LN2@ModifyUser:

; 605  : 
; 606  : 	//效验状态
; 607  : 	ASSERT((m_UserInfo.dwUserID != 0L) && ((m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore + lScore) >= 0L));

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000ac	74 38		 je	 SHORT $LN13@ModifyUser
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  000ba	03 82 80 02 00
	00		 add	 eax, DWORD PTR [edx+640]
  000c0	8b 89 b4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+180]
  000c6	13 8a 84 02 00
	00		 adc	 ecx, DWORD PTR [edx+644]
  000cc	03 45 08	 add	 eax, DWORD PTR _lScore$[ebp]
  000cf	13 4d 0c	 adc	 ecx, DWORD PTR _lScore$[ebp+4]
  000d2	89 45 ac	 mov	 DWORD PTR tv266[ebp], eax
  000d5	89 4d b0	 mov	 DWORD PTR tv266[ebp+4], ecx
  000d8	83 7d b0 00	 cmp	 DWORD PTR tv266[ebp+4], 0
  000dc	7f 21		 jg	 SHORT $LN14@ModifyUser
  000de	7c 06		 jl	 SHORT $LN13@ModifyUser
  000e0	83 7d ac 00	 cmp	 DWORD PTR tv266[ebp], 0
  000e4	73 19		 jae	 SHORT $LN14@ModifyUser
$LN13@ModifyUser:
  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z@4JA
  000ec	83 c2 06	 add	 edx, 6
  000ef	52		 push	 edx
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000f5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000fa	85 c0		 test	 eax, eax
  000fc	74 01		 je	 SHORT $LN14@ModifyUser
  000fe	cc		 int	 3
$LN14@ModifyUser:

; 608  : 	if ((m_UserInfo.dwUserID == 0L) || ((m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore + lScore)<0L)) return false;

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00106	74 38		 je	 SHORT $LN5@ModifyUser
  00108	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00114	03 91 80 02 00
	00		 add	 edx, DWORD PTR [ecx+640]
  0011a	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  00120	13 81 84 02 00
	00		 adc	 eax, DWORD PTR [ecx+644]
  00126	03 55 08	 add	 edx, DWORD PTR _lScore$[ebp]
  00129	13 45 0c	 adc	 eax, DWORD PTR _lScore$[ebp+4]
  0012c	89 55 ac	 mov	 DWORD PTR tv287[ebp], edx
  0012f	89 45 b0	 mov	 DWORD PTR tv287[ebp+4], eax
  00132	83 7d b0 00	 cmp	 DWORD PTR tv287[ebp+4], 0
  00136	7f 0f		 jg	 SHORT $LN4@ModifyUser
  00138	7c 06		 jl	 SHORT $LN5@ModifyUser
  0013a	83 7d ac 00	 cmp	 DWORD PTR tv287[ebp], 0
  0013e	73 07		 jae	 SHORT $LN4@ModifyUser
$LN5@ModifyUser:
  00140	32 c0		 xor	 al, al
  00142	e9 e6 01 00 00	 jmp	 $LN1@ModifyUser
$LN4@ModifyUser:

; 609  : 
; 610  : 	//设置积分
; 611  : 	m_UserInfo.bConsumptionType.lScore += lScore;

  00147	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00150	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  00153	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  00159	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  0015c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  00165	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 612  : 	m_UserInfo.bConsumptionType.lInsure += lInsure;

  0016b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00174	03 4d 10	 add	 ecx, DWORD PTR _lInsure$[ebp]
  00177	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  0017d	13 55 14	 adc	 edx, DWORD PTR _lInsure$[ebp+4]
  00180	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00183	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
  00189	89 90 ac 00 00
	00		 mov	 DWORD PTR [eax+172], edx

; 613  : 
; 614  : 	//记录信息
; 615  : 	m_RecordInfo.lScore+=lScore;

  0018f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00192	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  00198	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  0019b	8b 90 dc 01 00
	00		 mov	 edx, DWORD PTR [eax+476]
  001a1	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a7	89 88 d8 01 00
	00		 mov	 DWORD PTR [eax+472], ecx
  001ad	89 90 dc 01 00
	00		 mov	 DWORD PTR [eax+476], edx

; 616  : 	m_RecordInfo.lInsure+=lInsure;

  001b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b6	8b 88 e8 01 00
	00		 mov	 ecx, DWORD PTR [eax+488]
  001bc	03 4d 10	 add	 ecx, DWORD PTR _lInsure$[ebp]
  001bf	8b 90 ec 01 00
	00		 mov	 edx, DWORD PTR [eax+492]
  001c5	13 55 14	 adc	 edx, DWORD PTR _lInsure$[ebp+4]
  001c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	89 88 e8 01 00
	00		 mov	 DWORD PTR [eax+488], ecx
  001d1	89 90 ec 01 00
	00		 mov	 DWORD PTR [eax+492], edx

; 617  : 	m_RecordInfo.lRevenue+=lRevenue;

  001d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001da	8b 88 f0 01 00
	00		 mov	 ecx, DWORD PTR [eax+496]
  001e0	03 4d 18	 add	 ecx, DWORD PTR _lRevenue$[ebp]
  001e3	8b 90 f4 01 00
	00		 mov	 edx, DWORD PTR [eax+500]
  001e9	13 55 1c	 adc	 edx, DWORD PTR _lRevenue$[ebp+4]
  001ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	89 88 f0 01 00
	00		 mov	 DWORD PTR [eax+496], ecx
  001f5	89 90 f4 01 00
	00		 mov	 DWORD PTR [eax+500], edx

; 618  : 
; 619  : 	//托管积分
; 620  : 	if (m_lRestrictScore>0L)

  001fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fe	89 45 b0	 mov	 DWORD PTR tv339[ebp], eax
  00201	8b 4d b0	 mov	 ecx, DWORD PTR tv339[ebp]
  00204	83 b9 8c 02 00
	00 00		 cmp	 DWORD PTR [ecx+652], 0
  0020b	0f 8c ca 00 00
	00		 jl	 $LN6@ModifyUser
  00211	7f 10		 jg	 SHORT $LN20@ModifyUser
  00213	8b 55 b0	 mov	 edx, DWORD PTR tv339[ebp]
  00216	83 ba 88 02 00
	00 00		 cmp	 DWORD PTR [edx+648], 0
  0021d	0f 86 b8 00 00
	00		 jbe	 $LN6@ModifyUser
$LN20@ModifyUser:

; 621  : 	{
; 622  : 		//变量定义
; 623  : 		SCORE lTotalScore = m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore;

  00223	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00226	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  0022f	03 91 80 02 00
	00		 add	 edx, DWORD PTR [ecx+640]
  00235	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  0023b	13 81 84 02 00
	00		 adc	 eax, DWORD PTR [ecx+644]
  00241	89 55 f4	 mov	 DWORD PTR _lTotalScore$1[ebp], edx
  00244	89 45 f8	 mov	 DWORD PTR _lTotalScore$1[ebp+4], eax

; 624  : 
; 625  : 		//托管调整
; 626  : 		if (lTotalScore>m_lRestrictScore)

  00247	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024a	89 45 b0	 mov	 DWORD PTR tv354[ebp], eax
  0024d	8b 4d b0	 mov	 ecx, DWORD PTR tv354[ebp]
  00250	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  00253	3b 91 8c 02 00
	00		 cmp	 edx, DWORD PTR [ecx+652]
  00259	7c 54		 jl	 SHORT $LN7@ModifyUser
  0025b	7f 0e		 jg	 SHORT $LN21@ModifyUser
  0025d	8b 45 b0	 mov	 eax, DWORD PTR tv354[ebp]
  00260	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  00263	3b 88 88 02 00
	00		 cmp	 ecx, DWORD PTR [eax+648]
  00269	76 44		 jbe	 SHORT $LN7@ModifyUser
$LN21@ModifyUser:

; 627  : 		{
; 628  : 			m_UserInfo.bConsumptionType.lScore = m_lRestrictScore;

  0026b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00271	8b 91 88 02 00
	00		 mov	 edx, DWORD PTR [ecx+648]
  00277	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  0027d	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  00283	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 629  : 			m_lTrusteeScore=lTotalScore-m_lRestrictScore;

  00289	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028c	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  0028f	2b 88 88 02 00
	00		 sub	 ecx, DWORD PTR [eax+648]
  00295	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  00298	1b 90 8c 02 00
	00		 sbb	 edx, DWORD PTR [eax+652]
  0029e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a1	89 88 80 02 00
	00		 mov	 DWORD PTR [eax+640], ecx
  002a7	89 90 84 02 00
	00		 mov	 DWORD PTR [eax+644], edx

; 630  : 		}
; 631  : 		else

  002ad	eb 2c		 jmp	 SHORT $LN6@ModifyUser
$LN7@ModifyUser:

; 632  : 		{
; 633  : 			m_lTrusteeScore=0L;

  002af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b2	c7 80 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+640], 0
  002bc	c7 80 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+644], 0

; 634  : 			m_UserInfo.bConsumptionType.lScore = lTotalScore;

  002c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c9	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  002cc	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  002d2	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  002d5	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx
$LN6@ModifyUser:

; 635  : 		}
; 636  : 	}
; 637  : 
; 638  : 	//发送状态
; 639  : 	ASSERT(m_pIServerUserItemSink!=NULL);

  002db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002de	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  002e5	75 19		 jne	 SHORT $LN15@ModifyUser
  002e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z@4JA
  002ed	83 c1 26	 add	 ecx, 38			; 00000026H
  002f0	51		 push	 ecx
  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  002f6	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  002fb	85 c0		 test	 eax, eax
  002fd	74 01		 je	 SHORT $LN15@ModifyUser
  002ff	cc		 int	 3
$LN15@ModifyUser:

; 640  : 	if (m_pIServerUserItemSink!=NULL) m_pIServerUserItemSink->OnEventUserItemScore(this, SCORE_REASON_INSURE);

  00300	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00303	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  0030a	74 1f		 je	 SHORT $LN9@ModifyUser
  0030c	6a 01		 push	 1
  0030e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00311	50		 push	 eax
  00312	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00315	8b 91 20 07 00
	00		 mov	 edx, DWORD PTR [ecx+1824]
  0031b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0031e	8b 12		 mov	 edx, DWORD PTR [edx]
  00320	8b 88 20 07 00
	00		 mov	 ecx, DWORD PTR [eax+1824]
  00326	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00329	ff d0		 call	 eax
$LN9@ModifyUser:

; 641  : 
; 642  : 	return true;

  0032b	b0 01		 mov	 al, 1
$LN1@ModifyUser:

; 643  : }

  0032d	5f		 pop	 edi
  0032e	5e		 pop	 esi
  0032f	5b		 pop	 ebx
  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c2 18 00	 ret	 24			; 00000018H
?ModifyUserInsure@CServerUserItem@@UAE_N_J00@Z ENDP	; CServerUserItem::ModifyUserInsure
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?DetachBindStatus@CServerUserItem@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DetachBindStatus@CServerUserItem@@UAE_NXZ PROC		; CServerUserItem::DetachBindStatus, COMDAT
; _this$ = ecx

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 586  : 	//效验状态
; 587  : 	ASSERT(m_UserInfo.dwUserID!=0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 19		 jne	 SHORT $LN4@DetachBind
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DetachBindStatus@CServerUserItem@@UAE_NXZ@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN4@DetachBind
  0002d	cc		 int	 3
$LN4@DetachBind:

; 588  : 	if (m_UserInfo.dwUserID==0L) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00035	75 04		 jne	 SHORT $LN2@DetachBind
  00037	32 c0		 xor	 al, al
  00039	eb 1b		 jmp	 SHORT $LN1@DetachBind
$LN2@DetachBind:

; 589  : 
; 590  : 	//用户属性
; 591  : 	m_bClientReady=false;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	c6 80 b5 02 00
	00 00		 mov	 BYTE PTR [eax+693], 0

; 592  : 
; 593  : 	//连接属性
; 594  : 	m_wBindIndex=INVALID_WORD;

  00045	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	66 89 81 f4 06
	00 00		 mov	 WORD PTR [ecx+1780], ax

; 595  : 
; 596  : 	return true;

  00054	b0 01		 mov	 al, 1
$LN1@DetachBind:

; 597  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?DetachBindStatus@CServerUserItem@@UAE_NXZ ENDP		; CServerUserItem::DetachBindStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z
_TEXT	SEGMENT
tv233 = -80						; size = 4
tv215 = -80						; size = 4
_lTotalScore$1 = -12					; size = 8
_this$ = -4						; size = 4
_lScore$ = 8						; size = 8
_lLoveLiness$ = 16					; size = 4
?ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z PROC	; CServerUserItem::ModifyUserProperty, COMDAT
; _this$ = ecx

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 539  : 	//效验状态
; 540  : 	ASSERT(m_UserInfo.dwUserID!=0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 19		 jne	 SHORT $LN9@ModifyUser
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN9@ModifyUser
  0002d	cc		 int	 3
$LN9@ModifyUser:

; 541  : 	if (m_UserInfo.dwUserID==0L) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00035	75 07		 jne	 SHORT $LN2@ModifyUser
  00037	32 c0		 xor	 al, al
  00039	e9 cb 01 00 00	 jmp	 $LN1@ModifyUser
$LN2@ModifyUser:

; 542  : 
; 543  : 	//设置积分
; 544  : 	m_UserInfo.bConsumptionType.lScore += lScore;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00047	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  0004a	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  00050	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  0005c	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 545  : 	m_UserInfo.lLoveLiness+=lLoveLiness;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [eax+248]
  0006b	03 4d 10	 add	 ecx, DWORD PTR _lLoveLiness$[ebp]
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00071	89 8a f8 00 00
	00		 mov	 DWORD PTR [edx+248], ecx

; 546  : 
; 547  : 	//记录信息
; 548  : 	m_RecordInfo.lScore+=lScore;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  00080	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  00083	8b 90 dc 01 00
	00		 mov	 edx, DWORD PTR [eax+476]
  00089	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	89 88 d8 01 00
	00		 mov	 DWORD PTR [eax+472], ecx
  00095	89 90 dc 01 00
	00		 mov	 DWORD PTR [eax+476], edx

; 549  : 	m_RecordInfo.lLoveLiness+=lLoveLiness;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 88 24 02 00
	00		 mov	 ecx, DWORD PTR [eax+548]
  000a4	03 4d 10	 add	 ecx, DWORD PTR _lLoveLiness$[ebp]
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	89 8a 24 02 00
	00		 mov	 DWORD PTR [edx+548], ecx

; 550  : 
; 551  : 	//变更信息
; 552  : 	if (lLoveLiness!=0L)

  000b0	83 7d 10 00	 cmp	 DWORD PTR _lLoveLiness$[ebp], 0
  000b4	74 15		 je	 SHORT $LN3@ModifyUser

; 553  : 	{
; 554  : 		m_VariationInfo.lLoveLiness+=lLoveLiness;

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 88 74 02 00
	00		 mov	 ecx, DWORD PTR [eax+628]
  000bf	03 4d 10	 add	 ecx, DWORD PTR _lLoveLiness$[ebp]
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	89 8a 74 02 00
	00		 mov	 DWORD PTR [edx+628], ecx
$LN3@ModifyUser:

; 555  : 	}
; 556  : 
; 557  : 	//托管积分
; 558  : 	if ((m_lRestrictScore>0L)&&(lScore!=0L))

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	89 45 b0	 mov	 DWORD PTR tv215[ebp], eax
  000d1	8b 4d b0	 mov	 ecx, DWORD PTR tv215[ebp]
  000d4	83 b9 8c 02 00
	00 00		 cmp	 DWORD PTR [ecx+652], 0
  000db	0f 8c d6 00 00
	00		 jl	 $LN4@ModifyUser
  000e1	7f 10		 jg	 SHORT $LN11@ModifyUser
  000e3	8b 55 b0	 mov	 edx, DWORD PTR tv215[ebp]
  000e6	83 ba 88 02 00
	00 00		 cmp	 DWORD PTR [edx+648], 0
  000ed	0f 86 c4 00 00
	00		 jbe	 $LN4@ModifyUser
$LN11@ModifyUser:
  000f3	8b 45 08	 mov	 eax, DWORD PTR _lScore$[ebp]
  000f6	0b 45 0c	 or	 eax, DWORD PTR _lScore$[ebp+4]
  000f9	0f 84 b8 00 00
	00		 je	 $LN4@ModifyUser

; 559  : 	{
; 560  : 		//变量定义
; 561  : 		SCORE lTotalScore = m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore;

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  0010b	03 91 80 02 00
	00		 add	 edx, DWORD PTR [ecx+640]
  00111	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  00117	13 81 84 02 00
	00		 adc	 eax, DWORD PTR [ecx+644]
  0011d	89 55 f4	 mov	 DWORD PTR _lTotalScore$1[ebp], edx
  00120	89 45 f8	 mov	 DWORD PTR _lTotalScore$1[ebp+4], eax

; 562  : 
; 563  : 		//托管调整
; 564  : 		if (lTotalScore>m_lRestrictScore)

  00123	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00126	89 45 b0	 mov	 DWORD PTR tv233[ebp], eax
  00129	8b 4d b0	 mov	 ecx, DWORD PTR tv233[ebp]
  0012c	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  0012f	3b 91 8c 02 00
	00		 cmp	 edx, DWORD PTR [ecx+652]
  00135	7c 54		 jl	 SHORT $LN5@ModifyUser
  00137	7f 0e		 jg	 SHORT $LN12@ModifyUser
  00139	8b 45 b0	 mov	 eax, DWORD PTR tv233[ebp]
  0013c	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  0013f	3b 88 88 02 00
	00		 cmp	 ecx, DWORD PTR [eax+648]
  00145	76 44		 jbe	 SHORT $LN5@ModifyUser
$LN12@ModifyUser:

; 565  : 		{
; 566  : 			m_UserInfo.bConsumptionType.lScore = m_lRestrictScore;

  00147	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	8b 91 88 02 00
	00		 mov	 edx, DWORD PTR [ecx+648]
  00153	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  00159	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  0015f	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 567  : 			m_lTrusteeScore=lTotalScore-m_lRestrictScore;

  00165	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00168	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  0016b	2b 88 88 02 00
	00		 sub	 ecx, DWORD PTR [eax+648]
  00171	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  00174	1b 90 8c 02 00
	00		 sbb	 edx, DWORD PTR [eax+652]
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017d	89 88 80 02 00
	00		 mov	 DWORD PTR [eax+640], ecx
  00183	89 90 84 02 00
	00		 mov	 DWORD PTR [eax+644], edx

; 568  : 		}
; 569  : 		else

  00189	eb 2c		 jmp	 SHORT $LN4@ModifyUser
$LN5@ModifyUser:

; 570  : 		{
; 571  : 			m_lTrusteeScore=0L;

  0018b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018e	c7 80 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+640], 0
  00198	c7 80 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+644], 0

; 572  : 			m_UserInfo.bConsumptionType.lScore = lTotalScore;

  001a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a5	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  001a8	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  001ae	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  001b1	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx
$LN4@ModifyUser:

; 573  : 		}
; 574  : 	}
; 575  : 
; 576  : 	//发送状态
; 577  : 	ASSERT(m_pIServerUserItemSink!=NULL);

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ba	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  001c1	75 19		 jne	 SHORT $LN10@ModifyUser
  001c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z@4JA
  001c9	83 c1 27	 add	 ecx, 39			; 00000027H
  001cc	51		 push	 ecx
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  001d2	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001d7	85 c0		 test	 eax, eax
  001d9	74 01		 je	 SHORT $LN10@ModifyUser
  001db	cc		 int	 3
$LN10@ModifyUser:

; 578  : 	if (m_pIServerUserItemSink!=NULL) m_pIServerUserItemSink->OnEventUserItemScore(this, SCORE_REASON_PROPERTY);

  001dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001df	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  001e6	74 1f		 je	 SHORT $LN7@ModifyUser
  001e8	6a 02		 push	 2
  001ea	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ed	50		 push	 eax
  001ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f1	8b 91 20 07 00
	00		 mov	 edx, DWORD PTR [ecx+1824]
  001f7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fa	8b 12		 mov	 edx, DWORD PTR [edx]
  001fc	8b 88 20 07 00
	00		 mov	 ecx, DWORD PTR [eax+1824]
  00202	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00205	ff d0		 call	 eax
$LN7@ModifyUser:

; 579  : 
; 580  : 	return true;

  00207	b0 01		 mov	 al, 1
$LN1@ModifyUser:

; 581  : }

  00209	5f		 pop	 edi
  0020a	5e		 pop	 esi
  0020b	5b		 pop	 ebx
  0020c	8b e5		 mov	 esp, ebp
  0020e	5d		 pop	 ebp
  0020f	c2 0c 00	 ret	 12			; 0000000cH
?ModifyUserProperty@CServerUserItem@@UAE_N_JJ@Z ENDP	; CServerUserItem::ModifyUserProperty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z
_TEXT	SEGMENT
tv214 = -80						; size = 4
tv199 = -80						; size = 4
tv172 = -80						; size = 4
tv159 = -80						; size = 4
_lTotalScore$1 = -12					; size = 8
_this$ = -4						; size = 4
_lScore$ = 8						; size = 8
?UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z PROC	; CServerUserItem::UnFrozenedUserScore, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 502  : 	//效验状态
; 503  : 	ASSERT(m_UserInfo.dwUserID!=0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 19		 jne	 SHORT $LN9@UnFrozened
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN9@UnFrozened
  0002d	cc		 int	 3
$LN9@UnFrozened:

; 504  : 	if (m_UserInfo.dwUserID==0L) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00035	75 07		 jne	 SHORT $LN2@UnFrozened
  00037	32 c0		 xor	 al, al
  00039	e9 ae 01 00 00	 jmp	 $LN1@UnFrozened
$LN2@UnFrozened:

; 505  : 
; 506  : 	//效验积分
; 507  : 	ASSERT((lScore>=0L)&&(m_lFrozenedScore>=lScore));

  0003e	83 7d 0c 00	 cmp	 DWORD PTR _lScore$[ebp+4], 0
  00042	7c 2c		 jl	 SHORT $LN10@UnFrozened
  00044	7f 06		 jg	 SHORT $LN12@UnFrozened
  00046	83 7d 08 00	 cmp	 DWORD PTR _lScore$[ebp], 0
  0004a	72 24		 jb	 SHORT $LN10@UnFrozened
$LN12@UnFrozened:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	89 45 b0	 mov	 DWORD PTR tv159[ebp], eax
  00052	8b 4d b0	 mov	 ecx, DWORD PTR tv159[ebp]
  00055	8b 91 94 02 00
	00		 mov	 edx, DWORD PTR [ecx+660]
  0005b	3b 55 0c	 cmp	 edx, DWORD PTR _lScore$[ebp+4]
  0005e	7f 29		 jg	 SHORT $LN11@UnFrozened
  00060	7c 0e		 jl	 SHORT $LN10@UnFrozened
  00062	8b 45 b0	 mov	 eax, DWORD PTR tv159[ebp]
  00065	8b 88 90 02 00
	00		 mov	 ecx, DWORD PTR [eax+656]
  0006b	3b 4d 08	 cmp	 ecx, DWORD PTR _lScore$[ebp]
  0006e	73 19		 jae	 SHORT $LN11@UnFrozened
$LN10@UnFrozened:
  00070	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA
  00076	83 c2 06	 add	 edx, 6
  00079	52		 push	 edx
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0007f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00084	85 c0		 test	 eax, eax
  00086	74 01		 je	 SHORT $LN11@UnFrozened
  00088	cc		 int	 3
$LN11@UnFrozened:

; 508  : 	if ((lScore<0L)||(m_lFrozenedScore<lScore)) return false;

  00089	83 7d 0c 00	 cmp	 DWORD PTR _lScore$[ebp+4], 0
  0008d	7c 2c		 jl	 SHORT $LN4@UnFrozened
  0008f	7f 06		 jg	 SHORT $LN14@UnFrozened
  00091	83 7d 08 00	 cmp	 DWORD PTR _lScore$[ebp], 0
  00095	72 24		 jb	 SHORT $LN4@UnFrozened
$LN14@UnFrozened:
  00097	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	89 45 b0	 mov	 DWORD PTR tv172[ebp], eax
  0009d	8b 4d b0	 mov	 ecx, DWORD PTR tv172[ebp]
  000a0	8b 91 94 02 00
	00		 mov	 edx, DWORD PTR [ecx+660]
  000a6	3b 55 0c	 cmp	 edx, DWORD PTR _lScore$[ebp+4]
  000a9	7f 17		 jg	 SHORT $LN3@UnFrozened
  000ab	7c 0e		 jl	 SHORT $LN4@UnFrozened
  000ad	8b 45 b0	 mov	 eax, DWORD PTR tv172[ebp]
  000b0	8b 88 90 02 00
	00		 mov	 ecx, DWORD PTR [eax+656]
  000b6	3b 4d 08	 cmp	 ecx, DWORD PTR _lScore$[ebp]
  000b9	73 07		 jae	 SHORT $LN3@UnFrozened
$LN4@UnFrozened:
  000bb	32 c0		 xor	 al, al
  000bd	e9 2a 01 00 00	 jmp	 $LN1@UnFrozened
$LN3@UnFrozened:

; 509  : 
; 510  : 	//设置变量
; 511  : 	m_lFrozenedScore-=lScore;

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 88 90 02 00
	00		 mov	 ecx, DWORD PTR [eax+656]
  000cb	2b 4d 08	 sub	 ecx, DWORD PTR _lScore$[ebp]
  000ce	8b 90 94 02 00
	00		 mov	 edx, DWORD PTR [eax+660]
  000d4	1b 55 0c	 sbb	 edx, DWORD PTR _lScore$[ebp+4]
  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	89 88 90 02 00
	00		 mov	 DWORD PTR [eax+656], ecx
  000e0	89 90 94 02 00
	00		 mov	 DWORD PTR [eax+660], edx

; 512  : 	m_UserInfo.bConsumptionType.lScore += lScore;

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000ef	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  000f2	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  000f8	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  000fb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fe	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  00104	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 513  : 
; 514  : 	//托管积分
; 515  : 	if (m_lRestrictScore>0L)

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	89 45 b0	 mov	 DWORD PTR tv199[ebp], eax
  00110	8b 4d b0	 mov	 ecx, DWORD PTR tv199[ebp]
  00113	83 b9 8c 02 00
	00 00		 cmp	 DWORD PTR [ecx+652], 0
  0011a	0f 8c ca 00 00
	00		 jl	 $LN5@UnFrozened
  00120	7f 10		 jg	 SHORT $LN16@UnFrozened
  00122	8b 55 b0	 mov	 edx, DWORD PTR tv199[ebp]
  00125	83 ba 88 02 00
	00 00		 cmp	 DWORD PTR [edx+648], 0
  0012c	0f 86 b8 00 00
	00		 jbe	 $LN5@UnFrozened
$LN16@UnFrozened:

; 516  : 	{
; 517  : 		//变量定义
; 518  : 		SCORE lTotalScore = m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore;

  00132	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00135	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  0013e	03 91 80 02 00
	00		 add	 edx, DWORD PTR [ecx+640]
  00144	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  0014a	13 81 84 02 00
	00		 adc	 eax, DWORD PTR [ecx+644]
  00150	89 55 f4	 mov	 DWORD PTR _lTotalScore$1[ebp], edx
  00153	89 45 f8	 mov	 DWORD PTR _lTotalScore$1[ebp+4], eax

; 519  : 
; 520  : 		//托管调整
; 521  : 		if (lTotalScore>m_lRestrictScore)

  00156	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00159	89 45 b0	 mov	 DWORD PTR tv214[ebp], eax
  0015c	8b 4d b0	 mov	 ecx, DWORD PTR tv214[ebp]
  0015f	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  00162	3b 91 8c 02 00
	00		 cmp	 edx, DWORD PTR [ecx+652]
  00168	7c 54		 jl	 SHORT $LN6@UnFrozened
  0016a	7f 0e		 jg	 SHORT $LN17@UnFrozened
  0016c	8b 45 b0	 mov	 eax, DWORD PTR tv214[ebp]
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  00172	3b 88 88 02 00
	00		 cmp	 ecx, DWORD PTR [eax+648]
  00178	76 44		 jbe	 SHORT $LN6@UnFrozened
$LN17@UnFrozened:

; 522  : 		{
; 523  : 			m_UserInfo.bConsumptionType.lScore = m_lRestrictScore;

  0017a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	8b 91 88 02 00
	00		 mov	 edx, DWORD PTR [ecx+648]
  00186	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  0018c	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  00192	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 524  : 			m_lTrusteeScore=lTotalScore-m_lRestrictScore;

  00198	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  0019e	2b 88 88 02 00
	00		 sub	 ecx, DWORD PTR [eax+648]
  001a4	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  001a7	1b 90 8c 02 00
	00		 sbb	 edx, DWORD PTR [eax+652]
  001ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b0	89 88 80 02 00
	00		 mov	 DWORD PTR [eax+640], ecx
  001b6	89 90 84 02 00
	00		 mov	 DWORD PTR [eax+644], edx

; 525  : 		}
; 526  : 		else

  001bc	eb 2c		 jmp	 SHORT $LN5@UnFrozened
$LN6@UnFrozened:

; 527  : 		{
; 528  : 			m_lTrusteeScore=0L;

  001be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c1	c7 80 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+640], 0
  001cb	c7 80 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+644], 0

; 529  : 			m_UserInfo.bConsumptionType.lScore = lTotalScore;

  001d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d8	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  001db	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  001e1	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  001e4	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx
$LN5@UnFrozened:

; 530  : 		}
; 531  : 	}
; 532  : 
; 533  : 	return true;

  001ea	b0 01		 mov	 al, 1
$LN1@UnFrozened:

; 534  : }

  001ec	5f		 pop	 edi
  001ed	5e		 pop	 esi
  001ee	5b		 pop	 ebx
  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c2 08 00	 ret	 8
?UnFrozenedUserScore@CServerUserItem@@UAE_N_J@Z ENDP	; CServerUserItem::UnFrozenedUserScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?FrozenedUserScore@CServerUserItem@@UAE_N_J@Z
_TEXT	SEGMENT
tv184 = -76						; size = 8
tv163 = -76						; size = 8
tv202 = -72						; size = 4
_this$ = -4						; size = 4
_lScore$ = 8						; size = 8
?FrozenedUserScore@CServerUserItem@@UAE_N_J@Z PROC	; CServerUserItem::FrozenedUserScore, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 471  : 	//效验状态
; 472  : 	ASSERT(m_UserInfo.dwUserID!=0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 19		 jne	 SHORT $LN8@FrozenedUs
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??FrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN8@FrozenedUs
  0002d	cc		 int	 3
$LN8@FrozenedUs:

; 473  : 	if (m_UserInfo.dwUserID==0L) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00035	75 07		 jne	 SHORT $LN2@FrozenedUs
  00037	32 c0		 xor	 al, al
  00039	e9 6d 01 00 00	 jmp	 $LN1@FrozenedUs
$LN2@FrozenedUs:

; 474  : 
; 475  : 	//效验积分
; 476  : 	ASSERT((lScore >= 0L) && ((m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore) >= lScore));

  0003e	83 7d 0c 00	 cmp	 DWORD PTR _lScore$[ebp+4], 0
  00042	7c 3e		 jl	 SHORT $LN9@FrozenedUs
  00044	7f 06		 jg	 SHORT $LN11@FrozenedUs
  00046	83 7d 08 00	 cmp	 DWORD PTR _lScore$[ebp], 0
  0004a	72 36		 jb	 SHORT $LN9@FrozenedUs
$LN11@FrozenedUs:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00058	03 91 80 02 00
	00		 add	 edx, DWORD PTR [ecx+640]
  0005e	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  00064	13 81 84 02 00
	00		 adc	 eax, DWORD PTR [ecx+644]
  0006a	89 55 b4	 mov	 DWORD PTR tv163[ebp], edx
  0006d	89 45 b8	 mov	 DWORD PTR tv163[ebp+4], eax
  00070	8b 4d b8	 mov	 ecx, DWORD PTR tv163[ebp+4]
  00073	3b 4d 0c	 cmp	 ecx, DWORD PTR _lScore$[ebp+4]
  00076	7f 22		 jg	 SHORT $LN10@FrozenedUs
  00078	7c 08		 jl	 SHORT $LN9@FrozenedUs
  0007a	8b 55 b4	 mov	 edx, DWORD PTR tv163[ebp]
  0007d	3b 55 08	 cmp	 edx, DWORD PTR _lScore$[ebp]
  00080	73 18		 jae	 SHORT $LN10@FrozenedUs
$LN9@FrozenedUs:
  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??FrozenedUserScore@CServerUserItem@@UAE_N_J@Z@4JA
  00087	83 c0 06	 add	 eax, 6
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00090	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00095	85 c0		 test	 eax, eax
  00097	74 01		 je	 SHORT $LN10@FrozenedUs
  00099	cc		 int	 3
$LN10@FrozenedUs:

; 477  : 	if ((lScore<0L) || ((m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore)<lScore)) return false;

  0009a	83 7d 0c 00	 cmp	 DWORD PTR _lScore$[ebp+4], 0
  0009e	7c 3e		 jl	 SHORT $LN4@FrozenedUs
  000a0	7f 06		 jg	 SHORT $LN13@FrozenedUs
  000a2	83 7d 08 00	 cmp	 DWORD PTR _lScore$[ebp], 0
  000a6	72 36		 jb	 SHORT $LN4@FrozenedUs
$LN13@FrozenedUs:
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  000b4	03 91 80 02 00
	00		 add	 edx, DWORD PTR [ecx+640]
  000ba	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  000c0	13 81 84 02 00
	00		 adc	 eax, DWORD PTR [ecx+644]
  000c6	89 55 b4	 mov	 DWORD PTR tv184[ebp], edx
  000c9	89 45 b8	 mov	 DWORD PTR tv184[ebp+4], eax
  000cc	8b 4d b8	 mov	 ecx, DWORD PTR tv184[ebp+4]
  000cf	3b 4d 0c	 cmp	 ecx, DWORD PTR _lScore$[ebp+4]
  000d2	7f 11		 jg	 SHORT $LN3@FrozenedUs
  000d4	7c 08		 jl	 SHORT $LN4@FrozenedUs
  000d6	8b 55 b4	 mov	 edx, DWORD PTR tv184[ebp]
  000d9	3b 55 08	 cmp	 edx, DWORD PTR _lScore$[ebp]
  000dc	73 07		 jae	 SHORT $LN3@FrozenedUs
$LN4@FrozenedUs:
  000de	32 c0		 xor	 al, al
  000e0	e9 c6 00 00 00	 jmp	 $LN1@FrozenedUs
$LN3@FrozenedUs:

; 478  : 
; 479  : 	//设置变量
; 480  : 	m_lFrozenedScore+=lScore;

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 88 90 02 00
	00		 mov	 ecx, DWORD PTR [eax+656]
  000ee	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  000f1	8b 90 94 02 00
	00		 mov	 edx, DWORD PTR [eax+660]
  000f7	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	89 88 90 02 00
	00		 mov	 DWORD PTR [eax+656], ecx
  00103	89 90 94 02 00
	00		 mov	 DWORD PTR [eax+660], edx

; 481  : 
; 482  : 	//设置用户
; 483  : 	if (m_lTrusteeScore<lScore)

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	89 45 b8	 mov	 DWORD PTR tv202[ebp], eax
  0010f	8b 4d b8	 mov	 ecx, DWORD PTR tv202[ebp]
  00112	8b 91 84 02 00
	00		 mov	 edx, DWORD PTR [ecx+644]
  00118	3b 55 0c	 cmp	 edx, DWORD PTR _lScore$[ebp+4]
  0011b	7f 68		 jg	 SHORT $LN5@FrozenedUs
  0011d	7c 0e		 jl	 SHORT $LN15@FrozenedUs
  0011f	8b 45 b8	 mov	 eax, DWORD PTR tv202[ebp]
  00122	8b 88 80 02 00
	00		 mov	 ecx, DWORD PTR [eax+640]
  00128	3b 4d 08	 cmp	 ecx, DWORD PTR _lScore$[ebp]
  0012b	73 58		 jae	 SHORT $LN5@FrozenedUs
$LN15@FrozenedUs:

; 484  : 	{
; 485  : 		//积分锁定
; 486  : 		lScore-=m_lTrusteeScore;

  0012d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _lScore$[ebp]
  00133	2b 88 80 02 00
	00		 sub	 ecx, DWORD PTR [eax+640]
  00139	8b 55 0c	 mov	 edx, DWORD PTR _lScore$[ebp+4]
  0013c	1b 90 84 02 00
	00		 sbb	 edx, DWORD PTR [eax+644]
  00142	89 4d 08	 mov	 DWORD PTR _lScore$[ebp], ecx
  00145	89 55 0c	 mov	 DWORD PTR _lScore$[ebp+4], edx

; 487  : 		m_UserInfo.bConsumptionType.lScore -= lScore;

  00148	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00151	2b 4d 08	 sub	 ecx, DWORD PTR _lScore$[ebp]
  00154	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  0015a	1b 55 0c	 sbb	 edx, DWORD PTR _lScore$[ebp+4]
  0015d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00160	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  00166	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 488  : 		m_lTrusteeScore=0L;

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	c7 80 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+640], 0
  00179	c7 80 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+644], 0

; 489  : 	}
; 490  : 	else

  00183	eb 24		 jmp	 SHORT $LN6@FrozenedUs
$LN5@FrozenedUs:

; 491  : 	{
; 492  : 		//托管锁定
; 493  : 		m_lTrusteeScore-=lScore;

  00185	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00188	8b 88 80 02 00
	00		 mov	 ecx, DWORD PTR [eax+640]
  0018e	2b 4d 08	 sub	 ecx, DWORD PTR _lScore$[ebp]
  00191	8b 90 84 02 00
	00		 mov	 edx, DWORD PTR [eax+644]
  00197	1b 55 0c	 sbb	 edx, DWORD PTR _lScore$[ebp+4]
  0019a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019d	89 88 80 02 00
	00		 mov	 DWORD PTR [eax+640], ecx
  001a3	89 90 84 02 00
	00		 mov	 DWORD PTR [eax+644], edx
$LN6@FrozenedUs:

; 494  : 	}
; 495  : 
; 496  : 	return true;

  001a9	b0 01		 mov	 al, 1
$LN1@FrozenedUs:

; 497  : }

  001ab	5f		 pop	 edi
  001ac	5e		 pop	 esi
  001ad	5b		 pop	 ebx
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 08 00	 ret	 8
?FrozenedUserScore@CServerUserItem@@UAE_N_J@Z ENDP	; CServerUserItem::FrozenedUserScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetUserTaskReward@CServerUserItem@@UAE_N_J0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lScore$ = 8						; size = 8
_lIngot$ = 16						; size = 8
?SetUserTaskReward@CServerUserItem@@UAE_N_J0@Z PROC	; CServerUserItem::SetUserTaskReward, COMDAT
; _this$ = ecx

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 423  : 	m_UserInfo.bConsumptionType.lScore = lScore;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _lScore$[ebp]
  00012	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  00018	8b 55 0c	 mov	 edx, DWORD PTR _lScore$[ebp+4]
  0001b	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 424  : 	m_UserInfo.bConsumptionType.lIngot = lIngot;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _lIngot$[ebp]
  00027	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx
  0002d	8b 55 14	 mov	 edx, DWORD PTR _lIngot$[ebp+4]
  00030	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 425  : 
; 426  : 	return true;

  00036	b0 01		 mov	 al, 1

; 427  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 10 00	 ret	 16			; 00000010H
?SetUserTaskReward@CServerUserItem@@UAE_N_J0@Z ENDP	; CServerUserItem::SetUserTaskReward
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z
_TEXT	SEGMENT
tv572 = -80						; size = 4
tv557 = -80						; size = 4
tv81 = -80						; size = 4
_lTotalScore$1 = -12					; size = 8
_this$ = -4						; size = 4
_lScore$ = 8						; size = 8
_lGrade$ = 16						; size = 8
_lRevenue$ = 24						; size = 8
_lIngot$ = 32						; size = 8
_cbScoreType$ = 40					; size = 1
_dwPlayTimeCount$ = 44					; size = 4
_dwWinExperience$ = 48					; size = 4
?WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z PROC	; CServerUserItem::WriteUserScore, COMDAT
; _this$ = ecx

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  : 	//效验状态
; 326  : 	ASSERT((m_UserInfo.dwUserID!=0L)&&(cbScoreType!=SCORE_TYPE_NULL));

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	74 08		 je	 SHORT $LN15@WriteUserS
  00015	0f b6 4d 28	 movzx	 ecx, BYTE PTR _cbScoreType$[ebp]
  00019	85 c9		 test	 ecx, ecx
  0001b	75 19		 jne	 SHORT $LN16@WriteUserS
$LN15@WriteUserS:
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z@4JA
  00023	83 c2 02	 add	 edx, 2
  00026	52		 push	 edx
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0002c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00031	85 c0		 test	 eax, eax
  00033	74 01		 je	 SHORT $LN16@WriteUserS
  00035	cc		 int	 3
$LN16@WriteUserS:

; 327  : 	if ((m_UserInfo.dwUserID==0L)||(cbScoreType==SCORE_TYPE_NULL)) return false;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003d	74 08		 je	 SHORT $LN5@WriteUserS
  0003f	0f b6 45 28	 movzx	 eax, BYTE PTR _cbScoreType$[ebp]
  00043	85 c0		 test	 eax, eax
  00045	75 07		 jne	 SHORT $LN4@WriteUserS
$LN5@WriteUserS:
  00047	32 c0		 xor	 al, al
  00049	e9 f6 04 00 00	 jmp	 $LN1@WriteUserS
$LN4@WriteUserS:

; 328  : 
; 329  : 	//修改胜负
; 330  : 	switch (cbScoreType)

  0004e	0f b6 45 28	 movzx	 eax, BYTE PTR _cbScoreType$[ebp]
  00052	89 45 b0	 mov	 DWORD PTR tv81[ebp], eax
  00055	8b 4d b0	 mov	 ecx, DWORD PTR tv81[ebp]
  00058	83 e9 01	 sub	 ecx, 1
  0005b	89 4d b0	 mov	 DWORD PTR tv81[ebp], ecx
  0005e	83 7d b0 03	 cmp	 DWORD PTR tv81[ebp], 3
  00062	0f 87 12 01 00
	00		 ja	 $LN2@WriteUserS
  00068	8b 55 b0	 mov	 edx, DWORD PTR tv81[ebp]
  0006b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN20@WriteUserS[edx*4]
$LN6@WriteUserS:

; 331  : 	{
; 332  : 	case SCORE_TYPE_WIN:	//胜局
; 333  : 		{
; 334  : 			m_UserInfo.dwWinCount++;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	89 8a e0 00 00
	00		 mov	 DWORD PTR [edx+224], ecx

; 335  : 			m_RecordInfo.dwWinCount++;

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 88 f8 01 00
	00		 mov	 ecx, DWORD PTR [eax+504]
  00090	83 c1 01	 add	 ecx, 1
  00093	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00096	89 8a f8 01 00
	00		 mov	 DWORD PTR [edx+504], ecx

; 336  : 			m_VariationInfo.dwWinCount++;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 88 48 02 00
	00		 mov	 ecx, DWORD PTR [eax+584]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ab	89 8a 48 02 00
	00		 mov	 DWORD PTR [edx+584], ecx

; 337  : 			break;

  000b1	e9 c4 00 00 00	 jmp	 $LN2@WriteUserS
$LN7@WriteUserS:

; 338  : 		}
; 339  : 	case SCORE_TYPE_LOSE:	//输局
; 340  : 		{
; 341  : 			m_UserInfo.dwLostCount++;

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [eax+228]
  000bf	83 c1 01	 add	 ecx, 1
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	89 8a e4 00 00
	00		 mov	 DWORD PTR [edx+228], ecx

; 342  : 			m_RecordInfo.dwLostCount++;

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	8b 88 fc 01 00
	00		 mov	 ecx, DWORD PTR [eax+508]
  000d4	83 c1 01	 add	 ecx, 1
  000d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000da	89 8a fc 01 00
	00		 mov	 DWORD PTR [edx+508], ecx

; 343  : 			m_VariationInfo.dwLostCount++;

  000e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	8b 88 4c 02 00
	00		 mov	 ecx, DWORD PTR [eax+588]
  000e9	83 c1 01	 add	 ecx, 1
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 8a 4c 02 00
	00		 mov	 DWORD PTR [edx+588], ecx

; 344  : 			break;

  000f5	e9 80 00 00 00	 jmp	 $LN2@WriteUserS
$LN8@WriteUserS:

; 345  : 		}
; 346  : 	case SCORE_TYPE_DRAW:	//和局
; 347  : 		{
; 348  : 			m_UserInfo.dwDrawCount++;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00103	83 c1 01	 add	 ecx, 1
  00106	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00109	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx

; 349  : 			m_RecordInfo.dwDrawCount++;

  0010f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 88 00 02 00
	00		 mov	 ecx, DWORD PTR [eax+512]
  00118	83 c1 01	 add	 ecx, 1
  0011b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	89 8a 00 02 00
	00		 mov	 DWORD PTR [edx+512], ecx

; 350  : 			m_VariationInfo.dwDrawCount++;

  00124	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00127	8b 88 50 02 00
	00		 mov	 ecx, DWORD PTR [eax+592]
  0012d	83 c1 01	 add	 ecx, 1
  00130	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00133	89 8a 50 02 00
	00		 mov	 DWORD PTR [edx+592], ecx

; 351  : 			break;

  00139	eb 3f		 jmp	 SHORT $LN2@WriteUserS
$LN9@WriteUserS:

; 352  : 		}
; 353  : 	case SCORE_TYPE_FLEE:	//逃局
; 354  : 		{
; 355  : 			m_UserInfo.dwFleeCount++;

  0013b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013e	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  00144	83 c1 01	 add	 ecx, 1
  00147	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014a	89 8a ec 00 00
	00		 mov	 DWORD PTR [edx+236], ecx

; 356  : 			m_RecordInfo.dwFleeCount++;

  00150	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00153	8b 88 04 02 00
	00		 mov	 ecx, DWORD PTR [eax+516]
  00159	83 c1 01	 add	 ecx, 1
  0015c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015f	89 8a 04 02 00
	00		 mov	 DWORD PTR [edx+516], ecx

; 357  : 			m_VariationInfo.dwFleeCount++;

  00165	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00168	8b 88 54 02 00
	00		 mov	 ecx, DWORD PTR [eax+596]
  0016e	83 c1 01	 add	 ecx, 1
  00171	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00174	89 8a 54 02 00
	00		 mov	 DWORD PTR [edx+596], ecx
$LN2@WriteUserS:

; 358  : 			break;
; 359  : 		}
; 360  : 	}
; 361  : 
; 362  : 	//设置标志
; 363  : 	m_bModifyScore=true;

  0017a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017d	c6 80 b6 02 00
	00 01		 mov	 BYTE PTR [eax+694], 1

; 364  : 
; 365  : 	//设置积分
; 366  : 	m_UserInfo.bConsumptionType.lScore += lScore;

  00184	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00187	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0018d	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  00190	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  00196	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  00199	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019c	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  001a2	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 367  : 	m_UserInfo.bConsumptionType.lGrade += lGrade;

  001a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  001b1	03 4d 10	 add	 ecx, DWORD PTR _lGrade$[ebp]
  001b4	8b 90 a4 00 00
	00		 mov	 edx, DWORD PTR [eax+164]
  001ba	13 55 14	 adc	 edx, DWORD PTR _lGrade$[ebp+4]
  001bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c0	89 88 a0 00 00
	00		 mov	 DWORD PTR [eax+160], ecx
  001c6	89 90 a4 00 00
	00		 mov	 DWORD PTR [eax+164], edx

; 368  : 	m_UserInfo.bConsumptionType.lIngot += lIngot;

  001cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cf	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  001d5	03 4d 20	 add	 ecx, DWORD PTR _lIngot$[ebp]
  001d8	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  001de	13 55 24	 adc	 edx, DWORD PTR _lIngot$[ebp+4]
  001e1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e4	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx
  001ea	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 369  : 	m_UserInfo.dwExperience+=(dwPlayTimeCount+59L)/60L+dwWinExperience;	

  001f0	8b 45 2c	 mov	 eax, DWORD PTR _dwPlayTimeCount$[ebp]
  001f3	83 c0 3b	 add	 eax, 59			; 0000003bH
  001f6	33 d2		 xor	 edx, edx
  001f8	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001fd	f7 f1		 div	 ecx
  001ff	03 45 30	 add	 eax, DWORD PTR _dwWinExperience$[ebp]
  00202	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00205	03 82 f4 00 00
	00		 add	 eax, DWORD PTR [edx+244]
  0020b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020e	89 81 f4 00 00
	00		 mov	 DWORD PTR [ecx+244], eax

; 370  : 
; 371  : 	//历史积分
; 372  : 	m_UserInfo.lIntegralCount+=lScore;

  00214	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00217	8b 88 fc 00 00
	00		 mov	 ecx, DWORD PTR [eax+252]
  0021d	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  00220	8b 90 00 01 00
	00		 mov	 edx, DWORD PTR [eax+256]
  00226	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  00229	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022c	89 88 fc 00 00
	00		 mov	 DWORD PTR [eax+252], ecx
  00232	89 90 00 01 00
	00		 mov	 DWORD PTR [eax+256], edx

; 373  : 	m_RecordInfo.lIntegralCount+=lScore;

  00238	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023b	8b 88 08 02 00
	00		 mov	 ecx, DWORD PTR [eax+520]
  00241	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  00244	8b 90 0c 02 00
	00		 mov	 edx, DWORD PTR [eax+524]
  0024a	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  0024d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00250	89 88 08 02 00
	00		 mov	 DWORD PTR [eax+520], ecx
  00256	89 90 0c 02 00
	00		 mov	 DWORD PTR [eax+524], edx

; 374  : 	m_VariationInfo.lIntegralCount+=lScore;

  0025c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025f	8b 88 58 02 00
	00		 mov	 ecx, DWORD PTR [eax+600]
  00265	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  00268	8b 90 5c 02 00
	00		 mov	 edx, DWORD PTR [eax+604]
  0026e	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  00271	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00274	89 88 58 02 00
	00		 mov	 DWORD PTR [eax+600], ecx
  0027a	89 90 5c 02 00
	00		 mov	 DWORD PTR [eax+604], edx

; 375  : 
; 376  : 	//记录信息
; 377  : 	m_RecordInfo.lScore+=lScore;

  00280	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00283	8b 88 d8 01 00
	00		 mov	 ecx, DWORD PTR [eax+472]
  00289	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  0028c	8b 90 dc 01 00
	00		 mov	 edx, DWORD PTR [eax+476]
  00292	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  00295	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00298	89 88 d8 01 00
	00		 mov	 DWORD PTR [eax+472], ecx
  0029e	89 90 dc 01 00
	00		 mov	 DWORD PTR [eax+476], edx

; 378  : 	m_RecordInfo.lGrade+=lGrade;

  002a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a7	8b 88 e0 01 00
	00		 mov	 ecx, DWORD PTR [eax+480]
  002ad	03 4d 10	 add	 ecx, DWORD PTR _lGrade$[ebp]
  002b0	8b 90 e4 01 00
	00		 mov	 edx, DWORD PTR [eax+484]
  002b6	13 55 14	 adc	 edx, DWORD PTR _lGrade$[ebp+4]
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	89 88 e0 01 00
	00		 mov	 DWORD PTR [eax+480], ecx
  002c2	89 90 e4 01 00
	00		 mov	 DWORD PTR [eax+484], edx

; 379  : 	m_RecordInfo.lRevenue+=lRevenue;

  002c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002cb	8b 88 f0 01 00
	00		 mov	 ecx, DWORD PTR [eax+496]
  002d1	03 4d 18	 add	 ecx, DWORD PTR _lRevenue$[ebp]
  002d4	8b 90 f4 01 00
	00		 mov	 edx, DWORD PTR [eax+500]
  002da	13 55 1c	 adc	 edx, DWORD PTR _lRevenue$[ebp+4]
  002dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e0	89 88 f0 01 00
	00		 mov	 DWORD PTR [eax+496], ecx
  002e6	89 90 f4 01 00
	00		 mov	 DWORD PTR [eax+500], edx

; 380  : 	m_RecordInfo.lIngot+=lIngot;

  002ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ef	8b 88 18 02 00
	00		 mov	 ecx, DWORD PTR [eax+536]
  002f5	03 4d 20	 add	 ecx, DWORD PTR _lIngot$[ebp]
  002f8	8b 90 1c 02 00
	00		 mov	 edx, DWORD PTR [eax+540]
  002fe	13 55 24	 adc	 edx, DWORD PTR _lIngot$[ebp+4]
  00301	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00304	89 88 18 02 00
	00		 mov	 DWORD PTR [eax+536], ecx
  0030a	89 90 1c 02 00
	00		 mov	 DWORD PTR [eax+540], edx

; 381  : 	m_RecordInfo.dwPlayTimeCount+=dwPlayTimeCount;

  00310	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00313	8b 88 10 02 00
	00		 mov	 ecx, DWORD PTR [eax+528]
  00319	03 4d 2c	 add	 ecx, DWORD PTR _dwPlayTimeCount$[ebp]
  0031c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0031f	89 8a 10 02 00
	00		 mov	 DWORD PTR [edx+528], ecx

; 382  : 	m_RecordInfo.dwExperience+=(dwPlayTimeCount+59L)/60L+dwWinExperience;

  00325	8b 45 2c	 mov	 eax, DWORD PTR _dwPlayTimeCount$[ebp]
  00328	83 c0 3b	 add	 eax, 59			; 0000003bH
  0032b	33 d2		 xor	 edx, edx
  0032d	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00332	f7 f1		 div	 ecx
  00334	03 45 30	 add	 eax, DWORD PTR _dwWinExperience$[ebp]
  00337	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0033a	03 82 20 02 00
	00		 add	 eax, DWORD PTR [edx+544]
  00340	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00343	89 81 20 02 00
	00		 mov	 DWORD PTR [ecx+544], eax

; 383  : 
; 384  : 	//变更信息
; 385  : 	m_VariationInfo.lIngot+=lIngot;

  00349	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0034c	8b 88 68 02 00
	00		 mov	 ecx, DWORD PTR [eax+616]
  00352	03 4d 20	 add	 ecx, DWORD PTR _lIngot$[ebp]
  00355	8b 90 6c 02 00
	00		 mov	 edx, DWORD PTR [eax+620]
  0035b	13 55 24	 adc	 edx, DWORD PTR _lIngot$[ebp+4]
  0035e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00361	89 88 68 02 00
	00		 mov	 DWORD PTR [eax+616], ecx
  00367	89 90 6c 02 00
	00		 mov	 DWORD PTR [eax+620], edx

; 386  : 	m_VariationInfo.dwPlayTimeCount+=dwPlayTimeCount;

  0036d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00370	8b 88 60 02 00
	00		 mov	 ecx, DWORD PTR [eax+608]
  00376	03 4d 2c	 add	 ecx, DWORD PTR _dwPlayTimeCount$[ebp]
  00379	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0037c	89 8a 60 02 00
	00		 mov	 DWORD PTR [edx+608], ecx

; 387  : 	m_VariationInfo.dwExperience+=(dwPlayTimeCount+59L)/60L+dwWinExperience;

  00382	8b 45 2c	 mov	 eax, DWORD PTR _dwPlayTimeCount$[ebp]
  00385	83 c0 3b	 add	 eax, 59			; 0000003bH
  00388	33 d2		 xor	 edx, edx
  0038a	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0038f	f7 f1		 div	 ecx
  00391	03 45 30	 add	 eax, DWORD PTR _dwWinExperience$[ebp]
  00394	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00397	03 82 70 02 00
	00		 add	 eax, DWORD PTR [edx+624]
  0039d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a0	89 81 70 02 00
	00		 mov	 DWORD PTR [ecx+624], eax

; 388  : 	
; 389  : 	//分数变更
; 390  : 	m_VariationInfo.lScore+=lScore;

  003a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003a9	8b 88 28 02 00
	00		 mov	 ecx, DWORD PTR [eax+552]
  003af	03 4d 08	 add	 ecx, DWORD PTR _lScore$[ebp]
  003b2	8b 90 2c 02 00
	00		 mov	 edx, DWORD PTR [eax+556]
  003b8	13 55 0c	 adc	 edx, DWORD PTR _lScore$[ebp+4]
  003bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003be	89 88 28 02 00
	00		 mov	 DWORD PTR [eax+552], ecx
  003c4	89 90 2c 02 00
	00		 mov	 DWORD PTR [eax+556], edx

; 391  : 	m_VariationInfo.lGrade+=lGrade;

  003ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003cd	8b 88 30 02 00
	00		 mov	 ecx, DWORD PTR [eax+560]
  003d3	03 4d 10	 add	 ecx, DWORD PTR _lGrade$[ebp]
  003d6	8b 90 34 02 00
	00		 mov	 edx, DWORD PTR [eax+564]
  003dc	13 55 14	 adc	 edx, DWORD PTR _lGrade$[ebp+4]
  003df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e2	89 88 30 02 00
	00		 mov	 DWORD PTR [eax+560], ecx
  003e8	89 90 34 02 00
	00		 mov	 DWORD PTR [eax+564], edx

; 392  : 	m_VariationInfo.lRevenue+=lRevenue;	

  003ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f1	8b 88 40 02 00
	00		 mov	 ecx, DWORD PTR [eax+576]
  003f7	03 4d 18	 add	 ecx, DWORD PTR _lRevenue$[ebp]
  003fa	8b 90 44 02 00
	00		 mov	 edx, DWORD PTR [eax+580]
  00400	13 55 1c	 adc	 edx, DWORD PTR _lRevenue$[ebp+4]
  00403	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00406	89 88 40 02 00
	00		 mov	 DWORD PTR [eax+576], ecx
  0040c	89 90 44 02 00
	00		 mov	 DWORD PTR [eax+580], edx

; 393  : 
; 394  : 	//托管积分
; 395  : 	if (m_lRestrictScore>0L)

  00412	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00415	89 45 b0	 mov	 DWORD PTR tv557[ebp], eax
  00418	8b 4d b0	 mov	 ecx, DWORD PTR tv557[ebp]
  0041b	83 b9 8c 02 00
	00 00		 cmp	 DWORD PTR [ecx+652], 0
  00422	0f 8c ca 00 00
	00		 jl	 $LN10@WriteUserS
  00428	7f 10		 jg	 SHORT $LN18@WriteUserS
  0042a	8b 55 b0	 mov	 edx, DWORD PTR tv557[ebp]
  0042d	83 ba 88 02 00
	00 00		 cmp	 DWORD PTR [edx+648], 0
  00434	0f 86 b8 00 00
	00		 jbe	 $LN10@WriteUserS
$LN18@WriteUserS:

; 396  : 	{
; 397  : 		//变量定义
; 398  : 		SCORE lTotalScore = m_UserInfo.bConsumptionType.lScore + m_lTrusteeScore;

  0043a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0043d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00440	8b 90 b0 00 00
	00		 mov	 edx, DWORD PTR [eax+176]
  00446	03 91 80 02 00
	00		 add	 edx, DWORD PTR [ecx+640]
  0044c	8b 80 b4 00 00
	00		 mov	 eax, DWORD PTR [eax+180]
  00452	13 81 84 02 00
	00		 adc	 eax, DWORD PTR [ecx+644]
  00458	89 55 f4	 mov	 DWORD PTR _lTotalScore$1[ebp], edx
  0045b	89 45 f8	 mov	 DWORD PTR _lTotalScore$1[ebp+4], eax

; 399  : 
; 400  : 		//托管调整
; 401  : 		if (lTotalScore>m_lRestrictScore)

  0045e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00461	89 45 b0	 mov	 DWORD PTR tv572[ebp], eax
  00464	8b 4d b0	 mov	 ecx, DWORD PTR tv572[ebp]
  00467	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  0046a	3b 91 8c 02 00
	00		 cmp	 edx, DWORD PTR [ecx+652]
  00470	7c 54		 jl	 SHORT $LN11@WriteUserS
  00472	7f 0e		 jg	 SHORT $LN19@WriteUserS
  00474	8b 45 b0	 mov	 eax, DWORD PTR tv572[ebp]
  00477	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  0047a	3b 88 88 02 00
	00		 cmp	 ecx, DWORD PTR [eax+648]
  00480	76 44		 jbe	 SHORT $LN11@WriteUserS
$LN19@WriteUserS:

; 402  : 		{
; 403  : 			m_UserInfo.bConsumptionType.lScore = m_lRestrictScore;

  00482	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00485	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00488	8b 91 88 02 00
	00		 mov	 edx, DWORD PTR [ecx+648]
  0048e	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  00494	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  0049a	89 88 b4 00 00
	00		 mov	 DWORD PTR [eax+180], ecx

; 404  : 			m_lTrusteeScore=lTotalScore-m_lRestrictScore;

  004a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004a3	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  004a6	2b 88 88 02 00
	00		 sub	 ecx, DWORD PTR [eax+648]
  004ac	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  004af	1b 90 8c 02 00
	00		 sbb	 edx, DWORD PTR [eax+652]
  004b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004b8	89 88 80 02 00
	00		 mov	 DWORD PTR [eax+640], ecx
  004be	89 90 84 02 00
	00		 mov	 DWORD PTR [eax+644], edx

; 405  : 		}
; 406  : 		else

  004c4	eb 2c		 jmp	 SHORT $LN10@WriteUserS
$LN11@WriteUserS:

; 407  : 		{
; 408  : 			m_lTrusteeScore=0L;

  004c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004c9	c7 80 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+640], 0
  004d3	c7 80 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+644], 0

; 409  : 			m_UserInfo.bConsumptionType.lScore = lTotalScore;

  004dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004e0	8b 4d f4	 mov	 ecx, DWORD PTR _lTotalScore$1[ebp]
  004e3	89 88 b0 00 00
	00		 mov	 DWORD PTR [eax+176], ecx
  004e9	8b 55 f8	 mov	 edx, DWORD PTR _lTotalScore$1[ebp+4]
  004ec	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx
$LN10@WriteUserS:

; 410  : 		}
; 411  : 	}
; 412  : 
; 413  : 	//发送状态
; 414  : 	ASSERT(m_pIServerUserItemSink!=NULL);

  004f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004f5	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  004fc	75 19		 jne	 SHORT $LN17@WriteUserS
  004fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z@4JA
  00504	83 c1 5a	 add	 ecx, 90			; 0000005aH
  00507	51		 push	 ecx
  00508	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0050d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00512	85 c0		 test	 eax, eax
  00514	74 01		 je	 SHORT $LN17@WriteUserS
  00516	cc		 int	 3
$LN17@WriteUserS:

; 415  : 	if (m_pIServerUserItemSink!=NULL) m_pIServerUserItemSink->OnEventUserItemScore(this,SCORE_REASON_WRITE);

  00517	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0051a	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  00521	74 1f		 je	 SHORT $LN13@WriteUserS
  00523	6a 00		 push	 0
  00525	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00528	50		 push	 eax
  00529	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0052c	8b 91 20 07 00
	00		 mov	 edx, DWORD PTR [ecx+1824]
  00532	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00535	8b 12		 mov	 edx, DWORD PTR [edx]
  00537	8b 88 20 07 00
	00		 mov	 ecx, DWORD PTR [eax+1824]
  0053d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00540	ff d0		 call	 eax
$LN13@WriteUserS:

; 416  : 
; 417  : 	return true;

  00542	b0 01		 mov	 al, 1
$LN1@WriteUserS:

; 418  : }

  00544	5f		 pop	 edi
  00545	5e		 pop	 esi
  00546	5b		 pop	 ebx
  00547	8b e5		 mov	 esp, ebp
  00549	5d		 pop	 ebp
  0054a	c2 2c 00	 ret	 44			; 0000002cH
  0054d	0f 1f 00	 npad	 3
$LN20@WriteUserS:
  00550	00 00 00 00	 DD	 $LN6@WriteUserS
  00554	00 00 00 00	 DD	 $LN7@WriteUserS
  00558	00 00 00 00	 DD	 $LN8@WriteUserS
  0055c	00 00 00 00	 DD	 $LN9@WriteUserS
?WriteUserScore@CServerUserItem@@UAE_N_J000EKK@Z ENDP	; CServerUserItem::WriteUserScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetUserStatus@CServerUserItem@@UAE_NEGG@Z
_TEXT	SEGMENT
_wOldChairID$ = -12					; size = 2
_wOldTableID$ = -8					; size = 2
_this$ = -4						; size = 4
_cbUserStatus$ = 8					; size = 1
_wTableID$ = 12						; size = 2
_wChairID$ = 16						; size = 2
?SetUserStatus@CServerUserItem@@UAE_NEGG@Z PROC		; CServerUserItem::SetUserStatus, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 279  : 	//效验状态
; 280  : 	//ASSERT(m_UserInfo.dwUserID!=0L);
; 281  : 	if (m_UserInfo.dwUserID==0L) return false;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 07		 jne	 SHORT $LN2@SetUserSta
  00015	32 c0		 xor	 al, al
  00017	e9 b5 00 00 00	 jmp	 $LN1@SetUserSta
$LN2@SetUserSta:

; 282  : 
; 283  : 	//记录信息
; 284  : 	WORD wOldTableID=m_UserInfo.wTableID;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	66 8b 88 99 00
	00 00		 mov	 cx, WORD PTR [eax+153]
  00026	66 89 4d f8	 mov	 WORD PTR _wOldTableID$[ebp], cx

; 285  : 	WORD wOldChairID=m_UserInfo.wChairID;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	66 8b 88 9d 00
	00 00		 mov	 cx, WORD PTR [eax+157]
  00034	66 89 4d f4	 mov	 WORD PTR _wOldChairID$[ebp], cx

; 286  : 
; 287  : 	//设置变量
; 288  : 	m_UserInfo.wTableID=wTableID;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	66 8b 4d 0c	 mov	 cx, WORD PTR _wTableID$[ebp]
  0003f	66 89 88 99 00
	00 00		 mov	 WORD PTR [eax+153], cx

; 289  : 	m_UserInfo.wChairID=wChairID;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	66 8b 4d 10	 mov	 cx, WORD PTR _wChairID$[ebp]
  0004d	66 89 88 9d 00
	00 00		 mov	 WORD PTR [eax+157], cx

; 290  : 	m_UserInfo.cbUserStatus=cbUserStatus;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8a 4d 08	 mov	 cl, BYTE PTR _cbUserStatus$[ebp]
  0005a	88 88 9f 00 00
	00		 mov	 BYTE PTR [eax+159], cl

; 291  : 	if(cbUserStatus==US_PLAYING)m_UserInfo.wLastTableID=wTableID;

  00060	0f b6 45 08	 movzx	 eax, BYTE PTR _cbUserStatus$[ebp]
  00064	83 f8 05	 cmp	 eax, 5
  00067	75 0e		 jne	 SHORT $LN3@SetUserSta
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	66 8b 4d 0c	 mov	 cx, WORD PTR _wTableID$[ebp]
  00070	66 89 88 9b 00
	00 00		 mov	 WORD PTR [eax+155], cx
$LN3@SetUserSta:

; 292  : 
; 293  : 	//发送状态
; 294  : 	ASSERT(m_pIServerUserItemSink!=NULL);

  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  00081	75 19		 jne	 SHORT $LN6@SetUserSta
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetUserStatus@CServerUserItem@@UAE_NEGG@Z@4JA
  00089	83 c1 10	 add	 ecx, 16			; 00000010H
  0008c	51		 push	 ecx
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00092	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00097	85 c0		 test	 eax, eax
  00099	74 01		 je	 SHORT $LN6@SetUserSta
  0009b	cc		 int	 3
$LN6@SetUserSta:

; 295  : 	if (m_pIServerUserItemSink!=NULL) m_pIServerUserItemSink->OnEventUserItemStatus(this,wOldTableID,wOldChairID);

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  000a6	74 27		 je	 SHORT $LN4@SetUserSta
  000a8	0f b7 45 f4	 movzx	 eax, WORD PTR _wOldChairID$[ebp]
  000ac	50		 push	 eax
  000ad	0f b7 4d f8	 movzx	 ecx, WORD PTR _wOldTableID$[ebp]
  000b1	51		 push	 ecx
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	52		 push	 edx
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 88 20 07 00
	00		 mov	 ecx, DWORD PTR [eax+1824]
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c4	8b 8a 20 07 00
	00		 mov	 ecx, DWORD PTR [edx+1824]
  000ca	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000cd	ff d2		 call	 edx
$LN4@SetUserSta:

; 296  : 
; 297  : 	return true;

  000cf	b0 01		 mov	 al, 1
$LN1@SetUserSta:

; 298  : }

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
?SetUserStatus@CServerUserItem@@UAE_NEGG@Z ENDP		; CServerUserItem::SetUserStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_VariationInfo$ = 8					; size = 4
?DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z PROC ; CServerUserItem::DistillVariation, COMDAT
; _this$ = ecx

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 445  : 	//效验状态
; 446  : 	ASSERT(m_UserInfo.dwUserID!=0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 19		 jne	 SHORT $LN6@DistillVar
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN6@DistillVar
  0002d	cc		 int	 3
$LN6@DistillVar:

; 447  : 	if (m_UserInfo.dwUserID==0L) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00035	75 04		 jne	 SHORT $LN2@DistillVar
  00037	32 c0		 xor	 al, al
  00039	eb 55		 jmp	 SHORT $LN1@DistillVar
$LN2@DistillVar:

; 448  : 
; 449  : 	//修改判断
; 450  : 	if (m_bModifyScore==true)

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	0f b6 88 b6 02
	00 00		 movzx	 ecx, BYTE PTR [eax+694]
  00045	83 f9 01	 cmp	 ecx, 1
  00048	75 15		 jne	 SHORT $LN3@DistillVar

; 451  : 	{
; 452  : 		//设置变量
; 453  : 		VariationInfo=m_VariationInfo;

  0004a	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0004d	81 c6 28 02 00
	00		 add	 esi, 552		; 00000228H
  00053	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00058	8b 7d 08	 mov	 edi, DWORD PTR _VariationInfo$[ebp]
  0005b	f3 a5		 rep movsd

; 454  : 	}
; 455  : 	else

  0005d	eb 10		 jmp	 SHORT $LN4@DistillVar
$LN3@DistillVar:

; 456  : 	{
; 457  : 		//设置变量
; 458  : 		ZeroMemory(&VariationInfo,sizeof(VariationInfo));

  0005f	6a 50		 push	 80			; 00000050H
  00061	6a 00		 push	 0
  00063	8b 45 08	 mov	 eax, DWORD PTR _VariationInfo$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _memset
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@DistillVar:

; 459  : 	}
; 460  : 
; 461  : 	//还原变量
; 462  : 	m_bModifyScore=false;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	c6 80 b6 02 00
	00 00		 mov	 BYTE PTR [eax+694], 0

; 463  : 	ZeroMemory(&m_VariationInfo,sizeof(m_VariationInfo));

  00079	6a 50		 push	 80			; 00000050H
  0007b	6a 00		 push	 0
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	05 28 02 00 00	 add	 eax, 552		; 00000228H
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _memset
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 464  : 
; 465  : 	return true;

  0008e	b0 01		 mov	 al, 1
$LN1@DistillVar:

; 466  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?DistillVariation@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z ENDP ; CServerUserItem::DistillVariation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_RecordInfo$ = 8					; size = 4
?QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z PROC ; CServerUserItem::QueryRecordInfo, COMDAT
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 432  : 	//效验状态
; 433  : 	ASSERT(m_UserInfo.dwUserID!=0L);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00013	75 19		 jne	 SHORT $LN4@QueryRecor
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z@4JA
  0001b	83 c1 02	 add	 ecx, 2
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00024	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00029	85 c0		 test	 eax, eax
  0002b	74 01		 je	 SHORT $LN4@QueryRecor
  0002d	cc		 int	 3
$LN4@QueryRecor:

; 434  : 	if (m_UserInfo.dwUserID==0L) return false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00035	75 04		 jne	 SHORT $LN2@QueryRecor
  00037	32 c0		 xor	 al, al
  00039	eb 15		 jmp	 SHORT $LN1@QueryRecor
$LN2@QueryRecor:

; 435  : 
; 436  : 	//设置变量
; 437  : 	RecordInfo=m_RecordInfo;

  0003b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0003e	81 c6 d8 01 00
	00		 add	 esi, 472		; 000001d8H
  00044	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00049	8b 7d 08	 mov	 edi, DWORD PTR _RecordInfo$[ebp]
  0004c	f3 a5		 rep movsd

; 438  : 
; 439  : 	return true;

  0004e	b0 01		 mov	 al, 1
$LN1@QueryRecor:

; 440  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?QueryRecordInfo@CServerUserItem@@UAE_NAAUtagVariationInfo@@@Z ENDP ; CServerUserItem::QueryRecordInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?IsVariation@CServerUserItem@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVariation@CServerUserItem@@UAE_NXZ PROC		; CServerUserItem::IsVariation, COMDAT
; _this$ = ecx

; 268  : 	virtual bool IsVariation() { return m_bModifyScore; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 b6 02 00
	00		 mov	 al, BYTE PTR [eax+694]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?IsVariation@CServerUserItem@@UAE_NXZ ENDP		; CServerUserItem::IsVariation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetUserMatchStatus@CServerUserItem@@UAEXE@Z
_TEXT	SEGMENT
_cbOldMatchStatus$ = -5					; size = 1
_this$ = -4						; size = 4
_cbMatchStatus$ = 8					; size = 1
?SetUserMatchStatus@CServerUserItem@@UAEXE@Z PROC	; CServerUserItem::SetUserMatchStatus, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 313  : 	BYTE cbOldMatchStatus=m_cbMatchStatus;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 88 ac 02 00
	00		 mov	 cl, BYTE PTR [eax+684]
  00015	88 4d fb	 mov	 BYTE PTR _cbOldMatchStatus$[ebp], cl

; 314  : 
; 315  : 	m_cbMatchStatus=cbMatchStatus;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8a 4d 08	 mov	 cl, BYTE PTR _cbMatchStatus$[ebp]
  0001e	88 88 ac 02 00
	00		 mov	 BYTE PTR [eax+684], cl

; 316  : 
; 317  : 	//发送状态
; 318  : 	/*ASSERT(m_pIMatchUserItemSink!=NULL);
; 319  : 	if (m_pIMatchUserItemSink!=NULL) m_pIMatchUserItemSink->OnEventMatchUserStatus(this,cbOldMatchStatus,cbMatchStatus);*/
; 320  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetUserMatchStatus@CServerUserItem@@UAEXE@Z ENDP	; CServerUserItem::SetUserMatchStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserMatchStatus@CServerUserItem@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserMatchStatus@CServerUserItem@@UAEEXZ PROC	; CServerUserItem::GetUserMatchStatus, COMDAT
; _this$ = ecx

; 261  : 	virtual BYTE GetUserMatchStatus() { return m_cbMatchStatus; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 ac 02 00
	00		 mov	 al, BYTE PTR [eax+684]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetUserMatchStatus@CServerUserItem@@UAEEXZ ENDP	; CServerUserItem::GetUserMatchStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetSignUpTime@CServerUserItem@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwSignUpTime$ = 8					; size = 4
?SetSignUpTime@CServerUserItem@@UAEXK@Z PROC		; CServerUserItem::SetSignUpTime, COMDAT
; _this$ = ecx

; 259  : 	virtual VOID SetSignUpTime(DWORD dwSignUpTime) { m_dwSignUpTime=dwSignUpTime; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _dwSignUpTime$[ebp]
  00012	89 88 a8 02 00
	00		 mov	 DWORD PTR [eax+680], ecx
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetSignUpTime@CServerUserItem@@UAEXK@Z ENDP		; CServerUserItem::SetSignUpTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetSignUpTime@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSignUpTime@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetSignUpTime, COMDAT
; _this$ = ecx

; 257  : 	virtual DWORD GetSignUpTime() { return m_dwSignUpTime; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a8 02 00
	00		 mov	 eax, DWORD PTR [eax+680]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetSignUpTime@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetSignUpTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetMatchData@CServerUserItem@@UAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMatchData$ = 8					; size = 4
?SetMatchData@CServerUserItem@@UAEXPAX@Z PROC		; CServerUserItem::SetMatchData, COMDAT
; _this$ = ecx

; 255  : 	virtual VOID SetMatchData(VOID * pMatchData) { m_pMatchData=pMatchData; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pMatchData$[ebp]
  00012	89 88 b0 02 00
	00		 mov	 DWORD PTR [eax+688], ecx
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetMatchData@CServerUserItem@@UAEXPAX@Z ENDP		; CServerUserItem::SetMatchData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetMatchData@CServerUserItem@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMatchData@CServerUserItem@@UAEPAXXZ PROC		; CServerUserItem::GetMatchData, COMDAT
; _this$ = ecx

; 253  : 	virtual VOID * GetMatchData() { return m_pMatchData; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 b0 02 00
	00		 mov	 eax, DWORD PTR [eax+688]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMatchData@CServerUserItem@@UAEPAXXZ ENDP		; CServerUserItem::GetMatchData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetAndroidUser@CServerUserItem@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bAndroidUser$ = 8					; size = 1
?SetAndroidUser@CServerUserItem@@UAEX_N@Z PROC		; CServerUserItem::SetAndroidUser, COMDAT
; _this$ = ecx

; 248  : 	virtual VOID SetAndroidUser(bool bAndroidUser) { m_bAndroidUser=bAndroidUser; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _bAndroidUser$[ebp]
  00012	88 88 a5 02 00
	00		 mov	 BYTE PTR [eax+677], cl
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetAndroidUser@CServerUserItem@@UAEX_N@Z ENDP		; CServerUserItem::SetAndroidUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?IsAndroidUser@CServerUserItem@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAndroidUser@CServerUserItem@@UAE_NXZ PROC		; CServerUserItem::IsAndroidUser, COMDAT
; _this$ = ecx

; 246  : 	virtual bool IsAndroidUser() { return m_bAndroidUser; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 a5 02 00
	00		 mov	 al, BYTE PTR [eax+677]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?IsAndroidUser@CServerUserItem@@UAE_NXZ ENDP		; CServerUserItem::IsAndroidUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetMobileUser@CServerUserItem@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bMobileUser$ = 8					; size = 1
?SetMobileUser@CServerUserItem@@UAEX_N@Z PROC		; CServerUserItem::SetMobileUser, COMDAT
; _this$ = ecx

; 241  : 	virtual VOID SetMobileUser(bool bMobileUser) { m_bMobileUser=bMobileUser; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _bMobileUser$[ebp]
  00012	88 88 a4 02 00
	00		 mov	 BYTE PTR [eax+676], cl
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetMobileUser@CServerUserItem@@UAEX_N@Z ENDP		; CServerUserItem::SetMobileUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?IsMobileUser@CServerUserItem@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMobileUser@CServerUserItem@@UAE_NXZ PROC		; CServerUserItem::IsMobileUser, COMDAT
; _this$ = ecx

; 239  : 	virtual bool IsMobileUser() { return m_bMobileUser; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 a4 02 00
	00		 mov	 al, BYTE PTR [eax+676]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?IsMobileUser@CServerUserItem@@UAE_NXZ ENDP		; CServerUserItem::IsMobileUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetClientReady@CServerUserItem@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bClientReady$ = 8					; size = 1
?SetClientReady@CServerUserItem@@UAEX_N@Z PROC		; CServerUserItem::SetClientReady, COMDAT
; _this$ = ecx

; 234  : 	virtual VOID SetClientReady(bool bClientReady) { m_bClientReady=bClientReady; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _bClientReady$[ebp]
  00012	88 88 b5 02 00
	00		 mov	 BYTE PTR [eax+693], cl
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetClientReady@CServerUserItem@@UAEX_N@Z ENDP		; CServerUserItem::SetClientReady
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?IsClientReady@CServerUserItem@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsClientReady@CServerUserItem@@UAE_NXZ PROC		; CServerUserItem::IsClientReady, COMDAT
; _this$ = ecx

; 232  : 	virtual bool IsClientReady() { return m_bClientReady; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 b5 02 00
	00		 mov	 al, BYTE PTR [eax+693]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?IsClientReady@CServerUserItem@@UAE_NXZ ENDP		; CServerUserItem::IsClientReady
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?SetTrusteeUser@CServerUserItem@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bTrusteeUser$ = 8					; size = 1
?SetTrusteeUser@CServerUserItem@@UAEX_N@Z PROC		; CServerUserItem::SetTrusteeUser, COMDAT
; _this$ = ecx

; 227  : 	virtual VOID SetTrusteeUser(bool bTrusteeUser) { m_bTrusteeUser=bTrusteeUser; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _bTrusteeUser$[ebp]
  00012	88 88 b4 02 00
	00		 mov	 BYTE PTR [eax+692], cl
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetTrusteeUser@CServerUserItem@@UAEX_N@Z ENDP		; CServerUserItem::SetTrusteeUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?IsTrusteeUser@CServerUserItem@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTrusteeUser@CServerUserItem@@UAE_NXZ PROC		; CServerUserItem::IsTrusteeUser, COMDAT
; _this$ = ecx

; 225  : 	virtual bool IsTrusteeUser() { return m_bTrusteeUser; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 b4 02 00
	00		 mov	 al, BYTE PTR [eax+692]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?IsTrusteeUser@CServerUserItem@@UAE_NXZ ENDP		; CServerUserItem::IsTrusteeUser
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z
_TEXT	SEGMENT
_nSourceLen$ = -12					; size = 4
_nTargetLen$ = -8					; size = 4
_this$ = -4						; size = 4
_pszPassword$ = 8					; size = 4
?ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z PROC	; CServerUserItem::ContrastLogonPass, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 261  : 	//效验参数
; 262  : 	ASSERT(pszPassword!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pszPassword$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@ContrastLo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN6@ContrastLo
  00029	cc		 int	 3
$LN6@ContrastLo:

; 263  : 	if (pszPassword==NULL) return false;

  0002a	83 7d 08 00	 cmp	 DWORD PTR _pszPassword$[ebp], 0
  0002e	75 04		 jne	 SHORT $LN2@ContrastLo
  00030	32 c0		 xor	 al, al
  00032	eb 59		 jmp	 SHORT $LN1@ContrastLo
$LN2@ContrastLo:

; 264  : 
; 265  : 	//长度对比
; 266  : 	INT nTargetLen=lstrlen(pszPassword);

  00034	8b 45 08	 mov	 eax, DWORD PTR _pszPassword$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0003e	89 45 f8	 mov	 DWORD PTR _nTargetLen$[ebp], eax

; 267  : 	INT nSourceLen=lstrlen(m_szLogonPass);

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	05 b7 02 00 00	 add	 eax, 695		; 000002b7H
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  00050	89 45 f4	 mov	 DWORD PTR _nSourceLen$[ebp], eax

; 268  : 
; 269  : 	//密码对比
; 270  : 	if (nTargetLen!=nSourceLen) return false;

  00053	8b 45 f8	 mov	 eax, DWORD PTR _nTargetLen$[ebp]
  00056	3b 45 f4	 cmp	 eax, DWORD PTR _nSourceLen$[ebp]
  00059	74 04		 je	 SHORT $LN3@ContrastLo
  0005b	32 c0		 xor	 al, al
  0005d	eb 2e		 jmp	 SHORT $LN1@ContrastLo
$LN3@ContrastLo:

; 271  : 	if (CompareString(LOCALE_SYSTEM_DEFAULT,NORM_IGNORECASE,pszPassword,nTargetLen,m_szLogonPass,nSourceLen)!=CSTR_EQUAL) return false;

  0005f	8b 45 f4	 mov	 eax, DWORD PTR _nSourceLen$[ebp]
  00062	50		 push	 eax
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	81 c1 b7 02 00
	00		 add	 ecx, 695		; 000002b7H
  0006c	51		 push	 ecx
  0006d	8b 55 f8	 mov	 edx, DWORD PTR _nTargetLen$[ebp]
  00070	52		 push	 edx
  00071	8b 45 08	 mov	 eax, DWORD PTR _pszPassword$[ebp]
  00074	50		 push	 eax
  00075	6a 01		 push	 1
  00077	68 00 08 00 00	 push	 2048			; 00000800H
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  00082	83 f8 02	 cmp	 eax, 2
  00085	74 04		 je	 SHORT $LN4@ContrastLo
  00087	32 c0		 xor	 al, al
  00089	eb 02		 jmp	 SHORT $LN1@ContrastLo
$LN4@ContrastLo:

; 272  : 
; 273  : 	return true;

  0008b	b0 01		 mov	 al, 1
$LN1@ContrastLo:

; 274  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?ContrastLogonPass@CServerUserItem@@UAE_NPBD@Z ENDP	; CServerUserItem::ContrastLogonPass
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?ContrastNickName@CServerUserItem@@UAE_NPBD@Z
_TEXT	SEGMENT
_nSourceLen$ = -12					; size = 4
_nContrastLen$ = -8					; size = 4
_this$ = -4						; size = 4
_pszNickName$ = 8					; size = 4
?ContrastNickName@CServerUserItem@@UAE_NPBD@Z PROC	; CServerUserItem::ContrastNickName, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 243  : 	//效验参数
; 244  : 	ASSERT(pszNickName!=NULL);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _pszNickName$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@ContrastNi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ContrastNickName@CServerUserItem@@UAE_NPBD@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN6@ContrastNi
  00029	cc		 int	 3
$LN6@ContrastNi:

; 245  : 	if (pszNickName==NULL) return false;

  0002a	83 7d 08 00	 cmp	 DWORD PTR _pszNickName$[ebp], 0
  0002e	75 04		 jne	 SHORT $LN2@ContrastNi
  00030	32 c0		 xor	 al, al
  00032	eb 54		 jmp	 SHORT $LN1@ContrastNi
$LN2@ContrastNi:

; 246  : 
; 247  : 	//长度对比
; 248  : 	INT nContrastLen=lstrlen(pszNickName);

  00034	8b 45 08	 mov	 eax, DWORD PTR _pszNickName$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0003e	89 45 f8	 mov	 DWORD PTR _nContrastLen$[ebp], eax

; 249  : 	INT nSourceLen=lstrlen(m_UserInfo.szNickName);

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 c0 14	 add	 eax, 20			; 00000014H
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  0004e	89 45 f4	 mov	 DWORD PTR _nSourceLen$[ebp], eax

; 250  : 
; 251  : 	//字符对比
; 252  : 	if (nContrastLen!=nSourceLen) return false;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _nContrastLen$[ebp]
  00054	3b 45 f4	 cmp	 eax, DWORD PTR _nSourceLen$[ebp]
  00057	74 04		 je	 SHORT $LN3@ContrastNi
  00059	32 c0		 xor	 al, al
  0005b	eb 2b		 jmp	 SHORT $LN1@ContrastNi
$LN3@ContrastNi:

; 253  : 	if (CompareString(LOCALE_SYSTEM_DEFAULT,NORM_IGNORECASE,pszNickName,nContrastLen,m_UserInfo.szNickName,nSourceLen)!=CSTR_EQUAL) return false;

  0005d	8b 45 f4	 mov	 eax, DWORD PTR _nSourceLen$[ebp]
  00060	50		 push	 eax
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	83 c1 14	 add	 ecx, 20			; 00000014H
  00067	51		 push	 ecx
  00068	8b 55 f8	 mov	 edx, DWORD PTR _nContrastLen$[ebp]
  0006b	52		 push	 edx
  0006c	8b 45 08	 mov	 eax, DWORD PTR _pszNickName$[ebp]
  0006f	50		 push	 eax
  00070	6a 01		 push	 1
  00072	68 00 08 00 00	 push	 2048			; 00000800H
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  0007d	83 f8 02	 cmp	 eax, 2
  00080	74 04		 je	 SHORT $LN4@ContrastNi
  00082	32 c0		 xor	 al, al
  00084	eb 02		 jmp	 SHORT $LN1@ContrastNi
$LN4@ContrastNi:

; 254  : 
; 255  : 	return true;

  00086	b0 01		 mov	 al, 1
$LN1@ContrastNi:

; 256  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?ContrastNickName@CServerUserItem@@UAE_NPBD@Z ENDP	; CServerUserItem::ContrastNickName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserPlayCount@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserPlayCount@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetUserPlayCount, COMDAT
; _this$ = ecx

; 213  : 	virtual DWORD GetUserPlayCount() { return m_UserInfo.dwWinCount+m_UserInfo.dwLostCount+m_UserInfo.dwDrawCount+m_UserInfo.dwFleeCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 e0 00 00
	00		 mov	 eax, DWORD PTR [eax+224]
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	03 81 e4 00 00
	00		 add	 eax, DWORD PTR [ecx+228]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	03 82 e8 00 00
	00		 add	 eax, DWORD PTR [edx+232]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	03 81 ec 00 00
	00		 add	 eax, DWORD PTR [ecx+236]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?GetUserPlayCount@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetUserPlayCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?GetUserFleeRate@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_dwPlayCount$ = -8					; size = 4
_this$ = -4						; size = 4
?GetUserFleeRate@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetUserFleeRate, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 137  : 	//计算逃率
; 138  : 	DWORD dwPlayCount=GetUserPlayCount();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0001a	ff d0		 call	 eax
  0001c	89 45 f8	 mov	 DWORD PTR _dwPlayCount$[ebp], eax

; 139  : 	if (dwPlayCount!=0L) return (WORD)(m_UserInfo.dwFleeCount*10000L/dwPlayCount);

  0001f	83 7d f8 00	 cmp	 DWORD PTR _dwPlayCount$[ebp], 0
  00023	74 14		 je	 SHORT $LN2@GetUserFle
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	69 80 ec 00 00
	00 10 27 00 00	 imul	 eax, DWORD PTR [eax+236], 10000
  00032	33 d2		 xor	 edx, edx
  00034	f7 75 f8	 div	 DWORD PTR _dwPlayCount$[ebp]
  00037	eb 02		 jmp	 SHORT $LN1@GetUserFle
$LN2@GetUserFle:

; 140  : 
; 141  : 	return 0;

  00039	33 c0		 xor	 eax, eax
$LN1@GetUserFle:

; 142  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?GetUserFleeRate@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetUserFleeRate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?GetUserDrawRate@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_dwPlayCount$ = -8					; size = 4
_this$ = -4						; size = 4
?GetUserDrawRate@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetUserDrawRate, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 127  : 	//计算和率
; 128  : 	DWORD dwPlayCount=GetUserPlayCount();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0001a	ff d0		 call	 eax
  0001c	89 45 f8	 mov	 DWORD PTR _dwPlayCount$[ebp], eax

; 129  : 	if (dwPlayCount!=0L) return (WORD)(m_UserInfo.dwDrawCount*10000L/dwPlayCount);

  0001f	83 7d f8 00	 cmp	 DWORD PTR _dwPlayCount$[ebp], 0
  00023	74 14		 je	 SHORT $LN2@GetUserDra
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	69 80 e8 00 00
	00 10 27 00 00	 imul	 eax, DWORD PTR [eax+232], 10000
  00032	33 d2		 xor	 edx, edx
  00034	f7 75 f8	 div	 DWORD PTR _dwPlayCount$[ebp]
  00037	eb 02		 jmp	 SHORT $LN1@GetUserDra
$LN2@GetUserDra:

; 130  : 
; 131  : 	return 0;

  00039	33 c0		 xor	 eax, eax
$LN1@GetUserDra:

; 132  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?GetUserDrawRate@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetUserDrawRate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?GetUserLostRate@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_dwPlayCount$ = -8					; size = 4
_this$ = -4						; size = 4
?GetUserLostRate@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetUserLostRate, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 	//计算输率
; 118  : 	DWORD dwPlayCount=GetUserPlayCount();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0001a	ff d0		 call	 eax
  0001c	89 45 f8	 mov	 DWORD PTR _dwPlayCount$[ebp], eax

; 119  : 	if (dwPlayCount!=0L) return (WORD)(m_UserInfo.dwLostCount*10000L/dwPlayCount);

  0001f	83 7d f8 00	 cmp	 DWORD PTR _dwPlayCount$[ebp], 0
  00023	74 14		 je	 SHORT $LN2@GetUserLos
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	69 80 e4 00 00
	00 10 27 00 00	 imul	 eax, DWORD PTR [eax+228], 10000
  00032	33 d2		 xor	 edx, edx
  00034	f7 75 f8	 div	 DWORD PTR _dwPlayCount$[ebp]
  00037	eb 02		 jmp	 SHORT $LN1@GetUserLos
$LN2@GetUserLos:

; 120  : 
; 121  : 	return 0;

  00039	33 c0		 xor	 eax, eax
$LN1@GetUserLos:

; 122  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?GetUserLostRate@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetUserLostRate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?GetUserWinRate@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_dwPlayCount$ = -8					; size = 4
_this$ = -4						; size = 4
?GetUserWinRate@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetUserWinRate, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 	//计算胜率
; 108  : 	DWORD dwPlayCount=GetUserPlayCount();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 82 ac 00 00
	00		 mov	 eax, DWORD PTR [edx+172]
  0001a	ff d0		 call	 eax
  0001c	89 45 f8	 mov	 DWORD PTR _dwPlayCount$[ebp], eax

; 109  : 	if (dwPlayCount!=0L) return (WORD)(m_UserInfo.dwWinCount*10000L/dwPlayCount);

  0001f	83 7d f8 00	 cmp	 DWORD PTR _dwPlayCount$[ebp], 0
  00023	74 14		 je	 SHORT $LN2@GetUserWin
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	69 80 e0 00 00
	00 10 27 00 00	 imul	 eax, DWORD PTR [eax+224], 10000
  00032	33 d2		 xor	 edx, edx
  00034	f7 75 f8	 div	 DWORD PTR _dwPlayCount$[ebp]
  00037	eb 02		 jmp	 SHORT $LN1@GetUserWin
$LN2@GetUserWin:

; 110  : 
; 111  : 	return 0;

  00039	33 c0		 xor	 eax, eax
$LN1@GetUserWin:

; 112  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?GetUserWinRate@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetUserWinRate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetFrozenedScore@CServerUserItem@@UAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFrozenedScore@CServerUserItem@@UAE_JXZ PROC		; CServerUserItem::GetFrozenedScore, COMDAT
; _this$ = ecx

; 200  : 	virtual SCORE GetFrozenedScore() { return m_lFrozenedScore; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 81 90 02 00
	00		 mov	 eax, DWORD PTR [ecx+656]
  00015	8b 91 94 02 00
	00		 mov	 edx, DWORD PTR [ecx+660]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?GetFrozenedScore@CServerUserItem@@UAE_JXZ ENDP		; CServerUserItem::GetFrozenedScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetTrusteeScore@CServerUserItem@@UAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTrusteeScore@CServerUserItem@@UAE_JXZ PROC		; CServerUserItem::GetTrusteeScore, COMDAT
; _this$ = ecx

; 198  : 	virtual SCORE GetTrusteeScore() { return m_lTrusteeScore; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 81 80 02 00
	00		 mov	 eax, DWORD PTR [ecx+640]
  00015	8b 91 84 02 00
	00		 mov	 edx, DWORD PTR [ecx+644]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?GetTrusteeScore@CServerUserItem@@UAE_JXZ ENDP		; CServerUserItem::GetTrusteeScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserInsure@CServerUserItem@@UAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserInsure@CServerUserItem@@UAE_JXZ PROC		; CServerUserItem::GetUserInsure, COMDAT
; _this$ = ecx

; 193  : 	virtual SCORE GetUserInsure() { return m_UserInfo.bConsumptionType.lInsure; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 81 a8 00 00
	00		 mov	 eax, DWORD PTR [ecx+168]
  00015	8b 91 ac 00 00
	00		 mov	 edx, DWORD PTR [ecx+172]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?GetUserInsure@CServerUserItem@@UAE_JXZ ENDP		; CServerUserItem::GetUserInsure
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserGrade@CServerUserItem@@UAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserGrade@CServerUserItem@@UAE_JXZ PROC		; CServerUserItem::GetUserGrade, COMDAT
; _this$ = ecx

; 191  : 	virtual SCORE GetUserGrade() { return m_UserInfo.bConsumptionType.lGrade; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]
  00015	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?GetUserGrade@CServerUserItem@@UAE_JXZ ENDP		; CServerUserItem::GetUserGrade
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserScore@CServerUserItem@@UAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserScore@CServerUserItem@@UAE_JXZ PROC		; CServerUserItem::GetUserScore, COMDAT
; _this$ = ecx

; 189  : 	virtual SCORE GetUserScore() { return m_UserInfo.bConsumptionType.lScore; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 81 b0 00 00
	00		 mov	 eax, DWORD PTR [ecx+176]
  00015	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?GetUserScore@CServerUserItem@@UAE_JXZ ENDP		; CServerUserItem::GetUserScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetMasterOrder@CServerUserItem@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMasterOrder@CServerUserItem@@UAEEXZ PROC		; CServerUserItem::GetMasterOrder, COMDAT
; _this$ = ecx

; 184  : 	virtual BYTE GetMasterOrder() { return m_UserInfo.cbMasterOrder; } 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 98 00 00
	00		 mov	 al, BYTE PTR [eax+152]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMasterOrder@CServerUserItem@@UAEEXZ ENDP		; CServerUserItem::GetMasterOrder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetMemberOrder@CServerUserItem@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMemberOrder@CServerUserItem@@UAEEXZ PROC		; CServerUserItem::GetMemberOrder, COMDAT
; _this$ = ecx

; 182  : 	virtual BYTE GetMemberOrder() { return m_UserInfo.cbMemberOrder; } 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 97 00 00
	00		 mov	 al, BYTE PTR [eax+151]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMemberOrder@CServerUserItem@@UAEEXZ ENDP		; CServerUserItem::GetMemberOrder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetMasterRight@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMasterRight@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetMasterRight, COMDAT
; _this$ = ecx

; 177  : 	virtual DWORD GetMasterRight() { return m_dwMasterRight; } 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 7c 02 00
	00		 mov	 eax, DWORD PTR [eax+636]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMasterRight@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetMasterRight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserRight@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserRight@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetUserRight, COMDAT
; _this$ = ecx

; 175  : 	virtual DWORD GetUserRight() { return m_dwUserRight; } 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 78 02 00
	00		 mov	 eax, DWORD PTR [eax+632]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetUserRight@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetUserRight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserStatus@CServerUserItem@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserStatus@CServerUserItem@@UAEEXZ PROC		; CServerUserItem::GetUserStatus, COMDAT
; _this$ = ecx

; 170  : 	virtual BYTE GetUserStatus() { return m_UserInfo.cbUserStatus; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 9f 00 00
	00		 mov	 al, BYTE PTR [eax+159]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetUserStatus@CServerUserItem@@UAEEXZ ENDP		; CServerUserItem::GetUserStatus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetChairID@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetChairID@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetChairID, COMDAT
; _this$ = ecx

; 168  : 	virtual WORD GetChairID() { return m_UserInfo.wChairID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 80 9d 00
	00 00		 mov	 ax, WORD PTR [eax+157]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetChairID@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetChairID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetLastTableID@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastTableID@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetLastTableID, COMDAT
; _this$ = ecx

; 166  : 	virtual WORD GetLastTableID() { return m_UserInfo.wLastTableID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 80 9b 00
	00 00		 mov	 ax, WORD PTR [eax+155]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetLastTableID@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetLastTableID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetTableID@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTableID@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetTableID, COMDAT
; _this$ = ecx

; 164  : 	virtual WORD GetTableID() { return m_UserInfo.wTableID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 80 99 00
	00 00		 mov	 ax, WORD PTR [eax+153]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetTableID@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetTableID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetNickName@CServerUserItem@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNickName@CServerUserItem@@UAEPBDXZ PROC		; CServerUserItem::GetNickName, COMDAT
; _this$ = ecx

; 159  : 	virtual LPCTSTR GetNickName() { return m_UserInfo.szNickName; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 14	 add	 eax, 20			; 00000014H
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetNickName@CServerUserItem@@UAEPBDXZ ENDP		; CServerUserItem::GetNickName
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetGameID@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameID@CServerUserItem@@UAEKXZ PROC			; CServerUserItem::GetGameID, COMDAT
; _this$ = ecx

; 157  : 	virtual DWORD GetGameID() { return m_UserInfo.dwGameID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetGameID@CServerUserItem@@UAEKXZ ENDP			; CServerUserItem::GetGameID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserID@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserID@CServerUserItem@@UAEKXZ PROC			; CServerUserItem::GetUserID, COMDAT
; _this$ = ecx

; 155  : 	virtual DWORD GetUserID() { return m_UserInfo.dwUserID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetUserID@CServerUserItem@@UAEKXZ ENDP			; CServerUserItem::GetUserID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetGender@CServerUserItem@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGender@CServerUserItem@@UAEEXZ PROC			; CServerUserItem::GetGender, COMDAT
; _this$ = ecx

; 153  : 	virtual BYTE GetGender() { return m_UserInfo.cbGender; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 80 96 00 00
	00		 mov	 al, BYTE PTR [eax+150]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetGender@CServerUserItem@@UAEEXZ ENDP			; CServerUserItem::GetGender
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetGameoverData@CServerUserItem@@UAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGameoverData@CServerUserItem@@UAEPAEXZ PROC		; CServerUserItem::GetGameoverData, COMDAT
; _this$ = ecx

; 148  : 	virtual BYTE*	GetGameoverData(){ return m_byGameoverData; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 42 07 00 00	 add	 eax, 1858		; 00000742H
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetGameoverData@CServerUserItem@@UAEPAEXZ ENDP		; CServerUserItem::GetGameoverData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetGameoverData@CServerUserItem@@UAEXPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_byGameoverData$ = 8					; size = 4
?SetGameoverData@CServerUserItem@@UAEXPAE@Z PROC	; CServerUserItem::SetGameoverData, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 	memcpy(m_byGameoverData, byGameoverData, sizeof(m_byGameoverData));

  0000c	6a 32		 push	 50			; 00000032H
  0000e	8b 45 08	 mov	 eax, DWORD PTR _byGameoverData$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	81 c1 42 07 00
	00		 add	 ecx, 1858		; 00000742H
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _memcpy
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 308  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetGameoverData@CServerUserItem@@UAEXPAE@Z ENDP	; CServerUserItem::SetGameoverData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetVideoNumber@CServerUserItem@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVideoNumber@CServerUserItem@@UAEPADXZ PROC		; CServerUserItem::GetVideoNumber, COMDAT
; _this$ = ecx

; 145  : 	virtual TCHAR*	GetVideoNumber(){ return m_szVideoNumber;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 2c 07 00 00	 add	 eax, 1836		; 0000072cH
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetVideoNumber@CServerUserItem@@UAEPADXZ ENDP		; CServerUserItem::GetVideoNumber
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetVideoNumber@CServerUserItem@@UAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_szVideoNumber$ = 8					; size = 4
?SetVideoNumber@CServerUserItem@@UAEXPAD@Z PROC		; CServerUserItem::SetVideoNumber, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 	memcpy(m_szVideoNumber,szVideoNumber,sizeof(m_szVideoNumber));

  0000c	6a 16		 push	 22			; 00000016H
  0000e	8b 45 08	 mov	 eax, DWORD PTR _szVideoNumber$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	81 c1 2c 07 00
	00		 add	 ecx, 1836		; 0000072cH
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _memcpy
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 303  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetVideoNumber@CServerUserItem@@UAEXPAD@Z ENDP		; CServerUserItem::SetVideoNumber
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?WriteUserGameData@CServerUserItem@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WriteUserGameData@CServerUserItem@@UAEXXZ PROC		; CServerUserItem::WriteUserGameData, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	//发送状态
; 234  : 	ASSERT(m_pIServerUserItemSink!=NULL);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  00016	75 19		 jne	 SHORT $LN4@WriteUserG
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??WriteUserGameData@CServerUserItem@@UAEXXZ@4JA
  0001e	83 c1 02	 add	 ecx, 2
  00021	51		 push	 ecx
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN4@WriteUserG
  00030	cc		 int	 3
$LN4@WriteUserG:

; 235  : 	if (m_pIServerUserItemSink!=NULL) m_pIServerUserItemSink->OnEventUserItemGameData(this,0);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 b8 20 07 00
	00 00		 cmp	 DWORD PTR [eax+1824], 0
  0003b	74 1f		 je	 SHORT $LN1@WriteUserG
  0003d	6a 00		 push	 0
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 91 20 07 00
	00		 mov	 edx, DWORD PTR [ecx+1824]
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 12		 mov	 edx, DWORD PTR [edx]
  00051	8b 88 20 07 00
	00		 mov	 ecx, DWORD PTR [eax+1824]
  00057	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0005a	ff d0		 call	 eax
$LN1@WriteUserG:

; 236  : 
; 237  : 	return;
; 238  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?WriteUserGameData@CServerUserItem@@UAEXXZ ENDP		; CServerUserItem::WriteUserGameData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z
_TEXT	SEGMENT
tv136 = -96						; size = 4
tv135 = -96						; size = 4
$T2 = -92						; size = 4
_pGameDataItem$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_nKey$ = 8						; size = 4
_pszValue$ = 12						; size = 4
_nMaxCount$ = 16					; size = 4
?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z PROC	; CServerUserItem::SetUserGameData, COMDAT
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 50	 sub	 esp, 80			; 00000050H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 201  : 	ASSERT(nMaxCount<=LEN_GAME_ITEM);

  0002f	83 7d 10 40	 cmp	 DWORD PTR _nMaxCount$[ebp], 64 ; 00000040H
  00033	7e 18		 jle	 SHORT $LN7@SetUserGam
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXHPBDH@Z@4JA
  0003a	83 c0 01	 add	 eax, 1
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00043	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00048	85 c0		 test	 eax, eax
  0004a	74 01		 je	 SHORT $LN7@SetUserGam
  0004c	cc		 int	 3
$LN7@SetUserGam:

; 202  : 	if (nMaxCount>LEN_GAME_ITEM) return;

  0004d	83 7d 10 40	 cmp	 DWORD PTR _nMaxCount$[ebp], 64 ; 00000040H
  00051	7e 05		 jle	 SHORT $LN2@SetUserGam
  00053	e9 d2 00 00 00	 jmp	 $LN1@SetUserGam
$LN2@SetUserGam:

; 203  : 
; 204  : 	tagGameDataItem *pGameDataItem=NULL;

  00058	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 205  : 	m_UserGameDataMap.Lookup(nKey,pGameDataItem);

  0005f	8d 45 e8	 lea	 eax, DWORD PTR _pGameDataItem$[ebp]
  00062	50		 push	 eax
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _nKey$[ebp]
  00066	51		 push	 ecx
  00067	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  00070	e8 00 00 00 00	 call	 ?Lookup@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEHHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Lookup

; 206  : 
; 207  : 	if (pGameDataItem!=NULL)

  00075	83 7d e8 00	 cmp	 DWORD PTR _pGameDataItem$[ebp], 0
  00079	74 1a		 je	 SHORT $LN3@SetUserGam

; 208  : 	{
; 209  : 		lstrcpyn(pGameDataItem->szValue,pszValue,nMaxCount);

  0007b	8b 45 10	 mov	 eax, DWORD PTR _nMaxCount$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _pszValue$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 e8	 mov	 edx, DWORD PTR _pGameDataItem$[ebp]
  00086	83 c2 04	 add	 edx, 4
  00089	52		 push	 edx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 210  : 	}
; 211  : 	else

  00090	e9 85 00 00 00	 jmp	 $LN9@SetUserGam
$LN3@SetUserGam:

; 212  : 	{
; 213  : 		try

  00095	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 214  : 		{
; 215  : 			pGameDataItem=new tagGameDataItem;

  0009c	6a 44		 push	 68			; 00000044H
  0009e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a3	83 c4 04	 add	 esp, 4
  000a6	89 45 a0	 mov	 DWORD PTR tv135[ebp], eax
  000a9	8b 45 a0	 mov	 eax, DWORD PTR tv135[ebp]
  000ac	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000af	8b 4d a4	 mov	 ecx, DWORD PTR $T2[ebp]
  000b2	89 4d e8	 mov	 DWORD PTR _pGameDataItem$[ebp], ecx

; 216  : 
; 217  : 			pGameDataItem->nKey=nKey;

  000b5	8b 45 e8	 mov	 eax, DWORD PTR _pGameDataItem$[ebp]
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _nKey$[ebp]
  000bb	89 08		 mov	 DWORD PTR [eax], ecx

; 218  : 			lstrcpyn(pGameDataItem->szValue,pszValue,nMaxCount);

  000bd	8b 45 10	 mov	 eax, DWORD PTR _nMaxCount$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _pszValue$[ebp]
  000c4	51		 push	 ecx
  000c5	8b 55 e8	 mov	 edx, DWORD PTR _pGameDataItem$[ebp]
  000c8	83 c2 04	 add	 edx, 4
  000cb	52		 push	 edx
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 219  : 
; 220  : 			m_UserGameDataMap[nKey]=pGameDataItem;

  000d2	8b 45 08	 mov	 eax, DWORD PTR _nKey$[ebp]
  000d5	50		 push	 eax
  000d6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  000df	e8 00 00 00 00	 call	 ??A?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEAAPAUtagGameDataItem@@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::operator[]
  000e4	89 45 a0	 mov	 DWORD PTR tv136[ebp], eax
  000e7	8b 4d a0	 mov	 ecx, DWORD PTR tv136[ebp]
  000ea	8b 55 e8	 mov	 edx, DWORD PTR _pGameDataItem$[ebp]
  000ed	89 11		 mov	 DWORD PTR [ecx], edx

; 221  : 		}

  000ef	eb 29		 jmp	 SHORT $LN9@SetUserGam
__catch$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z$0:

; 222  : 		catch (...)
; 223  : 		{
; 224  : 			ASSERT(FALSE);

  000f1	33 c0		 xor	 eax, eax
  000f3	75 19		 jne	 SHORT $LN8@SetUserGam
  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXHPBDH@Z@4JA
  000fb	83 c1 18	 add	 ecx, 24			; 00000018H
  000fe	51		 push	 ecx
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00104	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00109	85 c0		 test	 eax, eax
  0010b	74 01		 je	 SHORT $LN8@SetUserGam
  0010d	cc		 int	 3
$LN8@SetUserGam:

; 225  : 			return;

  0010e	b8 00 00 00 00	 mov	 eax, $LN12@SetUserGam
  00113	c3		 ret	 0

; 226  : 		}

  00114	b8 00 00 00 00	 mov	 eax, $LN9@SetUserGam
  00119	c3		 ret	 0
$LN9@SetUserGam:
  0011a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00121	eb 07		 jmp	 SHORT $LN1@SetUserGam
$LN12@SetUserGam:
  00123	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN1@SetUserGam:

; 227  : 	}
; 228  : }

  0012a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00134	59		 pop	 ecx
  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetUserGameData@CServerUserItem@@UAEXHPBDH@Z ENDP	; CServerUserItem::SetUserGameData
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?SetUserGameData@CServerUserItem@@UAEXPBDH@Z
_TEXT	SEGMENT
tv146 = -93						; size = 1
tv150 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pszValue$ = 8						; size = 4
_nMaxCount$ = 12					; size = 4
?SetUserGameData@CServerUserItem@@UAEXPBDH@Z PROC	; CServerUserItem::SetUserGameData, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 181  : 	ASSERT(nMaxCount<=LEN_GAME_DATA);

  0002b	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nMaxCount$[ebp], 1024 ; 00000400H
  00032	7e 18		 jle	 SHORT $LN5@SetUserGam
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??SetUserGameData@CServerUserItem@@UAEXPBDH@Z@4JA
  00039	83 c0 01	 add	 eax, 1
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00042	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00047	85 c0		 test	 eax, eax
  00049	74 01		 je	 SHORT $LN5@SetUserGam
  0004b	cc		 int	 3
$LN5@SetUserGam:

; 182  : 	if (nMaxCount>LEN_GAME_DATA) return;

  0004c	81 7d 0c 00 04
	00 00		 cmp	 DWORD PTR _nMaxCount$[ebp], 1024 ; 00000400H
  00053	7e 02		 jle	 SHORT $LN2@SetUserGam
  00055	eb 7f		 jmp	 SHORT $LN1@SetUserGam
$LN2@SetUserGam:

; 183  : 
; 184  : 	//有效性判断
; 185  : 	if (IsValidGameData(pszValue,g_szGameDataSpe)==false)

  00057	51		 push	 ecx
  00058	8b cc		 mov	 ecx, esp
  0005a	89 65 ac	 mov	 DWORD PTR $T3[ebp], esp
  0005d	68 00 00 00 00	 push	 OFFSET ?g_szGameDataSpe@@3QBDB
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00068	89 45 a4	 mov	 DWORD PTR tv150[ebp], eax
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	51		 push	 ecx
  00073	8b cc		 mov	 ecx, esp
  00075	89 65 a8	 mov	 DWORD PTR $T2[ebp], esp
  00078	8b 45 08	 mov	 eax, DWORD PTR _pszValue$[ebp]
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?IsValidGameData@CServerUserItem@@AAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ; CServerUserItem::IsValidGameData
  00091	88 45 a3	 mov	 BYTE PTR tv146[ebp], al
  00094	0f b6 4d a3	 movzx	 ecx, BYTE PTR tv146[ebp]
  00098	85 c9		 test	 ecx, ecx
  0009a	75 02		 jne	 SHORT $LN3@SetUserGam

; 186  : 		return;

  0009c	eb 38		 jmp	 SHORT $LN1@SetUserGam
$LN3@SetUserGam:

; 187  : 
; 188  : 	//覆盖游戏数据
; 189  : 	ZeroMemory(m_szUserGameData,sizeof(m_szUserGameData));

  0009e	68 00 04 00 00	 push	 1024			; 00000400H
  000a3	6a 00		 push	 0
  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	05 d8 02 00 00	 add	 eax, 728		; 000002d8H
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 _memset
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 190  : 	lstrcpyn(m_szUserGameData,pszValue,nMaxCount);

  000b6	8b 45 0c	 mov	 eax, DWORD PTR _nMaxCount$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _pszValue$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c1	81 c2 d8 02 00
	00		 add	 edx, 728		; 000002d8H
  000c7	52		 push	 edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 191  : 
; 192  : 	//重新构造Map
; 193  : 	InitUserGameDataMap();

  000ce	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	e8 00 00 00 00	 call	 ?InitUserGameDataMap@CServerUserItem@@AAEXXZ ; CServerUserItem::InitUserGameDataMap
$LN1@SetUserGam:

; 194  : 
; 195  : 	return;
; 196  : }

  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z$0:
  00000	8b 4d ac	 mov	 ecx, DWORD PTR $T3[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetUserGameData@CServerUserItem@@UAEXPBDH@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetUserGameData@CServerUserItem@@UAEXPBDH@Z ENDP	; CServerUserItem::SetUserGameData
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?GetUserGameData@CServerUserItem@@UAEXHPADH@Z
_TEXT	SEGMENT
_pGameDataItem$ = -8					; size = 4
_this$ = -4						; size = 4
_nKey$ = 8						; size = 4
_pszValue$ = 12						; size = 4
_nMaxCount$ = 16					; size = 4
?GetUserGameData@CServerUserItem@@UAEXHPADH@Z PROC	; CServerUserItem::GetUserGameData, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 	ASSERT(nMaxCount<=LEN_GAME_ITEM);

  0000c	83 7d 10 40	 cmp	 DWORD PTR _nMaxCount$[ebp], 64 ; 00000040H
  00010	7e 18		 jle	 SHORT $LN4@GetUserGam
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetUserGameData@CServerUserItem@@UAEXHPADH@Z@4JA
  00017	83 c0 01	 add	 eax, 1
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00020	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00025	85 c0		 test	 eax, eax
  00027	74 01		 je	 SHORT $LN4@GetUserGam
  00029	cc		 int	 3
$LN4@GetUserGam:

; 171  : 	if (nMaxCount>LEN_GAME_ITEM) return;

  0002a	83 7d 10 40	 cmp	 DWORD PTR _nMaxCount$[ebp], 64 ; 00000040H
  0002e	7e 02		 jle	 SHORT $LN2@GetUserGam
  00030	eb 32		 jmp	 SHORT $LN1@GetUserGam
$LN2@GetUserGam:

; 172  : 
; 173  : 	tagGameDataItem *pGameDataItem=NULL;

  00032	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 174  : 	m_UserGameDataMap.Lookup(nKey,pGameDataItem);

  00039	8d 45 f8	 lea	 eax, DWORD PTR _pGameDataItem$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _nKey$[ebp]
  00040	51		 push	 ecx
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  0004a	e8 00 00 00 00	 call	 ?Lookup@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEHHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Lookup

; 175  : 	lstrcpyn(pszValue,pGameDataItem->szValue,nMaxCount);

  0004f	8b 45 10	 mov	 eax, DWORD PTR _nMaxCount$[ebp]
  00052	50		 push	 eax
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _pGameDataItem$[ebp]
  00056	83 c1 04	 add	 ecx, 4
  00059	51		 push	 ecx
  0005a	8b 55 0c	 mov	 edx, DWORD PTR _pszValue$[ebp]
  0005d	52		 push	 edx
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
$LN1@GetUserGam:

; 176  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
?GetUserGameData@CServerUserItem@@UAEXHPADH@Z ENDP	; CServerUserItem::GetUserGameData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?GetUserGameData@CServerUserItem@@UAEPBDXZ
_TEXT	SEGMENT
$T2 = -100						; size = 4
_Position$ = -32					; size = 4
_pGameDataItem$ = -28					; size = 4
_wKey$ = -24						; size = 4
_strMainItem$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetUserGameData@CServerUserItem@@UAEPBDXZ PROC		; CServerUserItem::GetUserGameData, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetUserGameData@CServerUserItem@@UAEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 147  : 	CString strMainItem=TEXT("");

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00030	8d 4d ec	 lea	 ecx, DWORD PTR _strMainItem$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 148  : 
; 149  : 	//便利数据
; 150  : 	INT wKey=0;

  00040	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _wKey$[ebp], 0

; 151  : 	tagGameDataItem * pGameDataItem=NULL;

  00047	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 152  : 	POSITION Position=m_UserGameDataMap.GetStartPosition();

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  00057	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition
  0005c	89 45 e0	 mov	 DWORD PTR _Position$[ebp], eax
$LN2@GetUserGam:

; 153  : 	while (Position!=NULL)

  0005f	83 7d e0 00	 cmp	 DWORD PTR _Position$[ebp], 0
  00063	74 41		 je	 SHORT $LN3@GetUserGam

; 154  : 	{
; 155  : 		m_UserGameDataMap.GetNextAssoc(Position,wKey,pGameDataItem);

  00065	8d 45 e4	 lea	 eax, DWORD PTR _pGameDataItem$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR _wKey$[ebp]
  0006c	51		 push	 ecx
  0006d	8d 55 e0	 lea	 edx, DWORD PTR _Position$[ebp]
  00070	52		 push	 edx
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  0007a	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc

; 156  : 		if (pGameDataItem!=NULL)

  0007f	83 7d e4 00	 cmp	 DWORD PTR _pGameDataItem$[ebp], 0
  00083	74 1f		 je	 SHORT $LN4@GetUserGam

; 157  : 		{
; 158  : 			strMainItem.AppendFormat(TEXT("%d:%s;"),pGameDataItem->nKey,pGameDataItem->szValue);

  00085	8b 45 e4	 mov	 eax, DWORD PTR _pGameDataItem$[ebp]
  00088	83 c0 04	 add	 eax, 4
  0008b	50		 push	 eax
  0008c	8b 4d e4	 mov	 ecx, DWORD PTR _pGameDataItem$[ebp]
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_06HKALLNOM@?$CFd?3?$CFs?$DL@
  00097	8d 45 ec	 lea	 eax, DWORD PTR _strMainItem$[ebp]
  0009a	50		 push	 eax
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AppendFormat@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@GetUserGam:

; 159  : 		}
; 160  : 	}

  000a4	eb b9		 jmp	 SHORT $LN2@GetUserGam
$LN3@GetUserGam:

; 161  : 
; 162  : 	lstrcpyn(m_szUserGameData,strMainItem,strMainItem.GetLength()+1);

  000a6	8d 4d ec	 lea	 ecx, DWORD PTR _strMainItem$[ebp]
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  000af	83 c0 01	 add	 eax, 1
  000b2	50		 push	 eax
  000b3	8d 4d ec	 lea	 ecx, DWORD PTR _strMainItem$[ebp]
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000bc	50		 push	 eax
  000bd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	05 d8 02 00 00	 add	 eax, 728		; 000002d8H
  000c5	50		 push	 eax
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12

; 163  : 
; 164  : 	return m_szUserGameData;

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	05 d8 02 00 00	 add	 eax, 728		; 000002d8H
  000d4	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  000d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000de	8d 4d ec	 lea	 ecx, DWORD PTR _strMainItem$[ebp]
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000e7	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]

; 165  : }

  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f4	59		 pop	 ecx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUserGameData@CServerUserItem@@UAEPBDXZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _strMainItem$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?GetUserGameData@CServerUserItem@@UAEPBDXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetUserGameData@CServerUserItem@@UAEPBDXZ
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetUserGameData@CServerUserItem@@UAEPBDXZ ENDP		; CServerUserItem::GetUserGameData
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetTimeInfo@CServerUserItem@@UAEPAUtagTimeInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTimeInfo@CServerUserItem@@UAEPAUtagTimeInfo@@XZ PROC ; CServerUserItem::GetTimeInfo, COMDAT
; _this$ = ecx

; 129  : 	virtual tagTimeInfo * GetTimeInfo() { return &m_UserInfo.TimerInfo; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 08 01 00 00	 add	 eax, 264		; 00000108H
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetTimeInfo@CServerUserItem@@UAEPAUtagTimeInfo@@XZ ENDP ; CServerUserItem::GetTimeInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserProperty@CServerUserItem@@UAEPAUtagUserProperty@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserProperty@CServerUserItem@@UAEPAUtagUserProperty@@XZ PROC ; CServerUserItem::GetUserProperty, COMDAT
; _this$ = ecx

; 127  : 	virtual tagUserProperty * GetUserProperty() { return &m_UserProperty; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 b0 01 00 00	 add	 eax, 432		; 000001b0H
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetUserProperty@CServerUserItem@@UAEPAUtagUserProperty@@XZ ENDP ; CServerUserItem::GetUserProperty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetFormerScore@CServerUserItem@@UAEPAUtagUserScore@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFormerScore@CServerUserItem@@UAEPAUtagUserScore@@XZ PROC ; CServerUserItem::GetFormerScore, COMDAT
; _this$ = ecx

; 125  : 	virtual tagUserScore * GetFormerScore() { return &m_ScoreFormer;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 4c 01 00 00	 add	 eax, 332		; 0000014cH
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetFormerScore@CServerUserItem@@UAEPAUtagUserScore@@XZ ENDP ; CServerUserItem::GetFormerScore
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserRule@CServerUserItem@@UAEPAUtagUserRule@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserRule@CServerUserItem@@UAEPAUtagUserRule@@XZ PROC ; CServerUserItem::GetUserRule, COMDAT
; _this$ = ecx

; 123  : 	virtual tagUserRule * GetUserRule() { return &m_UserRule; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 18 01 00 00	 add	 eax, 280		; 00000118H
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetUserRule@CServerUserItem@@UAEPAUtagUserRule@@XZ ENDP ; CServerUserItem::GetUserRule
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetUserInfo@CServerUserItem@@UAEPAUtagUserInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserInfo@CServerUserItem@@UAEPAUtagUserInfo@@XZ PROC ; CServerUserItem::GetUserInfo, COMDAT
; _this$ = ecx

; 121  : 	virtual tagUserInfo * GetUserInfo() { return &m_UserInfo; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetUserInfo@CServerUserItem@@UAEPAUtagUserInfo@@XZ ENDP ; CServerUserItem::GetUserInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetInoutIndex@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInoutIndex@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetInoutIndex, COMDAT
; _this$ = ecx

; 116  : 	virtual DWORD GetInoutIndex() { return m_dwInoutIndex; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a0 02 00
	00		 mov	 eax, DWORD PTR [eax+672]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetInoutIndex@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetInoutIndex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetLogonTime@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLogonTime@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetLogonTime, COMDAT
; _this$ = ecx

; 114  : 	virtual DWORD GetLogonTime() { return m_dwLogonTime; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 9c 02 00
	00		 mov	 eax, DWORD PTR [eax+668]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetLogonTime@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetLogonTime
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetDBQuestID@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?GetDBQuestID@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetDBQuestID, COMDAT
; _this$ = ecx

; 112  : 	virtual DWORD GetDBQuestID() { return m_dwDBQuestID++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 98 02 00
	00		 mov	 ecx, DWORD PTR [eax+664]
  00015	89 4d b8	 mov	 DWORD PTR tv68[ebp], ecx
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 82 98 02 00
	00		 mov	 eax, DWORD PTR [edx+664]
  00021	83 c0 01	 add	 eax, 1
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	89 81 98 02 00
	00		 mov	 DWORD PTR [ecx+664], eax
  0002d	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?GetDBQuestID@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetDBQuestID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetMachineID@CServerUserItem@@UAEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMachineID@CServerUserItem@@UAEPBDXZ PROC		; CServerUserItem::GetMachineID, COMDAT
; _this$ = ecx

; 107  : 	virtual LPCTSTR GetMachineID() { return m_szMachineID; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	05 fc 06 00 00	 add	 eax, 1788		; 000006fcH
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetMachineID@CServerUserItem@@UAEPBDXZ ENDP		; CServerUserItem::GetMachineID
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetClientAddr@CServerUserItem@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClientAddr@CServerUserItem@@UAEKXZ PROC		; CServerUserItem::GetClientAddr, COMDAT
; _this$ = ecx

; 105  : 	virtual DWORD GetClientAddr() { return m_dwClientAddr; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [eax+1784]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetClientAddr@CServerUserItem@@UAEKXZ ENDP		; CServerUserItem::GetClientAddr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?GetBindIndex@CServerUserItem@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBindIndex@CServerUserItem@@UAEGXZ PROC		; CServerUserItem::GetBindIndex, COMDAT
; _this$ = ecx

; 103  : 	virtual WORD GetBindIndex() { return m_wBindIndex; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 80 f4 06
	00 00		 mov	 ax, WORD PTR [eax+1780]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetBindIndex@CServerUserItem@@UAEGXZ ENDP		; CServerUserItem::GetBindIndex
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?QueryInterface@CServerUserItem@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
tv92 = -72						; size = 4
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CServerUserItem@@UAEPAXABU_GUID@@K@Z PROC ; CServerUserItem::QueryInterface, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 	QUERYINTERFACE(IServerUserItem,Guid,dwQueryVer);

  0000c	68 00 00 00 00	 push	 OFFSET ?IID_IServerUserItem@@3U_GUID@@B
  00011	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _==
  0001a	83 c4 08	 add	 esp, 8
  0001d	0f b6 c8	 movzx	 ecx, al
  00020	85 c9		 test	 ecx, ecx
  00022	74 20		 je	 SHORT $LN2@QueryInter
  00024	68 00 01 01 06	 push	 100729088		; 06010100H
  00029	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00032	83 c4 08	 add	 esp, 8
  00035	0f b6 c8	 movzx	 ecx, al
  00038	85 c9		 test	 ecx, ecx
  0003a	74 08		 je	 SHORT $LN2@QueryInter
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	e9 84 00 00 00	 jmp	 $LN1@QueryInter
$LN2@QueryInter:

; 99   : 	QUERYINTERFACE(IServerUserService,Guid,dwQueryVer);

  00044	68 00 00 00 00	 push	 OFFSET ?IID_IServerUserService@@3U_GUID@@B
  00049	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _==
  00052	83 c4 08	 add	 esp, 8
  00055	0f b6 c8	 movzx	 ecx, al
  00058	85 c9		 test	 ecx, ecx
  0005a	74 35		 je	 SHORT $LN3@QueryInter
  0005c	68 00 01 01 06	 push	 100729088		; 06010100H
  00061	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  0006a	83 c4 08	 add	 esp, 8
  0006d	0f b6 c8	 movzx	 ecx, al
  00070	85 c9		 test	 ecx, ecx
  00072	74 1d		 je	 SHORT $LN3@QueryInter
  00074	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00078	74 0b		 je	 SHORT $LN6@QueryInter
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	83 c0 04	 add	 eax, 4
  00080	89 45 b8	 mov	 DWORD PTR tv92[ebp], eax
  00083	eb 07		 jmp	 SHORT $LN7@QueryInter
$LN6@QueryInter:
  00085	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN7@QueryInter:
  0008c	8b 45 b8	 mov	 eax, DWORD PTR tv92[ebp]
  0008f	eb 37		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:

; 100  : 	QUERYINTERFACE_IUNKNOWNEX(IServerUserItem,Guid,dwQueryVer);

  00091	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00096	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _==
  0009f	83 c4 08	 add	 esp, 8
  000a2	0f b6 c8	 movzx	 ecx, al
  000a5	85 c9		 test	 ecx, ecx
  000a7	74 1d		 je	 SHORT $LN4@QueryInter
  000a9	68 00 01 01 06	 push	 100729088		; 06010100H
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  000b7	83 c4 08	 add	 esp, 8
  000ba	0f b6 c8	 movzx	 ecx, al
  000bd	85 c9		 test	 ecx, ecx
  000bf	74 05		 je	 SHORT $LN4@QueryInter
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN4@QueryInter:

; 101  : 	return NULL;

  000c6	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 102  : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 08 00	 ret	 8
?QueryInterface@CServerUserItem@@UAEPAXABU_GUID@@K@Z ENDP ; CServerUserItem::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.h
;	COMDAT ?Release@CServerUserItem@@UAEXXZ
_TEXT	SEGMENT
tv70 = -80						; size = 4
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?Release@CServerUserItem@@UAEXXZ PROC			; CServerUserItem::Release, COMDAT
; _this$ = ecx

; 96   : 	virtual VOID Release() { delete this; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00012	8b 4d b4	 mov	 ecx, DWORD PTR $T1[ebp]
  00015	89 4d b8	 mov	 DWORD PTR $T2[ebp], ecx
  00018	83 7d b8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0001c	74 17		 je	 SHORT $LN3@Release
  0001e	6a 01		 push	 1
  00020	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  00023	8b 02		 mov	 eax, DWORD PTR [edx]
  00025	8b 4d b8	 mov	 ecx, DWORD PTR $T2[ebp]
  00028	8b 90 34 01 00
	00		 mov	 edx, DWORD PTR [eax+308]
  0002e	ff d2		 call	 edx
  00030	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  00033	eb 07		 jmp	 SHORT $LN1@Release
$LN3@Release:
  00035	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN1@Release:
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?Release@CServerUserItem@@UAEXXZ ENDP			; CServerUserItem::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ??1CServerUserItem@@MAE@XZ
_TEXT	SEGMENT
$T2 = -100						; size = 4
_Position$ = -32					; size = 4
_pGameDataItem$ = -28					; size = 4
_wKey$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CServerUserItem@@MAE@XZ PROC				; CServerUserItem::~CServerUserItem, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CServerUserItem@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 54	 sub	 esp, 84			; 00000054H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CServerUserItem@@6BIServerUserItem@@@
  00038	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CServerUserItem@@6BIServerUserService@@@
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 83   : 	//清空数据
; 84   : 	INT wKey=0;

  00049	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _wKey$[ebp], 0

; 85   : 	tagGameDataItem * pGameDataItem=NULL;

  00050	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 86   : 	POSITION Position=m_UserGameDataMap.GetStartPosition();

  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  00060	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition
  00065	89 45 e0	 mov	 DWORD PTR _Position$[ebp], eax
$LN2@CServerUse:

; 87   : 	while (Position!=NULL)

  00068	83 7d e0 00	 cmp	 DWORD PTR _Position$[ebp], 0
  0006c	74 70		 je	 SHORT $LN3@CServerUse

; 88   : 	{
; 89   : 		m_UserGameDataMap.GetNextAssoc(Position,wKey,pGameDataItem);

  0006e	8d 45 e4	 lea	 eax, DWORD PTR _pGameDataItem$[ebp]
  00071	50		 push	 eax
  00072	8d 4d e8	 lea	 ecx, DWORD PTR _wKey$[ebp]
  00075	51		 push	 ecx
  00076	8d 55 e0	 lea	 edx, DWORD PTR _Position$[ebp]
  00079	52		 push	 edx
  0007a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  00083	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc

; 90   : 		SafeDelete(pGameDataItem);

  00088	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0008c	8b 45 e4	 mov	 eax, DWORD PTR _pGameDataItem$[ebp]
  0008f	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  00092	6a 44		 push	 68			; 00000044H
  00094	8b 4d 9c	 mov	 ecx, DWORD PTR $T2[ebp]
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009d	83 c4 08	 add	 esp, 8
  000a0	eb 23		 jmp	 SHORT $LN7@CServerUse
__catch$??1CServerUserItem@@MAE@XZ$0:
  000a2	33 c0		 xor	 eax, eax
  000a4	75 19		 jne	 SHORT $LN6@CServerUse
  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CServerUserItem@@MAE@XZ@4JA
  000ac	83 c1 08	 add	 ecx, 8
  000af	51		 push	 ecx
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OOHJOGHE@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000b5	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ba	85 c0		 test	 eax, eax
  000bc	74 01		 je	 SHORT $LN6@CServerUse
  000be	cc		 int	 3
$LN6@CServerUse:
  000bf	b8 00 00 00 00	 mov	 eax, $LN11@CServerUse
  000c4	c3		 ret	 0
$LN7@CServerUse:
  000c5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000cc	eb 07		 jmp	 SHORT __tryend$??1CServerUserItem@@MAE@XZ$1
$LN11@CServerUse:
  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
__tryend$??1CServerUserItem@@MAE@XZ$1:
  000d5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pGameDataItem$[ebp], 0

; 91   : 	}

  000dc	eb 8a		 jmp	 SHORT $LN2@CServerUse
$LN3@CServerUse:

; 92   : 	m_UserGameDataMap.RemoveAll();

  000de	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  000e7	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::RemoveAll

; 93   : }

  000ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000f3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  000fc	e8 00 00 00 00	 call	 ??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::~CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CServerUserItem@@MAE@XZ$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  00009	e9 00 00 00 00	 jmp	 ??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::~CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
__ehhandler$??1CServerUserItem@@MAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CServerUserItem@@MAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CServerUserItem@@MAE@XZ ENDP				; CServerUserItem::~CServerUserItem
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ??0CServerUserItem@@IAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CServerUserItem@@IAE@XZ PROC				; CServerUserItem::CServerUserItem, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CServerUserItem@@IAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0IServerUserItem@@QAE@XZ
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	83 c1 04	 add	 ecx, 4
  00039	e8 00 00 00 00	 call	 ??0IServerUserService@@QAE@XZ
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CServerUserItem@@6BIServerUserItem@@@
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CServerUserItem@@6BIServerUserService@@@
  00051	6a 0a		 push	 10			; 0000000aH
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  0005c	e8 00 00 00 00	 call	 ??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 12   : 	//附加变量
; 13   : 	m_dwUserRight=0L;

  00068	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 80 78 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+632], 0

; 14   : 	m_dwMasterRight=0L;

  00075	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 80 7c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+636], 0

; 15   : 
; 16   : 	//托管变量
; 17   : 	m_lTrusteeScore=0L;

  00082	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00085	c7 80 80 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+640], 0
  0008f	c7 80 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+644], 0

; 18   : 	m_lRestrictScore=0L;

  00099	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	c7 80 88 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+648], 0
  000a6	c7 80 8c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+652], 0

; 19   : 	m_lFrozenedScore=0L;

  000b0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	c7 80 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+656], 0
  000bd	c7 80 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+660], 0

; 20   : 	m_lFrozenedScore=0L;

  000c7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 80 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+656], 0
  000d4	c7 80 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+660], 0

; 21   : 
; 22   : 	//登录信息
; 23   : 	m_dwDBQuestID=0L;

  000de	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	c7 80 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+664], 0

; 24   : 	m_dwLogonTime=0L;

  000eb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	c7 80 9c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+668], 0

; 25   : 	m_dwInoutIndex=INVALID_DWORD;

  000f8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fb	c7 80 a0 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+672], -1

; 26   : 
; 27   : 	//客户类型
; 28   : 	m_bMobileUser=false;

  00105	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00108	c6 80 a4 02 00
	00 00		 mov	 BYTE PTR [eax+676], 0

; 29   : 	m_bAndroidUser=false;

  0010f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00112	c6 80 a5 02 00
	00 00		 mov	 BYTE PTR [eax+677], 0

; 30   : 
; 31   : 	//组件接口
; 32   : 	m_pIServerUserItemSink=NULL;

  00119	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	c7 80 20 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1824], 0

; 33   : 	m_pIMatchUserItemSink=NULL;

  00126	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00129	c7 80 24 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1828], 0

; 34   : 
; 35   : 	//系统属性
; 36   : 	m_wBindIndex=INVALID_WORD;

  00133	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00138	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	66 89 81 f4 06
	00 00		 mov	 WORD PTR [ecx+1780], ax

; 37   : 	m_dwClientAddr=INADDR_NONE;

  00142	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00145	c7 80 f8 06 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+1784], -1

; 38   : 	ZeroMemory(m_szMachineID,sizeof(m_szMachineID));

  0014f	6a 21		 push	 33			; 00000021H
  00151	6a 00		 push	 0
  00153	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00156	05 fc 06 00 00	 add	 eax, 1788		; 000006fcH
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _memset
  00161	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   : 	memset(m_byGameoverData, 0, sizeof(m_byGameoverData));

  00164	6a 32		 push	 50			; 00000032H
  00166	6a 00		 push	 0
  00168	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0016b	05 42 07 00 00	 add	 eax, 1858		; 00000742H
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _memset
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 40   : 
; 41   : 	//比赛信息
; 42   : 	m_dwSignUpTime=0;

  00179	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0017c	c7 80 a8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+680], 0

; 43   : 	m_cbMatchStatus=0;

  00186	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00189	c6 80 ac 02 00
	00 00		 mov	 BYTE PTR [eax+684], 0

; 44   : 	m_pMatchData=NULL;

  00190	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00193	c7 80 b0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+688], 0

; 45   : 
; 46   : 	//辅助变量
; 47   : 	m_bTrusteeUser=false;

  0019d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a0	c6 80 b4 02 00
	00 00		 mov	 BYTE PTR [eax+692], 0

; 48   : 	m_bClientReady=false;

  001a7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001aa	c6 80 b5 02 00
	00 00		 mov	 BYTE PTR [eax+693], 0

; 49   : 	m_bModifyScore=false;

  001b1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	c6 80 b6 02 00
	00 00		 mov	 BYTE PTR [eax+694], 0

; 50   : 	ZeroMemory(m_szLogonPass,sizeof(m_szLogonPass));

  001bb	6a 21		 push	 33			; 00000021H
  001bd	6a 00		 push	 0
  001bf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001c2	05 b7 02 00 00	 add	 eax, 695		; 000002b7H
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 _memset
  001cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 	ZeroMemory(m_szUserGameData,sizeof(m_szUserGameData));

  001d0	68 00 04 00 00	 push	 1024			; 00000400H
  001d5	6a 00		 push	 0
  001d7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001da	05 d8 02 00 00	 add	 eax, 728		; 000002d8H
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 _memset
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 52   : 
; 53   : 	//属性变量
; 54   : 	ZeroMemory(&m_UserInfo,sizeof(m_UserInfo));

  001e8	68 10 01 00 00	 push	 272			; 00000110H
  001ed	6a 00		 push	 0
  001ef	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f2	83 c0 08	 add	 eax, 8
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 _memset
  001fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 	ZeroMemory(&m_UserRule,sizeof(m_UserRule));

  001fe	6a 34		 push	 52			; 00000034H
  00200	6a 00		 push	 0
  00202	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00205	05 18 01 00 00	 add	 eax, 280		; 00000118H
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 _memset
  00210	83 c4 0c	 add	 esp, 12			; 0000000cH

; 56   : 	ZeroMemory(&m_ScoreFormer,sizeof(m_ScoreFormer));

  00213	6a 64		 push	 100			; 00000064H
  00215	6a 00		 push	 0
  00217	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0021a	05 4c 01 00 00	 add	 eax, 332		; 0000014cH
  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 _memset
  00225	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : 	ZeroMemory(&m_UserProperty,sizeof(m_UserProperty));

  00228	6a 22		 push	 34			; 00000022H
  0022a	6a 00		 push	 0
  0022c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0022f	05 b0 01 00 00	 add	 eax, 432		; 000001b0H
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 _memset
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 	m_UserInfo.wTableID=INVALID_TABLE;

  0023d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00242	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00245	66 89 81 99 00
	00 00		 mov	 WORD PTR [ecx+153], ax

; 59   : 	m_UserInfo.wLastTableID=INVALID_TABLE;

  0024c	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00251	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00254	66 89 81 9b 00
	00 00		 mov	 WORD PTR [ecx+155], ax

; 60   : 	m_UserInfo.wChairID=INVALID_CHAIR;

  0025b	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00260	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00263	66 89 81 9d 00
	00 00		 mov	 WORD PTR [ecx+157], ax

; 61   : 
; 62   : 	//记录信息
; 63   : 	ZeroMemory(&m_RecordInfo,sizeof(m_RecordInfo));

  0026a	6a 50		 push	 80			; 00000050H
  0026c	6a 00		 push	 0
  0026e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00271	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  00276	50		 push	 eax
  00277	e8 00 00 00 00	 call	 _memset
  0027c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 64   : 	ZeroMemory(&m_VariationInfo,sizeof(m_VariationInfo));

  0027f	6a 50		 push	 80			; 00000050H
  00281	6a 00		 push	 0
  00283	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00286	05 28 02 00 00	 add	 eax, 552		; 00000228H
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 _memset
  00291	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : 
; 66   : 	//手机定义
; 67   : 	m_wMobileUserRule=0;

  00294	33 c0		 xor	 eax, eax
  00296	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00299	66 89 81 2a 07
	00 00		 mov	 WORD PTR [ecx+1834], ax

; 68   : 	m_wMobileUserRule |= VIEW_MODE_PART;

  002a0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002a3	0f b7 88 2a 07
	00 00		 movzx	 ecx, WORD PTR [eax+1834]
  002aa	83 c9 02	 or	 ecx, 2
  002ad	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002b0	66 89 8a 2a 07
	00 00		 mov	 WORD PTR [edx+1834], cx

; 69   : 	m_wMobileUserRule |= VIEW_INFO_LEVEL_1;

  002b7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002ba	0f b7 88 2a 07
	00 00		 movzx	 ecx, WORD PTR [eax+1834]
  002c1	83 c9 10	 or	 ecx, 16			; 00000010H
  002c4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002c7	66 89 8a 2a 07
	00 00		 mov	 WORD PTR [edx+1834], cx

; 70   : 	m_wDeskPos=0;

  002ce	33 c0		 xor	 eax, eax
  002d0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002d3	66 89 81 28 07
	00 00		 mov	 WORD PTR [ecx+1832], ax

; 71   : 	//视频id
; 72   : 	ZeroMemory(m_szVideoNumber,sizeof(m_szVideoNumber));

  002da	6a 16		 push	 22			; 00000016H
  002dc	6a 00		 push	 0
  002de	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002e1	05 2c 07 00 00	 add	 eax, 1836		; 0000072cH
  002e6	50		 push	 eax
  002e7	e8 00 00 00 00	 call	 _memset
  002ec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 73   : 
; 74   : 	//设置质数
; 75   : 	m_UserGameDataMap.InitHashTable(17);

  002ef	6a 01		 push	 1
  002f1	6a 11		 push	 17			; 00000011H
  002f3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002f6	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  002fc	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXIH@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::InitHashTable

; 76   : 
; 77   : 	return;
; 78   : }

  00301	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00308	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0030b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0030e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00315	59		 pop	 ecx
  00316	5f		 pop	 edi
  00317	5e		 pop	 esi
  00318	5b		 pop	 ebx
  00319	8b e5		 mov	 esp, ebp
  0031b	5d		 pop	 ebp
  0031c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CServerUserItem@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 d8 06 00
	00		 add	 ecx, 1752		; 000006d8H
  00009	e9 00 00 00 00	 jmp	 ??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::~CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
__ehhandler$??0CServerUserItem@@IAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CServerUserItem@@IAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CServerUserItem@@IAE@XZ ENDP				; CServerUserItem::CServerUserItem
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEPAXI@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::~CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 21		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 0e		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	6a 1c		 push	 28			; 0000001cH
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEPAXI@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AssertValid@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXXZ PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::AssertValid, COMDAT
; _this$ = ecx

; 1820 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1821 : 	CObject::AssertValid();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 1822 : 
; 1823 : 	ASSERT(m_nHashTableSize > 0);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001b	77 14		 ja	 SHORT $LN3@AssertVali
  0001d	68 1f 07 00 00	 push	 1823			; 0000071fH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN3@AssertVali
  00030	cc		 int	 3
$LN3@AssertVali:

; 1824 : 	ASSERT(m_nCount == 0 || m_pHashTable != NULL);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00038	74 1d		 je	 SHORT $LN1@AssertVali
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00041	75 14		 jne	 SHORT $LN1@AssertVali
  00043	68 20 07 00 00	 push	 1824			; 00000720H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN1@AssertVali
  00056	cc		 int	 3
$LN1@AssertVali:

; 1825 : 		// non-empty map should have hash table
; 1826 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?AssertValid@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXXZ ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Dump@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_pos$1 = -16						; size = 4
_val$2 = -12						; size = 4
_key$3 = -8						; size = 4
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXAAVCDumpContext@@@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Dump, COMDAT
; _this$ = ecx

; 1794 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1795 : 	CObject::Dump(dc);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 1796 : 
; 1797 : 	dc << "with " << m_nCount << " elements";

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_09HCLNAIDE@?5elements@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_05PLCFPPOI@with?5@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1798 : 	if (dc.GetDepth() > 0)

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00047	85 c0		 test	 eax, eax
  00049	7e 71		 jle	 SHORT $LN4@Dump

; 1799 : 	{
; 1800 : 		// Dump in format "[key] -> value"
; 1801 : 		KEY key[1];
; 1802 : 		VALUE val[1];
; 1803 : 
; 1804 : 		POSITION pos = GetStartPosition();

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition
  00053	89 45 f0	 mov	 DWORD PTR _pos$1[ebp], eax
$LN2@Dump:

; 1805 : 		while (pos != NULL)

  00056	83 7d f0 00	 cmp	 DWORD PTR _pos$1[ebp], 0
  0005a	74 60		 je	 SHORT $LN4@Dump

; 1806 : 		{
; 1807 : 			GetNextAssoc(pos, key[0], val[0]);

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8d 54 0d f4	 lea	 edx, DWORD PTR _val$2[ebp+ecx]
  00068	52		 push	 edx
  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	6b c8 00	 imul	 ecx, eax, 0
  00071	8d 54 0d f8	 lea	 edx, DWORD PTR _key$3[ebp+ecx]
  00075	52		 push	 edx
  00076	8d 45 f0	 lea	 eax, DWORD PTR _pos$1[ebp]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc

; 1808 : 			dc << "\n\t[";

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_03OHJIHPJH@?6?7?$FL@
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0008a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1809 : 			DumpElements<KEY>(dc, key, 1);

  0008f	6a 01		 push	 1
  00091	8d 45 f8	 lea	 eax, DWORD PTR _key$3[ebp]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$DumpElements@H@@YGXAAVCDumpContext@@PBHH@Z ; DumpElements<int>

; 1810 : 			dc << "] = ";

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000a6	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1811 : 			DumpElements<VALUE>(dc, val, 1);

  000ab	6a 01		 push	 1
  000ad	8d 45 f4	 lea	 eax, DWORD PTR _val$2[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ??$DumpElements@PAUtagGameDataItem@@@@YGXAAVCDumpContext@@PBQAUtagGameDataItem@@H@Z ; DumpElements<tagGameDataItem *>

; 1812 : 		}

  000ba	eb 9a		 jmp	 SHORT $LN2@Dump
$LN4@Dump:

; 1813 : 	}
; 1814 : 
; 1815 : 	dc << "\n";

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000c4	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1816 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?Dump@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UBEXAAVCDumpContext@@@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
tv154 = -100						; size = 4
_newValue$1 = -32					; size = 4
_newKey$2 = -28						; size = 4
_nNewCount$3 = -24					; size = 4
_pValue$4 = -20						; size = 4
_pKey$5 = -16						; size = 4
_pAssoc$6 = -12						; size = 4
_nHash$7 = -8						; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEXAAVCArchive@@@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Serialize, COMDAT
; _this$ = ecx

; 1743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1744 : 	ASSERT_VALID(this);

  0000c	68 d0 06 00 00	 push	 1744			; 000006d0H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1745 : 
; 1746 : 	CObject::Serialize(ar);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 1747 : 
; 1748 : 	if (ar.IsStoring())

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00033	85 c0		 test	 eax, eax
  00035	0f 84 b3 00 00
	00		 je	 $LN10@Serialize

; 1749 : 	{
; 1750 : 		ar.WriteCount(m_nCount);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00041	51		 push	 ecx
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00045	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1751 : 		if (m_nCount == 0)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00051	75 05		 jne	 SHORT $LN12@Serialize

; 1752 : 			return;  // nothing more to do

  00053	e9 f8 00 00 00	 jmp	 $LN1@Serialize
$LN12@Serialize:

; 1753 : 
; 1754 : 		ASSERT(m_pHashTable != NULL);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005f	75 14		 jne	 SHORT $LN15@Serialize
  00061	68 da 06 00 00	 push	 1754			; 000006daH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN15@Serialize
  00074	cc		 int	 3
$LN15@Serialize:

; 1755 : 		if (m_pHashTable != NULL)

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0007c	74 6e		 je	 SHORT $LN13@Serialize

; 1756 : 		{
; 1757 : 			for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$7[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN4@Serialize
$LN2@Serialize:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _nHash$7[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _nHash$7[ebp], eax
$LN4@Serialize:
  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$7[ebp]
  00096	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00099	73 51		 jae	 SHORT $LN13@Serialize

; 1758 : 			{
; 1759 : 				CAssoc* pAssoc;
; 1760 : 				for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	8b 55 f8	 mov	 edx, DWORD PTR _nHash$7[ebp]
  000a4	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000a7	89 45 f4	 mov	 DWORD PTR _pAssoc$6[ebp], eax
  000aa	eb 09		 jmp	 SHORT $LN7@Serialize
$LN5@Serialize:
  000ac	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	89 4d f4	 mov	 DWORD PTR _pAssoc$6[ebp], ecx
$LN7@Serialize:
  000b5	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$6[ebp], 0
  000b9	74 2f		 je	 SHORT $LN6@Serialize

; 1761 : 				{
; 1762 : 					KEY* pKey;
; 1763 : 					VALUE* pValue;
; 1764 : 					/*
; 1765 : 					* in some cases the & operator might be overloaded, and we cannot use it to
; 1766 : 					* obtain the address of a given object.  We then use the following trick to
; 1767 : 					* get the address
; 1768 : 					*/
; 1769 : 					pKey = reinterpret_cast< KEY* >( &reinterpret_cast< int& >( const_cast< KEY& > ( static_cast< const KEY& >( pAssoc->key ) ) ) );

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000be	89 45 f0	 mov	 DWORD PTR _pKey$5[ebp], eax

; 1770 : 					pValue = reinterpret_cast< VALUE* >( &reinterpret_cast< int& >( static_cast< VALUE& >( pAssoc->value ) ) );

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000c4	83 c0 04	 add	 eax, 4
  000c7	89 45 ec	 mov	 DWORD PTR _pValue$4[ebp], eax

; 1771 : 					SerializeElements<KEY>(ar, pKey, 1);

  000ca	6a 01		 push	 1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pKey$5[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ; SerializeElements<int>

; 1772 : 					SerializeElements<VALUE>(ar, pValue, 1);

  000d9	6a 01		 push	 1
  000db	8b 45 ec	 mov	 eax, DWORD PTR _pValue$4[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagGameDataItem@@@@YGXAAVCArchive@@PAPAUtagGameDataItem@@H@Z ; SerializeElements<tagGameDataItem *>

; 1773 : 				}

  000e8	eb c2		 jmp	 SHORT $LN5@Serialize
$LN6@Serialize:

; 1774 : 			}

  000ea	eb 9b		 jmp	 SHORT $LN2@Serialize
$LN13@Serialize:

; 1775 : 		}
; 1776 : 	}
; 1777 : 	else

  000ec	eb 62		 jmp	 SHORT $LN1@Serialize
$LN10@Serialize:

; 1778 : 	{
; 1779 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000f1	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  000f6	89 45 e8	 mov	 DWORD PTR _nNewCount$3[ebp], eax
$LN8@Serialize:

; 1780 : 		while (nNewCount--)

  000f9	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$3[ebp]
  000fc	89 45 9c	 mov	 DWORD PTR tv154[ebp], eax
  000ff	8b 4d e8	 mov	 ecx, DWORD PTR _nNewCount$3[ebp]
  00102	83 e9 01	 sub	 ecx, 1
  00105	89 4d e8	 mov	 DWORD PTR _nNewCount$3[ebp], ecx
  00108	83 7d 9c 00	 cmp	 DWORD PTR tv154[ebp], 0
  0010c	74 42		 je	 SHORT $LN1@Serialize

; 1781 : 		{
; 1782 : 			KEY newKey[1];
; 1783 : 			VALUE newValue[1];
; 1784 : 			SerializeElements<KEY>(ar, newKey, 1);

  0010e	6a 01		 push	 1
  00110	8d 45 e4	 lea	 eax, DWORD PTR _newKey$2[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ??$SerializeElements@H@@YGXAAVCArchive@@PAHH@Z ; SerializeElements<int>

; 1785 : 			SerializeElements<VALUE>(ar, newValue, 1);

  0011d	6a 01		 push	 1
  0011f	8d 45 e0	 lea	 eax, DWORD PTR _newValue$1[ebp]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagGameDataItem@@@@YGXAAVCArchive@@PAPAUtagGameDataItem@@H@Z ; SerializeElements<tagGameDataItem *>

; 1786 : 			SetAt(newKey[0], newValue[0]);

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	8d 54 0d e0	 lea	 edx, DWORD PTR _newValue$1[ebp+ecx]
  00138	52		 push	 edx
  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	6b c8 00	 imul	 ecx, eax, 0
  00141	8b 54 0d e4	 mov	 edx, DWORD PTR _newKey$2[ebp+ecx]
  00145	52		 push	 edx
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	e8 00 00 00 00	 call	 ?SetAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXHAAPAUtagGameDataItem@@@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::SetAt

; 1787 : 		}

  0014e	eb a9		 jmp	 SHORT $LN8@Serialize
$LN1@Serialize:

; 1788 : 	}
; 1789 : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 04 00	 ret	 4
?Serialize@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAEXAAVCArchive@@@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ PROC	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::~CMap<int,int,tagGameDataItem *,tagGameDataItem * &>, COMDAT
; _this$ = ecx

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@

; 1473 : 	RemoveAll();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::RemoveAll

; 1474 : 	ASSERT(m_nCount == 0);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $LN1@CMap
  00045	68 c2 05 00 00	 push	 1474			; 000005c2H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN1@CMap
  00058	cc		 int	 3
$LN1@CMap:

; 1475 : }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@UAE@XZ ENDP	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::~CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetAssocAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IBEPAVCAssoc@1@HAAI0@Z
_TEXT	SEGMENT
_pAssoc$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_nHashBucket$ = 12					; size = 4
_nHashValue$ = 16					; size = 4
?GetAssocAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IBEPAVCAssoc@1@HAAI0@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetAssocAt, COMDAT
; _this$ = ecx

; 1532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 : 	nHashValue = HashKey<ARG_KEY>(key);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$HashKey@H@@YGIH@Z	; HashKey<int>
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00018	89 01		 mov	 DWORD PTR [ecx], eax

; 1534 : 	nHashBucket = nHashValue % m_nHashTableSize;

  0001a	8b 45 10	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	33 d2		 xor	 edx, edx
  00024	f7 71 08	 div	 DWORD PTR [ecx+8]
  00027	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1535 : 
; 1536 : 	if (m_pHashTable == NULL)

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00033	75 04		 jne	 SHORT $LN5@GetAssocAt

; 1537 : 		return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 49		 jmp	 SHORT $LN1@GetAssocAt
$LN5@GetAssocAt:

; 1538 : 
; 1539 : 	// see if it exists
; 1540 : 	CAssoc* pAssoc;
; 1541 : 	for (pAssoc = m_pHashTable[nHashBucket]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  00039	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00047	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0004a	eb 09		 jmp	 SHORT $LN4@GetAssocAt
$LN2@GetAssocAt:
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@GetAssocAt:
  00055	83 7d f8 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  00059	74 25		 je	 SHORT $LN3@GetAssocAt

; 1542 : 	{
; 1543 : 		if (pAssoc->nHashValue == nHashValue && CompareElements(&pAssoc->key, &key))

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00061	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00064	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00066	75 16		 jne	 SHORT $LN6@GetAssocAt
  00068	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ??$CompareElements@HH@@YGHPBH0@Z ; CompareElements<int,int>
  00075	85 c0		 test	 eax, eax
  00077	74 05		 je	 SHORT $LN6@GetAssocAt

; 1544 : 			return pAssoc;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0007c	eb 04		 jmp	 SHORT $LN1@GetAssocAt
$LN6@GetAssocAt:

; 1545 : 	}

  0007e	eb cc		 jmp	 SHORT $LN2@GetAssocAt
$LN3@GetAssocAt:

; 1546 : 	return NULL;

  00080	33 c0		 xor	 eax, eax
$LN1@GetAssocAt:

; 1547 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?GetAssocAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IBEPAVCAssoc@1@HAAI0@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetAssocAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?NewAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAEPAVCAssoc@1@H@Z
_TEXT	SEGMENT
tv88 = -100						; size = 4
$T1 = -96						; size = 4
_pTemp$ = -28						; size = 4
_pAssoc$ = -24						; size = 4
___afx_condVal$2 = -20					; size = 4
_i$3 = -16						; size = 4
_pAssoc$4 = -12						; size = 4
_newBlock$5 = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?NewAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAEPAVCAssoc@1@H@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::NewAssoc, COMDAT
; _this$ = ecx

; 1480 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1481 : 	if (m_pFreeList == NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	75 72		 jne	 SHORT $LN7@NewAssoc

; 1482 : 	{
; 1483 : 		// add another block
; 1484 : 		CPlex* newBlock = CPlex::Create(m_pBlocks, m_nBlockSize, sizeof(CMap::CAssoc));

  00015	6a 10		 push	 16			; 00000010H
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 14	 add	 edx, 20			; 00000014H
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create
  0002a	89 45 f8	 mov	 DWORD PTR _newBlock$5[ebp], eax

; 1485 : 		// chain them into free list
; 1486 : 		CMap::CAssoc* pAssoc = (CMap::CAssoc*) newBlock->data();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _newBlock$5[ebp]
  00030	e8 00 00 00 00	 call	 ?data@CPlex@@QAEPAXXZ	; CPlex::data
  00035	89 45 f4	 mov	 DWORD PTR _pAssoc$4[ebp], eax

; 1487 : 		// free in reverse order to make it easier to debug
; 1488 : 		pAssoc += m_nBlockSize - 1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	c1 e1 04	 shl	 ecx, 4
  00044	03 4d f4	 add	 ecx, DWORD PTR _pAssoc$4[ebp]
  00047	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx

; 1489 : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pAssoc--)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d f0	 mov	 DWORD PTR _i$3[ebp], ecx
  00056	eb 12		 jmp	 SHORT $LN4@NewAssoc
$LN2@NewAssoc:
  00058	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00064	83 e9 10	 sub	 ecx, 16			; 00000010H
  00067	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx
$LN4@NewAssoc:
  0006a	83 7d f0 00	 cmp	 DWORD PTR _i$3[ebp], 0
  0006e	7c 17		 jl	 SHORT $LN7@NewAssoc

; 1490 : 		{
; 1491 : 			pAssoc->pNext = m_pFreeList;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$4[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1492 : 			m_pFreeList = pAssoc;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00082	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1493 : 		}

  00085	eb d1		 jmp	 SHORT $LN2@NewAssoc
$LN7@NewAssoc:

; 1494 : 	}
; 1495 : 	ENSURE(m_pFreeList != NULL);  // we must have something

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008e	74 09		 je	 SHORT $LN11@NewAssoc
  00090	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00097	eb 07		 jmp	 SHORT $LN12@NewAssoc
$LN11@NewAssoc:
  00099	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN12@NewAssoc:
  000a0	8b 4d 9c	 mov	 ecx, DWORD PTR tv88[ebp]
  000a3	89 4d ec	 mov	 DWORD PTR ___afx_condVal$2[ebp], ecx
  000a6	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000aa	75 14		 jne	 SHORT $LN13@NewAssoc
  000ac	68 d7 05 00 00	 push	 1495			; 000005d7H
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b6	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000bb	85 c0		 test	 eax, eax
  000bd	74 01		 je	 SHORT $LN13@NewAssoc
  000bf	cc		 int	 3
$LN13@NewAssoc:
  000c0	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000c4	75 05		 jne	 SHORT $LN5@NewAssoc
  000c6	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@NewAssoc:
  000cb	33 c0		 xor	 eax, eax
  000cd	75 b8		 jne	 SHORT $LN7@NewAssoc

; 1496 : 
; 1497 : 	CMap::CAssoc* pAssoc = m_pFreeList;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d5	89 4d e8	 mov	 DWORD PTR _pAssoc$[ebp], ecx

; 1498 : 
; 1499 : 	// zero the memory
; 1500 : 	CMap::CAssoc* pTemp = pAssoc->pNext;

  000d8	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000db	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000de	89 4d e4	 mov	 DWORD PTR _pTemp$[ebp], ecx

; 1501 : 	memset( pAssoc, 0, sizeof(CMap::CAssoc) );

  000e1	6a 10		 push	 16			; 00000010H
  000e3	6a 00		 push	 0
  000e5	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _memset
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1502 : 	pAssoc->pNext = pTemp;

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _pTemp$[ebp]
  000f7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1503 : 
; 1504 : 	m_pFreeList = m_pFreeList->pNext;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00100	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00106	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1505 : 	m_nCount++;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010f	83 c1 01	 add	 ecx, 1
  00112	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00115	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1506 : 	ASSERT(m_nCount > 0);  // make sure we don't overflow

  00118	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0011f	7f 14		 jg	 SHORT $LN14@NewAssoc
  00121	68 e2 05 00 00	 push	 1506			; 000005e2H
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0012b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00130	85 c0		 test	 eax, eax
  00132	74 01		 je	 SHORT $LN14@NewAssoc
  00134	cc		 int	 3
$LN14@NewAssoc:

; 1507 : #pragma push_macro("new")
; 1508 : #undef new
; 1509 : 	::new(pAssoc) CMap::CAssoc(key);

  00135	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00138	50		 push	 eax
  00139	6a 10		 push	 16			; 00000010H
  0013b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00140	83 c4 08	 add	 esp, 8
  00143	89 45 a0	 mov	 DWORD PTR $T1[ebp], eax
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00149	51		 push	 ecx
  0014a	8b 4d a0	 mov	 ecx, DWORD PTR $T1[ebp]
  0014d	e8 00 00 00 00	 call	 ??0CAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CAssoc::CAssoc

; 1510 : #pragma pop_macro("new")
; 1511 : 	return pAssoc;

  00152	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
$LN10@NewAssoc:

; 1512 : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
?NewAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAEPAVCAssoc@1@H@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::NewAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?InitHashTable@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXIH@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
___afx_condVal$3 = -8					; size = 4
_this$ = -4						; size = 4
_nHashSize$ = 8						; size = 4
_bAllocNow$ = 12					; size = 4
?InitHashTable@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXIH@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::InitHashTable, COMDAT
; _this$ = ecx

; 1420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 : 	ASSERT_VALID(this);

  0000c	68 8d 05 00 00	 push	 1421			; 0000058dH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1422 : 	ASSERT(m_nCount == 0);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00026	74 14		 je	 SHORT $LN9@InitHashTa
  00028	68 8e 05 00 00	 push	 1422			; 0000058eH
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $LN9@InitHashTa
  0003b	cc		 int	 3
$LN9@InitHashTa:

; 1423 : 	ASSERT(nHashSize > 0);

  0003c	83 7d 08 00	 cmp	 DWORD PTR _nHashSize$[ebp], 0
  00040	77 14		 ja	 SHORT $LN10@InitHashTa
  00042	68 8f 05 00 00	 push	 1423			; 0000058fH
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00051	85 c0		 test	 eax, eax
  00053	74 01		 je	 SHORT $LN10@InitHashTa
  00055	cc		 int	 3
$LN10@InitHashTa:

; 1424 : 
; 1425 : 	if (m_pHashTable != NULL)

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005d	74 1f		 je	 SHORT $LN5@InitHashTa

; 1426 : 	{
; 1427 : 		// free hash table
; 1428 : 		delete[] m_pHashTable;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	89 4d b4	 mov	 DWORD PTR $T2[ebp], ecx
  00068	8b 55 b4	 mov	 edx, DWORD PTR $T2[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00071	83 c4 04	 add	 esp, 4

; 1429 : 		m_pHashTable = NULL;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN5@InitHashTa:

; 1430 : 	}
; 1431 : 
; 1432 : 	if (bAllocNow)

  0007e	83 7d 0c 00	 cmp	 DWORD PTR _bAllocNow$[ebp], 0
  00082	0f 84 92 00 00
	00		 je	 $LN6@InitHashTa

; 1433 : 	{
; 1434 : 		m_pHashTable = new CAssoc* [nHashSize];

  00088	68 9a 05 00 00	 push	 1434			; 0000059aH
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00092	33 c9		 xor	 ecx, ecx
  00094	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00097	ba 04 00 00 00	 mov	 edx, 4
  0009c	f7 e2		 mul	 edx
  0009e	0f 90 c1	 seto	 cl
  000a1	f7 d9		 neg	 ecx
  000a3	0b c8		 or	 ecx, eax
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  000b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN4@InitHashTa:

; 1435 : 		ENSURE(m_pHashTable != NULL);

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000c1	74 09		 je	 SHORT $LN11@InitHashTa
  000c3	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  000ca	eb 07		 jmp	 SHORT $LN12@InitHashTa
$LN11@InitHashTa:
  000cc	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN12@InitHashTa:
  000d3	8b 4d ac	 mov	 ecx, DWORD PTR tv137[ebp]
  000d6	89 4d f8	 mov	 DWORD PTR ___afx_condVal$3[ebp], ecx
  000d9	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000dd	75 14		 jne	 SHORT $LN13@InitHashTa
  000df	68 9b 05 00 00	 push	 1435			; 0000059bH
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000e9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ee	85 c0		 test	 eax, eax
  000f0	74 01		 je	 SHORT $LN13@InitHashTa
  000f2	cc		 int	 3
$LN13@InitHashTa:
  000f3	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000f7	75 05		 jne	 SHORT $LN2@InitHashTa
  000f9	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@InitHashTa:
  000fe	33 c0		 xor	 eax, eax
  00100	75 b8		 jne	 SHORT $LN4@InitHashTa

; 1436 : 		memset(m_pHashTable, 0, sizeof(CAssoc*) * nHashSize);

  00102	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00105	c1 e0 02	 shl	 eax, 2
  00108	50		 push	 eax
  00109	6a 00		 push	 0
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _memset
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@InitHashTa:

; 1437 : 	}
; 1438 : 	m_nHashTableSize = nHashSize;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _nHashSize$[ebp]
  00120	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@InitHashTa:

; 1439 : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
?InitHashTable@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXIH@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::InitHashTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z
_TEXT	SEGMENT
tv133 = -100						; size = 4
tv83 = -100						; size = 4
tv73 = -100						; size = 4
_nBucket$1 = -32					; size = 4
_pAssocNext$ = -28					; size = 4
___afx_condVal$2 = -24					; size = 4
_nBucket$3 = -20					; size = 4
___afx_condVal$4 = -16					; size = 4
_pAssocRet$ = -12					; size = 4
___afx_condVal$5 = -8					; size = 4
_this$ = -4						; size = 4
_rNextPosition$ = 8					; size = 4
_rKey$ = 12						; size = 4
_rValue$ = 16						; size = 4
?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc, COMDAT
; _this$ = ecx

; 1640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 	ASSERT_VALID(this);

  0000c	68 69 06 00 00	 push	 1641			; 00000669H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@GetNextAss:

; 1642 : 	ENSURE(m_pHashTable != NULL);  // never call on empty map

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN25@GetNextAss
  00028	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN26@GetNextAss
$LN25@GetNextAss:
  00031	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN26@GetNextAss:
  00038	8b 4d 9c	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$5[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  00042	75 14		 jne	 SHORT $LN27@GetNextAss
  00044	68 6a 06 00 00	 push	 1642			; 0000066aH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN27@GetNextAss
  00057	cc		 int	 3
$LN27@GetNextAss:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@GetNextAss
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetNextAss:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@GetNextAss

; 1643 : 
; 1644 : 	CAssoc* pAssocRet = (CAssoc*)rNextPosition;

  00067	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	89 4d f4	 mov	 DWORD PTR _pAssocRet$[ebp], ecx
$LN7@GetNextAss:

; 1645 : 	ENSURE(pAssocRet != NULL);

  0006f	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  00073	74 09		 je	 SHORT $LN28@GetNextAss
  00075	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  0007c	eb 07		 jmp	 SHORT $LN29@GetNextAss
$LN28@GetNextAss:
  0007e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN29@GetNextAss:
  00085	8b 45 9c	 mov	 eax, DWORD PTR tv83[ebp]
  00088	89 45 f0	 mov	 DWORD PTR ___afx_condVal$4[ebp], eax
  0008b	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  0008f	75 14		 jne	 SHORT $LN30@GetNextAss
  00091	68 6d 06 00 00	 push	 1645			; 0000066dH
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a0	85 c0		 test	 eax, eax
  000a2	74 01		 je	 SHORT $LN30@GetNextAss
  000a4	cc		 int	 3
$LN30@GetNextAss:
  000a5	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  000a9	75 05		 jne	 SHORT $LN5@GetNextAss
  000ab	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@GetNextAss:
  000b0	33 c0		 xor	 eax, eax
  000b2	75 bb		 jne	 SHORT $LN7@GetNextAss

; 1646 : 
; 1647 : 	if (pAssocRet == (CAssoc*) BEFORE_START_POSITION)

  000b4	83 7d f4 ff	 cmp	 DWORD PTR _pAssocRet$[ebp], -1
  000b8	75 7b		 jne	 SHORT $LN19@GetNextAss

; 1648 : 	{
; 1649 : 		// find the first association
; 1650 : 		for (UINT nBucket = 0; nBucket < m_nHashTableSize; nBucket++)

  000ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBucket$3[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN10@GetNextAss
$LN8@GetNextAss:
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _nBucket$3[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _nBucket$3[ebp], eax
$LN10@GetNextAss:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _nBucket$3[ebp]
  000d2	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d5	73 19		 jae	 SHORT $LN13@GetNextAss

; 1651 : 		{
; 1652 : 			if ((pAssocRet = m_pHashTable[nBucket]) != NULL)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _nBucket$3[ebp]
  000e0	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000e3	89 45 f4	 mov	 DWORD PTR _pAssocRet$[ebp], eax
  000e6	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000ea	74 02		 je	 SHORT $LN20@GetNextAss

; 1653 : 			{
; 1654 : 				break;

  000ec	eb 02		 jmp	 SHORT $LN13@GetNextAss
$LN20@GetNextAss:

; 1655 : 			}
; 1656 : 		}

  000ee	eb d3		 jmp	 SHORT $LN8@GetNextAss
$LN13@GetNextAss:

; 1657 : 		ENSURE(pAssocRet != NULL);  // must find something

  000f0	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000f4	74 09		 je	 SHORT $LN31@GetNextAss
  000f6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN32@GetNextAss
$LN31@GetNextAss:
  000ff	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN32@GetNextAss:
  00106	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  00109	89 45 e8	 mov	 DWORD PTR ___afx_condVal$2[ebp], eax
  0010c	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  00110	75 14		 jne	 SHORT $LN33@GetNextAss
  00112	68 79 06 00 00	 push	 1657			; 00000679H
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0011c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00121	85 c0		 test	 eax, eax
  00123	74 01		 je	 SHORT $LN33@GetNextAss
  00125	cc		 int	 3
$LN33@GetNextAss:
  00126	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  0012a	75 05		 jne	 SHORT $LN11@GetNextAss
  0012c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN11@GetNextAss:
  00131	33 c0		 xor	 eax, eax
  00133	75 bb		 jne	 SHORT $LN13@GetNextAss
$LN19@GetNextAss:

; 1658 : 	}
; 1659 : 
; 1660 : 	// find next association
; 1661 : 	ASSERT(AfxIsValidAddress(pAssocRet, sizeof(CAssoc)));

  00135	6a 01		 push	 1
  00137	6a 10		 push	 16			; 00000010H
  00139	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00142	85 c0		 test	 eax, eax
  00144	75 14		 jne	 SHORT $LN34@GetNextAss
  00146	68 7d 06 00 00	 push	 1661			; 0000067dH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00150	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00155	85 c0		 test	 eax, eax
  00157	74 01		 je	 SHORT $LN34@GetNextAss
  00159	cc		 int	 3
$LN34@GetNextAss:

; 1662 : 	CAssoc* pAssocNext;
; 1663 : 	if ((pAssocNext = pAssocRet->pNext) == NULL)

  0015a	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0015d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00160	89 4d e4	 mov	 DWORD PTR _pAssocNext$[ebp], ecx
  00163	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  00167	75 43		 jne	 SHORT $LN22@GetNextAss

; 1664 : 	{
; 1665 : 		// go to next bucket
; 1666 : 		for (UINT nBucket = (pAssocRet->nHashValue % m_nHashTableSize) + 1;

  00169	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00172	33 d2		 xor	 edx, edx
  00174	f7 71 08	 div	 DWORD PTR [ecx+8]
  00177	83 c2 01	 add	 edx, 1
  0017a	89 55 e0	 mov	 DWORD PTR _nBucket$1[ebp], edx
  0017d	eb 09		 jmp	 SHORT $LN16@GetNextAss
$LN14@GetNextAss:

; 1667 : 		  nBucket < m_nHashTableSize; nBucket++)

  0017f	8b 45 e0	 mov	 eax, DWORD PTR _nBucket$1[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 e0	 mov	 DWORD PTR _nBucket$1[ebp], eax
$LN16@GetNextAss:
  00188	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 4d e0	 mov	 ecx, DWORD PTR _nBucket$1[ebp]
  0018e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00191	73 19		 jae	 SHORT $LN22@GetNextAss

; 1668 : 			if ((pAssocNext = m_pHashTable[nBucket]) != NULL)

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00199	8b 55 e0	 mov	 edx, DWORD PTR _nBucket$1[ebp]
  0019c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0019f	89 45 e4	 mov	 DWORD PTR _pAssocNext$[ebp], eax
  001a2	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  001a6	74 02		 je	 SHORT $LN23@GetNextAss

; 1669 : 				break;

  001a8	eb 02		 jmp	 SHORT $LN22@GetNextAss
$LN23@GetNextAss:

; 1670 : 	}

  001aa	eb d3		 jmp	 SHORT $LN14@GetNextAss
$LN22@GetNextAss:

; 1671 : 
; 1672 : 	rNextPosition = (POSITION) pAssocNext;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  001af	8b 4d e4	 mov	 ecx, DWORD PTR _pAssocNext$[ebp]
  001b2	89 08		 mov	 DWORD PTR [eax], ecx

; 1673 : 
; 1674 : 	// fill in return data
; 1675 : 	rKey = pAssocRet->key;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _rKey$[ebp]
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bc	89 10		 mov	 DWORD PTR [eax], edx

; 1676 : 	rValue = pAssocRet->value;

  001be	8b 45 10	 mov	 eax, DWORD PTR _rValue$[ebp]
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001c4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c7	89 10		 mov	 DWORD PTR [eax], edx
$LN24@GetNextAss:

; 1677 : }

  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 0c 00	 ret	 12			; 0000000cH
?GetNextAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEXAAPAU__POSITION@@AAHAAPAUtagGameDataItem@@@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetNextAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition, COMDAT
; _this$ = ecx

; 1354 : 	{ return (m_nCount == 0) ? NULL : BEFORE_START_POSITION; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	75 09		 jne	 SHORT $LN3@GetStartPo
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@GetStartPo
$LN3@GetStartPo:
  0001e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv66[ebp], -1
$LN4@GetStartPo:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetStartPosition@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEPAU__POSITION@@XZ ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetStartPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_pAssoc$2 = -12						; size = 4
_nHash$3 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::RemoveAll, COMDAT
; _this$ = ecx

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1444 : 	ASSERT_VALID(this);

  0000c	68 a4 05 00 00	 push	 1444			; 000005a4H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1445 : 
; 1446 : 	if (m_pHashTable != NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 60		 je	 SHORT $LN8@RemoveAll

; 1447 : 	{
; 1448 : 		// destroy elements (values and keys)
; 1449 : 		for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _nHash$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _nHash$3[ebp], eax
$LN4@RemoveAll:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$3[ebp]
  00040	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00043	73 24		 jae	 SHORT $LN3@RemoveAll

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _nHash$3[ebp]
  0004e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00051	89 45 f4	 mov	 DWORD PTR _pAssoc$2[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN7@RemoveAll
$LN5@RemoveAll:

; 1453 : 			  pAssoc = pAssoc->pNext)

  00056	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$2[ebp]
  00059	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005c	89 4d f4	 mov	 DWORD PTR _pAssoc$2[ebp], ecx
$LN7@RemoveAll:

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  0005f	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$2[ebp], 0
  00063	74 02		 je	 SHORT $LN6@RemoveAll

; 1454 : 			{
; 1455 : 				pAssoc->CAssoc::~CAssoc();
; 1456 : 			}

  00065	eb ef		 jmp	 SHORT $LN5@RemoveAll
$LN6@RemoveAll:

; 1457 : 		}

  00067	eb c8		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 1458 : 
; 1459 : 		// free hash table
; 1460 : 		delete[] m_pHashTable;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  00072	8b 55 b0	 mov	 edx, DWORD PTR $T1[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0007b	83 c4 04	 add	 esp, 4

; 1461 : 		m_pHashTable = NULL;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN8@RemoveAll:

; 1462 : 	}
; 1463 : 
; 1464 : 	m_nCount = 0;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1465 : 	m_pFreeList = NULL;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1466 : 	m_pBlocks->FreeDataChain();

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a2	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 1467 : 	m_pBlocks = NULL;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1468 : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?RemoveAll@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXXZ ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?SetAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXHAAPAUtagGameDataItem@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_newValue$ = 12						; size = 4
?SetAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXHAAPAUtagGameDataItem@@@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::SetAt, COMDAT
; _this$ = ecx

; 1350 : 	{ (*this)[key] = newValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??A?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEAAPAUtagGameDataItem@@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::operator[]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _newValue$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	89 10		 mov	 DWORD PTR [eax], edx
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?SetAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXHAAPAUtagGameDataItem@@@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::SetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??A?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEAAPAUtagGameDataItem@@H@Z
_TEXT	SEGMENT
tv85 = -88						; size = 4
___afx_condVal$1 = -20					; size = 4
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??A?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEAAPAUtagGameDataItem@@H@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::operator[], COMDAT
; _this$ = ecx

; 1585 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 : 	ASSERT_VALID(this);

  0000c	68 32 06 00 00	 push	 1586			; 00000632H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1587 : 
; 1588 : 	UINT nHashBucket, nHashValue;
; 1589 : 	CAssoc* pAssoc;
; 1590 : 	if ((pAssoc = GetAssocAt(key, nHashBucket, nHashValue)) == NULL)

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IBEPAVCAssoc@1@HAAI0@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetAssocAt
  00033	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax
  00036	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003a	0f 85 9b 00 00
	00		 jne	 $LN5@operator

; 1591 : 	{
; 1592 : 		if (m_pHashTable == NULL)

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00047	75 11		 jne	 SHORT $LN4@operator

; 1593 : 			InitHashTable(m_nHashTableSize);

  00049	6a 01		 push	 1
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00051	51		 push	 ecx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEXIH@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::InitHashTable
$LN4@operator:

; 1594 : 
; 1595 : 		ENSURE(m_pHashTable);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00061	74 09		 je	 SHORT $LN9@operator
  00063	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  0006a	eb 07		 jmp	 SHORT $LN10@operator
$LN9@operator:
  0006c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN10@operator:
  00073	8b 4d a8	 mov	 ecx, DWORD PTR tv85[ebp]
  00076	89 4d ec	 mov	 DWORD PTR ___afx_condVal$1[ebp], ecx
  00079	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0007d	75 14		 jne	 SHORT $LN11@operator
  0007f	68 3b 06 00 00	 push	 1595			; 0000063bH
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00089	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008e	85 c0		 test	 eax, eax
  00090	74 01		 je	 SHORT $LN11@operator
  00092	cc		 int	 3
$LN11@operator:
  00093	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00097	75 05		 jne	 SHORT $LN2@operator
  00099	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@operator:
  0009e	33 c0		 xor	 eax, eax
  000a0	75 b8		 jne	 SHORT $LN4@operator

; 1596 : 		// it doesn't exist, add a new Association
; 1597 : 		pAssoc = NewAssoc(key);

  000a2	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?NewAssoc@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IAEPAVCAssoc@1@H@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::NewAssoc
  000ae	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1598 : 		pAssoc->nHashValue = nHashValue;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000b4	8b 4d f4	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  000b7	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1599 : 		//'pAssoc->value' is a constructed object, nothing more
; 1600 : 
; 1601 : 		// put into hash table
; 1602 : 		pAssoc->pNext = m_pHashTable[nHashBucket];

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c0	8b 55 f0	 mov	 edx, DWORD PTR _pAssoc$[ebp]
  000c3	8b 45 f8	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  000c6	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  000c9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1603 : 		m_pHashTable[nHashBucket] = pAssoc;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	8b 55 f8	 mov	 edx, DWORD PTR _nHashBucket$[ebp]
  000d5	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000d8	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN5@operator:

; 1604 : 	}
; 1605 : 	return pAssoc->value;  // return new reference

  000db	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000de	83 c0 04	 add	 eax, 4
$LN8@operator:

; 1606 : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
??A?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAEAAPAUtagGameDataItem@@H@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Lookup@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEHHAAPAUtagGameDataItem@@@Z
_TEXT	SEGMENT
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_rValue$ = 12						; size = 4
?Lookup@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEHHAAPAUtagGameDataItem@@@Z PROC ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Lookup, COMDAT
; _this$ = ecx

; 1551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 : 	ASSERT_VALID(this);

  0000c	68 10 06 00 00	 push	 1552			; 00000610H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1553 : 
; 1554 : 	UINT nHashBucket, nHashValue;
; 1555 : 	CAssoc* pAssoc = GetAssocAt(key, nHashBucket, nHashValue);

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@IBEPAVCAssoc@1@HAAI0@Z ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::GetAssocAt
  00033	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1556 : 	if (pAssoc == NULL)

  00036	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003a	75 04		 jne	 SHORT $LN2@Lookup

; 1557 : 		return FALSE;  // not in map

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 10		 jmp	 SHORT $LN1@Lookup
$LN2@Lookup:

; 1558 : 
; 1559 : 	rValue = pAssoc->value;

  00040	8b 45 0c	 mov	 eax, DWORD PTR _rValue$[ebp]
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	89 10		 mov	 DWORD PTR [eax], edx

; 1560 : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1
$LN1@Lookup:

; 1561 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?Lookup@?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QBEHHAAPAUtagGameDataItem@@@Z ENDP ; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::Lookup
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nBlockSize$ = 8					; size = 4
??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z PROC	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CMap<int,int,tagGameDataItem *,tagGameDataItem * &>, COMDAT
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@6B@

; 1404 : 	ASSERT(nBlockSize > 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nBlockSize$[ebp], 0
  00047	7f 14		 jg	 SHORT $LN3@CMap
  00049	68 7c 05 00 00	 push	 1404			; 0000057cH
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@CMap
  0005c	cc		 int	 3
$LN3@CMap:

; 1405 : 
; 1406 : 	m_pHashTable = NULL;

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1407 : 	m_nHashTableSize = 17;  // default size

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 08 11 00
	00 00		 mov	 DWORD PTR [eax+8], 17	; 00000011H

; 1408 : 	m_nCount = 0;

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1409 : 	m_pFreeList = NULL;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1410 : 	m_pBlocks = NULL;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1411 : 	m_nBlockSize = nBlockSize;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _nBlockSize$[ebp]
  00095	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1412 : }

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CMap@HHPAUtagGameDataItem@@AAPAU1@@@QAE@H@Z ENDP	; CMap<int,int,tagGameDataItem *,tagGameDataItem * &>::CMap<int,int,tagGameDataItem *,tagGameDataItem * &>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IServerUserManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServerUserManager@@QAE@XZ PROC			; IServerUserManager::IServerUserManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IServerUserManager@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IServerUserManager@@QAE@XZ ENDP			; IServerUserManager::IServerUserManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IServerUserService@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServerUserService@@QAE@XZ PROC			; IServerUserService::IServerUserService, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IServerUserService@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IServerUserService@@QAE@XZ ENDP			; IServerUserService::IServerUserService
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IServerUserItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IServerUserItem@@QAE@XZ PROC				; IServerUserItem::IServerUserItem, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IServerUserItem@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IServerUserItem@@QAE@XZ ENDP				; IServerUserItem::IServerUserItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00012	83 c4 04	 add	 esp, 4
  00015	0f b6 f0	 movzx	 esi, al
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00021	83 c4 04	 add	 esp, 4
  00024	0f b6 d0	 movzx	 edx, al
  00027	3b f2		 cmp	 esi, edx
  00029	7e 04		 jle	 SHORT $LN2@InterfaceV
  0002b	32 c0		 xor	 al, al
  0002d	eb 74		 jmp	 SHORT $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00038	83 c4 04	 add	 esp, 4
  0003b	0f b6 f0	 movzx	 esi, al
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00047	83 c4 04	 add	 esp, 4
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	3b f2		 cmp	 esi, edx
  0004f	74 04		 je	 SHORT $LN3@InterfaceV
  00051	32 c0		 xor	 al, al
  00053	eb 4e		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00055	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0005e	83 c4 04	 add	 esp, 4
  00061	0f b6 f0	 movzx	 esi, al
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0006d	83 c4 04	 add	 esp, 4
  00070	0f b6 d0	 movzx	 edx, al
  00073	3b f2		 cmp	 esi, edx
  00075	74 04		 je	 SHORT $LN4@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 28		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00084	83 c4 04	 add	 esp, 4
  00087	0f b6 f0	 movzx	 esi, al
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00093	83 c4 04	 add	 esp, 4
  00096	0f b6 d0	 movzx	 edx, al
  00099	3b f2		 cmp	 esi, edx
  0009b	74 04		 je	 SHORT $LN5@InterfaceV
  0009d	32 c0		 xor	 al, al
  0009f	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000a1	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	d1 e0		 shl	 eax, 1
  00010	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00013	83 c4 04	 add	 esp, 4
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002a	6a 02		 push	 2
  0002c	6a 02		 push	 2
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  0003e	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00042	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  00044	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 105  : 	_CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _wmemcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	return (_Ptrdest);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -48						; size = 8
__Ptrnext$ = -40					; size = 4
__Ptrdest$ = -36					; size = 4
__Mbst1$ = -32						; size = 8
__Wc$ = -24						; size = 2
__Bytes$ = -20						; size = 4
__Ptr1$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Count1$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 e0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000e	89 45 e4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00033	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00036	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00044	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00047	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00053	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00057	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00059	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 45 f0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 __Mbrtowc
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  00078	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0007c	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0007e	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  00080	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  00082	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR __Wchars$[ebp], eax

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  0008b	68 ba 02 00 00	 push	 698			; 000002baH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	6a 02		 push	 2
  00099	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000a9	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000ad	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000af	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000b4	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000b7	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 703  : 	mbstate_t _Mbst2 = {};

  000ba	33 c0		 xor	 eax, eax
  000bc	89 45 d0	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000bf	89 45 d4	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000c2	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  000c7	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d0	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000d3	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000d6	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000d9	83 ea 01	 sub	 edx, 1
  000dc	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000df	8b 45 d8	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  000e2	83 c0 02	 add	 eax, 2
  000e5	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e8	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  000ec	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  000ee	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d d0	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __Count1$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 __Mbrtowc
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  0010d	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00111	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00113	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00115	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00117	33 c0		 xor	 eax, eax
  00119	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0011c	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0011f	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$HashKey@K@@YGIK@Z
_TEXT	SEGMENT
$T1 = -80						; size = 8
_HashVal$ = -8						; size = 8
_key$ = 8						; size = 4
??$HashKey@K@@YGIK@Z PROC				; HashKey<unsigned long>, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 162  : 	// (algorithm copied from STL hash in xfunctional)
; 163  : #pragma warning(suppress: 4302) // 'type cast' : truncation
; 164  : #pragma warning(suppress: 4311) // pointer truncation
; 165  : 	ldiv_t HashVal = ldiv((long)(ARG_KEY)key, 127773);

  00009	68 1d f3 01 00	 push	 127773			; 0001f31dH
  0000e	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ldiv
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0001e	89 55 b4	 mov	 DWORD PTR $T1[ebp+4], edx
  00021	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  00024	89 4d f8	 mov	 DWORD PTR _HashVal$[ebp], ecx
  00027	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp+4]
  0002a	89 55 fc	 mov	 DWORD PTR _HashVal$[ebp+4], edx

; 166  : 	HashVal.rem = 16807 * HashVal.rem - 2836 * HashVal.quot;

  0002d	69 45 fc a7 41
	00 00		 imul	 eax, DWORD PTR _HashVal$[ebp+4], 16807
  00034	69 4d f8 14 0b
	00 00		 imul	 ecx, DWORD PTR _HashVal$[ebp], 2836
  0003b	2b c1		 sub	 eax, ecx
  0003d	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax

; 167  : 	if (HashVal.rem < 0)

  00040	79 0b		 jns	 SHORT $LN2@HashKey

; 168  : 		HashVal.rem += 2147483647;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]
  00045	05 ff ff ff 7f	 add	 eax, 2147483647		; 7fffffffH
  0004a	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax
$LN2@HashKey:

; 169  : 	return ((UINT)HashVal.rem);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]

; 170  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$HashKey@K@@YGIK@Z ENDP				; HashKey<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxplex_.h
;	COMDAT ?data@CPlex@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@CPlex@@QAEPAXXZ PROC				; CPlex::data, COMDAT
; _this$ = ecx

; 35   : 	void* data() { return this+1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?data@CPlex@@QAEPAXXZ ENDP				; CPlex::data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00009	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 330  : 		if (pszCategory == nullptr)

  00016	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0001c	e9 a9 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00021	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00028	72 2d		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0002a	33 c0		 xor	 eax, eax
  0002c	75 27		 jne	 SHORT $LN5@RegisterCa
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 51 01 00 00	 push	 337			; 00000151H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1OE@PDFAMNPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 01		 jne	 SHORT $LN5@RegisterCa
  00054	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  00055	eb 73		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00057	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  00064	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  0006a	68 00 01 00 00	 push	 256			; 00000100H
  0006f	6a 00		 push	 0
  00071	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  00080	8b 45 08	 mov	 eax, DWORD PTR _pszCategory$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  00089	6a 7f		 push	 127			; 0000007fH
  0008b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _swprintf_s
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  0009a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000a0	50		 push	 eax
  000a1	6a 7f		 push	 127			; 0000007fH
  000a3	69 0d 00 00 00
	00 04 01 00 00	 imul	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000ad	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000b3	51		 push	 ecx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000c2	83 c0 01	 add	 eax, 1
  000c5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceString@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceString@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceString'', COMDAT

; 114  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceString> atlTraceString(_T("atlTraceString"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MBNHGHMI@atlTraceString@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceString@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceString''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 00 02 00	 push	 131072			; 00020000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PGMFNIFA@atlTraceException@
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00013	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000c	68 00 20 00 00	 push	 8192			; 00002000H
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001a	83 c4 08	 add	 esp, 8

; 482  : }

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1605 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1606 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __vsnprintf_s_l
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 1607 :     }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1584 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1585 :         int const _Result = __stdio_common_vsnprintf_s(

  00009	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	52		 push	 edx
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00033	83 c4 20	 add	 esp, 32			; 00000020H
  00036	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1586 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1587 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1588 : 
; 1589 :         return _Result < 0 ? -1 : _Result;

  00039	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003d	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003f	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00046	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00048	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004b	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004e	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1590 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1538 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1539 :             int _Result;
; 1540 :             va_list _ArgList;
; 1541 :             __crt_va_start(_ArgList, _Format);

  00009	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1542 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vswprintf_s_l
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1543 :             __crt_va_end(_ArgList);

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1544 :             return _Result;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1545 :         }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0002f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00032	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  00035	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00039	7d 09		 jge	 SHORT $LN3@vswprintf_
  0003b	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00042	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00044	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00047	89 45 b8	 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0004a	8b 45 b8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -68						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _IsEqualGUID
  00016	83 c4 08	 add	 esp, 8
  00019	85 c0		 test	 eax, eax
  0001b	74 09		 je	 SHORT $LN3@
  0001d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00024	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00026	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  0002d	8a 45 bc	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -68						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memcmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN3@IsEqualGUI
  0001f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  00028	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]

; 162  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\serverusermanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
