; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\游戏服务\GamePropertyManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
	ORG $+3
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IGameServiceManager@@3U_GUID@@B DD 04b2b9d8fH	; IID_IGameServiceManager
	DW	0ce1bH
	DW	044f3H
	DB	0a5H
	DB	022H
	DB	065H
	DB	01aH
	DB	065H
	DB	0c9H
	DB	0aH
	DB	025H
?IID_IAndroidUserItemSink@@3U_GUID@@B DD 01e8a1918H	; IID_IAndroidUserItemSink
	DW	0572bH
	DW	0453bH
	DB	0bcH
	DB	0bH
	DB	06bH
	DB	061H
	DB	070H
	DB	0a3H
	DB	03cH
	DB	0caH
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	_wmemcpy
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	??0?$tuple@$$V@std@@QAE@XZ			; std::tuple<>::tuple<>
PUBLIC	??0?$tuple@$$V@std@@QAE@ABV01@@Z		; std::tuple<>::tuple<>
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@XZ	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::CWHArray<tagPropertyInfo,tagPropertyInfo const &>
PUBLIC	??1?$CWHArray@UtagPropertyInfo@@ABU1@@@UAE@XZ	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::~CWHArray<tagPropertyInfo,tagPropertyInfo const &>
PUBLIC	?GetCount@?$CWHArray@UtagPropertyInfo@@ABU1@@@QBEHXZ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetCount
PUBLIC	?GetData@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEPAUtagPropertyInfo@@XZ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetData
PUBLIC	?ElementAt@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::SetSize
PUBLIC	??A?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::AllocMemory
PUBLIC	??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@ABV0@@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::CWHArray<tagPropertyInfo,tagPropertyInfo const &>
PUBLIC	??4?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAV0@ABV0@@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator=
PUBLIC	??_G?$CWHArray@UtagPropertyInfo@@ABU1@@@UAEPAXI@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`scalar deleting destructor'
PUBLIC	??0CGamePropertyManager@@QAE@XZ			; CGamePropertyManager::CGamePropertyManager
PUBLIC	??1CGamePropertyManager@@UAE@XZ			; CGamePropertyManager::~CGamePropertyManager
PUBLIC	?SetGamePropertyInfo@CGamePropertyManager@@QAE_NQAUtagPropertyInfo@@G@Z ; CGamePropertyManager::SetGamePropertyInfo
PUBLIC	?SetGamePropertyBuff@CGamePropertyManager@@QAE_NKQBUtagPropertyBuff@@G@Z ; CGamePropertyManager::SetGamePropertyBuff
PUBLIC	?ClearUserBuff@CGamePropertyManager@@QAE_NK@Z	; CGamePropertyManager::ClearUserBuff
PUBLIC	?SearchPropertyItem@CGamePropertyManager@@QAEPAUtagPropertyInfo@@G@Z ; CGamePropertyManager::SearchPropertyItem
PUBLIC	?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z ; CGamePropertyManager::SearchValidPropertyBuff
PUBLIC	??0CGamePropertyManager@@QAE@ABV0@@Z		; CGamePropertyManager::CGamePropertyManager
PUBLIC	??4CGamePropertyManager@@QAEAAV0@ABV0@@Z	; CGamePropertyManager::operator=
PUBLIC	??_GCGamePropertyManager@@UAEPAXI@Z		; CGamePropertyManager::`scalar deleting destructor'
PUBLIC	??_ECGamePropertyManager@@UAEPAXI@Z		; CGamePropertyManager::`vector deleting destructor'
PUBLIC	?IsValid@@YA_NUtagPropertyBuff@@@Z		; IsValid
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::max_size
PUBLIC	??0?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
PUBLIC	?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Construct
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
PUBLIC	?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getpfirst
PUBLIC	?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
PUBLIC	?_Orphan_all@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_all
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freeheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freenode0
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
PUBLIC	??R?$less@K@std@@QBE_NABK0@Z			; std::less<unsigned long>::operator()
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Min
PUBLIC	?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
PUBLIC	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
PUBLIC	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Extract
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@K@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
PUBLIC	??0?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::max_size
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::clear
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::lower_bound
PUBLIC	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Destroy_if_node
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Erase
PUBLIC	?_Compare@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE_NABK0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Compare
PUBLIC	?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_ptr
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tidy
PUBLIC	?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
PUBLIC	??0?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >
PUBLIC	??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[]
PUBLIC	??1?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::~map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >
PUBLIC	??0?$allocator@UtagPropertyBuff@@@std@@QAE@XZ	; std::allocator<tagPropertyBuff>::allocator<tagPropertyBuff>
PUBLIC	?deallocate@?$allocator@UtagPropertyBuff@@@std@@QAEXQAUtagPropertyBuff@@I@Z ; std::allocator<tagPropertyBuff>::deallocate
PUBLIC	?allocate@?$allocator@UtagPropertyBuff@@@std@@QAEPAUtagPropertyBuff@@I@Z ; std::allocator<tagPropertyBuff>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAIABV?$allocator@UtagPropertyBuff@@@2@@Z ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SA?AV?$allocator@UtagPropertyBuff@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::select_on_container_copy_construction
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tagPropertyBuff> >::_Vector_val<std::_Simple_types<tagPropertyBuff> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second
PUBLIC	??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
PUBLIC	??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
PUBLIC	??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::~vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
PUBLIC	?push_back@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXABUtagPropertyBuff@@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::push_back
PUBLIC	?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::clear
PUBLIC	?empty@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBE_NXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::empty
PUBLIC	?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::size
PUBLIC	?max_size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::max_size
PUBLIC	?capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABE_NXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Has_unused_capacity
PUBLIC	??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::operator[]
PUBLIC	?_Umove@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU3@00@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00U?$integral_constant@_N$00@2@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEII@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Calculate_growth
PUBLIC	?_Buy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE_NI@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Buy
PUBLIC	?_Change_array@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXQAUtagPropertyBuff@@II@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Change_array
PUBLIC	?_Tidy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Tidy
PUBLIC	?_Xlength@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@CAXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Orphan_range
PUBLIC	??$try_emplace@$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::try_emplace<>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator--
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
PUBLIC	??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator=
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator!=
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator=
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator->
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--
PUBLIC	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>
PUBLIC	??1?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
PUBLIC	??_G?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEPAXI@Z ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::`scalar deleting destructor'
PUBLIC	??$emplace_back@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABUtagPropertyBuff@@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::emplace_back<tagPropertyBuff const &>
PUBLIC	??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z ; std::forward<tagPropertyBuff const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE@ABUtagPropertyBuff@@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_back_with_unused_capacity<tagPropertyBuff const &>
PUBLIC	??$_Unfancy@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@PAU1@@Z ; std::_Unfancy<tagPropertyBuff>
PUBLIC	??$construct@UtagPropertyBuff@@ABU1@@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAXAAV?$allocator@UtagPropertyBuff@@@1@QAUtagPropertyBuff@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::construct<tagPropertyBuff,tagPropertyBuff const &>
PUBLIC	??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_reallocate<tagPropertyBuff const &>
PUBLIC	??$?0V?$allocator@UtagPropertyBuff@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::allocator<tagPropertyBuff>,void>
PUBLIC	??$_Ucopy@PAUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU2@00@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Ucopy<tagPropertyBuff *>
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@SAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@AAU32@@Z ; std::pointer_traits<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > *>::pointer_to
PUBLIC	??$_Destroy_range@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@@Z ; std::_Destroy_range<std::allocator<tagPropertyBuff> >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0UtagPropertyBuff@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagPropertyBuff@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><tagPropertyBuff>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >
PUBLIC	??$?0U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >
PUBLIC	??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
PUBLIC	??$_Get_size_of_n@$0CE@@std@@YAII@Z		; std::_Get_size_of_n<36>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$swap@DX@std@@YAXAAD0@Z			; std::swap<char,void>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Try_emplace<unsigned long const &>
PUBLIC	??$forward@V?$allocator@UtagPropertyBuff@@@std@@@std@@YA$$QAV?$allocator@UtagPropertyBuff@@@0@AAV10@@Z ; std::forward<std::allocator<tagPropertyBuff> >
PUBLIC	??$?0V?$allocator@UtagPropertyBuff@@@std@@$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><std::allocator<tagPropertyBuff> >
PUBLIC	??$_Uninitialized_copy@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z ; std::_Uninitialized_copy<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >
PUBLIC	??$_Destroy_range1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<tagPropertyBuff> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
PUBLIC	??$forward@ABU?$less@K@std@@@std@@YAABU?$less@K@0@ABU10@@Z ; std::forward<std::less<unsigned long> const &>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1><>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$move@AAD@std@@YA$$QADAAD@Z			; std::move<char &>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<tagPropertyBuff> > >
PUBLIC	??$_Uninitialized_move@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z ; std::_Uninitialized_move<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >
PUBLIC	??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
PUBLIC	??$forward@ABK@std@@YAABKABK@Z			; std::forward<unsigned long const &>
PUBLIC	??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z ; std::forward_as_tuple<unsigned long const &>
PUBLIC	??0?$tuple@ABK@std@@QAE@$$QAV01@@Z		; std::tuple<unsigned long const &>::tuple<unsigned long const &>
PUBLIC	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
PUBLIC	??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool,0>
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &,bool,0>
PUBLIC	??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z ; std::_Get_unwrapped<tagPropertyBuff>
PUBLIC	??$_Idl_distance@PAUtagPropertyBuff@@PAU1@@std@@YA@ABQAUtagPropertyBuff@@0@Z ; std::_Idl_distance<tagPropertyBuff *,tagPropertyBuff *>
PUBLIC	??$_Idl_distance1@PAUtagPropertyBuff@@PAU1@@std@@YAHABQAUtagPropertyBuff@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<tagPropertyBuff *,tagPropertyBuff *>
PUBLIC	??$_Get_unwrapped_n@UtagPropertyBuff@@H$0A@@std@@YAPAUtagPropertyBuff@@QAU1@H@Z ; std::_Get_unwrapped_n<tagPropertyBuff,int,0>
PUBLIC	??$_Ptr_copy_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z ; std::_Ptr_copy_cat<tagPropertyBuff,tagPropertyBuff>
PUBLIC	??$_Uninitialized_copy_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >
PUBLIC	??$_Seek_wrapped@UtagPropertyBuff@@@std@@YAXAAPAUtagPropertyBuff@@QAU1@@Z ; std::_Seek_wrapped<tagPropertyBuff>
PUBLIC	??$_Ptr_move_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z ; std::_Ptr_move_cat<tagPropertyBuff,tagPropertyBuff>
PUBLIC	??$_Uninitialized_move_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >
PUBLIC	??$_Lbound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Lbound<unsigned long>
PUBLIC	??$_Kfn@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@SAABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0>::_Kfn<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
PUBLIC	??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z		; std::tuple<unsigned long const &>::tuple<unsigned long const &><unsigned long const &,0>
PUBLIC	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
PUBLIC	??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::forward<std::tuple<unsigned long const &> >
PUBLIC	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_hint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > >
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &>
PUBLIC	??$_Copy_memmove@PAUtagPropertyBuff@@PAU1@@std@@YAPAUtagPropertyBuff@@PAU1@00@Z ; std::_Copy_memmove<tagPropertyBuff *,tagPropertyBuff *>
PUBLIC	??$_Debug_lt_pred@ABU?$less@K@std@@ABKABK@std@@YA_NABU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> const &,unsigned long const &,unsigned long const &>
PUBLIC	??$?0U_Exact_args_t@std@@ABK$$V$0A@@?$tuple@ABK@std@@QAE@U_Exact_args_t@1@ABK@Z ; std::tuple<unsigned long const &>::tuple<unsigned long const &><std::_Exact_args_t,unsigned long const &,0>
PUBLIC	??$construct@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_nohint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z	; std::_Tuple_val<unsigned long const &>::_Tuple_val<unsigned long const &><unsigned long const &>
PUBLIC	??$?0ABK$$Z$$V@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><unsigned long const &>
PUBLIC	??$_Buy_if_not_node@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buy_if_not_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
PUBLIC	??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::tuple<unsigned long const &>,std::tuple<>,0>
PUBLIC	??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::move<std::tuple<unsigned long const &> &>
PUBLIC	??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z	; std::get<0,unsigned long const &>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><>
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`vftable'
PUBLIC	?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
PUBLIC	??_7CGamePropertyManager@@6B@			; CGamePropertyManager::`vftable'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1LO@IAGBENIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BMC@CJDBOPPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1BMA@DJJFGNNP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CF@JILFNJOL@map?1set?5erase?5iterator?5outside?5@ ; `string'
PUBLIC	??_C@_1CJI@GONIBODA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_1BMC@IJMMAGDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ ; `string'
PUBLIC	??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_1BHI@FOOCHJIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM@ ; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@ ; `string'
PUBLIC	??_C@_1CKG@DBCIFINF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@ ; `string'
PUBLIC	??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@ ; `string'
PUBLIC	??_C@_1BMC@HKPOLKPL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@ ; `string'
PUBLIC	??_R4?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@UtagPropertyInfo@@ABU1@@@@8	; CWHArray<tagPropertyInfo,tagPropertyInfo const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@UtagPropertyInfo@@ABU1@@@8	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@UtagPropertyInfo@@ABU1@@@8	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@UtagPropertyInfo@@ABU1@@@8 ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGamePropertyManager@@6B@			; CGamePropertyManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGamePropertyManager@@@8		; CGamePropertyManager `RTTI Type Descriptor'
PUBLIC	??_R3CGamePropertyManager@@8			; CGamePropertyManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGamePropertyManager@@8			; CGamePropertyManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGamePropertyManager@@8		; CGamePropertyManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	??_E?$CWHArray@UtagPropertyInfo@@ABU1@@@UAEPAXI@Z:PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A DB 0cH DUP (?) ; CGamePropertyManager::m_PropertyBuffMap
_BSS	ENDS
CRT$XCU	SEGMENT
??m_PropertyBuffMap$initializer$@CGamePropertyManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ ; ??m_PropertyBuffMap$initializer$@CGamePropertyManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CGamePropertyManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGamePropertyManager@@8 DD FLAT:??_R0?AVCGamePropertyManager@@@8 ; CGamePropertyManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGamePropertyManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CGamePropertyManager@@8
rdata$r	SEGMENT
??_R2CGamePropertyManager@@8 DD FLAT:??_R1A@?0A@EA@CGamePropertyManager@@8 ; CGamePropertyManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGamePropertyManager@@8
rdata$r	SEGMENT
??_R3CGamePropertyManager@@8 DD 00H			; CGamePropertyManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGamePropertyManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGamePropertyManager@@@8
data$r	SEGMENT
??_R0?AVCGamePropertyManager@@@8 DD FLAT:??_7type_info@@6B@ ; CGamePropertyManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGamePropertyManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGamePropertyManager@@6B@
rdata$r	SEGMENT
??_R4CGamePropertyManager@@6B@ DD 00H			; CGamePropertyManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGamePropertyManager@@@8
	DD	FLAT:??_R3CGamePropertyManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@UtagPropertyInfo@@ABU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@UtagPropertyInfo@@ABU1@@@8 DD FLAT:??_R0?AV?$CWHArray@UtagPropertyInfo@@ABU1@@@@8 ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@UtagPropertyInfo@@ABU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@UtagPropertyInfo@@ABU1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@UtagPropertyInfo@@ABU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@UtagPropertyInfo@@ABU1@@@8 ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@UtagPropertyInfo@@ABU1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@UtagPropertyInfo@@ABU1@@@8 DD 00H	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@UtagPropertyInfo@@ABU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@UtagPropertyInfo@@ABU1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@UtagPropertyInfo@@ABU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@UtagPropertyInfo@@ABU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@ DD 00H	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@UtagPropertyInfo@@ABU1@@@@8
	DD	FLAT:??_R3?$CWHArray@UtagPropertyInfo@@ABU1@@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@ DB 'map/set<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@ DB 'cannot decre'
	DB	'ment begin map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BMC@HKPOLKPL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BMC@HKPOLKPL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l'
	DB	00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H
	DB	'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '-', 00H, '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@
CONST	SEGMENT
??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@ DB 'cannot decreme'
	DB	'nt value-initialized map/set iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@
CONST	SEGMENT
??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, 's', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CKG@DBCIFINF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CKG@DBCIFINF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'n', 00H, 'g', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y', 00H
	DB	'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, '>', 00H, ' ', 00H, '>', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H
	DB	'e', 00H, 's', 00H, 's', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'n', 00H, 'g', 00H, '>', 00H, ',', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'p', 00H, 'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n'
	DB	00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'l', 00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H
	DB	'a', 00H, 'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	',', 00H, '0', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'I', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, '_', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@
CONST	SEGMENT
??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@ DB 'map/set insert '
	DB	'iterator outside range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
CONST	SEGMENT
??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, '_', 00H, 'l', 00H, 't'
	DB	00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BHI@FOOCHJIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM@
CONST	SEGMENT
??_C@_1BHI@FOOCHJIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H
	DB	's', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_'
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H
	DB	'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H
	DB	'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, '_', 00H, 'E', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, 'c', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
CONST	SEGMENT
??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ DB 'cannot incre'
	DB	'ment end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BMC@IJMMAGDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BMC@IJMMAGDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l'
	DB	00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H
	DB	'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '+', 00H, '+', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized map/set iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, 's', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CJI@GONIBODA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1CJI@GONIBODA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'n', 00H, 'g', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y', 00H
	DB	'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, '>', 00H, ' ', 00H, '>', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H
	DB	'e', 00H, 's', 00H, 's', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'n', 00H, 'g', 00H, '>', 00H, ',', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'p', 00H, 'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n'
	DB	00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'l', 00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H
	DB	'a', 00H, 'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	',', 00H, '0', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JILFNJOL@map?1set?5erase?5iterator?5outside?5@
CONST	SEGMENT
??_C@_0CF@JILFNJOL@map?1set?5erase?5iterator?5outside?5@ DB 'map/set eras'
	DB	'e iterator outside range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BMA@DJJFGNNP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BMA@DJJFGNNP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l'
	DB	00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H
	DB	'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BMC@CJDBOPPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BMC@CJDBOPPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l'
	DB	00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, 'P', 00H
	DB	'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'y'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xtree', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ DB 'map/set iterato'
	DB	'rs incompatible', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@IAGBENIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1LO@IAGBENIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H
	DB	'a', 00H, 'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'g'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'y', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CGamePropertyManager@@6B@
CONST	SEGMENT
??_7CGamePropertyManager@@6B@ DD FLAT:??_R4CGamePropertyManager@@6B@ ; CGamePropertyManager::`vftable'
	DD	FLAT:??_ECGamePropertyManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@ DD FLAT:??_R4?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@UtagPropertyInfo@@ABU1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 061H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA DD 072H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$0
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z DD 00H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$8
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$5
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$0
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z DD 02H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$12
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$3
	DD	01H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$7
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$9
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$10
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$0
__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$2
__ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z$1
__ehfuncinfo$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z$0
__ehfuncinfo$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z$0
__ehfuncinfo$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ$2
__ehfuncinfo$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z$0
__ehfuncinfo$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$3
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z$1
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$0
__unwindtable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$2
__ehfuncinfo$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$0
__unwindtable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$2
__ehfuncinfo$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ$0
__unwindtable$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECGamePropertyManager@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z$0
__ehfuncinfo$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$allocator@UtagPropertyBuff@@@std@@QAE@XZ ; std::allocator<tagPropertyBuff>::allocator<tagPropertyBuff>
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tagPropertyBuff> >::_Vector_val<std::_Simple_types<tagPropertyBuff> >

; 279  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z PROC	; std::get<0,unsigned long const &>, COMDAT

; 978  : 	{	// get rvalue reference to _Index element of tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 979  : 	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
; 980  : 	typedef tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
; 981  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  00014	83 c4 04	 add	 esp, 4

; 982  : 	}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z ENDP	; std::get<0,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z PROC ; std::move<std::tuple<unsigned long const &> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ENDP ; std::move<std::tuple<unsigned long const &> &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::tuple<unsigned long const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 1306 : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1304 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$move@AAV?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::move<std::tuple<unsigned long const &> &>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$get@$0A@ABK@std@@YAABK$$QAV?$tuple@ABK@0@@Z ; std::get<0,unsigned long const &>
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	89 11		 mov	 DWORD PTR [ecx], edx

; 1305 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 04	 add	 ecx, 4
  0002e	e8 00 00 00 00	 call	 ??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >

; 1307 : 		}

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::tuple<unsigned long const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buy_if_not_node@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buy_if_not_node@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buy_if_not_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>, COMDAT
; _this$ = ecx

; 1574 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1575 : 		return (_Node);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1576 : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$_Buy_if_not_node@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buy_if_not_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0ABK$$Z$$V@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -70						; size = 1
$T2 = -69						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABK$$Z$$V@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z PROC ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><unsigned long const &>, COMDAT
; _this$ = ecx

; 1321 : 		{	// construct from pair of tuples

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1318 : 		: pair(_Val1, _Val2,

  0000c	0f b6 45 bb	 movzx	 eax, BYTE PTR $T2[ebp]
  00010	50		 push	 eax
  00011	0f b6 4d ba	 movzx	 ecx, BYTE PTR $T1[ebp]
  00015	51		 push	 ecx
  00016	8d 55 10	 lea	 edx, DWORD PTR __Val2$[ebp]
  00019	52		 push	 edx
  0001a	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABK@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@AAV?$tuple@ABK@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::tuple<unsigned long const &>,std::tuple<>,0>

; 1322 : 		}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABK$$Z$$V@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Arg$ = 8						; size = 4
??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z PROC		; std::_Tuple_val<unsigned long const &>::_Tuple_val<unsigned long const &><unsigned long const &>, COMDAT
; _this$ = ecx

; 237  : 		{	// construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  : 		: _Val(_STD forward<_Other>(_Arg))

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  00015	83 c4 04	 add	 esp, 4
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	89 01		 mov	 DWORD PTR [ecx], eax

; 238  : 		}

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z ENDP		; std::_Tuple_val<unsigned long const &>::_Tuple_val<unsigned long const &><unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 318  : 		{	// construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv95 = -200						; size = 4
tv288 = -193						; size = 1
tv285 = -193						; size = 1
tv282 = -193						; size = 1
tv195 = -193						; size = 1
tv287 = -192						; size = 4
tv281 = -192						; size = 4
tv269 = -192						; size = 4
tv235 = -192						; size = 4
tv286 = -188						; size = 4
tv284 = -188						; size = 4
tv283 = -188						; size = 4
tv275 = -188						; size = 4
tv271 = -188						; size = 4
tv262 = -188						; size = 4
tv253 = -188						; size = 4
tv152 = -188						; size = 4
tv149 = -188						; size = 4
$T2 = -184						; size = 4
$T3 = -177						; size = 1
$T4 = -176						; size = 12
$T5 = -161						; size = 1
$T6 = -160						; size = 12
$T7 = -145						; size = 1
$T8 = -144						; size = 12
$T9 = -129						; size = 1
$T10 = -128						; size = 12
$T11 = -113						; size = 1
__Where$12 = -48					; size = 12
__Addleft$13 = -33					; size = 1
__Trynode$14 = -32					; size = 4
__Wherenode$15 = -28					; size = 4
__My_data$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_nohint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>, COMDAT
; _this$ = ecx

; 1733 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00032	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 1734 : 		auto& _My_data = this->_Get_data();

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00044	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1735 : 		_TRY_BEGIN

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1736 : 		_Nodeptr _Wherenode = _My_data._Myhead;

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	89 4d e4	 mov	 DWORD PTR __Wherenode$15[ebp], ecx

; 1737 : 		_Nodeptr _Trynode = _Wherenode->_Parent;

  00057	8b 45 e4	 mov	 eax, DWORD PTR __Wherenode$15[ebp]
  0005a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005d	89 4d e0	 mov	 DWORD PTR __Trynode$14[ebp], ecx

; 1738 : 		bool _Addleft = true;	// add to left of head if tree empty

  00060	c6 45 df 01	 mov	 BYTE PTR __Addleft$13[ebp], 1
$LN2@Insert_noh:

; 1739 : 
; 1740 : 		while (!_Trynode->_Isnil)

  00064	8b 45 e0	 mov	 eax, DWORD PTR __Trynode$14[ebp]
  00067	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  0006b	85 c9		 test	 ecx, ecx
  0006d	0f 85 04 01 00
	00		 jne	 $LN3@Insert_noh

; 1741 : 			{	// look for leaf to insert before (_Addleft) or after
; 1742 : 			_Wherenode = _Trynode;

  00073	8b 45 e0	 mov	 eax, DWORD PTR __Trynode$14[ebp]
  00076	89 45 e4	 mov	 DWORD PTR __Wherenode$15[ebp], eax

; 1743 : 			if (_Leftish)

  00079	0f b6 45 0c	 movzx	 eax, BYTE PTR __Leftish$[ebp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 75		 je	 SHORT $LN5@Insert_noh

; 1744 : 				{
; 1745 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  00081	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00084	50		 push	 eax
  00085	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  0008d	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv253[ebp], eax
  00093	8b 4d e0	 mov	 ecx, DWORD PTR __Trynode$14[ebp]
  00096	51		 push	 ecx
  00097	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  0009f	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv235[ebp], eax
  000a5	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv253[ebp]
  000ab	52		 push	 edx
  000ac	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv235[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	88 85 3f ff ff
	ff		 mov	 BYTE PTR tv195[ebp], al
  000ca	0f b6 8d 3f ff
	ff ff		 movzx	 ecx, BYTE PTR tv195[ebp]
  000d1	85 c9		 test	 ecx, ecx
  000d3	75 0c		 jne	 SHORT $LN16@Insert_noh
  000d5	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv95[ebp], 1
  000df	eb 0a		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  000e1	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv95[ebp], 0
$LN17@Insert_noh:
  000eb	8a 95 38 ff ff
	ff		 mov	 dl, BYTE PTR tv95[ebp]
  000f1	88 55 df	 mov	 BYTE PTR __Addleft$13[ebp], dl

; 1746 : 					this->_Key(_Trynode),
; 1747 : 					this->_Kfn(_Val));	// favor left end
; 1748 : 				}
; 1749 : 			else

  000f4	eb 52		 jmp	 SHORT $LN6@Insert_noh
$LN5@Insert_noh:

; 1750 : 				{
; 1751 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  000f6	8b 45 e0	 mov	 eax, DWORD PTR __Trynode$14[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00102	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv152[ebp], eax
  00108	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  00114	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv281[ebp], eax
  0011a	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv152[ebp]
  00120	52		 push	 edx
  00121	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv281[ebp]
  00127	50		 push	 eax
  00128	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	88 85 3f ff ff
	ff		 mov	 BYTE PTR tv282[ebp], al
  0013f	8a 8d 3f ff ff
	ff		 mov	 cl, BYTE PTR tv282[ebp]
  00145	88 4d df	 mov	 BYTE PTR __Addleft$13[ebp], cl
$LN6@Insert_noh:

; 1752 : 					this->_Kfn(_Val),
; 1753 : 					this->_Key(_Trynode));	// favor right end
; 1754 : 				}
; 1755 : 
; 1756 : 			_Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;

  00148	0f b6 45 df	 movzx	 eax, BYTE PTR __Addleft$13[ebp]
  0014c	85 c0		 test	 eax, eax
  0014e	74 0d		 je	 SHORT $LN18@Insert_noh
  00150	8b 4d e0	 mov	 ecx, DWORD PTR __Trynode$14[ebp]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv149[ebp], edx
  0015b	eb 0c		 jmp	 SHORT $LN19@Insert_noh
$LN18@Insert_noh:
  0015d	8b 45 e0	 mov	 eax, DWORD PTR __Trynode$14[ebp]
  00160	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00163	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv149[ebp], ecx
$LN19@Insert_noh:
  00169	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv149[ebp]
  0016f	89 55 e0	 mov	 DWORD PTR __Trynode$14[ebp], edx

; 1757 : 			}

  00172	e9 ed fe ff ff	 jmp	 $LN2@Insert_noh
$LN3@Insert_noh:

; 1758 : 
; 1759 : #pragma warning(push)
; 1760 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1761 : 		if (this->_Multi)

  00177	33 c0		 xor	 eax, eax
  00179	74 67		 je	 SHORT $LN7@Insert_noh

; 1762 : 			{
; 1763 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  0017b	c6 45 8f 01	 mov	 BYTE PTR $T11[ebp], 1
  0017f	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00182	50		 push	 eax
  00183	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00186	51		 push	 ecx
  00187	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  0018c	83 c4 04	 add	 esp, 4
  0018f	50		 push	 eax
  00190	8b 55 e4	 mov	 edx, DWORD PTR __Wherenode$15[ebp]
  00193	52		 push	 edx
  00194	0f b6 45 df	 movzx	 eax, BYTE PTR __Addleft$13[ebp]
  00198	50		 push	 eax
  00199	8d 4d 80	 lea	 ecx, DWORD PTR $T10[ebp]
  0019c	51		 push	 ecx
  0019d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001a0	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  001a5	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv262[ebp], eax
  001ab	8d 55 8f	 lea	 edx, DWORD PTR $T11[ebp]
  001ae	52		 push	 edx
  001af	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv262[ebp]
  001b5	50		 push	 eax
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001b9	e8 00 00 00 00	 call	 ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool,0>
  001be	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  001c4	83 c9 01	 or	 ecx, 1
  001c7	89 8d 48 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  001cd	8d 4d 80	 lea	 ecx, DWORD PTR $T10[ebp]
  001d0	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001d5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001d8	e9 65 02 00 00	 jmp	 $LN15@Insert_noh

; 1764 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1765 : 			}
; 1766 : 		else

  001dd	e9 33 02 00 00	 jmp	 $LN8@Insert_noh
$LN7@Insert_noh:

; 1767 : 			{	// insert only if unique
; 1768 : 			iterator _Where = iterator(_Wherenode, _STD addressof(_My_data));

  001e2	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  001eb	83 c4 04	 add	 esp, 4
  001ee	50		 push	 eax
  001ef	8b 4d e4	 mov	 ecx, DWORD PTR __Wherenode$15[ebp]
  001f2	51		 push	 ecx
  001f3	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  001f6	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  001fb	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv283[ebp], eax
  00201	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 1769 : 			if (!_Addleft)

  00205	0f b6 45 df	 movzx	 eax, BYTE PTR __Addleft$13[ebp]
  00209	85 c0		 test	 eax, eax
  0020b	75 05		 jne	 SHORT $LN9@Insert_noh
  0020d	e9 e1 00 00 00	 jmp	 $LN10@Insert_noh
$LN9@Insert_noh:

; 1770 : 				{	// need to test if insert after is okay
; 1771 : 				}
; 1772 : 			else if (_Where == begin())

  00212	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00218	50		 push	 eax
  00219	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0021c	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
  00221	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  00227	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0022d	89 8d 40 ff ff
	ff		 mov	 DWORD PTR tv269[ebp], ecx
  00233	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00237	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR tv269[ebp]
  0023d	52		 push	 edx
  0023e	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00241	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  00246	88 85 3f ff ff
	ff		 mov	 BYTE PTR tv285[ebp], al
  0024c	8a 85 3f ff ff
	ff		 mov	 al, BYTE PTR tv285[ebp]
  00252	88 85 7f ff ff
	ff		 mov	 BYTE PTR $T9[ebp], al
  00258	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0025c	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00262	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00267	0f b6 8d 7f ff
	ff ff		 movzx	 ecx, BYTE PTR $T9[ebp]
  0026e	85 c9		 test	 ecx, ecx
  00270	74 79		 je	 SHORT $LN11@Insert_noh

; 1773 : 				{
; 1774 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  00272	c6 85 6f ff ff
	ff 01		 mov	 BYTE PTR $T7[ebp], 1
  00279	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0027c	50		 push	 eax
  0027d	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00280	51		 push	 ecx
  00281	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00286	83 c4 04	 add	 esp, 4
  00289	50		 push	 eax
  0028a	8b 55 e4	 mov	 edx, DWORD PTR __Wherenode$15[ebp]
  0028d	52		 push	 edx
  0028e	6a 01		 push	 1
  00290	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00296	50		 push	 eax
  00297	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0029f	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv271[ebp], eax
  002a5	8d 8d 6f ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  002ab	51		 push	 ecx
  002ac	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv271[ebp]
  002b2	52		 push	 edx
  002b3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  002b6	e8 00 00 00 00	 call	 ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool,0>
  002bb	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  002c1	83 c8 01	 or	 eax, 1
  002c4	89 85 48 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  002ca	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  002d0	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  002d5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  002d9	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  002dc	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  002e1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  002e4	e9 59 01 00 00	 jmp	 $LN15@Insert_noh

; 1775 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1776 : 				}
; 1777 : 			else

  002e9	eb 08		 jmp	 SHORT $LN10@Insert_noh
$LN11@Insert_noh:

; 1778 : 				{
; 1779 : 				--_Where;	// need to test if insert before is okay

  002eb	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  002ee	e8 00 00 00 00	 call	 ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--
$LN10@Insert_noh:

; 1780 : 				}
; 1781 : 
; 1782 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  002f3	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  002f6	50		 push	 eax
  002f7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002fa	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  002ff	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  00305	8b 4d d8	 mov	 ecx, DWORD PTR __Where$12[ebp+8]
  00308	51		 push	 ecx
  00309	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0030c	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00311	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00317	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv286[ebp]
  0031d	52		 push	 edx
  0031e	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  00324	50		 push	 eax
  00325	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00328	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00333	83 c4 0c	 add	 esp, 12			; 0000000cH
  00336	88 85 3f ff ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  0033c	0f b6 8d 3f ff
	ff ff		 movzx	 ecx, BYTE PTR tv288[ebp]
  00343	85 c9		 test	 ecx, ecx
  00345	74 7c		 je	 SHORT $LN13@Insert_noh

; 1783 : 				this->_Key(_Where._Ptr),
; 1784 : 				this->_Kfn(_Val)))
; 1785 : 				{
; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00347	c6 85 5f ff ff
	ff 01		 mov	 BYTE PTR $T5[ebp], 1
  0034e	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00351	50		 push	 eax
  00352	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00355	51		 push	 ecx
  00356	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  0035b	83 c4 04	 add	 esp, 4
  0035e	50		 push	 eax
  0035f	8b 55 e4	 mov	 edx, DWORD PTR __Wherenode$15[ebp]
  00362	52		 push	 edx
  00363	0f b6 45 df	 movzx	 eax, BYTE PTR __Addleft$13[ebp]
  00367	50		 push	 eax
  00368	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0036e	51		 push	 ecx
  0036f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00372	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00377	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  0037d	8d 95 5f ff ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  00383	52		 push	 edx
  00384	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv275[ebp]
  0038a	50		 push	 eax
  0038b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0038e	e8 00 00 00 00	 call	 ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool,0>
  00393	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00399	83 c9 01	 or	 ecx, 1
  0039c	89 8d 48 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  003a2	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  003a8	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  003ad	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  003b1	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  003b4	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  003b9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  003bc	e9 81 00 00 00	 jmp	 $LN15@Insert_noh

; 1787 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1788 : 				}
; 1789 : 			else

  003c1	eb 46		 jmp	 SHORT $LN14@Insert_noh
$LN13@Insert_noh:

; 1790 : 				{	// duplicate, don't insert
; 1791 : 				_Destroy_if_node(_Newnode);

  003c3	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  003c6	50		 push	 eax
  003c7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003ca	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Destroy_if_node

; 1792 : 				return (_Pairib(_Where, false));

  003cf	c6 85 4f ff ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  003d6	8d 85 4f ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003dc	50		 push	 eax
  003dd	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  003e0	51		 push	 ecx
  003e1	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  003e4	e8 00 00 00 00	 call	 ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &,bool,0>
  003e9	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  003ef	83 ca 01	 or	 edx, 1
  003f2	89 95 48 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  003f8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  003fc	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  003ff	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00404	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00407	eb 39		 jmp	 SHORT $LN15@Insert_noh
$LN14@Insert_noh:

; 1793 : 				}
; 1794 : 			}

  00409	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0040d	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00410	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN8@Insert_noh:
  00415	eb 1b		 jmp	 SHORT $LN20@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$0:

; 1795 : #pragma warning(pop)
; 1796 : 		_CATCH_ALL
; 1797 : 		_Destroy_if_node(_Newnode);

  00417	8b 45 14	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0041a	50		 push	 eax
  0041b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0041e	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Destroy_if_node

; 1798 : 		_RERAISE;

  00423	6a 00		 push	 0
  00425	6a 00		 push	 0
  00427	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1799 : 		_CATCH_END

  0042c	b8 00 00 00 00	 mov	 eax, $LN30@Insert_noh
  00431	c3		 ret	 0
$LN20@Insert_noh:
  00432	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00439	eb 07		 jmp	 SHORT $LN15@Insert_noh
$LN30@Insert_noh:
  0043b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN15@Insert_noh:

; 1800 : 		}

  00442	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00445	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0044c	59		 pop	 ecx
  0044d	5f		 pop	 edi
  0044e	5e		 pop	 esi
  0044f	5b		 pop	 ebx
  00450	8b e5		 mov	 esp, ebp
  00452	5d		 pop	 ebp
  00453	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$4:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Where$12[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$5:
  00008	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 34 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-204]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_nohint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z
_TEXT	SEGMENT
$T1 = -84						; size = 4
__Pnode$2 = -16						; size = 4
__Newnode$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>, COMDAT
; _this$ = ecx

; 1805 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 1806 : 		auto& _My_data = this->_Get_data();

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  0001b	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1807 : 		if (max_size() - 1 <= _My_data._Mysize)

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?max_size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::max_size
  00026	83 e8 01	 sub	 eax, 1
  00029	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0002c	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0002f	77 16		 ja	 SHORT $LN5@Insert_at

; 1808 : 			{	// tree would get too big, fail
; 1809 : 			_Destroy_if_node(_Node);

  00031	8b 45 18	 mov	 eax, DWORD PTR __Node$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Destroy_if_node

; 1810 : 			_Xlength_error("map/set<T> too long");

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
  00042	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN5@Insert_at:

; 1811 : 			}
; 1812 : 
; 1813 : 		_Nodeptr _Newnode = _Buy_if_not_node(_Node, _STD forward<_Valty>(_Val));

  00047	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 4d 18	 mov	 ecx, DWORD PTR __Node$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ??$_Buy_if_not_node@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PAU21@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buy_if_not_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00060	89 45 f4	 mov	 DWORD PTR __Newnode$[ebp], eax

; 1814 : 
; 1815 : 		++_My_data._Mysize;

  00063	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00066	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00069	83 c1 01	 add	 ecx, 1
  0006c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0006f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1816 : 		_Newnode->_Parent = _Wherenode;

  00072	8b 45 f4	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00075	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00078	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1817 : 
; 1818 : 		if (_Wherenode == _My_data._Myhead)

  0007b	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007e	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00081	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00084	75 29		 jne	 SHORT $LN6@Insert_at

; 1819 : 			{	// first node in tree, just set head values
; 1820 : 			_My_data._Root() = _Newnode;

  00086	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00091	89 08		 mov	 DWORD PTR [eax], ecx

; 1821 : 			_My_data._Lmost() = _Newnode;

  00093	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0009e	89 08		 mov	 DWORD PTR [eax], ecx

; 1822 : 			_My_data._Rmost() = _Newnode;

  000a0	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a3	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  000a8	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000ab	89 08		 mov	 DWORD PTR [eax], ecx
  000ad	eb 53		 jmp	 SHORT $LN7@Insert_at
$LN6@Insert_at:

; 1823 : 			}
; 1824 : 		else if (_Addleft)

  000af	0f b6 45 0c	 movzx	 eax, BYTE PTR __Addleft$[ebp]
  000b3	85 c0		 test	 eax, eax
  000b5	74 26		 je	 SHORT $LN8@Insert_at

; 1825 : 			{	// add to left of _Wherenode
; 1826 : 			_Wherenode->_Left = _Newnode;

  000b7	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000bd	89 08		 mov	 DWORD PTR [eax], ecx

; 1827 : 			if (_Wherenode == _My_data._Lmost())

  000bf	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000c2	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
  000c7	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  000ca	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000cc	75 0d		 jne	 SHORT $LN10@Insert_at

; 1828 : 				{
; 1829 : 				_My_data._Lmost() = _Newnode;

  000ce	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000d1	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000d9	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Insert_at:

; 1830 : 				}
; 1831 : 			}
; 1832 : 		else

  000db	eb 25		 jmp	 SHORT $LN7@Insert_at
$LN8@Insert_at:

; 1833 : 			{	// add to right of _Wherenode
; 1834 : 			_Wherenode->_Right = _Newnode;

  000dd	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  000e3	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1835 : 			if (_Wherenode == _My_data._Rmost())

  000e6	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000e9	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  000ee	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  000f1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000f3	75 0d		 jne	 SHORT $LN7@Insert_at

; 1836 : 				{
; 1837 : 				_My_data._Rmost() = _Newnode;

  000f5	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000f8	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00100	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Insert_at:

; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

  00102	8b 45 f4	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00105	89 45 f0	 mov	 DWORD PTR __Pnode$2[ebp], eax
$LN4@Insert_at:
  00108	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0010b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010e	0f be 51 0c	 movsx	 edx, BYTE PTR [ecx+12]
  00112	85 d2		 test	 edx, edx
  00114	0f 85 43 01 00
	00		 jne	 $LN3@Insert_at

; 1842 : 			{
; 1843 : 			if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left)

  0011a	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0011d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00120	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00123	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00126	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00129	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0012b	0f 85 97 00 00
	00		 jne	 $LN12@Insert_at

; 1844 : 				{	// fixup red-red in left subtree
; 1845 : 				_Wherenode = _Pnode->_Parent->_Parent->_Right;

  00131	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00134	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00137	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0013d	89 45 10	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 1846 : 				if (_Wherenode->_Color == this->_Red)

  00140	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00143	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  00147	85 c9		 test	 ecx, ecx
  00149	75 2c		 jne	 SHORT $LN14@Insert_at

; 1847 : 					{	// parent has two red children, blacken both
; 1848 : 					_Pnode->_Parent->_Color = this->_Black;

  0014b	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0014e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00151	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1849 : 					_Wherenode->_Color = this->_Black;

  00155	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00158	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1850 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

  0015c	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0015f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00162	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00165	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 1851 : 					_Pnode = _Pnode->_Parent->_Parent;

  00169	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0016c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00172	89 55 f0	 mov	 DWORD PTR __Pnode$2[ebp], edx

; 1852 : 					}
; 1853 : 				else

  00175	eb 4c		 jmp	 SHORT $LN15@Insert_at
$LN14@Insert_at:

; 1854 : 					{	// parent has red and black children
; 1855 : 					if (_Pnode == _Pnode->_Parent->_Right)

  00177	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0017a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0017d	8b 55 f0	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  00180	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00183	75 15		 jne	 SHORT $LN16@Insert_at

; 1856 : 						{	// rotate right child to left
; 1857 : 						_Pnode = _Pnode->_Parent;

  00185	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00188	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0018b	89 4d f0	 mov	 DWORD PTR __Pnode$2[ebp], ecx

; 1858 : 						_My_data._Lrotate(_Pnode);

  0018e	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00191	50		 push	 eax
  00192	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00195	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate
$LN16@Insert_at:

; 1859 : 						}
; 1860 : 
; 1861 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

  0019a	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0019d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a0	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1862 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

  001a4	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  001a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001aa	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001ad	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 1863 : 					_My_data._Rrotate(_Pnode->_Parent->_Parent);

  001b1	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  001b4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001ba	52		 push	 edx
  001bb	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  001be	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate
$LN15@Insert_at:

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

  001c3	e9 90 00 00 00	 jmp	 $LN13@Insert_at
$LN12@Insert_at:

; 1867 : 				{	// fixup red-red in right subtree
; 1868 : 				_Wherenode = _Pnode->_Parent->_Parent->_Left;

  001c8	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  001cb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001ce	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d1	8b 02		 mov	 eax, DWORD PTR [edx]
  001d3	89 45 10	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 1869 : 				if (_Wherenode->_Color == this->_Red)

  001d6	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  001d9	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  001dd	85 c9		 test	 ecx, ecx
  001df	75 2c		 jne	 SHORT $LN17@Insert_at

; 1870 : 					{	// parent has two red children, blacken both
; 1871 : 					_Pnode->_Parent->_Color = this->_Black;

  001e1	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  001e4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e7	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1872 : 					_Wherenode->_Color = this->_Black;

  001eb	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  001ee	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1873 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

  001f2	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  001f5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001f8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001fb	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 1874 : 					_Pnode = _Pnode->_Parent->_Parent;

  001ff	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00202	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00205	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00208	89 55 f0	 mov	 DWORD PTR __Pnode$2[ebp], edx

; 1875 : 					}
; 1876 : 				else

  0020b	eb 4b		 jmp	 SHORT $LN13@Insert_at
$LN17@Insert_at:

; 1877 : 					{	// parent has red and black children
; 1878 : 					if (_Pnode == _Pnode->_Parent->_Left)

  0020d	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00210	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00213	8b 55 f0	 mov	 edx, DWORD PTR __Pnode$2[ebp]
  00216	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00218	75 15		 jne	 SHORT $LN19@Insert_at

; 1879 : 						{	// rotate left child to right
; 1880 : 						_Pnode = _Pnode->_Parent;

  0021a	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0021d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00220	89 4d f0	 mov	 DWORD PTR __Pnode$2[ebp], ecx

; 1881 : 						_My_data._Rrotate(_Pnode);

  00223	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00226	50		 push	 eax
  00227	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0022a	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate
$LN19@Insert_at:

; 1882 : 						}
; 1883 : 
; 1884 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

  0022f	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00232	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00235	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1885 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

  00239	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0023c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0023f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00242	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 1886 : 					_My_data._Lrotate(_Pnode->_Parent->_Parent);

  00246	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00249	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0024c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0024f	52		 push	 edx
  00250	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00253	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate
$LN13@Insert_at:

; 1887 : 					}
; 1888 : 				}
; 1889 : 			}

  00258	e9 ab fe ff ff	 jmp	 $LN4@Insert_at
$LN3@Insert_at:

; 1890 : 
; 1891 : 		_My_data._Root()->_Color = this->_Black;	// root is always black

  0025d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00260	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  00265	8b 00		 mov	 eax, DWORD PTR [eax]
  00267	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1892 : 		return (iterator(_Newnode, _STD addressof(_My_data)));

  0026b	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  00274	83 c4 04	 add	 esp, 4
  00277	50		 push	 eax
  00278	8b 4d f4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0027b	51		 push	 ecx
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0027f	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  00284	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  00287	83 ca 01	 or	 edx, 1
  0028a	89 55 ac	 mov	 DWORD PTR $T1[ebp], edx
  0028d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN20@Insert_at:

; 1893 : 		}

  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	5b		 pop	 ebx
  00293	8b e5		 mov	 esp, ebp
  00295	5d		 pop	 ebp
  00296	c2 14 00	 ret	 20			; 00000014H
??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 14		 push	 20			; 00000014H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	51		 push	 ecx
  0001b	8b f4		 mov	 esi, esp
  0001d	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@ABV01@@Z ; std::tuple<>::tuple<>
  00031	51		 push	 ecx
  00032	8b f4		 mov	 esi, esp
  00034	8b 55 14	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::forward<std::tuple<unsigned long const &> >
  0003d	83 c4 04	 add	 esp, 4
  00040	50		 push	 eax
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ??0?$tuple@ABK@std@@QAE@$$QAV01@@Z ; std::tuple<unsigned long const &>::tuple<unsigned long const &>
  00048	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00051	83 c4 04	 add	 esp, 4
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	0f b6 d1	 movzx	 edx, cl
  00059	52		 push	 edx
  0005a	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  0005d	e8 00 00 00 00	 call	 ??$?0ABK$$Z$$V@?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><unsigned long const &>

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
??$construct@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ABK$$V$0A@@?$tuple@ABK@std@@QAE@U_Exact_args_t@1@ABK@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@ABK$$V$0A@@?$tuple@ABK@std@@QAE@U_Exact_args_t@1@ABK@Z PROC ; std::tuple<unsigned long const &>::tuple<unsigned long const &><std::_Exact_args_t,unsigned long const &,0>, COMDAT
; _this$ = ecx

; 359  : 		{	// construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 		: _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

  0000c	33 c0		 xor	 eax, eax
  0000e	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00011	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>

; 358  : 			_Myfirst(_STD forward<_This2>(_This_arg))

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __This_arg$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??$?0ABK@?$_Tuple_val@ABK@std@@QAE@ABK@Z ; std::_Tuple_val<unsigned long const &>::_Tuple_val<unsigned long const &><unsigned long const &>

; 360  : 		}

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??$?0U_Exact_args_t@std@@ABK$$V$0A@@?$tuple@ABK@std@@QAE@U_Exact_args_t@1@ABK@Z ENDP ; std::tuple<unsigned long const &>::tuple<unsigned long const &><std::_Exact_args_t,unsigned long const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Debug_lt_pred@ABU?$less@K@std@@ABKABK@std@@YA_NABU?$less@K@0@ABK1@Z
_TEXT	SEGMENT
__Result$ = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@ABU?$less@K@std@@ABKABK@std@@YA_NABU?$less@K@0@ABK1@Z PROC ; std::_Debug_lt_pred<std::less<unsigned long> const &,unsigned long const &,unsigned long const &>, COMDAT

; 1109 : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1110 : 	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00014	e8 00 00 00 00	 call	 ??R?$less@K@std@@QBE_NABK0@Z ; std::less<unsigned long>::operator()
  00019	88 45 ff	 mov	 BYTE PTR __Result$[ebp], al

; 1111 : 	if (_Result)

  0001c	0f b6 45 ff	 movzx	 eax, BYTE PTR __Result$[ebp]
  00020	85 c0		 test	 eax, eax
  00022	74 67		 je	 SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 1112 : 		{
; 1113 : 		_STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

  00024	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0002f	e8 00 00 00 00	 call	 ??R?$less@K@std@@QBE_NABK0@Z ; std::less<unsigned long>::operator()
  00034	0f b6 d0	 movzx	 edx, al
  00037	85 d2		 test	 edx, edx
  00039	75 02		 jne	 SHORT $LN7@Debug_lt_p
  0003b	eb 4a		 jmp	 SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	6a 00		 push	 0
  00049	68 59 04 00 00	 push	 1113			; 00000459H
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	6a 02		 push	 2
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 01		 jne	 SHORT $LN12@Debug_lt_p
  00063	cc		 int	 3
$LN12@Debug_lt_p:
  00064	6a 00		 push	 0
  00066	68 59 04 00 00	 push	 1113			; 00000459H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	33 c0		 xor	 eax, eax
  00085	75 b6		 jne	 SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
  00087	33 c0		 xor	 eax, eax
  00089	75 99		 jne	 SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 1114 : 		}
; 1115 : 
; 1116 : 	return (_Result);

  0008b	8a 45 ff	 mov	 al, BYTE PTR __Result$[ebp]

; 1117 : 	}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
??$_Debug_lt_pred@ABU?$less@K@std@@ABKABK@std@@YA_NABU?$less@K@0@ABK1@Z ENDP ; std::_Debug_lt_pred<std::less<unsigned long> const &,unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAUtagPropertyBuff@@PAU1@@std@@YAPAUtagPropertyBuff@@PAU1@00@Z
_TEXT	SEGMENT
__Count$ = -16						; size = 4
__Dest_ch$ = -12					; size = 4
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUtagPropertyBuff@@PAU1@@std@@YAPAUtagPropertyBuff@@PAU1@00@Z PROC ; std::_Copy_memmove<tagPropertyBuff *,tagPropertyBuff *>, COMDAT

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	89 45 f4	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0001b	8b 45 f8	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001e	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  00021	89 45 f0	 mov	 DWORD PTR __Count$[ebp], eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00024	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR __First_ch$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 f4	 mov	 edx, DWORD PTR __Dest_ch$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 _memmove
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00038	8b 45 f4	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0003b	03 45 f0	 add	 eax, DWORD PTR __Count$[ebp]

; 2405 : 	}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Copy_memmove@PAUtagPropertyBuff@@PAU1@@std@@YAPAUtagPropertyBuff@@PAU1@00@Z ENDP ; std::_Copy_memmove<tagPropertyBuff *,tagPropertyBuff *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv699 = -264						; size = 4
tv403 = -264						; size = 4
tv879 = -257						; size = 1
tv848 = -257						; size = 1
tv878 = -256						; size = 4
tv847 = -256						; size = 4
tv877 = -252						; size = 4
tv846 = -252						; size = 4
tv876 = -245						; size = 1
tv845 = -245						; size = 1
tv875 = -244						; size = 4
tv844 = -244						; size = 4
tv818 = -240						; size = 4
tv789 = -240						; size = 4
tv871 = -236						; size = 4
tv840 = -236						; size = 4
tv867 = -233						; size = 1
tv859 = -233						; size = 1
tv836 = -233						; size = 1
tv324 = -233						; size = 1
tv866 = -232						; size = 4
tv858 = -232						; size = 4
tv835 = -232						; size = 4
tv417 = -232						; size = 4
tv870 = -229						; size = 1
tv863 = -229						; size = 1
tv855 = -229						; size = 1
tv853 = -229						; size = 1
tv850 = -229						; size = 1
tv839 = -229						; size = 1
tv747 = -229						; size = 1
tv620 = -229						; size = 1
tv533 = -229						; size = 1
tv139 = -229						; size = 1
tv869 = -228						; size = 4
tv865 = -228						; size = 4
tv862 = -228						; size = 4
tv857 = -228						; size = 4
tv852 = -228						; size = 4
tv838 = -228						; size = 4
tv834 = -228						; size = 4
tv804 = -228						; size = 4
tv799 = -228						; size = 4
tv775 = -228						; size = 4
tv770 = -228						; size = 4
tv713 = -228						; size = 4
tv432 = -228						; size = 4
tv188 = -228						; size = 4
tv868 = -224						; size = 4
tv864 = -224						; size = 4
tv861 = -224						; size = 4
tv860 = -224						; size = 4
tv856 = -224						; size = 4
tv854 = -224						; size = 4
tv851 = -224						; size = 4
tv849 = -224						; size = 4
tv837 = -224						; size = 4
tv833 = -224						; size = 4
tv829 = -224						; size = 4
tv728 = -224						; size = 4
tv605 = -224						; size = 4
tv484 = -224						; size = 4
tv309 = -224						; size = 4
tv237 = -224						; size = 4
tv66 = -224						; size = 4
$T2 = -220						; size = 4
$T3 = -216						; size = 16
$T4 = -200						; size = 12
$T5 = -185						; size = 1
$T6 = -184						; size = 12
$T7 = -169						; size = 1
$T8 = -168						; size = 12
$T9 = -153						; size = 1
$T10 = -152						; size = 12
$T11 = -137						; size = 1
$T12 = -136						; size = 12
$T13 = -121						; size = 1
$T14 = -120						; size = 12
$T15 = -105						; size = 1
__My_data$ = -40					; size = 4
__Leftish$ = -33					; size = 1
__Next$ = -32						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
__Newnode$ = 28						; size = 4
??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_hint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>, COMDAT
; _this$ = ecx

; 1599 : 		{	// try to insert node using _Where as a hint

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00032	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1600 : 		const_iterator _Next;

  00043	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 1601 : 		bool _Leftish = false;	// assume nearest point is end of sequence

  0004f	c6 45 df 00	 mov	 BYTE PTR __Leftish$[ebp], 0

; 1602 : 		auto& _My_data = this->_Get_data();

  00053	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  0005b	89 45 d8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1603 : 
; 1604 : 		_TRY_BEGIN

  0005e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
$LN4@Insert_hin:

; 1605 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1606 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data), "map/set insert iterator outside range");

  00062	8b 45 d8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b f0		 mov	 esi, eax
  00070	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00078	3b c6		 cmp	 eax, esi
  0007a	75 02		 jne	 SHORT $LN7@Insert_hin
  0007c	eb 4a		 jmp	 SHORT $LN2@Insert_hin
$LN7@Insert_hin:
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MOLIBF@map?1set?5insert?5iterator?5outside@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00088	6a 00		 push	 0
  0008a	68 46 06 00 00	 push	 1606			; 00000646H
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00094	6a 02		 push	 2
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	83 f8 01	 cmp	 eax, 1
  000a2	75 01		 jne	 SHORT $LN43@Insert_hin
  000a4	cc		 int	 3
$LN43@Insert_hin:
  000a5	6a 00		 push	 0
  000a7	68 46 06 00 00	 push	 1606			; 00000646H
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_1CKG@DBCIFINF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@HNFOKDLB@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt@
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	33 c0		 xor	 eax, eax
  000c6	75 b6		 jne	 SHORT $LN7@Insert_hin
$LN2@Insert_hin:
  000c8	33 c0		 xor	 eax, eax
  000ca	75 96		 jne	 SHORT $LN4@Insert_hin

; 1607 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1608 : 
; 1609 : #pragma warning(push)
; 1610 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1611 : 		if (size() == 0)

  000cc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::size
  000d4	85 c0		 test	 eax, eax
  000d6	75 5d		 jne	 SHORT $LN11@Insert_hin

; 1612 : 			{
; 1613 : 			return (_Insert_at(true, _My_data._Myhead,

  000d8	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  000e5	83 c4 04	 add	 esp, 4
  000e8	50		 push	 eax
  000e9	8b 55 d8	 mov	 edx, DWORD PTR __My_data$[ebp]
  000ec	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ef	50		 push	 eax
  000f0	6a 01		 push	 1
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  000fe	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00104	83 ca 01	 or	 edx, 1
  00107	89 95 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0010d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00111	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00114	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00119	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00120	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00123	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00128	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0012b	e9 af 0c 00 00	 jmp	 $LN42@Insert_hin
  00130	e9 0b 0c 00 00	 jmp	 $LN12@Insert_hin
$LN11@Insert_hin:

; 1614 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1615 : 			}
; 1616 : 		else if (this->_Multi)

  00135	33 c0		 xor	 eax, eax
  00137	0f 84 00 06 00
	00		 je	 $LN13@Insert_hin

; 1617 : 			{	// insert even if duplicate
; 1618 : 			if (_Where == begin())

  0013d	8d 45 88	 lea	 eax, DWORD PTR $T14[ebp]
  00140	50		 push	 eax
  00141	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
  00149	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  0014f	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv66[ebp]
  00155	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv770[ebp], ecx
  0015b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0015f	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv770[ebp]
  00165	52		 push	 edx
  00166	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00169	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  0016e	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv747[ebp], al
  00174	8a 85 1b ff ff
	ff		 mov	 al, BYTE PTR tv747[ebp]
  0017a	88 45 97	 mov	 BYTE PTR $T15[ebp], al
  0017d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00181	8d 4d 88	 lea	 ecx, DWORD PTR $T14[ebp]
  00184	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00189	0f b6 4d 97	 movzx	 ecx, BYTE PTR $T15[ebp]
  0018d	85 c9		 test	 ecx, ecx
  0018f	0f 84 b2 00 00
	00		 je	 $LN15@Insert_hin

; 1619 : 				{	// insert at beginning if before first element
; 1620 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),

  00195	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00198	50		 push	 eax
  00199	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  001a1	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv728[ebp], eax
  001a7	8b 4d 14	 mov	 ecx, DWORD PTR __Where$[ebp+8]
  001aa	51		 push	 ecx
  001ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ae	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  001b3	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv713[ebp], eax
  001b9	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv728[ebp]
  001bf	52		 push	 edx
  001c0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv713[ebp]
  001c6	50		 push	 eax
  001c7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ca	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  001d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d8	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv620[ebp], al
  001de	0f b6 8d 1b ff
	ff ff		 movzx	 ecx, BYTE PTR tv620[ebp]
  001e5	85 c9		 test	 ecx, ecx
  001e7	75 55		 jne	 SHORT $LN17@Insert_hin

; 1621 : 					this->_Key(_Where._Ptr), this->_Kfn(_Val)))
; 1622 : 					return (_Insert_at(true, _Where._Ptr,

  001e9	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  001ec	50		 push	 eax
  001ed	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  001f0	51		 push	 ecx
  001f1	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  001f6	83 c4 04	 add	 esp, 4
  001f9	50		 push	 eax
  001fa	8b 55 14	 mov	 edx, DWORD PTR __Where$[ebp+8]
  001fd	52		 push	 edx
  001fe	6a 01		 push	 1
  00200	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00203	50		 push	 eax
  00204	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00207	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0020c	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00212	83 c9 01	 or	 ecx, 1
  00215	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0021b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0021f	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00222	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00227	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0022e	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00231	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00236	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00239	e9 a1 0b 00 00	 jmp	 $LN42@Insert_hin
$LN17@Insert_hin:

; 1623 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1624 : 				_Leftish = true;	// nearest point is beginning of sequence

  0023e	c6 45 df 01	 mov	 BYTE PTR __Leftish$[ebp], 1
  00242	e9 f1 04 00 00	 jmp	 $LN16@Insert_hin
$LN15@Insert_hin:

; 1625 : 				}
; 1626 : 			else if (_Where == end())

  00247	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  0024d	50		 push	 eax
  0024e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00251	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
  00256	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv605[ebp], eax
  0025c	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv605[ebp]
  00262	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv775[ebp], ecx
  00268	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  0026c	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv775[ebp]
  00272	52		 push	 edx
  00273	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00276	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  0027b	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv533[ebp], al
  00281	8a 85 1b ff ff
	ff		 mov	 al, BYTE PTR tv533[ebp]
  00287	88 45 87	 mov	 BYTE PTR $T13[ebp], al
  0028a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0028e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00294	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00299	0f b6 4d 87	 movzx	 ecx, BYTE PTR $T13[ebp]
  0029d	85 c9		 test	 ecx, ecx
  0029f	0f 84 d4 00 00
	00		 je	 $LN18@Insert_hin

; 1627 : 				{	// insert at end if after last element
; 1628 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),

  002a5	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  002a8	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  002ad	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv484[ebp], eax
  002b3	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv484[ebp]
  002b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002bb	51		 push	 ecx
  002bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002bf	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  002c4	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv432[ebp], eax
  002ca	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  002cd	52		 push	 edx
  002ce	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002d1	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  002d6	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv417[ebp], eax
  002dc	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv432[ebp]
  002e2	50		 push	 eax
  002e3	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv417[ebp]
  002e9	51		 push	 ecx
  002ea	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002ed	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  002f2	50		 push	 eax
  002f3	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  002f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fb	88 85 17 ff ff
	ff		 mov	 BYTE PTR tv324[ebp], al
  00301	0f b6 95 17 ff
	ff ff		 movzx	 edx, BYTE PTR tv324[ebp]
  00308	85 d2		 test	 edx, edx
  0030a	75 68		 jne	 SHORT $LN20@Insert_hin

; 1629 : 					this->_Kfn(_Val), this->_Key(_My_data._Rmost())))
; 1630 : 					return (_Insert_at(false, _My_data._Rmost(),

  0030c	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0030f	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  00314	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv309[ebp], eax
  0031a	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0031d	50		 push	 eax
  0031e	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00321	51		 push	 ecx
  00322	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00327	83 c4 04	 add	 esp, 4
  0032a	50		 push	 eax
  0032b	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv309[ebp]
  00331	8b 02		 mov	 eax, DWORD PTR [edx]
  00333	50		 push	 eax
  00334	6a 00		 push	 0
  00336	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00339	51		 push	 ecx
  0033a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0033d	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00342	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00348	83 ca 01	 or	 edx, 1
  0034b	89 95 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00351	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00355	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00358	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  0035d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00364	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00367	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  0036c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0036f	e9 6b 0a 00 00	 jmp	 $LN42@Insert_hin
$LN20@Insert_hin:

; 1631 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1632 : 				}
; 1633 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),

  00374	e9 bf 03 00 00	 jmp	 $LN16@Insert_hin
$LN18@Insert_hin:

; 1634 : 				this->_Key(_Where._Ptr), this->_Kfn(_Val))
; 1635 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),

  00379	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  0037c	50		 push	 eax
  0037d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00380	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  00385	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv237[ebp], eax
  0038b	8b 4d 14	 mov	 ecx, DWORD PTR __Where$[ebp+8]
  0038e	51		 push	 ecx
  0038f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00392	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00397	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv188[ebp], eax
  0039d	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv237[ebp]
  003a3	52		 push	 edx
  003a4	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv188[ebp]
  003aa	50		 push	 eax
  003ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003ae	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  003b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  003bc	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv139[ebp], al
  003c2	0f b6 8d 1b ff
	ff ff		 movzx	 ecx, BYTE PTR tv139[ebp]
  003c9	85 c9		 test	 ecx, ecx
  003cb	0f 85 36 01 00
	00		 jne	 $LN21@Insert_hin
  003d1	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  003d4	50		 push	 eax
  003d5	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  003d8	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  003dd	8b c8		 mov	 ecx, eax
  003df	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--
  003e4	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv833[ebp], eax
  003ea	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv833[ebp]
  003f0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003f3	52		 push	 edx
  003f4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003f7	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  003fc	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv834[ebp], eax
  00402	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00405	50		 push	 eax
  00406	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00409	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  0040e	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv835[ebp], eax
  00414	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv834[ebp]
  0041a	51		 push	 ecx
  0041b	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv835[ebp]
  00421	52		 push	 edx
  00422	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00425	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  0042a	50		 push	 eax
  0042b	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00430	83 c4 0c	 add	 esp, 12			; 0000000cH
  00433	88 85 17 ff ff
	ff		 mov	 BYTE PTR tv836[ebp], al
  00439	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR tv836[ebp]
  00440	85 c0		 test	 eax, eax
  00442	0f 85 bf 00 00
	00		 jne	 $LN21@Insert_hin

; 1636 : 					this->_Kfn(_Val),
; 1637 : 					this->_Key((--(_Next = _Where))._Ptr)))
; 1638 : 				{	// insert before _Where
; 1639 : 				if (_Next._Ptr->_Right->_Isnil)

  00448	8b 45 e8	 mov	 eax, DWORD PTR __Next$[ebp+8]
  0044b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0044e	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00452	85 d2		 test	 edx, edx
  00454	74 57		 je	 SHORT $LN23@Insert_hin

; 1640 : 					return (_Insert_at(false, _Next._Ptr,

  00456	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00459	50		 push	 eax
  0045a	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  0045d	51		 push	 ecx
  0045e	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00463	83 c4 04	 add	 esp, 4
  00466	50		 push	 eax
  00467	8b 55 e8	 mov	 edx, DWORD PTR __Next$[ebp+8]
  0046a	52		 push	 edx
  0046b	6a 00		 push	 0
  0046d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00470	50		 push	 eax
  00471	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00474	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00479	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0047f	83 c9 01	 or	 ecx, 1
  00482	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00488	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0048c	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0048f	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00494	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0049b	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0049e	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  004a3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  004a6	e9 34 09 00 00	 jmp	 $LN42@Insert_hin

; 1641 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1642 : 				else

  004ab	eb 55		 jmp	 SHORT $LN24@Insert_hin
$LN23@Insert_hin:

; 1643 : 					return (_Insert_at(true, _Where._Ptr,

  004ad	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  004b0	50		 push	 eax
  004b1	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  004b4	51		 push	 ecx
  004b5	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  004ba	83 c4 04	 add	 esp, 4
  004bd	50		 push	 eax
  004be	8b 55 14	 mov	 edx, DWORD PTR __Where$[ebp+8]
  004c1	52		 push	 edx
  004c2	6a 01		 push	 1
  004c4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  004c7	50		 push	 eax
  004c8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  004cb	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  004d0	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  004d6	83 c9 01	 or	 ecx, 1
  004d9	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  004df	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  004e3	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  004e6	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  004eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  004f2	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  004f5	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  004fa	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  004fd	e9 dd 08 00 00	 jmp	 $LN42@Insert_hin
$LN24@Insert_hin:

; 1644 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1645 : 				}
; 1646 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),

  00502	e9 31 02 00 00	 jmp	 $LN16@Insert_hin
$LN21@Insert_hin:

; 1647 : 				this->_Kfn(_Val), this->_Key(_Where._Ptr))
; 1648 : 				&& (++(_Next = _Where) == end()

  00507	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  0050a	50		 push	 eax
  0050b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0050e	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00513	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv837[ebp], eax
  00519	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  0051c	51		 push	 ecx
  0051d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00520	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  00525	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv838[ebp], eax
  0052b	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv837[ebp]
  00531	52		 push	 edx
  00532	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv838[ebp]
  00538	50		 push	 eax
  00539	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0053c	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  00541	50		 push	 eax
  00542	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00547	83 c4 0c	 add	 esp, 12			; 0000000cH
  0054a	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv839[ebp], al
  00550	0f b6 8d 1b ff
	ff ff		 movzx	 ecx, BYTE PTR tv839[ebp]
  00557	85 c9		 test	 ecx, ecx
  00559	0f 85 d0 00 00
	00		 jne	 $LN45@Insert_hin
  0055f	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR $T10[ebp]
  00565	52		 push	 edx
  00566	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00569	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
  0056e	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv840[ebp], eax
  00574	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv840[ebp]
  0057a	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv789[ebp], eax
  00580	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
  00584	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0058a	83 c9 02	 or	 ecx, 2
  0058d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00593	8d 55 0c	 lea	 edx, DWORD PTR __Where$[ebp]
  00596	52		 push	 edx
  00597	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0059a	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  0059f	8b c8		 mov	 ecx, eax
  005a1	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++
  005a6	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv844[ebp], eax
  005ac	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv789[ebp]
  005b2	50		 push	 eax
  005b3	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv844[ebp]
  005b9	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  005be	88 85 0b ff ff
	ff		 mov	 BYTE PTR tv845[ebp], al
  005c4	0f b6 8d 0b ff
	ff ff		 movzx	 ecx, BYTE PTR tv845[ebp]
  005cb	85 c9		 test	 ecx, ecx
  005cd	75 54		 jne	 SHORT $LN44@Insert_hin
  005cf	8b 55 18	 mov	 edx, DWORD PTR __Val$[ebp]
  005d2	52		 push	 edx
  005d3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005d6	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  005db	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv846[ebp], eax
  005e1	8b 45 e8	 mov	 eax, DWORD PTR __Next$[ebp+8]
  005e4	50		 push	 eax
  005e5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005e8	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  005ed	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv847[ebp], eax
  005f3	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR tv846[ebp]
  005f9	51		 push	 ecx
  005fa	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR tv847[ebp]
  00600	52		 push	 edx
  00601	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00604	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  00609	50		 push	 eax
  0060a	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  0060f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00612	88 85 ff fe ff
	ff		 mov	 BYTE PTR tv848[ebp], al
  00618	0f b6 85 ff fe
	ff ff		 movzx	 eax, BYTE PTR tv848[ebp]
  0061f	85 c0		 test	 eax, eax
  00621	75 0c		 jne	 SHORT $LN45@Insert_hin
$LN44@Insert_hin:
  00623	c7 85 f8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv403[ebp], 1
  0062d	eb 0a		 jmp	 SHORT $LN46@Insert_hin
$LN45@Insert_hin:
  0062f	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv403[ebp], 0
$LN46@Insert_hin:
  00639	8a 8d f8 fe ff
	ff		 mov	 cl, BYTE PTR tv403[ebp]
  0063f	88 8d 77 ff ff
	ff		 mov	 BYTE PTR $T11[ebp], cl
  00645	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0064c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00652	83 e2 02	 and	 edx, 2
  00655	74 12		 je	 SHORT $LN60@Insert_hin
  00657	83 a5 24 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  0065e	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00664	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN60@Insert_hin:
  00669	0f b6 85 77 ff
	ff ff		 movzx	 eax, BYTE PTR $T11[ebp]
  00670	85 c0		 test	 eax, eax
  00672	0f 84 bc 00 00
	00		 je	 $LN25@Insert_hin

; 1649 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1650 : 						this->_Key(_Next._Ptr), this->_Kfn(_Val))))
; 1651 : 				{	// insert after _Where
; 1652 : 				if (_Where._Ptr->_Right->_Isnil)

  00678	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  0067b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0067e	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00682	85 d2		 test	 edx, edx
  00684	74 57		 je	 SHORT $LN27@Insert_hin

; 1653 : 					return (_Insert_at(false, _Where._Ptr,

  00686	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00689	50		 push	 eax
  0068a	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  0068d	51		 push	 ecx
  0068e	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00693	83 c4 04	 add	 esp, 4
  00696	50		 push	 eax
  00697	8b 55 14	 mov	 edx, DWORD PTR __Where$[ebp+8]
  0069a	52		 push	 edx
  0069b	6a 00		 push	 0
  0069d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  006a0	50		 push	 eax
  006a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  006a4	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  006a9	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  006af	83 c9 01	 or	 ecx, 1
  006b2	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  006b8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  006bc	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  006bf	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  006c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  006cb	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  006ce	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  006d3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  006d6	e9 04 07 00 00	 jmp	 $LN42@Insert_hin

; 1654 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1655 : 				else

  006db	eb 55		 jmp	 SHORT $LN28@Insert_hin
$LN27@Insert_hin:

; 1656 : 					return (_Insert_at(true, _Next._Ptr,

  006dd	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  006e0	50		 push	 eax
  006e1	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  006e4	51		 push	 ecx
  006e5	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  006ea	83 c4 04	 add	 esp, 4
  006ed	50		 push	 eax
  006ee	8b 55 e8	 mov	 edx, DWORD PTR __Next$[ebp+8]
  006f1	52		 push	 edx
  006f2	6a 01		 push	 1
  006f4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  006f7	50		 push	 eax
  006f8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  006fb	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00700	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00706	83 c9 01	 or	 ecx, 1
  00709	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0070f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00713	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00716	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  0071b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00722	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00725	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  0072a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0072d	e9 ad 06 00 00	 jmp	 $LN42@Insert_hin
$LN28@Insert_hin:

; 1657 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1658 : 				}
; 1659 : 			else

  00732	eb 04		 jmp	 SHORT $LN16@Insert_hin
$LN25@Insert_hin:

; 1660 : 				{
; 1661 : 				_Leftish = true;	// nearest point is beginning of sequence

  00734	c6 45 df 01	 mov	 BYTE PTR __Leftish$[ebp], 1
$LN16@Insert_hin:

; 1662 : 				}
; 1663 : 			}
; 1664 : 		else

  00738	e9 03 06 00 00	 jmp	 $LN12@Insert_hin
$LN13@Insert_hin:

; 1665 : 			{	// insert only if unique
; 1666 : 			if (_Where == begin())

  0073d	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00743	50		 push	 eax
  00744	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00747	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
  0074c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv849[ebp], eax
  00752	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv849[ebp]
  00758	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv799[ebp], ecx
  0075e	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00762	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv799[ebp]
  00768	52		 push	 edx
  00769	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0076c	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  00771	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv850[ebp], al
  00777	8a 85 1b ff ff
	ff		 mov	 al, BYTE PTR tv850[ebp]
  0077d	88 85 67 ff ff
	ff		 mov	 BYTE PTR $T9[ebp], al
  00783	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00787	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0078d	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00792	0f b6 8d 67 ff
	ff ff		 movzx	 ecx, BYTE PTR $T9[ebp]
  00799	85 c9		 test	 ecx, ecx
  0079b	0f 84 ae 00 00
	00		 je	 $LN29@Insert_hin

; 1667 : 				{	// insert at beginning if before first element
; 1668 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  007a1	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  007a4	50		 push	 eax
  007a5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007a8	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  007ad	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv851[ebp], eax
  007b3	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  007b6	51		 push	 ecx
  007b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007ba	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  007bf	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv852[ebp], eax
  007c5	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv851[ebp]
  007cb	52		 push	 edx
  007cc	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv852[ebp]
  007d2	50		 push	 eax
  007d3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  007d6	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  007db	50		 push	 eax
  007dc	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  007e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  007e4	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv853[ebp], al
  007ea	0f b6 8d 1b ff
	ff ff		 movzx	 ecx, BYTE PTR tv853[ebp]
  007f1	85 c9		 test	 ecx, ecx
  007f3	74 55		 je	 SHORT $LN31@Insert_hin

; 1669 : 					this->_Kfn(_Val), this->_Key(_Where._Ptr)))
; 1670 : 					{
; 1671 : 					return (_Insert_at(true, _Where._Ptr,

  007f5	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  007f8	50		 push	 eax
  007f9	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  007fc	51		 push	 ecx
  007fd	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00802	83 c4 04	 add	 esp, 4
  00805	50		 push	 eax
  00806	8b 55 14	 mov	 edx, DWORD PTR __Where$[ebp+8]
  00809	52		 push	 edx
  0080a	6a 01		 push	 1
  0080c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0080f	50		 push	 eax
  00810	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00813	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00818	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0081e	83 c9 01	 or	 ecx, 1
  00821	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00827	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  0082b	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0082e	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00833	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0083a	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0083d	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00842	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00845	e9 95 05 00 00	 jmp	 $LN42@Insert_hin
$LN31@Insert_hin:

; 1672 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1673 : 					}
; 1674 : 				}

  0084a	e9 f1 04 00 00	 jmp	 $LN12@Insert_hin
$LN29@Insert_hin:

; 1675 : 			else if (_Where == end())

  0084f	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00855	50		 push	 eax
  00856	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00859	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
  0085e	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv854[ebp], eax
  00864	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv854[ebp]
  0086a	89 8d 1c ff ff
	ff		 mov	 DWORD PTR tv804[ebp], ecx
  00870	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  00874	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv804[ebp]
  0087a	52		 push	 edx
  0087b	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0087e	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  00883	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv855[ebp], al
  00889	8a 85 1b ff ff
	ff		 mov	 al, BYTE PTR tv855[ebp]
  0088f	88 85 57 ff ff
	ff		 mov	 BYTE PTR $T7[ebp], al
  00895	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00899	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0089f	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  008a4	0f b6 8d 57 ff
	ff ff		 movzx	 ecx, BYTE PTR $T7[ebp]
  008ab	85 c9		 test	 ecx, ecx
  008ad	0f 84 d4 00 00
	00		 je	 $LN32@Insert_hin

; 1676 : 				{	// insert at end if after last element
; 1677 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  008b3	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  008b6	50		 push	 eax
  008b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008ba	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  008bf	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv856[ebp], eax
  008c5	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  008c8	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  008cd	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv857[ebp], eax
  008d3	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR tv857[ebp]
  008d9	8b 11		 mov	 edx, DWORD PTR [ecx]
  008db	52		 push	 edx
  008dc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008df	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  008e4	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv858[ebp], eax
  008ea	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv856[ebp]
  008f0	50		 push	 eax
  008f1	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv858[ebp]
  008f7	51		 push	 ecx
  008f8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  008fb	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  00900	50		 push	 eax
  00901	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00906	83 c4 0c	 add	 esp, 12			; 0000000cH
  00909	88 85 17 ff ff
	ff		 mov	 BYTE PTR tv859[ebp], al
  0090f	0f b6 95 17 ff
	ff ff		 movzx	 edx, BYTE PTR tv859[ebp]
  00916	85 d2		 test	 edx, edx
  00918	74 68		 je	 SHORT $LN34@Insert_hin

; 1678 : 					this->_Key(_My_data._Rmost()), this->_Kfn(_Val)))
; 1679 : 					{
; 1680 : 					return (_Insert_at(false, _My_data._Rmost(),

  0091a	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0091d	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  00922	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv860[ebp], eax
  00928	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0092b	50		 push	 eax
  0092c	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  0092f	51		 push	 ecx
  00930	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00935	83 c4 04	 add	 esp, 4
  00938	50		 push	 eax
  00939	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv860[ebp]
  0093f	8b 02		 mov	 eax, DWORD PTR [edx]
  00941	50		 push	 eax
  00942	6a 00		 push	 0
  00944	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00947	51		 push	 ecx
  00948	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0094b	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00950	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00956	83 ca 01	 or	 edx, 1
  00959	89 95 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0095f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00963	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00966	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  0096b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00972	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00975	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  0097a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0097d	e9 5d 04 00 00	 jmp	 $LN42@Insert_hin
$LN34@Insert_hin:

; 1681 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1682 : 					}
; 1683 : 				}
; 1684 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),

  00982	e9 b9 03 00 00	 jmp	 $LN12@Insert_hin
$LN32@Insert_hin:

; 1685 : 				this->_Kfn(_Val), this->_Key(_Where._Ptr))
; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  00987	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  0098a	50		 push	 eax
  0098b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0098e	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00993	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv861[ebp], eax
  00999	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  0099c	51		 push	 ecx
  0099d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009a0	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  009a5	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv862[ebp], eax
  009ab	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv861[ebp]
  009b1	52		 push	 edx
  009b2	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv862[ebp]
  009b8	50		 push	 eax
  009b9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009bc	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  009c1	50		 push	 eax
  009c2	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  009c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  009ca	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv863[ebp], al
  009d0	0f b6 8d 1b ff
	ff ff		 movzx	 ecx, BYTE PTR tv863[ebp]
  009d7	85 c9		 test	 ecx, ecx
  009d9	0f 84 36 01 00
	00		 je	 $LN35@Insert_hin
  009df	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  009e2	50		 push	 eax
  009e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  009e6	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  009eb	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv864[ebp], eax
  009f1	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  009f4	51		 push	 ecx
  009f5	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  009f8	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  009fd	8b c8		 mov	 ecx, eax
  009ff	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--
  00a04	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv865[ebp], eax
  00a0a	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv865[ebp]
  00a10	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00a13	50		 push	 eax
  00a14	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a17	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00a1c	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv866[ebp], eax
  00a22	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv864[ebp]
  00a28	51		 push	 ecx
  00a29	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv866[ebp]
  00a2f	52		 push	 edx
  00a30	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a33	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00a3e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a41	88 85 17 ff ff
	ff		 mov	 BYTE PTR tv867[ebp], al
  00a47	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR tv867[ebp]
  00a4e	85 c0		 test	 eax, eax
  00a50	0f 84 bf 00 00
	00		 je	 $LN35@Insert_hin

; 1687 : 					this->_Key((--(_Next = _Where))._Ptr),
; 1688 : 					this->_Kfn(_Val)))
; 1689 : 				{	// insert before _Where
; 1690 : 				if (_Next._Ptr->_Right->_Isnil)

  00a56	8b 45 e8	 mov	 eax, DWORD PTR __Next$[ebp+8]
  00a59	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00a5c	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00a60	85 d2		 test	 edx, edx
  00a62	74 57		 je	 SHORT $LN37@Insert_hin

; 1691 : 					{
; 1692 : 					return (_Insert_at(false, _Next._Ptr,

  00a64	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00a67	50		 push	 eax
  00a68	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00a6b	51		 push	 ecx
  00a6c	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00a71	83 c4 04	 add	 esp, 4
  00a74	50		 push	 eax
  00a75	8b 55 e8	 mov	 edx, DWORD PTR __Next$[ebp+8]
  00a78	52		 push	 edx
  00a79	6a 00		 push	 0
  00a7b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00a7e	50		 push	 eax
  00a7f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00a82	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00a87	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00a8d	83 c9 01	 or	 ecx, 1
  00a90	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00a96	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00a9a	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00a9d	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00aa2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00aa9	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00aac	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00ab1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00ab4	e9 26 03 00 00	 jmp	 $LN42@Insert_hin

; 1693 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1694 : 					}
; 1695 : 				else

  00ab9	eb 55		 jmp	 SHORT $LN38@Insert_hin
$LN37@Insert_hin:

; 1696 : 					{
; 1697 : 					return (_Insert_at(true, _Where._Ptr,

  00abb	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00abe	50		 push	 eax
  00abf	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00ac2	51		 push	 ecx
  00ac3	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00ac8	83 c4 04	 add	 esp, 4
  00acb	50		 push	 eax
  00acc	8b 55 14	 mov	 edx, DWORD PTR __Where$[ebp+8]
  00acf	52		 push	 edx
  00ad0	6a 01		 push	 1
  00ad2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00ad5	50		 push	 eax
  00ad6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00ad9	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00ade	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00ae4	83 c9 01	 or	 ecx, 1
  00ae7	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00aed	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00af1	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00af4	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00af9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00b00	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00b03	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00b08	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00b0b	e9 cf 02 00 00	 jmp	 $LN42@Insert_hin
$LN38@Insert_hin:

; 1698 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1699 : 					}
; 1700 : 				}
; 1701 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),

  00b10	e9 2b 02 00 00	 jmp	 $LN12@Insert_hin
$LN35@Insert_hin:

; 1702 : 				this->_Key(_Where._Ptr), this->_Kfn(_Val))
; 1703 : 				&& (++(_Next = _Where) == end()

  00b15	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00b18	50		 push	 eax
  00b19	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b1c	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  00b21	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv868[ebp], eax
  00b27	8b 4d 14	 mov	 ecx, DWORD PTR __Where$[ebp+8]
  00b2a	51		 push	 ecx
  00b2b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b2e	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00b33	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv869[ebp], eax
  00b39	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv868[ebp]
  00b3f	52		 push	 edx
  00b40	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv869[ebp]
  00b46	50		 push	 eax
  00b47	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b4a	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  00b4f	50		 push	 eax
  00b50	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00b55	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b58	88 85 1b ff ff
	ff		 mov	 BYTE PTR tv870[ebp], al
  00b5e	0f b6 8d 1b ff
	ff ff		 movzx	 ecx, BYTE PTR tv870[ebp]
  00b65	85 c9		 test	 ecx, ecx
  00b67	0f 84 d0 00 00
	00		 je	 $LN48@Insert_hin
  00b6d	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00b73	52		 push	 edx
  00b74	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00b77	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
  00b7c	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv871[ebp], eax
  00b82	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv871[ebp]
  00b88	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv818[ebp], eax
  00b8e	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  00b92	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00b98	83 c9 04	 or	 ecx, 4
  00b9b	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00ba1	8d 55 0c	 lea	 edx, DWORD PTR __Where$[ebp]
  00ba4	52		 push	 edx
  00ba5	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00ba8	e8 00 00 00 00	 call	 ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
  00bad	8b c8		 mov	 ecx, eax
  00baf	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++
  00bb4	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv875[ebp], eax
  00bba	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv818[ebp]
  00bc0	50		 push	 eax
  00bc1	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR tv875[ebp]
  00bc7	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  00bcc	88 85 0b ff ff
	ff		 mov	 BYTE PTR tv876[ebp], al
  00bd2	0f b6 8d 0b ff
	ff ff		 movzx	 ecx, BYTE PTR tv876[ebp]
  00bd9	85 c9		 test	 ecx, ecx
  00bdb	75 54		 jne	 SHORT $LN47@Insert_hin
  00bdd	8b 55 e8	 mov	 edx, DWORD PTR __Next$[ebp+8]
  00be0	52		 push	 edx
  00be1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00be4	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  00be9	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv877[ebp], eax
  00bef	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  00bf2	50		 push	 eax
  00bf3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00bf6	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
  00bfb	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv878[ebp], eax
  00c01	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR tv877[ebp]
  00c07	51		 push	 ecx
  00c08	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR tv878[ebp]
  00c0e	52		 push	 edx
  00c0f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00c12	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  00c17	50		 push	 eax
  00c18	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  00c1d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c20	88 85 ff fe ff
	ff		 mov	 BYTE PTR tv879[ebp], al
  00c26	0f b6 85 ff fe
	ff ff		 movzx	 eax, BYTE PTR tv879[ebp]
  00c2d	85 c0		 test	 eax, eax
  00c2f	74 0c		 je	 SHORT $LN48@Insert_hin
$LN47@Insert_hin:
  00c31	c7 85 f8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv699[ebp], 1
  00c3b	eb 0a		 jmp	 SHORT $LN49@Insert_hin
$LN48@Insert_hin:
  00c3d	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv699[ebp], 0
$LN49@Insert_hin:
  00c47	8a 8d f8 fe ff
	ff		 mov	 cl, BYTE PTR tv699[ebp]
  00c4d	88 8d 47 ff ff
	ff		 mov	 BYTE PTR $T5[ebp], cl
  00c53	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  00c5a	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00c60	83 e2 04	 and	 edx, 4
  00c63	74 12		 je	 SHORT $LN65@Insert_hin
  00c65	83 a5 24 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  00c6c	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00c72	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN65@Insert_hin:
  00c77	0f b6 85 47 ff
	ff ff		 movzx	 eax, BYTE PTR $T5[ebp]
  00c7e	85 c0		 test	 eax, eax
  00c80	0f 84 ba 00 00
	00		 je	 $LN12@Insert_hin

; 1704 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1705 : 						this->_Kfn(_Val), this->_Key(_Next._Ptr))))
; 1706 : 				{	// insert after _Where
; 1707 : 				if (_Where._Ptr->_Right->_Isnil)

  00c86	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00c89	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00c8c	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00c90	85 d2		 test	 edx, edx
  00c92	74 57		 je	 SHORT $LN40@Insert_hin

; 1708 : 					{
; 1709 : 					return (_Insert_at(false, _Where._Ptr,

  00c94	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00c97	50		 push	 eax
  00c98	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00c9b	51		 push	 ecx
  00c9c	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00ca1	83 c4 04	 add	 esp, 4
  00ca4	50		 push	 eax
  00ca5	8b 55 14	 mov	 edx, DWORD PTR __Where$[ebp+8]
  00ca8	52		 push	 edx
  00ca9	6a 00		 push	 0
  00cab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00cae	50		 push	 eax
  00caf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00cb2	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00cb7	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00cbd	83 c9 01	 or	 ecx, 1
  00cc0	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00cc6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00cca	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00ccd	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00cd2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00cd9	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00cdc	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00ce1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00ce4	e9 f6 00 00 00	 jmp	 $LN42@Insert_hin

; 1710 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1711 : 					}
; 1712 : 				else

  00ce9	eb 55		 jmp	 SHORT $LN12@Insert_hin
$LN40@Insert_hin:

; 1713 : 					{
; 1714 : 					return (_Insert_at(true, _Next._Ptr,

  00ceb	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00cee	50		 push	 eax
  00cef	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00cf2	51		 push	 ecx
  00cf3	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00cf8	83 c4 04	 add	 esp, 4
  00cfb	50		 push	 eax
  00cfc	8b 55 e8	 mov	 edx, DWORD PTR __Next$[ebp+8]
  00cff	52		 push	 edx
  00d00	6a 01		 push	 1
  00d02	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00d05	50		 push	 eax
  00d06	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d09	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_at<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00d0e	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00d14	83 c9 01	 or	 ecx, 1
  00d17	89 8d 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00d1d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00d21	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00d24	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00d29	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00d30	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00d33	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00d38	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00d3b	e9 9f 00 00 00	 jmp	 $LN42@Insert_hin
$LN12@Insert_hin:
  00d40	eb 1b		 jmp	 SHORT $LN50@Insert_hin
__catch$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$0:

; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 					}
; 1717 : 				}
; 1718 : 			}
; 1719 : #pragma warning(pop)
; 1720 : 		_CATCH_ALL
; 1721 : 		_Destroy_if_node(_Newnode);

  00d42	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00d45	50		 push	 eax
  00d46	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d49	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Destroy_if_node

; 1722 : 		_RERAISE;

  00d4e	6a 00		 push	 0
  00d50	6a 00		 push	 0
  00d52	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1723 : 		_CATCH_END

  00d57	b8 00 00 00 00	 mov	 eax, $LN68@Insert_hin
  00d5c	c3		 ret	 0
$LN50@Insert_hin:
  00d5d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00d64	eb 07		 jmp	 SHORT __tryend$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$1
$LN68@Insert_hin:
  00d66	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
__tryend$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$1:

; 1724 : 
; 1725 : 		return (_Insert_nohint(_Leftish,

  00d6d	8b 45 1c	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00d70	50		 push	 eax
  00d71	8b 4d 18	 mov	 ecx, DWORD PTR __Val$[ebp]
  00d74	51		 push	 ecx
  00d75	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &>
  00d7a	83 c4 04	 add	 esp, 4
  00d7d	50		 push	 eax
  00d7e	0f b6 55 df	 movzx	 edx, BYTE PTR __Leftish$[ebp]
  00d82	52		 push	 edx
  00d83	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00d89	50		 push	 eax
  00d8a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00d8d	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_nohint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00d92	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv829[ebp], eax
  00d98	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv829[ebp]
  00d9e	51		 push	 ecx
  00d9f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00da2	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00da7	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00dad	83 ca 01	 or	 edx, 1
  00db0	89 95 24 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00db6	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00dbc	e8 00 00 00 00	 call	 ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
  00dc1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00dc5	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  00dc8	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00dcd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00dd4	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00dd7	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00ddc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN42@Insert_hin:

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  00ddf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00de2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00de9	59		 pop	 ecx
  00dea	5f		 pop	 edi
  00deb	5e		 pop	 esi
  00dec	5b		 pop	 ebx
  00ded	8b e5		 mov	 esp, ebp
  00def	5d		 pop	 ebp
  00df0	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$2:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$3:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Next$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$5:
  00010	8d 4d 88	 lea	 ecx, DWORD PTR $T14[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$6:
  00018	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$7:
  00023	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00029	83 e0 02	 and	 eax, 2
  0002c	0f 84 12 00 00
	00		 je	 $LN59@Insert_hin
  00032	83 a5 24 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00039	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN59@Insert_hin:
  00044	c3		 ret	 0
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$8:
  00045	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$9:
  00050	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z$10:
  0005b	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00061	83 e0 04	 and	 eax, 4
  00064	0f 84 12 00 00
	00		 je	 $LN64@Insert_hin
  0006a	83 a5 24 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  00071	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00077	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN64@Insert_hin:
  0007c	c3		 ret	 0
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z:
  0007d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00081	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00084	8b 8a f4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-268]
  0008a	33 c8		 xor	 ecx, eax
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
  00096	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_hint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Pnode$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$ = 16						; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 976  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 48	 sub	 esp, 72			; 00000048H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : 		_Nodeptr _Pnode = _Buynode0();

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode0
  00037	89 45 e8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 978  : 
; 979  : 		_Pnode->_Color = _Red;

  0003a	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0003d	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 980  : 		_Pnode->_Isnil = false;

  00041	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00044	c6 40 0d 00	 mov	 BYTE PTR [eax+13], 0

; 981  : 
; 982  : 		_TRY_BEGIN

  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 983  : 		_Alnode_traits::construct(_Getal(),

  0004f	8b 45 10	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00058	83 c4 04	 add	 esp, 4
  0005b	50		 push	 eax
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::forward<std::tuple<unsigned long const &> >
  00065	83 c4 04	 add	 esp, 4
  00068	50		 push	 eax
  00069	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00072	83 c4 04	 add	 esp, 4
  00075	50		 push	 eax
  00076	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00079	83 c0 10	 add	 eax, 16			; 00000010H
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00082	83 c4 04	 add	 esp, 4
  00085	50		 push	 eax
  00086	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
  00094	83 c4 14	 add	 esp, 20			; 00000014H
  00097	eb 1b		 jmp	 SHORT $LN4@Buynode
__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$0:

; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);

  00099	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freenode0

; 987  : 		_RERAISE;

  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 __CxxThrowException@8

; 988  : 		_CATCH_END

  000ae	b8 00 00 00 00	 mov	 eax, $LN7@Buynode
  000b3	c3		 ret	 0
$LN4@Buynode:
  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000bb	eb 07		 jmp	 SHORT __tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$1
$LN7@Buynode:
  000bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$1:

; 989  : 
; 990  : 		return (_Pnode);

  000c4	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:

; 991  : 		}

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z PROC ; std::forward<std::tuple<unsigned long const &> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ENDP ; std::forward<std::tuple<unsigned long const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z
_TEXT	SEGMENT
$T2 = -81						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__This_arg$ = 8						; size = 4
??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z PROC		; std::tuple<unsigned long const &>::tuple<unsigned long const &><unsigned long const &,0>, COMDAT
; _this$ = ecx

; 446  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 445  : 			: tuple(_Exact_args_t{}, _This_arg, _Rest_arg...)

  0002b	33 c0		 xor	 eax, eax
  0002d	88 45 af	 mov	 BYTE PTR $T2[ebp], al
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __This_arg$[ebp]
  00033	51		 push	 ecx
  00034	0f b6 55 af	 movzx	 edx, BYTE PTR $T2[ebp]
  00038	52		 push	 edx
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@ABK$$V$0A@@?$tuple@ABK@std@@QAE@U_Exact_args_t@1@ABK@Z ; std::tuple<unsigned long const &>::tuple<unsigned long const &><std::_Exact_args_t,unsigned long const &,0>

; 447  : 		}

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z ENDP		; std::tuple<unsigned long const &>::tuple<unsigned long const &><unsigned long const &,0>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$_Kfn@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@SAABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@SAABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z PROC ; std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0>::_Kfn<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >, COMDAT

; 70   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 71   : 		return (_Val.first);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 72   : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Kfn@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@SAABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ENDP ; std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0>::_Kfn<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Lbound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABK@Z
_TEXT	SEGMENT
__Pnode$ = -12						; size = 4
__Wherenode$ = -8					; size = 4
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??$_Lbound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Lbound<unsigned long>, COMDAT
; _this$ = ecx

; 2044 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2045 : 		_Nodeptr _Wherenode = this->_Get_data()._Myhead;	// end() if search fails

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 2046 : 		_Nodeptr _Pnode = _Wherenode->_Parent;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0001d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00020	89 4d f4	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN2@Lbound:

; 2047 : 
; 2048 : 		while (!_Pnode->_Isnil)

  00023	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00026	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  0002a	85 c9		 test	 ecx, ecx
  0002c	75 3b		 jne	 SHORT $LN3@Lbound

; 2049 : 			{
; 2050 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00031	50		 push	 eax
  00032	8b 4d f4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00035	51		 push	 ecx
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Compare@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE_NABK0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Compare
  00047	0f b6 d0	 movzx	 edx, al
  0004a	85 d2		 test	 edx, edx
  0004c	74 0b		 je	 SHORT $LN4@Lbound

; 2051 : 				{
; 2052 : 				_Pnode = _Pnode->_Right;	// descend right subtree

  0004e	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00051	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00054	89 4d f4	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 2053 : 				}
; 2054 : 			else

  00057	eb 0e		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2055 : 				{	// _Pnode not less than _Keyval, remember it
; 2056 : 				_Wherenode = _Pnode;

  00059	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005c	89 45 f8	 mov	 DWORD PTR __Wherenode$[ebp], eax

; 2057 : 				_Pnode = _Pnode->_Left;	// descend left subtree

  0005f	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	89 4d f4	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN5@Lbound:

; 2058 : 				}
; 2059 : 			}

  00067	eb ba		 jmp	 SHORT $LN2@Lbound
$LN3@Lbound:

; 2060 : 
; 2061 : 		return (_Wherenode);	// return best remembered candidate

  00069	8b 45 f8	 mov	 eax, DWORD PTR __Wherenode$[ebp]

; 2062 : 		}

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??$_Lbound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Lbound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >, COMDAT

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUtagPropertyBuff@@PAU1@@std@@YAPAUtagPropertyBuff@@PAU1@00@Z ; std::_Copy_memmove<tagPropertyBuff *,tagPropertyBuff *>
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 245  : 	}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z PROC ; std::_Ptr_move_cat<tagPropertyBuff,tagPropertyBuff>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1087 : 	return {};

  00009	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1088 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_move_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z ENDP ; std::_Ptr_move_cat<tagPropertyBuff,tagPropertyBuff>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@UtagPropertyBuff@@@std@@YAXAAPAUtagPropertyBuff@@QAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@UtagPropertyBuff@@@std@@YAXAAPAUtagPropertyBuff@@QAU1@@Z PROC ; std::_Seek_wrapped<tagPropertyBuff>, COMDAT

; 871  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 872  : 	_It = _UIt;

  00009	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __UIt$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 873  : 	}

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Seek_wrapped@UtagPropertyBuff@@@std@@YAXAAPAUtagPropertyBuff@@QAU1@@Z ENDP ; std::_Seek_wrapped<tagPropertyBuff>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >, COMDAT

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUtagPropertyBuff@@PAU1@@std@@YAPAUtagPropertyBuff@@PAU1@00@Z ; std::_Copy_memmove<tagPropertyBuff *,tagPropertyBuff *>
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 203  : 	}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_copy_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z PROC ; std::_Ptr_copy_cat<tagPropertyBuff,tagPropertyBuff>, COMDAT

; 1069 : 	{	// return pointer copy optimization category for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1070 : 	return {};

  00009	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1071 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Ptr_copy_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z ENDP ; std::_Ptr_copy_cat<tagPropertyBuff,tagPropertyBuff>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@UtagPropertyBuff@@H$0A@@std@@YAPAUtagPropertyBuff@@QAU1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@UtagPropertyBuff@@H$0A@@std@@YAPAUtagPropertyBuff@@QAU1@H@Z PROC ; std::_Get_unwrapped_n<tagPropertyBuff,int,0>, COMDAT

; 808  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 809  : 	return (_Src);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 810  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Get_unwrapped_n@UtagPropertyBuff@@H$0A@@std@@YAPAUtagPropertyBuff@@QAU1@H@Z ENDP ; std::_Get_unwrapped_n<tagPropertyBuff,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAUtagPropertyBuff@@PAU1@@std@@YAHABQAUtagPropertyBuff@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAUtagPropertyBuff@@PAU1@@std@@YAHABQAUtagPropertyBuff@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<tagPropertyBuff *,tagPropertyBuff *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	2b 01		 sub	 eax, DWORD PTR [ecx]
  00013	99		 cdq
  00014	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00019	f7 f9		 idiv	 ecx

; 969  : 	}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Idl_distance1@PAUtagPropertyBuff@@PAU1@@std@@YAHABQAUtagPropertyBuff@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<tagPropertyBuff *,tagPropertyBuff *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAUtagPropertyBuff@@PAU1@@std@@YA@ABQAUtagPropertyBuff@@0@Z
_TEXT	SEGMENT
$T1 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAUtagPropertyBuff@@PAU1@@std@@YA@ABQAUtagPropertyBuff@@0@Z PROC ; std::_Idl_distance<tagPropertyBuff *,tagPropertyBuff *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

  00009	0f b6 45 bf	 movzx	 eax, BYTE PTR $T1[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Idl_distance1@PAUtagPropertyBuff@@PAU1@@std@@YAHABQAUtagPropertyBuff@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<tagPropertyBuff *,tagPropertyBuff *>
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 976  : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Idl_distance@PAUtagPropertyBuff@@PAU1@@std@@YA@ABQAUtagPropertyBuff@@0@Z ENDP ; std::_Idl_distance<tagPropertyBuff *,tagPropertyBuff *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z PROC ; std::_Get_unwrapped<tagPropertyBuff>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 663  : 	return (_Ptr);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z ENDP ; std::_Get_unwrapped<tagPropertyBuff>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &,bool,0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z

; 173  : 				second(_STD forward<_Other2>(_Val2))

  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	88 51 0c	 mov	 BYTE PTR [ecx+12], dl

; 175  : 		}

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool,0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z

; 173  : 				second(_STD forward<_Other2>(_Val2))

  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8a 10		 mov	 dl, BYTE PTR [eax]
  00032	88 51 0c	 mov	 BYTE PTR [ecx+12], dl

; 175  : 		}

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
tv81 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 4
__Newnode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
_<_Val_0>$ = 24						; size = 4
_<_Val_1>$ = 28						; size = 4
_<_Val_2>$ = 32						; size = 4
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 1161 : 		{	// insert value_type(_Val...) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  00039	8b 45 20	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00042	83 c4 04	 add	 esp, 4
  00045	50		 push	 eax
  00046	8b 4d 1c	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABK@std@@@std@@YA$$QAV?$tuple@ABK@0@AAV10@@Z ; std::forward<std::tuple<unsigned long const &> >
  0004f	83 c4 04	 add	 esp, 4
  00052	50		 push	 eax
  00053	8b 55 18	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  0005c	83 c4 04	 add	 esp, 4
  0005f	50		 push	 eax
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
  00068	89 45 ec	 mov	 DWORD PTR __Newnode$[ebp], eax

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  0006b	8b 45 ec	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00072	83 c1 10	 add	 ecx, 16			; 00000010H
  00075	51		 push	 ecx
  00076	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00079	8b cc		 mov	 ecx, esp
  0007b	89 65 a8	 mov	 DWORD PTR $T3[ebp], esp
  0007e	8d 55 0c	 lea	 edx, DWORD PTR __Where$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00087	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@AAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Insert_hint<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > &,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00093	89 45 a0	 mov	 DWORD PTR tv81[ebp], eax
  00096	8b 4d a4	 mov	 ecx, DWORD PTR $T2[ebp]
  00099	83 c9 01	 or	 ecx, 1
  0009c	89 4d a4	 mov	 DWORD PTR $T2[ebp], ecx
  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a6	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  000a9	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  000ae	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1164 : 		}

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 1073 : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1074 : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));

  00009	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@XZ ; std::tuple<>::tuple<>
  00011	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1075 : 	}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ??0?$tuple@ABK@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$tuple@ABK@std@@QAE@$$QAV01@@Z PROC			; std::tuple<unsigned long const &>::tuple<unsigned long const &>, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@ABV01@@Z ; std::tuple<>::tuple<>
  00018	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	89 0a		 mov	 DWORD PTR [edx], ecx
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0?$tuple@ABK@std@@QAE@$$QAV01@@Z ENDP			; std::tuple<unsigned long const &>::tuple<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z PROC ; std::forward_as_tuple<unsigned long const &>, COMDAT

; 1073 : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1074 : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));

  00009	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??$?0ABK$0A@@?$tuple@ABK@std@@QAE@ABK@Z ; std::tuple<unsigned long const &>::tuple<unsigned long const &><unsigned long const &,0>
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1075 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z ENDP ; std::forward_as_tuple<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABK@std@@YAABKABK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABK@std@@YAABKABK@Z PROC			; std::forward<unsigned long const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABK@std@@YAABKABK@Z ENDP			; std::forward<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z
_TEXT	SEGMENT
__Result$ = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z PROC ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>, COMDAT

; 1109 : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1110 : 	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  00009	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00014	e8 00 00 00 00	 call	 ??R?$less@K@std@@QBE_NABK0@Z ; std::less<unsigned long>::operator()
  00019	88 45 ff	 mov	 BYTE PTR __Result$[ebp], al

; 1111 : 	if (_Result)

  0001c	0f b6 45 ff	 movzx	 eax, BYTE PTR __Result$[ebp]
  00020	85 c0		 test	 eax, eax
  00022	74 67		 je	 SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 1112 : 		{
; 1113 : 		_STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

  00024	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  0002f	e8 00 00 00 00	 call	 ??R?$less@K@std@@QBE_NABK0@Z ; std::less<unsigned long>::operator()
  00034	0f b6 d0	 movzx	 edx, al
  00037	85 d2		 test	 edx, edx
  00039	75 02		 jne	 SHORT $LN7@Debug_lt_p
  0003b	eb 4a		 jmp	 SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	6a 00		 push	 0
  00049	68 59 04 00 00	 push	 1113			; 00000459H
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	6a 02		 push	 2
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 01		 jne	 SHORT $LN12@Debug_lt_p
  00063	cc		 int	 3
$LN12@Debug_lt_p:
  00064	6a 00		 push	 0
  00066	68 59 04 00 00	 push	 1113			; 00000459H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	33 c0		 xor	 eax, eax
  00085	75 b6		 jne	 SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
  00087	33 c0		 xor	 eax, eax
  00089	75 99		 jne	 SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 1114 : 		}
; 1115 : 
; 1116 : 	return (_Result);

  0008b	8a 45 ff	 mov	 al, BYTE PTR __Result$[ebp]

; 1117 : 	}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ENDP ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z
_TEXT	SEGMENT
$T1 = -78						; size = 1
$T2 = -77						; size = 1
__UDest$ = -12						; size = 4
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z PROC ; std::_Uninitialized_move<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z ; std::_Get_unwrapped<tagPropertyBuff>
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z ; std::_Get_unwrapped<tagPropertyBuff>
  00021	83 c4 04	 add	 esp, 4
  00024	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00027	8d 45 f8	 lea	 eax, DWORD PTR __ULast$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d fc	 lea	 ecx, DWORD PTR __UFirst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$_Idl_distance@PAUtagPropertyBuff@@PAU1@@std@@YA@ABQAUtagPropertyBuff@@0@Z ; std::_Idl_distance<tagPropertyBuff *,tagPropertyBuff *>
  00034	83 c4 08	 add	 esp, 8
  00037	50		 push	 eax
  00038	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@UtagPropertyBuff@@H$0A@@std@@YAPAUtagPropertyBuff@@QAU1@H@Z ; std::_Get_unwrapped_n<tagPropertyBuff,int,0>
  00041	83 c4 08	 add	 esp, 8
  00044	89 45 f4	 mov	 DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

  00047	0f b6 45 b3	 movzx	 eax, BYTE PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8d 4d f4	 lea	 ecx, DWORD PTR __UDest$[ebp]
  0004f	51		 push	 ecx
  00050	8d 55 fc	 lea	 edx, DWORD PTR __UFirst$[ebp]
  00053	52		 push	 edx
  00054	8d 45 b2	 lea	 eax, DWORD PTR $T1[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z ; std::_Ptr_move_cat<tagPropertyBuff,tagPropertyBuff>
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	0f b6 d1	 movzx	 edx, cl
  00065	52		 push	 edx
  00066	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __UDest$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  00071	52		 push	 edx
  00072	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >
  0007b	83 c4 18	 add	 esp, 24			; 00000018H
  0007e	50		 push	 eax
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ??$_Seek_wrapped@UtagPropertyBuff@@@std@@YAXAAPAUtagPropertyBuff@@QAU1@@Z ; std::_Seek_wrapped<tagPropertyBuff>
  00088	83 c4 08	 add	 esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

  0008b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
??$_Uninitialized_move@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z ENDP ; std::_Uninitialized_move<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<tagPropertyBuff> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 330  : 	return (__builtin_addressof(_Val));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<tagPropertyBuff> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >

; 279  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABU?$less@K@std@@@std@@YAABU?$less@K@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@K@std@@@std@@YAABU?$less@K@0@ABU10@@Z PROC ; std::forward<std::less<unsigned long> const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABU?$less@K@std@@@std@@YAABU?$less@K@0@ABU10@@Z ENDP ; std::forward<std::less<unsigned long> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>, COMDAT

; 886  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	83 c0 27	 add	 eax, 39			; 00000027H
  0000f	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 94   : 	if (_Block_size <= _Bytes)

  00012	8b 45 fc	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00015	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00018	77 07		 ja	 SHORT $LN8@Allocate_m

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);

  0001a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __Block_size$[ebp], -1
$LN8@Allocate_m:

; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00021	8b 45 fc	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00030	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00034	74 02		 je	 SHORT $LN7@Allocate_m
  00036	eb 44		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00042	6a 00		 push	 0
  00044	6a 65		 push	 101			; 00000065H
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004b	6a 02		 push	 2
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00053	83 c4 18	 add	 esp, 24			; 00000018H
  00056	83 f8 01	 cmp	 eax, 1
  00059	75 01		 jne	 SHORT $LN12@Allocate_m
  0005b	cc		 int	 3
$LN12@Allocate_m:
  0005c	6a 00		 push	 0
  0005e	6a 65		 push	 101			; 00000065H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	33 c0		 xor	 eax, eax
  0007a	75 bc		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0007c	33 c0		 xor	 eax, eax
  0007e	75 b0		 jne	 SHORT $LN4@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00080	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00083	83 c0 27	 add	 eax, 39			; 00000027H
  00086	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00089	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 ff	 imul	 ecx, eax, -1
  00094	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00097	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0009a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	6b c8 fe	 imul	 ecx, eax, -2
  000a5	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000a8	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);

  000af	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 110  : 	}

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<tagPropertyBuff> >, COMDAT

; 1145 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1146 : 		// nothing to do
; 1147 : 	}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$_Destroy_range1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z
_TEXT	SEGMENT
$T1 = -78						; size = 1
$T2 = -77						; size = 1
__UDest$ = -12						; size = 4
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z PROC ; std::_Uninitialized_copy<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >, COMDAT

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z ; std::_Get_unwrapped<tagPropertyBuff>
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@QAU1@@Z ; std::_Get_unwrapped<tagPropertyBuff>
  00021	83 c4 04	 add	 esp, 4
  00024	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00027	8d 45 f8	 lea	 eax, DWORD PTR __ULast$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d fc	 lea	 ecx, DWORD PTR __UFirst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$_Idl_distance@PAUtagPropertyBuff@@PAU1@@std@@YA@ABQAUtagPropertyBuff@@0@Z ; std::_Idl_distance<tagPropertyBuff *,tagPropertyBuff *>
  00034	83 c4 08	 add	 esp, 8
  00037	50		 push	 eax
  00038	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@UtagPropertyBuff@@H$0A@@std@@YAPAUtagPropertyBuff@@QAU1@H@Z ; std::_Get_unwrapped_n<tagPropertyBuff,int,0>
  00041	83 c4 08	 add	 esp, 8
  00044	89 45 f4	 mov	 DWORD PTR __UDest$[ebp], eax

; 214  : 	_Seek_wrapped(_Dest,

  00047	0f b6 45 b3	 movzx	 eax, BYTE PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8d 4d f4	 lea	 ecx, DWORD PTR __UDest$[ebp]
  0004f	51		 push	 ecx
  00050	8d 55 fc	 lea	 edx, DWORD PTR __UFirst$[ebp]
  00053	52		 push	 edx
  00054	8d 45 b2	 lea	 eax, DWORD PTR $T1[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@UtagPropertyBuff@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUtagPropertyBuff@@0@Z ; std::_Ptr_copy_cat<tagPropertyBuff,tagPropertyBuff>
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	0f b6 d1	 movzx	 edx, cl
  00065	52		 push	 edx
  00066	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __UDest$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  00071	52		 push	 edx
  00072	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked@UtagPropertyBuff@@U1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@00AAV?$allocator@UtagPropertyBuff@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<tagPropertyBuff,tagPropertyBuff,std::allocator<tagPropertyBuff> >
  0007b	83 c4 18	 add	 esp, 24			; 00000018H
  0007e	50		 push	 eax
  0007f	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ??$_Seek_wrapped@UtagPropertyBuff@@@std@@YAXAAPAUtagPropertyBuff@@QAU1@@Z ; std::_Seek_wrapped<tagPropertyBuff>
  00088	83 c4 08	 add	 esp, 8

; 215  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 216  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 217  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));
; 218  : 
; 219  : 	return (_Dest);

  0008b	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 220  : 	}

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
??$_Uninitialized_copy@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z ENDP ; std::_Uninitialized_copy<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@UtagPropertyBuff@@@std@@$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@UtagPropertyBuff@@@std@@$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><std::allocator<tagPropertyBuff> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@V?$allocator@UtagPropertyBuff@@@std@@@std@@YA$$QAV?$allocator@UtagPropertyBuff@@@0@AAV10@@Z ; std::forward<std::allocator<tagPropertyBuff> >
  00015	83 c4 04	 add	 esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<tagPropertyBuff> >::_Vector_val<std::_Simple_types<tagPropertyBuff> >

; 288  : 		}

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??$?0V?$allocator@UtagPropertyBuff@@@std@@$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@UtagPropertyBuff@@@std@@@std@@YA$$QAV?$allocator@UtagPropertyBuff@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@UtagPropertyBuff@@@std@@@std@@YA$$QAV?$allocator@UtagPropertyBuff@@@0@AAV10@@Z PROC ; std::forward<std::allocator<tagPropertyBuff> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@V?$allocator@UtagPropertyBuff@@@std@@@std@@YA$$QAV?$allocator@UtagPropertyBuff@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z
_TEXT	SEGMENT
tv156 = -152						; size = 4
tv151 = -152						; size = 4
tv217 = -148						; size = 4
tv207 = -148						; size = 4
tv163 = -144						; size = 4
tv69 = -144						; size = 4
$T2 = -140						; size = 4
$T3 = -133						; size = 1
$T4 = -132						; size = 12
$T5 = -120						; size = 4
$T6 = -116						; size = 4
$T7 = -110						; size = 1
$T8 = -109						; size = 1
$T9 = -108						; size = 12
$T10 = -93						; size = 1
__Where$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z PROC ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Try_emplace<unsigned long const &>, COMDAT
; _this$ = ecx

; 227  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 228  : 		iterator _Where = _Mybase::lower_bound(_Keyval);

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d e4	 lea	 ecx, DWORD PTR __Where$[ebp]
  0003f	51		 push	 ecx
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?lower_bound@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::lower_bound
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 229  : 		if (_Where == _Mybase::end()
; 230  : 			|| _DEBUG_LT_PRED(_Mybase::_Getcomp(),

  0004f	8d 45 94	 lea	 eax, DWORD PTR $T9[ebp]
  00052	50		 push	 eax
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
  0005b	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  00061	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  00067	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  0006d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00071	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00077	83 ca 01	 or	 edx, 1
  0007a	89 95 74 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00080	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  00086	50		 push	 eax
  00087	8d 4d e4	 lea	 ecx, DWORD PTR __Where$[ebp]
  0008a	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  0008f	0f b6 c8	 movzx	 ecx, al
  00092	85 c9		 test	 ecx, ecx
  00094	75 35		 jne	 SHORT $LN5@Try_emplac
  00096	8b 55 ec	 mov	 edx, DWORD PTR __Where$[ebp+8]
  00099	52		 push	 edx
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
  000a2	50		 push	 eax
  000a3	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@K@std@@ABKABK@std@@YA_NAAU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> &,unsigned long const &,unsigned long const &>
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	0f b6 c8	 movzx	 ecx, al
  000bb	85 c9		 test	 ecx, ecx
  000bd	75 0c		 jne	 SHORT $LN5@Try_emplac
  000bf	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv151[ebp], 0
  000c9	eb 0a		 jmp	 SHORT $LN6@Try_emplac
$LN5@Try_emplac:
  000cb	c7 85 68 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv151[ebp], 1
$LN6@Try_emplac:
  000d5	8a 95 68 ff ff
	ff		 mov	 dl, BYTE PTR tv151[ebp]
  000db	88 55 a3	 mov	 BYTE PTR $T10[ebp], dl
  000de	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000e5	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  000eb	83 e0 01	 and	 eax, 1
  000ee	74 0f		 je	 SHORT $LN10@Try_emplac
  000f0	83 a5 74 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  000f7	8d 4d 94	 lea	 ecx, DWORD PTR $T9[ebp]
  000fa	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN10@Try_emplac:
  000ff	0f b6 4d a3	 movzx	 ecx, BYTE PTR $T10[ebp]
  00103	85 c9		 test	 ecx, ecx
  00105	0f 84 ab 00 00
	00		 je	 $LN2@Try_emplac

; 231  : 				_Keyval, _Mybase::_Key(_Where._Ptr)))
; 232  : 			return (_Pairib(

  0010b	c6 45 93 01	 mov	 BYTE PTR $T8[ebp], 1
  0010f	8d 45 93	 lea	 eax, DWORD PTR $T8[ebp]
  00112	50		 push	 eax
  00113	8d 4d 92	 lea	 ecx, DWORD PTR $T7[ebp]
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
  0011c	83 c4 04	 add	 esp, 4
  0011f	50		 push	 eax
  00120	8b 55 0c	 mov	 edx, DWORD PTR __Keyval$[ebp]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  00129	83 c4 04	 add	 esp, 4
  0012c	50		 push	 eax
  0012d	8d 45 8c	 lea	 eax, DWORD PTR $T6[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ??$forward_as_tuple@ABK@std@@YA?AV?$tuple@ABK@0@ABK@Z ; std::forward_as_tuple<unsigned long const &>
  00136	83 c4 08	 add	 esp, 8
  00139	50		 push	 eax
  0013a	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  0013f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00142	8b cc		 mov	 ecx, esp
  00144	89 65 88	 mov	 DWORD PTR $T5[ebp], esp
  00147	8d 55 e4	 lea	 edx, DWORD PTR __Where$[ebp]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00150	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00156	50		 push	 eax
  00157	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	e8 00 00 00 00	 call	 ??$emplace_hint@ABUpiecewise_construct_t@std@@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::emplace_hint<std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
  0015f	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv163[ebp], eax
  00165	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv163[ebp]
  0016b	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv217[ebp], ecx
  00171	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv217[ebp]
  00177	52		 push	 edx
  00178	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0017b	e8 00 00 00 00	 call	 ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool,0>
  00180	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv156[ebp], eax
  00186	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0018c	83 c8 02	 or	 eax, 2
  0018f	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00195	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0019b	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a7	8d 4d e4	 lea	 ecx, DWORD PTR __Where$[ebp]
  001aa	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001af	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001b2	eb 4e		 jmp	 SHORT $LN1@Try_emplac

; 233  : 				_Mybase::emplace_hint(_Where,
; 234  : 					piecewise_construct,
; 235  : 					_STD forward_as_tuple(
; 236  : 						_STD forward<_Keyty>(_Keyval)),
; 237  : 					_STD forward_as_tuple(
; 238  : 						_STD forward<_Mappedty>(_Mapval)...)),
; 239  : 				true));
; 240  : 		else

  001b4	eb 3d		 jmp	 SHORT $LN3@Try_emplac
$LN2@Try_emplac:

; 241  : 			return (_Pairib(_Where, false));

  001b6	c6 85 7b ff ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  001bd	8d 85 7b ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001c3	50		 push	 eax
  001c4	8d 4d e4	 lea	 ecx, DWORD PTR __Where$[ebp]
  001c7	51		 push	 ecx
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001cb	e8 00 00 00 00	 call	 ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > > &,bool,0>
  001d0	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  001d6	83 ca 02	 or	 edx, 2
  001d9	89 95 74 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  001df	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e6	8d 4d e4	 lea	 ecx, DWORD PTR __Where$[ebp]
  001e9	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001ee	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001f1	eb 0f		 jmp	 SHORT $LN1@Try_emplac
$LN3@Try_emplac:

; 242  : 		}

  001f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001fa	8d 4d e4	 lea	 ecx, DWORD PTR __Where$[ebp]
  001fd	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN1@Try_emplac:
  00202	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00205	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020c	59		 pop	 ecx
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
  0020f	5b		 pop	 ebx
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z$1:
  00008	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0000e	83 e0 01	 and	 eax, 1
  00011	0f 84 0f 00 00
	00		 je	 $LN9@Try_emplac
  00017	83 a5 74 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0001e	8d 4d 94	 lea	 ecx, DWORD PTR $T9[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN9@Try_emplac:
  00026	c3		 ret	 0
__ehhandler$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z:
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z ENDP ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Try_emplace<unsigned long const &>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001b	68 9c 02 00 00	 push	 668			; 0000029cH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00039	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0003d	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0003f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0004a	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  00067	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006b	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00073	8a 11		 mov	 dl, BYTE PTR [ecx]
  00075	88 10		 mov	 BYTE PTR [eax], dl
  00077	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 04		 push	 4
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
  00023	83 c4 04	 add	 esp, 4
  00026	8b 55 bc	 mov	 edx, DWORD PTR $T1[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 02		 mov	 DWORD PTR [edx], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 330  : 	return (__builtin_addressof(_Val));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$swap@DX@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Tmp$ = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@DX@std@@YAXAAD0@Z PROC				; std::swap<char,void>, COMDAT

; 66   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 67   : 	_Ty _Tmp = _STD move(_Left);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$move@AAD@std@@YA$$QADAAD@Z ; std::move<char &>
  00012	83 c4 04	 add	 esp, 4
  00015	8a 08		 mov	 cl, BYTE PTR [eax]
  00017	88 4d ff	 mov	 BYTE PTR __Tmp$[ebp], cl

; 68   : 	_Left = _STD move(_Right);

  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$move@AAD@std@@YA$$QADAAD@Z ; std::move<char &>
  00023	83 c4 04	 add	 esp, 4
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00029	8a 10		 mov	 dl, BYTE PTR [eax]
  0002b	88 11		 mov	 BYTE PTR [ecx], dl

; 69   : 	_Right = _STD move(_Tmp);

  0002d	8d 45 ff	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$move@AAD@std@@YA$$QADAAD@Z ; std::move<char &>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003c	8a 10		 mov	 dl, BYTE PTR [eax]
  0003e	88 11		 mov	 BYTE PTR [ecx], dl

; 70   : 	}

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??$swap@DX@std@@YAXAAD0@Z ENDP				; std::swap<char,void>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00009	c7 45 fc ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

  00010	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00013	c1 e0 03	 shl	 eax, 3
  00016	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

  00019	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00020	76 07		 jbe	 SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00022	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

  00029	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 33   : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >, COMDAT

; 886  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 887  : 		_Ptr->~_Uty();

  00009	6a 00		 push	 0
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	e8 00 00 00 00	 call	 ??_G?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEPAXI@Z

; 888  : 		}

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$destroy@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 08		 push	 8
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  00023	83 c4 04	 add	 esp, 4
  00026	8b 10		 mov	 edx, DWORD PTR [eax]
  00028	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002b	8b 4d bc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002e	89 11		 mov	 DWORD PTR [ecx], edx
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 346  : 	return (_Ptr);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0CE@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0CE@@std@@YAII@Z PROC		; std::_Get_size_of_n<36>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00009	c7 45 fc c7 71
	1c 07		 mov	 DWORD PTR __Max_possible$[ebp], 119304647 ; 071c71c7H

; 25   : 	size_t _Result = _Count * _Ty_size;

  00010	6b 45 08 24	 imul	 eax, DWORD PTR __Count$[ebp], 36
  00014	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

  00017	81 7d 08 c7 71
	1c 07		 cmp	 DWORD PTR __Count$[ebp], 119304647 ; 071c71c7H
  0001e	76 07		 jbe	 SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00020	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

  00027	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 33   : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Get_size_of_n@$0CE@@std@@YAII@Z ENDP		; std::_Get_size_of_n<36>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 330  : 	return (__builtin_addressof(_Val));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@ABU?$less@K@std@@@std@@YAABU?$less@K@0@ABU10@@Z ; std::forward<std::less<unsigned long> const &>
  00015	83 c4 04	 add	 esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00018	8b 45 10	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
  00021	83 c4 04	 add	 esp, 4
  00024	8a 08		 mov	 cl, BYTE PTR [eax]
  00026	0f b6 d1	 movzx	 edx, cl
  00029	52		 push	 edx
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1><>

; 288  : 		}

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 987  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??$?0U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Node_alloc$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >, COMDAT

; 407  : 			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 408  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
; 409  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 410  : 			_Alnode _Node_alloc(_Al);
; 411  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Left));

  00028	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8d 4d f3	 lea	 ecx, DWORD PTR __Node_alloc$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0003e	83 c4 08	 add	 esp, 8

; 412  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Parent));

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00044	83 c0 04	 add	 eax, 4
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0004d	83 c4 04	 add	 esp, 4
  00050	50		 push	 eax
  00051	8d 4d f3	 lea	 ecx, DWORD PTR __Node_alloc$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0005a	83 c4 08	 add	 esp, 8

; 413  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Right));

  0005d	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00060	83 c0 08	 add	 eax, 8
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00069	83 c4 04	 add	 esp, 4
  0006c	50		 push	 eax
  0006d	8d 4d f3	 lea	 ecx, DWORD PTR __Node_alloc$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ??$destroy@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00076	83 c4 08	 add	 esp, 8

; 414  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);

  00079	6a 01		 push	 1
  0007b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d f3	 lea	 ecx, DWORD PTR __Node_alloc$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::deallocate
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 415  : 			}

  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1212 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1213 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

  00009	6a 01		 push	 1
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1214 : 	}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 886  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00009	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	c1 e0 03	 shl	 eax, 3
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00019	83 c4 08	 add	 esp, 8

; 874  : 		}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0UtagPropertyBuff@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagPropertyBuff@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UtagPropertyBuff@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagPropertyBuff@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><tagPropertyBuff>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 987  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??$?0UtagPropertyBuff@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagPropertyBuff@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><tagPropertyBuff>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 998  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z PROC ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 330  : 	return (__builtin_addressof(_Val));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00009	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00010	72 10		 jb	 SHORT $LN2@Deallocate

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00012	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  00015	50		 push	 eax
  00016	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  0001f	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8

; 208  : 	}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00009	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00010	72 0e		 jb	 SHORT $LN2@Allocate

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00012	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0001b	83 c4 04	 add	 esp, 4
  0001e	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00020	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00024	74 0e		 je	 SHORT $LN3@Allocate

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));

  00026	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0002f	83 c4 04	 add	 esp, 4
  00032	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00034	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 194  : 	}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@@Z
_TEXT	SEGMENT
$T1 = -65						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@@Z PROC ; std::_Destroy_range<std::allocator<tagPropertyBuff> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

  00009	33 c0		 xor	 eax, eax
  0000b	88 45 bf	 mov	 BYTE PTR $T1[ebp], al
  0000e	0f b6 4d bf	 movzx	 ecx, BYTE PTR $T1[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __Al$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<tagPropertyBuff> >
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Destroy_range@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@SAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@SAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > *>::pointer_to, COMDAT

; 341  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 342  : 		return (_STD addressof(_Val));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00012	83 c4 04	 add	 esp, 4

; 343  : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@SAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU2@00@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Ucopy<tagPropertyBuff *>, COMDAT
; _this$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z ; std::_Uninitialized_copy<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1824 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU2@00@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Ucopy<tagPropertyBuff *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@UtagPropertyBuff@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$?0V?$allocator@UtagPropertyBuff@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::allocator<tagPropertyBuff>,void>, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 453  : 		: _Mypair(_One_then_variadic_args_t(),

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@V?$allocator@UtagPropertyBuff@@@std@@@std@@YA$$QAV?$allocator@UtagPropertyBuff@@@0@AAV10@@Z ; std::forward<std::allocator<tagPropertyBuff> >
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  0001d	51		 push	 ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??$?0V?$allocator@UtagPropertyBuff@@@std@@$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><std::allocator<tagPropertyBuff> >

; 456  : 		_Alloc_proxy();

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Alloc_proxy

; 457  : 		}

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??$?0V?$allocator@UtagPropertyBuff@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::allocator<tagPropertyBuff>,void>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z
_TEXT	SEGMENT
tv206 = -120						; size = 4
__Constructed_first$ = -52				; size = 4
__Constructed_last$ = -48				; size = 4
__Newvec$ = -44						; size = 4
__Newcapacity$ = -40					; size = 4
__Newsize$ = -36					; size = 4
__Oldsize$ = -32					; size = 4
__Al$ = -28						; size = 4
__Whereoff$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_reallocate<tagPropertyBuff const &>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 68	 sub	 esp, 104		; 00000068H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0003a	2b 08		 sub	 ecx, DWORD PTR [eax]
  0003c	8b c1		 mov	 eax, ecx
  0003e	99		 cdq
  0003f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00044	f7 f9		 idiv	 ecx
  00046	89 45 e8	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 945  : 		_Alty& _Al = this->_Getal();

  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00051	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::size
  0005c	89 45 e0	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?max_size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::max_size
  00067	39 45 e0	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  0006a	75 05		 jne	 SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

  0006c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@CAXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  00071	8b 45 e0	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  00074	83 c0 01	 add	 eax, 1
  00077	89 45 dc	 mov	 DWORD PTR __Newsize$[ebp], eax

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

  0007a	8b 45 dc	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEII@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Calculate_growth
  00086	89 45 d8	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

  00089	8b 45 d8	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00090	e8 00 00 00 00	 call	 ?allocate@?$allocator@UtagPropertyBuff@@@std@@QAEPAUtagPropertyBuff@@I@Z ; std::allocator<tagPropertyBuff>::allocate
  00095	89 45 d4	 mov	 DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00098	6b 45 e8 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  0009c	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0009f	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  000a3	89 55 d0	 mov	 DWORD PTR __Constructed_last$[ebp], edx

; 958  : 		pointer _Constructed_first = _Constructed_last;

  000a6	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  000a9	89 45 cc	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 959  : 
; 960  : 		_TRY_BEGIN

  000ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000b3	6b 45 e8 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  000b7	03 45 d4	 add	 eax, DWORD PTR __Newvec$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@PAU1@@Z ; std::_Unfancy<tagPropertyBuff>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 88	 mov	 DWORD PTR tv206[ebp], eax
  000c6	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z ; std::forward<tagPropertyBuff const &>
  000cf	83 c4 04	 add	 esp, 4
  000d2	50		 push	 eax
  000d3	8b 55 88	 mov	 edx, DWORD PTR tv206[ebp]
  000d6	52		 push	 edx
  000d7	8b 45 e4	 mov	 eax, DWORD PTR __Al$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ??$construct@UtagPropertyBuff@@ABU1@@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAXAAV?$allocator@UtagPropertyBuff@@@1@QAUtagPropertyBuff@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::construct<tagPropertyBuff,tagPropertyBuff const &>
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

  000e3	6b 45 e8 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  000e7	03 45 d4	 add	 eax, DWORD PTR __Newvec$[ebp]
  000ea	89 45 cc	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

  000ed	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  000f8	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000fa	75 24		 jne	 SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

  000fc	8b 45 d4	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000ff	50		 push	 eax
  00100	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00108	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010a	51		 push	 ecx
  0010b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00113	8b 10		 mov	 edx, DWORD PTR [eax]
  00115	52		 push	 edx
  00116	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

  0011e	eb 44		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

  00120	8b 45 d4	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00123	50		 push	 eax
  00124	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00127	51		 push	 ecx
  00128	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00130	8b 10		 mov	 edx, DWORD PTR [eax]
  00132	52		 push	 edx
  00133	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	e8 00 00 00 00	 call	 ?_Umove@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU3@00@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

  0013b	8b 45 d4	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0013e	89 45 cc	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  00141	6b 45 e8 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  00145	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00148	8d 54 01 24	 lea	 edx, DWORD PTR [ecx+eax+36]
  0014c	52		 push	 edx
  0014d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00155	8b 00		 mov	 eax, DWORD PTR [eax]
  00157	50		 push	 eax
  00158	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0015b	51		 push	 ecx
  0015c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	e8 00 00 00 00	 call	 ?_Umove@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU3@00@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove
$LN5@Emplace_re:
  00164	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

  00166	8b 45 d0	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00169	50		 push	 eax
  0016a	8b 4d cc	 mov	 ecx, DWORD PTR __Constructed_first$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

  00176	8b 45 d8	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00179	50		 push	 eax
  0017a	8b 4d d4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0017d	51		 push	 ecx
  0017e	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00181	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UtagPropertyBuff@@@std@@QAEXQAUtagPropertyBuff@@I@Z ; std::allocator<tagPropertyBuff>::deallocate

; 977  : 		_RERAISE;

  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	e8 00 00 00 00	 call	 __CxxThrowException@8

; 978  : 		_CATCH_END

  0018f	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  00194	c3		 ret	 0
$LN7@Emplace_re:
  00195	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0019c	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z$1
$LN10@Emplace_re:
  0019e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

  001a5	8b 45 d8	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  001a8	50		 push	 eax
  001a9	8b 4d dc	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  001ac	51		 push	 ecx
  001ad	8b 55 d4	 mov	 edx, DWORD PTR __Newvec$[ebp]
  001b0	52		 push	 edx
  001b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001b4	e8 00 00 00 00	 call	 ?_Change_array@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXQAUtagPropertyBuff@@II@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

  001b9	6b 75 e8 24	 imul	 esi, DWORD PTR __Whereoff$[ebp], 36
  001bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c0	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  001c5	03 30		 add	 esi, DWORD PTR [eax]
  001c7	8b c6		 mov	 eax, esi
$LN6@Emplace_re:

; 982  : 		}

  001c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d3	59		 pop	 ecx
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_reallocate<tagPropertyBuff const &>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@UtagPropertyBuff@@ABU1@@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAXAAV?$allocator@UtagPropertyBuff@@@1@QAUtagPropertyBuff@@ABU3@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UtagPropertyBuff@@ABU1@@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAXAAV?$allocator@UtagPropertyBuff@@@1@QAUtagPropertyBuff@@ABU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::construct<tagPropertyBuff,tagPropertyBuff const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	6a 24		 push	 36			; 00000024H
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z ; std::forward<tagPropertyBuff const &>
  00023	83 c4 04	 add	 esp, 4
  00026	b9 09 00 00 00	 mov	 ecx, 9
  0002b	8b f0		 mov	 esi, eax
  0002d	8b 7d bc	 mov	 edi, DWORD PTR $T1[ebp]
  00030	f3 a5		 rep movsd

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$construct@UtagPropertyBuff@@ABU1@@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAXAAV?$allocator@UtagPropertyBuff@@@1@QAUtagPropertyBuff@@ABU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::construct<tagPropertyBuff,tagPropertyBuff const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@PAU1@@Z PROC ; std::_Unfancy<tagPropertyBuff>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 346  : 	return (_Ptr);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Unfancy@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@PAU1@@Z ENDP ; std::_Unfancy<tagPropertyBuff>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE@ABUtagPropertyBuff@@@Z
_TEXT	SEGMENT
tv142 = -76						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE@ABUtagPropertyBuff@@@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_back_with_unused_capacity<tagPropertyBuff const &>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z ; std::forward<tagPropertyBuff const &>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Unfancy@UtagPropertyBuff@@@std@@YAPAUtagPropertyBuff@@PAU1@@Z ; std::_Unfancy<tagPropertyBuff>
  00029	83 c4 04	 add	 esp, 4
  0002c	50		 push	 eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$construct@UtagPropertyBuff@@ABU1@@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAXAAV?$allocator@UtagPropertyBuff@@@1@QAUtagPropertyBuff@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::construct<tagPropertyBuff,tagPropertyBuff const &>
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	50		 push	 eax
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	51		 push	 ecx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00064	8b 00		 mov	 eax, DWORD PTR [eax]
  00066	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 905  : 		++this->_Mylast();

  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00071	89 45 b4	 mov	 DWORD PTR tv142[ebp], eax
  00074	8b 45 b4	 mov	 eax, DWORD PTR tv142[ebp]
  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	83 c1 24	 add	 ecx, 36			; 00000024H
  0007c	8b 55 b4	 mov	 edx, DWORD PTR tv142[ebp]
  0007f	89 0a		 mov	 DWORD PTR [edx], ecx

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE@ABUtagPropertyBuff@@@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_back_with_unused_capacity<tagPropertyBuff const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z PROC ; std::forward<tagPropertyBuff const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z ENDP ; std::forward<tagPropertyBuff const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABUtagPropertyBuff@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABUtagPropertyBuff@@@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::emplace_back<tagPropertyBuff const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Has_unused_capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABE_NXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Has_unused_capacity
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	74 17		 je	 SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  0001b	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z ; std::forward<tagPropertyBuff const &>
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE@ABUtagPropertyBuff@@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_back_with_unused_capacity<tagPropertyBuff const &>
  00030	eb 23		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00032	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$forward@ABUtagPropertyBuff@@@std@@YAABUtagPropertyBuff@@ABU1@@Z ; std::forward<tagPropertyBuff const &>
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	51		 push	 ecx
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEPAUtagPropertyBuff@@QAU2@ABU2@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Emplace_reallocate<tagPropertyBuff const &>
  00052	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
??$emplace_back@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABUtagPropertyBuff@@@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::emplace_back<tagPropertyBuff const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEPAXI@Z PROC ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEPAXI@Z ENDP ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 04	 add	 ecx, 4
  00012	e8 00 00 00 00	 call	 ??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::~vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??1?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>::~pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--, COMDAT
; _this$ = ecx

; 354  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 355  : 		--static_cast<_Mybase&>(*this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--

; 356  : 		return (*this);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 357  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator->, COMDAT
; _this$ = ecx

; 336  : 		{	// return pointer to class object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  : 		return (pointer_traits<pointer>::pointer_to(**this));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@SAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@AAU32@@Z ; std::pointer_traits<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > *>::pointer_to
  0001a	83 c4 04	 add	 esp, 4

; 338  : 		}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*, COMDAT
; _this$ = ecx

; 331  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return ((reference)**(_Mybase *)this);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*

; 333  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 326  : 		: _Mybase(_Pnode, _Plist)

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >

; 328  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??4?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator!=, COMDAT
; _this$ = ecx

; 282  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 283  : 		return (!(*this == _Right));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  00018	0f b6 c8	 movzx	 ecx, al
  0001b	85 c9		 test	 ecx, ecx
  0001d	75 09		 jne	 SHORT $LN3@operator
  0001f	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00028	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  0002f	8a 45 b8	 mov	 al, BYTE PTR tv69[ebp]

; 284  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv136 = -72						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==, COMDAT
; _this$ = ecx

; 273  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 274  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 275  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0001e	3b f0		 cmp	 esi, eax
  00020	75 02		 jne	 SHORT $LN7@operator
  00022	eb 4a		 jmp	 SHORT $LN2@operator
$LN7@operator:
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002e	6a 00		 push	 0
  00030	68 13 01 00 00	 push	 275			; 00000113H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003a	6a 02		 push	 2
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	83 f8 01	 cmp	 eax, 1
  00048	75 01		 jne	 SHORT $LN11@operator
  0004a	cc		 int	 3
$LN11@operator:
  0004b	6a 00		 push	 0
  0004d	68 13 01 00 00	 push	 275			; 00000113H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1BMC@CJDBOPPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00067	83 c4 14	 add	 esp, 20			; 00000014H
  0006a	33 c0		 xor	 eax, eax
  0006c	75 b6		 jne	 SHORT $LN7@operator
$LN2@operator:
  0006e	33 c0		 xor	 eax, eax
  00070	75 9a		 jne	 SHORT $LN4@operator

; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00078	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0007b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0007e	75 09		 jne	 SHORT $LN12@operator
  00080	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv136[ebp], 1
  00087	eb 07		 jmp	 SHORT $LN13@operator
$LN12@operator:
  00089	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$LN13@operator:
  00090	8a 45 b8	 mov	 al, BYTE PTR tv136[ebp]

; 279  : 		}

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Ptrsav$ = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--, COMDAT
; _this$ = ecx

; 252  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00014	85 c0		 test	 eax, eax
  00016	74 02		 je	 SHORT $LN7@operator
  00018	eb 4a		 jmp	 SHORT $LN2@operator
$LN7@operator:
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@JECMPNID@cannot?5decrement?5value?9initiali@
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00024	6a 00		 push	 0
  00026	68 00 01 00 00	 push	 256			; 00000100H
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00030	6a 02		 push	 2
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	75 01		 jne	 SHORT $LN19@operator
  00040	cc		 int	 3
$LN19@operator:
  00041	6a 00		 push	 0
  00043	68 00 01 00 00	 push	 256			; 00000100H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1BMC@HKPOLKPL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@ECOECPCJ@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
  00060	33 c0		 xor	 eax, eax
  00062	75 b6		 jne	 SHORT $LN7@operator
$LN2@operator:
  00064	33 c0		 xor	 eax, eax
  00066	75 a4		 jne	 SHORT $LN4@operator

; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	89 4d f8	 mov	 DWORD PTR __Ptrsav$[ebp], ecx

; 258  : 		--static_cast<_Mybase&>(*this);

  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator--
$LN10@operator:

; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");

  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR __Ptrsav$[ebp]
  0007f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00082	74 02		 je	 SHORT $LN13@operator
  00084	eb 4a		 jmp	 SHORT $LN8@operator
$LN13@operator:
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FJCIBNID@cannot?5decrement?5begin?5map?1set?5@
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00090	6a 00		 push	 0
  00092	68 03 01 00 00	 push	 259			; 00000103H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009c	6a 02		 push	 2
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000a4	83 c4 18	 add	 esp, 24			; 00000018H
  000a7	83 f8 01	 cmp	 eax, 1
  000aa	75 01		 jne	 SHORT $LN20@operator
  000ac	cc		 int	 3
$LN20@operator:
  000ad	6a 00		 push	 0
  000af	68 03 01 00 00	 push	 259			; 00000103H
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_1BMC@HKPOLKPL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@HAEBNAIH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000c9	83 c4 14	 add	 esp, 20			; 00000014H
  000cc	33 c0		 xor	 eax, eax
  000ce	75 b6		 jne	 SHORT $LN13@operator
$LN8@operator:
  000d0	33 c0		 xor	 eax, eax
  000d2	75 a5		 jne	 SHORT $LN10@operator

; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 263  : 		}

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
$T2 = -96						; size = 4
__Tmp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 246  : 		_Tree_const_iterator _Tmp = *this;

  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	50		 push	 eax
  00036	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 247  : 		++*this;

  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++

; 248  : 		return (_Tmp);

  0004d	8d 45 e4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00054	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00059	8b 4d a0	 mov	 ecx, DWORD PTR $T2[ebp]
  0005c	83 c9 01	 or	 ecx, 1
  0005f	89 4d a0	 mov	 DWORD PTR $T2[ebp], ecx
  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0006c	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00071	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++, COMDAT
; _this$ = ecx

; 234  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00014	85 c0		 test	 eax, eax
  00016	74 02		 je	 SHORT $LN7@operator
  00018	eb 4a		 jmp	 SHORT $LN2@operator
$LN7@operator:
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00024	6a 00		 push	 0
  00026	68 ec 00 00 00	 push	 236			; 000000ecH
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00030	6a 02		 push	 2
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	75 01		 jne	 SHORT $LN19@operator
  00040	cc		 int	 3
$LN19@operator:
  00041	6a 00		 push	 0
  00043	68 ec 00 00 00	 push	 236			; 000000ecH
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1BMC@IJMMAGDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
  00060	33 c0		 xor	 eax, eax
  00062	75 b6		 jne	 SHORT $LN7@operator
$LN2@operator:
  00064	33 c0		 xor	 eax, eax
  00066	75 a4		 jne	 SHORT $LN4@operator
$LN10@operator:

; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00072	85 d2		 test	 edx, edx
  00074	75 02		 jne	 SHORT $LN13@operator
  00076	eb 4a		 jmp	 SHORT $LN8@operator
$LN13@operator:
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00082	6a 00		 push	 0
  00084	68 ed 00 00 00	 push	 237			; 000000edH
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0008e	6a 02		 push	 2
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00096	83 c4 18	 add	 esp, 24			; 00000018H
  00099	83 f8 01	 cmp	 eax, 1
  0009c	75 01		 jne	 SHORT $LN20@operator
  0009e	cc		 int	 3
$LN20@operator:
  0009f	6a 00		 push	 0
  000a1	68 ed 00 00 00	 push	 237			; 000000edH
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_1BMC@IJMMAGDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000bb	83 c4 14	 add	 esp, 20			; 00000014H
  000be	33 c0		 xor	 eax, eax
  000c0	75 b6		 jne	 SHORT $LN13@operator
$LN8@operator:
  000c2	33 c0		 xor	 eax, eax
  000c4	75 a2		 jne	 SHORT $LN10@operator

; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator++

; 241  : 		return (*this);

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 242  : 		}

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*, COMDAT
; _this$ = ecx

; 218  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 220  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00014	89 45 f8	 mov	 DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 221  : 		_STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

  00017	83 7d f8 00	 cmp	 DWORD PTR __Mycont$[ebp], 0
  0001b	74 02		 je	 SHORT $LN7@operator
  0001d	eb 4a		 jmp	 SHORT $LN2@operator
$LN7@operator:
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00029	6a 00		 push	 0
  0002b	68 dd 00 00 00	 push	 221			; 000000ddH
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00035	6a 02		 push	 2
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	83 f8 01	 cmp	 eax, 1
  00043	75 01		 jne	 SHORT $LN19@operator
  00045	cc		 int	 3
$LN19@operator:
  00046	6a 00		 push	 0
  00048	68 dd 00 00 00	 push	 221			; 000000ddH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1BMA@DJJFGNNP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00062	83 c4 14	 add	 esp, 20			; 00000014H
  00065	33 c0		 xor	 eax, eax
  00067	75 b6		 jne	 SHORT $LN7@operator
$LN2@operator:
  00069	33 c0		 xor	 eax, eax
  0006b	75 aa		 jne	 SHORT $LN4@operator
$LN10@operator:

; 222  : 		_STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 4d f8	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  00073	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00076	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00079	74 02		 je	 SHORT $LN13@operator
  0007b	eb 4a		 jmp	 SHORT $LN8@operator
$LN13@operator:
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00087	6a 00		 push	 0
  00089	68 de 00 00 00	 push	 222			; 000000deH
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00093	6a 02		 push	 2
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	83 f8 01	 cmp	 eax, 1
  000a1	75 01		 jne	 SHORT $LN20@operator
  000a3	cc		 int	 3
$LN20@operator:
  000a4	6a 00		 push	 0
  000a6	68 de 00 00 00	 push	 222			; 000000deH
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_1BMA@DJJFGNNP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000c0	83 c4 14	 add	 esp, 20			; 00000014H
  000c3	33 c0		 xor	 eax, eax
  000c5	75 b6		 jne	 SHORT $LN13@operator
$LN8@operator:
  000c7	33 c0		 xor	 eax, eax
  000c9	75 a2		 jne	 SHORT $LN10@operator

; 223  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 224  : 
; 225  : 		return (this->_Ptr->_Myval);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000d1	83 c0 10	 add	 eax, 16			; 00000010H

; 226  : 		}

  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 		: _Mybase(_Pnode, _Plist)

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>

; 215  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >, COMDAT
; _this$ = ecx

; 209  : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		: _Mybase()

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>

; 210  : 		}

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??4?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator--, COMDAT
; _this$ = ecx

; 85   : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 86   : 		if (_Ptr->_Isnil)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00012	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00016	85 d2		 test	 edx, edx
  00018	74 11		 je	 SHORT $LN4@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00026	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00029	eb 6f		 jmp	 SHORT $LN5@operator
$LN4@operator:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	0f be 42 0d	 movsx	 eax, BYTE PTR [edx+13]
  00037	85 c0		 test	 eax, eax
  00039	74 48		 je	 SHORT $LN6@operator
$LN2@operator:

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00041	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00044	89 55 f8	 mov	 DWORD PTR __Pnode$1[ebp], edx
  00047	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  0004a	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  0004e	85 c9		 test	 ecx, ecx
  00050	75 18		 jne	 SHORT $LN3@operator
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$1[ebp]
  00058	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0005b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0005d	75 0b		 jne	 SHORT $LN3@operator

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$1[ebp]
  00065	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 96   : 				}

  00068	eb d1		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00070	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00074	85 d2		 test	 edx, edx
  00076	75 09		 jne	 SHORT $LN8@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$1[ebp]
  0007e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@operator:

; 101  : 				}
; 102  : 			}
; 103  : 		else

  00081	eb 17		 jmp	 SHORT $LN5@operator
$LN6@operator:

; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Max
  00091	83 c4 04	 add	 esp, 4
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN5@operator:

; 106  : 			}
; 107  : 
; 108  : 		return (*this);

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 109  : 		}

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 		if (_Ptr->_Right->_Isnil)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00012	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00015	0f be 42 0d	 movsx	 eax, BYTE PTR [edx+13]
  00019	85 c0		 test	 eax, eax
  0001b	74 3b		 je	 SHORT $LN4@operator
$LN2@operator:

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 55 f8	 mov	 DWORD PTR __Pnode$1[ebp], edx
  00029	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$1[ebp]
  0002c	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00030	85 c9		 test	 ecx, ecx
  00032	75 19		 jne	 SHORT $LN3@operator
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$1[ebp]
  0003a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0003d	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00040	75 0b		 jne	 SHORT $LN3@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$1[ebp]
  00048	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 65   : 				}

  0004b	eb d0		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$1[ebp]
  00053	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 68   : 			}
; 69   : 		else

  00056	eb 18		 jmp	 SHORT $LN5@operator
$LN4@operator:

; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Min
  00067	83 c4 04	 add	 esp, 4
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN5@operator:

; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 75   : 		}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12

; 42   : 		: _Ptr(_Pnode)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0001a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 44   : 		this->_Adopt(_Plist);

  0001d	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 45   : 		}

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12

; 37   : 		: _Ptr()

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 39   : 		}

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$try_emplace@$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$try_emplace@$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z PROC ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::try_emplace<>, COMDAT
; _this$ = ecx

; 247  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 248  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  00013	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Try_emplace@ABK$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Try_emplace<unsigned long const &>
  00023	8b 55 b8	 mov	 edx, DWORD PTR $T1[ebp]
  00026	83 ca 01	 or	 edx, 1
  00029	89 55 b8	 mov	 DWORD PTR $T1[ebp], edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
??$try_emplace@$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z ENDP ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::try_emplace<>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z
_TEXT	SEGMENT
__Pnext$ = -24						; size = 4
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

  0002b	6a 03		 push	 3
  0002d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getpfirst
  00045	89 45 e8	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

  00048	83 7d e8 00	 cmp	 DWORD PTR __Pnext$[ebp], 0
  0004c	74 4e		 je	 SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00051	83 38 00	 cmp	 DWORD PTR [eax], 0
  00054	74 46		 je	 SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

  00056	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005e	3b 55 08	 cmp	 edx, DWORD PTR __First$[ebp]
  00061	72 0d		 jb	 SHORT $LN7@Orphan_ran
  00063	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0006b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0006e	73 0f		 jae	 SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

  00070	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  0007a	89 45 e8	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

  0007d	eb 1b		 jmp	 SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

  0007f	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	e8 00 00 00 00	 call	 ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

  00089	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  00093	8b 4d e8	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  00096	8b 10		 mov	 edx, DWORD PTR [eax]
  00098	89 11		 mov	 DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

  0009a	eb b2		 jmp	 SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEXPAUtagPropertyBuff@@0@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Orphan_range
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@CAXXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1926 : 		_Xlength_error("vector<T> too long");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  0000e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Xlength@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@CAXXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0001c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001f	74 6b		 je	 SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	51		 push	 ecx
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::capacity
  00047	50		 push	 eax
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	50		 push	 eax
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  0005b	8b c8		 mov	 ecx, eax
  0005d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UtagPropertyBuff@@@std@@QAEXQAUtagPropertyBuff@@I@Z ; std::allocator<tagPropertyBuff>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0006a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00078	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
  00086	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?_Tidy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXQAUtagPropertyBuff@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXQAUtagPropertyBuff@@II@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0001c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001f	74 41		 je	 SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	50		 push	 eax
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	51		 push	 ecx
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::capacity
  00047	50		 push	 eax
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	50		 push	 eax
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  0005b	8b c8		 mov	 ecx, eax
  0005d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UtagPropertyBuff@@@std@@QAEXQAUtagPropertyBuff@@I@Z ; std::allocator<tagPropertyBuff>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  0006f	6b 75 0c 24	 imul	 esi, DWORD PTR __Newsize$[ebp], 36
  00073	03 75 08	 add	 esi, DWORD PTR __Newvec$[ebp]
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  0007e	89 30		 mov	 DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  00080	6b 75 10 24	 imul	 esi, DWORD PTR __Newcapacity$[ebp], 36
  00084	03 75 08	 add	 esi, DWORD PTR __Newvec$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
  0008f	89 30		 mov	 DWORD PTR [eax], esi

; 1907 : 		}

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXQAUtagPropertyBuff@@II@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE_NI@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1873 : 		this->_Myfirst() = pointer();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1874 : 		this->_Mylast() = pointer();

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00022	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1875 : 		this->_Myend() = pointer();

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

  00036	83 7d 08 00	 cmp	 DWORD PTR __Newcapacity$[ebp], 0
  0003a	75 04		 jne	 SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

  0003c	32 c0		 xor	 al, al
  0003e	eb 61		 jmp	 SHORT $LN4@Buy
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?max_size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::max_size
  00048	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  0004b	76 05		 jbe	 SHORT $LN3@Buy

; 1883 : 			{
; 1884 : 			_Xlength();

  0004d	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@CAXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Xlength
$LN3@Buy:

; 1885 : 			}
; 1886 : 
; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00052	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 ?allocate@?$allocator@UtagPropertyBuff@@@std@@QAEPAUtagPropertyBuff@@I@Z ; std::allocator<tagPropertyBuff>::allocate
  00065	8b f0		 mov	 esi, eax
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0006f	89 30		 mov	 DWORD PTR [eax], esi

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00079	8b f0		 mov	 esi, eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00083	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00085	89 08		 mov	 DWORD PTR [eax], ecx

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0008f	6b 75 08 24	 imul	 esi, DWORD PTR __Newcapacity$[ebp], 36
  00093	03 30		 add	 esi, DWORD PTR [eax]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
  0009d	89 30		 mov	 DWORD PTR [eax], esi

; 1890 : 
; 1891 : 		return (true);

  0009f	b0 01		 mov	 al, 1
$LN4@Buy:

; 1892 : 		}

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
?_Buy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE_NI@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEII@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::capacity
  00014	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?max_size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::max_size
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	2b c1		 sub	 eax, ecx
  00026	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  00029	76 05		 jbe	 SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0002e	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00033	d1 e8		 shr	 eax, 1
  00035	03 45 f8	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00038	89 45 f4	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  0003b	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0003e	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00041	73 05		 jae	 SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

  00043	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00046	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

  00048	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABEII@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAXPAUtagPropertyBuff@@0AAV?$allocator@UtagPropertyBuff@@@0@@Z ; std::_Destroy_range<std::allocator<tagPropertyBuff> >
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1850 : 		}

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00@Z
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

  0000c	33 c0		 xor	 eax, eax
  0000e	88 45 bb	 mov	 BYTE PTR $T1[ebp], al
  00011	0f b6 4d bb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00015	51		 push	 ecx
  00016	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00021	51		 push	 ecx
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00U?$integral_constant@_N$00@2@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z ; std::_Uninitialized_move<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1834 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU3@00@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00014	50		 push	 eax
  00015	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUtagPropertyBuff@@PAU1@V?$allocator@UtagPropertyBuff@@@std@@@std@@YAPAUtagPropertyBuff@@QAU1@0PAU1@AAV?$allocator@UtagPropertyBuff@@@0@@Z ; std::_Uninitialized_move<tagPropertyBuff *,tagPropertyBuff *,std::allocator<tagPropertyBuff> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 1829 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU3@00@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::size
  00014	39 45 08	 cmp	 DWORD PTR __Pos$[ebp], eax
  00017	73 02		 jae	 SHORT $LN7@operator
  00019	eb 4a		 jmp	 SHORT $LN2@operator
$LN7@operator:
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00025	6a 00		 push	 0
  00027	68 c5 06 00 00	 push	 1733			; 000006c5H
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00031	6a 02		 push	 2
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00039	83 c4 18	 add	 esp, 24			; 00000018H
  0003c	83 f8 01	 cmp	 eax, 1
  0003f	75 01		 jne	 SHORT $LN11@operator
  00041	cc		 int	 3
$LN11@operator:
  00042	6a 00		 push	 0
  00044	68 c5 06 00 00	 push	 1733			; 000006c5H
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@IAGBENIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	33 c0		 xor	 eax, eax
  00063	75 b6		 jne	 SHORT $LN7@operator
$LN2@operator:
  00065	33 c0		 xor	 eax, eax
  00067	75 a3		 jne	 SHORT $LN4@operator

; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00071	6b 4d 08 24	 imul	 ecx, DWORD PTR __Pos$[ebp], 36
  00075	03 08		 add	 ecx, DWORD PTR [eax]
  00077	8b c1		 mov	 eax, ecx

; 1737 : 		}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABE_NXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00022	74 09		 je	 SHORT $LN3@Has_unused
  00024	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0002b	eb 07		 jmp	 SHORT $LN4@Has_unused
$LN3@Has_unused:
  0002d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
  00034	8a 45 b8	 mov	 al, BYTE PTR tv77[ebp]

; 1727 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?_Has_unused_capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@ABE_NXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	2b 08		 sub	 ecx, DWORD PTR [eax]
  00022	8b c1		 mov	 eax, ecx
  00024	99		 cdq
  00025	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0002a	f7 f9		 idiv	 ecx

; 1716 : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?capacity@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAIABV?$allocator@UtagPropertyBuff@@@2@@Z ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::max_size
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  00020	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00025	89 45 b4	 mov	 DWORD PTR $T1[ebp], eax
  00028	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  0002b	50		 push	 eax
  0002c	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00035	83 c4 08	 add	 esp, 8
  00038	8b 00		 mov	 eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?max_size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	2b 08		 sub	 ecx, DWORD PTR [eax]
  00022	8b c1		 mov	 eax, ecx
  00024	99		 cdq
  00025	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0002a	f7 f9		 idiv	 ecx

; 1705 : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?empty@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
?empty@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBE_NXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::empty, COMDAT
; _this$ = ecx

; 1698 : 		{	// test if sequence is empty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1699 : 		return (this->_Myfirst() == this->_Mylast());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00014	8b f0		 mov	 esi, eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  0001e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00020	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00022	75 09		 jne	 SHORT $LN3@empty
  00024	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0002b	eb 07		 jmp	 SHORT $LN4@empty
$LN3@empty:
  0002d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN4@empty:
  00034	8a 45 b8	 mov	 al, BYTE PTR tv77[ebp]

; 1700 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?empty@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBE_NXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::clear, COMDAT
; _this$ = ecx

; 1589 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 : 		this->_Orphan_all();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Orphan_all

; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());

  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
  0003d	50		 push	 eax
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	51		 push	 ecx
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXPAUtagPropertyBuff@@0@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Destroy

; 1592 : 		this->_Mylast() = this->_Myfirst();

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00059	8b f0		 mov	 esi, eax
  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00063	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00065	89 08		 mov	 DWORD PTR [eax], ecx

; 1593 : 		}

  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::clear
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXABUtagPropertyBuff@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXABUtagPropertyBuff@@@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::push_back, COMDAT
; _this$ = ecx

; 931  : 		{	// insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 932  : 		emplace_back(_Val);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$emplace_back@ABUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABUtagPropertyBuff@@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::emplace_back<tagPropertyBuff const &>

; 933  : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?push_back@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXABUtagPropertyBuff@@@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::~vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Tidy

; 895  : 		}

  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00045	59		 pop	 ecx
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::~vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv69 = -92						; size = 4
$T2 = -85						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 733  : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00037	50		 push	 eax
  00038	8d 45 ab	 lea	 eax, DWORD PTR $T2[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SA?AV?$allocator@UtagPropertyBuff@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::select_on_container_copy_construction
  00041	83 c4 08	 add	 esp, 8
  00044	50		 push	 eax
  00045	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ??$?0V?$allocator@UtagPropertyBuff@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UtagPropertyBuff@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > ><std::allocator<tagPropertyBuff>,void>
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 735  : 		if (_Buy(_Right.size()))

  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00057	e8 00 00 00 00	 call	 ?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::size
  0005c	50		 push	 eax
  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Buy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAE_NI@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Buy
  00065	0f b6 c0	 movzx	 eax, al
  00068	85 c0		 test	 eax, eax
  0006a	74 66		 je	 SHORT $LN1@vector

; 736  : 			{	// nonzero, fill it
; 737  : 			_TRY_BEGIN

  0006c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

  00070	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  00078	8b 00		 mov	 eax, DWORD PTR [eax]
  0007a	50		 push	 eax
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0007e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	51		 push	 ecx
  00086	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
  0008e	8b 10		 mov	 edx, DWORD PTR [eax]
  00090	52		 push	 edx
  00091	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ??$_Ucopy@PAUtagPropertyBuff@@@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEPAUtagPropertyBuff@@PAU2@00@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Ucopy<tagPropertyBuff *>
  00099	89 45 a4	 mov	 DWORD PTR tv69[ebp], eax
  0009c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
  000a4	8b 4d a4	 mov	 ecx, DWORD PTR tv69[ebp]
  000a7	89 08		 mov	 DWORD PTR [eax], ecx
  000a9	eb 17		 jmp	 SHORT $LN5@vector
__catch$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z$0:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();

  000ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@AAEXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::_Tidy

; 741  : 			_RERAISE;

  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	e8 00 00 00 00	 call	 __CxxThrowException@8

; 742  : 			_CATCH_END

  000bc	b8 00 00 00 00	 mov	 eax, $LN9@vector
  000c1	c3		 ret	 0
$LN5@vector:
  000c2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000c9	eb 07		 jmp	 SHORT $LN1@vector
$LN9@vector:
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN1@vector:

; 743  : 			}
; 744  : 		}

  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000d9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector:
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
__ehhandler$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ PROC ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >

; 652  : 		}

  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 308  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 303  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 298  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<tagPropertyBuff> >::_Vector_val<std::_Simple_types<tagPropertyBuff> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 391  : 		_Myend()

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 393  : 		}

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<tagPropertyBuff> >::_Vector_val<std::_Simple_types<tagPropertyBuff> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH

; 602  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH

; 597  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	83 c0 08	 add	 eax, 8

; 592  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	83 c0 08	 add	 eax, 8

; 587  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	83 c0 04	 add	 eax, 4

; 582  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABQAUtagPropertyBuff@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	83 c0 04	 add	 eax, 4

; 577  : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAUtagPropertyBuff@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second

; 561  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_second

; 556  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first

; 551  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$allocator@UtagPropertyBuff@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Get_first

; 546  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data

; 525  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -5					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00014	50		 push	 eax
  00015	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00018	e8 00 00 00 00	 call	 ??$?0UtagPropertyBuff@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagPropertyBuff@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><tagPropertyBuff>

; 511  : 		_Orphan_all();

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	50		 push	 eax
  00030	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  00039	83 c4 08	 add	 esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	50		 push	 eax
  00047	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00050	83 c4 08	 add	 esp, 8

; 514  : 		_Myproxy() = nullptr;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
  0005b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 515  : 		}

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 8
__Proxy_allocator$ = -5					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$allocator@UtagPropertyBuff@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Getal
  00014	50		 push	 eax
  00015	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00018	e8 00 00 00 00	 call	 ??$?0UtagPropertyBuff@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UtagPropertyBuff@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><tagPropertyBuff>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001d	6a 01		 push	 1
  0001f	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00022	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0002d	83 c4 04	 add	 esp, 4
  00030	8b f0		 mov	 esi, eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
  0003a	89 30		 mov	 DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0003c	8d 4d b0	 lea	 ecx, DWORD PTR $T1[ebp]
  0003f	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
  0004d	8b 00		 mov	 eax, DWORD PTR [eax]
  0004f	50		 push	 eax
  00050	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Get_data
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<tagPropertyBuff> > >
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b f0		 mov	 esi, eax
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Myproxy
  00077	8b 00		 mov	 eax, DWORD PTR [eax]
  00079	89 30		 mov	 DWORD PTR [eax], esi

; 506  : 		}

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Free_proxy

; 462  : 		}

  00033	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00036	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003d	59		 pop	 ecx
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::~_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

  0000c	0f b6 45 bb	 movzx	 eax, BYTE PTR $T1[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@UtagPropertyBuff@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPropertyBuff@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1>::_Compressed_pair<std::allocator<tagPropertyBuff>,std::_Vector_val<std::_Simple_types<tagPropertyBuff> >,1><>

; 447  : 		_Alloc_proxy();

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Alloc_proxy

; 448  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >::_Vector_alloc<std::_Vec_base_types<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SA?AV?$allocator@UtagPropertyBuff@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SA?AV?$allocator@UtagPropertyBuff@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 897  : 		return (_Al);

  00009	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SA?AV?$allocator@UtagPropertyBuff@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAIABV?$allocator@UtagPropertyBuff@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAIABV?$allocator@UtagPropertyBuff@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::max_size, COMDAT

; 891  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00009	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 893  : 		}

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@UtagPropertyBuff@@@std@@@std@@SAIABV?$allocator@UtagPropertyBuff@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<tagPropertyBuff> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@UtagPropertyBuff@@@std@@QAEPAUtagPropertyBuff@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagPropertyBuff@@@std@@QAEPAUtagPropertyBuff@@I@Z PROC ; std::allocator<tagPropertyBuff>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0CE@@std@@YAII@Z ; std::_Get_size_of_n<36>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 998  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@UtagPropertyBuff@@@std@@QAEPAUtagPropertyBuff@@I@Z ENDP ; std::allocator<tagPropertyBuff>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UtagPropertyBuff@@@std@@QAEXQAUtagPropertyBuff@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UtagPropertyBuff@@@std@@QAEXQAUtagPropertyBuff@@I@Z PROC ; std::allocator<tagPropertyBuff>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	6b 45 0c 24	 imul	 eax, DWORD PTR __Count$[ebp], 36
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8

; 993  : 		}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagPropertyBuff@@@std@@QAEXQAUtagPropertyBuff@@I@Z ENDP ; std::allocator<tagPropertyBuff>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@UtagPropertyBuff@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UtagPropertyBuff@@@std@@QAE@XZ PROC	; std::allocator<tagPropertyBuff>::allocator<tagPropertyBuff>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@UtagPropertyBuff@@@std@@QAE@XZ ENDP	; std::allocator<tagPropertyBuff>::allocator<tagPropertyBuff>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??__F?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CGamePropertyManager::m_PropertyBuffMap'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
  0000e	e8 00 00 00 00	 call	 ??1?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__F?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CGamePropertyManager::m_PropertyBuffMap''
text$yd	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ??__E?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CGamePropertyManager::m_PropertyBuffMap'', COMDAT

; 12   : CPropertyBuffMAP CGamePropertyManager::m_PropertyBuffMap;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
  0000e	e8 00 00 00 00	 call	 ??0?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >
  00013	68 00 00 00 00	 push	 OFFSET ??__F?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CGamePropertyManager::m_PropertyBuffMap''
  00018	e8 00 00 00 00	 call	 _atexit
  0001d	83 c4 04	 add	 esp, 4
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??__E?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CGamePropertyManager::m_PropertyBuffMap''
text$di	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??1?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::~map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::~map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z
_TEXT	SEGMENT
tv75 = -108						; size = 4
tv76 = -104						; size = 4
$T2 = -100						; size = 16
$T3 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z PROC ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[], COMDAT
; _this$ = ecx

; 362  : 		{	// find element matching _Keyval or insert with default mapped

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 363  : 		return (try_emplace(_Keyval).first->second);

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00032	51		 push	 ecx
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??$try_emplace@$$V@?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::try_emplace<>
  0003b	89 45 98	 mov	 DWORD PTR tv76[ebp], eax
  0003e	8b 55 98	 mov	 edx, DWORD PTR tv76[ebp]
  00041	89 55 94	 mov	 DWORD PTR tv75[ebp], edx
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	8b 4d 94	 mov	 ecx, DWORD PTR tv75[ebp]
  0004e	e8 00 00 00 00	 call	 ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator->
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 ac	 mov	 DWORD PTR $T3[ebp], eax
  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00063	e8 00 00 00 00	 call	 ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
  00068	8b 45 ac	 mov	 eax, DWORD PTR $T3[ebp]

; 364  : 		}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
__ehhandler$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z ENDP ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[]
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -69						; size = 1
_this$ = -4						; size = 4
??0?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >, COMDAT
; _this$ = ecx

; 115  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 		: _Mybase(key_compare())

  0000c	8d 45 bb	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >

; 116  : 		}

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??0?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key, COMDAT
; _this$ = ecx

; 2122 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2123 : 		return (this->_Kfn(_Pnode->_Myval));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000f	83 c0 10	 add	 eax, 16			; 00000010H
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn

; 2124 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2117 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2118 : 		return (_Traits::_Kfn(_Val));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Kfn@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@SAABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0>::_Kfn<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >
  00015	83 c4 04	 add	 esp, 4

; 2119 : 		}

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEABKABU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
tv149 = -144						; size = 4
tv151 = -140						; size = 4
tv157 = -136						; size = 4
tv146 = -132						; size = 4
tv156 = -128						; size = 4
$T2 = -124						; size = 12
$T3 = -112						; size = 12
$T4 = -100						; size = 4
$T5 = -96						; size = 12
$T6 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2112 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2113 : 		erase(begin(), end());

  0002e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00031	8b f4		 mov	 esi, esp
  00033	89 65 ac	 mov	 DWORD PTR $T6[ebp], esp
  00036	8d 45 a0	 lea	 eax, DWORD PTR $T5[ebp]
  00039	50		 push	 eax
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
  00042	89 45 80	 mov	 DWORD PTR tv156[ebp], eax
  00045	8b 4d 80	 mov	 ecx, DWORD PTR tv156[ebp]
  00048	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv146[ebp], ecx
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv146[ebp]
  0005b	52		 push	 edx
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00063	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00066	8b f4		 mov	 esi, esp
  00068	89 65 9c	 mov	 DWORD PTR $T4[ebp], esp
  0006b	8d 45 90	 lea	 eax, DWORD PTR $T3[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
  00077	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  0007d	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv157[ebp]
  00083	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv151[ebp], ecx
  00089	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008d	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR tv151[ebp]
  00093	52		 push	 edx
  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  0009b	8d 45 84	 lea	 eax, DWORD PTR $T2[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase
  000a7	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv149[ebp], eax
  000ad	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  000b0	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  000b5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b9	8d 4d 90	 lea	 ecx, DWORD PTR $T3[ebp]
  000bc	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c8	8d 4d a0	 lea	 ecx, DWORD PTR $T5[ebp]
  000cb	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ

; 2114 : 		}

  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ$2:
  00008	8d 4d 90	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tidy
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnext$ = -24						; size = 4
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_ptr, COMDAT
; _this$ = ecx

; 2089 : 		{	// orphan iterators with specified node pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2090 : 		_Lockit _Lock(_LOCK_DEBUG);

  0002b	6a 03		 push	 3
  0002d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2091 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Getpfirst@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getpfirst
  00045	89 45 e8	 mov	 DWORD PTR __Pnext$[ebp], eax

; 2092 : 		if (_Pnext != nullptr)

  00048	83 7d e8 00	 cmp	 DWORD PTR __Pnext$[ebp], 0
  0004c	74 5c		 je	 SHORT $LN4@Orphan_ptr
$LN2@Orphan_ptr:

; 2093 : 			{
; 2094 : 			while (*_Pnext != nullptr)

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00051	83 38 00	 cmp	 DWORD PTR [eax], 0
  00054	74 54		 je	 SHORT $LN4@Orphan_ptr

; 2095 : 				{
; 2096 : 				if ((*_Pnext)->_Ptr == this->_Get_data()._Myhead
; 2097 : 					|| (_Ptr != nullptr && (*_Pnext)->_Ptr != _Ptr))

  00056	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00059	8b 30		 mov	 esi, DWORD PTR [eax]
  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00063	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00066	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00069	74 13		 je	 SHORT $LN7@Orphan_ptr
  0006b	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0006f	74 1c		 je	 SHORT $LN5@Orphan_ptr
  00071	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00079	3b 55 08	 cmp	 edx, DWORD PTR __Ptr$[ebp]
  0007c	74 0f		 je	 SHORT $LN5@Orphan_ptr
$LN7@Orphan_ptr:

; 2098 : 					{
; 2099 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

  0007e	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  00088	89 45 e8	 mov	 DWORD PTR __Pnext$[ebp], eax

; 2100 : 					}
; 2101 : 				else

  0008b	eb 1b		 jmp	 SHORT $LN6@Orphan_ptr
$LN5@Orphan_ptr:

; 2102 : 					{	// orphan the iterator
; 2103 : 					(*_Pnext)->_Clrcont();

  0008d	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	e8 00 00 00 00	 call	 ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont

; 2104 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

  00097	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$[ebp]
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  000a1	8b 4d e8	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  000a4	8b 10		 mov	 edx, DWORD PTR [eax]
  000a6	89 11		 mov	 DWORD PTR [ecx], edx
$LN6@Orphan_ptr:

; 2105 : 					}
; 2106 : 				}

  000a8	eb a4		 jmp	 SHORT $LN2@Orphan_ptr
$LN4@Orphan_ptr:

; 2107 : 			}
; 2108 : 		}

  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b1	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_ptr
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE_NABK0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE_NABK0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2031 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2032 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@K@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@ABU?$less@K@std@@ABKABK@std@@YA_NABU?$less@K@0@ABK1@Z ; std::_Debug_lt_pred<std::less<unsigned long> const &,unsigned long const &,unsigned long const &>
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2033 : 		}

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE_NABK0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Al$1 = -12						; size = 4
__Pnode$2 = -8						; size = 4
_this$ = -4						; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2019 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __Pnode$2[ebp], eax
  00012	eb 06		 jmp	 SHORT $LN4@Erase
$LN2@Erase:
  00014	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00017	89 45 08	 mov	 DWORD PTR __Rootnode$[ebp], eax
$LN4@Erase:
  0001a	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  0001d	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00021	85 c9		 test	 ecx, ecx
  00023	75 50		 jne	 SHORT $LN1@Erase

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00025	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00028	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002b	51		 push	 ecx
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  00034	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d f8	 mov	 DWORD PTR __Pnode$2[ebp], ecx

; 2024 : 			_Alnode& _Al = this->_Getal();

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00044	89 45 f4	 mov	 DWORD PTR __Al$1[ebp], eax

; 2025 : 			_Alnode_traits::destroy(_Al, _STD addressof(_Rootnode->_Myval));

  00047	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0004a	83 c0 10	 add	 eax, 16			; 00000010H
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __Al$1[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00060	83 c4 08	 add	 esp, 8

; 2026 : 			_Node::_Freenode0(_Al, _Rootnode);

  00063	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00066	50		 push	 eax
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __Al$1[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >
  00070	83 c4 08	 add	 esp, 8

; 2027 : 			}

  00073	eb 9f		 jmp	 SHORT $LN2@Erase
$LN1@Erase:

; 2028 : 		}

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Al$ = -8						; size = 4
_this$ = -4						; size = 4
__Newnode$ = 8						; size = 4
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Destroy_if_node, COMDAT
; _this$ = ecx

; 1585 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 : 		_Alnode& _Al = this->_Getal();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00014	89 45 f8	 mov	 DWORD PTR __Al$[ebp], eax

; 1587 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Newnode->_Myval));

  00017	8b 45 08	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0001a	83 c0 10	 add	 eax, 16			; 00000010H
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00023	83 c4 04	 add	 esp, 4
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00030	83 c4 08	 add	 esp, 8

; 1588 : 		_Node::_Freenode0(_Al, _Newnode);

  00033	8b 45 08	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00036	50		 push	 eax
  00037	8b 4d f8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >
  00040	83 c4 08	 add	 esp, 8

; 1589 : 		}

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Destroy_if_node
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@ABK@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1480 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 1481 : 		return (iterator(_Lbound(_Keyval), _STD addressof(this->_Get_data())));

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??$_Lbound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Lbound<unsigned long>
  00031	50		 push	 eax
  00032	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0003a	8b 4d b8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003d	83 c9 01	 or	 ecx, 1
  00040	89 4d b8	 mov	 DWORD PTR $T1[ebp], ecx
  00043	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1482 : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Head$ = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::clear, COMDAT
; _this$ = ecx

; 1408 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);

  0002b	6a 00		 push	 0
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_ptr

; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();

  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  0003d	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1414 : 		auto _Head = _My_data._Myhead;

  00040	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00043	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00046	89 4d e8	 mov	 DWORD PTR __Head$[ebp], ecx

; 1415 : 		_Erase(_My_data._Root());

  00049	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	50		 push	 eax
  00054	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Erase

; 1416 : 		_My_data._Root() = _Head;

  0005c	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  00064	8b 4d e8	 mov	 ecx, DWORD PTR __Head$[ebp]
  00067	89 08		 mov	 DWORD PTR [eax], ecx

; 1417 : 		_My_data._Lmost() = _Head;

  00069	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
  00071	8b 4d e8	 mov	 ecx, DWORD PTR __Head$[ebp]
  00074	89 08		 mov	 DWORD PTR [eax], ecx

; 1418 : 		_My_data._Rmost() = _Head;

  00076	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00079	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  0007e	8b 4d e8	 mov	 ecx, DWORD PTR __Head$[ebp]
  00081	89 08		 mov	 DWORD PTR [eax], ecx

; 1419 : 		_My_data._Mysize = 0;

  00083	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00086	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1420 : 		}

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::clear
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
tv94 = -148						; size = 4
tv188 = -144						; size = 4
tv208 = -140						; size = 4
tv183 = -136						; size = 4
tv201 = -132						; size = 4
tv160 = -132						; size = 4
$T2 = -128						; size = 4
$T3 = -124						; size = 12
$T4 = -112						; size = 4
$T5 = -108						; size = 12
$T6 = -96						; size = 12
$T7 = -81						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1385 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00035	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1386 : 		if (_First == begin() && _Last == end())

  0003c	8d 45 a0	 lea	 eax, DWORD PTR $T6[ebp]
  0003f	50		 push	 eax
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
  00048	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv160[ebp], eax
  0004e	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv160[ebp]
  00054	89 8d 78 ff ff
	ff		 mov	 DWORD PTR tv183[ebp], ecx
  0005a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0005e	8b 55 80	 mov	 edx, DWORD PTR $T2[ebp]
  00061	83 ca 01	 or	 edx, 1
  00064	89 55 80	 mov	 DWORD PTR $T2[ebp], edx
  00067	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv183[ebp]
  0006d	50		 push	 eax
  0006e	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00071	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  00076	0f b6 c8	 movzx	 ecx, al
  00079	85 c9		 test	 ecx, ecx
  0007b	74 50		 je	 SHORT $LN7@erase
  0007d	8d 55 94	 lea	 edx, DWORD PTR $T5[ebp]
  00080	52		 push	 edx
  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
  00089	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv208[ebp], eax
  0008f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR tv208[ebp]
  00095	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv188[ebp], eax
  0009b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000a2	8b 4d 80	 mov	 ecx, DWORD PTR $T2[ebp]
  000a5	83 c9 02	 or	 ecx, 2
  000a8	89 4d 80	 mov	 DWORD PTR $T2[ebp], ecx
  000ab	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv188[ebp]
  000b1	52		 push	 edx
  000b2	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  000b5	e8 00 00 00 00	 call	 ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator==
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	85 c0		 test	 eax, eax
  000bf	74 0c		 je	 SHORT $LN7@erase
  000c1	c7 85 6c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv94[ebp], 1
  000cb	eb 0a		 jmp	 SHORT $LN8@erase
$LN7@erase:
  000cd	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv94[ebp], 0
$LN8@erase:
  000d7	8a 8d 6c ff ff
	ff		 mov	 cl, BYTE PTR tv94[ebp]
  000dd	88 4d af	 mov	 BYTE PTR $T7[ebp], cl
  000e0	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000e7	8b 55 80	 mov	 edx, DWORD PTR $T2[ebp]
  000ea	83 e2 02	 and	 edx, 2
  000ed	74 0c		 je	 SHORT $LN15@erase
  000ef	83 65 80 fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  000f3	8d 4d 94	 lea	 ecx, DWORD PTR $T5[ebp]
  000f6	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN15@erase:
  000fb	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00102	8b 45 80	 mov	 eax, DWORD PTR $T2[ebp]
  00105	83 e0 01	 and	 eax, 1
  00108	74 0c		 je	 SHORT $LN16@erase
  0010a	83 65 80 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0010e	8d 4d a0	 lea	 ecx, DWORD PTR $T6[ebp]
  00111	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN16@erase:
  00116	0f b6 4d af	 movzx	 ecx, BYTE PTR $T7[ebp]
  0011a	85 c9		 test	 ecx, ecx
  0011c	74 45		 je	 SHORT $LN2@erase

; 1387 : 			{	// erase all
; 1388 : 			clear();

  0011e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::clear

; 1389 : 			return (begin());

  00126	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	e8 00 00 00 00	 call	 ?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
  00132	8b 4d 80	 mov	 ecx, DWORD PTR $T2[ebp]
  00135	83 c9 04	 or	 ecx, 4
  00138	89 4d 80	 mov	 DWORD PTR $T2[ebp], ecx
  0013b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0013f	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00142	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00147	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014e	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  00151	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00156	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00159	e9 a9 00 00 00	 jmp	 $LN1@erase

; 1390 : 			}
; 1391 : 		else

  0015e	e9 89 00 00 00	 jmp	 $LN5@erase
$LN2@erase:

; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

  00163	8d 45 18	 lea	 eax, DWORD PTR __Last$[ebp]
  00166	50		 push	 eax
  00167	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0016a	e8 00 00 00 00	 call	 ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator!=
  0016f	0f b6 c8	 movzx	 ecx, al
  00172	85 c9		 test	 ecx, ecx
  00174	74 2f		 je	 SHORT $LN3@erase

; 1394 : 				erase(_First++);

  00176	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00179	8b c4		 mov	 eax, esp
  0017b	89 65 90	 mov	 DWORD PTR $T4[ebp], esp
  0017e	6a 00		 push	 0
  00180	50		 push	 eax
  00181	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00184	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++
  00189	8d 4d 84	 lea	 ecx, DWORD PTR $T3[ebp]
  0018c	51		 push	 ecx
  0018d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00190	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase
  00195	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv201[ebp], eax
  0019b	8d 4d 84	 lea	 ecx, DWORD PTR $T3[ebp]
  0019e	e8 00 00 00 00	 call	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001a3	eb be		 jmp	 SHORT $LN2@erase
$LN3@erase:

; 1395 : 			return (iterator(_First._Ptr, _STD addressof(this->_Get_data())));

  001a5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a8	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  001b3	83 c4 04	 add	 esp, 4
  001b6	50		 push	 eax
  001b7	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp+8]
  001ba	50		 push	 eax
  001bb	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001be	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  001c3	8b 4d 80	 mov	 ecx, DWORD PTR $T2[ebp]
  001c6	83 c9 04	 or	 ecx, 4
  001c9	89 4d 80	 mov	 DWORD PTR $T2[ebp], ecx
  001cc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001d0	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  001d3	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001df	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  001e2	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001e7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001ea	eb 1b		 jmp	 SHORT $LN1@erase
$LN5@erase:

; 1396 : 			}
; 1397 : 		}

  001ec	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001f0	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  001f3	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  001f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ff	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  00202	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN1@erase:
  00207	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0020a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00211	59		 pop	 ecx
  00212	5f		 pop	 edi
  00213	5e		 pop	 esi
  00214	5b		 pop	 ebx
  00215	8b e5		 mov	 esp, ebp
  00217	5d		 pop	 ebp
  00218	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$0:
  00000	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$1:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$2:
  00010	8b 45 80	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN12@erase
  0001c	83 65 80 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8d 4d a0	 lea	 ecx, DWORD PTR $T6[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN12@erase:
  00028	c3		 ret	 0
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z$3:
  00029	8b 45 80	 mov	 eax, DWORD PTR $T2[ebp]
  0002c	83 e0 02	 and	 eax, 2
  0002f	0f 84 0c 00 00
	00		 je	 $LN14@erase
  00035	83 65 80 fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00039	8d 4d 94	 lea	 ecx, DWORD PTR $T5[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
$LN14@erase:
  00041	c3		 ret	 0
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
  0005b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv192 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 4
__Al$ = -40						; size = 4
__Erasednode$ = -36					; size = 4
__Successor$ = -32					; size = 12
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1362 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1363 : 		auto& _My_data = this->_Get_data();

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00041	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax
$LN4@erase:

; 1364 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1365 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data)

  00044	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0004c	8b f0		 mov	 esi, eax
  0004e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  00057	83 c4 04	 add	 esp, 4
  0005a	3b f0		 cmp	 esi, eax
  0005c	75 0d		 jne	 SHORT $LN7@erase
  0005e	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00061	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00065	85 c9		 test	 ecx, ecx
  00067	75 02		 jne	 SHORT $LN7@erase
  00069	eb 4a		 jmp	 SHORT $LN2@erase
$LN7@erase:
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JILFNJOL@map?1set?5erase?5iterator?5outside?5@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00075	6a 00		 push	 0
  00077	68 56 05 00 00	 push	 1366			; 00000556H
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00081	6a 02		 push	 2
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00089	83 c4 18	 add	 esp, 24			; 00000018H
  0008c	83 f8 01	 cmp	 eax, 1
  0008f	75 01		 jne	 SHORT $LN11@erase
  00091	cc		 int	 3
$LN11@erase:
  00092	6a 00		 push	 0
  00094	68 56 05 00 00	 push	 1366			; 00000556H
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_1CJI@GONIBODA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ae	83 c4 14	 add	 esp, 20			; 00000014H

; 1366 : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");

  000b1	33 c0		 xor	 eax, eax
  000b3	75 b6		 jne	 SHORT $LN7@erase
$LN2@erase:
  000b5	33 c0		 xor	 eax, eax
  000b7	75 8b		 jne	 SHORT $LN4@erase

; 1367 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1368 : 
; 1369 : 		const_iterator _Successor = _Where;

  000b9	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  000bc	50		 push	 eax
  000bd	8d 4d e0	 lea	 ecx, DWORD PTR __Successor$[ebp]
  000c0	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  000c5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1370 : 		++_Successor;	// save successor iterator for return

  000c9	8d 4d e0	 lea	 ecx, DWORD PTR __Successor$[ebp]
  000cc	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++

; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

  000d1	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000d4	8b cc		 mov	 ecx, esp
  000d6	89 65 94	 mov	 DWORD PTR $T3[ebp], esp
  000d9	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  000e2	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000e5	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Extract
  000ea	89 45 8c	 mov	 DWORD PTR tv192[ebp], eax
  000ed	8b 4d 8c	 mov	 ecx, DWORD PTR tv192[ebp]
  000f0	89 4d dc	 mov	 DWORD PTR __Erasednode$[ebp], ecx

; 1372 : 
; 1373 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1374 : 		_Orphan_ptr(_Erasednode);

  000f3	8b 45 dc	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	e8 00 00 00 00	 call	 ?_Orphan_ptr@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_ptr

; 1375 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1376 : 
; 1377 : 		_Alnode& _Al = this->_Getal();

  000ff	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00107	89 45 d8	 mov	 DWORD PTR __Al$[ebp], eax

; 1378 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Erasednode->_Myval));	// delete erased node

  0010a	8b 45 dc	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0010d	83 c0 10	 add	 eax, 16			; 00000010H
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ??$addressof@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@YAPAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00116	83 c4 04	 add	 esp, 4
  00119	50		 push	 eax
  0011a	8b 4d d8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::destroy<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >
  00123	83 c4 08	 add	 esp, 8

; 1379 : 		_Node::_Freenode0(_Al, _Erasednode);

  00126	8b 45 dc	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d d8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >
  00133	83 c4 08	 add	 esp, 8

; 1380 : 
; 1381 : 		return (iterator(_Successor._Ptr, _STD addressof(_My_data)));	// return successor iterator

  00136	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0013f	83 c4 04	 add	 esp, 4
  00142	50		 push	 eax
  00143	8b 4d e8	 mov	 ecx, DWORD PTR __Successor$[ebp+8]
  00146	51		 push	 ecx
  00147	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0014a	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0014f	8b 55 90	 mov	 edx, DWORD PTR $T2[ebp]
  00152	83 ca 01	 or	 edx, 1
  00155	89 55 90	 mov	 DWORD PTR $T2[ebp], edx
  00158	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0015c	8d 4d e0	 lea	 ecx, DWORD PTR __Successor$[ebp]
  0015f	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00164	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016b	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0016e	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  00173	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1382 : 		}

  00176	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00179	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00180	59		 pop	 ecx
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx
  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Successor$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::erase
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::max_size, COMDAT
; _this$ = ecx

; 1274 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1275 : 		return (_Alnode_traits::max_size(this->_Getal()));

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::max_size
  0001a	83 c4 04	 add	 esp, 4

; 1276 : 		}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::size, COMDAT
; _this$ = ecx

; 1269 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1270 : 		return (this->_Get_data()._Mysize);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1271 : 		}

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end, COMDAT
; _this$ = ecx

; 1197 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1198 : 		auto& _My_data = this->_Get_data();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00033	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1199 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));

  00036	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	52		 push	 edx
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  00052	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1200 : 		}

  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::end
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin, COMDAT
; _this$ = ecx

; 1185 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1186 : 		auto& _My_data = this->_Get_data();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00033	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1187 : 		return (iterator(_My_data._Lmost(), _STD addressof(_My_data)));

  00036	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	51		 push	 ecx
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00051	e8 00 00 00 00	 call	 ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  00056	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1188 : 		}

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::begin
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >, COMDAT
; _this$ = ecx

; 1167 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1168 : 		_Tidy();

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tidy

; 1169 : 		}

  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00045	59		 pop	 ecx
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >, COMDAT
; _this$ = ecx

; 1085 : 		{	// construct empty tree from comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1084 : 		: _Mybase(_Parg)

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >

; 1086 : 		}

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0?$_Tree@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 308  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 303  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 298  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@K@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@K@2@XZ PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@K@2@XZ ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 308  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 303  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 298  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  : 		}

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv190 = -104						; size = 4
tv179 = -104						; size = 4
$T2 = -100						; size = 4
__Pnode$ = -32						; size = 4
__Fixnodeparent$ = -28					; size = 4
__Fixnode$ = -24					; size = 4
__Erasednode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Where$ = 8						; size = 12
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Extract, COMDAT
; _this$ = ecx

; 562  : 		{	// extract node at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@Extract:

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this

  00032	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003a	3b 45 f0	 cmp	 eax, DWORD PTR _this$[ebp]
  0003d	75 0d		 jne	 SHORT $LN7@Extract
  0003f	8b 45 10	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00042	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00046	85 c9		 test	 ecx, ecx
  00048	75 02		 jne	 SHORT $LN7@Extract
  0004a	eb 4a		 jmp	 SHORT $LN2@Extract
$LN7@Extract:
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JILFNJOL@map?1set?5erase?5iterator?5outside?5@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00056	6a 00		 push	 0
  00058	68 35 02 00 00	 push	 565			; 00000235H
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@NEGGIBJL@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00062	6a 02		 push	 2
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 01		 jne	 SHORT $LN50@Extract
  00072	cc		 int	 3
$LN50@Extract:
  00073	6a 00		 push	 0
  00075	68 35 02 00 00	 push	 565			; 00000235H
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@GNDNJPBP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_1BHI@FOOCHJIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAv?$AAa?$AAl?$AA?$DM@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@CEDAEPC@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008f	83 c4 14	 add	 esp, 20			; 00000014H

; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");

  00092	33 c0		 xor	 eax, eax
  00094	75 b6		 jne	 SHORT $LN7@Extract
$LN2@Extract:
  00096	33 c0		 xor	 eax, eax
  00098	75 98		 jne	 SHORT $LN4@Extract

; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

  0009a	8b 45 10	 mov	 eax, DWORD PTR __Where$[ebp+8]
  0009d	89 45 ec	 mov	 DWORD PTR __Erasednode$[ebp], eax

; 569  : 		++_Where;	// save successor iterator for return

  000a0	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  000a3	e8 00 00 00 00	 call	 ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >::operator++

; 570  : 
; 571  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 572  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 573  : 		_Nodeptr _Pnode = _Erasednode;

  000a8	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  000ab	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 574  : 
; 575  : 		if (_Pnode->_Left->_Isnil)

  000ae	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b3	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  000b7	85 d2		 test	 edx, edx
  000b9	74 0b		 je	 SHORT $LN13@Extract

; 576  : 			{
; 577  : 			_Fixnode = _Pnode->_Right;	// stitch up right subtree

  000bb	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000be	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c1	89 4d e8	 mov	 DWORD PTR __Fixnode$[ebp], ecx
  000c4	eb 27		 jmp	 SHORT $LN14@Extract
$LN13@Extract:

; 578  : 			}
; 579  : 		else if (_Pnode->_Right->_Isnil)

  000c6	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000cc	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  000d0	85 d2		 test	 edx, edx
  000d2	74 0a		 je	 SHORT $LN15@Extract

; 580  : 			{
; 581  : 			_Fixnode = _Pnode->_Left;	// stitch up left subtree

  000d4	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d9	89 4d e8	 mov	 DWORD PTR __Fixnode$[ebp], ecx

; 582  : 			}
; 583  : 		else

  000dc	eb 0f		 jmp	 SHORT $LN14@Extract
$LN15@Extract:

; 584  : 			{	// two subtrees, must lift successor node to replace erased
; 585  : 			_Pnode = _Where._Ptr;	// _Pnode is successor node

  000de	8b 45 10	 mov	 eax, DWORD PTR __Where$[ebp+8]
  000e1	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 586  : 			_Fixnode = _Pnode->_Right;	// _Fixnode is only subtree

  000e4	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000e7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ea	89 4d e8	 mov	 DWORD PTR __Fixnode$[ebp], ecx
$LN14@Extract:

; 587  : 			}
; 588  : 
; 589  : 		if (_Pnode == _Erasednode)

  000ed	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000f0	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  000f3	0f 85 d9 00 00
	00		 jne	 $LN17@Extract

; 590  : 			{	// at most one subtree, relink it
; 591  : 			_Fixnodeparent = _Erasednode->_Parent;

  000f9	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  000fc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ff	89 4d e4	 mov	 DWORD PTR __Fixnodeparent$[ebp], ecx

; 592  : 			if (!_Fixnode->_Isnil)

  00102	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00105	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00109	85 c9		 test	 ecx, ecx
  0010b	75 09		 jne	 SHORT $LN19@Extract

; 593  : 				_Fixnode->_Parent = _Fixnodeparent;	// link up

  0010d	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00110	8b 4d e4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00113	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 594  : 
; 595  : 			if (_Root() == _Erasednode)

  00116	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  0011e	8b 00		 mov	 eax, DWORD PTR [eax]
  00120	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00123	75 0f		 jne	 SHORT $LN20@Extract

; 596  : 				{
; 597  : 				_Root() = _Fixnode;	// link down from root

  00125	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  0012d	8b 4d e8	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  00130	89 08		 mov	 DWORD PTR [eax], ecx
  00132	eb 1d		 jmp	 SHORT $LN21@Extract
$LN20@Extract:

; 598  : 				}
; 599  : 			else if (_Fixnodeparent->_Left == _Erasednode)

  00134	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00137	8b 08		 mov	 ecx, DWORD PTR [eax]
  00139	3b 4d ec	 cmp	 ecx, DWORD PTR __Erasednode$[ebp]
  0013c	75 0a		 jne	 SHORT $LN22@Extract

; 600  : 				{
; 601  : 				_Fixnodeparent->_Left = _Fixnode;	// link down to left

  0013e	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00141	8b 4d e8	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  00144	89 08		 mov	 DWORD PTR [eax], ecx

; 602  : 				}
; 603  : 			else

  00146	eb 09		 jmp	 SHORT $LN21@Extract
$LN22@Extract:

; 604  : 				{
; 605  : 				_Fixnodeparent->_Right = _Fixnode;	// link down to right

  00148	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0014b	8b 4d e8	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0014e	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN21@Extract:

; 606  : 				}
; 607  : 
; 608  : 			if (_Lmost() == _Erasednode)

  00151	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00154	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
  00159	8b 00		 mov	 eax, DWORD PTR [eax]
  0015b	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  0015e	75 2f		 jne	 SHORT $LN24@Extract

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  00160	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00163	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00167	85 c9		 test	 ecx, ecx
  00169	74 08		 je	 SHORT $LN51@Extract
  0016b	8b 55 e4	 mov	 edx, DWORD PTR __Fixnodeparent$[ebp]
  0016e	89 55 98	 mov	 DWORD PTR tv179[ebp], edx
  00171	eb 0f		 jmp	 SHORT $LN52@Extract
$LN51@Extract:
  00173	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Min
  0017c	83 c4 04	 add	 esp, 4
  0017f	89 45 98	 mov	 DWORD PTR tv179[ebp], eax
$LN52@Extract:
  00182	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	e8 00 00 00 00	 call	 ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
  0018a	8b 4d 98	 mov	 ecx, DWORD PTR tv179[ebp]
  0018d	89 08		 mov	 DWORD PTR [eax], ecx
$LN24@Extract:

; 611  : 					? _Fixnodeparent	// smallest is parent of erased node
; 612  : 					: _Min(_Fixnode);	// smallest in relinked subtree
; 613  : 				}
; 614  : 
; 615  : 			if (_Rmost() == _Erasednode)

  0018f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  00197	8b 00		 mov	 eax, DWORD PTR [eax]
  00199	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  0019c	75 2f		 jne	 SHORT $LN25@Extract

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  0019e	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  001a1	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  001a5	85 c9		 test	 ecx, ecx
  001a7	74 08		 je	 SHORT $LN53@Extract
  001a9	8b 55 e4	 mov	 edx, DWORD PTR __Fixnodeparent$[ebp]
  001ac	89 55 98	 mov	 DWORD PTR tv190[ebp], edx
  001af	eb 0f		 jmp	 SHORT $LN54@Extract
$LN53@Extract:
  001b1	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Max
  001ba	83 c4 04	 add	 esp, 4
  001bd	89 45 98	 mov	 DWORD PTR tv190[ebp], eax
$LN54@Extract:
  001c0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	e8 00 00 00 00	 call	 ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
  001c8	8b 4d 98	 mov	 ecx, DWORD PTR tv190[ebp]
  001cb	89 08		 mov	 DWORD PTR [eax], ecx
$LN25@Extract:

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

  001cd	e9 cb 00 00 00	 jmp	 $LN18@Extract
$LN17@Extract:

; 623  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 624  : 			_Erasednode->_Left->_Parent = _Pnode;	// link left up

  001d2	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d7	8b 55 e0	 mov	 edx, DWORD PTR __Pnode$[ebp]
  001da	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 625  : 			_Pnode->_Left = _Erasednode->_Left;	// link successor down

  001dd	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001e0	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  001e3	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e5	89 10		 mov	 DWORD PTR [eax], edx

; 626  : 
; 627  : 			if (_Pnode == _Erasednode->_Right)

  001e7	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001ea	8b 4d e0	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  001ed	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  001f0	75 08		 jne	 SHORT $LN26@Extract

; 628  : 				{
; 629  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  001f2	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001f5	89 45 e4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 630  : 				}
; 631  : 			else

  001f8	eb 3d		 jmp	 SHORT $LN27@Extract
$LN26@Extract:

; 632  : 				{	// successor further down, link in place of erased
; 633  : 				_Fixnodeparent = _Pnode->_Parent;	// parent is successor's

  001fa	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001fd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00200	89 4d e4	 mov	 DWORD PTR __Fixnodeparent$[ebp], ecx

; 634  : 				if (!_Fixnode->_Isnil)

  00203	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00206	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  0020a	85 c9		 test	 ecx, ecx
  0020c	75 09		 jne	 SHORT $LN28@Extract

; 635  : 					{
; 636  : 					_Fixnode->_Parent = _Fixnodeparent;	// link fix up

  0020e	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00211	8b 4d e4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00214	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN28@Extract:

; 637  : 					}
; 638  : 
; 639  : 				_Fixnodeparent->_Left = _Fixnode;	// link fix down

  00217	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0021a	8b 4d e8	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0021d	89 08		 mov	 DWORD PTR [eax], ecx

; 640  : 				_Pnode->_Right = _Erasednode->_Right;	// link next down

  0021f	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00222	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00225	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00228	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 641  : 				_Erasednode->_Right->_Parent = _Pnode;	// right up

  0022b	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0022e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00231	8b 55 e0	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00234	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Extract:

; 642  : 				}
; 643  : 
; 644  : 			if (_Root() == _Erasednode)

  00237	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0023a	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  0023f	8b 00		 mov	 eax, DWORD PTR [eax]
  00241	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00244	75 0f		 jne	 SHORT $LN29@Extract

; 645  : 				{
; 646  : 				_Root() = _Pnode;	// link down from root

  00246	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  0024e	8b 4d e0	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00251	89 08		 mov	 DWORD PTR [eax], ecx
  00253	eb 26		 jmp	 SHORT $LN30@Extract
$LN29@Extract:

; 647  : 				}
; 648  : 			else if (_Erasednode->_Parent->_Left == _Erasednode)

  00255	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00258	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0025b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025d	3b 55 ec	 cmp	 edx, DWORD PTR __Erasednode$[ebp]
  00260	75 0d		 jne	 SHORT $LN31@Extract

; 649  : 				{
; 650  : 				_Erasednode->_Parent->_Left = _Pnode;	// link down to left

  00262	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00265	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00268	8b 55 e0	 mov	 edx, DWORD PTR __Pnode$[ebp]
  0026b	89 11		 mov	 DWORD PTR [ecx], edx

; 651  : 				}
; 652  : 			else

  0026d	eb 0c		 jmp	 SHORT $LN30@Extract
$LN31@Extract:

; 653  : 				{
; 654  : 				_Erasednode->_Parent->_Right = _Pnode;	// link down to right

  0026f	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00272	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00275	8b 55 e0	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00278	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN30@Extract:

; 655  : 				}
; 656  : 
; 657  : 			_Pnode->_Parent = _Erasednode->_Parent;	// link successor up

  0027b	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0027e	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00281	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00284	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 658  : 			_STD swap(_Pnode->_Color, _Erasednode->_Color);	// recolor it

  00287	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0028a	83 c0 0c	 add	 eax, 12			; 0000000cH
  0028d	50		 push	 eax
  0028e	8b 4d e0	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00291	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 ??$swap@DX@std@@YAXAAD0@Z ; std::swap<char,void>
  0029a	83 c4 08	 add	 esp, 8
$LN18@Extract:

; 659  : 			}
; 660  : 
; 661  : 		if (_Erasednode->_Color == this->_Black)

  0029d	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  002a0	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  002a4	83 f9 01	 cmp	 ecx, 1
  002a7	0f 85 fc 01 00
	00		 jne	 $LN33@Extract

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()

  002ad	eb 09		 jmp	 SHORT $LN10@Extract
$LN8@Extract:

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

  002af	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  002b2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002b5	89 4d e4	 mov	 DWORD PTR __Fixnodeparent$[ebp], ecx
$LN10@Extract:

; 664  : 				&& _Fixnode->_Color == this->_Black;

  002b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002bb	e8 00 00 00 00	 call	 ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
  002c0	8b 4d e8	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  002c3	3b 08		 cmp	 ecx, DWORD PTR [eax]
  002c5	0f 84 d7 01 00
	00		 je	 $LN9@Extract
  002cb	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  002ce	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  002d2	83 f9 01	 cmp	 ecx, 1
  002d5	0f 85 c7 01 00
	00		 jne	 $LN9@Extract

; 666  : 				if (_Fixnode == _Fixnodeparent->_Left)

  002db	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002de	8b 4d e8	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  002e1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  002e3	0f 85 e0 00 00
	00		 jne	 $LN34@Extract

; 667  : 					{	// fixup left subtree
; 668  : 					_Pnode = _Fixnodeparent->_Right;

  002e9	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002ec	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002ef	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 669  : 					if (_Pnode->_Color == this->_Red)

  002f2	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002f5	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  002f9	85 c9		 test	 ecx, ecx
  002fb	75 23		 jne	 SHORT $LN36@Extract

; 670  : 						{	// rotate red up from right subtree
; 671  : 						_Pnode->_Color = this->_Black;

  002fd	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00300	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 672  : 						_Fixnodeparent->_Color = this->_Red;

  00304	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00307	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 673  : 						_Lrotate(_Fixnodeparent);

  0030b	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0030e	50		 push	 eax
  0030f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00312	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate

; 674  : 						_Pnode = _Fixnodeparent->_Right;

  00317	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0031a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0031d	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN36@Extract:

; 675  : 						}
; 676  : 
; 677  : 					if (_Pnode->_Isnil)

  00320	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00323	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00327	85 c9		 test	 ecx, ecx
  00329	74 0b		 je	 SHORT $LN37@Extract

; 678  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

  0032b	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0032e	89 45 e8	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 679  : 					else if (_Pnode->_Left->_Color == this->_Black

  00331	e9 8e 00 00 00	 jmp	 $LN38@Extract
$LN37@Extract:

; 680  : 						&& _Pnode->_Right->_Color == this->_Black)

  00336	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00339	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033b	0f be 51 0c	 movsx	 edx, BYTE PTR [ecx+12]
  0033f	83 fa 01	 cmp	 edx, 1
  00342	75 1e		 jne	 SHORT $LN39@Extract
  00344	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00347	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0034a	0f be 51 0c	 movsx	 edx, BYTE PTR [ecx+12]
  0034e	83 fa 01	 cmp	 edx, 1
  00351	75 0f		 jne	 SHORT $LN39@Extract

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;

  00353	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00356	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 683  : 						_Fixnode = _Fixnodeparent;

  0035a	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0035d	89 45 e8	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 684  : 						}
; 685  : 					else

  00360	eb 62		 jmp	 SHORT $LN38@Extract
$LN39@Extract:

; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

  00362	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00365	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00368	0f be 51 0c	 movsx	 edx, BYTE PTR [ecx+12]
  0036c	83 fa 01	 cmp	 edx, 1
  0036f	75 25		 jne	 SHORT $LN41@Extract

; 688  : 							{	// rotate red up from left sub-subtree
; 689  : 							_Pnode->_Left->_Color = this->_Black;

  00371	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00374	8b 08		 mov	 ecx, DWORD PTR [eax]
  00376	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 690  : 							_Pnode->_Color = this->_Red;

  0037a	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0037d	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 691  : 							_Rrotate(_Pnode);

  00381	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00384	50		 push	 eax
  00385	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00388	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate

; 692  : 							_Pnode = _Fixnodeparent->_Right;

  0038d	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00390	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00393	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN41@Extract:

; 693  : 							}
; 694  : 
; 695  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  00396	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00399	8b 4d e4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  0039c	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  0039f	88 50 0c	 mov	 BYTE PTR [eax+12], dl

; 696  : 						_Fixnodeparent->_Color = this->_Black;

  003a2	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003a5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 697  : 						_Pnode->_Right->_Color = this->_Black;

  003a9	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003ac	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003af	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 698  : 						_Lrotate(_Fixnodeparent);

  003b3	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003b6	50		 push	 eax
  003b7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003ba	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate

; 699  : 						break;	// tree now recolored/rebalanced

  003bf	e9 de 00 00 00	 jmp	 $LN9@Extract
$LN38@Extract:

; 700  : 						}
; 701  : 					}
; 702  : 				else

  003c4	e9 d4 00 00 00	 jmp	 $LN35@Extract
$LN34@Extract:

; 703  : 					{	// fixup right subtree
; 704  : 					_Pnode = _Fixnodeparent->_Left;

  003c9	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ce	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 705  : 					if (_Pnode->_Color == this->_Red)

  003d1	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003d4	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  003d8	85 c9		 test	 ecx, ecx
  003da	75 22		 jne	 SHORT $LN42@Extract

; 706  : 						{	// rotate red up from left subtree
; 707  : 						_Pnode->_Color = this->_Black;

  003dc	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003df	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 708  : 						_Fixnodeparent->_Color = this->_Red;

  003e3	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003e6	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 709  : 						_Rrotate(_Fixnodeparent);

  003ea	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003ed	50		 push	 eax
  003ee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003f1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate

; 710  : 						_Pnode = _Fixnodeparent->_Left;

  003f6	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003fb	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN42@Extract:

; 711  : 						}
; 712  : 
; 713  : 					if (_Pnode->_Isnil)

  003fe	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00401	0f be 48 0d	 movsx	 ecx, BYTE PTR [eax+13]
  00405	85 c9		 test	 ecx, ecx
  00407	74 0b		 je	 SHORT $LN43@Extract

; 714  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

  00409	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0040c	89 45 e8	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 715  : 					else if (_Pnode->_Right->_Color == this->_Black

  0040f	e9 89 00 00 00	 jmp	 $LN35@Extract
$LN43@Extract:

; 716  : 						&& _Pnode->_Left->_Color == this->_Black)

  00414	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00417	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0041a	0f be 51 0c	 movsx	 edx, BYTE PTR [ecx+12]
  0041e	83 fa 01	 cmp	 edx, 1
  00421	75 1d		 jne	 SHORT $LN45@Extract
  00423	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00426	8b 08		 mov	 ecx, DWORD PTR [eax]
  00428	0f be 51 0c	 movsx	 edx, BYTE PTR [ecx+12]
  0042c	83 fa 01	 cmp	 edx, 1
  0042f	75 0f		 jne	 SHORT $LN45@Extract

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;

  00431	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00434	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 719  : 						_Fixnode = _Fixnodeparent;

  00438	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0043b	89 45 e8	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 720  : 						}
; 721  : 					else

  0043e	eb 5d		 jmp	 SHORT $LN35@Extract
$LN45@Extract:

; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

  00440	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00443	8b 08		 mov	 ecx, DWORD PTR [eax]
  00445	0f be 51 0c	 movsx	 edx, BYTE PTR [ecx+12]
  00449	83 fa 01	 cmp	 edx, 1
  0044c	75 25		 jne	 SHORT $LN47@Extract

; 724  : 							{	// rotate red up from right sub-subtree
; 725  : 							_Pnode->_Right->_Color = this->_Black;

  0044e	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00451	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00454	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 726  : 							_Pnode->_Color = this->_Red;

  00458	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0045b	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 727  : 							_Lrotate(_Pnode);

  0045f	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00462	50		 push	 eax
  00463	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00466	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate

; 728  : 							_Pnode = _Fixnodeparent->_Left;

  0046b	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0046e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00470	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN47@Extract:

; 729  : 							}
; 730  : 
; 731  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  00473	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00476	8b 4d e4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00479	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  0047c	88 50 0c	 mov	 BYTE PTR [eax+12], dl

; 732  : 						_Fixnodeparent->_Color = this->_Black;

  0047f	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00482	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 733  : 						_Pnode->_Left->_Color = this->_Black;

  00486	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00489	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048b	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 734  : 						_Rrotate(_Fixnodeparent);

  0048f	8b 45 e4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00492	50		 push	 eax
  00493	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00496	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate

; 735  : 						break;	// tree now recolored/rebalanced

  0049b	eb 05		 jmp	 SHORT $LN9@Extract
$LN35@Extract:

; 736  : 						}
; 737  : 					}

  0049d	e9 0d fe ff ff	 jmp	 $LN8@Extract
$LN9@Extract:

; 738  : 
; 739  : 			_Fixnode->_Color = this->_Black;	// stopping node is black

  004a2	8b 45 e8	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  004a5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
$LN33@Extract:

; 740  : 			}
; 741  : 
; 742  : 		if (0 < _Mysize)

  004a9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004ac	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  004b0	76 0f		 jbe	 SHORT $LN48@Extract

; 743  : 			--_Mysize;

  004b2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  004b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004b8	83 e9 01	 sub	 ecx, 1
  004bb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004be	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN48@Extract:

; 744  : 
; 745  : 		return (_Erasednode);

  004c1	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  004c4	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  004c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004ce	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  004d1	e8 00 00 00 00	 call	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  004d6	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]

; 746  : 		}

  004d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004e3	59		 pop	 ecx
  004e4	5f		 pop	 edi
  004e5	5e		 pop	 esi
  004e6	5b		 pop	 ebx
  004e7	8b e5		 mov	 esp, ebp
  004e9	5d		 pop	 ebp
  004ea	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Extract
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate, COMDAT
; _this$ = ecx

; 536  : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	89 4d f8	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00014	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00017	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0001a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  0001f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00022	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00025	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00029	85 d2		 test	 edx, edx
  0002b	75 0c		 jne	 SHORT $LN2@Rrotate

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00030	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00033	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00036	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN2@Rrotate:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  00039	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0003f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00042	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  0004e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00051	75 0e		 jne	 SHORT $LN3@Rrotate

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  0005c	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0005f	eb 27		 jmp	 SHORT $LN4@Rrotate
$LN3@Rrotate:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00061	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00064	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00067	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  0006a	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0006d	75 0e		 jne	 SHORT $LN5@Rrotate

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0006f	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00072	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00075	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00078	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 551  : 			}
; 552  : 		else

  0007b	eb 0b		 jmp	 SHORT $LN4@Rrotate
$LN5@Rrotate:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00080	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00083	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00086	89 11		 mov	 DWORD PTR [ecx], edx
$LN4@Rrotate:

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00088	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0008e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00091	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00094	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00097	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 559  : 		}

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate, COMDAT
; _this$ = ecx

; 507  : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00012	89 4d f8	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  00015	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00018	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00029	85 d2		 test	 edx, edx
  0002b	75 0b		 jne	 SHORT $LN2@Lrotate

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00035	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN2@Lrotate:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004a	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  0004d	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00050	75 0e		 jne	 SHORT $LN3@Lrotate

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00058	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  0005b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0005e	eb 26		 jmp	 SHORT $LN4@Lrotate
$LN3@Lrotate:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  00060	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00069	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006b	75 0d		 jne	 SHORT $LN5@Lrotate

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00070	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00073	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00076	89 11		 mov	 DWORD PTR [ecx], edx

; 525  : 			}
; 526  : 		else

  00078	eb 0c		 jmp	 SHORT $LN4@Lrotate
$LN5@Lrotate:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  0007a	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0007d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00080	8b 55 f8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00083	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN4@Lrotate:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  00086	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0008c	89 08		 mov	 DWORD PTR [eax], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  0008e	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00091	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00094	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 533  : 		}

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost, COMDAT
; _this$ = ecx

; 502  : 		{	// return rightmost node in nonmutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 503  : 		return (_Myhead->_Right);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	83 c0 08	 add	 eax, 8

; 504  : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Rmost
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost, COMDAT
; _this$ = ecx

; 497  : 		{	// return leftmost node in nonmutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 498  : 		return (_Myhead->_Left);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 499  : 		}

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Lmost
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root, COMDAT
; _this$ = ecx

; 492  : 		{	// return root of nonmutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 493  : 		return (_Myhead->_Parent);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	83 c0 04	 add	 eax, 4

; 494  : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Root
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Min, COMDAT

; 485  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@Min:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00012	85 d2		 test	 edx, edx
  00014	75 0a		 jne	 SHORT $LN3@Min

; 487  : 			_Pnode = _Pnode->_Left;

  00016	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 4d 08	 mov	 DWORD PTR __Pnode$[ebp], ecx
  0001e	eb e9		 jmp	 SHORT $LN2@Min
$LN3@Min:

; 488  : 		return (_Pnode);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 489  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Max, COMDAT

; 478  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@Max:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	0f be 51 0d	 movsx	 edx, BYTE PTR [ecx+13]
  00013	85 d2		 test	 edx, edx
  00015	75 0b		 jne	 SHORT $LN3@Max

; 480  : 			_Pnode = _Pnode->_Right;

  00017	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	89 4d 08	 mov	 DWORD PTR __Pnode$[ebp], ecx
  00020	eb e7		 jmp	 SHORT $LN2@Max
$LN3@Max:

; 481  : 		return (_Pnode);

  00022	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 482  : 		}

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >, COMDAT
; _this$ = ecx

; 470  : 		{	// initialize data

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12

; 468  : 		: _Myhead(),

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 469  : 		_Mysize(0)

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 471  : 		}

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??R?$less@K@std@@QBE_NABK0@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@K@std@@QBE_NABK0@Z PROC			; std::less<unsigned long>::operator(), COMDAT
; _this$ = ecx

; 140  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 		return (_Left < _Right);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00016	73 09		 jae	 SHORT $LN3@operator
  00018	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0001f	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00021	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00028	8a 45 b8	 mov	 al, BYTE PTR tv65[ebp]

; 142  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??R?$less@K@std@@QBE_NABK0@Z ENDP			; std::less<unsigned long>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1019 : 		{	// return const reference to _Tree_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1020 : 		return (_Mypair._Get_second()._Get_second());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second

; 1021 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1014 : 		{	// return reference to _Tree_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1015 : 		return (_Mypair._Get_second()._Get_second());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_second

; 1016 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1009 : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1010 : 		return (_Mypair._Get_second()._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first

; 1011 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1004 : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1005 : 		return (_Mypair._Get_second()._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_second
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>::_Get_first

; 1006 : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@K@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@K@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 999  : 		{	// return const reference to ordering predicate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1000 : 		return (_Mypair._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first

; 1001 : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@K@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 994  : 		{	// return reference to ordering predicate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 995  : 		return (_Mypair._Get_first());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@K@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Get_first

; 996  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAU?$less@K@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 970  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 971  : 		_Node::_Freenode0(_Getal(), _Pnode);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >
  0001e	83 c4 08	 add	 esp, 8

; 972  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
__My_data$ = -32					; size = 4
__Pnode$ = -28						; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 951  : 		{	// allocate a non-value node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 50	 sub	 esp, 80			; 00000050H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 952  : 		_Alnode& _Al = _Getal();

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00037	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 953  : 		_Nodeptr _Pnode = _Al.allocate(1);

  0003a	6a 01		 push	 1
  0003c	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0003f	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocate
  00044	89 45 e4	 mov	 DWORD PTR __Pnode$[ebp], eax

; 954  : 
; 955  : 		auto& _My_data = _Get_data();

  00047	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  0004f	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 956  : 
; 957  : 		_TRY_BEGIN

  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 958  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _My_data._Myhead);

  00059	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	83 c0 04	 add	 eax, 4
  0005f	50		 push	 eax
  00060	8b 4d e4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  00069	83 c4 04	 add	 esp, 4
  0006c	50		 push	 eax
  0006d	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 959  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _My_data._Myhead);

  00079	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007c	83 c0 04	 add	 eax, 4
  0007f	50		 push	 eax
  00080	8b 4d e4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00083	83 c1 04	 add	 ecx, 4
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH

; 960  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _My_data._Myhead);

  0009c	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009f	83 c0 04	 add	 eax, 4
  000a2	50		 push	 eax
  000a3	8b 4d e4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000a6	83 c1 08	 add	 ecx, 8
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  000af	83 c4 04	 add	 esp, 4
  000b2	50		 push	 eax
  000b3	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bf	eb 1d		 jmp	 SHORT $LN4@Buynode0
__catch$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$0:

; 961  : 		_CATCH_ALL
; 962  : 		_Al.deallocate(_Pnode, 1);

  000c1	6a 01		 push	 1
  000c3	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000ca	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::deallocate

; 963  : 		_RERAISE;

  000cf	6a 00		 push	 0
  000d1	6a 00		 push	 0
  000d3	e8 00 00 00 00	 call	 __CxxThrowException@8

; 964  : 		_CATCH_END

  000d8	b8 00 00 00 00	 mov	 eax, $LN7@Buynode0
  000dd	c3		 ret	 0
$LN4@Buynode0:
  000de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e5	eb 07		 jmp	 SHORT __tryend$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$1
$LN7@Buynode0:
  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$1:

; 965  : 
; 966  : 		return (_Pnode);

  000ee	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode0:

; 967  : 		}

  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fb	59		 pop	 ecx
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buynode0
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 946  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 947  : 		_Node::_Freenode0(_Getal(), _Pnode);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >
  0001e	83 c4 08	 add	 esp, 8

; 948  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
__Pnode$ = -28						; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx

; 927  : 		{	// get head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 928  : 		_Alnode& _Al = _Getal();

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00037	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 929  : 		_Nodeptr _Pnode = _Al.allocate(1);

  0003a	6a 01		 push	 1
  0003c	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  0003f	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocate
  00044	89 45 e4	 mov	 DWORD PTR __Pnode$[ebp], eax

; 930  : 
; 931  : 		_TRY_BEGIN

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 932  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _Pnode);

  0004e	8d 45 e4	 lea	 eax, DWORD PTR __Pnode$[ebp]
  00051	50		 push	 eax
  00052	8b 4d e4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0005b	83 c4 04	 add	 esp, 4
  0005e	50		 push	 eax
  0005f	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH

; 933  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _Pnode);

  0006b	8d 45 e4	 lea	 eax, DWORD PTR __Pnode$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d e4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00072	83 c1 04	 add	 ecx, 4
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0007b	83 c4 04	 add	 esp, 4
  0007e	50		 push	 eax
  0007f	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 934  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _Pnode);

  0008b	8d 45 e4	 lea	 eax, DWORD PTR __Pnode$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d e4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00092	83 c1 08	 add	 ecx, 8
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *>
  0009b	83 c4 04	 add	 esp, 4
  0009e	50		 push	 eax
  0009f	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  000a2	52		 push	 edx
  000a3	e8 00 00 00 00	 call	 ??$construct@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::construct<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> *,std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> * &>
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ab	eb 1d		 jmp	 SHORT $LN4@Buyheadnod
__catch$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$0:

; 935  : 		_CATCH_ALL
; 936  : 		_Al.deallocate(_Pnode, 1);

  000ad	6a 01		 push	 1
  000af	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::deallocate

; 937  : 		_RERAISE;

  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	e8 00 00 00 00	 call	 __CxxThrowException@8

; 938  : 		_CATCH_END

  000c4	b8 00 00 00 00	 mov	 eax, $LN7@Buyheadnod
  000c9	c3		 ret	 0
$LN4@Buyheadnod:
  000ca	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000d1	eb 07		 jmp	 SHORT __tryend$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$1
$LN7@Buyheadnod:
  000d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ$1:

; 939  : 
; 940  : 		_Pnode->_Color = _Black;

  000da	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000dd	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 941  : 		_Pnode->_Isnil = true;

  000e1	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000e4	c6 40 0d 01	 mov	 BYTE PTR [eax+13], 1

; 942  : 		return (_Pnode);

  000e8	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buyheadnod:

; 943  : 		}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buyheadnode
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Orphan_all@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_all, COMDAT
; _this$ = ecx

; 917  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 918  : 		_Get_data()._Orphan_all();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 919  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Orphan_all@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy, COMDAT
; _this$ = ecx

; 866  : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 867  : 		return (_Get_data()._Myproxy);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data

; 868  : 		}

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getpfirst@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getpfirst, COMDAT
; _this$ = ecx

; 861  : 		{	// get address of iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 862  : 		return (_Get_data()._Getpfirst());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 863  : 		}

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Getpfirst@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Free_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -5					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Free_proxy, COMDAT
; _this$ = ecx

; 852  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 853  : 		_Alproxy _Proxy_allocator(_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00014	50		 push	 eax
  00015	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00018	e8 00 00 00 00	 call	 ??$?0U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >

; 854  : 		_Orphan_all();

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Orphan_all

; 855  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	50		 push	 eax
  00030	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  00039	83 c4 08	 add	 esp, 8

; 856  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	50		 push	 eax
  00047	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00050	83 c4 08	 add	 esp, 8

; 857  : 		_Myproxy() = nullptr;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
  0005b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 858  : 		}

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?_Free_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 8
__Proxy_allocator$ = -5					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 844  : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 845  : 		_Alproxy _Proxy_allocator(_Getal());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Getal
  00014	50		 push	 eax
  00015	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00018	e8 00 00 00 00	 call	 ??$?0U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >

; 846  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0001d	6a 01		 push	 1
  0001f	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00022	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0002d	83 c4 04	 add	 esp, 4
  00030	8b f0		 mov	 esi, eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
  0003a	89 30		 mov	 DWORD PTR [eax], esi

; 847  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0003c	8d 4d b0	 lea	 ecx, DWORD PTR $T1[ebp]
  0003f	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
  0004d	8b 00		 mov	 eax, DWORD PTR [eax]
  0004f	50		 push	 eax
  00050	8d 4d fb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 848  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > > >
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b f0		 mov	 esi, eax
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Myproxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Myproxy
  00077	8b 00		 mov	 eax, DWORD PTR [eax]
  00079	89 30		 mov	 DWORD PTR [eax], esi

; 849  : 		}

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >, COMDAT
; _this$ = ecx

; 838  : 		{	// destroy head node, proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 839  : 		_Freeheadnode(_Get_data()._Myhead);

  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	50		 push	 eax
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freeheadnode

; 840  : 		_Free_proxy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Free_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Free_proxy

; 841  : 		}

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__My_data$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Construct, COMDAT
; _this$ = ecx

; 826  : 		{	// construct head node, proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 48	 sub	 esp, 72			; 00000048H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 827  : 		auto& _My_data = _Get_data();

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Get_data
  00037	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 828  : 		_My_data._Myhead = _Buyheadnode();

  0003a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Buyheadnode
  00042	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 829  : 		_TRY_BEGIN

  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 830  : 		_Alloc_proxy();

  0004f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Alloc_proxy
  00057	eb 1e		 jmp	 SHORT $LN4@Construct
__catch$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ$0:

; 831  : 		_CATCH_ALL
; 832  : 		_Freeheadnode(_My_data._Myhead);

  00059	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Freeheadnode

; 833  : 		_RERAISE;

  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8

; 834  : 		_CATCH_END

  00071	b8 00 00 00 00	 mov	 eax, $LN7@Construct
  00076	c3		 ret	 0
$LN4@Construct:
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0007e	eb 07		 jmp	 SHORT $LN3@Construct
$LN7@Construct:
  00080	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN3@Construct:

; 835  : 		}

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Construct
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z
_TEXT	SEGMENT
$T1 = -70						; size = 1
$T2 = -69						; size = 1
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 789  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,

  0000c	8d 45 bb	 lea	 eax, DWORD PTR $T2[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00013	51		 push	 ecx
  00014	0f b6 55 ba	 movzx	 edx, BYTE PTR $T1[ebp]
  00018	52		 push	 edx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>

; 792  : 		_Construct();

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Construct

; 793  : 		}

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::max_size, COMDAT

; 891  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00009	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 893  : 		}

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00009	6b 45 10 24	 imul	 eax, DWORD PTR __Count$[ebp], 36
  0000d	50		 push	 eax
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00017	83 c4 08	 add	 esp, 8

; 874  : 		}

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	5b		 pop	 ebx
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0CE@@std@@YAII@Z ; std::_Get_size_of_n<36>
  00015	83 c4 04	 add	 esp, 4
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0001e	83 c4 04	 add	 esp, 4

; 998  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000c	6b 45 0c 24	 imul	 eax, DWORD PTR __Count$[ebp], 36
  00010	50		 push	 eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001a	83 c4 08	 add	 esp, 8

; 993  : 		}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > >,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?IsValid@@YA_NUtagPropertyBuff@@@Z
_TEXT	SEGMENT
tv71 = -84						; size = 4
tv88 = -80						; size = 8
tv85 = -72						; size = 8
_PropertyBuff$ = 8					; size = 36
?IsValid@@YA_NUtagPropertyBuff@@@Z PROC			; IsValid, COMDAT

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7    : 	return (PropertyBuff.tUseTime+PropertyBuff.UseResultsValidTime) > (DWORD)time(NULL);

  00009	8b 75 18	 mov	 esi, DWORD PTR _PropertyBuff$[ebp+16]
  0000c	33 ff		 xor	 edi, edi
  0000e	03 75 10	 add	 esi, DWORD PTR _PropertyBuff$[ebp+8]
  00011	13 7d 14	 adc	 edi, DWORD PTR _PropertyBuff$[ebp+12]
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 _time
  0001b	83 c4 04	 add	 esp, 4
  0001e	33 c9		 xor	 ecx, ecx
  00020	89 75 b8	 mov	 DWORD PTR tv85[ebp], esi
  00023	89 7d bc	 mov	 DWORD PTR tv85[ebp+4], edi
  00026	89 45 b0	 mov	 DWORD PTR tv88[ebp], eax
  00029	89 4d b4	 mov	 DWORD PTR tv88[ebp+4], ecx
  0002c	8b 55 bc	 mov	 edx, DWORD PTR tv85[ebp+4]
  0002f	3b 55 b4	 cmp	 edx, DWORD PTR tv88[ebp+4]
  00032	7c 13		 jl	 SHORT $LN3@IsValid
  00034	7f 08		 jg	 SHORT $LN5@IsValid
  00036	8b 45 b8	 mov	 eax, DWORD PTR tv85[ebp]
  00039	3b 45 b0	 cmp	 eax, DWORD PTR tv88[ebp]
  0003c	76 09		 jbe	 SHORT $LN3@IsValid
$LN5@IsValid:
  0003e	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  00045	eb 07		 jmp	 SHORT $LN4@IsValid
$LN3@IsValid:
  00047	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN4@IsValid:
  0004e	8a 45 ac	 mov	 al, BYTE PTR tv71[ebp]

; 8    : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?IsValid@@YA_NUtagPropertyBuff@@@Z ENDP			; IsValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECGamePropertyManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECGamePropertyManager@@UAEPAXI@Z PROC		; CGamePropertyManager::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECGamePropertyManager@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 41		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CGamePropertyManager@@UAE@XZ ; CGamePropertyManager::~CGamePropertyManager
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 18		 push	 24			; 00000018H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1a		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	6b 48 fc 18	 imul	 ecx, DWORD PTR [eax-4], 24
  00059	83 c1 04	 add	 ecx, 4
  0005c	51		 push	 ecx
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 ea 04	 sub	 edx, 4
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00069	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 e8 04	 sub	 eax, 4
  00072	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1CGamePropertyManager@@UAE@XZ ; CGamePropertyManager::~CGamePropertyManager
  0007c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007f	83 e0 01	 and	 eax, 1
  00082	74 0e		 je	 SHORT $LN4@vector
  00084	6a 18		 push	 24			; 00000018H
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
$LN4@vector:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECGamePropertyManager@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECGamePropertyManager@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECGamePropertyManager@@UAEPAXI@Z ENDP		; CGamePropertyManager::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCGamePropertyManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGamePropertyManager@@UAEPAXI@Z PROC		; CGamePropertyManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CGamePropertyManager@@UAE@XZ ; CGamePropertyManager::~CGamePropertyManager
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 18		 push	 24			; 00000018H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCGamePropertyManager@@UAEPAXI@Z ENDP		; CGamePropertyManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4CGamePropertyManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CGamePropertyManager@@QAEAAV0@ABV0@@Z PROC		; CGamePropertyManager::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 04	 add	 ecx, 4
  00019	e8 00 00 00 00	 call	 ??4?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAV0@ABV0@@Z
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??4CGamePropertyManager@@QAEAAV0@ABV0@@Z ENDP		; CGamePropertyManager::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0CGamePropertyManager@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CGamePropertyManager@@QAE@ABV0@@Z PROC		; CGamePropertyManager::CGamePropertyManager, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGamePropertyManager@@6B@
  00015	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 04	 add	 ecx, 4
  00022	e8 00 00 00 00	 call	 ??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@ABV0@@Z
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0CGamePropertyManager@@QAE@ABV0@@Z ENDP		; CGamePropertyManager::CGamePropertyManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z
_TEXT	SEGMENT
$T2 = -120						; size = 4
$T3 = -116						; size = 4
_dwScoreMultiple$4 = -48				; size = 4
_i$5 = -44						; size = 4
_nBuffCount$ = -40					; size = 4
_vecBuff$ = -36						; size = 16
_dwMaxScoreMultiple$ = -20				; size = 4
_index$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwUserID$ = 8						; size = 4
_Kind$ = 12						; size = 4
?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z PROC ; CGamePropertyManager::SearchValidPropertyBuff, COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 73   : 	//同种功能只返回 倍数最佳的道具Buff
; 74   : 	int index = -1;

  00028	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _index$[ebp], -1

; 75   : 	int dwMaxScoreMultiple = 0;	//最高倍数

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwMaxScoreMultiple$[ebp], 0

; 76   : 	std::vector<tagPropertyBuff> vecBuff(CGamePropertyManager::m_PropertyBuffMap[dwUserID]);

  00036	8d 45 08	 lea	 eax, DWORD PTR _dwUserID$[ebp]
  00039	50		 push	 eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
  0003f	e8 00 00 00 00	 call	 ??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[]
  00044	50		 push	 eax
  00045	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  00048	e8 00 00 00 00	 call	 ??0?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@ABV01@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 77   : 	int nBuffCount = (int)vecBuff.size();

  00054	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  00057	e8 00 00 00 00	 call	 ?size@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBEIXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::size
  0005c	89 45 d8	 mov	 DWORD PTR _nBuffCount$[ebp], eax

; 78   : 	for(int i = 0; i < nBuffCount; i++)

  0005f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  00066	eb 09		 jmp	 SHORT $LN4@SearchVali
$LN2@SearchVali:
  00068	8b 45 d4	 mov	 eax, DWORD PTR _i$5[ebp]
  0006b	83 c0 01	 add	 eax, 1
  0006e	89 45 d4	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@SearchVali:
  00071	8b 45 d4	 mov	 eax, DWORD PTR _i$5[ebp]
  00074	3b 45 d8	 cmp	 eax, DWORD PTR _nBuffCount$[ebp]
  00077	7d 64		 jge	 SHORT $LN3@SearchVali

; 79   : 	{
; 80   : 		if( (PROP_KIND)vecBuff[i].dwKind == Kind && IsValid(vecBuff[i]) ) //时间有效判断

  00079	8b 45 d4	 mov	 eax, DWORD PTR _i$5[ebp]
  0007c	50		 push	 eax
  0007d	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  00080	e8 00 00 00 00	 call	 ??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::operator[]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	3b 4d 0c	 cmp	 ecx, DWORD PTR _Kind$[ebp]
  0008a	75 4f		 jne	 SHORT $LN5@SearchVali
  0008c	8b 45 d4	 mov	 eax, DWORD PTR _i$5[ebp]
  0008f	50		 push	 eax
  00090	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  00093	e8 00 00 00 00	 call	 ??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::operator[]
  00098	83 ec 24	 sub	 esp, 36			; 00000024H
  0009b	b9 09 00 00 00	 mov	 ecx, 9
  000a0	8b f0		 mov	 esi, eax
  000a2	8b fc		 mov	 edi, esp
  000a4	f3 a5		 rep movsd
  000a6	e8 00 00 00 00	 call	 ?IsValid@@YA_NUtagPropertyBuff@@@Z ; IsValid
  000ab	83 c4 24	 add	 esp, 36			; 00000024H
  000ae	0f b6 c8	 movzx	 ecx, al
  000b1	85 c9		 test	 ecx, ecx
  000b3	74 26		 je	 SHORT $LN5@SearchVali

; 81   : 		{
; 82   : 			int dwScoreMultiple = vecBuff[i].dwScoreMultiple;

  000b5	8b 45 d4	 mov	 eax, DWORD PTR _i$5[ebp]
  000b8	50		 push	 eax
  000b9	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  000bc	e8 00 00 00 00	 call	 ??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::operator[]
  000c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c4	89 4d d0	 mov	 DWORD PTR _dwScoreMultiple$4[ebp], ecx

; 83   : 			if(dwScoreMultiple >= dwMaxScoreMultiple )

  000c7	8b 45 d0	 mov	 eax, DWORD PTR _dwScoreMultiple$4[ebp]
  000ca	3b 45 ec	 cmp	 eax, DWORD PTR _dwMaxScoreMultiple$[ebp]
  000cd	7c 0c		 jl	 SHORT $LN5@SearchVali

; 84   : 			{
; 85   : 				dwMaxScoreMultiple = dwScoreMultiple;

  000cf	8b 45 d0	 mov	 eax, DWORD PTR _dwScoreMultiple$4[ebp]
  000d2	89 45 ec	 mov	 DWORD PTR _dwMaxScoreMultiple$[ebp], eax

; 86   : 				index = i;

  000d5	8b 45 d4	 mov	 eax, DWORD PTR _i$5[ebp]
  000d8	89 45 f0	 mov	 DWORD PTR _index$[ebp], eax
$LN5@SearchVali:

; 87   : 			}
; 88   : 		}
; 89   : 	}

  000db	eb 8b		 jmp	 SHORT $LN2@SearchVali
$LN3@SearchVali:

; 90   : 	if(index != -1) return &CGamePropertyManager::m_PropertyBuffMap[dwUserID][index];

  000dd	83 7d f0 ff	 cmp	 DWORD PTR _index$[ebp], -1
  000e1	74 30		 je	 SHORT $LN7@SearchVali
  000e3	8b 45 f0	 mov	 eax, DWORD PTR _index$[ebp]
  000e6	50		 push	 eax
  000e7	8d 4d 08	 lea	 ecx, DWORD PTR _dwUserID$[ebp]
  000ea	51		 push	 ecx
  000eb	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
  000f0	e8 00 00 00 00	 call	 ??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[]
  000f5	8b c8		 mov	 ecx, eax
  000f7	e8 00 00 00 00	 call	 ??A?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEAAUtagPropertyBuff@@I@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::operator[]
  000fc	89 45 8c	 mov	 DWORD PTR $T3[ebp], eax
  000ff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00106	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  00109	e8 00 00 00 00	 call	 ??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::~vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
  0010e	8b 45 8c	 mov	 eax, DWORD PTR $T3[ebp]
  00111	eb 19		 jmp	 SHORT $LN1@SearchVali
$LN7@SearchVali:

; 91   : 	return NULL;

  00113	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0011a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00121	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  00124	e8 00 00 00 00	 call	 ??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::~vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
  00129	8b 45 88	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@SearchVali:

; 92   : }

  0012c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00136	59		 pop	 ecx
  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _vecBuff$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAE@XZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::~vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >
__ehhandler$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 84	 mov	 ecx, DWORD PTR [edx-124]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SearchValidPropertyBuff@CGamePropertyManager@@SAPAUtagPropertyBuff@@KW4PROP_KIND@@@Z ENDP ; CGamePropertyManager::SearchValidPropertyBuff
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?SearchPropertyItem@CGamePropertyManager@@QAEPAUtagPropertyInfo@@G@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_wPropertyIndex$ = 8					; size = 2
?SearchPropertyItem@CGamePropertyManager@@QAEPAUtagPropertyInfo@@G@Z PROC ; CGamePropertyManager::SearchPropertyItem, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 	//查找道具
; 60   : 	for (INT_PTR i=0;i<m_PropertyInfoArray.GetCount();i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@SearchProp
$LN2@SearchProp:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@SearchProp:
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 04	 add	 ecx, 4
  00024	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@UtagPropertyInfo@@ABU1@@@QBEHXZ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetCount
  00029	39 45 f8	 cmp	 DWORD PTR _i$1[ebp], eax
  0002c	7d 2d		 jge	 SHORT $LN3@SearchProp

; 61   : 	{
; 62   : 		if (m_PropertyInfoArray[i].wIndex==wPropertyIndex)

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 04	 add	 ecx, 4
  00038	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator[]
  0003d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00040	0f b7 55 08	 movzx	 edx, WORD PTR _wPropertyIndex$[ebp]
  00044	3b ca		 cmp	 ecx, edx
  00046	75 11		 jne	 SHORT $LN5@SearchProp

; 63   : 		{
; 64   : 			return &m_PropertyInfoArray[i];

  00048	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 04	 add	 ecx, 4
  00052	e8 00 00 00 00	 call	 ??A?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator[]
  00057	eb 04		 jmp	 SHORT $LN1@SearchProp
$LN5@SearchProp:

; 65   : 		}
; 66   : 	}

  00059	eb ba		 jmp	 SHORT $LN2@SearchProp
$LN3@SearchProp:

; 67   : 
; 68   : 	return NULL;

  0005b	33 c0		 xor	 eax, eax
$LN1@SearchProp:

; 69   : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?SearchPropertyItem@CGamePropertyManager@@QAEPAUtagPropertyInfo@@G@Z ENDP ; CGamePropertyManager::SearchPropertyItem
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?ClearUserBuff@CGamePropertyManager@@QAE_NK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?ClearUserBuff@CGamePropertyManager@@QAE_NK@Z PROC	; CGamePropertyManager::ClearUserBuff, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   : 	if( CGamePropertyManager::m_PropertyBuffMap[dwUserID].empty() ) return false;

  0000c	8d 45 08	 lea	 eax, DWORD PTR _dwUserID$[ebp]
  0000f	50		 push	 eax
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
  00015	e8 00 00 00 00	 call	 ??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[]
  0001a	8b c8		 mov	 ecx, eax
  0001c	e8 00 00 00 00	 call	 ?empty@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QBE_NXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::empty
  00021	0f b6 c8	 movzx	 ecx, al
  00024	85 c9		 test	 ecx, ecx
  00026	74 04		 je	 SHORT $LN2@ClearUserB
  00028	32 c0		 xor	 al, al
  0002a	eb 17		 jmp	 SHORT $LN1@ClearUserB
$LN2@ClearUserB:

; 51   : 
; 52   : 	CGamePropertyManager::m_PropertyBuffMap[dwUserID].clear();

  0002c	8d 45 08	 lea	 eax, DWORD PTR _dwUserID$[ebp]
  0002f	50		 push	 eax
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
  00035	e8 00 00 00 00	 call	 ??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[]
  0003a	8b c8		 mov	 ecx, eax
  0003c	e8 00 00 00 00	 call	 ?clear@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXXZ ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::clear

; 53   : 	return true;

  00041	b0 01		 mov	 al, 1
$LN1@ClearUserB:

; 54   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?ClearUserBuff@CGamePropertyManager@@QAE_NK@Z ENDP	; CGamePropertyManager::ClearUserBuff
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?SetGamePropertyBuff@CGamePropertyManager@@QAE_NKQBUtagPropertyBuff@@G@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
_PropertyBuff$ = 12					; size = 4
_wBuffCount$ = 16					; size = 2
?SetGamePropertyBuff@CGamePropertyManager@@QAE_NKQBUtagPropertyBuff@@G@Z PROC ; CGamePropertyManager::SetGamePropertyBuff, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	if(dwUserID <= 0) return false;

  0000c	83 7d 08 00	 cmp	 DWORD PTR _dwUserID$[ebp], 0
  00010	77 04		 ja	 SHORT $LN5@SetGamePro
  00012	32 c0		 xor	 al, al
  00014	eb 3c		 jmp	 SHORT $LN1@SetGamePro
$LN5@SetGamePro:

; 39   : 
; 40   : 	//保存玩家Buff
; 41   : 	for(int i = 0; i < wBuffCount; i++)

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@SetGamePro
$LN2@SetGamePro:
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@SetGamePro:
  00028	0f b7 45 10	 movzx	 eax, WORD PTR _wBuffCount$[ebp]
  0002c	39 45 f8	 cmp	 DWORD PTR _i$1[ebp], eax
  0002f	7d 1f		 jge	 SHORT $LN3@SetGamePro

; 42   : 	{
; 43   : 		CGamePropertyManager::m_PropertyBuffMap[dwUserID].push_back( PropertyBuff[i] );

  00031	6b 45 f8 24	 imul	 eax, DWORD PTR _i$1[ebp], 36
  00035	03 45 0c	 add	 eax, DWORD PTR _PropertyBuff$[ebp]
  00038	50		 push	 eax
  00039	8d 4d 08	 lea	 ecx, DWORD PTR _dwUserID$[ebp]
  0003c	51		 push	 ecx
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_PropertyBuffMap@CGamePropertyManager@@1V?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@A ; CGamePropertyManager::m_PropertyBuffMap
  00042	e8 00 00 00 00	 call	 ??A?$map@KV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@1@ABK@Z ; std::map<unsigned long,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> > > > >::operator[]
  00047	8b c8		 mov	 ecx, eax
  00049	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagPropertyBuff@@V?$allocator@UtagPropertyBuff@@@std@@@std@@QAEXABUtagPropertyBuff@@@Z ; std::vector<tagPropertyBuff,std::allocator<tagPropertyBuff> >::push_back

; 44   : 	}

  0004e	eb cf		 jmp	 SHORT $LN2@SetGamePro
$LN3@SetGamePro:

; 45   : 	return true;

  00050	b0 01		 mov	 al, 1
$LN1@SetGamePro:

; 46   : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?SetGamePropertyBuff@CGamePropertyManager@@QAE_NKQBUtagPropertyBuff@@G@Z ENDP ; CGamePropertyManager::SetGamePropertyBuff
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?SetGamePropertyInfo@CGamePropertyManager@@QAE_NQAUtagPropertyInfo@@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_PropertyInfo$ = 8					; size = 4
_wPropertyCount$ = 12					; size = 2
?SetGamePropertyInfo@CGamePropertyManager@@QAE_NQAUtagPropertyInfo@@G@Z PROC ; CGamePropertyManager::SetGamePropertyInfo, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	//设置变量
; 28   : 	m_PropertyInfoArray.SetSize(wPropertyCount);

  0000c	0f b7 45 0c	 movzx	 eax, WORD PTR _wPropertyCount$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 04	 add	 ecx, 4
  00017	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::SetSize

; 29   : 
; 30   : 	//拷贝数组
; 31   : 	CopyMemory(m_PropertyInfoArray.GetData(),PropertyInfo,sizeof(tagPropertyInfo)*wPropertyCount);

  0001c	0f b7 45 0c	 movzx	 eax, WORD PTR _wPropertyCount$[ebp]
  00020	69 c8 e7 00 00
	00		 imul	 ecx, eax, 231
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _PropertyInfo$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 04	 add	 ecx, 4
  00031	e8 00 00 00 00	 call	 ?GetData@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEPAUtagPropertyInfo@@XZ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetData
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memcpy
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : 
; 33   : 	return true;

  0003f	b0 01		 mov	 al, 1

; 34   : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
?SetGamePropertyInfo@CGamePropertyManager@@QAE_NQAUtagPropertyInfo@@G@Z ENDP ; CGamePropertyManager::SetGamePropertyInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ??1CGamePropertyManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CGamePropertyManager@@UAE@XZ PROC			; CGamePropertyManager::~CGamePropertyManager, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGamePropertyManager@@6B@

; 22   : }

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 04	 add	 ecx, 4
  0001b	e8 00 00 00 00	 call	 ??1?$CWHArray@UtagPropertyInfo@@ABU1@@@UAE@XZ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::~CWHArray<tagPropertyInfo,tagPropertyInfo const &>
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??1CGamePropertyManager@@UAE@XZ ENDP			; CGamePropertyManager::~CGamePropertyManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ??0CGamePropertyManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGamePropertyManager@@QAE@XZ PROC			; CGamePropertyManager::CGamePropertyManager, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGamePropertyManager@@6B@
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 04	 add	 ecx, 4
  0001b	e8 00 00 00 00	 call	 ??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@XZ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::CWHArray<tagPropertyInfo,tagPropertyInfo const &>

; 17   : }

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0CGamePropertyManager@@QAE@XZ ENDP			; CGamePropertyManager::CGamePropertyManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@UtagPropertyInfo@@ABU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@UtagPropertyInfo@@ABU1@@@UAEPAXI@Z PROC	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@UtagPropertyInfo@@ABU1@@@UAE@XZ ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::~CWHArray<tagPropertyInfo,tagPropertyInfo const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@UtagPropertyInfo@@ABU1@@@UAEPAXI@Z ENDP	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??4?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAV0@ABV0@@Z PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0002a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002d	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00036	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00039	89 50 10	 mov	 DWORD PTR [eax+16], edx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??4?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAV0@ABV0@@Z ENDP ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@ABV0@@Z PROC	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::CWHArray<tagPropertyInfo,tagPropertyInfo const &>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00027	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002a	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00033	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00036	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0003f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00042	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@ABV0@@Z ENDP	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::CWHArray<tagPropertyInfo,tagPropertyInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e e3 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	69 45 08 e7 00
	00 00		 imul	 eax, DWORD PTR _nNewCount$[ebp], 231
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009f	83 c4 04	 add	 esp, 4
  000a2	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a5	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a8	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	69 48 10 e7 00
	00 00		 imul	 ecx, DWORD PTR [eax+16], 231
  000b5	51		 push	 ecx
  000b6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bc	50		 push	 eax
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _memcpy
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cf	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d2	69 d1 e7 00 00
	00		 imul	 edx, ecx, 231
  000d8	52		 push	 edx
  000d9	6a 00		 push	 0
  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000de	69 48 10 e7 00
	00 00		 imul	 ecx, DWORD PTR [eax+16], 231
  000e5	03 4d f4	 add	 ecx, DWORD PTR _pNewData$3[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _memset
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f7	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000fa	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00103	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00106	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  0010c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  0010f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  00115	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z ENDP ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z ENDP ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3e		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 20		 jge	 SHORT $LN3@SetSize
  00064	69 45 f8 e7 00
	00 00		 imul	 eax, DWORD PTR _i$3[ebp], 231
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00071	50		 push	 eax
  00072	68 e7 00 00 00	 push	 231			; 000000e7H
  00077	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0007c	83 c4 08	 add	 esp, 8
  0007f	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  00082	eb cf		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00084	eb 51		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00086	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  0008c	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008f	7d 46		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00091	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00094	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00097	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00099	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  0009c	83 c0 01	 add	 eax, 1
  0009f	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  000a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a8	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000ab	7d 02		 jge	 SHORT $LN6@SetSize
  000ad	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b5	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b8	69 d1 e7 00 00
	00		 imul	 edx, ecx, 231
  000be	52		 push	 edx
  000bf	6a 00		 push	 0
  000c1	69 45 08 e7 00
	00 00		 imul	 eax, DWORD PTR _nNewSize$[ebp], 231
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memset
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000dd	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
?SetSize@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEXH@Z ENDP ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	69 45 08 e7 00
	00 00		 imul	 eax, DWORD PTR _nIndex$[ebp], 231
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	03 41 04	 add	 eax, DWORD PTR [ecx+4]
$LN3@ElementAt:

; 237  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEAAUtagPropertyInfo@@H@Z ENDP ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetData@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEPAUtagPropertyInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetData@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEPAUtagPropertyInfo@@XZ PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetData, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 	return m_pData;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 159  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetData@?$CWHArray@UtagPropertyInfo@@ABU1@@@QAEPAUtagPropertyInfo@@XZ ENDP ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetData
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@UtagPropertyInfo@@ABU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@UtagPropertyInfo@@ABU1@@@QBEHXZ PROC ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@UtagPropertyInfo@@ABU1@@@QBEHXZ ENDP ; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@UtagPropertyInfo@@ABU1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@UtagPropertyInfo@@ABU1@@@UAE@XZ PROC	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::~CWHArray<tagPropertyInfo,tagPropertyInfo const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@UtagPropertyInfo@@ABU1@@@UAE@XZ ENDP	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::~CWHArray<tagPropertyInfo,tagPropertyInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@XZ PROC	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::CWHArray<tagPropertyInfo,tagPropertyInfo const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@UtagPropertyInfo@@ABU1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@UtagPropertyInfo@@ABU1@@@QAE@XZ ENDP	; CWHArray<tagPropertyInfo,tagPropertyInfo const &>::CWHArray<tagPropertyInfo,tagPropertyInfo const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00013	83 c4 04	 add	 esp, 4
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002a	6a 02		 push	 2
  0002c	6a 02		 push	 2
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  0003e	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00042	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  00044	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 105  : 	_CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _wmemcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	return (_Ptrdest);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
$T1 = -68						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	73 08		 jae	 SHORT $LN3@Min_value
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  0001b	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00020	89 4d b8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  00023	8b 55 b8	 mov	 edx, DWORD PTR tv65[ebp]
  00026	89 55 bc	 mov	 DWORD PTR $T1[ebp], edx
  00029	8b 45 bc	 mov	 eax, DWORD PTR $T1[ebp]

; 25   : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -48						; size = 8
__Ptrnext$ = -40					; size = 4
__Ptrdest$ = -36					; size = 4
__Mbst1$ = -32						; size = 8
__Wc$ = -24						; size = 2
__Bytes$ = -20						; size = 4
__Ptr1$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Count1$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 e0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000e	89 45 e4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00033	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00036	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00044	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00047	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00053	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00057	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00059	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 45 f0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 __Mbrtowc
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  00078	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0007c	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0007e	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  00080	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  00082	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR __Wchars$[ebp], eax

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  0008b	68 ba 02 00 00	 push	 698			; 000002baH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	6a 02		 push	 2
  00099	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000a9	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000ad	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000af	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000b4	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000b7	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 703  : 	mbstate_t _Mbst2 = {};

  000ba	33 c0		 xor	 eax, eax
  000bc	89 45 d0	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000bf	89 45 d4	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000c2	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  000c7	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d0	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000d3	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000d6	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000d9	83 ea 01	 sub	 edx, 1
  000dc	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000df	8b 45 d8	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  000e2	83 c0 02	 add	 eax, 2
  000e5	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e8	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  000ec	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  000ee	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d d0	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __Count1$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 __Mbrtowc
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  0010d	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00111	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00113	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00115	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00117	33 c0		 xor	 eax, eax
  00119	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0011c	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0011f	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 115  : 	_Bytes += _Non_user_size;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	83 c1 27	 add	 ecx, 39			; 00000027H
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);

  00016	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001e	b8 04 00 00 00	 mov	 eax, 4
  00023	6b c8 ff	 imul	 ecx, eax, -1
  00026	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00029	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0002c	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Adjust_man:

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0002f	b8 04 00 00 00	 mov	 eax, 4
  00034	6b c8 fe	 imul	 ecx, eax, -2
  00037	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  0003a	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00041	75 02		 jne	 SHORT $LN7@Adjust_man
  00043	eb 52		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004f	6a 00		 push	 0
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00056	83 c0 08	 add	 eax, 8
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0005f	6a 02		 push	 2
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00067	83 c4 18	 add	 esp, 24			; 00000018H
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 01		 jne	 SHORT $LN19@Adjust_man
  0006f	cc		 int	 3
$LN19@Adjust_man:
  00070	6a 00		 push	 0
  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  00077	83 c0 08	 add	 eax, 8
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00090	83 c4 14	 add	 esp, 20			; 00000014H
  00093	33 c0		 xor	 eax, eax
  00095	75 ae		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00097	33 c0		 xor	 eax, eax
  00099	75 94		 jne	 SHORT $LN4@Adjust_man

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);

  0009b	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000aa	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000b1	72 08		 jb	 SHORT $LN13@Adjust_man
  000b3	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000b7	77 02		 ja	 SHORT $LN13@Adjust_man
  000b9	eb 52		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c5	6a 00		 push	 0
  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  000cc	83 c0 12	 add	 eax, 18			; 00000012H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000d5	6a 02		 push	 2
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000dd	83 c4 18	 add	 esp, 24			; 00000018H
  000e0	83 f8 01	 cmp	 eax, 1
  000e3	75 01		 jne	 SHORT $LN20@Adjust_man
  000e5	cc		 int	 3
$LN20@Adjust_man:
  000e6	6a 00		 push	 0
  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
  000ed	83 c0 12	 add	 eax, 18			; 00000012H
  000f0	50		 push	 eax
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00106	83 c4 14	 add	 esp, 20			; 00000014H
  00109	33 c0		 xor	 eax, eax
  0010b	75 ae		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  0010d	33 c0		 xor	 eax, eax
  0010f	75 9c		 jne	 SHORT $LN10@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00111	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00114	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  00117	89 08		 mov	 DWORD PTR [eax], ecx

; 134  : 	}

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 52   : 		return (::operator new(_Bytes));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	83 c4 04	 add	 esp, 4

; 53   : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 616  : 		{	// return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 617  : 		return (INT_MAX);

  00009	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 618  : 		}

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 301  : 	constexpr tuple(const tuple&) noexcept	// TRANSITION, for binary compatibility

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		{	// copy construct
; 303  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$tuple@$$V@std@@QAE@XZ PROC				; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 297  : 	constexpr tuple() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 298  : 		{	// default construct
; 299  : 		}

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$tuple@$$V@std@@QAE@XZ ENDP				; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 191  : 		{	// cut ties with parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 192  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 193  : 		if (_Myproxy != nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	0f 84 96 00 00
	00		 je	 $LN13@Orphan_me

; 194  : 			{	// adopted, remove self from list
; 195  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 04	 add	 ecx, 4
  00020	89 4d f8	 mov	 DWORD PTR __Pnext$1[ebp], ecx
$LN2@Orphan_me:

; 196  : 			while (*_Pnext != nullptr && *_Pnext != this)

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	74 17		 je	 SHORT $LN6@Orphan_me
  0002b	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	3b 4d fc	 cmp	 ecx, DWORD PTR _this$[ebp]
  00033	74 0d		 je	 SHORT $LN6@Orphan_me

; 197  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	83 c1 04	 add	 ecx, 4
  0003d	89 4d f8	 mov	 DWORD PTR __Pnext$1[ebp], ecx
  00040	eb e1		 jmp	 SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 198  : 
; 199  : 			_STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

  00042	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  00045	83 38 00	 cmp	 DWORD PTR [eax], 0
  00048	74 02		 je	 SHORT $LN9@Orphan_me
  0004a	eb 4a		 jmp	 SHORT $LN4@Orphan_me
$LN9@Orphan_me:
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00056	6a 00		 push	 0
  00058	68 c7 00 00 00	 push	 199			; 000000c7H
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00062	6a 02		 push	 2
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 01		 jne	 SHORT $LN14@Orphan_me
  00072	cc		 int	 3
$LN14@Orphan_me:
  00073	6a 00		 push	 0
  00075	68 c7 00 00 00	 push	 199			; 000000c7H
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	33 c0		 xor	 eax, eax
  00094	75 b6		 jne	 SHORT $LN9@Orphan_me
$LN4@Orphan_me:
  00096	33 c0		 xor	 eax, eax
  00098	75 a8		 jne	 SHORT $LN6@Orphan_me

; 200  : 			*_Pnext = _Mynextiter;

  0009a	8b 45 f8	 mov	 eax, DWORD PTR __Pnext$1[ebp]
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a3	89 10		 mov	 DWORD PTR [eax], edx

; 201  : 			_Myproxy = nullptr;

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN13@Orphan_me:

; 202  : 			}
; 203  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 204  : 		}

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 186  : 		{	// get address of remaining iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 		return (&_Mynextiter);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 04	 add	 eax, 4

; 188  : 		}

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 181  : 		{	// get owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	75 09		 jne	 SHORT $LN3@Getcont
  00014	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  0001b	eb 0a		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	89 45 b8	 mov	 DWORD PTR tv68[ebp], eax
$LN4@Getcont:
  00027	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]

; 183  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 176  : 		{	// disown owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 		_Myproxy = nullptr;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 178  : 		}

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -28						; size = 4
__Parent_proxy$3 = -24					; size = 4
__Lock$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 147  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 148  : 		if (_Parent == nullptr)

  0002b	83 7d 08 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  0002f	75 1e		 jne	 SHORT $LN2@Adopt

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

  00031	6a 03		 push	 3
  00033	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 152  : 			_Orphan_me();

  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

  00044	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ

; 155  : 		else

  0004d	eb 4b		 jmp	 SHORT $LN5@Adopt
$LN2@Adopt:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  0004f	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	89 4d e8	 mov	 DWORD PTR __Parent_proxy$3[ebp], ecx

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	3b 4d e8	 cmp	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0005f	74 39		 je	 SHORT $LN5@Adopt

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

  00061	6a 03		 push	 3
  00063	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 163  : 				_Orphan_me();

  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  00074	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 4d e8	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 165  : 				_Parent_proxy->_Myfirstiter = this;

  00080	8b 45 e8	 mov	 eax, DWORD PTR __Parent_proxy$3[ebp]
  00083	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 166  : 				_Myproxy = _Parent_proxy;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0008f	89 08		 mov	 DWORD PTR [eax], ecx

; 167  : 				}

  00091	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN5@Adopt:

; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;
; 171  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 172  : 			}
; 173  : 		}

  0009a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 139  : 		{	// destroy the iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 140  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

  0002b	6a 03		 push	 3
  0002d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 142  : 		_Orphan_me();

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

  0003e	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 119  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 		if (_Myproxy != _Right._Myproxy)

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00035	74 36		 je	 SHORT $LN2@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)

  00037	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0003a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003d	75 1e		 jne	 SHORT $LN3@operator

; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);

  0003f	6a 03		 push	 3
  00041	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 126  : 				_Orphan_me();

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}

  00052	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ

; 129  : 			else

  0005b	eb 10		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

  0005d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	52		 push	 edx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN2@operator:

; 132  : 				}
; 133  : 			}
; 134  : 
; 135  : 		return (*this);

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]

; 136  : 		}

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 115  : 		*this = _Right;

  0001f	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 116  : 		}

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 109  : 		{	// construct orphaned iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 110  : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -24						; size = 4
__Lock$3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != nullptr)

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00031	74 4f		 je	 SHORT $LN6@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

  00033	6a 03		 push	 3
  00035	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	83 c1 04	 add	 ecx, 4
  00046	89 4d e8	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  00049	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 221  : 			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)

  0004b	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 55 e8	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00053	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00056	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  00058	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0005b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005e	74 0d		 je	 SHORT $LN3@Orphan_all

; 222  : 			(*_Pnext)->_Myproxy = nullptr;

  00060	8b 45 e8	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0006b	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = nullptr;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 224  : 		}

  00079	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
$LN6@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -72						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 95   : 		{	// get address of iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Myproxy == nullptr ? nullptr : &_Myproxy->_Myfirstiter);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	75 09		 jne	 SHORT $LN3@Getpfirst
  00014	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  0001b	eb 0b		 jmp	 SHORT $LN4@Getpfirst
$LN3@Getpfirst:
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	83 c2 04	 add	 edx, 4
  00025	89 55 b8	 mov	 DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
  00028	8b 45 b8	 mov	 eax, DWORD PTR tv68[ebp]

; 97   : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 81   : 		{	// construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 		: _Myproxy(nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 82   : 		}

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 69   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 		: _Mycont(nullptr), _Myfirstiter(nullptr)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 70   : 		}

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00009	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  :             return _time64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00013	83 c4 04	 add	 esp, 4

; 537  :         }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\gamepropertymanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
