; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27032.1 

	TITLE	G:\网狐\HappyGameWH\服务端\系统模块\服务器组件\游戏服务\UserTaskManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?IID_IUnknownEx@@3U_GUID@@B DD 05feec21eH		; IID_IUnknownEx
	DW	0dbf3H
	DW	046f0H
	DB	09fH
	DB	057H
	DB	0d1H
	DB	0cdH
	DB	071H
	DB	01cH
	DB	046H
	DB	0deH
?IID_ITraceServiceManager@@3U_GUID@@B DD 08bfc36dbH	; IID_ITraceServiceManager
	DW	05ba2H
	DW	042baH
	DB	081H
	DB	0b0H
	DB	087H
	DB	0b0H
	DB	01cH
	DB	09eH
	DB	0afH
	DB	0feH
?IID_IAsynchronismEngine@@3U_GUID@@B DD 0c7a13074H	; IID_IAsynchronismEngine
	DW	075c5H
	DW	04b8eH
	DB	0b5H
	DB	04bH
	DB	0eeH
	DB	0eH
	DB	0ecH
	DB	0feH
	DB	0b9H
	DB	0ebH
?IID_IDataBase@@3U_GUID@@B DD 0a2e38a78H		; IID_IDataBase
	DW	01e4fH
	DW	04de4H
	DB	0a5H
	DB	0d1H
	DB	0b9H
	DB	019H
	DB	09bH
	DB	0ceH
	DB	041H
	DB	0aeH
?IID_IDataBaseEngine@@3U_GUID@@B DD 047b5a119H		; IID_IDataBaseEngine
	DW	01676H
	DW	049a3H
	DB	0beH
	DB	0aeH
	DB	0caH
	DB	027H
	DB	0ebH
	DB	059H
	DB	097H
	DB	022H
?IID_IUDPNetworkEngine@@3U_GUID@@B DD 08d138a9bH	; IID_IUDPNetworkEngine
	DW	0a97dH
	DW	04d51H
	DB	09dH
	DB	06cH
	DB	0d8H
	DB	06eH
	DB	0a1H
	DB	084H
	DB	045H
	DB	02eH
?IID_ITCPNetworkEngine@@3U_GUID@@B DD 07747f683H	; IID_ITCPNetworkEngine
	DW	0c0daH
	DW	04588H
	DB	089H
	DB	0ccH
	DB	015H
	DB	093H
	DB	0acH
	DB	0c0H
	DB	044H
	DB	0c8H
?IID_ITCPSocketService@@3U_GUID@@B DD 0709a4449H	; IID_ITCPSocketService
	DW	0ad77H
	DW	04b3dH
	DB	0b4H
	DB	0d6H
	DB	08dH
	DB	0bH
	DB	028H
	DB	065H
	DB	0ecH
	DB	0aeH
?IID_IWEBSocketService@@3U_GUID@@B DD 091052ff2H	; IID_IWEBSocketService
	DW	0eb29H
	DW	040b9H
	DB	0b2H
	DB	0a2H
	DB	08aH
	DB	0a2H
	DB	098H
	DB	036H
	DB	02cH
	DB	084H
?IID_ITimerEngine@@3U_GUID@@B DD 0496401aeH		; IID_ITimerEngine
	DW	06fb0H
	DW	04e9fH
	DB	090H
	DB	098H
	DB	044H
	DB	09dH
	DB	09cH
	DB	0b2H
	DB	0bdH
	DB	097H
?IID_IAttemperEngine@@3U_GUID@@B DD 0b070b2cH		; IID_IAttemperEngine
	DW	09d72H
	DW	042d2H
	DB	0a5H
	DB	070H
	DB	0baH
	DB	02cH
	DB	0bfH
	DB	06fH
	DB	0bbH
	DB	01cH
?IID_IGameServiceManager@@3U_GUID@@B DD 04b2b9d8fH	; IID_IGameServiceManager
	DW	0ce1bH
	DW	044f3H
	DB	0a5H
	DB	022H
	DB	065H
	DB	01aH
	DB	065H
	DB	0c9H
	DB	0aH
	DB	025H
?IID_IAndroidUserItemSink@@3U_GUID@@B DD 01e8a1918H	; IID_IAndroidUserItemSink
	DW	0572bH
	DW	0453bH
	DB	0bcH
	DB	0bH
	DB	06bH
	DB	061H
	DB	070H
	DB	0a3H
	DB	03cH
	DB	0caH
?IID_IUserTaskManagerSink@@3U_GUID@@B DD 01c721508H	; IID_IUserTaskManagerSink
	DW	081f8H
	DW	0403fH
	DB	0b5H
	DB	0c9H
	DB	03eH
	DB	0b3H
	DB	0e3H
	DB	0e5H
	DB	0cdH
	DB	0a9H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	_wmemcpy
PUBLIC	?data@CPlex@@QAEPAXXZ				; CPlex::data
PUBLIC	??$HashKey@K@@YGIK@Z				; HashKey<unsigned long>
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPA_WPB_W@Z			; std::_Maklocwcs
PUBLIC	??0IUnknownEx@@QAE@XZ				; IUnknownEx::IUnknownEx
PUBLIC	?GetProductVer@@YAEK@Z				; GetProductVer
PUBLIC	?GetMainVer@@YAEK@Z				; GetMainVer
PUBLIC	?GetSubVer@@YAEK@Z				; GetSubVer
PUBLIC	?GetBuildVer@@YAEK@Z				; GetBuildVer
PUBLIC	?InterfaceVersionCompare@@YA_NKK@Z		; InterfaceVersionCompare
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	??0IUserTaskManagerSink@@QAE@XZ			; IUserTaskManagerSink::IUserTaskManagerSink
PUBLIC	??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
PUBLIC	?GetCount@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetCount
PUBLIC	?Lookup@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Lookup
PUBLIC	??A?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEAAPAUtagTaskParameter@@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::operator[]
PUBLIC	?SetAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXGPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::SetAt
PUBLIC	?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::RemoveAll
PUBLIC	?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetStartPosition
PUBLIC	?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetNextAssoc
PUBLIC	?InitHashTable@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXIH@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::InitHashTable
PUBLIC	?NewAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAEPAVCAssoc@1@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::NewAssoc
PUBLIC	?GetAssocAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IBEPAVCAssoc@1@GAAI0@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetAssocAt
PUBLIC	??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::~CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
PUBLIC	?Serialize@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEXAAVCArchive@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Serialize
PUBLIC	?Dump@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXAAVCDumpContext@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Dump
PUBLIC	?AssertValid@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::AssertValid
PUBLIC	??_G?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEPAXI@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`scalar deleting destructor'
PUBLIC	??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
PUBLIC	?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Lookup
PUBLIC	??A?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEAAPAUtagUserTaskEntry@@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::operator[]
PUBLIC	?SetAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXKPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::SetAt
PUBLIC	?RemoveKey@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEHK@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveKey
PUBLIC	?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveAll
PUBLIC	?GetStartPosition@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetStartPosition
PUBLIC	?GetNextAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetNextAssoc
PUBLIC	?InitHashTable@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::InitHashTable
PUBLIC	?NewAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEPAVCAssoc@1@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::NewAssoc
PUBLIC	?FreeAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEXPAVCAssoc@1@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::FreeAssoc
PUBLIC	?GetAssocAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetAssocAt
PUBLIC	??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::~CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
PUBLIC	?Serialize@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEXAAVCArchive@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Serialize
PUBLIC	?Dump@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXAAVCDumpContext@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Dump
PUBLIC	?AssertValid@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXXZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::AssertValid
PUBLIC	??_G?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEPAXI@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`scalar deleting destructor'
PUBLIC	??0?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAE@XZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::CWHArray<tagTaskParameter *,tagTaskParameter * const &>
PUBLIC	??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::~CWHArray<tagTaskParameter *,tagTaskParameter * const &>
PUBLIC	?GetCount@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QBEHXZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEHABQAUtagTaskParameter@@@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::Add
PUBLIC	?ElementAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHABQAUtagTaskParameter@@@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAt
PUBLIC	?RemoveAll@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXXZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAll
PUBLIC	??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::AllocMemory
PUBLIC	??_G?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAEPAXI@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`scalar deleting destructor'
PUBLIC	??0?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAE@XZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
PUBLIC	??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::~CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
PUBLIC	?GetCount@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QBEHXZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::GetCount
PUBLIC	?Add@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEHABQAUtagUserTaskEntry@@@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::Add
PUBLIC	?ElementAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::ElementAt
PUBLIC	?SetSize@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetSize
PUBLIC	?SetAtGrow@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHABQAUtagUserTaskEntry@@@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetAtGrow
PUBLIC	?RemoveAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAt
PUBLIC	?RemoveAll@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXXZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAll
PUBLIC	??A?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::operator[]
PUBLIC	?AllocMemory@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::AllocMemory
PUBLIC	??_G?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAEPAXI@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`scalar deleting destructor'
PUBLIC	??0CUserTaskManager@@QAE@XZ			; CUserTaskManager::CUserTaskManager
PUBLIC	??1CUserTaskManager@@UAE@XZ			; CUserTaskManager::~CUserTaskManager
PUBLIC	?Release@CUserTaskManager@@UAEXXZ		; CUserTaskManager::Release
PUBLIC	?QueryInterface@CUserTaskManager@@UAEPAXABU_GUID@@K@Z ; CUserTaskManager::QueryInterface
PUBLIC	?RemoveTaskParameter@CUserTaskManager@@UAEXXZ	; CUserTaskManager::RemoveTaskParameter
PUBLIC	?SearchTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@G@Z ; CUserTaskManager::SearchTaskParameter
PUBLIC	?EnumTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@AAPAU__POSITION@@@Z ; CUserTaskManager::EnumTaskParameter
PUBLIC	?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z ; CUserTaskManager::AddTaskParameter
PUBLIC	?GetTaskParameterCount@CUserTaskManager@@UAEGXZ	; CUserTaskManager::GetTaskParameterCount
PUBLIC	?RemoveUserTask@CUserTaskManager@@UAEXK@Z	; CUserTaskManager::RemoveUserTask
PUBLIC	?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@K@Z ; CUserTaskManager::GetUserTaskEntry
PUBLIC	?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@KE@Z ; CUserTaskManager::GetUserTaskEntry
PUBLIC	?SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z ; CUserTaskManager::SetUserTaskInfo
PUBLIC	?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ ; CUserTaskManager::CreateUserTaskEntry
PUBLIC	?ResetTaskManager@CUserTaskManager@@QAEXXZ	; CUserTaskManager::ResetTaskManager
PUBLIC	??_GCUserTaskManager@@UAEPAXI@Z			; CUserTaskManager::`scalar deleting destructor'
PUBLIC	??_ECUserTaskManager@@UAEPAXI@Z			; CUserTaskManager::`vector deleting destructor'
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??0CPair@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAE@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CPair::CPair
PUBLIC	??0CAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CAssoc::CAssoc
PUBLIC	??$SerializeElements@G@@YGXAAVCArchive@@PAGH@Z	; SerializeElements<unsigned short>
PUBLIC	??$SerializeElements@PAUtagTaskParameter@@@@YGXAAVCArchive@@PAPAUtagTaskParameter@@H@Z ; SerializeElements<tagTaskParameter *>
PUBLIC	??$DumpElements@G@@YGXAAVCDumpContext@@PBGH@Z	; DumpElements<unsigned short>
PUBLIC	??$DumpElements@PAUtagTaskParameter@@@@YGXAAVCDumpContext@@PBQAUtagTaskParameter@@H@Z ; DumpElements<tagTaskParameter *>
PUBLIC	??0CPair@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAE@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CPair::CPair
PUBLIC	??0CAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CAssoc::CAssoc
PUBLIC	??$CompareElements@KK@@YGHPBK0@Z		; CompareElements<unsigned long,unsigned long>
PUBLIC	??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z	; SerializeElements<unsigned long>
PUBLIC	??$SerializeElements@PAUtagUserTaskEntry@@@@YGXAAVCArchive@@PAPAUtagUserTaskEntry@@H@Z ; SerializeElements<tagUserTaskEntry *>
PUBLIC	??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z	; DumpElements<unsigned long>
PUBLIC	??$DumpElements@PAUtagUserTaskEntry@@@@YGXAAVCDumpContext@@PBQAUtagUserTaskEntry@@H@Z ; DumpElements<tagUserTaskEntry *>
PUBLIC	??$HashKey@G@@YGIG@Z				; HashKey<unsigned short>
PUBLIC	??$CompareElements@GG@@YGHPBG0@Z		; CompareElements<unsigned short,unsigned short>
PUBLIC	??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_05PLCFPPOI@with?5@			; `string'
PUBLIC	??_C@_09HCLNAIDE@?5elements@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7IUnknownEx@@6B@				; IUnknownEx::`vftable'
PUBLIC	??_7IUserTaskManagerSink@@6B@			; IUserTaskManagerSink::`vftable'
PUBLIC	??_7?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`vftable'
PUBLIC	??_7?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`vftable'
PUBLIC	??_7?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`vftable'
PUBLIC	??_7?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`vftable'
PUBLIC	??_7CUserTaskManager@@6B@			; CUserTaskManager::`vftable'
PUBLIC	?__LINE__Var@?0???1CUserTaskManager@@UAE@XZ@4JA	; `CUserTaskManager::~CUserTaskManager'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	?__LINE__Var@?0??AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z@4JA ; `CUserTaskManager::AddTaskParameter'::`1'::__LINE__Var
PUBLIC	__TI2PAD
PUBLIC	__CTA2PAD
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_C@_0L@MJNGCNCH@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KB@ ; `string'
PUBLIC	?__LINE__Var@?0??SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z@4JA ; `CUserTaskManager::SetUserTaskInfo'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ@4JA ; `CUserTaskManager::CreateUserTaskEntry'::`1'::__LINE__Var
PUBLIC	??_C@_0BJ@ONKMKDIP@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KM?W?J?T?$LE?I?j?G?k?J?$KH?$LA?$NM?$KD?$KB@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ ; `string'
PUBLIC	??_C@_03OHJIHPJH@?6?7?$FL@			; `string'
PUBLIC	??_C@_04OAFLPOMH@?$FN?5?$DN?5@			; `string'
PUBLIC	??_R4IUnknownEx@@6B@				; IUnknownEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUnknownEx@@@8				; IUnknownEx `RTTI Type Descriptor'
PUBLIC	??_R3IUnknownEx@@8				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknownEx@@8				; IUnknownEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknownEx@@8			; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4IUserTaskManagerSink@@6B@			; IUserTaskManagerSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIUserTaskManagerSink@@@8		; IUserTaskManagerSink `RTTI Type Descriptor'
PUBLIC	??_R3IUserTaskManagerSink@@8			; IUserTaskManagerSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUserTaskManagerSink@@8			; IUserTaskManagerSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUserTaskManagerSink@@8		; IUserTaskManagerSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@@8 ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8	; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8	; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8 ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@@8 ; CWHArray<tagTaskParameter *,tagTaskParameter * const &> `RTTI Type Descriptor'
PUBLIC	??_R3?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8	; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8	; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8 ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CMap@GGPAUtagTaskParameter@@PAU1@@@@8	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CMap@GGPAUtagTaskParameter@@PAU1@@@8	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CMap@GGPAUtagTaskParameter@@PAU1@@@8	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CMap@GGPAUtagTaskParameter@@PAU1@@@8 ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@@8	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *> `RTTI Type Descriptor'
PUBLIC	??_R3?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8 ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CUserTaskManager@@6B@			; CUserTaskManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCUserTaskManager@@@8			; CUserTaskManager `RTTI Type Descriptor'
PUBLIC	??_R3CUserTaskManager@@8			; CUserTaskManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUserTaskManager@@8			; CUserTaskManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUserTaskManager@@8		; CUserTaskManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__ldiv:PROC
EXTRN	__imp___calloc_dbg:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:PROC ; AfxAssertValidObject
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ:PROC ; CObject::GetRuntimeClass
EXTRN	??1CObject@@UAE@XZ:PROC				; CObject::~CObject
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	??0CObject@@IAE@XZ:PROC				; CObject::CObject
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?AssertValid@CObject@@UBEXXZ:PROC		; CObject::AssertValid
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:PROC	; CObject::Dump
EXTRN	?AfxIsValidAddress@@YGHPBXIH@Z:PROC		; AfxIsValidAddress
EXTRN	??_U@YAPAXIPBDH@Z:PROC				; operator new[]
EXTRN	?IsStoring@CArchive@@QBEHXZ:PROC		; CArchive::IsStoring
EXTRN	?EnsureRead@CArchive@@QAEXPAXI@Z:PROC		; CArchive::EnsureRead
EXTRN	?Write@CArchive@@QAEXPBXI@Z:PROC		; CArchive::Write
EXTRN	?ReadCount@CArchive@@QAEKXZ:PROC		; CArchive::ReadCount
EXTRN	?WriteCount@CArchive@@QAEXK@Z:PROC		; CArchive::WriteCount
EXTRN	?GetDepth@CDumpContext@@QBEHXZ:PROC		; CDumpContext::GetDepth
EXTRN	??6CDumpContext@@QAEAAV0@PBD@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@H@Z:PROC		; CDumpContext::operator<<
EXTRN	?Create@CPlex@@SGPAU1@AAPAU1@II@Z:PROC		; CPlex::Create
EXTRN	?FreeDataChain@CPlex@@QAEXXZ:PROC		; CPlex::FreeDataChain
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	__Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ:PROC
EXTRN	??_E?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEPAXI@Z:PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`vector deleting destructor'
EXTRN	??_E?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEPAXI@Z:PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`vector deleting destructor'
EXTRN	??_E?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAEPAXI@Z:PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`vector deleting destructor'
EXTRN	??_E?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAEPAXI@Z:PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CUserTaskManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUserTaskManager@@8 DD FLAT:??_R0?AVCUserTaskManager@@@8 ; CUserTaskManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUserTaskManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CUserTaskManager@@8
rdata$r	SEGMENT
??_R2CUserTaskManager@@8 DD FLAT:??_R1A@?0A@EA@CUserTaskManager@@8 ; CUserTaskManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUserTaskManagerSink@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3CUserTaskManager@@8
rdata$r	SEGMENT
??_R3CUserTaskManager@@8 DD 00H				; CUserTaskManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CUserTaskManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUserTaskManager@@@8
data$r	SEGMENT
??_R0?AVCUserTaskManager@@@8 DD FLAT:??_7type_info@@6B@	; CUserTaskManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUserTaskManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CUserTaskManager@@6B@
rdata$r	SEGMENT
??_R4CUserTaskManager@@6B@ DD 00H			; CUserTaskManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCUserTaskManager@@@8
	DD	FLAT:??_R3CUserTaskManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8 DD FLAT:??_R0?AV?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@@8 ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8
rdata$r	SEGMENT
??_R2?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8 ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8
rdata$r	SEGMENT
??_R3?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8 DD 00H	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@ DD 00H	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@@8
	DD	FLAT:??_R3?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CMap@GGPAUtagTaskParameter@@PAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CMap@GGPAUtagTaskParameter@@PAU1@@@8 DD FLAT:??_R0?AV?$CMap@GGPAUtagTaskParameter@@PAU1@@@@8 ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CMap@GGPAUtagTaskParameter@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CMap@GGPAUtagTaskParameter@@PAU1@@@8
rdata$r	SEGMENT
??_R2?$CMap@GGPAUtagTaskParameter@@PAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CMap@GGPAUtagTaskParameter@@PAU1@@@8 ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CMap@GGPAUtagTaskParameter@@PAU1@@@8
rdata$r	SEGMENT
??_R3?$CMap@GGPAUtagTaskParameter@@PAU1@@@8 DD 00H	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$CMap@GGPAUtagTaskParameter@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CMap@GGPAUtagTaskParameter@@PAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CMap@GGPAUtagTaskParameter@@PAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CMap@GGPAUtagTaskParameter@@PAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@ DD 00H	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CMap@GGPAUtagTaskParameter@@PAU1@@@@8
	DD	FLAT:??_R3?$CMap@GGPAUtagTaskParameter@@PAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8 DD FLAT:??_R0?AV?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@@8 ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8 ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8 DD 00H	; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@ DD 00H ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@@8
	DD	FLAT:??_R3?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8 DD FLAT:??_R0?AV?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@@8 ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8
rdata$r	SEGMENT
??_R2?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8 DD FLAT:??_R1A@?0A@EA@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8 ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8
rdata$r	SEGMENT
??_R3?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8 DD 00H	; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@@8
data$r	SEGMENT
??_R0?AV?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@@8 DD FLAT:??_7type_info@@6B@ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@
rdata$r	SEGMENT
??_R4?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@ DD 00H ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@@8
	DD	FLAT:??_R3?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUserTaskManagerSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUserTaskManagerSink@@8 DD FLAT:??_R0?AUIUserTaskManagerSink@@@8 ; IUserTaskManagerSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUserTaskManagerSink@@8
rdata$r	ENDS
;	COMDAT ??_R2IUserTaskManagerSink@@8
rdata$r	SEGMENT
??_R2IUserTaskManagerSink@@8 DD FLAT:??_R1A@?0A@EA@IUserTaskManagerSink@@8 ; IUserTaskManagerSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R3IUserTaskManagerSink@@8
rdata$r	SEGMENT
??_R3IUserTaskManagerSink@@8 DD 00H			; IUserTaskManagerSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IUserTaskManagerSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUserTaskManagerSink@@@8
data$r	SEGMENT
??_R0?AUIUserTaskManagerSink@@@8 DD FLAT:??_7type_info@@6B@ ; IUserTaskManagerSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUserTaskManagerSink@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUserTaskManagerSink@@6B@
rdata$r	SEGMENT
??_R4IUserTaskManagerSink@@6B@ DD 00H			; IUserTaskManagerSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUserTaskManagerSink@@@8
	DD	FLAT:??_R3IUserTaskManagerSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknownEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknownEx@@8 DD FLAT:??_R0?AUIUnknownEx@@@8 ; IUnknownEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknownEx@@8
rdata$r	SEGMENT
??_R2IUnknownEx@@8 DD FLAT:??_R1A@?0A@EA@IUnknownEx@@8	; IUnknownEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknownEx@@8
rdata$r	SEGMENT
??_R3IUnknownEx@@8 DD 00H				; IUnknownEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknownEx@@@8
data$r	SEGMENT
??_R0?AUIUnknownEx@@@8 DD FLAT:??_7type_info@@6B@	; IUnknownEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknownEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4IUnknownEx@@6B@
rdata$r	SEGMENT
??_R4IUnknownEx@@6B@ DD 00H				; IUnknownEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUnknownEx@@@8
	DD	FLAT:??_R3IUnknownEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
CONST	SEGMENT
??_C@_04OAFLPOMH@?$FN?5?$DN?5@ DB '] = ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHJIHPJH@?6?7?$FL@
CONST	SEGMENT
??_C@_03OHJIHPJH@?6?7?$FL@ DB 0aH, 09H, '[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0c8H, 0abH, 0beH, 0d6H, 0b6H, 0a8H, 0d2H, 0e5H, '\a'
	DB	'rray.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ONKMKDIP@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KM?W?J?T?$LE?I?j?G?k?J?$KH?$LA?$NM?$KD?$KB@
CONST	SEGMENT
??_C@_0BJ@ONKMKDIP@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KM?W?J?T?$LE?I?j?G?k?J?$KH?$LA?$NM?$KD?$KB@ DB 0c4H
	DB	0daH, 0b4H, 0e6H, 0b2H, 0bbH, 0d7H, 0e3H, 0a3H, 0acH, 0d7H, 0caH
	DB	0d4H, 0b4H, 0c9H, 0eaH, 0c7H, 0ebH, 0caH, 0a7H, 0b0H, 0dcH, 0a3H
	DB	0a1H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ@4JA DD 0123H ; `CUserTaskManager::CreateUserTaskEntry'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z@4JA DD 0aaH ; `CUserTaskManager::SetUserTaskInfo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@MJNGCNCH@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KB@
CONST	SEGMENT
??_C@_0L@MJNGCNCH@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KB@ DB 0c4H, 0daH, 0b4H, 0e6H
	DB	0b2H, 0bbH, 0d7H, 0e3H, 0a3H, 0a1H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?0??AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z@4JA DD 043H ; `CUserTaskManager::AddTaskParameter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
CONST	SEGMENT
??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@ DB 'g'
	DB	':\', 0cdH, 0f8H, 0baH, 0fcH, '\happygamewh\', 0b7H, 0feH, 0ceH
	DB	0f1H, 0b6H, 0cbH, '\', 0cfH, 0b5H, 0cdH, 0b3H, 0c4H, 0a3H, 0bfH
	DB	0e9H, '\', 0b7H, 0feH, 0ceH, 0f1H, 0c6H, 0f7H, 0d7H, 0e9H, 0bcH
	DB	0feH, '\', 0d3H, 0ceH, 0cfH, 0b7H, 0b7H, 0feH, 0ceH, 0f1H, '\u'
	DB	'sertaskmanager.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???1CUserTaskManager@@UAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1CUserTaskManager@@UAE@XZ@4JA DD 0eH	; `CUserTaskManager::~CUserTaskManager'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CUserTaskManager@@6B@
CONST	SEGMENT
??_7CUserTaskManager@@6B@ DD FLAT:??_R4CUserTaskManager@@6B@ ; CUserTaskManager::`vftable'
	DD	FLAT:?Release@CUserTaskManager@@UAEXXZ
	DD	FLAT:?QueryInterface@CUserTaskManager@@UAEPAXABU_GUID@@K@Z
	DD	FLAT:?RemoveTaskParameter@CUserTaskManager@@UAEXXZ
	DD	FLAT:?SearchTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@G@Z
	DD	FLAT:?EnumTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@AAPAU__POSITION@@@Z
	DD	FLAT:?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z
	DD	FLAT:?GetTaskParameterCount@CUserTaskManager@@UAEGXZ
	DD	FLAT:?RemoveUserTask@CUserTaskManager@@UAEXK@Z
	DD	FLAT:?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@KE@Z
	DD	FLAT:?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@K@Z
	DD	FLAT:?SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z
	DD	FLAT:??_ECUserTaskManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@ DD FLAT:??_R4?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@
CONST	SEGMENT
??_7?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@ DD FLAT:??_R4?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`vftable'
	DD	FLAT:??_E?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@
CONST	SEGMENT
??_7?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@ DD FLAT:??_R4?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXXZ
	DD	FLAT:?Dump@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@
CONST	SEGMENT
??_7?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@ DD FLAT:??_R4?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`vftable'
	DD	FLAT:?GetRuntimeClass@CObject@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_E?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEPAXI@Z
	DD	FLAT:?Serialize@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXXZ
	DD	FLAT:?Dump@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_7IUserTaskManagerSink@@6B@
CONST	SEGMENT
??_7IUserTaskManagerSink@@6B@ DD FLAT:??_R4IUserTaskManagerSink@@6B@ ; IUserTaskManagerSink::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUnknownEx@@6B@
CONST	SEGMENT
??_7IUnknownEx@@6B@ DD FLAT:??_R4IUnknownEx@@6B@	; IUnknownEx::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA DD 061H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCLNAIDE@?5elements@
CONST	SEGMENT
??_C@_09HCLNAIDE@?5elements@ DB ' elements', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLCFPPOI@with?5@
CONST	SEGMENT
??_C@_05PLCFPPOI@with?5@ DB 'with ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\atlmfc\include\afxtempl.h', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECUserTaskManager@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$0
__catchsym$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$1
__unwindtable$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ
	DD	02H
	DD	FLAT:__tryblocktable$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z$0
__unwindtable$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z$2
__ehfuncinfo$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z
	DD	01H
	DD	FLAT:__tryblocktable$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??1CUserTaskManager@@UAE@XZ$15 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CUserTaskManager@@UAE@XZ$6
__catchsym$??1CUserTaskManager@@UAE@XZ$14 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CUserTaskManager@@UAE@XZ$4
__catchsym$??1CUserTaskManager@@UAE@XZ$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CUserTaskManager@@UAE@XZ$2
__catchsym$??1CUserTaskManager@@UAE@XZ$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??1CUserTaskManager@@UAE@XZ$0
__ehfuncinfo$??1CUserTaskManager@@UAE@XZ DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$??1CUserTaskManager@@UAE@XZ
	DD	04H
	DD	FLAT:__tryblocktable$??1CUserTaskManager@@UAE@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__tryblocktable$??1CUserTaskManager@@UAE@XZ DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??1CUserTaskManager@@UAE@XZ$12
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$??1CUserTaskManager@@UAE@XZ$13
	DD	08H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$??1CUserTaskManager@@UAE@XZ$14
	DD	0aH
	DD	0aH
	DD	0bH
	DD	01H
	DD	FLAT:__catchsym$??1CUserTaskManager@@UAE@XZ$15
__unwindtable$??1CUserTaskManager@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUserTaskManager@@UAE@XZ$8
	DD	00H
	DD	FLAT:__unwindfunclet$??1CUserTaskManager@@UAE@XZ$9
	DD	01H
	DD	FLAT:__unwindfunclet$??1CUserTaskManager@@UAE@XZ$10
	DD	02H
	DD	FLAT:__unwindfunclet$??1CUserTaskManager@@UAE@XZ$11
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
	DD	03H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUserTaskManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUserTaskManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CUserTaskManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CUserTaskManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CUserTaskManager@@QAE@XZ$3
__ehfuncinfo$??0CUserTaskManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CUserTaskManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z$0
__ehfuncinfo$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z$0
__ehfuncinfo$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$CompareElements@GG@@YGHPBG0@Z
_TEXT	SEGMENT
tv130 = -72						; size = 4
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_pElement1$ = 8						; size = 4
_pElement2$ = 12					; size = 4
??$CompareElements@GG@@YGHPBG0@Z PROC			; CompareElements<unsigned short,unsigned short>, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@CompareEle:

; 152  : 	ENSURE(pElement1 != NULL && pElement2 != NULL);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pElement1$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@CompareEle
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElement2$[ebp], 0
  00013	74 09		 je	 SHORT $LN7@CompareEle
  00015	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN8@CompareEle
$LN7@CompareEle:
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN8@CompareEle:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@CompareEle
  00031	68 98 00 00 00	 push	 152			; 00000098H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@CompareEle
  00044	cc		 int	 3
$LN9@CompareEle:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@CompareEle
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@CompareEle:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@CompareEle

; 153  : 	ASSERT(AfxIsValidAddress(pElement1, sizeof(TYPE), FALSE));

  00054	6a 00		 push	 0
  00056	6a 02		 push	 2
  00058	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00061	85 c0		 test	 eax, eax
  00063	75 14		 jne	 SHORT $LN10@CompareEle
  00065	68 99 00 00 00	 push	 153			; 00000099H
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00074	85 c0		 test	 eax, eax
  00076	74 01		 je	 SHORT $LN10@CompareEle
  00078	cc		 int	 3
$LN10@CompareEle:

; 154  : 	ASSERT(AfxIsValidAddress(pElement2, sizeof(ARG_TYPE), FALSE));

  00079	6a 00		 push	 0
  0007b	6a 02		 push	 2
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pElement2$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00086	85 c0		 test	 eax, eax
  00088	75 14		 jne	 SHORT $LN11@CompareEle
  0008a	68 9a 00 00 00	 push	 154			; 0000009aH
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00094	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00099	85 c0		 test	 eax, eax
  0009b	74 01		 je	 SHORT $LN11@CompareEle
  0009d	cc		 int	 3
$LN11@CompareEle:

; 155  : 
; 156  : 	return *pElement1 == *pElement2;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  000a1	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _pElement2$[ebp]
  000a7	0f b7 02	 movzx	 eax, WORD PTR [edx]
  000aa	3b c8		 cmp	 ecx, eax
  000ac	75 09		 jne	 SHORT $LN12@CompareEle
  000ae	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv130[ebp], 1
  000b5	eb 07		 jmp	 SHORT $LN13@CompareEle
$LN12@CompareEle:
  000b7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN13@CompareEle:
  000be	8b 45 b8	 mov	 eax, DWORD PTR tv130[ebp]
$LN6@CompareEle:

; 157  : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
??$CompareElements@GG@@YGHPBG0@Z ENDP			; CompareElements<unsigned short,unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$HashKey@G@@YGIG@Z
_TEXT	SEGMENT
$T1 = -80						; size = 8
_HashVal$ = -8						; size = 8
_key$ = 8						; size = 2
??$HashKey@G@@YGIG@Z PROC				; HashKey<unsigned short>, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 162  : 	// (algorithm copied from STL hash in xfunctional)
; 163  : #pragma warning(suppress: 4302) // 'type cast' : truncation
; 164  : #pragma warning(suppress: 4311) // pointer truncation
; 165  : 	ldiv_t HashVal = ldiv((long)(ARG_KEY)key, 127773);

  00009	68 1d f3 01 00	 push	 127773			; 0001f31dH
  0000e	0f b7 45 08	 movzx	 eax, WORD PTR _key$[ebp]
  00012	50		 push	 eax
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ldiv
  00019	83 c4 08	 add	 esp, 8
  0001c	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0001f	89 55 b4	 mov	 DWORD PTR $T1[ebp+4], edx
  00022	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  00025	89 4d f8	 mov	 DWORD PTR _HashVal$[ebp], ecx
  00028	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp+4]
  0002b	89 55 fc	 mov	 DWORD PTR _HashVal$[ebp+4], edx

; 166  : 	HashVal.rem = 16807 * HashVal.rem - 2836 * HashVal.quot;

  0002e	69 45 fc a7 41
	00 00		 imul	 eax, DWORD PTR _HashVal$[ebp+4], 16807
  00035	69 4d f8 14 0b
	00 00		 imul	 ecx, DWORD PTR _HashVal$[ebp], 2836
  0003c	2b c1		 sub	 eax, ecx
  0003e	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax

; 167  : 	if (HashVal.rem < 0)

  00041	79 0b		 jns	 SHORT $LN2@HashKey

; 168  : 		HashVal.rem += 2147483647;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]
  00046	05 ff ff ff 7f	 add	 eax, 2147483647		; 7fffffffH
  0004b	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax
$LN2@HashKey:

; 169  : 	return ((UINT)HashVal.rem);

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]

; 170  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??$HashKey@G@@YGIG@Z ENDP				; HashKey<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@PAUtagUserTaskEntry@@@@YGXAAVCDumpContext@@PBQAUtagUserTaskEntry@@H@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAUtagUserTaskEntry@@@@YGXAAVCDumpContext@@PBQAUtagUserTaskEntry@@H@Z PROC ; DumpElements<tagUserTaskEntry *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAUtagUserTaskEntry@@@@YGXAAVCDumpContext@@PBQAUtagUserTaskEntry@@H@Z ENDP ; DumpElements<tagUserTaskEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z PROC	; DumpElements<unsigned long>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z ENDP	; DumpElements<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAUtagUserTaskEntry@@@@YGXAAVCArchive@@PAPAUtagUserTaskEntry@@H@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAUtagUserTaskEntry@@@@YGXAAVCArchive@@PAPAUtagUserTaskEntry@@H@Z PROC ; SerializeElements<tagUserTaskEntry *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAUtagUserTaskEntry@@@@YGXAAVCArchive@@PAPAUtagUserTaskEntry@@H@Z ENDP ; SerializeElements<tagUserTaskEntry *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z PROC	; SerializeElements<unsigned long>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ENDP	; SerializeElements<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$CompareElements@KK@@YGHPBK0@Z
_TEXT	SEGMENT
tv128 = -72						; size = 4
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_pElement1$ = 8						; size = 4
_pElement2$ = 12					; size = 4
??$CompareElements@KK@@YGHPBK0@Z PROC			; CompareElements<unsigned long,unsigned long>, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@CompareEle:

; 152  : 	ENSURE(pElement1 != NULL && pElement2 != NULL);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pElement1$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@CompareEle
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElement2$[ebp], 0
  00013	74 09		 je	 SHORT $LN7@CompareEle
  00015	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN8@CompareEle
$LN7@CompareEle:
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN8@CompareEle:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@CompareEle
  00031	68 98 00 00 00	 push	 152			; 00000098H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@CompareEle
  00044	cc		 int	 3
$LN9@CompareEle:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@CompareEle
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@CompareEle:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@CompareEle

; 153  : 	ASSERT(AfxIsValidAddress(pElement1, sizeof(TYPE), FALSE));

  00054	6a 00		 push	 0
  00056	6a 04		 push	 4
  00058	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00061	85 c0		 test	 eax, eax
  00063	75 14		 jne	 SHORT $LN10@CompareEle
  00065	68 99 00 00 00	 push	 153			; 00000099H
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00074	85 c0		 test	 eax, eax
  00076	74 01		 je	 SHORT $LN10@CompareEle
  00078	cc		 int	 3
$LN10@CompareEle:

; 154  : 	ASSERT(AfxIsValidAddress(pElement2, sizeof(ARG_TYPE), FALSE));

  00079	6a 00		 push	 0
  0007b	6a 04		 push	 4
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pElement2$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00086	85 c0		 test	 eax, eax
  00088	75 14		 jne	 SHORT $LN11@CompareEle
  0008a	68 9a 00 00 00	 push	 154			; 0000009aH
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00094	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00099	85 c0		 test	 eax, eax
  0009b	74 01		 je	 SHORT $LN11@CompareEle
  0009d	cc		 int	 3
$LN11@CompareEle:

; 155  : 
; 156  : 	return *pElement1 == *pElement2;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _pElement1$[ebp]
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _pElement2$[ebp]
  000a4	8b 10		 mov	 edx, DWORD PTR [eax]
  000a6	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a8	75 09		 jne	 SHORT $LN12@CompareEle
  000aa	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv128[ebp], 1
  000b1	eb 07		 jmp	 SHORT $LN13@CompareEle
$LN12@CompareEle:
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$LN13@CompareEle:
  000ba	8b 45 b8	 mov	 eax, DWORD PTR tv128[ebp]
$LN6@CompareEle:

; 157  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
??$CompareElements@KK@@YGHPBK0@Z ENDP			; CompareElements<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??0CAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@K@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CAssoc::CAssoc, COMDAT
; _this$ = ecx

; 1267 : 		CAssoc( ARG_KEY key ) : CPair( key ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CPair@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAE@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CPair::CPair
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0CAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@K@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CAssoc::CAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CPair@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyval$ = 8						; size = 4
??0CPair@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAE@K@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CPair::CPair, COMDAT
; _this$ = ecx

; 1256 : 		CPair( ARG_KEY keyval ) : key( keyval )	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _keyval$[ebp]
  00012	89 08		 mov	 DWORD PTR [eax], ecx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??0CPair@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAE@K@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CPair::CPair
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@PAUtagTaskParameter@@@@YGXAAVCDumpContext@@PBQAUtagTaskParameter@@H@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@PAUtagTaskParameter@@@@YGXAAVCDumpContext@@PBQAUtagTaskParameter@@H@Z PROC ; DumpElements<tagTaskParameter *>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 2a		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	c1 e0 02	 shl	 eax, 2
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006c	85 c0		 test	 eax, eax
  0006e	75 14		 jne	 SHORT $LN6@DumpElemen
  00070	68 8c 00 00 00	 push	 140			; 0000008cH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0007a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007f	85 c0		 test	 eax, eax
  00081	74 01		 je	 SHORT $LN6@DumpElemen
  00083	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@PAUtagTaskParameter@@@@YGXAAVCDumpContext@@PBQAUtagTaskParameter@@H@Z ENDP ; DumpElements<tagTaskParameter *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$DumpElements@G@@YGXAAVCDumpContext@@PBGH@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
___afx_condVal$1 = -4					; size = 4
_dc$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$DumpElements@G@@YGXAAVCDumpContext@@PBGH@Z PROC	; DumpElements<unsigned short>, COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@DumpElemen:

; 138  : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN7@DumpElemen
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN7@DumpElemen
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN8@DumpElemen
$LN7@DumpElemen:
  0001e	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN8@DumpElemen:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$1[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0002f	75 14		 jne	 SHORT $LN9@DumpElemen
  00031	68 8a 00 00 00	 push	 138			; 0000008aH
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00040	85 c0		 test	 eax, eax
  00042	74 01		 je	 SHORT $LN9@DumpElemen
  00044	cc		 int	 3
$LN9@DumpElemen:
  00045	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00049	75 05		 jne	 SHORT $LN2@DumpElemen
  0004b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@DumpElemen:
  00050	33 c0		 xor	 eax, eax
  00052	75 b5		 jne	 SHORT $LN4@DumpElemen

; 139  : 	ASSERT(nCount == 0 ||

  00054	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00058	74 29		 je	 SHORT $LN6@DumpElemen
  0005a	6a 00		 push	 0
  0005c	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005f	d1 e0		 shl	 eax, 1
  00061	50		 push	 eax
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  0006b	85 c0		 test	 eax, eax
  0006d	75 14		 jne	 SHORT $LN6@DumpElemen
  0006f	68 8c 00 00 00	 push	 140			; 0000008cH
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00079	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0007e	85 c0		 test	 eax, eax
  00080	74 01		 je	 SHORT $LN6@DumpElemen
  00082	cc		 int	 3
$LN6@DumpElemen:

; 140  : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE), FALSE));
; 141  : 	(dc); // not used
; 142  : 	(pElements);  // not used
; 143  : 	(nCount); // not used
; 144  : 
; 145  : 	// default does nothing
; 146  : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 0c 00	 ret	 12			; 0000000cH
??$DumpElements@G@@YGXAAVCDumpContext@@PBGH@Z ENDP	; DumpElements<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@PAUtagTaskParameter@@@@YGXAAVCArchive@@PAPAUtagTaskParameter@@H@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@PAUtagTaskParameter@@@@YGXAAVCArchive@@PAPAUtagTaskParameter@@H@Z PROC ; SerializeElements<tagTaskParameter *>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 27		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	c1 e0 02	 shl	 eax, 2
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00069	85 c0		 test	 eax, eax
  0006b	75 11		 jne	 SHORT $LN16@SerializeE
  0006d	6a 46		 push	 70			; 00000046H
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00074	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00079	85 c0		 test	 eax, eax
  0007b	74 01		 je	 SHORT $LN16@SerializeE
  0007d	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00081	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00086	85 c0		 test	 eax, eax
  00088	74 5c		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  0008a	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00093	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00096	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  0009a	76 48		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009c	81 7d f4 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 536870911 ; 1fffffffH
  000a3	73 08		 jae	 SHORT $LN17@SerializeE
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a8	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000ab	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ad	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv92[ebp], 536870911 ; 1fffffffH
$LN18@SerializeE:
  000b4	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b7	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000ba	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bd	c1 e0 02	 shl	 eax, 2
  000c0	50		 push	 eax
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c4	51		 push	 ecx
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c8	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cd	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000d0	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d3	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000dc	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000df	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e2	eb b2		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e4	eb 5a		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e6	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e9	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ef	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f2	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f6	76 48		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f8	81 7d e8 ff ff
	ff 1f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 536870911 ; 1fffffffH
  000ff	73 08		 jae	 SHORT $LN19@SerializeE
  00101	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00104	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00107	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00109	c7 45 a0 ff ff
	ff 1f		 mov	 DWORD PTR tv134[ebp], 536870911 ; 1fffffffH
$LN20@SerializeE:
  00110	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00113	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00116	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00119	c1 e0 02	 shl	 eax, 2
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00120	51		 push	 ecx
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00124	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00129	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  0012c	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012f	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  00132	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00138	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0013b	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013e	eb b2		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@PAUtagTaskParameter@@@@YGXAAVCArchive@@PAPAUtagTaskParameter@@H@Z ENDP ; SerializeElements<tagTaskParameter *>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$SerializeElements@G@@YGXAAVCArchive@@PAGH@Z
_TEXT	SEGMENT
tv134 = -96						; size = 4
tv92 = -96						; size = 4
tv66 = -96						; size = 4
_nElementsToRead$1 = -28				; size = 4
_nElementsLeft$2 = -24					; size = 4
_pData$3 = -20						; size = 4
_nElementsToWrite$4 = -16				; size = 4
_nElementsLeft$5 = -12					; size = 4
_pData$6 = -8						; size = 4
___afx_condVal$7 = -4					; size = 4
_ar$ = 8						; size = 4
_pElements$ = 12					; size = 4
_nCount$ = 16						; size = 4
??$SerializeElements@G@@YGXAAVCArchive@@PAGH@Z PROC	; SerializeElements<unsigned short>, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN4@SerializeE:

; 68   : 	ENSURE(nCount == 0 || pElements != NULL);

  00009	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0000d	74 0f		 je	 SHORT $LN13@SerializeE
  0000f	83 7d 0c 00	 cmp	 DWORD PTR _pElements$[ebp], 0
  00013	75 09		 jne	 SHORT $LN13@SerializeE
  00015	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN14@SerializeE
$LN13@SerializeE:
  0001e	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN14@SerializeE:
  00025	8b 45 a0	 mov	 eax, DWORD PTR tv66[ebp]
  00028	89 45 fc	 mov	 DWORD PTR ___afx_condVal$7[ebp], eax
  0002b	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  0002f	75 11		 jne	 SHORT $LN15@SerializeE
  00031	6a 44		 push	 68			; 00000044H
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00038	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003d	85 c0		 test	 eax, eax
  0003f	74 01		 je	 SHORT $LN15@SerializeE
  00041	cc		 int	 3
$LN15@SerializeE:
  00042	83 7d fc 00	 cmp	 DWORD PTR ___afx_condVal$7[ebp], 0
  00046	75 05		 jne	 SHORT $LN2@SerializeE
  00048	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SerializeE:
  0004d	33 c0		 xor	 eax, eax
  0004f	75 b8		 jne	 SHORT $LN4@SerializeE

; 69   : 	ASSERT(nCount == 0 ||

  00051	83 7d 10 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  00055	74 26		 je	 SHORT $LN16@SerializeE
  00057	6a 01		 push	 1
  00059	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0005c	d1 e0		 shl	 eax, 1
  0005e	50		 push	 eax
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _pElements$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00068	85 c0		 test	 eax, eax
  0006a	75 11		 jne	 SHORT $LN16@SerializeE
  0006c	6a 46		 push	 70			; 00000046H
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00073	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00078	85 c0		 test	 eax, eax
  0007a	74 01		 je	 SHORT $LN16@SerializeE
  0007c	cc		 int	 3
$LN16@SerializeE:

; 70   : 		AfxIsValidAddress(pElements, (size_t)nCount * sizeof(TYPE)));
; 71   : 
; 72   : 	// default is bit-wise read/write
; 73   : 	if (ar.IsStoring())

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00080	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00085	85 c0		 test	 eax, eax
  00087	74 5b		 je	 SHORT $LN10@SerializeE

; 74   : 	{
; 75   : 		TYPE* pData;
; 76   : 		UINT_PTR nElementsLeft;
; 77   : 
; 78   : 		nElementsLeft = nCount;

  00089	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  0008c	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 79   : 		pData = pElements;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  00092	89 45 f8	 mov	 DWORD PTR _pData$6[ebp], eax
$LN5@SerializeE:

; 80   : 		while( nElementsLeft > 0 )

  00095	83 7d f4 00	 cmp	 DWORD PTR _nElementsLeft$5[ebp], 0
  00099	76 47		 jbe	 SHORT $LN6@SerializeE

; 81   : 		{
; 82   : 			UINT nElementsToWrite;
; 83   : 
; 84   : 			nElementsToWrite = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  0009b	81 7d f4 ff ff
	ff 3f		 cmp	 DWORD PTR _nElementsLeft$5[ebp], 1073741823 ; 3fffffffH
  000a2	73 08		 jae	 SHORT $LN17@SerializeE
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000a7	89 45 a0	 mov	 DWORD PTR tv92[ebp], eax
  000aa	eb 07		 jmp	 SHORT $LN18@SerializeE
$LN17@SerializeE:
  000ac	c7 45 a0 ff ff
	ff 3f		 mov	 DWORD PTR tv92[ebp], 1073741823 ; 3fffffffH
$LN18@SerializeE:
  000b3	8b 4d a0	 mov	 ecx, DWORD PTR tv92[ebp]
  000b6	89 4d f0	 mov	 DWORD PTR _nElementsToWrite$4[ebp], ecx

; 85   : 			ar.Write(pData, nElementsToWrite*sizeof(TYPE));

  000b9	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000bc	d1 e0		 shl	 eax, 1
  000be	50		 push	 eax
  000bf	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000c2	51		 push	 ecx
  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000c6	e8 00 00 00 00	 call	 ?Write@CArchive@@QAEXPBXI@Z ; CArchive::Write

; 86   : 			nElementsLeft -= nElementsToWrite;

  000cb	8b 45 f4	 mov	 eax, DWORD PTR _nElementsLeft$5[ebp]
  000ce	2b 45 f0	 sub	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d1	89 45 f4	 mov	 DWORD PTR _nElementsLeft$5[ebp], eax

; 87   : 			pData += nElementsToWrite;

  000d4	8b 45 f0	 mov	 eax, DWORD PTR _nElementsToWrite$4[ebp]
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _pData$6[ebp]
  000da	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000dd	89 55 f8	 mov	 DWORD PTR _pData$6[ebp], edx

; 88   : 		}

  000e0	eb b3		 jmp	 SHORT $LN5@SerializeE
$LN6@SerializeE:

; 89   : 	}
; 90   : 	else

  000e2	eb 59		 jmp	 SHORT $LN12@SerializeE
$LN10@SerializeE:

; 91   : 	{
; 92   : 		TYPE* pData;
; 93   : 		UINT_PTR nElementsLeft;
; 94   : 
; 95   : 		nElementsLeft = nCount;

  000e4	8b 45 10	 mov	 eax, DWORD PTR _nCount$[ebp]
  000e7	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 96   : 		pData = pElements;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR _pElements$[ebp]
  000ed	89 45 ec	 mov	 DWORD PTR _pData$3[ebp], eax
$LN7@SerializeE:

; 97   : 		while( nElementsLeft > 0 )

  000f0	83 7d e8 00	 cmp	 DWORD PTR _nElementsLeft$2[ebp], 0
  000f4	76 47		 jbe	 SHORT $LN12@SerializeE

; 98   : 		{
; 99   : 			UINT nElementsToRead;
; 100  : 
; 101  : 			nElementsToRead = UINT(__min(nElementsLeft, INT_MAX/sizeof(TYPE)));

  000f6	81 7d e8 ff ff
	ff 3f		 cmp	 DWORD PTR _nElementsLeft$2[ebp], 1073741823 ; 3fffffffH
  000fd	73 08		 jae	 SHORT $LN19@SerializeE
  000ff	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00102	89 45 a0	 mov	 DWORD PTR tv134[ebp], eax
  00105	eb 07		 jmp	 SHORT $LN20@SerializeE
$LN19@SerializeE:
  00107	c7 45 a0 ff ff
	ff 3f		 mov	 DWORD PTR tv134[ebp], 1073741823 ; 3fffffffH
$LN20@SerializeE:
  0010e	8b 4d a0	 mov	 ecx, DWORD PTR tv134[ebp]
  00111	89 4d e4	 mov	 DWORD PTR _nElementsToRead$1[ebp], ecx

; 102  : 			ar.EnsureRead(pData, nElementsToRead*sizeof(TYPE));

  00114	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00117	d1 e0		 shl	 eax, 1
  00119	50		 push	 eax
  0011a	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  0011d	51		 push	 ecx
  0011e	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00121	e8 00 00 00 00	 call	 ?EnsureRead@CArchive@@QAEXPAXI@Z ; CArchive::EnsureRead

; 103  : 			nElementsLeft -= nElementsToRead;

  00126	8b 45 e8	 mov	 eax, DWORD PTR _nElementsLeft$2[ebp]
  00129	2b 45 e4	 sub	 eax, DWORD PTR _nElementsToRead$1[ebp]
  0012c	89 45 e8	 mov	 DWORD PTR _nElementsLeft$2[ebp], eax

; 104  : 			pData += nElementsToRead;

  0012f	8b 45 e4	 mov	 eax, DWORD PTR _nElementsToRead$1[ebp]
  00132	8b 4d ec	 mov	 ecx, DWORD PTR _pData$3[ebp]
  00135	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00138	89 55 ec	 mov	 DWORD PTR _pData$3[ebp], edx

; 105  : 		}

  0013b	eb b3		 jmp	 SHORT $LN7@SerializeE
$LN12@SerializeE:

; 106  : 	}
; 107  : }

  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 0c 00	 ret	 12			; 0000000cH
??$SerializeElements@G@@YGXAAVCArchive@@PAGH@Z ENDP	; SerializeElements<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 2
??0CAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@G@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CAssoc::CAssoc, COMDAT
; _this$ = ecx

; 1267 : 		CAssoc( ARG_KEY key ) : CPair( key ) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	0f b7 45 08	 movzx	 eax, WORD PTR _key$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??0CPair@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAE@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CPair::CPair
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0CAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@G@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CAssoc::CAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0CPair@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAE@G@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keyval$ = 8						; size = 2
??0CPair@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAE@G@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CPair::CPair, COMDAT
; _this$ = ecx

; 1256 : 		CPair( ARG_KEY keyval ) : key( keyval )	{}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	66 8b 4d 08	 mov	 cx, WORD PTR _keyval$[ebp]
  00013	66 89 08	 mov	 WORD PTR [eax], cx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CPair@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAE@G@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CPair::CPair
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrnext$1 = -12					; size = 4
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001b	68 9c 02 00 00	 push	 668			; 0000029cH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00025	6a 02		 push	 2
  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0002c	50		 push	 eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00033	83 c4 14	 add	 esp, 20			; 00000014H
  00036	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00039	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  0003d	75 05		 jne	 SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

  0003f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  00047	89 45 f4	 mov	 DWORD PTR __Ptrnext$1[ebp], eax
  0004a	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004f	83 e8 01	 sub	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Ptrnext$1[ebp]
  00058	83 c1 01	 add	 ecx, 1
  0005b	89 4d f4	 mov	 DWORD PTR __Ptrnext$1[ebp], ecx
  0005e	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00061	83 c2 01	 add	 edx, 1
  00064	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
  00067	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0006b	76 0c		 jbe	 SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  0006d	8b 45 f4	 mov	 eax, DWORD PTR __Ptrnext$1[ebp]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00073	8a 11		 mov	 dl, BYTE PTR [ecx]
  00075	88 10		 mov	 BYTE PTR [eax], dl
  00077	eb d3		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

  00079	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_ECUserTaskManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECUserTaskManager@@UAEPAXI@Z PROC			; CUserTaskManager::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECUserTaskManager@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 02	 and	 eax, 2
  00031	74 41		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1CUserTaskManager@@UAE@XZ ; CUserTaskManager::~CUserTaskManager
  00038	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003e	51		 push	 ecx
  0003f	6a 64		 push	 100			; 00000064H
  00041	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0004d	83 e0 01	 and	 eax, 1
  00050	74 1a		 je	 SHORT $LN3@vector
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	6b 48 fc 64	 imul	 ecx, DWORD PTR [eax-4], 100
  00059	83 c1 04	 add	 ecx, 4
  0005c	51		 push	 ecx
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 ea 04	 sub	 edx, 4
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00069	83 c4 08	 add	 esp, 8
$LN3@vector:
  0006c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 e8 04	 sub	 eax, 4
  00072	eb 21		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1CUserTaskManager@@UAE@XZ ; CUserTaskManager::~CUserTaskManager
  0007c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007f	83 e0 01	 and	 eax, 1
  00082	74 0e		 je	 SHORT $LN4@vector
  00084	6a 64		 push	 100			; 00000064H
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
$LN4@vector:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECUserTaskManager@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECUserTaskManager@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECUserTaskManager@@UAEPAXI@Z ENDP			; CUserTaskManager::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GCUserTaskManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCUserTaskManager@@UAEPAXI@Z PROC			; CUserTaskManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1CUserTaskManager@@UAE@XZ ; CUserTaskManager::~CUserTaskManager
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 64		 push	 100			; 00000064H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_GCUserTaskManager@@UAEPAXI@Z ENDP			; CUserTaskManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?ResetTaskManager@CUserTaskManager@@QAEXXZ
_TEXT	SEGMENT
_pUserTaskEntry$ = -16					; size = 4
_Position$ = -12					; size = 4
_dwKey$ = -8						; size = 4
_this$ = -4						; size = 4
?ResetTaskManager@CUserTaskManager@@QAEXXZ PROC		; CUserTaskManager::ResetTaskManager, COMDAT
; _this$ = ecx

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 326  : 	//移除参数
; 327  : 	RemoveTaskParameter();

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00017	ff d0		 call	 eax

; 328  : 	
; 329  : 	//变量定义
; 330  : 	DWORD dwKey=0;

  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwKey$[ebp], 0

; 331  : 	POSITION Position=NULL;

  00020	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Position$[ebp], 0

; 332  : 
; 333  : 	//移除任务
; 334  : 	tagUserTaskEntry * pUserTaskEntry=NULL;

  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 335  : 	Position=m_UserTaskEntryMap.GetStartPosition();

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 20	 add	 ecx, 32			; 00000020H
  00034	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetStartPosition
  00039	89 45 f4	 mov	 DWORD PTR _Position$[ebp], eax
$LN2@ResetTaskM:

; 336  : 	while (Position!=NULL)

  0003c	83 7d f4 00	 cmp	 DWORD PTR _Position$[ebp], 0
  00040	74 28		 je	 SHORT $LN3@ResetTaskM

; 337  : 	{
; 338  : 		m_UserTaskEntryMap.GetNextAssoc(Position,dwKey,pUserTaskEntry);

  00042	8d 45 f0	 lea	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00045	50		 push	 eax
  00046	8d 4d f8	 lea	 ecx, DWORD PTR _dwKey$[ebp]
  00049	51		 push	 ecx
  0004a	8d 55 f4	 lea	 edx, DWORD PTR _Position$[ebp]
  0004d	52		 push	 edx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 20	 add	 ecx, 32			; 00000020H
  00054	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetNextAssoc

; 339  : 		m_UserTaskEntryBuffer.Add(pUserTaskEntry);

  00059	8d 45 f0	 lea	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	83 c1 50	 add	 ecx, 80			; 00000050H
  00063	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEHABQAUtagUserTaskEntry@@@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::Add

; 340  : 	}	

  00068	eb d2		 jmp	 SHORT $LN2@ResetTaskM
$LN3@ResetTaskM:

; 341  : 
; 342  : 	//移除元素
; 343  : 	m_TaskParameterMap.RemoveAll();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 04	 add	 ecx, 4
  00070	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::RemoveAll

; 344  : 	m_UserTaskEntryMap.RemoveAll();

  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	83 c1 20	 add	 ecx, 32			; 00000020H
  0007b	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveAll

; 345  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?ResetTaskManager@CUserTaskManager@@QAEXXZ ENDP		; CUserTaskManager::ResetTaskManager
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ
_TEXT	SEGMENT
tv138 = -104						; size = 4
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
_pUserTaskEntry$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ PROC ; CUserTaskManager::CreateUserTaskEntry, COMDAT
; _this$ = ecx

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 58	 sub	 esp, 88			; 00000058H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 	//变量定义
; 293  : 	tagUserTaskEntry * pUserTaskEntry=NULL;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 294  : 
; 295  : 	//查找缓冲
; 296  : 	if(m_UserTaskEntryBuffer.GetCount()>0)

  00036	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 50	 add	 ecx, 80			; 00000050H
  0003c	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QBEHXZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::GetCount
  00041	85 c0		 test	 eax, eax
  00043	7e 21		 jle	 SHORT $LN2@CreateUser

; 297  : 	{
; 298  : 		pUserTaskEntry=m_UserTaskEntryBuffer[0];

  00045	6a 00		 push	 0
  00047	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 50	 add	 ecx, 80			; 00000050H
  0004d	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::operator[]
  00052	8b 00		 mov	 eax, DWORD PTR [eax]
  00054	89 45 e8	 mov	 DWORD PTR _pUserTaskEntry$[ebp], eax

; 299  : 		m_UserTaskEntryBuffer.RemoveAt(0);

  00057	6a 01		 push	 1
  00059	6a 00		 push	 0
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 50	 add	 ecx, 80			; 00000050H
  00061	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAt
$LN2@CreateUser:

; 300  : 	}
; 301  : 
; 302  : 	//创建任务
; 303  : 	if(pUserTaskEntry==NULL)

  00066	83 7d e8 00	 cmp	 DWORD PTR _pUserTaskEntry$[ebp], 0
  0006a	0f 85 c7 00 00
	00		 jne	 $LN3@CreateUser

; 304  : 	{		
; 305  : 		try

  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 306  : 		{
; 307  : 			pUserTaskEntry=new tagUserTaskEntry;

  00077	6a 18		 push	 24			; 00000018H
  00079	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007e	83 c4 04	 add	 esp, 4
  00081	89 45 98	 mov	 DWORD PTR tv138[ebp], eax
  00084	8b 45 98	 mov	 eax, DWORD PTR tv138[ebp]
  00087	89 45 a4	 mov	 DWORD PTR $T4[ebp], eax
  0008a	8b 4d a4	 mov	 ecx, DWORD PTR $T4[ebp]
  0008d	89 4d e8	 mov	 DWORD PTR _pUserTaskEntry$[ebp], ecx

; 308  : 			if(pUserTaskEntry==NULL) throw TEXT("内存不足，资源申请失败！");			

  00090	83 7d e8 00	 cmp	 DWORD PTR _pUserTaskEntry$[ebp], 0
  00094	75 15		 jne	 SHORT $LN5@CreateUser
  00096	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_C@_0BJ@ONKMKDIP@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KM?W?J?T?$LE?I?j?G?k?J?$KH?$LA?$NM?$KD?$KB@
  0009d	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000a2	8d 45 a0	 lea	 eax, DWORD PTR $T3[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@CreateUser:

; 309  : 		}

  000ab	eb 7a		 jmp	 SHORT $LN10@CreateUser
__catch$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$0:

; 310  : 		catch(...)
; 311  : 		{

  000ad	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 312  : 			ASSERT(FALSE);

  000b0	33 c0		 xor	 eax, eax
  000b2	75 19		 jne	 SHORT $LN8@CreateUser
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ@4JA
  000ba	83 c1 15	 add	 ecx, 21			; 00000015H
  000bd	51		 push	 ecx
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000c3	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000c8	85 c0		 test	 eax, eax
  000ca	74 01		 je	 SHORT $LN8@CreateUser
  000cc	cc		 int	 3
$LN8@CreateUser:

; 313  : 			SafeDelete(pUserTaskEntry);

  000cd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000d1	8b 45 e8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  000d4	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
  000d7	6a 18		 push	 24			; 00000018H
  000d9	8b 4d 9c	 mov	 ecx, DWORD PTR $T2[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e2	83 c4 08	 add	 esp, 8
  000e5	eb 23		 jmp	 SHORT $LN12@CreateUser
__catch$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$1:
  000e7	33 c0		 xor	 eax, eax
  000e9	75 19		 jne	 SHORT $LN9@CreateUser
  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ@4JA
  000f1	83 c1 16	 add	 ecx, 22			; 00000016H
  000f4	51		 push	 ecx
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000fa	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ff	85 c0		 test	 eax, eax
  00101	74 01		 je	 SHORT $LN9@CreateUser
  00103	cc		 int	 3
$LN9@CreateUser:
  00104	b8 00 00 00 00	 mov	 eax, $LN15@CreateUser
  00109	c3		 ret	 0
$LN12@CreateUser:
  0010a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
  00111	eb 07		 jmp	 SHORT __tryend$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$2
$LN15@CreateUser:
  00113	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ$2:
  0011a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 314  : 		}

  00121	b8 00 00 00 00	 mov	 eax, $LN17@CreateUser
  00126	c3		 ret	 0
$LN10@CreateUser:
  00127	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0012e	eb 07		 jmp	 SHORT $LN3@CreateUser
$LN17@CreateUser:
  00130	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN3@CreateUser:

; 315  : 	}
; 316  : 
; 317  : 	//初始内存
; 318  : 	ZeroMemory(pUserTaskEntry,sizeof(tagUserTaskEntry));

  00137	6a 18		 push	 24			; 00000018H
  00139	6a 00		 push	 0
  0013b	8b 45 e8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 _memset
  00144	83 c4 0c	 add	 esp, 12			; 0000000cH

; 319  : 
; 320  : 	return pUserTaskEntry;

  00147	8b 45 e8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
$LN7@CreateUser:

; 321  : }

  0014a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0014d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00154	59		 pop	 ecx
  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ ENDP ; CUserTaskManager::CreateUserTaskEntry
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z
_TEXT	SEGMENT
_i$1 = -16						; size = 2
_pUserTaskEntryHead$ = -12				; size = 4
_pUserTaskEntry$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
_UserTaskInfo$ = 12					; size = 4
_wTaskCount$ = 16					; size = 2
?SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z PROC ; CUserTaskManager::SetUserTaskInfo, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 	//参数校验
; 172  : 	ASSERT(wTaskCount>0 && UserTaskInfo!=NULL);

  0000c	0f b7 45 10	 movzx	 eax, WORD PTR _wTaskCount$[ebp]
  00010	85 c0		 test	 eax, eax
  00012	7e 06		 jle	 SHORT $LN13@SetUserTas
  00014	83 7d 0c 00	 cmp	 DWORD PTR _UserTaskInfo$[ebp], 0
  00018	75 19		 jne	 SHORT $LN14@SetUserTas
$LN13@SetUserTas:
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z@4JA
  00020	83 c1 02	 add	 ecx, 2
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00029	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002e	85 c0		 test	 eax, eax
  00030	74 01		 je	 SHORT $LN14@SetUserTas
  00032	cc		 int	 3
$LN14@SetUserTas:

; 173  : 	if(wTaskCount==0 || UserTaskInfo==NULL) return;

  00033	0f b7 45 10	 movzx	 eax, WORD PTR _wTaskCount$[ebp]
  00037	85 c0		 test	 eax, eax
  00039	74 06		 je	 SHORT $LN8@SetUserTas
  0003b	83 7d 0c 00	 cmp	 DWORD PTR _UserTaskInfo$[ebp], 0
  0003f	75 05		 jne	 SHORT $LN7@SetUserTas
$LN8@SetUserTas:
  00041	e9 2c 01 00 00	 jmp	 $LN1@SetUserTas
$LN7@SetUserTas:

; 174  : 
; 175  : 	//变量定义
; 176  : 	tagUserTaskEntry * pUserTaskEntry=NULL;

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 177  : 	tagUserTaskEntry * pUserTaskEntryHead=NULL;

  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntryHead$[ebp], 0

; 178  : 
; 179  : 	//查找对象
; 180  : 	m_UserTaskEntryMap.Lookup(dwUserID,pUserTaskEntryHead);

  00054	8d 45 f4	 lea	 eax, DWORD PTR _pUserTaskEntryHead$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 20	 add	 ecx, 32			; 00000020H
  00062	e8 00 00 00 00	 call	 ?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Lookup
$LN2@SetUserTas:

; 181  : 
; 182  : 	//查找链表尾部
; 183  : 	while(pUserTaskEntryHead!=NULL && pUserTaskEntryHead->pNextTaskEntry)

  00067	83 7d f4 00	 cmp	 DWORD PTR _pUserTaskEntryHead$[ebp], 0
  0006b	74 14		 je	 SHORT $LN3@SetUserTas
  0006d	8b 45 f4	 mov	 eax, DWORD PTR _pUserTaskEntryHead$[ebp]
  00070	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00074	74 0b		 je	 SHORT $LN3@SetUserTas

; 184  : 	{
; 185  : 		pUserTaskEntryHead=pUserTaskEntryHead->pNextTaskEntry;

  00076	8b 45 f4	 mov	 eax, DWORD PTR _pUserTaskEntryHead$[ebp]
  00079	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007c	89 4d f4	 mov	 DWORD PTR _pUserTaskEntryHead$[ebp], ecx

; 186  : 	}

  0007f	eb e6		 jmp	 SHORT $LN2@SetUserTas
$LN3@SetUserTas:

; 187  : 
; 188  : 	//变量定义
; 189  :     for(WORD i=0;i<wTaskCount;i++)

  00081	33 c0		 xor	 eax, eax
  00083	66 89 45 f0	 mov	 WORD PTR _i$1[ebp], ax
  00087	eb 0c		 jmp	 SHORT $LN6@SetUserTas
$LN4@SetUserTas:
  00089	66 8b 45 f0	 mov	 ax, WORD PTR _i$1[ebp]
  0008d	66 83 c0 01	 add	 ax, 1
  00091	66 89 45 f0	 mov	 WORD PTR _i$1[ebp], ax
$LN6@SetUserTas:
  00095	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  00099	0f b7 4d 10	 movzx	 ecx, WORD PTR _wTaskCount$[ebp]
  0009d	3b c1		 cmp	 eax, ecx
  0009f	0f 8d cd 00 00
	00		 jge	 $LN1@SetUserTas

; 190  : 	{
; 191  : 		//创建对象
; 192  : 		pUserTaskEntry=CreateUserTaskEntry();

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	e8 00 00 00 00	 call	 ?CreateUserTaskEntry@CUserTaskManager@@IAEPAUtagUserTaskEntry@@XZ ; CUserTaskManager::CreateUserTaskEntry
  000ad	89 45 f8	 mov	 DWORD PTR _pUserTaskEntry$[ebp], eax

; 193  : 		if(pUserTaskEntry==NULL) break;

  000b0	83 7d f8 00	 cmp	 DWORD PTR _pUserTaskEntry$[ebp], 0
  000b4	75 05		 jne	 SHORT $LN9@SetUserTas
  000b6	e9 b7 00 00 00	 jmp	 $LN1@SetUserTas
$LN9@SetUserTas:

; 194  : 
; 195  : 		//设置对象
; 196  : 		pUserTaskEntry->cbTaskStatus=UserTaskInfo[i].cbTaskStatus;		

  000bb	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  000bf	c1 e0 04	 shl	 eax, 4
  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _pUserTaskEntry$[ebp]
  000c5	8b 55 0c	 mov	 edx, DWORD PTR _UserTaskInfo$[ebp]
  000c8	8a 44 02 02	 mov	 al, BYTE PTR [edx+eax+2]
  000cc	88 01		 mov	 BYTE PTR [ecx], al

; 197  : 		pUserTaskEntry->wTaskProgress=UserTaskInfo[i].wTaskProgress;

  000ce	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  000d2	c1 e0 04	 shl	 eax, 4
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _pUserTaskEntry$[ebp]
  000d8	8b 55 0c	 mov	 edx, DWORD PTR _UserTaskInfo$[ebp]
  000db	66 8b 44 02 04	 mov	 ax, WORD PTR [edx+eax+4]
  000e0	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 198  : 		pUserTaskEntry->dwResidueTime=UserTaskInfo[i].dwResidueTime;

  000e4	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  000e8	c1 e0 04	 shl	 eax, 4
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _pUserTaskEntry$[ebp]
  000ee	8b 55 0c	 mov	 edx, DWORD PTR _UserTaskInfo$[ebp]
  000f1	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  000f5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 199  : 		pUserTaskEntry->dwLastUpdateTime=UserTaskInfo[i].dwLastUpdateTime;

  000f8	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  000fc	c1 e0 04	 shl	 eax, 4
  000ff	8b 4d f8	 mov	 ecx, DWORD PTR _pUserTaskEntry$[ebp]
  00102	8b 55 0c	 mov	 edx, DWORD PTR _UserTaskInfo$[ebp]
  00105	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  00109	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 200  : 
; 201  : 		//查找参数
; 202  : 		m_TaskParameterMap.Lookup(UserTaskInfo[i].wTaskID,pUserTaskEntry->pTaskParameter);

  0010c	8b 45 f8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  0010f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00112	50		 push	 eax
  00113	0f b7 4d f0	 movzx	 ecx, WORD PTR _i$1[ebp]
  00117	c1 e1 04	 shl	 ecx, 4
  0011a	8b 55 0c	 mov	 edx, DWORD PTR _UserTaskInfo$[ebp]
  0011d	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00121	50		 push	 eax
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	83 c1 04	 add	 ecx, 4
  00128	e8 00 00 00 00	 call	 ?Lookup@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Lookup

; 203  : 
; 204  : 		//链接任务
; 205  : 		if(pUserTaskEntryHead!=NULL)

  0012d	83 7d f4 00	 cmp	 DWORD PTR _pUserTaskEntryHead$[ebp], 0
  00131	74 12		 je	 SHORT $LN10@SetUserTas

; 206  : 		{
; 207  : 			pUserTaskEntryHead->pNextTaskEntry=pUserTaskEntry;

  00133	8b 45 f4	 mov	 eax, DWORD PTR _pUserTaskEntryHead$[ebp]
  00136	8b 4d f8	 mov	 ecx, DWORD PTR _pUserTaskEntry$[ebp]
  00139	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 208  : 			pUserTaskEntryHead=pUserTaskEntryHead->pNextTaskEntry;

  0013c	8b 45 f4	 mov	 eax, DWORD PTR _pUserTaskEntryHead$[ebp]
  0013f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00142	89 4d f4	 mov	 DWORD PTR _pUserTaskEntryHead$[ebp], ecx
$LN10@SetUserTas:

; 209  : 		}
; 210  : 
; 211  : 		//设置链表头
; 212  : 		if(i==0 && pUserTaskEntryHead==NULL) 

  00145	0f b7 45 f0	 movzx	 eax, WORD PTR _i$1[ebp]
  00149	85 c0		 test	 eax, eax
  0014b	75 20		 jne	 SHORT $LN11@SetUserTas
  0014d	83 7d f4 00	 cmp	 DWORD PTR _pUserTaskEntryHead$[ebp], 0
  00151	75 1a		 jne	 SHORT $LN11@SetUserTas

; 213  : 		{
; 214  : 			pUserTaskEntryHead=pUserTaskEntry;

  00153	8b 45 f8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00156	89 45 f4	 mov	 DWORD PTR _pUserTaskEntryHead$[ebp], eax

; 215  : 			m_UserTaskEntryMap[dwUserID]=pUserTaskEntryHead;

  00159	8b 45 08	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  0015c	50		 push	 eax
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	83 c1 20	 add	 ecx, 32			; 00000020H
  00163	e8 00 00 00 00	 call	 ??A?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEAAPAUtagUserTaskEntry@@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::operator[]
  00168	8b 4d f4	 mov	 ecx, DWORD PTR _pUserTaskEntryHead$[ebp]
  0016b	89 08		 mov	 DWORD PTR [eax], ecx
$LN11@SetUserTas:

; 216  : 		}
; 217  : 
; 218  : 	}	

  0016d	e9 17 ff ff ff	 jmp	 $LN4@SetUserTas
$LN1@SetUserTas:

; 219  : 
; 220  : 	return;
; 221  : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 0c 00	 ret	 12			; 0000000cH
?SetUserTaskInfo@CUserTaskManager@@UAEXKQAUtagUserTaskInfo@@G@Z ENDP ; CUserTaskManager::SetUserTaskInfo
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@KE@Z
_TEXT	SEGMENT
_pUserTaskEntryLink$ = -16				; size = 4
_pUserTaskEntryHead$ = -12				; size = 4
_pUserTaskEntry$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
_cbTaskStatus$ = 12					; size = 1
?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@KE@Z PROC ; CUserTaskManager::GetUserTaskEntry, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 255  : 	//变量定义
; 256  : 	tagUserTaskEntry * pUserTaskEntry=NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 257  : 	m_UserTaskEntryMap.Lookup(dwUserID,pUserTaskEntry);

  00013	8d 45 f8	 lea	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 20	 add	 ecx, 32			; 00000020H
  00021	e8 00 00 00 00	 call	 ?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Lookup

; 258  : 	if(pUserTaskEntry==NULL) return NULL;

  00026	83 7d f8 00	 cmp	 DWORD PTR _pUserTaskEntry$[ebp], 0
  0002a	75 04		 jne	 SHORT $LN4@GetUserTas
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 60		 jmp	 SHORT $LN1@GetUserTas
$LN4@GetUserTas:

; 259  : 
; 260  : 	//变量定义
; 261  : 	tagUserTaskEntry * pUserTaskEntryHead=NULL;

  00030	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntryHead$[ebp], 0

; 262  : 	tagUserTaskEntry * pUserTaskEntryLink=NULL;

  00037	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntryLink$[ebp], 0
$LN2@GetUserTas:

; 263  : 
; 264  : 	//遍历链表
; 265  : 	while(pUserTaskEntry!=NULL)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _pUserTaskEntry$[ebp], 0
  00042	74 49		 je	 SHORT $LN3@GetUserTas

; 266  : 	{
; 267  : 		if(pUserTaskEntry->cbTaskStatus==cbTaskStatus)

  00044	8b 45 f8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00047	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0004a	0f b6 55 0c	 movzx	 edx, BYTE PTR _cbTaskStatus$[ebp]
  0004e	3b ca		 cmp	 ecx, edx
  00050	75 30		 jne	 SHORT $LN5@GetUserTas

; 268  : 		{
; 269  : 			if(pUserTaskEntryHead==NULL) 

  00052	83 7d f4 00	 cmp	 DWORD PTR _pUserTaskEntryHead$[ebp], 0
  00056	75 0e		 jne	 SHORT $LN6@GetUserTas

; 270  : 			{
; 271  : 				pUserTaskEntryHead=pUserTaskEntry;

  00058	8b 45 f8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  0005b	89 45 f4	 mov	 DWORD PTR _pUserTaskEntryHead$[ebp], eax

; 272  : 				pUserTaskEntryLink=pUserTaskEntryHead;

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _pUserTaskEntryHead$[ebp]
  00061	89 45 f0	 mov	 DWORD PTR _pUserTaskEntryLink$[ebp], eax

; 273  : 			}
; 274  : 			else

  00064	eb 12		 jmp	 SHORT $LN7@GetUserTas
$LN6@GetUserTas:

; 275  : 			{
; 276  : 				pUserTaskEntryLink->pNextStatusEntry=pUserTaskEntry;

  00066	8b 45 f0	 mov	 eax, DWORD PTR _pUserTaskEntryLink$[ebp]
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _pUserTaskEntry$[ebp]
  0006c	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 277  : 				pUserTaskEntryLink=pUserTaskEntryLink->pNextStatusEntry;				

  0006f	8b 45 f0	 mov	 eax, DWORD PTR _pUserTaskEntryLink$[ebp]
  00072	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00075	89 4d f0	 mov	 DWORD PTR _pUserTaskEntryLink$[ebp], ecx
$LN7@GetUserTas:

; 278  : 			}
; 279  : 
; 280  : 			pUserTaskEntryLink->pNextStatusEntry=NULL;

  00078	8b 45 f0	 mov	 eax, DWORD PTR _pUserTaskEntryLink$[ebp]
  0007b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN5@GetUserTas:

; 281  : 		}	
; 282  : 
; 283  : 		pUserTaskEntry=pUserTaskEntry->pNextTaskEntry;

  00082	8b 45 f8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00085	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00088	89 4d f8	 mov	 DWORD PTR _pUserTaskEntry$[ebp], ecx

; 284  : 	}

  0008b	eb b1		 jmp	 SHORT $LN2@GetUserTas
$LN3@GetUserTas:

; 285  : 
; 286  : 	return pUserTaskEntryHead;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _pUserTaskEntryHead$[ebp]
$LN1@GetUserTas:

; 287  : }

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@KE@Z ENDP ; CUserTaskManager::GetUserTaskEntry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@K@Z
_TEXT	SEGMENT
_pUserTaskEntry$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@K@Z PROC ; CUserTaskManager::GetUserTaskEntry, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 245  : 	//变量定义
; 246  : 	tagUserTaskEntry * pUserTaskEntry=NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 247  : 	m_UserTaskEntryMap.Lookup(dwUserID,pUserTaskEntry);

  00013	8d 45 f8	 lea	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 20	 add	 ecx, 32			; 00000020H
  00021	e8 00 00 00 00	 call	 ?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Lookup

; 248  : 
; 249  : 	return pUserTaskEntry;

  00026	8b 45 f8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]

; 250  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetUserTaskEntry@CUserTaskManager@@UAEPAUtagUserTaskEntry@@K@Z ENDP ; CUserTaskManager::GetUserTaskEntry
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?RemoveUserTask@CUserTaskManager@@UAEXK@Z
_TEXT	SEGMENT
_pUserTaskEntry$ = -8					; size = 4
_this$ = -4						; size = 4
_dwUserID$ = 8						; size = 4
?RemoveUserTask@CUserTaskManager@@UAEXK@Z PROC		; CUserTaskManager::RemoveUserTask, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  : 	//查找对象
; 227  : 	tagUserTaskEntry * pUserTaskEntry=NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 228  : 	if(m_UserTaskEntryMap.Lookup(dwUserID,pUserTaskEntry)==TRUE)

  00013	8d 45 f8	 lea	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _dwUserID$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 20	 add	 ecx, 32			; 00000020H
  00021	e8 00 00 00 00	 call	 ?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Lookup
  00026	83 f8 01	 cmp	 eax, 1
  00029	75 2f		 jne	 SHORT $LN1@RemoveUser
$LN2@RemoveUser:

; 229  : 	{
; 230  : 		//添加到缓冲
; 231  : 		while(pUserTaskEntry!=NULL)

  0002b	83 7d f8 00	 cmp	 DWORD PTR _pUserTaskEntry$[ebp], 0
  0002f	74 1a		 je	 SHORT $LN3@RemoveUser

; 232  : 		{						
; 233  : 			m_UserTaskEntryBuffer.Add(pUserTaskEntry);

  00031	8d 45 f8	 lea	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 50	 add	 ecx, 80			; 00000050H
  0003b	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEHABQAUtagUserTaskEntry@@@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::Add

; 234  : 			pUserTaskEntry=pUserTaskEntry->pNextTaskEntry;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00043	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00046	89 4d f8	 mov	 DWORD PTR _pUserTaskEntry$[ebp], ecx

; 235  : 		}

  00049	eb e0		 jmp	 SHORT $LN2@RemoveUser
$LN3@RemoveUser:

; 236  : 
; 237  : 		//移除对象
; 238  : 		m_UserTaskEntryMap.RemoveKey(dwUserID);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _dwUserID$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 20	 add	 ecx, 32			; 00000020H
  00055	e8 00 00 00 00	 call	 ?RemoveKey@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEHK@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveKey
$LN1@RemoveUser:

; 239  : 	}
; 240  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?RemoveUserTask@CUserTaskManager@@UAEXK@Z ENDP		; CUserTaskManager::RemoveUserTask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?GetTaskParameterCount@CUserTaskManager@@UAEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTaskParameterCount@CUserTaskManager@@UAEGXZ PROC	; CUserTaskManager::GetTaskParameterCount, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 	return (WORD)m_TaskParameterMap.GetCount();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	83 c1 04	 add	 ecx, 4
  00012	e8 00 00 00 00	 call	 ?GetCount@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetCount

; 121  : }

  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5b		 pop	 ebx
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?GetTaskParameterCount@CUserTaskManager@@UAEGXZ ENDP	; CUserTaskManager::GetTaskParameterCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z
_TEXT	SEGMENT
tv161 = -108						; size = 4
$T2 = -104						; size = 4
$T3 = -100						; size = 4
_nIndex$4 = -32						; size = 4
_pTaskParameter$5 = -28					; size = 4
_i$6 = -24						; size = 2
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_TaskParameter$ = 8					; size = 4
_wPatemterCount$ = 12					; size = 2
?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z PROC ; CUserTaskManager::AddTaskParameter, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 	//参数校验
; 69   : 	if(wPatemterCount==0 || TaskParameter==NULL) return false;

  0002f	0f b7 45 0c	 movzx	 eax, WORD PTR _wPatemterCount$[ebp]
  00033	85 c0		 test	 eax, eax
  00035	74 06		 je	 SHORT $LN9@AddTaskPar
  00037	83 7d 08 00	 cmp	 DWORD PTR _TaskParameter$[ebp], 0
  0003b	75 07		 jne	 SHORT $LN8@AddTaskPar
$LN9@AddTaskPar:
  0003d	32 c0		 xor	 al, al
  0003f	e9 75 01 00 00	 jmp	 $LN15@AddTaskPar
$LN8@AddTaskPar:

; 70   : 
; 71   : 	//变量定义
; 72   :     for(WORD i=0;i<wPatemterCount;i++)

  00044	33 c0		 xor	 eax, eax
  00046	66 89 45 e8	 mov	 WORD PTR _i$6[ebp], ax
  0004a	eb 0c		 jmp	 SHORT $LN4@AddTaskPar
$LN2@AddTaskPar:
  0004c	66 8b 45 e8	 mov	 ax, WORD PTR _i$6[ebp]
  00050	66 83 c0 01	 add	 ax, 1
  00054	66 89 45 e8	 mov	 WORD PTR _i$6[ebp], ax
$LN4@AddTaskPar:
  00058	0f b7 45 0c	 movzx	 eax, WORD PTR _wPatemterCount$[ebp]
  0005c	0f b7 4d e8	 movzx	 ecx, WORD PTR _i$6[ebp]
  00060	3b c8		 cmp	 ecx, eax
  00062	0f 8d 4f 01 00
	00		 jge	 $LN3@AddTaskPar

; 73   : 	{
; 74   : 		//变量定义
; 75   : 		tagTaskParameter * pTaskParameter=NULL;

  00068	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pTaskParameter$5[ebp], 0

; 76   : 
; 77   : 		//查找现存
; 78   : 		if(m_TaskParameterBuffer.GetCount()>0)

  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00075	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QBEHXZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::GetCount
  0007a	85 c0		 test	 eax, eax
  0007c	7e 74		 jle	 SHORT $LN10@AddTaskPar

; 79   : 		{
; 80   : 			//查找任务
; 81   : 			for(INT_PTR nIndex=0;nIndex<m_TaskParameterBuffer.GetCount();nIndex++)

  0007e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nIndex$4[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN7@AddTaskPar
$LN5@AddTaskPar:
  00087	8b 45 e0	 mov	 eax, DWORD PTR _nIndex$4[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 e0	 mov	 DWORD PTR _nIndex$4[ebp], eax
$LN7@AddTaskPar:
  00090	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00096	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QBEHXZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::GetCount
  0009b	39 45 e0	 cmp	 DWORD PTR _nIndex$4[ebp], eax
  0009e	7d 52		 jge	 SHORT $LN10@AddTaskPar

; 82   : 			{
; 83   : 				if(m_TaskParameterBuffer[nIndex]->wTaskID==TaskParameter[i].wTaskID)

  000a0	0f b7 45 e8	 movzx	 eax, WORD PTR _i$6[ebp]
  000a4	69 c8 ad 01 00
	00		 imul	 ecx, eax, 429
  000aa	8b 55 08	 mov	 edx, DWORD PTR _TaskParameter$[ebp]
  000ad	0f b7 34 0a	 movzx	 esi, WORD PTR [edx+ecx]
  000b1	8b 45 e0	 mov	 eax, DWORD PTR _nIndex$4[ebp]
  000b4	50		 push	 eax
  000b5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	83 c1 3c	 add	 ecx, 60			; 0000003cH
  000bb	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::operator[]
  000c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c2	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000c5	3b d6		 cmp	 edx, esi
  000c7	75 27		 jne	 SHORT $LN11@AddTaskPar

; 84   : 				{
; 85   : 					pTaskParameter=m_TaskParameterBuffer[nIndex];

  000c9	8b 45 e0	 mov	 eax, DWORD PTR _nIndex$4[ebp]
  000cc	50		 push	 eax
  000cd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	83 c1 3c	 add	 ecx, 60			; 0000003cH
  000d3	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::operator[]
  000d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000da	89 4d e4	 mov	 DWORD PTR _pTaskParameter$5[ebp], ecx

; 86   : 					m_TaskParameterBuffer.RemoveAt(nIndex);

  000dd	6a 01		 push	 1
  000df	8b 45 e0	 mov	 eax, DWORD PTR _nIndex$4[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	83 c1 3c	 add	 ecx, 60			; 0000003cH
  000e9	e8 00 00 00 00	 call	 ?RemoveAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHH@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAt

; 87   : 					break;

  000ee	eb 02		 jmp	 SHORT $LN10@AddTaskPar
$LN11@AddTaskPar:

; 88   : 				}
; 89   : 			}			

  000f0	eb 95		 jmp	 SHORT $LN5@AddTaskPar
$LN10@AddTaskPar:

; 90   : 		}
; 91   : 
; 92   : 		//创建对象
; 93   : 		if(pTaskParameter==NULL)

  000f2	83 7d e4 00	 cmp	 DWORD PTR _pTaskParameter$5[ebp], 0
  000f6	75 79		 jne	 SHORT $LN12@AddTaskPar

; 94   : 		{
; 95   : 			try

  000f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 96   : 			{
; 97   : 				pTaskParameter = new tagTaskParameter;

  000ff	68 ad 01 00 00	 push	 429			; 000001adH
  00104	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00109	83 c4 04	 add	 esp, 4
  0010c	89 45 94	 mov	 DWORD PTR tv161[ebp], eax
  0010f	8b 45 94	 mov	 eax, DWORD PTR tv161[ebp]
  00112	89 45 9c	 mov	 DWORD PTR $T3[ebp], eax
  00115	8b 4d 9c	 mov	 ecx, DWORD PTR $T3[ebp]
  00118	89 4d e4	 mov	 DWORD PTR _pTaskParameter$5[ebp], ecx

; 98   : 				if(pTaskParameter==NULL) throw(TEXT("内存不足！"));

  0011b	83 7d e4 00	 cmp	 DWORD PTR _pTaskParameter$5[ebp], 0
  0011f	75 15		 jne	 SHORT $LN14@AddTaskPar
  00121	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_C@_0L@MJNGCNCH@?D?Z?$LE?f?$LC?$LL?W?c?$KD?$KB@
  00128	68 00 00 00 00	 push	 OFFSET __TI2PAD
  0012d	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN14@AddTaskPar:

; 99   : 			}

  00136	eb 29		 jmp	 SHORT $LN17@AddTaskPar
__catch$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z$0:

; 100  : 			catch(...)
; 101  : 			{
; 102  : 				ASSERT(FALSE);

  00138	33 c0		 xor	 eax, eax
  0013a	75 19		 jne	 SHORT $LN16@AddTaskPar
  0013c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z@4JA
  00142	83 c1 23	 add	 ecx, 35			; 00000023H
  00145	51		 push	 ecx
  00146	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0014b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00150	85 c0		 test	 eax, eax
  00152	74 01		 je	 SHORT $LN16@AddTaskPar
  00154	cc		 int	 3
$LN16@AddTaskPar:

; 103  : 				break;

  00155	b8 00 00 00 00	 mov	 eax, $LN20@AddTaskPar
  0015a	c3		 ret	 0

; 104  : 			}

  0015b	b8 00 00 00 00	 mov	 eax, $LN22@AddTaskPar
  00160	c3		 ret	 0
$LN17@AddTaskPar:
  00161	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00168	eb 07		 jmp	 SHORT $LN12@AddTaskPar
$LN22@AddTaskPar:
  0016a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN12@AddTaskPar:

; 105  : 		}
; 106  : 
; 107  : 		//拷贝数据
; 108  : 		CopyMemory(pTaskParameter,&TaskParameter[i],sizeof(tagTaskParameter));

  00171	eb 09		 jmp	 SHORT $LN19@AddTaskPar
$LN20@AddTaskPar:
  00173	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 103  : 				break;

  0017a	eb 3b		 jmp	 SHORT $LN3@AddTaskPar
$LN19@AddTaskPar:

; 105  : 		}
; 106  : 
; 107  : 		//拷贝数据
; 108  : 		CopyMemory(pTaskParameter,&TaskParameter[i],sizeof(tagTaskParameter));

  0017c	68 ad 01 00 00	 push	 429			; 000001adH
  00181	0f b7 45 e8	 movzx	 eax, WORD PTR _i$6[ebp]
  00185	69 c8 ad 01 00
	00		 imul	 ecx, eax, 429
  0018b	03 4d 08	 add	 ecx, DWORD PTR _TaskParameter$[ebp]
  0018e	51		 push	 ecx
  0018f	8b 55 e4	 mov	 edx, DWORD PTR _pTaskParameter$5[ebp]
  00192	52		 push	 edx
  00193	e8 00 00 00 00	 call	 _memcpy
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 
; 110  : 		//保存任务
; 111  : 		m_TaskParameterMap[pTaskParameter->wTaskID] = pTaskParameter;		

  0019b	8b 45 e4	 mov	 eax, DWORD PTR _pTaskParameter$5[ebp]
  0019e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001a1	51		 push	 ecx
  001a2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001a5	83 c1 04	 add	 ecx, 4
  001a8	e8 00 00 00 00	 call	 ??A?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEAAPAUtagTaskParameter@@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::operator[]
  001ad	8b 55 e4	 mov	 edx, DWORD PTR _pTaskParameter$5[ebp]
  001b0	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 	}

  001b2	e9 95 fe ff ff	 jmp	 $LN2@AddTaskPar
$LN3@AddTaskPar:

; 113  : 
; 114  : 	return true;

  001b7	b0 01		 mov	 al, 1
$LN15@AddTaskPar:

; 115  : }

  001b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c3	59		 pop	 ecx
  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddTaskParameter@CUserTaskManager@@UAE_NQAUtagTaskParameter@@G@Z ENDP ; CUserTaskManager::AddTaskParameter
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?EnumTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@AAPAU__POSITION@@@Z
_TEXT	SEGMENT
_pTaskParameter$ = -12					; size = 4
_wKey$ = -8						; size = 2
_this$ = -4						; size = 4
_Position$ = 8						; size = 4
?EnumTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@AAPAU__POSITION@@@Z PROC ; CUserTaskManager::EnumTaskParameter, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 156  : 	//参数调整
; 157  : 	if(Position==NULL) Position=m_TaskParameterMap.GetStartPosition();

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Position$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	75 10		 jne	 SHORT $LN2@EnumTaskPa
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 04	 add	 ecx, 4
  0001a	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetStartPosition
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _Position$[ebp]
  00022	89 01		 mov	 DWORD PTR [ecx], eax
$LN2@EnumTaskPa:

; 158  : 	if(Position==NULL) return NULL;

  00024	8b 45 08	 mov	 eax, DWORD PTR _Position$[ebp]
  00027	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002a	75 04		 jne	 SHORT $LN3@EnumTaskPa
  0002c	33 c0		 xor	 eax, eax
  0002e	eb 27		 jmp	 SHORT $LN1@EnumTaskPa
$LN3@EnumTaskPa:

; 159  : 
; 160  : 	//变量定义
; 161  : 	WORD wKey=0;

  00030	33 c0		 xor	 eax, eax
  00032	66 89 45 f8	 mov	 WORD PTR _wKey$[ebp], ax

; 162  : 	tagTaskParameter * pTaskParameter=NULL;

  00036	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pTaskParameter$[ebp], 0

; 163  : 	m_TaskParameterMap.GetNextAssoc(Position,wKey,pTaskParameter);		

  0003d	8d 45 f4	 lea	 eax, DWORD PTR _pTaskParameter$[ebp]
  00040	50		 push	 eax
  00041	8d 4d f8	 lea	 ecx, DWORD PTR _wKey$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _Position$[ebp]
  00048	52		 push	 edx
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetNextAssoc

; 164  : 
; 165  : 	return pTaskParameter;

  00054	8b 45 f4	 mov	 eax, DWORD PTR _pTaskParameter$[ebp]
$LN1@EnumTaskPa:

; 166  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?EnumTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@AAPAU__POSITION@@@Z ENDP ; CUserTaskManager::EnumTaskParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?SearchTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@G@Z
_TEXT	SEGMENT
_pTaskParameter$ = -8					; size = 4
_this$ = -4						; size = 4
_wTaskID$ = 8						; size = 2
?SearchTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@G@Z PROC ; CUserTaskManager::SearchTaskParameter, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  : 	//变量定义
; 147  : 	tagTaskParameter * pTaskParameter=NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pTaskParameter$[ebp], 0

; 148  : 	m_TaskParameterMap.Lookup(wTaskID,pTaskParameter);

  00013	8d 45 f8	 lea	 eax, DWORD PTR _pTaskParameter$[ebp]
  00016	50		 push	 eax
  00017	0f b7 4d 08	 movzx	 ecx, WORD PTR _wTaskID$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 04	 add	 ecx, 4
  00022	e8 00 00 00 00	 call	 ?Lookup@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Lookup

; 149  : 
; 150  : 	return pTaskParameter;

  00027	8b 45 f8	 mov	 eax, DWORD PTR _pTaskParameter$[ebp]

; 151  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?SearchTaskParameter@CUserTaskManager@@UAEPAUtagTaskParameter@@G@Z ENDP ; CUserTaskManager::SearchTaskParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?RemoveTaskParameter@CUserTaskManager@@UAEXXZ
_TEXT	SEGMENT
_pTaskParameter$ = -16					; size = 4
_Position$ = -12					; size = 4
_wKey$ = -8						; size = 2
_this$ = -4						; size = 4
?RemoveTaskParameter@CUserTaskManager@@UAEXXZ PROC	; CUserTaskManager::RemoveTaskParameter, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 126  : 	//变量定义
; 127  : 	WORD wKey=0;

  0000c	33 c0		 xor	 eax, eax
  0000e	66 89 45 f8	 mov	 WORD PTR _wKey$[ebp], ax

; 128  : 	POSITION Position=NULL;

  00012	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Position$[ebp], 0

; 129  : 
; 130  : 	//移除参数	
; 131  : 	tagTaskParameter * pTaskParameter=NULL;

  00019	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pTaskParameter$[ebp], 0

; 132  : 	Position=m_TaskParameterMap.GetStartPosition();

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 04	 add	 ecx, 4
  00026	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetStartPosition
  0002b	89 45 f4	 mov	 DWORD PTR _Position$[ebp], eax
$LN2@RemoveTask:

; 133  : 	while (Position!=NULL)

  0002e	83 7d f4 00	 cmp	 DWORD PTR _Position$[ebp], 0
  00032	74 28		 je	 SHORT $LN3@RemoveTask

; 134  : 	{
; 135  : 		m_TaskParameterMap.GetNextAssoc(Position,wKey,pTaskParameter);

  00034	8d 45 f0	 lea	 eax, DWORD PTR _pTaskParameter$[ebp]
  00037	50		 push	 eax
  00038	8d 4d f8	 lea	 ecx, DWORD PTR _wKey$[ebp]
  0003b	51		 push	 ecx
  0003c	8d 55 f4	 lea	 edx, DWORD PTR _Position$[ebp]
  0003f	52		 push	 edx
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetNextAssoc

; 136  : 		m_TaskParameterBuffer.Add(pTaskParameter);

  0004b	8d 45 f0	 lea	 eax, DWORD PTR _pTaskParameter$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00055	e8 00 00 00 00	 call	 ?Add@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEHABQAUtagTaskParameter@@@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::Add

; 137  : 	}

  0005a	eb d2		 jmp	 SHORT $LN2@RemoveTask
$LN3@RemoveTask:

; 138  : 
; 139  : 	//移除严肃
; 140  : 	m_TaskParameterMap.RemoveAll();

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 04	 add	 ecx, 4
  00062	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::RemoveAll

; 141  : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?RemoveTaskParameter@CUserTaskManager@@UAEXXZ ENDP	; CUserTaskManager::RemoveTaskParameter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?QueryInterface@CUserTaskManager@@UAEPAXABU_GUID@@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Guid$ = 8						; size = 4
_dwQueryVer$ = 12					; size = 4
?QueryInterface@CUserTaskManager@@UAEPAXABU_GUID@@K@Z PROC ; CUserTaskManager::QueryInterface, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 60   : 	QUERYINTERFACE(IUserTaskManagerSink,Guid,dwQueryVer);

  0000c	68 00 00 00 00	 push	 OFFSET ?IID_IUserTaskManagerSink@@3U_GUID@@B
  00011	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _==
  0001a	83 c4 08	 add	 esp, 8
  0001d	0f b6 c8	 movzx	 ecx, al
  00020	85 c9		 test	 ecx, ecx
  00022	74 1d		 je	 SHORT $LN2@QueryInter
  00024	68 00 01 01 06	 push	 100729088		; 06010100H
  00029	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00032	83 c4 08	 add	 esp, 8
  00035	0f b6 c8	 movzx	 ecx, al
  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN2@QueryInter
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	eb 37		 jmp	 SHORT $LN1@QueryInter
$LN2@QueryInter:

; 61   : 	QUERYINTERFACE_IUNKNOWNEX(IUserTaskManagerSink,Guid,dwQueryVer);

  00041	68 00 00 00 00	 push	 OFFSET ?IID_IUnknownEx@@3U_GUID@@B
  00046	8b 45 08	 mov	 eax, DWORD PTR _Guid$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _==
  0004f	83 c4 08	 add	 esp, 8
  00052	0f b6 c8	 movzx	 ecx, al
  00055	85 c9		 test	 ecx, ecx
  00057	74 1d		 je	 SHORT $LN3@QueryInter
  00059	68 00 01 01 06	 push	 100729088		; 06010100H
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?InterfaceVersionCompare@@YA_NKK@Z ; InterfaceVersionCompare
  00067	83 c4 08	 add	 esp, 8
  0006a	0f b6 c8	 movzx	 ecx, al
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 05		 je	 SHORT $LN3@QueryInter
  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	eb 02		 jmp	 SHORT $LN1@QueryInter
$LN3@QueryInter:

; 62   : 	return NULL;

  00076	33 c0		 xor	 eax, eax
$LN1@QueryInter:

; 63   : }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?QueryInterface@CUserTaskManager@@UAEPAXABU_GUID@@K@Z ENDP ; CUserTaskManager::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.h
;	COMDAT ?Release@CUserTaskManager@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@CUserTaskManager@@UAEXXZ PROC			; CUserTaskManager::Release, COMDAT
; _this$ = ecx

; 40   : 	virtual VOID Release() { return; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?Release@CUserTaskManager@@UAEXXZ ENDP			; CUserTaskManager::Release
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ??1CUserTaskManager@@UAE@XZ
_TEXT	SEGMENT
tv222 = -132						; size = 4
tv221 = -132						; size = 4
$T2 = -128						; size = 4
$T3 = -124						; size = 4
$T4 = -120						; size = 4
$T5 = -116						; size = 4
_pUserTaskEntry$ = -48					; size = 4
_pTaskParameter$ = -44					; size = 4
_Position$ = -40					; size = 4
_dwKey$ = -36						; size = 4
_wKey$ = -32						; size = 2
_nIndex$6 = -28						; size = 4
_nIndex$7 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
??1CUserTaskManager@@UAE@XZ PROC			; CUserTaskManager::~CUserTaskManager, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CUserTaskManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 74	 sub	 esp, 116		; 00000074H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CUserTaskManager@@6B@
  00038	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 15   : 	//删除缓冲
; 16   : 	for(INT_PTR nIndex=0;nIndex<m_UserTaskEntryBuffer.GetCount();nIndex++)

  0003f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nIndex$7[ebp], 0
  00046	eb 09		 jmp	 SHORT $LN4@CUserTaskM
$LN2@CUserTaskM:
  00048	8b 45 e8	 mov	 eax, DWORD PTR _nIndex$7[ebp]
  0004b	83 c0 01	 add	 eax, 1
  0004e	89 45 e8	 mov	 DWORD PTR _nIndex$7[ebp], eax
$LN4@CUserTaskM:
  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 50	 add	 ecx, 80			; 00000050H
  00057	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QBEHXZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::GetCount
  0005c	39 45 e8	 cmp	 DWORD PTR _nIndex$7[ebp], eax
  0005f	0f 8d 81 00 00
	00		 jge	 $LN3@CUserTaskM

; 17   : 	{
; 18   : 		SafeDelete(m_UserTaskEntryBuffer[nIndex]);

  00065	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00069	8b 45 e8	 mov	 eax, DWORD PTR _nIndex$7[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	83 c1 50	 add	 ecx, 80			; 00000050H
  00073	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::operator[]
  00078	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
  0007e	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv221[ebp]
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	89 55 8c	 mov	 DWORD PTR $T5[ebp], edx
  00089	6a 18		 push	 24			; 00000018H
  0008b	8b 45 8c	 mov	 eax, DWORD PTR $T5[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00094	83 c4 08	 add	 esp, 8
  00097	eb 23		 jmp	 SHORT $LN21@CUserTaskM
__catch$??1CUserTaskManager@@UAE@XZ$0:
  00099	33 c0		 xor	 eax, eax
  0009b	75 19		 jne	 SHORT $LN17@CUserTaskM
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CUserTaskManager@@UAE@XZ@4JA
  000a3	83 c1 04	 add	 ecx, 4
  000a6	51		 push	 ecx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  000ac	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000b1	85 c0		 test	 eax, eax
  000b3	74 01		 je	 SHORT $LN17@CUserTaskM
  000b5	cc		 int	 3
$LN17@CUserTaskM:
  000b6	b8 00 00 00 00	 mov	 eax, $LN34@CUserTaskM
  000bb	c3		 ret	 0
$LN21@CUserTaskM:
  000bc	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000c3	eb 07		 jmp	 SHORT __tryend$??1CUserTaskManager@@UAE@XZ$1
$LN34@CUserTaskM:
  000c5	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
__tryend$??1CUserTaskManager@@UAE@XZ$1:
  000cc	8b 45 e8	 mov	 eax, DWORD PTR _nIndex$7[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	83 c1 50	 add	 ecx, 80			; 00000050H
  000d6	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::operator[]
  000db	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 19   : 	}

  000e1	e9 62 ff ff ff	 jmp	 $LN2@CUserTaskM
$LN3@CUserTaskM:

; 20   : 
; 21   : 	//删除缓冲
; 22   : 	for(INT_PTR nIndex=0;nIndex<m_TaskParameterBuffer.GetCount();nIndex++)

  000e6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _nIndex$6[ebp], 0
  000ed	eb 09		 jmp	 SHORT $LN7@CUserTaskM
$LN5@CUserTaskM:
  000ef	8b 45 e4	 mov	 eax, DWORD PTR _nIndex$6[ebp]
  000f2	83 c0 01	 add	 eax, 1
  000f5	89 45 e4	 mov	 DWORD PTR _nIndex$6[ebp], eax
$LN7@CUserTaskM:
  000f8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	83 c1 3c	 add	 ecx, 60			; 0000003cH
  000fe	e8 00 00 00 00	 call	 ?GetCount@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QBEHXZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::GetCount
  00103	39 45 e4	 cmp	 DWORD PTR _nIndex$6[ebp], eax
  00106	0f 8d 84 00 00
	00		 jge	 $LN6@CUserTaskM

; 23   : 	{
; 24   : 		SafeDelete(m_TaskParameterBuffer[nIndex]);

  0010c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  00110	8b 45 e4	 mov	 eax, DWORD PTR _nIndex$6[ebp]
  00113	50		 push	 eax
  00114	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0011a	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::operator[]
  0011f	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv222[ebp], eax
  00125	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv222[ebp]
  0012b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012d	89 55 88	 mov	 DWORD PTR $T4[ebp], edx
  00130	68 ad 01 00 00	 push	 429			; 000001adH
  00135	8b 45 88	 mov	 eax, DWORD PTR $T4[ebp]
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013e	83 c4 08	 add	 esp, 8
  00141	eb 23		 jmp	 SHORT $LN23@CUserTaskM
__catch$??1CUserTaskManager@@UAE@XZ$2:
  00143	33 c0		 xor	 eax, eax
  00145	75 19		 jne	 SHORT $LN18@CUserTaskM
  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CUserTaskManager@@UAE@XZ@4JA
  0014d	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00150	51		 push	 ecx
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00156	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0015b	85 c0		 test	 eax, eax
  0015d	74 01		 je	 SHORT $LN18@CUserTaskM
  0015f	cc		 int	 3
$LN18@CUserTaskM:
  00160	b8 00 00 00 00	 mov	 eax, $LN36@CUserTaskM
  00165	c3		 ret	 0
$LN23@CUserTaskM:
  00166	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  0016d	eb 07		 jmp	 SHORT __tryend$??1CUserTaskManager@@UAE@XZ$3
$LN36@CUserTaskM:
  0016f	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
__tryend$??1CUserTaskManager@@UAE@XZ$3:
  00176	8b 45 e4	 mov	 eax, DWORD PTR _nIndex$6[ebp]
  00179	50		 push	 eax
  0017a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00180	e8 00 00 00 00	 call	 ??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::operator[]
  00185	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 25   : 	}

  0018b	e9 5f ff ff ff	 jmp	 $LN5@CUserTaskM
$LN6@CUserTaskM:

; 26   : 
; 27   : 	//变量定义
; 28   : 	WORD wKey=0;

  00190	33 c0		 xor	 eax, eax
  00192	66 89 45 e0	 mov	 WORD PTR _wKey$[ebp], ax

; 29   : 	DWORD dwKey=0;

  00196	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dwKey$[ebp], 0

; 30   : 	POSITION Position=NULL;

  0019d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _Position$[ebp], 0

; 31   : 
; 32   : 	//删除参数
; 33   : 	tagTaskParameter * pTaskParameter=NULL;

  001a4	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pTaskParameter$[ebp], 0

; 34   : 	Position=m_TaskParameterMap.GetStartPosition();

  001ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ae	83 c1 04	 add	 ecx, 4
  001b1	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetStartPosition
  001b6	89 45 d8	 mov	 DWORD PTR _Position$[ebp], eax
$LN8@CUserTaskM:

; 35   : 	while (Position!=NULL)

  001b9	83 7d d8 00	 cmp	 DWORD PTR _Position$[ebp], 0
  001bd	74 70		 je	 SHORT $LN9@CUserTaskM

; 36   : 	{
; 37   : 		m_TaskParameterMap.GetNextAssoc(Position,wKey,pTaskParameter);

  001bf	8d 45 d4	 lea	 eax, DWORD PTR _pTaskParameter$[ebp]
  001c2	50		 push	 eax
  001c3	8d 4d e0	 lea	 ecx, DWORD PTR _wKey$[ebp]
  001c6	51		 push	 ecx
  001c7	8d 55 d8	 lea	 edx, DWORD PTR _Position$[ebp]
  001ca	52		 push	 edx
  001cb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	83 c1 04	 add	 ecx, 4
  001d1	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetNextAssoc

; 38   : 		SafeDelete(pTaskParameter);

  001d6	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+12], 8
  001da	8b 45 d4	 mov	 eax, DWORD PTR _pTaskParameter$[ebp]
  001dd	89 45 84	 mov	 DWORD PTR $T3[ebp], eax
  001e0	68 ad 01 00 00	 push	 429			; 000001adH
  001e5	8b 4d 84	 mov	 ecx, DWORD PTR $T3[ebp]
  001e8	51		 push	 ecx
  001e9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ee	83 c4 08	 add	 esp, 8
  001f1	eb 23		 jmp	 SHORT $LN25@CUserTaskM
__catch$??1CUserTaskManager@@UAE@XZ$4:
  001f3	33 c0		 xor	 eax, eax
  001f5	75 19		 jne	 SHORT $LN19@CUserTaskM
  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CUserTaskManager@@UAE@XZ@4JA
  001fd	83 c1 18	 add	 ecx, 24			; 00000018H
  00200	51		 push	 ecx
  00201	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00206	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0020b	85 c0		 test	 eax, eax
  0020d	74 01		 je	 SHORT $LN19@CUserTaskM
  0020f	cc		 int	 3
$LN19@CUserTaskM:
  00210	b8 00 00 00 00	 mov	 eax, $LN38@CUserTaskM
  00215	c3		 ret	 0
$LN25@CUserTaskM:
  00216	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  0021d	eb 07		 jmp	 SHORT __tryend$??1CUserTaskManager@@UAE@XZ$5
$LN38@CUserTaskM:
  0021f	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
__tryend$??1CUserTaskManager@@UAE@XZ$5:
  00226	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pTaskParameter$[ebp], 0

; 39   : 	}	

  0022d	eb 8a		 jmp	 SHORT $LN8@CUserTaskM
$LN9@CUserTaskM:

; 40   : 
; 41   : 	//删除任务	
; 42   : 	tagUserTaskEntry * pUserTaskEntry=NULL;

  0022f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 43   : 	Position=m_UserTaskEntryMap.GetStartPosition();

  00236	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00239	83 c1 20	 add	 ecx, 32			; 00000020H
  0023c	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetStartPosition
  00241	89 45 d8	 mov	 DWORD PTR _Position$[ebp], eax
$LN10@CUserTaskM:

; 44   : 	while (Position!=NULL)

  00244	83 7d d8 00	 cmp	 DWORD PTR _Position$[ebp], 0
  00248	74 6d		 je	 SHORT $LN11@CUserTaskM

; 45   : 	{
; 46   : 		m_UserTaskEntryMap.GetNextAssoc(Position,dwKey,pUserTaskEntry);

  0024a	8d 45 d0	 lea	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  0024d	50		 push	 eax
  0024e	8d 4d dc	 lea	 ecx, DWORD PTR _dwKey$[ebp]
  00251	51		 push	 ecx
  00252	8d 55 d8	 lea	 edx, DWORD PTR _Position$[ebp]
  00255	52		 push	 edx
  00256	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00259	83 c1 20	 add	 ecx, 32			; 00000020H
  0025c	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetNextAssoc

; 47   : 		SafeDelete(pUserTaskEntry);

  00261	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+12], 10 ; 0000000aH
  00265	8b 45 d0	 mov	 eax, DWORD PTR _pUserTaskEntry$[ebp]
  00268	89 45 80	 mov	 DWORD PTR $T2[ebp], eax
  0026b	6a 18		 push	 24			; 00000018H
  0026d	8b 4d 80	 mov	 ecx, DWORD PTR $T2[ebp]
  00270	51		 push	 ecx
  00271	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00276	83 c4 08	 add	 esp, 8
  00279	eb 23		 jmp	 SHORT $LN27@CUserTaskM
__catch$??1CUserTaskManager@@UAE@XZ$6:
  0027b	33 c0		 xor	 eax, eax
  0027d	75 19		 jne	 SHORT $LN20@CUserTaskM
  0027f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0???1CUserTaskManager@@UAE@XZ@4JA
  00285	83 c1 21	 add	 ecx, 33			; 00000021H
  00288	51		 push	 ecx
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@MPLMIFKH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0028e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00293	85 c0		 test	 eax, eax
  00295	74 01		 je	 SHORT $LN20@CUserTaskM
  00297	cc		 int	 3
$LN20@CUserTaskM:
  00298	b8 00 00 00 00	 mov	 eax, $LN40@CUserTaskM
  0029d	c3		 ret	 0
$LN27@CUserTaskM:
  0029e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  002a5	eb 07		 jmp	 SHORT __tryend$??1CUserTaskManager@@UAE@XZ$7
$LN40@CUserTaskM:
  002a7	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
__tryend$??1CUserTaskManager@@UAE@XZ$7:
  002ae	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pUserTaskEntry$[ebp], 0

; 48   : 	}	

  002b5	eb 8d		 jmp	 SHORT $LN10@CUserTaskM
$LN11@CUserTaskM:

; 49   : 
; 50   : 	//移除元素
; 51   : 	m_TaskParameterMap.RemoveAll();

  002b7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002ba	83 c1 04	 add	 ecx, 4
  002bd	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::RemoveAll

; 52   : 	m_UserTaskEntryMap.RemoveAll();	

  002c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002c5	83 c1 20	 add	 ecx, 32			; 00000020H
  002c8	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveAll

; 53   : 	m_TaskParameterBuffer.RemoveAll();

  002cd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002d0	83 c1 3c	 add	 ecx, 60			; 0000003cH
  002d3	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXXZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAll

; 54   : 	m_UserTaskEntryBuffer.RemoveAll();

  002d8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002db	83 c1 50	 add	 ecx, 80			; 00000050H
  002de	e8 00 00 00 00	 call	 ?RemoveAll@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXXZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAll

; 55   : }

  002e3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  002e7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002ea	83 c1 50	 add	 ecx, 80			; 00000050H
  002ed	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::~CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
  002f2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  002f6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002f9	83 c1 3c	 add	 ecx, 60			; 0000003cH
  002fc	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::~CWHArray<tagTaskParameter *,tagTaskParameter * const &>
  00301	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  00305	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00308	83 c1 20	 add	 ecx, 32			; 00000020H
  0030b	e8 00 00 00 00	 call	 ??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::~CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
  00310	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00317	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0031a	83 c1 04	 add	 ecx, 4
  0031d	e8 00 00 00 00	 call	 ??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::~CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
  00322	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00325	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0032c	59		 pop	 ecx
  0032d	5f		 pop	 edi
  0032e	5e		 pop	 esi
  0032f	5b		 pop	 ebx
  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUserTaskManager@@UAE@XZ$8:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::~CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
__unwindfunclet$??1CUserTaskManager@@UAE@XZ$9:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::~CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
__unwindfunclet$??1CUserTaskManager@@UAE@XZ$10:
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::~CWHArray<tagTaskParameter *,tagTaskParameter * const &>
__unwindfunclet$??1CUserTaskManager@@UAE@XZ$11:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 50	 add	 ecx, 80			; 00000050H
  00027	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::~CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
__ehhandler$??1CUserTaskManager@@UAE@XZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00033	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CUserTaskManager@@UAE@XZ
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CUserTaskManager@@UAE@XZ ENDP			; CUserTaskManager::~CUserTaskManager
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ??0CUserTaskManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUserTaskManager@@QAE@XZ PROC			; CUserTaskManager::CUserTaskManager, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CUserTaskManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0IUserTaskManagerSink@@QAE@XZ
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CUserTaskManager@@6B@
  0003c	6a 0a		 push	 10			; 0000000aH
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 04	 add	 ecx, 4
  00044	e8 00 00 00 00	 call	 ??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	6a 0a		 push	 10			; 0000000aH
  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 20	 add	 ecx, 32			; 00000020H
  00058	e8 00 00 00 00	 call	 ??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
  0005d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00061	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00067	e8 00 00 00 00	 call	 ??0?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAE@XZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::CWHArray<tagTaskParameter *,tagTaskParameter * const &>
  0006c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 50	 add	 ecx, 80			; 00000050H
  00076	e8 00 00 00 00	 call	 ??0?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAE@XZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
  0007b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 8    : 	//初始化表
; 9    : 	m_TaskParameterMap.InitHashTable(TASK_MAX_COUNT+1);

  0007f	6a 01		 push	 1
  00081	68 81 00 00 00	 push	 129			; 00000081H
  00086	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	83 c1 04	 add	 ecx, 4
  0008c	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXIH@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::InitHashTable

; 10   : }

  00091	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUserTaskManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::~CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
__unwindfunclet$??0CUserTaskManager@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::~CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
__unwindfunclet$??0CUserTaskManager@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::~CWHArray<tagTaskParameter *,tagTaskParameter * const &>
__unwindfunclet$??0CUserTaskManager@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 50	 add	 ecx, 80			; 00000050H
  00027	e9 00 00 00 00	 jmp	 ??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::~CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
__ehhandler$??0CUserTaskManager@@QAE@XZ:
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00030	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00033	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CUserTaskManager@@QAE@XZ
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CUserTaskManager@@QAE@XZ ENDP			; CUserTaskManager::CUserTaskManager
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAEPAXI@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::~CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAEPAXI@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXXZ PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 44		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	c1 e1 02	 shl	 ecx, 2
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?RemoveAll@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXXZ ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHH@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHH@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHABQAUtagUserTaskEntry@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHABQAUtagUserTaskEntry@@@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHABQAUtagUserTaskEntry@@@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEAAPAUtagUserTaskEntry@@H@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEHABQAUtagUserTaskEntry@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEHABQAUtagUserTaskEntry@@@Z PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEXHABQAUtagUserTaskEntry@@@Z ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAEHABQAUtagUserTaskEntry@@@Z ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QBEHXZ PROC ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QBEHXZ ENDP ; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ PROC	; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::~CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@UAE@XZ ENDP	; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::~CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAE@XZ PROC	; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@PAUtagUserTaskEntry@@ABQAU1@@@QAE@XZ ENDP	; CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>::CWHArray<tagUserTaskEntry *,tagUserTaskEntry * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAEPAXI@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::~CWHArray<tagTaskParameter *,tagTaskParameter * const &>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0e		 je	 SHORT $LN2@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAEPAXI@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?AllocMemory@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
tv78 = -92						; size = 4
tv79 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pNewData$3 = -12					; size = 4
_nGrowCount$4 = -8					; size = 4
_this$ = -4						; size = 4
_nNewCount$ = 8						; size = 4
?AllocMemory@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::AllocMemory, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : 	//效验参数
; 415  : 	ASSERT(nNewCount>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewCount$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@AllocMemor
  00012	68 9f 01 00 00	 push	 415			; 0000019fH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@AllocMemor
  00025	cc		 int	 3
$LN5@AllocMemor:

; 416  : 
; 417  : 	if (nNewCount>m_nMaxCount)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0002c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002f	0f 8e dd 00 00
	00		 jle	 $LN1@AllocMemor

; 418  : 	{
; 419  : 		//计算数目
; 420  : 		INT_PTR nGrowCount=m_nGrowCount;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003b	89 4d f8	 mov	 DWORD PTR _nGrowCount$4[ebp], ecx

; 421  : 		if (nGrowCount==0)

  0003e	83 7d f8 00	 cmp	 DWORD PTR _nGrowCount$4[ebp], 0
  00042	75 45		 jne	 SHORT $LN3@AllocMemor

; 422  : 		{
; 423  : 			nGrowCount=m_nElementCount/8;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004a	99		 cdq
  0004b	83 e2 07	 and	 edx, 7
  0004e	03 c2		 add	 eax, edx
  00050	c1 f8 03	 sar	 eax, 3
  00053	89 45 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], eax

; 424  : 			nGrowCount=(nGrowCount<4)?4:((nGrowCount>1024)?1024:nGrowCount);

  00056	83 7d f8 04	 cmp	 DWORD PTR _nGrowCount$4[ebp], 4
  0005a	7d 09		 jge	 SHORT $LN8@AllocMemor
  0005c	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR tv79[ebp], 4
  00063	eb 1e		 jmp	 SHORT $LN9@AllocMemor
$LN8@AllocMemor:
  00065	81 7d f8 00 04
	00 00		 cmp	 DWORD PTR _nGrowCount$4[ebp], 1024 ; 00000400H
  0006c	7e 09		 jle	 SHORT $LN6@AllocMemor
  0006e	c7 45 a4 00 04
	00 00		 mov	 DWORD PTR tv78[ebp], 1024 ; 00000400H
  00075	eb 06		 jmp	 SHORT $LN7@AllocMemor
$LN6@AllocMemor:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nGrowCount$4[ebp]
  0007a	89 45 a4	 mov	 DWORD PTR tv78[ebp], eax
$LN7@AllocMemor:
  0007d	8b 4d a4	 mov	 ecx, DWORD PTR tv78[ebp]
  00080	89 4d a8	 mov	 DWORD PTR tv79[ebp], ecx
$LN9@AllocMemor:
  00083	8b 55 a8	 mov	 edx, DWORD PTR tv79[ebp]
  00086	89 55 f8	 mov	 DWORD PTR _nGrowCount$4[ebp], edx
$LN3@AllocMemor:

; 425  : 		}
; 426  : 		nNewCount+=nGrowCount;

  00089	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  0008c	03 45 f8	 add	 eax, DWORD PTR _nGrowCount$4[ebp]
  0008f	89 45 08	 mov	 DWORD PTR _nNewCount$[ebp], eax

; 427  : 
; 428  : 		//申请内存
; 429  : 		TYPE * pNewData=(TYPE *) new BYTE[nNewCount*sizeof(TYPE)];

  00092	8b 45 08	 mov	 eax, DWORD PTR _nNewCount$[ebp]
  00095	c1 e0 02	 shl	 eax, 2
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	89 4d f4	 mov	 DWORD PTR _pNewData$3[ebp], ecx

; 430  : 		memcpy(pNewData,m_pData,m_nElementCount*sizeof(TYPE));

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b0	c1 e1 02	 shl	 ecx, 2
  000b3	51		 push	 ecx
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ba	50		 push	 eax
  000bb	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 431  : 		memset(pNewData+m_nElementCount,0,(nNewCount-m_nElementCount)*sizeof(TYPE));

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  000cd	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  000d0	c1 e1 02	 shl	 ecx, 2
  000d3	51		 push	 ecx
  000d4	6a 00		 push	 0
  000d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  000df	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		delete [] (BYTE *)m_pData;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	89 4d ac	 mov	 DWORD PTR $T1[ebp], ecx
  000f4	8b 55 ac	 mov	 edx, DWORD PTR $T1[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000fd	83 c4 04	 add	 esp, 4

; 433  : 
; 434  : 		//设置变量
; 435  : 		m_pData=pNewData;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _pNewData$3[ebp]
  00106	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 436  : 		m_nMaxCount=nNewCount;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _nNewCount$[ebp]
  0010f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AllocMemor:

; 437  : 	}
; 438  : 
; 439  : 	return;
; 440  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
?AllocMemory@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::AllocMemory
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::operator[], COMDAT
; _this$ = ecx

; 114  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 	return ElementAt(nIndex);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?ElementAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::ElementAt

; 116  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??A?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAll@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXXZ PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAll, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	if (m_nElementCount>0)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	7e 44		 jle	 SHORT $LN1@RemoveAll

; 381  : 	{
; 382  : 		for (INT_PTR i=0;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001c	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  0001e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00021	83 c0 01	 add	 eax, 1
  00024	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAll:
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00030	7d 02		 jge	 SHORT $LN3@RemoveAll
  00032	eb ea		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 383  : 		memset(m_pData,0,m_nElementCount*sizeof(TYPE));

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003a	c1 e1 02	 shl	 ecx, 2
  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 384  : 		m_nElementCount=0;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@RemoveAll:

; 385  : 	}
; 386  : 
; 387  : 	return;
; 388  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?RemoveAll@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXXZ ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?RemoveAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHH@Z
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_nMoveCount$ = -8					; size = 4
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_nCount$ = 12						; size = 4
?RemoveAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHH@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAt, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 361  : 	//效验参数
; 362  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN9@RemoveAt
  00012	68 6a 01 00 00	 push	 362			; 0000016aH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN9@RemoveAt
  00025	cc		 int	 3
$LN9@RemoveAt:

; 363  : 	ASSERT(nCount>=0);

  00026	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0002a	7d 14		 jge	 SHORT $LN10@RemoveAt
  0002c	68 6b 01 00 00	 push	 363			; 0000016bH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00036	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0003b	85 c0		 test	 eax, eax
  0003d	74 01		 je	 SHORT $LN10@RemoveAt
  0003f	cc		 int	 3
$LN10@RemoveAt:

; 364  : 	ASSERT(nIndex+nCount<=m_nElementCount);

  00040	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00043	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004c	7e 14		 jle	 SHORT $LN11@RemoveAt
  0004e	68 6c 01 00 00	 push	 364			; 0000016cH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00058	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005d	85 c0		 test	 eax, eax
  0005f	74 01		 je	 SHORT $LN11@RemoveAt
  00061	cc		 int	 3
$LN11@RemoveAt:

; 365  : 	if ((nIndex<0)||(nCount<0)||((nIndex+nCount>m_nElementCount))) AfxThrowInvalidArgException();

  00062	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00066	7c 14		 jl	 SHORT $LN6@RemoveAt
  00068	83 7d 0c 00	 cmp	 DWORD PTR _nCount$[ebp], 0
  0006c	7c 0e		 jl	 SHORT $LN6@RemoveAt
  0006e	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00071	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0007a	7e 05		 jle	 SHORT $LN5@RemoveAt
$LN6@RemoveAt:
  0007c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@RemoveAt:

; 366  : 
; 367  : 	//删除数据
; 368  : 	INT_PTR nMoveCount=m_nElementCount-(nIndex+nCount);

  00081	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR _nCount$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0008d	2b d0		 sub	 edx, eax
  0008f	89 55 f8	 mov	 DWORD PTR _nMoveCount$[ebp], edx

; 369  : 	for (INT_PTR i=0;i<nCount;i++) (m_pData+nIndex+i)->~TYPE();

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@RemoveAt
$LN2@RemoveAt:
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RemoveAt:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  000a7	3b 45 0c	 cmp	 eax, DWORD PTR _nCount$[ebp]
  000aa	7d 02		 jge	 SHORT $LN3@RemoveAt
  000ac	eb ed		 jmp	 SHORT $LN2@RemoveAt
$LN3@RemoveAt:

; 370  : 	if (nMoveCount>0) memmove(m_pData+nIndex,m_pData+nIndex+nCount,nMoveCount*sizeof(TYPE));

  000ae	83 7d f8 00	 cmp	 DWORD PTR _nMoveCount$[ebp], 0
  000b2	7e 2f		 jle	 SHORT $LN7@RemoveAt
  000b4	8b 45 f8	 mov	 eax, DWORD PTR _nMoveCount$[ebp]
  000b7	c1 e0 02	 shl	 eax, 2
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c1	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000c4	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _nCount$[ebp]
  000ca	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	8b 45 08	 mov	 eax, DWORD PTR _nIndex$[ebp]
  000d7	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _memmove
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@RemoveAt:

; 371  : 	m_nElementCount-=nCount;

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	2b 4d 0c	 sub	 ecx, DWORD PTR _nCount$[ebp]
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN8@RemoveAt:

; 372  : 
; 373  : 	return;
; 374  : }

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
?RemoveAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHH@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::RemoveAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetAtGrow@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHABQAUtagTaskParameter@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
_newElement$ = 12					; size = 4
?SetAtGrow@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHABQAUtagTaskParameter@@@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetAtGrow, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 	//效验参数
; 289  : 	ASSERT(nIndex>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN5@SetAtGrow
  00012	68 21 01 00 00	 push	 289			; 00000121H
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN5@SetAtGrow
  00025	cc		 int	 3
$LN5@SetAtGrow:

; 290  : 	if (nIndex<0) AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN2@SetAtGrow
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@SetAtGrow:

; 291  : 
; 292  : 	//设置元素
; 293  : 	if (nIndex>=m_nElementCount) SetSize(m_nElementCount+1);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00037	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0003a	7c 12		 jl	 SHORT $LN3@SetAtGrow
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	83 c1 01	 add	 ecx, 1
  00045	51		 push	 ecx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?SetSize@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetSize
$LN3@SetAtGrow:

; 294  : 	m_pData[nIndex]=newElement;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00057	8b 45 0c	 mov	 eax, DWORD PTR _newElement$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN4@SetAtGrow:

; 295  : 
; 296  : 	return;
; 297  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetAtGrow@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHABQAUtagTaskParameter@@@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetAtGrow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?SetSize@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_nNewSize$ = 8						; size = 4
?SetSize@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetSize, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	//效验参数
; 254  : 	ASSERT(nNewSize>=0);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  00010	7d 14		 jge	 SHORT $LN13@SetSize
  00012	68 fe 00 00 00	 push	 254			; 000000feH
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  0001c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00021	85 c0		 test	 eax, eax
  00023	74 01		 je	 SHORT $LN13@SetSize
  00025	cc		 int	 3
$LN13@SetSize:

; 255  : 	if (nNewSize<0)	AfxThrowInvalidArgException();

  00026	83 7d 08 00	 cmp	 DWORD PTR _nNewSize$[ebp], 0
  0002a	7d 05		 jge	 SHORT $LN8@SetSize
  0002c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN8@SetSize:

; 256  : 	
; 257  : 	//设置大小
; 258  : 	AllocMemory(nNewSize);

  00031	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?AllocMemory@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::AllocMemory

; 259  : 	if (nNewSize>m_nElementCount)

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00043	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00046	7e 3a		 jle	 SHORT $LN9@SetSize

; 260  : 	{
; 261  : 		for (INT_PTR i=m_nElementCount;i<nNewSize;i++) new ((VOID *)(m_pData+i)) TYPE;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004e	89 4d f8	 mov	 DWORD PTR _i$3[ebp], ecx
  00051	eb 09		 jmp	 SHORT $LN4@SetSize
$LN2@SetSize:
  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00056	83 c0 01	 add	 eax, 1
  00059	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@SetSize:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0005f	3b 45 08	 cmp	 eax, DWORD PTR _nNewSize$[ebp]
  00062	7d 1c		 jge	 SHORT $LN3@SetSize
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006a	8b 55 f8	 mov	 edx, DWORD PTR _i$3[ebp]
  0006d	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00070	50		 push	 eax
  00071	6a 04		 push	 4
  00073	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00078	83 c4 08	 add	 esp, 8
  0007b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0007e	eb d3		 jmp	 SHORT $LN2@SetSize
$LN3@SetSize:

; 262  : 	}
; 263  : 	else if (nNewSize<m_nElementCount)

  00080	eb 4d		 jmp	 SHORT $LN10@SetSize
$LN9@SetSize:
  00082	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  00088	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008b	7d 42		 jge	 SHORT $LN10@SetSize

; 264  : 	{
; 265  : 		for (INT_PTR i=nNewSize;i<m_nElementCount;i++) (m_pData+i)->~TYPE();

  0008d	8b 45 08	 mov	 eax, DWORD PTR _nNewSize$[ebp]
  00090	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00093	eb 09		 jmp	 SHORT $LN7@SetSize
$LN5@SetSize:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN7@SetSize:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a7	7d 02		 jge	 SHORT $LN6@SetSize
  000a9	eb ea		 jmp	 SHORT $LN5@SetSize
$LN6@SetSize:

; 266  : 		memset(m_pData+nNewSize,0,(m_nElementCount-nNewSize)*sizeof(TYPE));

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _nNewSize$[ebp]
  000b4	c1 e1 02	 shl	 ecx, 2
  000b7	51		 push	 ecx
  000b8	6a 00		 push	 0
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000c3	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 _memset
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@SetSize:

; 267  : 	}
; 268  : 	m_nElementCount=nNewSize;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nNewSize$[ebp]
  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$LN12@SetSize:

; 269  : 
; 270  : 	return;
; 271  : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 04 00	 ret	 4
?SetSize@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXH@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?ElementAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
?ElementAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::ElementAt, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 233  : 	ASSERT((nIndex>=0)&&(nIndex<m_nElementCount));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00010	7c 0b		 jl	 SHORT $LN4@ElementAt
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00018	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0001b	7c 14		 jl	 SHORT $LN5@ElementAt
$LN4@ElementAt:
  0001d	68 e9 00 00 00	 push	 233			; 000000e9H
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@LDFGAABH@g?3?2?M?x?$LK?$PM?2happygamewh?2?$LH?$PO?N?q?$LG?K?2?O?$LF?M?$LD@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN5@ElementAt
  00030	cc		 int	 3
$LN5@ElementAt:

; 234  : 	if ((nIndex<0)&&(nIndex>=m_nElementCount)) AfxThrowInvalidArgException();

  00031	83 7d 08 00	 cmp	 DWORD PTR _nIndex$[ebp], 0
  00035	7d 10		 jge	 SHORT $LN2@ElementAt
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0003d	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00040	7c 05		 jl	 SHORT $LN2@ElementAt
  00042	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@ElementAt:

; 235  : 	
; 236  : 	return m_pData[nIndex];

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00050	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
$LN3@ElementAt:

; 237  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?ElementAt@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEAAPAUtagTaskParameter@@H@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::ElementAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?Add@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEHABQAUtagTaskParameter@@@Z
_TEXT	SEGMENT
_nIndex$ = -8						; size = 4
_this$ = -4						; size = 4
_newElement$ = 8					; size = 4
?Add@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEHABQAUtagTaskParameter@@@Z PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::Add, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	INT_PTR nIndex=m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00012	89 4d f8	 mov	 DWORD PTR _nIndex$[ebp], ecx

; 107  : 	SetAtGrow(nIndex,newElement);

  00015	8b 45 08	 mov	 eax, DWORD PTR _newElement$[ebp]
  00018	50		 push	 eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?SetAtGrow@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEXHABQAUtagTaskParameter@@@Z ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::SetAtGrow

; 108  : 	return nIndex;

  00025	8b 45 f8	 mov	 eax, DWORD PTR _nIndex$[ebp]

; 109  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Add@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAEHABQAUtagTaskParameter@@@Z ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ?GetCount@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QBEHXZ PROC ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::GetCount, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	return m_nElementCount;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 100  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QBEHXZ ENDP ; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ
_TEXT	SEGMENT
$T1 = -76						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ PROC	; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::~CWHArray<tagTaskParameter *,tagTaskParameter * const &>, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@

; 144  : 	if (m_pData!=NULL)

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 3e		 je	 SHORT $LN6@CWHArray

; 145  : 	{
; 146  : 		for (INT_PTR i=0;i<m_nElementCount;i++)	(m_pData+i)->~TYPE();

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@CWHArray
$LN2@CWHArray:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@CWHArray:
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00036	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00039	7d 02		 jge	 SHORT $LN3@CWHArray
  0003b	eb ea		 jmp	 SHORT $LN2@CWHArray
$LN3@CWHArray:

; 147  : 		delete [] (BYTE *)m_pData;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00043	89 4d b4	 mov	 DWORD PTR $T1[ebp], ecx
  00046	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0004f	83 c4 04	 add	 esp, 4

; 148  : 		m_pData=NULL;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN6@CWHArray:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??1?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@UAE@XZ ENDP	; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::~CWHArray<tagTaskParameter *,tagTaskParameter * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\array.h
;	COMDAT ??0?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAE@XZ PROC	; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::CWHArray<tagTaskParameter *,tagTaskParameter * const &>, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@6B@

; 132  : 	m_pData=NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 133  : 	m_nMaxCount=0;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 134  : 	m_nGrowCount=0;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 135  : 	m_nElementCount=0;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 136  : 
; 137  : 	return;
; 138  : }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??0?$CWHArray@PAUtagTaskParameter@@ABQAU1@@@QAE@XZ ENDP	; CWHArray<tagTaskParameter *,tagTaskParameter * const &>::CWHArray<tagTaskParameter *,tagTaskParameter * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEPAXI@Z PROC	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::~CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 21		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 0e		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	6a 1c		 push	 28			; 0000001cH
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEPAXI@Z ENDP	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AssertValid@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXXZ PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::AssertValid, COMDAT
; _this$ = ecx

; 1820 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1821 : 	CObject::AssertValid();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 1822 : 
; 1823 : 	ASSERT(m_nHashTableSize > 0);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001b	77 14		 ja	 SHORT $LN3@AssertVali
  0001d	68 1f 07 00 00	 push	 1823			; 0000071fH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN3@AssertVali
  00030	cc		 int	 3
$LN3@AssertVali:

; 1824 : 	ASSERT(m_nCount == 0 || m_pHashTable != NULL);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00038	74 1d		 je	 SHORT $LN1@AssertVali
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00041	75 14		 jne	 SHORT $LN1@AssertVali
  00043	68 20 07 00 00	 push	 1824			; 00000720H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN1@AssertVali
  00056	cc		 int	 3
$LN1@AssertVali:

; 1825 : 		// non-empty map should have hash table
; 1826 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?AssertValid@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXXZ ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Dump@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_pos$1 = -16						; size = 4
_val$2 = -12						; size = 4
_key$3 = -8						; size = 4
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXAAVCDumpContext@@@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Dump, COMDAT
; _this$ = ecx

; 1794 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1795 : 	CObject::Dump(dc);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 1796 : 
; 1797 : 	dc << "with " << m_nCount << " elements";

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_09HCLNAIDE@?5elements@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_05PLCFPPOI@with?5@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1798 : 	if (dc.GetDepth() > 0)

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00047	85 c0		 test	 eax, eax
  00049	7e 71		 jle	 SHORT $LN4@Dump

; 1799 : 	{
; 1800 : 		// Dump in format "[key] -> value"
; 1801 : 		KEY key[1];
; 1802 : 		VALUE val[1];
; 1803 : 
; 1804 : 		POSITION pos = GetStartPosition();

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetStartPosition
  00053	89 45 f0	 mov	 DWORD PTR _pos$1[ebp], eax
$LN2@Dump:

; 1805 : 		while (pos != NULL)

  00056	83 7d f0 00	 cmp	 DWORD PTR _pos$1[ebp], 0
  0005a	74 60		 je	 SHORT $LN4@Dump

; 1806 : 		{
; 1807 : 			GetNextAssoc(pos, key[0], val[0]);

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8d 54 0d f4	 lea	 edx, DWORD PTR _val$2[ebp+ecx]
  00068	52		 push	 edx
  00069	b8 04 00 00 00	 mov	 eax, 4
  0006e	6b c8 00	 imul	 ecx, eax, 0
  00071	8d 54 0d f8	 lea	 edx, DWORD PTR _key$3[ebp+ecx]
  00075	52		 push	 edx
  00076	8d 45 f0	 lea	 eax, DWORD PTR _pos$1[ebp]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetNextAssoc

; 1808 : 			dc << "\n\t[";

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_03OHJIHPJH@?6?7?$FL@
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0008a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1809 : 			DumpElements<KEY>(dc, key, 1);

  0008f	6a 01		 push	 1
  00091	8d 45 f8	 lea	 eax, DWORD PTR _key$3[ebp]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$DumpElements@K@@YGXAAVCDumpContext@@PBKH@Z ; DumpElements<unsigned long>

; 1810 : 			dc << "] = ";

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000a6	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1811 : 			DumpElements<VALUE>(dc, val, 1);

  000ab	6a 01		 push	 1
  000ad	8d 45 f4	 lea	 eax, DWORD PTR _val$2[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ??$DumpElements@PAUtagUserTaskEntry@@@@YGXAAVCDumpContext@@PBQAUtagUserTaskEntry@@H@Z ; DumpElements<tagUserTaskEntry *>

; 1812 : 		}

  000ba	eb 9a		 jmp	 SHORT $LN2@Dump
$LN4@Dump:

; 1813 : 	}
; 1814 : 
; 1815 : 	dc << "\n";

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000c4	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1816 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?Dump@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UBEXAAVCDumpContext@@@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
tv154 = -100						; size = 4
_newValue$1 = -32					; size = 4
_newKey$2 = -28						; size = 4
_nNewCount$3 = -24					; size = 4
_pValue$4 = -20						; size = 4
_pKey$5 = -16						; size = 4
_pAssoc$6 = -12						; size = 4
_nHash$7 = -8						; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEXAAVCArchive@@@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Serialize, COMDAT
; _this$ = ecx

; 1743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1744 : 	ASSERT_VALID(this);

  0000c	68 d0 06 00 00	 push	 1744			; 000006d0H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1745 : 
; 1746 : 	CObject::Serialize(ar);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 1747 : 
; 1748 : 	if (ar.IsStoring())

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00033	85 c0		 test	 eax, eax
  00035	0f 84 b3 00 00
	00		 je	 $LN10@Serialize

; 1749 : 	{
; 1750 : 		ar.WriteCount(m_nCount);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00041	51		 push	 ecx
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00045	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1751 : 		if (m_nCount == 0)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00051	75 05		 jne	 SHORT $LN12@Serialize

; 1752 : 			return;  // nothing more to do

  00053	e9 f8 00 00 00	 jmp	 $LN1@Serialize
$LN12@Serialize:

; 1753 : 
; 1754 : 		ASSERT(m_pHashTable != NULL);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005f	75 14		 jne	 SHORT $LN15@Serialize
  00061	68 da 06 00 00	 push	 1754			; 000006daH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN15@Serialize
  00074	cc		 int	 3
$LN15@Serialize:

; 1755 : 		if (m_pHashTable != NULL)

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0007c	74 6e		 je	 SHORT $LN13@Serialize

; 1756 : 		{
; 1757 : 			for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$7[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN4@Serialize
$LN2@Serialize:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _nHash$7[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _nHash$7[ebp], eax
$LN4@Serialize:
  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$7[ebp]
  00096	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00099	73 51		 jae	 SHORT $LN13@Serialize

; 1758 : 			{
; 1759 : 				CAssoc* pAssoc;
; 1760 : 				for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	8b 55 f8	 mov	 edx, DWORD PTR _nHash$7[ebp]
  000a4	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000a7	89 45 f4	 mov	 DWORD PTR _pAssoc$6[ebp], eax
  000aa	eb 09		 jmp	 SHORT $LN7@Serialize
$LN5@Serialize:
  000ac	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	89 4d f4	 mov	 DWORD PTR _pAssoc$6[ebp], ecx
$LN7@Serialize:
  000b5	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$6[ebp], 0
  000b9	74 2f		 je	 SHORT $LN6@Serialize

; 1761 : 				{
; 1762 : 					KEY* pKey;
; 1763 : 					VALUE* pValue;
; 1764 : 					/*
; 1765 : 					* in some cases the & operator might be overloaded, and we cannot use it to
; 1766 : 					* obtain the address of a given object.  We then use the following trick to
; 1767 : 					* get the address
; 1768 : 					*/
; 1769 : 					pKey = reinterpret_cast< KEY* >( &reinterpret_cast< int& >( const_cast< KEY& > ( static_cast< const KEY& >( pAssoc->key ) ) ) );

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000be	89 45 f0	 mov	 DWORD PTR _pKey$5[ebp], eax

; 1770 : 					pValue = reinterpret_cast< VALUE* >( &reinterpret_cast< int& >( static_cast< VALUE& >( pAssoc->value ) ) );

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000c4	83 c0 04	 add	 eax, 4
  000c7	89 45 ec	 mov	 DWORD PTR _pValue$4[ebp], eax

; 1771 : 					SerializeElements<KEY>(ar, pKey, 1);

  000ca	6a 01		 push	 1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pKey$5[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ; SerializeElements<unsigned long>

; 1772 : 					SerializeElements<VALUE>(ar, pValue, 1);

  000d9	6a 01		 push	 1
  000db	8b 45 ec	 mov	 eax, DWORD PTR _pValue$4[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagUserTaskEntry@@@@YGXAAVCArchive@@PAPAUtagUserTaskEntry@@H@Z ; SerializeElements<tagUserTaskEntry *>

; 1773 : 				}

  000e8	eb c2		 jmp	 SHORT $LN5@Serialize
$LN6@Serialize:

; 1774 : 			}

  000ea	eb 9b		 jmp	 SHORT $LN2@Serialize
$LN13@Serialize:

; 1775 : 		}
; 1776 : 	}
; 1777 : 	else

  000ec	eb 62		 jmp	 SHORT $LN1@Serialize
$LN10@Serialize:

; 1778 : 	{
; 1779 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000f1	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  000f6	89 45 e8	 mov	 DWORD PTR _nNewCount$3[ebp], eax
$LN8@Serialize:

; 1780 : 		while (nNewCount--)

  000f9	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$3[ebp]
  000fc	89 45 9c	 mov	 DWORD PTR tv154[ebp], eax
  000ff	8b 4d e8	 mov	 ecx, DWORD PTR _nNewCount$3[ebp]
  00102	83 e9 01	 sub	 ecx, 1
  00105	89 4d e8	 mov	 DWORD PTR _nNewCount$3[ebp], ecx
  00108	83 7d 9c 00	 cmp	 DWORD PTR tv154[ebp], 0
  0010c	74 42		 je	 SHORT $LN1@Serialize

; 1781 : 		{
; 1782 : 			KEY newKey[1];
; 1783 : 			VALUE newValue[1];
; 1784 : 			SerializeElements<KEY>(ar, newKey, 1);

  0010e	6a 01		 push	 1
  00110	8d 45 e4	 lea	 eax, DWORD PTR _newKey$2[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ??$SerializeElements@K@@YGXAAVCArchive@@PAKH@Z ; SerializeElements<unsigned long>

; 1785 : 			SerializeElements<VALUE>(ar, newValue, 1);

  0011d	6a 01		 push	 1
  0011f	8d 45 e0	 lea	 eax, DWORD PTR _newValue$1[ebp]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagUserTaskEntry@@@@YGXAAVCArchive@@PAPAUtagUserTaskEntry@@H@Z ; SerializeElements<tagUserTaskEntry *>

; 1786 : 			SetAt(newKey[0], newValue[0]);

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	8b 54 0d e0	 mov	 edx, DWORD PTR _newValue$1[ebp+ecx]
  00138	52		 push	 edx
  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	6b c8 00	 imul	 ecx, eax, 0
  00141	8b 54 0d e4	 mov	 edx, DWORD PTR _newKey$2[ebp+ecx]
  00145	52		 push	 edx
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	e8 00 00 00 00	 call	 ?SetAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXKPAUtagUserTaskEntry@@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::SetAt

; 1787 : 		}

  0014e	eb a9		 jmp	 SHORT $LN8@Serialize
$LN1@Serialize:

; 1788 : 	}
; 1789 : }

  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 04 00	 ret	 4
?Serialize@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAEXAAVCArchive@@@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ PROC	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::~CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>, COMDAT
; _this$ = ecx

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@

; 1473 : 	RemoveAll();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveAll

; 1474 : 	ASSERT(m_nCount == 0);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $LN1@CMap
  00045	68 c2 05 00 00	 push	 1474			; 000005c2H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN1@CMap
  00058	cc		 int	 3
$LN1@CMap:

; 1475 : }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@UAE@XZ ENDP	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::~CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetAssocAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z
_TEXT	SEGMENT
_pAssoc$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_nHashBucket$ = 12					; size = 4
_nHashValue$ = 16					; size = 4
?GetAssocAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetAssocAt, COMDAT
; _this$ = ecx

; 1532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 : 	nHashValue = HashKey<ARG_KEY>(key);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$HashKey@K@@YGIK@Z	; HashKey<unsigned long>
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00018	89 01		 mov	 DWORD PTR [ecx], eax

; 1534 : 	nHashBucket = nHashValue % m_nHashTableSize;

  0001a	8b 45 10	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	33 d2		 xor	 edx, edx
  00024	f7 71 08	 div	 DWORD PTR [ecx+8]
  00027	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1535 : 
; 1536 : 	if (m_pHashTable == NULL)

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00033	75 04		 jne	 SHORT $LN5@GetAssocAt

; 1537 : 		return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 49		 jmp	 SHORT $LN1@GetAssocAt
$LN5@GetAssocAt:

; 1538 : 
; 1539 : 	// see if it exists
; 1540 : 	CAssoc* pAssoc;
; 1541 : 	for (pAssoc = m_pHashTable[nHashBucket]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  00039	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00047	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0004a	eb 09		 jmp	 SHORT $LN4@GetAssocAt
$LN2@GetAssocAt:
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@GetAssocAt:
  00055	83 7d f8 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  00059	74 25		 je	 SHORT $LN3@GetAssocAt

; 1542 : 	{
; 1543 : 		if (pAssoc->nHashValue == nHashValue && CompareElements(&pAssoc->key, &key))

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00061	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00064	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00066	75 16		 jne	 SHORT $LN6@GetAssocAt
  00068	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ??$CompareElements@KK@@YGHPBK0@Z ; CompareElements<unsigned long,unsigned long>
  00075	85 c0		 test	 eax, eax
  00077	74 05		 je	 SHORT $LN6@GetAssocAt

; 1544 : 			return pAssoc;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0007c	eb 04		 jmp	 SHORT $LN1@GetAssocAt
$LN6@GetAssocAt:

; 1545 : 	}

  0007e	eb cc		 jmp	 SHORT $LN2@GetAssocAt
$LN3@GetAssocAt:

; 1546 : 	return NULL;

  00080	33 c0		 xor	 eax, eax
$LN1@GetAssocAt:

; 1547 : }

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
?GetAssocAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetAssocAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?FreeAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEXPAVCAssoc@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pAssoc$ = 8						; size = 4
?FreeAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEXPAVCAssoc@1@@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::FreeAssoc, COMDAT
; _this$ = ecx

; 1516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1517 : 	pAssoc->CAssoc::~CAssoc();
; 1518 : 	pAssoc->pNext = m_pFreeList;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00015	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1519 : 	m_pFreeList = pAssoc;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0001e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1520 : 	m_nCount--;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00027	83 e9 01	 sub	 ecx, 1
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1521 : 	ASSERT(m_nCount >= 0);  // make sure we don't underflow

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00037	7d 14		 jge	 SHORT $LN4@FreeAssoc
  00039	68 f1 05 00 00	 push	 1521			; 000005f1H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00043	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00048	85 c0		 test	 eax, eax
  0004a	74 01		 je	 SHORT $LN4@FreeAssoc
  0004c	cc		 int	 3
$LN4@FreeAssoc:

; 1522 : 
; 1523 : 	// if no more elements, cleanup completely
; 1524 : 	if (m_nCount == 0)

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00054	75 08		 jne	 SHORT $LN1@FreeAssoc

; 1525 : 		RemoveAll();

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveAll
$LN1@FreeAssoc:

; 1526 : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?FreeAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEXPAVCAssoc@1@@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::FreeAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?NewAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEPAVCAssoc@1@K@Z
_TEXT	SEGMENT
tv88 = -100						; size = 4
$T1 = -96						; size = 4
_pTemp$ = -28						; size = 4
_pAssoc$ = -24						; size = 4
___afx_condVal$2 = -20					; size = 4
_i$3 = -16						; size = 4
_pAssoc$4 = -12						; size = 4
_newBlock$5 = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?NewAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEPAVCAssoc@1@K@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::NewAssoc, COMDAT
; _this$ = ecx

; 1480 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1481 : 	if (m_pFreeList == NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	75 72		 jne	 SHORT $LN7@NewAssoc

; 1482 : 	{
; 1483 : 		// add another block
; 1484 : 		CPlex* newBlock = CPlex::Create(m_pBlocks, m_nBlockSize, sizeof(CMap::CAssoc));

  00015	6a 10		 push	 16			; 00000010H
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 14	 add	 edx, 20			; 00000014H
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create
  0002a	89 45 f8	 mov	 DWORD PTR _newBlock$5[ebp], eax

; 1485 : 		// chain them into free list
; 1486 : 		CMap::CAssoc* pAssoc = (CMap::CAssoc*) newBlock->data();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _newBlock$5[ebp]
  00030	e8 00 00 00 00	 call	 ?data@CPlex@@QAEPAXXZ	; CPlex::data
  00035	89 45 f4	 mov	 DWORD PTR _pAssoc$4[ebp], eax

; 1487 : 		// free in reverse order to make it easier to debug
; 1488 : 		pAssoc += m_nBlockSize - 1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	c1 e1 04	 shl	 ecx, 4
  00044	03 4d f4	 add	 ecx, DWORD PTR _pAssoc$4[ebp]
  00047	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx

; 1489 : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pAssoc--)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d f0	 mov	 DWORD PTR _i$3[ebp], ecx
  00056	eb 12		 jmp	 SHORT $LN4@NewAssoc
$LN2@NewAssoc:
  00058	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00064	83 e9 10	 sub	 ecx, 16			; 00000010H
  00067	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx
$LN4@NewAssoc:
  0006a	83 7d f0 00	 cmp	 DWORD PTR _i$3[ebp], 0
  0006e	7c 17		 jl	 SHORT $LN7@NewAssoc

; 1490 : 		{
; 1491 : 			pAssoc->pNext = m_pFreeList;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$4[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1492 : 			m_pFreeList = pAssoc;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00082	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1493 : 		}

  00085	eb d1		 jmp	 SHORT $LN2@NewAssoc
$LN7@NewAssoc:

; 1494 : 	}
; 1495 : 	ENSURE(m_pFreeList != NULL);  // we must have something

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008e	74 09		 je	 SHORT $LN11@NewAssoc
  00090	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00097	eb 07		 jmp	 SHORT $LN12@NewAssoc
$LN11@NewAssoc:
  00099	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN12@NewAssoc:
  000a0	8b 4d 9c	 mov	 ecx, DWORD PTR tv88[ebp]
  000a3	89 4d ec	 mov	 DWORD PTR ___afx_condVal$2[ebp], ecx
  000a6	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000aa	75 14		 jne	 SHORT $LN13@NewAssoc
  000ac	68 d7 05 00 00	 push	 1495			; 000005d7H
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b6	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000bb	85 c0		 test	 eax, eax
  000bd	74 01		 je	 SHORT $LN13@NewAssoc
  000bf	cc		 int	 3
$LN13@NewAssoc:
  000c0	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000c4	75 05		 jne	 SHORT $LN5@NewAssoc
  000c6	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@NewAssoc:
  000cb	33 c0		 xor	 eax, eax
  000cd	75 b8		 jne	 SHORT $LN7@NewAssoc

; 1496 : 
; 1497 : 	CMap::CAssoc* pAssoc = m_pFreeList;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d5	89 4d e8	 mov	 DWORD PTR _pAssoc$[ebp], ecx

; 1498 : 
; 1499 : 	// zero the memory
; 1500 : 	CMap::CAssoc* pTemp = pAssoc->pNext;

  000d8	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000db	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000de	89 4d e4	 mov	 DWORD PTR _pTemp$[ebp], ecx

; 1501 : 	memset( pAssoc, 0, sizeof(CMap::CAssoc) );

  000e1	6a 10		 push	 16			; 00000010H
  000e3	6a 00		 push	 0
  000e5	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _memset
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1502 : 	pAssoc->pNext = pTemp;

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _pTemp$[ebp]
  000f7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1503 : 
; 1504 : 	m_pFreeList = m_pFreeList->pNext;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00100	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00106	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1505 : 	m_nCount++;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010f	83 c1 01	 add	 ecx, 1
  00112	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00115	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1506 : 	ASSERT(m_nCount > 0);  // make sure we don't overflow

  00118	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0011f	7f 14		 jg	 SHORT $LN14@NewAssoc
  00121	68 e2 05 00 00	 push	 1506			; 000005e2H
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0012b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00130	85 c0		 test	 eax, eax
  00132	74 01		 je	 SHORT $LN14@NewAssoc
  00134	cc		 int	 3
$LN14@NewAssoc:

; 1507 : #pragma push_macro("new")
; 1508 : #undef new
; 1509 : 	::new(pAssoc) CMap::CAssoc(key);

  00135	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00138	50		 push	 eax
  00139	6a 10		 push	 16			; 00000010H
  0013b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00140	83 c4 08	 add	 esp, 8
  00143	89 45 a0	 mov	 DWORD PTR $T1[ebp], eax
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _key$[ebp]
  00149	51		 push	 ecx
  0014a	8b 4d a0	 mov	 ecx, DWORD PTR $T1[ebp]
  0014d	e8 00 00 00 00	 call	 ??0CAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CAssoc::CAssoc

; 1510 : #pragma pop_macro("new")
; 1511 : 	return pAssoc;

  00152	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
$LN10@NewAssoc:

; 1512 : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
?NewAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEPAVCAssoc@1@K@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::NewAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?InitHashTable@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXIH@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
___afx_condVal$3 = -8					; size = 4
_this$ = -4						; size = 4
_nHashSize$ = 8						; size = 4
_bAllocNow$ = 12					; size = 4
?InitHashTable@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXIH@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::InitHashTable, COMDAT
; _this$ = ecx

; 1420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 : 	ASSERT_VALID(this);

  0000c	68 8d 05 00 00	 push	 1421			; 0000058dH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1422 : 	ASSERT(m_nCount == 0);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00026	74 14		 je	 SHORT $LN9@InitHashTa
  00028	68 8e 05 00 00	 push	 1422			; 0000058eH
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $LN9@InitHashTa
  0003b	cc		 int	 3
$LN9@InitHashTa:

; 1423 : 	ASSERT(nHashSize > 0);

  0003c	83 7d 08 00	 cmp	 DWORD PTR _nHashSize$[ebp], 0
  00040	77 14		 ja	 SHORT $LN10@InitHashTa
  00042	68 8f 05 00 00	 push	 1423			; 0000058fH
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00051	85 c0		 test	 eax, eax
  00053	74 01		 je	 SHORT $LN10@InitHashTa
  00055	cc		 int	 3
$LN10@InitHashTa:

; 1424 : 
; 1425 : 	if (m_pHashTable != NULL)

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005d	74 1f		 je	 SHORT $LN5@InitHashTa

; 1426 : 	{
; 1427 : 		// free hash table
; 1428 : 		delete[] m_pHashTable;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	89 4d b4	 mov	 DWORD PTR $T2[ebp], ecx
  00068	8b 55 b4	 mov	 edx, DWORD PTR $T2[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00071	83 c4 04	 add	 esp, 4

; 1429 : 		m_pHashTable = NULL;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN5@InitHashTa:

; 1430 : 	}
; 1431 : 
; 1432 : 	if (bAllocNow)

  0007e	83 7d 0c 00	 cmp	 DWORD PTR _bAllocNow$[ebp], 0
  00082	0f 84 92 00 00
	00		 je	 $LN6@InitHashTa

; 1433 : 	{
; 1434 : 		m_pHashTable = new CAssoc* [nHashSize];

  00088	68 9a 05 00 00	 push	 1434			; 0000059aH
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00092	33 c9		 xor	 ecx, ecx
  00094	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00097	ba 04 00 00 00	 mov	 edx, 4
  0009c	f7 e2		 mul	 edx
  0009e	0f 90 c1	 seto	 cl
  000a1	f7 d9		 neg	 ecx
  000a3	0b c8		 or	 ecx, eax
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  000b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN4@InitHashTa:

; 1435 : 		ENSURE(m_pHashTable != NULL);

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000c1	74 09		 je	 SHORT $LN11@InitHashTa
  000c3	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  000ca	eb 07		 jmp	 SHORT $LN12@InitHashTa
$LN11@InitHashTa:
  000cc	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN12@InitHashTa:
  000d3	8b 4d ac	 mov	 ecx, DWORD PTR tv137[ebp]
  000d6	89 4d f8	 mov	 DWORD PTR ___afx_condVal$3[ebp], ecx
  000d9	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000dd	75 14		 jne	 SHORT $LN13@InitHashTa
  000df	68 9b 05 00 00	 push	 1435			; 0000059bH
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000e9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ee	85 c0		 test	 eax, eax
  000f0	74 01		 je	 SHORT $LN13@InitHashTa
  000f2	cc		 int	 3
$LN13@InitHashTa:
  000f3	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000f7	75 05		 jne	 SHORT $LN2@InitHashTa
  000f9	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@InitHashTa:
  000fe	33 c0		 xor	 eax, eax
  00100	75 b8		 jne	 SHORT $LN4@InitHashTa

; 1436 : 		memset(m_pHashTable, 0, sizeof(CAssoc*) * nHashSize);

  00102	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00105	c1 e0 02	 shl	 eax, 2
  00108	50		 push	 eax
  00109	6a 00		 push	 0
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _memset
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@InitHashTa:

; 1437 : 	}
; 1438 : 	m_nHashTableSize = nHashSize;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _nHashSize$[ebp]
  00120	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@InitHashTa:

; 1439 : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
?InitHashTable@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXIH@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::InitHashTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNextAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagUserTaskEntry@@@Z
_TEXT	SEGMENT
tv133 = -100						; size = 4
tv83 = -100						; size = 4
tv73 = -100						; size = 4
_nBucket$1 = -32					; size = 4
_pAssocNext$ = -28					; size = 4
___afx_condVal$2 = -24					; size = 4
_nBucket$3 = -20					; size = 4
___afx_condVal$4 = -16					; size = 4
_pAssocRet$ = -12					; size = 4
___afx_condVal$5 = -8					; size = 4
_this$ = -4						; size = 4
_rNextPosition$ = 8					; size = 4
_rKey$ = 12						; size = 4
_rValue$ = 16						; size = 4
?GetNextAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagUserTaskEntry@@@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetNextAssoc, COMDAT
; _this$ = ecx

; 1640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 	ASSERT_VALID(this);

  0000c	68 69 06 00 00	 push	 1641			; 00000669H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@GetNextAss:

; 1642 : 	ENSURE(m_pHashTable != NULL);  // never call on empty map

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN25@GetNextAss
  00028	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN26@GetNextAss
$LN25@GetNextAss:
  00031	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN26@GetNextAss:
  00038	8b 4d 9c	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$5[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  00042	75 14		 jne	 SHORT $LN27@GetNextAss
  00044	68 6a 06 00 00	 push	 1642			; 0000066aH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN27@GetNextAss
  00057	cc		 int	 3
$LN27@GetNextAss:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@GetNextAss
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetNextAss:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@GetNextAss

; 1643 : 
; 1644 : 	CAssoc* pAssocRet = (CAssoc*)rNextPosition;

  00067	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	89 4d f4	 mov	 DWORD PTR _pAssocRet$[ebp], ecx
$LN7@GetNextAss:

; 1645 : 	ENSURE(pAssocRet != NULL);

  0006f	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  00073	74 09		 je	 SHORT $LN28@GetNextAss
  00075	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  0007c	eb 07		 jmp	 SHORT $LN29@GetNextAss
$LN28@GetNextAss:
  0007e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN29@GetNextAss:
  00085	8b 45 9c	 mov	 eax, DWORD PTR tv83[ebp]
  00088	89 45 f0	 mov	 DWORD PTR ___afx_condVal$4[ebp], eax
  0008b	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  0008f	75 14		 jne	 SHORT $LN30@GetNextAss
  00091	68 6d 06 00 00	 push	 1645			; 0000066dH
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a0	85 c0		 test	 eax, eax
  000a2	74 01		 je	 SHORT $LN30@GetNextAss
  000a4	cc		 int	 3
$LN30@GetNextAss:
  000a5	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  000a9	75 05		 jne	 SHORT $LN5@GetNextAss
  000ab	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@GetNextAss:
  000b0	33 c0		 xor	 eax, eax
  000b2	75 bb		 jne	 SHORT $LN7@GetNextAss

; 1646 : 
; 1647 : 	if (pAssocRet == (CAssoc*) BEFORE_START_POSITION)

  000b4	83 7d f4 ff	 cmp	 DWORD PTR _pAssocRet$[ebp], -1
  000b8	75 7b		 jne	 SHORT $LN19@GetNextAss

; 1648 : 	{
; 1649 : 		// find the first association
; 1650 : 		for (UINT nBucket = 0; nBucket < m_nHashTableSize; nBucket++)

  000ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBucket$3[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN10@GetNextAss
$LN8@GetNextAss:
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _nBucket$3[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _nBucket$3[ebp], eax
$LN10@GetNextAss:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _nBucket$3[ebp]
  000d2	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d5	73 19		 jae	 SHORT $LN13@GetNextAss

; 1651 : 		{
; 1652 : 			if ((pAssocRet = m_pHashTable[nBucket]) != NULL)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _nBucket$3[ebp]
  000e0	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000e3	89 45 f4	 mov	 DWORD PTR _pAssocRet$[ebp], eax
  000e6	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000ea	74 02		 je	 SHORT $LN20@GetNextAss

; 1653 : 			{
; 1654 : 				break;

  000ec	eb 02		 jmp	 SHORT $LN13@GetNextAss
$LN20@GetNextAss:

; 1655 : 			}
; 1656 : 		}

  000ee	eb d3		 jmp	 SHORT $LN8@GetNextAss
$LN13@GetNextAss:

; 1657 : 		ENSURE(pAssocRet != NULL);  // must find something

  000f0	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000f4	74 09		 je	 SHORT $LN31@GetNextAss
  000f6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN32@GetNextAss
$LN31@GetNextAss:
  000ff	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN32@GetNextAss:
  00106	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  00109	89 45 e8	 mov	 DWORD PTR ___afx_condVal$2[ebp], eax
  0010c	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  00110	75 14		 jne	 SHORT $LN33@GetNextAss
  00112	68 79 06 00 00	 push	 1657			; 00000679H
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0011c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00121	85 c0		 test	 eax, eax
  00123	74 01		 je	 SHORT $LN33@GetNextAss
  00125	cc		 int	 3
$LN33@GetNextAss:
  00126	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  0012a	75 05		 jne	 SHORT $LN11@GetNextAss
  0012c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN11@GetNextAss:
  00131	33 c0		 xor	 eax, eax
  00133	75 bb		 jne	 SHORT $LN13@GetNextAss
$LN19@GetNextAss:

; 1658 : 	}
; 1659 : 
; 1660 : 	// find next association
; 1661 : 	ASSERT(AfxIsValidAddress(pAssocRet, sizeof(CAssoc)));

  00135	6a 01		 push	 1
  00137	6a 10		 push	 16			; 00000010H
  00139	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00142	85 c0		 test	 eax, eax
  00144	75 14		 jne	 SHORT $LN34@GetNextAss
  00146	68 7d 06 00 00	 push	 1661			; 0000067dH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00150	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00155	85 c0		 test	 eax, eax
  00157	74 01		 je	 SHORT $LN34@GetNextAss
  00159	cc		 int	 3
$LN34@GetNextAss:

; 1662 : 	CAssoc* pAssocNext;
; 1663 : 	if ((pAssocNext = pAssocRet->pNext) == NULL)

  0015a	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0015d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00160	89 4d e4	 mov	 DWORD PTR _pAssocNext$[ebp], ecx
  00163	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  00167	75 43		 jne	 SHORT $LN22@GetNextAss

; 1664 : 	{
; 1665 : 		// go to next bucket
; 1666 : 		for (UINT nBucket = (pAssocRet->nHashValue % m_nHashTableSize) + 1;

  00169	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00172	33 d2		 xor	 edx, edx
  00174	f7 71 08	 div	 DWORD PTR [ecx+8]
  00177	83 c2 01	 add	 edx, 1
  0017a	89 55 e0	 mov	 DWORD PTR _nBucket$1[ebp], edx
  0017d	eb 09		 jmp	 SHORT $LN16@GetNextAss
$LN14@GetNextAss:

; 1667 : 		  nBucket < m_nHashTableSize; nBucket++)

  0017f	8b 45 e0	 mov	 eax, DWORD PTR _nBucket$1[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 e0	 mov	 DWORD PTR _nBucket$1[ebp], eax
$LN16@GetNextAss:
  00188	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 4d e0	 mov	 ecx, DWORD PTR _nBucket$1[ebp]
  0018e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00191	73 19		 jae	 SHORT $LN22@GetNextAss

; 1668 : 			if ((pAssocNext = m_pHashTable[nBucket]) != NULL)

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00199	8b 55 e0	 mov	 edx, DWORD PTR _nBucket$1[ebp]
  0019c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0019f	89 45 e4	 mov	 DWORD PTR _pAssocNext$[ebp], eax
  001a2	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  001a6	74 02		 je	 SHORT $LN23@GetNextAss

; 1669 : 				break;

  001a8	eb 02		 jmp	 SHORT $LN22@GetNextAss
$LN23@GetNextAss:

; 1670 : 	}

  001aa	eb d3		 jmp	 SHORT $LN14@GetNextAss
$LN22@GetNextAss:

; 1671 : 
; 1672 : 	rNextPosition = (POSITION) pAssocNext;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  001af	8b 4d e4	 mov	 ecx, DWORD PTR _pAssocNext$[ebp]
  001b2	89 08		 mov	 DWORD PTR [eax], ecx

; 1673 : 
; 1674 : 	// fill in return data
; 1675 : 	rKey = pAssocRet->key;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _rKey$[ebp]
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bc	89 10		 mov	 DWORD PTR [eax], edx

; 1676 : 	rValue = pAssocRet->value;

  001be	8b 45 10	 mov	 eax, DWORD PTR _rValue$[ebp]
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001c4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c7	89 10		 mov	 DWORD PTR [eax], edx
$LN24@GetNextAss:

; 1677 : }

  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 0c 00	 ret	 12			; 0000000cH
?GetNextAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEXAAPAU__POSITION@@AAKAAPAUtagUserTaskEntry@@@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetNextAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetStartPosition@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?GetStartPosition@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEPAU__POSITION@@XZ PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetStartPosition, COMDAT
; _this$ = ecx

; 1354 : 	{ return (m_nCount == 0) ? NULL : BEFORE_START_POSITION; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	75 09		 jne	 SHORT $LN3@GetStartPo
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@GetStartPo
$LN3@GetStartPo:
  0001e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv66[ebp], -1
$LN4@GetStartPo:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetStartPosition@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEPAU__POSITION@@XZ ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetStartPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_pAssoc$2 = -12						; size = 4
_nHash$3 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveAll, COMDAT
; _this$ = ecx

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1444 : 	ASSERT_VALID(this);

  0000c	68 a4 05 00 00	 push	 1444			; 000005a4H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1445 : 
; 1446 : 	if (m_pHashTable != NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 60		 je	 SHORT $LN8@RemoveAll

; 1447 : 	{
; 1448 : 		// destroy elements (values and keys)
; 1449 : 		for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _nHash$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _nHash$3[ebp], eax
$LN4@RemoveAll:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$3[ebp]
  00040	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00043	73 24		 jae	 SHORT $LN3@RemoveAll

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _nHash$3[ebp]
  0004e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00051	89 45 f4	 mov	 DWORD PTR _pAssoc$2[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN7@RemoveAll
$LN5@RemoveAll:

; 1453 : 			  pAssoc = pAssoc->pNext)

  00056	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$2[ebp]
  00059	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005c	89 4d f4	 mov	 DWORD PTR _pAssoc$2[ebp], ecx
$LN7@RemoveAll:

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  0005f	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$2[ebp], 0
  00063	74 02		 je	 SHORT $LN6@RemoveAll

; 1454 : 			{
; 1455 : 				pAssoc->CAssoc::~CAssoc();
; 1456 : 			}

  00065	eb ef		 jmp	 SHORT $LN5@RemoveAll
$LN6@RemoveAll:

; 1457 : 		}

  00067	eb c8		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 1458 : 
; 1459 : 		// free hash table
; 1460 : 		delete[] m_pHashTable;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  00072	8b 55 b0	 mov	 edx, DWORD PTR $T1[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0007b	83 c4 04	 add	 esp, 4

; 1461 : 		m_pHashTable = NULL;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN8@RemoveAll:

; 1462 : 	}
; 1463 : 
; 1464 : 	m_nCount = 0;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1465 : 	m_pFreeList = NULL;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1466 : 	m_pBlocks->FreeDataChain();

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a2	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 1467 : 	m_pBlocks = NULL;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1468 : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?RemoveAll@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXXZ ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveKey@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEHK@Z
_TEXT	SEGMENT
_pAssoc$ = -16						; size = 4
_ppAssocPrev$ = -12					; size = 4
_nHashValue$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?RemoveKey@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEHK@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveKey, COMDAT
; _this$ = ecx

; 1611 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1612 : 	ASSERT_VALID(this);

  0000c	68 4c 06 00 00	 push	 1612			; 0000064cH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1613 : 
; 1614 : 	if (m_pHashTable == NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	75 07		 jne	 SHORT $LN5@RemoveKey

; 1615 : 		return FALSE;  // nothing in the table

  00028	33 c0		 xor	 eax, eax
  0002a	e9 83 00 00 00	 jmp	 $LN1@RemoveKey
$LN5@RemoveKey:

; 1616 : 
; 1617 : 	UINT nHashValue;
; 1618 : 	CAssoc** ppAssocPrev;
; 1619 : 	nHashValue = HashKey<ARG_KEY>(key);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$HashKey@K@@YGIK@Z	; HashKey<unsigned long>
  00038	89 45 f8	 mov	 DWORD PTR _nHashValue$[ebp], eax

; 1620 : 	ppAssocPrev = &m_pHashTable[nHashValue%m_nHashTableSize];

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  00041	33 d2		 xor	 edx, edx
  00043	f7 71 08	 div	 DWORD PTR [ecx+8]
  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0004f	89 55 f4	 mov	 DWORD PTR _ppAssocPrev$[ebp], edx

; 1621 : 
; 1622 : 	CAssoc* pAssoc;
; 1623 : 	for (pAssoc = *ppAssocPrev; pAssoc != NULL; pAssoc = pAssoc->pNext)

  00052	8b 45 f4	 mov	 eax, DWORD PTR _ppAssocPrev$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	89 4d f0	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0005a	eb 09		 jmp	 SHORT $LN4@RemoveKey
$LN2@RemoveKey:
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00062	89 4d f0	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@RemoveKey:
  00065	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  00069	74 45		 je	 SHORT $LN3@RemoveKey

; 1624 : 	{
; 1625 : 		if ((pAssoc->nHashValue == nHashValue) && CompareElements(&pAssoc->key, &key))

  0006b	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0006e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00071	3b 4d f8	 cmp	 ecx, DWORD PTR _nHashValue$[ebp]
  00074	75 2f		 jne	 SHORT $LN6@RemoveKey
  00076	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 ??$CompareElements@KK@@YGHPBK0@Z ; CompareElements<unsigned long,unsigned long>
  00083	85 c0		 test	 eax, eax
  00085	74 1e		 je	 SHORT $LN6@RemoveKey

; 1626 : 		{
; 1627 : 			// remove it
; 1628 : 			*ppAssocPrev = pAssoc->pNext;  // remove from list

  00087	8b 45 f4	 mov	 eax, DWORD PTR _ppAssocPrev$[ebp]
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  0008d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00090	89 10		 mov	 DWORD PTR [eax], edx

; 1629 : 			FreeAssoc(pAssoc);

  00092	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00095	50		 push	 eax
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?FreeAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEXPAVCAssoc@1@@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::FreeAssoc

; 1630 : 			return TRUE;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	eb 0d		 jmp	 SHORT $LN1@RemoveKey
$LN6@RemoveKey:

; 1631 : 		}
; 1632 : 		ppAssocPrev = &pAssoc->pNext;

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000a8	83 c0 08	 add	 eax, 8
  000ab	89 45 f4	 mov	 DWORD PTR _ppAssocPrev$[ebp], eax

; 1633 : 	}

  000ae	eb ac		 jmp	 SHORT $LN2@RemoveKey
$LN3@RemoveKey:

; 1634 : 	return FALSE;  // not found

  000b0	33 c0		 xor	 eax, eax
$LN1@RemoveKey:

; 1635 : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
?RemoveKey@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEHK@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::RemoveKey
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?SetAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXKPAUtagUserTaskEntry@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_newValue$ = 12						; size = 4
?SetAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXKPAUtagUserTaskEntry@@@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::SetAt, COMDAT
; _this$ = ecx

; 1350 : 	{ (*this)[key] = newValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??A?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEAAPAUtagUserTaskEntry@@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::operator[]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _newValue$[ebp]
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXKPAUtagUserTaskEntry@@@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::SetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??A?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEAAPAUtagUserTaskEntry@@K@Z
_TEXT	SEGMENT
tv85 = -88						; size = 4
___afx_condVal$1 = -20					; size = 4
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??A?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEAAPAUtagUserTaskEntry@@K@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::operator[], COMDAT
; _this$ = ecx

; 1585 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 : 	ASSERT_VALID(this);

  0000c	68 32 06 00 00	 push	 1586			; 00000632H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1587 : 
; 1588 : 	UINT nHashBucket, nHashValue;
; 1589 : 	CAssoc* pAssoc;
; 1590 : 	if ((pAssoc = GetAssocAt(key, nHashBucket, nHashValue)) == NULL)

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetAssocAt
  00033	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax
  00036	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003a	0f 85 9b 00 00
	00		 jne	 $LN5@operator

; 1591 : 	{
; 1592 : 		if (m_pHashTable == NULL)

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00047	75 11		 jne	 SHORT $LN4@operator

; 1593 : 			InitHashTable(m_nHashTableSize);

  00049	6a 01		 push	 1
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00051	51		 push	 ecx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEXIH@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::InitHashTable
$LN4@operator:

; 1594 : 
; 1595 : 		ENSURE(m_pHashTable);

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00061	74 09		 je	 SHORT $LN9@operator
  00063	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  0006a	eb 07		 jmp	 SHORT $LN10@operator
$LN9@operator:
  0006c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN10@operator:
  00073	8b 4d a8	 mov	 ecx, DWORD PTR tv85[ebp]
  00076	89 4d ec	 mov	 DWORD PTR ___afx_condVal$1[ebp], ecx
  00079	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0007d	75 14		 jne	 SHORT $LN11@operator
  0007f	68 3b 06 00 00	 push	 1595			; 0000063bH
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00089	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008e	85 c0		 test	 eax, eax
  00090	74 01		 je	 SHORT $LN11@operator
  00092	cc		 int	 3
$LN11@operator:
  00093	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00097	75 05		 jne	 SHORT $LN2@operator
  00099	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@operator:
  0009e	33 c0		 xor	 eax, eax
  000a0	75 b8		 jne	 SHORT $LN4@operator

; 1596 : 		// it doesn't exist, add a new Association
; 1597 : 		pAssoc = NewAssoc(key);

  000a2	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?NewAssoc@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IAEPAVCAssoc@1@K@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::NewAssoc
  000ae	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1598 : 		pAssoc->nHashValue = nHashValue;

  000b1	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000b4	8b 4d f4	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  000b7	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1599 : 		//'pAssoc->value' is a constructed object, nothing more
; 1600 : 
; 1601 : 		// put into hash table
; 1602 : 		pAssoc->pNext = m_pHashTable[nHashBucket];

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c0	8b 55 f0	 mov	 edx, DWORD PTR _pAssoc$[ebp]
  000c3	8b 45 f8	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  000c6	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  000c9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1603 : 		m_pHashTable[nHashBucket] = pAssoc;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	8b 55 f8	 mov	 edx, DWORD PTR _nHashBucket$[ebp]
  000d5	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000d8	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN5@operator:

; 1604 : 	}
; 1605 : 	return pAssoc->value;  // return new reference

  000db	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000de	83 c0 04	 add	 eax, 4
$LN8@operator:

; 1606 : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
??A?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAEAAPAUtagUserTaskEntry@@K@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z
_TEXT	SEGMENT
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_rValue$ = 12						; size = 4
?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z PROC ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Lookup, COMDAT
; _this$ = ecx

; 1551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 : 	ASSERT_VALID(this);

  0000c	68 10 06 00 00	 push	 1552			; 00000610H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1553 : 
; 1554 : 	UINT nHashBucket, nHashValue;
; 1555 : 	CAssoc* pAssoc = GetAssocAt(key, nHashBucket, nHashValue);

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR _key$[ebp]
  0002a	52		 push	 edx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@IBEPAVCAssoc@1@KAAI0@Z ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::GetAssocAt
  00033	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1556 : 	if (pAssoc == NULL)

  00036	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003a	75 04		 jne	 SHORT $LN2@Lookup

; 1557 : 		return FALSE;  // not in map

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 10		 jmp	 SHORT $LN1@Lookup
$LN2@Lookup:

; 1558 : 
; 1559 : 	rValue = pAssoc->value;

  00040	8b 45 0c	 mov	 eax, DWORD PTR _rValue$[ebp]
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  00046	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00049	89 10		 mov	 DWORD PTR [eax], edx

; 1560 : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1
$LN1@Lookup:

; 1561 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?Lookup@?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QBEHKAAPAUtagUserTaskEntry@@@Z ENDP ; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::Lookup
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nBlockSize$ = 8					; size = 4
??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z PROC	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>, COMDAT
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@6B@

; 1404 : 	ASSERT(nBlockSize > 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nBlockSize$[ebp], 0
  00047	7f 14		 jg	 SHORT $LN3@CMap
  00049	68 7c 05 00 00	 push	 1404			; 0000057cH
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@CMap
  0005c	cc		 int	 3
$LN3@CMap:

; 1405 : 
; 1406 : 	m_pHashTable = NULL;

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1407 : 	m_nHashTableSize = 17;  // default size

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 08 11 00
	00 00		 mov	 DWORD PTR [eax+8], 17	; 00000011H

; 1408 : 	m_nCount = 0;

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1409 : 	m_pFreeList = NULL;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1410 : 	m_pBlocks = NULL;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1411 : 	m_nBlockSize = nBlockSize;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _nBlockSize$[ebp]
  00095	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1412 : }

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CMap@KKPAUtagUserTaskEntry@@PAU1@@@QAE@H@Z ENDP	; CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>::CMap<unsigned long,unsigned long,tagUserTaskEntry *,tagUserTaskEntry *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??_G?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEPAXI@Z PROC	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::~CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 21		 je	 SHORT $LN2@scalar
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001f	83 e0 04	 and	 eax, 4
  00022	75 0b		 jne	 SHORT $LN3@scalar
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002d	eb 0e		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  0002f	6a 1c		 push	 28			; 0000001cH
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003a	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEPAXI@Z ENDP	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?AssertValid@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXXZ PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::AssertValid, COMDAT
; _this$ = ecx

; 1820 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1821 : 	CObject::AssertValid();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?AssertValid@CObject@@UBEXXZ ; CObject::AssertValid

; 1822 : 
; 1823 : 	ASSERT(m_nHashTableSize > 0);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001b	77 14		 ja	 SHORT $LN3@AssertVali
  0001d	68 1f 07 00 00	 push	 1823			; 0000071fH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00027	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0002c	85 c0		 test	 eax, eax
  0002e	74 01		 je	 SHORT $LN3@AssertVali
  00030	cc		 int	 3
$LN3@AssertVali:

; 1824 : 	ASSERT(m_nCount == 0 || m_pHashTable != NULL);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00038	74 1d		 je	 SHORT $LN1@AssertVali
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00041	75 14		 jne	 SHORT $LN1@AssertVali
  00043	68 20 07 00 00	 push	 1824			; 00000720H
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004d	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00052	85 c0		 test	 eax, eax
  00054	74 01		 je	 SHORT $LN1@AssertVali
  00056	cc		 int	 3
$LN1@AssertVali:

; 1825 : 		// non-empty map should have hash table
; 1826 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?AssertValid@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXXZ ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Dump@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_pos$1 = -16						; size = 4
_val$2 = -12						; size = 4
_key$3 = -8						; size = 2
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXAAVCDumpContext@@@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Dump, COMDAT
; _this$ = ecx

; 1794 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1795 : 	CObject::Dump(dc);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 1796 : 
; 1797 : 	dc << "with " << m_nCount << " elements";

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_09HCLNAIDE@?5elements@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00023	51		 push	 ecx
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_05PLCFPPOI@with?5@
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0002c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1798 : 	if (dc.GetDepth() > 0)

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetDepth@CDumpContext@@QBEHXZ ; CDumpContext::GetDepth
  00047	85 c0		 test	 eax, eax
  00049	7e 71		 jle	 SHORT $LN4@Dump

; 1799 : 	{
; 1800 : 		// Dump in format "[key] -> value"
; 1801 : 		KEY key[1];
; 1802 : 		VALUE val[1];
; 1803 : 
; 1804 : 		POSITION pos = GetStartPosition();

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetStartPosition
  00053	89 45 f0	 mov	 DWORD PTR _pos$1[ebp], eax
$LN2@Dump:

; 1805 : 		while (pos != NULL)

  00056	83 7d f0 00	 cmp	 DWORD PTR _pos$1[ebp], 0
  0005a	74 60		 je	 SHORT $LN4@Dump

; 1806 : 		{
; 1807 : 			GetNextAssoc(pos, key[0], val[0]);

  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8d 54 0d f4	 lea	 edx, DWORD PTR _val$2[ebp+ecx]
  00068	52		 push	 edx
  00069	b8 02 00 00 00	 mov	 eax, 2
  0006e	6b c8 00	 imul	 ecx, eax, 0
  00071	8d 54 0d f8	 lea	 edx, DWORD PTR _key$3[ebp+ecx]
  00075	52		 push	 edx
  00076	8d 45 f0	 lea	 eax, DWORD PTR _pos$1[ebp]
  00079	50		 push	 eax
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetNextAssoc

; 1808 : 			dc << "\n\t[";

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_03OHJIHPJH@?6?7?$FL@
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0008a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1809 : 			DumpElements<KEY>(dc, key, 1);

  0008f	6a 01		 push	 1
  00091	8d 45 f8	 lea	 eax, DWORD PTR _key$3[ebp]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$DumpElements@G@@YGXAAVCDumpContext@@PBGH@Z ; DumpElements<unsigned short>

; 1810 : 			dc << "] = ";

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_04OAFLPOMH@?$FN?5?$DN?5@
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000a6	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1811 : 			DumpElements<VALUE>(dc, val, 1);

  000ab	6a 01		 push	 1
  000ad	8d 45 f4	 lea	 eax, DWORD PTR _val$2[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ??$DumpElements@PAUtagTaskParameter@@@@YGXAAVCDumpContext@@PBQAUtagTaskParameter@@H@Z ; DumpElements<tagTaskParameter *>

; 1812 : 		}

  000ba	eb 9a		 jmp	 SHORT $LN2@Dump
$LN4@Dump:

; 1813 : 	}
; 1814 : 
; 1815 : 	dc << "\n";

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  000c4	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<

; 1816 : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?Dump@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UBEXAAVCDumpContext@@@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Serialize@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEXAAVCArchive@@@Z
_TEXT	SEGMENT
tv154 = -100						; size = 4
_newValue$1 = -32					; size = 4
_newKey$2 = -28						; size = 2
_nNewCount$3 = -24					; size = 4
_pValue$4 = -20						; size = 4
_pKey$5 = -16						; size = 4
_pAssoc$6 = -12						; size = 4
_nHash$7 = -8						; size = 4
_this$ = -4						; size = 4
_ar$ = 8						; size = 4
?Serialize@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEXAAVCArchive@@@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Serialize, COMDAT
; _this$ = ecx

; 1743 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1744 : 	ASSERT_VALID(this);

  0000c	68 d0 06 00 00	 push	 1744			; 000006d0H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1745 : 
; 1746 : 	CObject::Serialize(ar);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Serialize@CObject@@UAEXAAVCArchive@@@Z ; CObject::Serialize

; 1747 : 
; 1748 : 	if (ar.IsStoring())

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  00033	85 c0		 test	 eax, eax
  00035	0f 84 b3 00 00
	00		 je	 $LN10@Serialize

; 1749 : 	{
; 1750 : 		ar.WriteCount(m_nCount);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00041	51		 push	 ecx
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00045	e8 00 00 00 00	 call	 ?WriteCount@CArchive@@QAEXK@Z ; CArchive::WriteCount

; 1751 : 		if (m_nCount == 0)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00051	75 05		 jne	 SHORT $LN12@Serialize

; 1752 : 			return;  // nothing more to do

  00053	e9 f9 00 00 00	 jmp	 $LN1@Serialize
$LN12@Serialize:

; 1753 : 
; 1754 : 		ASSERT(m_pHashTable != NULL);

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005f	75 14		 jne	 SHORT $LN15@Serialize
  00061	68 da 06 00 00	 push	 1754			; 000006daH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0006b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00070	85 c0		 test	 eax, eax
  00072	74 01		 je	 SHORT $LN15@Serialize
  00074	cc		 int	 3
$LN15@Serialize:

; 1755 : 		if (m_pHashTable != NULL)

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0007c	74 6e		 je	 SHORT $LN13@Serialize

; 1756 : 		{
; 1757 : 			for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$7[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN4@Serialize
$LN2@Serialize:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _nHash$7[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _nHash$7[ebp], eax
$LN4@Serialize:
  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$7[ebp]
  00096	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00099	73 51		 jae	 SHORT $LN13@Serialize

; 1758 : 			{
; 1759 : 				CAssoc* pAssoc;
; 1760 : 				for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	8b 55 f8	 mov	 edx, DWORD PTR _nHash$7[ebp]
  000a4	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000a7	89 45 f4	 mov	 DWORD PTR _pAssoc$6[ebp], eax
  000aa	eb 09		 jmp	 SHORT $LN7@Serialize
$LN5@Serialize:
  000ac	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	89 4d f4	 mov	 DWORD PTR _pAssoc$6[ebp], ecx
$LN7@Serialize:
  000b5	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$6[ebp], 0
  000b9	74 2f		 je	 SHORT $LN6@Serialize

; 1761 : 				{
; 1762 : 					KEY* pKey;
; 1763 : 					VALUE* pValue;
; 1764 : 					/*
; 1765 : 					* in some cases the & operator might be overloaded, and we cannot use it to
; 1766 : 					* obtain the address of a given object.  We then use the following trick to
; 1767 : 					* get the address
; 1768 : 					*/
; 1769 : 					pKey = reinterpret_cast< KEY* >( &reinterpret_cast< int& >( const_cast< KEY& > ( static_cast< const KEY& >( pAssoc->key ) ) ) );

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000be	89 45 f0	 mov	 DWORD PTR _pKey$5[ebp], eax

; 1770 : 					pValue = reinterpret_cast< VALUE* >( &reinterpret_cast< int& >( static_cast< VALUE& >( pAssoc->value ) ) );

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$6[ebp]
  000c4	83 c0 04	 add	 eax, 4
  000c7	89 45 ec	 mov	 DWORD PTR _pValue$4[ebp], eax

; 1771 : 					SerializeElements<KEY>(ar, pKey, 1);

  000ca	6a 01		 push	 1
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _pKey$5[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$SerializeElements@G@@YGXAAVCArchive@@PAGH@Z ; SerializeElements<unsigned short>

; 1772 : 					SerializeElements<VALUE>(ar, pValue, 1);

  000d9	6a 01		 push	 1
  000db	8b 45 ec	 mov	 eax, DWORD PTR _pValue$4[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagTaskParameter@@@@YGXAAVCArchive@@PAPAUtagTaskParameter@@H@Z ; SerializeElements<tagTaskParameter *>

; 1773 : 				}

  000e8	eb c2		 jmp	 SHORT $LN5@Serialize
$LN6@Serialize:

; 1774 : 			}

  000ea	eb 9b		 jmp	 SHORT $LN2@Serialize
$LN13@Serialize:

; 1775 : 		}
; 1776 : 	}
; 1777 : 	else

  000ec	eb 63		 jmp	 SHORT $LN1@Serialize
$LN10@Serialize:

; 1778 : 	{
; 1779 : 		DWORD_PTR nNewCount = ar.ReadCount();

  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000f1	e8 00 00 00 00	 call	 ?ReadCount@CArchive@@QAEKXZ ; CArchive::ReadCount
  000f6	89 45 e8	 mov	 DWORD PTR _nNewCount$3[ebp], eax
$LN8@Serialize:

; 1780 : 		while (nNewCount--)

  000f9	8b 45 e8	 mov	 eax, DWORD PTR _nNewCount$3[ebp]
  000fc	89 45 9c	 mov	 DWORD PTR tv154[ebp], eax
  000ff	8b 4d e8	 mov	 ecx, DWORD PTR _nNewCount$3[ebp]
  00102	83 e9 01	 sub	 ecx, 1
  00105	89 4d e8	 mov	 DWORD PTR _nNewCount$3[ebp], ecx
  00108	83 7d 9c 00	 cmp	 DWORD PTR tv154[ebp], 0
  0010c	74 43		 je	 SHORT $LN1@Serialize

; 1781 : 		{
; 1782 : 			KEY newKey[1];
; 1783 : 			VALUE newValue[1];
; 1784 : 			SerializeElements<KEY>(ar, newKey, 1);

  0010e	6a 01		 push	 1
  00110	8d 45 e4	 lea	 eax, DWORD PTR _newKey$2[ebp]
  00113	50		 push	 eax
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00117	51		 push	 ecx
  00118	e8 00 00 00 00	 call	 ??$SerializeElements@G@@YGXAAVCArchive@@PAGH@Z ; SerializeElements<unsigned short>

; 1785 : 			SerializeElements<VALUE>(ar, newValue, 1);

  0011d	6a 01		 push	 1
  0011f	8d 45 e0	 lea	 eax, DWORD PTR _newValue$1[ebp]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$SerializeElements@PAUtagTaskParameter@@@@YGXAAVCArchive@@PAPAUtagTaskParameter@@H@Z ; SerializeElements<tagTaskParameter *>

; 1786 : 			SetAt(newKey[0], newValue[0]);

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	8b 54 0d e0	 mov	 edx, DWORD PTR _newValue$1[ebp+ecx]
  00138	52		 push	 edx
  00139	b8 02 00 00 00	 mov	 eax, 2
  0013e	6b c8 00	 imul	 ecx, eax, 0
  00141	0f b7 54 0d e4	 movzx	 edx, WORD PTR _newKey$2[ebp+ecx]
  00146	52		 push	 edx
  00147	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	e8 00 00 00 00	 call	 ?SetAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXGPAUtagTaskParameter@@@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::SetAt

; 1787 : 		}

  0014f	eb a8		 jmp	 SHORT $LN8@Serialize
$LN1@Serialize:

; 1788 : 	}
; 1789 : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 04 00	 ret	 4
?Serialize@?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAEXAAVCArchive@@@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ PROC	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::~CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>, COMDAT
; _this$ = ecx

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@

; 1473 : 	RemoveAll();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::RemoveAll

; 1474 : 	ASSERT(m_nCount == 0);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 14		 je	 SHORT $LN1@CMap
  00045	68 c2 05 00 00	 push	 1474			; 000005c2H
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004f	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00054	85 c0		 test	 eax, eax
  00056	74 01		 je	 SHORT $LN1@CMap
  00058	cc		 int	 3
$LN1@CMap:

; 1475 : }

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CMap@GGPAUtagTaskParameter@@PAU1@@@UAE@XZ ENDP	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::~CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetAssocAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IBEPAVCAssoc@1@GAAI0@Z
_TEXT	SEGMENT
_pAssoc$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 2
_nHashBucket$ = 12					; size = 4
_nHashValue$ = 16					; size = 4
?GetAssocAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IBEPAVCAssoc@1@GAAI0@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetAssocAt, COMDAT
; _this$ = ecx

; 1532 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 : 	nHashValue = HashKey<ARG_KEY>(key);

  0000c	0f b7 45 08	 movzx	 eax, WORD PTR _key$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??$HashKey@G@@YGIG@Z	; HashKey<unsigned short>
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00019	89 01		 mov	 DWORD PTR [ecx], eax

; 1534 : 	nHashBucket = nHashValue % m_nHashTableSize;

  0001b	8b 45 10	 mov	 eax, DWORD PTR _nHashValue$[ebp]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	33 d2		 xor	 edx, edx
  00025	f7 71 08	 div	 DWORD PTR [ecx+8]
  00028	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0002b	89 10		 mov	 DWORD PTR [eax], edx

; 1535 : 
; 1536 : 	if (m_pHashTable == NULL)

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 04		 jne	 SHORT $LN5@GetAssocAt

; 1537 : 		return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	eb 49		 jmp	 SHORT $LN1@GetAssocAt
$LN5@GetAssocAt:

; 1538 : 
; 1539 : 	// see if it exists
; 1540 : 	CAssoc* pAssoc;
; 1541 : 	for (pAssoc = m_pHashTable[nHashBucket]; pAssoc != NULL; pAssoc = pAssoc->pNext)

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00042	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00045	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00048	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
  0004b	eb 09		 jmp	 SHORT $LN4@GetAssocAt
$LN2@GetAssocAt:
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00050	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00053	89 4d f8	 mov	 DWORD PTR _pAssoc$[ebp], ecx
$LN4@GetAssocAt:
  00056	83 7d f8 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0005a	74 25		 je	 SHORT $LN3@GetAssocAt

; 1542 : 	{
; 1543 : 		if (pAssoc->nHashValue == nHashValue && CompareElements(&pAssoc->key, &key))

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0005f	8b 4d 10	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  00062	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00065	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00067	75 16		 jne	 SHORT $LN6@GetAssocAt
  00069	8d 45 08	 lea	 eax, DWORD PTR _key$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ??$CompareElements@GG@@YGHPBG0@Z ; CompareElements<unsigned short,unsigned short>
  00076	85 c0		 test	 eax, eax
  00078	74 05		 je	 SHORT $LN6@GetAssocAt

; 1544 : 			return pAssoc;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  0007d	eb 04		 jmp	 SHORT $LN1@GetAssocAt
$LN6@GetAssocAt:

; 1545 : 	}

  0007f	eb cc		 jmp	 SHORT $LN2@GetAssocAt
$LN3@GetAssocAt:

; 1546 : 	return NULL;

  00081	33 c0		 xor	 eax, eax
$LN1@GetAssocAt:

; 1547 : }

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 0c 00	 ret	 12			; 0000000cH
?GetAssocAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IBEPAVCAssoc@1@GAAI0@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetAssocAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?NewAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAEPAVCAssoc@1@G@Z
_TEXT	SEGMENT
tv88 = -100						; size = 4
$T1 = -96						; size = 4
_pTemp$ = -28						; size = 4
_pAssoc$ = -24						; size = 4
___afx_condVal$2 = -20					; size = 4
_i$3 = -16						; size = 4
_pAssoc$4 = -12						; size = 4
_newBlock$5 = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 2
?NewAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAEPAVCAssoc@1@G@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::NewAssoc, COMDAT
; _this$ = ecx

; 1480 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1481 : 	if (m_pFreeList == NULL)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00013	75 72		 jne	 SHORT $LN7@NewAssoc

; 1482 : 	{
; 1483 : 		// add another block
; 1484 : 		CPlex* newBlock = CPlex::Create(m_pBlocks, m_nBlockSize, sizeof(CMap::CAssoc));

  00015	6a 10		 push	 16			; 00000010H
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	83 c2 14	 add	 edx, 20			; 00000014H
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?Create@CPlex@@SGPAU1@AAPAU1@II@Z ; CPlex::Create
  0002a	89 45 f8	 mov	 DWORD PTR _newBlock$5[ebp], eax

; 1485 : 		// chain them into free list
; 1486 : 		CMap::CAssoc* pAssoc = (CMap::CAssoc*) newBlock->data();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _newBlock$5[ebp]
  00030	e8 00 00 00 00	 call	 ?data@CPlex@@QAEPAXXZ	; CPlex::data
  00035	89 45 f4	 mov	 DWORD PTR _pAssoc$4[ebp], eax

; 1487 : 		// free in reverse order to make it easier to debug
; 1488 : 		pAssoc += m_nBlockSize - 1;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	c1 e1 04	 shl	 ecx, 4
  00044	03 4d f4	 add	 ecx, DWORD PTR _pAssoc$4[ebp]
  00047	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx

; 1489 : 		for (INT_PTR i = m_nBlockSize-1; i >= 0; i--, pAssoc--)

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	83 e9 01	 sub	 ecx, 1
  00053	89 4d f0	 mov	 DWORD PTR _i$3[ebp], ecx
  00056	eb 12		 jmp	 SHORT $LN4@NewAssoc
$LN2@NewAssoc:
  00058	8b 45 f0	 mov	 eax, DWORD PTR _i$3[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR _i$3[ebp], eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00064	83 e9 10	 sub	 ecx, 16			; 00000010H
  00067	89 4d f4	 mov	 DWORD PTR _pAssoc$4[ebp], ecx
$LN4@NewAssoc:
  0006a	83 7d f0 00	 cmp	 DWORD PTR _i$3[ebp], 0
  0006e	7c 17		 jl	 SHORT $LN7@NewAssoc

; 1490 : 		{
; 1491 : 			pAssoc->pNext = m_pFreeList;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$4[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1492 : 			m_pFreeList = pAssoc;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _pAssoc$4[ebp]
  00082	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1493 : 		}

  00085	eb d1		 jmp	 SHORT $LN2@NewAssoc
$LN7@NewAssoc:

; 1494 : 	}
; 1495 : 	ENSURE(m_pFreeList != NULL);  // we must have something

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0008e	74 09		 je	 SHORT $LN11@NewAssoc
  00090	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00097	eb 07		 jmp	 SHORT $LN12@NewAssoc
$LN11@NewAssoc:
  00099	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN12@NewAssoc:
  000a0	8b 4d 9c	 mov	 ecx, DWORD PTR tv88[ebp]
  000a3	89 4d ec	 mov	 DWORD PTR ___afx_condVal$2[ebp], ecx
  000a6	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000aa	75 14		 jne	 SHORT $LN13@NewAssoc
  000ac	68 d7 05 00 00	 push	 1495			; 000005d7H
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000b6	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000bb	85 c0		 test	 eax, eax
  000bd	74 01		 je	 SHORT $LN13@NewAssoc
  000bf	cc		 int	 3
$LN13@NewAssoc:
  000c0	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  000c4	75 05		 jne	 SHORT $LN5@NewAssoc
  000c6	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@NewAssoc:
  000cb	33 c0		 xor	 eax, eax
  000cd	75 b8		 jne	 SHORT $LN7@NewAssoc

; 1496 : 
; 1497 : 	CMap::CAssoc* pAssoc = m_pFreeList;

  000cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d5	89 4d e8	 mov	 DWORD PTR _pAssoc$[ebp], ecx

; 1498 : 
; 1499 : 	// zero the memory
; 1500 : 	CMap::CAssoc* pTemp = pAssoc->pNext;

  000d8	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000db	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000de	89 4d e4	 mov	 DWORD PTR _pTemp$[ebp], ecx

; 1501 : 	memset( pAssoc, 0, sizeof(CMap::CAssoc) );

  000e1	6a 10		 push	 16			; 00000010H
  000e3	6a 00		 push	 0
  000e5	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _memset
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1502 : 	pAssoc->pNext = pTemp;

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _pTemp$[ebp]
  000f7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1503 : 
; 1504 : 	m_pFreeList = m_pFreeList->pNext;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00100	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00106	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1505 : 	m_nCount++;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010f	83 c1 01	 add	 ecx, 1
  00112	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00115	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1506 : 	ASSERT(m_nCount > 0);  // make sure we don't overflow

  00118	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0011f	7f 14		 jg	 SHORT $LN14@NewAssoc
  00121	68 e2 05 00 00	 push	 1506			; 000005e2H
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0012b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00130	85 c0		 test	 eax, eax
  00132	74 01		 je	 SHORT $LN14@NewAssoc
  00134	cc		 int	 3
$LN14@NewAssoc:

; 1507 : #pragma push_macro("new")
; 1508 : #undef new
; 1509 : 	::new(pAssoc) CMap::CAssoc(key);

  00135	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  00138	50		 push	 eax
  00139	6a 10		 push	 16			; 00000010H
  0013b	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00140	83 c4 08	 add	 esp, 8
  00143	89 45 a0	 mov	 DWORD PTR $T1[ebp], eax
  00146	0f b7 4d 08	 movzx	 ecx, WORD PTR _key$[ebp]
  0014a	51		 push	 ecx
  0014b	8b 4d a0	 mov	 ecx, DWORD PTR $T1[ebp]
  0014e	e8 00 00 00 00	 call	 ??0CAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CAssoc::CAssoc

; 1510 : #pragma pop_macro("new")
; 1511 : 	return pAssoc;

  00153	8b 45 e8	 mov	 eax, DWORD PTR _pAssoc$[ebp]
$LN10@NewAssoc:

; 1512 : }

  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 04 00	 ret	 4
?NewAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAEPAVCAssoc@1@G@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::NewAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?InitHashTable@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXIH@Z
_TEXT	SEGMENT
tv137 = -84						; size = 4
$T1 = -80						; size = 4
$T2 = -76						; size = 4
___afx_condVal$3 = -8					; size = 4
_this$ = -4						; size = 4
_nHashSize$ = 8						; size = 4
_bAllocNow$ = 12					; size = 4
?InitHashTable@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXIH@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::InitHashTable, COMDAT
; _this$ = ecx

; 1420 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 : 	ASSERT_VALID(this);

  0000c	68 8d 05 00 00	 push	 1421			; 0000058dH
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1422 : 	ASSERT(m_nCount == 0);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00026	74 14		 je	 SHORT $LN9@InitHashTa
  00028	68 8e 05 00 00	 push	 1422			; 0000058eH
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $LN9@InitHashTa
  0003b	cc		 int	 3
$LN9@InitHashTa:

; 1423 : 	ASSERT(nHashSize > 0);

  0003c	83 7d 08 00	 cmp	 DWORD PTR _nHashSize$[ebp], 0
  00040	77 14		 ja	 SHORT $LN10@InitHashTa
  00042	68 8f 05 00 00	 push	 1423			; 0000058fH
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00051	85 c0		 test	 eax, eax
  00053	74 01		 je	 SHORT $LN10@InitHashTa
  00055	cc		 int	 3
$LN10@InitHashTa:

; 1424 : 
; 1425 : 	if (m_pHashTable != NULL)

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0005d	74 1f		 je	 SHORT $LN5@InitHashTa

; 1426 : 	{
; 1427 : 		// free hash table
; 1428 : 		delete[] m_pHashTable;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	89 4d b4	 mov	 DWORD PTR $T2[ebp], ecx
  00068	8b 55 b4	 mov	 edx, DWORD PTR $T2[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00071	83 c4 04	 add	 esp, 4

; 1429 : 		m_pHashTable = NULL;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN5@InitHashTa:

; 1430 : 	}
; 1431 : 
; 1432 : 	if (bAllocNow)

  0007e	83 7d 0c 00	 cmp	 DWORD PTR _bAllocNow$[ebp], 0
  00082	0f 84 92 00 00
	00		 je	 $LN6@InitHashTa

; 1433 : 	{
; 1434 : 		m_pHashTable = new CAssoc* [nHashSize];

  00088	68 9a 05 00 00	 push	 1434			; 0000059aH
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00092	33 c9		 xor	 ecx, ecx
  00094	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00097	ba 04 00 00 00	 mov	 edx, 4
  0009c	f7 e2		 mul	 edx
  0009e	0f 90 c1	 seto	 cl
  000a1	f7 d9		 neg	 ecx
  000a3	0b c8		 or	 ecx, eax
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDH@Z	; operator new[]
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  000b7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN4@InitHashTa:

; 1435 : 		ENSURE(m_pHashTable != NULL);

  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000c1	74 09		 je	 SHORT $LN11@InitHashTa
  000c3	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  000ca	eb 07		 jmp	 SHORT $LN12@InitHashTa
$LN11@InitHashTa:
  000cc	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN12@InitHashTa:
  000d3	8b 4d ac	 mov	 ecx, DWORD PTR tv137[ebp]
  000d6	89 4d f8	 mov	 DWORD PTR ___afx_condVal$3[ebp], ecx
  000d9	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000dd	75 14		 jne	 SHORT $LN13@InitHashTa
  000df	68 9b 05 00 00	 push	 1435			; 0000059bH
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  000e9	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000ee	85 c0		 test	 eax, eax
  000f0	74 01		 je	 SHORT $LN13@InitHashTa
  000f2	cc		 int	 3
$LN13@InitHashTa:
  000f3	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$3[ebp], 0
  000f7	75 05		 jne	 SHORT $LN2@InitHashTa
  000f9	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@InitHashTa:
  000fe	33 c0		 xor	 eax, eax
  00100	75 b8		 jne	 SHORT $LN4@InitHashTa

; 1436 : 		memset(m_pHashTable, 0, sizeof(CAssoc*) * nHashSize);

  00102	8b 45 08	 mov	 eax, DWORD PTR _nHashSize$[ebp]
  00105	c1 e0 02	 shl	 eax, 2
  00108	50		 push	 eax
  00109	6a 00		 push	 0
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 _memset
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@InitHashTa:

; 1437 : 	}
; 1438 : 	m_nHashTableSize = nHashSize;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _nHashSize$[ebp]
  00120	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@InitHashTa:

; 1439 : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
?InitHashTable@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXIH@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::InitHashTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z
_TEXT	SEGMENT
tv133 = -100						; size = 4
tv83 = -100						; size = 4
tv73 = -100						; size = 4
_nBucket$1 = -32					; size = 4
_pAssocNext$ = -28					; size = 4
___afx_condVal$2 = -24					; size = 4
_nBucket$3 = -20					; size = 4
___afx_condVal$4 = -16					; size = 4
_pAssocRet$ = -12					; size = 4
___afx_condVal$5 = -8					; size = 4
_this$ = -4						; size = 4
_rNextPosition$ = 8					; size = 4
_rKey$ = 12						; size = 4
_rValue$ = 16						; size = 4
?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetNextAssoc, COMDAT
; _this$ = ecx

; 1640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 	ASSERT_VALID(this);

  0000c	68 69 06 00 00	 push	 1641			; 00000669H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject
$LN4@GetNextAss:

; 1642 : 	ENSURE(m_pHashTable != NULL);  // never call on empty map

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 09		 je	 SHORT $LN25@GetNextAss
  00028	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN26@GetNextAss
$LN25@GetNextAss:
  00031	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN26@GetNextAss:
  00038	8b 4d 9c	 mov	 ecx, DWORD PTR tv73[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR ___afx_condVal$5[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  00042	75 14		 jne	 SHORT $LN27@GetNextAss
  00044	68 6a 06 00 00	 push	 1642			; 0000066aH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0004e	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00053	85 c0		 test	 eax, eax
  00055	74 01		 je	 SHORT $LN27@GetNextAss
  00057	cc		 int	 3
$LN27@GetNextAss:
  00058	83 7d f8 00	 cmp	 DWORD PTR ___afx_condVal$5[ebp], 0
  0005c	75 05		 jne	 SHORT $LN2@GetNextAss
  0005e	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@GetNextAss:
  00063	33 c0		 xor	 eax, eax
  00065	75 b8		 jne	 SHORT $LN4@GetNextAss

; 1643 : 
; 1644 : 	CAssoc* pAssocRet = (CAssoc*)rNextPosition;

  00067	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	89 4d f4	 mov	 DWORD PTR _pAssocRet$[ebp], ecx
$LN7@GetNextAss:

; 1645 : 	ENSURE(pAssocRet != NULL);

  0006f	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  00073	74 09		 je	 SHORT $LN28@GetNextAss
  00075	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  0007c	eb 07		 jmp	 SHORT $LN29@GetNextAss
$LN28@GetNextAss:
  0007e	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN29@GetNextAss:
  00085	8b 45 9c	 mov	 eax, DWORD PTR tv83[ebp]
  00088	89 45 f0	 mov	 DWORD PTR ___afx_condVal$4[ebp], eax
  0008b	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  0008f	75 14		 jne	 SHORT $LN30@GetNextAss
  00091	68 6d 06 00 00	 push	 1645			; 0000066dH
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0009b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a0	85 c0		 test	 eax, eax
  000a2	74 01		 je	 SHORT $LN30@GetNextAss
  000a4	cc		 int	 3
$LN30@GetNextAss:
  000a5	83 7d f0 00	 cmp	 DWORD PTR ___afx_condVal$4[ebp], 0
  000a9	75 05		 jne	 SHORT $LN5@GetNextAss
  000ab	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN5@GetNextAss:
  000b0	33 c0		 xor	 eax, eax
  000b2	75 bb		 jne	 SHORT $LN7@GetNextAss

; 1646 : 
; 1647 : 	if (pAssocRet == (CAssoc*) BEFORE_START_POSITION)

  000b4	83 7d f4 ff	 cmp	 DWORD PTR _pAssocRet$[ebp], -1
  000b8	75 7b		 jne	 SHORT $LN19@GetNextAss

; 1648 : 	{
; 1649 : 		// find the first association
; 1650 : 		for (UINT nBucket = 0; nBucket < m_nHashTableSize; nBucket++)

  000ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nBucket$3[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN10@GetNextAss
$LN8@GetNextAss:
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _nBucket$3[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _nBucket$3[ebp], eax
$LN10@GetNextAss:
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _nBucket$3[ebp]
  000d2	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d5	73 19		 jae	 SHORT $LN13@GetNextAss

; 1651 : 		{
; 1652 : 			if ((pAssocRet = m_pHashTable[nBucket]) != NULL)

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _nBucket$3[ebp]
  000e0	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000e3	89 45 f4	 mov	 DWORD PTR _pAssocRet$[ebp], eax
  000e6	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000ea	74 02		 je	 SHORT $LN20@GetNextAss

; 1653 : 			{
; 1654 : 				break;

  000ec	eb 02		 jmp	 SHORT $LN13@GetNextAss
$LN20@GetNextAss:

; 1655 : 			}
; 1656 : 		}

  000ee	eb d3		 jmp	 SHORT $LN8@GetNextAss
$LN13@GetNextAss:

; 1657 : 		ENSURE(pAssocRet != NULL);  // must find something

  000f0	83 7d f4 00	 cmp	 DWORD PTR _pAssocRet$[ebp], 0
  000f4	74 09		 je	 SHORT $LN31@GetNextAss
  000f6	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
  000fd	eb 07		 jmp	 SHORT $LN32@GetNextAss
$LN31@GetNextAss:
  000ff	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN32@GetNextAss:
  00106	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  00109	89 45 e8	 mov	 DWORD PTR ___afx_condVal$2[ebp], eax
  0010c	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  00110	75 14		 jne	 SHORT $LN33@GetNextAss
  00112	68 79 06 00 00	 push	 1657			; 00000679H
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0011c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00121	85 c0		 test	 eax, eax
  00123	74 01		 je	 SHORT $LN33@GetNextAss
  00125	cc		 int	 3
$LN33@GetNextAss:
  00126	83 7d e8 00	 cmp	 DWORD PTR ___afx_condVal$2[ebp], 0
  0012a	75 05		 jne	 SHORT $LN11@GetNextAss
  0012c	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN11@GetNextAss:
  00131	33 c0		 xor	 eax, eax
  00133	75 bb		 jne	 SHORT $LN13@GetNextAss
$LN19@GetNextAss:

; 1658 : 	}
; 1659 : 
; 1660 : 	// find next association
; 1661 : 	ASSERT(AfxIsValidAddress(pAssocRet, sizeof(CAssoc)));

  00135	6a 01		 push	 1
  00137	6a 10		 push	 16			; 00000010H
  00139	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?AfxIsValidAddress@@YGHPBXIH@Z ; AfxIsValidAddress
  00142	85 c0		 test	 eax, eax
  00144	75 14		 jne	 SHORT $LN34@GetNextAss
  00146	68 7d 06 00 00	 push	 1661			; 0000067dH
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00150	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00155	85 c0		 test	 eax, eax
  00157	74 01		 je	 SHORT $LN34@GetNextAss
  00159	cc		 int	 3
$LN34@GetNextAss:

; 1662 : 	CAssoc* pAssocNext;
; 1663 : 	if ((pAssocNext = pAssocRet->pNext) == NULL)

  0015a	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0015d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00160	89 4d e4	 mov	 DWORD PTR _pAssocNext$[ebp], ecx
  00163	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  00167	75 43		 jne	 SHORT $LN22@GetNextAss

; 1664 : 	{
; 1665 : 		// go to next bucket
; 1666 : 		for (UINT nBucket = (pAssocRet->nHashValue % m_nHashTableSize) + 1;

  00169	8b 45 f4	 mov	 eax, DWORD PTR _pAssocRet$[ebp]
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00172	33 d2		 xor	 edx, edx
  00174	f7 71 08	 div	 DWORD PTR [ecx+8]
  00177	83 c2 01	 add	 edx, 1
  0017a	89 55 e0	 mov	 DWORD PTR _nBucket$1[ebp], edx
  0017d	eb 09		 jmp	 SHORT $LN16@GetNextAss
$LN14@GetNextAss:

; 1667 : 		  nBucket < m_nHashTableSize; nBucket++)

  0017f	8b 45 e0	 mov	 eax, DWORD PTR _nBucket$1[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 e0	 mov	 DWORD PTR _nBucket$1[ebp], eax
$LN16@GetNextAss:
  00188	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 4d e0	 mov	 ecx, DWORD PTR _nBucket$1[ebp]
  0018e	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00191	73 19		 jae	 SHORT $LN22@GetNextAss

; 1668 : 			if ((pAssocNext = m_pHashTable[nBucket]) != NULL)

  00193	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00196	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00199	8b 55 e0	 mov	 edx, DWORD PTR _nBucket$1[ebp]
  0019c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0019f	89 45 e4	 mov	 DWORD PTR _pAssocNext$[ebp], eax
  001a2	83 7d e4 00	 cmp	 DWORD PTR _pAssocNext$[ebp], 0
  001a6	74 02		 je	 SHORT $LN23@GetNextAss

; 1669 : 				break;

  001a8	eb 02		 jmp	 SHORT $LN22@GetNextAss
$LN23@GetNextAss:

; 1670 : 	}

  001aa	eb d3		 jmp	 SHORT $LN14@GetNextAss
$LN22@GetNextAss:

; 1671 : 
; 1672 : 	rNextPosition = (POSITION) pAssocNext;

  001ac	8b 45 08	 mov	 eax, DWORD PTR _rNextPosition$[ebp]
  001af	8b 4d e4	 mov	 ecx, DWORD PTR _pAssocNext$[ebp]
  001b2	89 08		 mov	 DWORD PTR [eax], ecx

; 1673 : 
; 1674 : 	// fill in return data
; 1675 : 	rKey = pAssocRet->key;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _rKey$[ebp]
  001b7	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001ba	66 8b 11	 mov	 dx, WORD PTR [ecx]
  001bd	66 89 10	 mov	 WORD PTR [eax], dx

; 1676 : 	rValue = pAssocRet->value;

  001c0	8b 45 10	 mov	 eax, DWORD PTR _rValue$[ebp]
  001c3	8b 4d f4	 mov	 ecx, DWORD PTR _pAssocRet$[ebp]
  001c6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001c9	89 10		 mov	 DWORD PTR [eax], edx
$LN24@GetNextAss:

; 1677 : }

  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c2 0c 00	 ret	 12			; 0000000cH
?GetNextAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEXAAPAU__POSITION@@AAGAAPAUtagTaskParameter@@@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetNextAssoc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ
_TEXT	SEGMENT
tv66 = -72						; size = 4
_this$ = -4						; size = 4
?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetStartPosition, COMDAT
; _this$ = ecx

; 1354 : 	{ return (m_nCount == 0) ? NULL : BEFORE_START_POSITION; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00013	75 09		 jne	 SHORT $LN3@GetStartPo
  00015	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@GetStartPo
$LN3@GetStartPo:
  0001e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv66[ebp], -1
$LN4@GetStartPo:
  00025	8b 45 b8	 mov	 eax, DWORD PTR tv66[ebp]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetStartPosition@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEPAU__POSITION@@XZ ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetStartPosition
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
_pAssoc$2 = -12						; size = 4
_nHash$3 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::RemoveAll, COMDAT
; _this$ = ecx

; 1443 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1444 : 	ASSERT_VALID(this);

  0000c	68 a4 05 00 00	 push	 1444			; 000005a4H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1445 : 
; 1446 : 	if (m_pHashTable != NULL)

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	74 60		 je	 SHORT $LN8@RemoveAll

; 1447 : 	{
; 1448 : 		// destroy elements (values and keys)
; 1449 : 		for (UINT nHash = 0; nHash < m_nHashTableSize; nHash++)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nHash$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RemoveAll
$LN2@RemoveAll:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _nHash$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _nHash$3[ebp], eax
$LN4@RemoveAll:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _nHash$3[ebp]
  00040	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00043	73 24		 jae	 SHORT $LN3@RemoveAll

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _nHash$3[ebp]
  0004e	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00051	89 45 f4	 mov	 DWORD PTR _pAssoc$2[ebp], eax
  00054	eb 09		 jmp	 SHORT $LN7@RemoveAll
$LN5@RemoveAll:

; 1453 : 			  pAssoc = pAssoc->pNext)

  00056	8b 45 f4	 mov	 eax, DWORD PTR _pAssoc$2[ebp]
  00059	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005c	89 4d f4	 mov	 DWORD PTR _pAssoc$2[ebp], ecx
$LN7@RemoveAll:

; 1450 : 		{
; 1451 : 			CAssoc* pAssoc;
; 1452 : 			for (pAssoc = m_pHashTable[nHash]; pAssoc != NULL;

  0005f	83 7d f4 00	 cmp	 DWORD PTR _pAssoc$2[ebp], 0
  00063	74 02		 je	 SHORT $LN6@RemoveAll

; 1454 : 			{
; 1455 : 				pAssoc->CAssoc::~CAssoc();
; 1456 : 			}

  00065	eb ef		 jmp	 SHORT $LN5@RemoveAll
$LN6@RemoveAll:

; 1457 : 		}

  00067	eb c8		 jmp	 SHORT $LN2@RemoveAll
$LN3@RemoveAll:

; 1458 : 
; 1459 : 		// free hash table
; 1460 : 		delete[] m_pHashTable;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006f	89 4d b0	 mov	 DWORD PTR $T1[ebp], ecx
  00072	8b 55 b0	 mov	 edx, DWORD PTR $T1[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0007b	83 c4 04	 add	 esp, 4

; 1461 : 		m_pHashTable = NULL;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN8@RemoveAll:

; 1462 : 	}
; 1463 : 
; 1464 : 	m_nCount = 0;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1465 : 	m_pFreeList = NULL;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1466 : 	m_pBlocks->FreeDataChain();

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a2	e8 00 00 00 00	 call	 ?FreeDataChain@CPlex@@QAEXXZ ; CPlex::FreeDataChain

; 1467 : 	m_pBlocks = NULL;

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1468 : }

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?RemoveAll@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXXZ ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?SetAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXGPAUtagTaskParameter@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 2
_newValue$ = 12						; size = 4
?SetAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXGPAUtagTaskParameter@@@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::SetAt, COMDAT
; _this$ = ecx

; 1350 : 	{ (*this)[key] = newValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	0f b7 45 08	 movzx	 eax, WORD PTR _key$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??A?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEAAPAUtagTaskParameter@@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::operator[]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _newValue$[ebp]
  0001c	89 08		 mov	 DWORD PTR [eax], ecx
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?SetAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXGPAUtagTaskParameter@@@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::SetAt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??A?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEAAPAUtagTaskParameter@@G@Z
_TEXT	SEGMENT
tv85 = -88						; size = 4
___afx_condVal$1 = -20					; size = 4
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 2
??A?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEAAPAUtagTaskParameter@@G@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::operator[], COMDAT
; _this$ = ecx

; 1585 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 : 	ASSERT_VALID(this);

  0000c	68 32 06 00 00	 push	 1586			; 00000632H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1587 : 
; 1588 : 	UINT nHashBucket, nHashValue;
; 1589 : 	CAssoc* pAssoc;
; 1590 : 	if ((pAssoc = GetAssocAt(key, nHashBucket, nHashValue)) == NULL)

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	0f b7 55 08	 movzx	 edx, WORD PTR _key$[ebp]
  0002b	52		 push	 edx
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IBEPAVCAssoc@1@GAAI0@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetAssocAt
  00034	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax
  00037	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003b	0f 85 9c 00 00
	00		 jne	 $LN5@operator

; 1591 : 	{
; 1592 : 		if (m_pHashTable == NULL)

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00048	75 11		 jne	 SHORT $LN4@operator

; 1593 : 			InitHashTable(m_nHashTableSize);

  0004a	6a 01		 push	 1
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	51		 push	 ecx
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?InitHashTable@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEXIH@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::InitHashTable
$LN4@operator:

; 1594 : 
; 1595 : 		ENSURE(m_pHashTable);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00062	74 09		 je	 SHORT $LN9@operator
  00064	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  0006b	eb 07		 jmp	 SHORT $LN10@operator
$LN9@operator:
  0006d	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN10@operator:
  00074	8b 4d a8	 mov	 ecx, DWORD PTR tv85[ebp]
  00077	89 4d ec	 mov	 DWORD PTR ___afx_condVal$1[ebp], ecx
  0007a	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  0007e	75 14		 jne	 SHORT $LN11@operator
  00080	68 3b 06 00 00	 push	 1595			; 0000063bH
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0008a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0008f	85 c0		 test	 eax, eax
  00091	74 01		 je	 SHORT $LN11@operator
  00093	cc		 int	 3
$LN11@operator:
  00094	83 7d ec 00	 cmp	 DWORD PTR ___afx_condVal$1[ebp], 0
  00098	75 05		 jne	 SHORT $LN2@operator
  0009a	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@operator:
  0009f	33 c0		 xor	 eax, eax
  000a1	75 b8		 jne	 SHORT $LN4@operator

; 1596 : 		// it doesn't exist, add a new Association
; 1597 : 		pAssoc = NewAssoc(key);

  000a3	0f b7 45 08	 movzx	 eax, WORD PTR _key$[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ?NewAssoc@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IAEPAVCAssoc@1@G@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::NewAssoc
  000b0	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1598 : 		pAssoc->nHashValue = nHashValue;

  000b3	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000b6	8b 4d f4	 mov	 ecx, DWORD PTR _nHashValue$[ebp]
  000b9	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1599 : 		//'pAssoc->value' is a constructed object, nothing more
; 1600 : 
; 1601 : 		// put into hash table
; 1602 : 		pAssoc->pNext = m_pHashTable[nHashBucket];

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c2	8b 55 f0	 mov	 edx, DWORD PTR _pAssoc$[ebp]
  000c5	8b 45 f8	 mov	 eax, DWORD PTR _nHashBucket$[ebp]
  000c8	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1603 : 		m_pHashTable[nHashBucket] = pAssoc;

  000ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d4	8b 55 f8	 mov	 edx, DWORD PTR _nHashBucket$[ebp]
  000d7	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000da	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN5@operator:

; 1604 : 	}
; 1605 : 	return pAssoc->value;  // return new reference

  000dd	8b 45 f0	 mov	 eax, DWORD PTR _pAssoc$[ebp]
  000e0	83 c0 04	 add	 eax, 4
$LN8@operator:

; 1606 : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 04 00	 ret	 4
??A?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAEAAPAUtagTaskParameter@@G@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?Lookup@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHGAAPAUtagTaskParameter@@@Z
_TEXT	SEGMENT
_pAssoc$ = -16						; size = 4
_nHashValue$ = -12					; size = 4
_nHashBucket$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 2
_rValue$ = 12						; size = 4
?Lookup@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHGAAPAUtagTaskParameter@@@Z PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Lookup, COMDAT
; _this$ = ecx

; 1551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 : 	ASSERT_VALID(this);

  0000c	68 10 06 00 00	 push	 1552			; 00000610H
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 1553 : 
; 1554 : 	UINT nHashBucket, nHashValue;
; 1555 : 	CAssoc* pAssoc = GetAssocAt(key, nHashBucket, nHashValue);

  0001f	8d 45 f4	 lea	 eax, DWORD PTR _nHashValue$[ebp]
  00022	50		 push	 eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR _nHashBucket$[ebp]
  00026	51		 push	 ecx
  00027	0f b7 55 08	 movzx	 edx, WORD PTR _key$[ebp]
  0002b	52		 push	 edx
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?GetAssocAt@?$CMap@GGPAUtagTaskParameter@@PAU1@@@IBEPAVCAssoc@1@GAAI0@Z ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetAssocAt
  00034	89 45 f0	 mov	 DWORD PTR _pAssoc$[ebp], eax

; 1556 : 	if (pAssoc == NULL)

  00037	83 7d f0 00	 cmp	 DWORD PTR _pAssoc$[ebp], 0
  0003b	75 04		 jne	 SHORT $LN2@Lookup

; 1557 : 		return FALSE;  // not in map

  0003d	33 c0		 xor	 eax, eax
  0003f	eb 10		 jmp	 SHORT $LN1@Lookup
$LN2@Lookup:

; 1558 : 
; 1559 : 	rValue = pAssoc->value;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _rValue$[ebp]
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _pAssoc$[ebp]
  00047	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004a	89 10		 mov	 DWORD PTR [eax], edx

; 1560 : 	return TRUE;

  0004c	b8 01 00 00 00	 mov	 eax, 1
$LN1@Lookup:

; 1561 : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?Lookup@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHGAAPAUtagTaskParameter@@@Z ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::Lookup
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ?GetCount@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCount@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHXZ PROC ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetCount, COMDAT
; _this$ = ecx

; 1338 : 	{ return m_nCount; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetCount@?$CMap@GGPAUtagTaskParameter@@PAU1@@@QBEHXZ ENDP ; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nBlockSize$ = 8					; size = 4
??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z PROC	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>, COMDAT
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CMap@GGPAUtagTaskParameter@@PAU1@@@6B@

; 1404 : 	ASSERT(nBlockSize > 0);

  00043	83 7d 08 00	 cmp	 DWORD PTR _nBlockSize$[ebp], 0
  00047	7f 14		 jg	 SHORT $LN3@CMap
  00049	68 7c 05 00 00	 push	 1404			; 0000057cH
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0HC@HBCNBCLF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@CMap
  0005c	cc		 int	 3
$LN3@CMap:

; 1405 : 
; 1406 : 	m_pHashTable = NULL;

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1407 : 	m_nHashTableSize = 17;  // default size

  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	c7 40 08 11 00
	00 00		 mov	 DWORD PTR [eax+8], 17	; 00000011H

; 1408 : 	m_nCount = 0;

  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1409 : 	m_pFreeList = NULL;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1410 : 	m_pBlocks = NULL;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1411 : 	m_nBlockSize = nBlockSize;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _nBlockSize$[ebp]
  00095	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 1412 : }

  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CMap@GGPAUtagTaskParameter@@PAU1@@@QAE@H@Z ENDP	; CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>::CMap<unsigned short,unsigned short,tagTaskParameter *,tagTaskParameter *>
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUserTaskManagerSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUserTaskManagerSink@@QAE@XZ PROC			; IUserTaskManagerSink::IUserTaskManagerSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0IUnknownEx@@QAE@XZ
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUserTaskManagerSink@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0IUserTaskManagerSink@@QAE@XZ ENDP			; IUserTaskManagerSink::IUserTaskManagerSink
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = -116						; size = 44
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 2
__Lobj$ = 12						; size = 4
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT
; _this$ = ecx

; 216  : 		{	// get values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		_Cvt = _Lobj._Getcvt();

  00016	8d 45 8c	 lea	 eax, DWORD PTR $T1[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
  00023	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  00026	83 c7 18	 add	 edi, 24			; 00000018H
  00029	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0002e	8b f0		 mov	 esi, eax
  00030	f3 a5		 rep movsd

; 218  : 
; 219  : 		if (is_same_v<_Elem2, wchar_t>)

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 45		 je	 SHORT $LN2@Getvals

; 220  : 			{
; 221  : 			_Days = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getdays());

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QBEPBGXZ
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 222  : 			_Months = (const _Elem *)_Maklocwcs((const wchar_t *)_Lobj._W_Getmonths());

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QBEPBGXZ
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00062	83 c4 04	 add	 esp, 4
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 223  : 			_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  00070	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPA_WPB_W@Z ; std::_Maklocwcs
  00075	83 c4 04	 add	 esp, 4
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 224  : 			}
; 225  : 		else

  0007e	eb 5e		 jmp	 SHORT $LN1@Getvals
$LN2@Getvals:

; 226  : 			{
; 227  : 			_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem *>(nullptr), _Cvt);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 18	 add	 eax, 24			; 00000018H
  00086	50		 push	 eax
  00087	6a 00		 push	 0
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getdays@_Locinfo@std@@QBEPBDXZ
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 228  : 			_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem *>(nullptr), _Cvt);

  000a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 c0 18	 add	 eax, 24			; 00000018H
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getmonths@_Locinfo@std@@QBEPBDXZ
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 229  : 			_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem *>(nullptr), _Cvt);

  000c2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 c0 18	 add	 eax, 24			; 00000018H
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  000d0	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@Getvals:

; 230  : 			}
; 231  : 		}

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEX_WABV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?InterfaceVersionCompare@@YA_NKK@Z
_TEXT	SEGMENT
_dwQueryVer$ = 8					; size = 4
_dwInterfaceVer$ = 12					; size = 4
?InterfaceVersionCompare@@YA_NKK@Z PROC			; InterfaceVersionCompare, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 69   : 	if (GetSubVer(dwQueryVer)>GetSubVer(dwInterfaceVer)) return false;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00012	83 c4 04	 add	 esp, 4
  00015	0f b6 f0	 movzx	 esi, al
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?GetSubVer@@YAEK@Z	; GetSubVer
  00021	83 c4 04	 add	 esp, 4
  00024	0f b6 d0	 movzx	 edx, al
  00027	3b f2		 cmp	 esi, edx
  00029	7e 04		 jle	 SHORT $LN2@InterfaceV
  0002b	32 c0		 xor	 al, al
  0002d	eb 74		 jmp	 SHORT $LN1@InterfaceV
$LN2@InterfaceV:

; 70   : 	if (GetMainVer(dwQueryVer)!=GetMainVer(dwInterfaceVer)) return false;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00038	83 c4 04	 add	 esp, 4
  0003b	0f b6 f0	 movzx	 esi, al
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?GetMainVer@@YAEK@Z	; GetMainVer
  00047	83 c4 04	 add	 esp, 4
  0004a	0f b6 d0	 movzx	 edx, al
  0004d	3b f2		 cmp	 esi, edx
  0004f	74 04		 je	 SHORT $LN3@InterfaceV
  00051	32 c0		 xor	 al, al
  00053	eb 4e		 jmp	 SHORT $LN1@InterfaceV
$LN3@InterfaceV:

; 71   : 	if (GetBuildVer(dwQueryVer)!=GetBuildVer(dwInterfaceVer)) return false;

  00055	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0005e	83 c4 04	 add	 esp, 4
  00061	0f b6 f0	 movzx	 esi, al
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?GetBuildVer@@YAEK@Z	; GetBuildVer
  0006d	83 c4 04	 add	 esp, 4
  00070	0f b6 d0	 movzx	 edx, al
  00073	3b f2		 cmp	 esi, edx
  00075	74 04		 je	 SHORT $LN4@InterfaceV
  00077	32 c0		 xor	 al, al
  00079	eb 28		 jmp	 SHORT $LN1@InterfaceV
$LN4@InterfaceV:

; 72   : 	if (GetProductVer(dwQueryVer)!=GetProductVer(dwInterfaceVer)) return false;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _dwQueryVer$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00084	83 c4 04	 add	 esp, 4
  00087	0f b6 f0	 movzx	 esi, al
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwInterfaceVer$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?GetProductVer@@YAEK@Z	; GetProductVer
  00093	83 c4 04	 add	 esp, 4
  00096	0f b6 d0	 movzx	 edx, al
  00099	3b f2		 cmp	 esi, edx
  0009b	74 04		 je	 SHORT $LN5@InterfaceV
  0009d	32 c0		 xor	 al, al
  0009f	eb 02		 jmp	 SHORT $LN1@InterfaceV
$LN5@InterfaceV:

; 73   : 	return true;

  000a1	b0 01		 mov	 al, 1
$LN1@InterfaceV:

; 74   : };

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?InterfaceVersionCompare@@YA_NKK@Z ENDP			; InterfaceVersionCompare
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetBuildVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetBuildVer@@YAEK@Z PROC				; GetBuildVer, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 63   : 	return ((BYTE *)&dwVersion)[0];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 64   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetBuildVer@@YAEK@Z ENDP				; GetBuildVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetSubVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetSubVer@@YAEK@Z PROC					; GetSubVer, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return ((BYTE *)&dwVersion)[1];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	c1 e0 00	 shl	 eax, 0
  00011	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 58   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetSubVer@@YAEK@Z ENDP					; GetSubVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetMainVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetMainVer@@YAEK@Z PROC				; GetMainVer, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 51   : 	return ((BYTE *)&dwVersion)[2];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	d1 e0		 shl	 eax, 1
  00010	8a 44 05 08	 mov	 al, BYTE PTR _dwVersion$[ebp+eax]

; 52   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetMainVer@@YAEK@Z ENDP				; GetMainVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\全局定义\module.h
;	COMDAT ?GetProductVer@@YAEK@Z
_TEXT	SEGMENT
_dwVersion$ = 8						; size = 4
?GetProductVer@@YAEK@Z PROC				; GetProductVer, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   : 	return ((BYTE *)&dwVersion)[3];

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 03	 imul	 ecx, eax, 3
  00011	8a 44 0d 08	 mov	 al, BYTE PTR _dwVersion$[ebp+ecx]

; 46   : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetProductVer@@YAEK@Z ENDP				; GetProductVer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0IUnknownEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknownEx@@QAE@XZ PROC				; IUnknownEx::IUnknownEx, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IUnknownEx@@6B@
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0IUnknownEx@@QAE@XZ ENDP				; IUnknownEx::IUnknownEx
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptrdest$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Maklocwcs@std@@YAPA_WPB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 97   : 	{	// copy NTWCS to allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 98   : 	const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00013	83 c4 04	 add	 esp, 4
  00016	83 c0 01	 add	 eax, 1
  00019	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax

; 99   : 
; 100  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPA_WPB_W@Z@4JA
  00021	83 c0 04	 add	 eax, 4
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@DJFLDKBN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0002a	6a 02		 push	 2
  0002c	6a 02		 push	 2
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 f8	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 101  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 102  : 
; 103  : 	if (!_Ptrdest)

  0003e	83 7d f8 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  00042	75 05		 jne	 SHORT $LN2@Maklocwcs

; 104  : 		_Xbad_alloc();

  00044	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 105  : 	_CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR __Ptrdest$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _wmemcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 106  : 	return (_Ptrdest);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN3@Maklocwcs:

; 107  : 	}

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?_Maklocwcs@std@@YAPA_WPB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -48						; size = 8
__Ptrnext$ = -40					; size = 4
__Ptrdest$ = -36					; size = 4
__Mbst1$ = -32						; size = 8
__Wc$ = -24						; size = 2
__Bytes$ = -20						; size = 4
__Ptr1$ = -16						; size = 4
__Wchars$ = -12						; size = 4
__Count1$ = -8						; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 682  : 	{	// convert C string to wchar_t sequence using _Cvtvec

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 683  : 	size_t _Count, _Count1;
; 684  : 	size_t _Wchars;
; 685  : 	const char *_Ptr1;
; 686  : 	int _Bytes;
; 687  : 	wchar_t _Wc;
; 688  : 	mbstate_t _Mbst1 = {};

  00009	33 c0		 xor	 eax, eax
  0000b	89 45 e0	 mov	 DWORD PTR __Mbst1$[ebp], eax
  0000e	89 45 e4	 mov	 DWORD PTR __Mbst1$[ebp+4], eax

; 689  : 
; 690  : 	_Count1 = _CSTD strlen(_Ptr) + 1;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR __Count1$[ebp], eax

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Count1$[ebp]
  00026	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00029	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Wchars$[ebp], 0
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00033	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  00036	eb 1b		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:

; 692  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)

  00038	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  0003b	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  0003e	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr1$[ebp]
  00044	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  00047	89 4d f0	 mov	 DWORD PTR __Ptr1$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  0004d	83 c2 01	 add	 edx, 1
  00050	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
$LN4@Maklocstr:

; 691  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;

  00053	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00057	76 29		 jbe	 SHORT $LN3@Maklocstr

; 693  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)

  00059	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Mbst1$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 45 f0	 mov	 eax, DWORD PTR __Ptr1$[ebp]
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR __Wc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 __Mbrtowc
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  00078	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0007c	7f 02		 jg	 SHORT $LN8@Maklocstr

; 694  : 			break;

  0007e	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 695  : 	++_Wchars;	// count terminating nul

  00080	eb b6		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:
  00082	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 f4	 mov	 DWORD PTR __Wchars$[ebp], eax

; 696  : 
; 697  : 	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),

  0008b	68 ba 02 00 00	 push	 698			; 000002baH
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00095	6a 02		 push	 2
  00097	6a 02		 push	 2
  00099	8b 45 f4	 mov	 eax, DWORD PTR __Wchars$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___calloc_dbg
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	89 45 dc	 mov	 DWORD PTR __Ptrdest$[ebp], eax

; 698  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 699  : 
; 700  : 	if (!_Ptrdest)

  000a9	83 7d dc 00	 cmp	 DWORD PTR __Ptrdest$[ebp], 0
  000ad	75 05		 jne	 SHORT $LN9@Maklocstr

; 701  : 		_Xbad_alloc();

  000af	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 702  : 	wchar_t *_Ptrnext = _Ptrdest;

  000b4	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
  000b7	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax

; 703  : 	mbstate_t _Mbst2 = {};

  000ba	33 c0		 xor	 eax, eax
  000bc	89 45 d0	 mov	 DWORD PTR __Mbst2$[ebp], eax
  000bf	89 45 d4	 mov	 DWORD PTR __Mbst2$[ebp+4], eax

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000c2	eb 24		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:

; 706  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)

  000c4	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  000c7	2b 45 ec	 sub	 eax, DWORD PTR __Bytes$[ebp]
  000ca	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d0	03 4d ec	 add	 ecx, DWORD PTR __Bytes$[ebp]
  000d3	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000d6	8b 55 f4	 mov	 edx, DWORD PTR __Wchars$[ebp]
  000d9	83 ea 01	 sub	 edx, 1
  000dc	89 55 f4	 mov	 DWORD PTR __Wchars$[ebp], edx
  000df	8b 45 d8	 mov	 eax, DWORD PTR __Ptrnext$[ebp]
  000e2	83 c0 02	 add	 eax, 2
  000e5	89 45 d8	 mov	 DWORD PTR __Ptrnext$[ebp], eax
$LN7@Maklocstr:

; 704  : 
; 705  : 	for (; 0 < _Wchars;

  000e8	83 7d f4 00	 cmp	 DWORD PTR __Wchars$[ebp], 0
  000ec	76 29		 jbe	 SHORT $LN6@Maklocstr

; 707  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)

  000ee	8b 45 10	 mov	 eax, DWORD PTR __Cvt$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d d0	 lea	 ecx, DWORD PTR __Mbst2$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 f8	 mov	 edx, DWORD PTR __Count1$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 __Mbrtowc
  00107	83 c4 14	 add	 esp, 20			; 00000014H
  0010a	89 45 ec	 mov	 DWORD PTR __Bytes$[ebp], eax
  0010d	83 7d ec 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  00111	7f 02		 jg	 SHORT $LN10@Maklocstr

; 708  : 			break;

  00113	eb 02		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 709  : 	*_Ptrnext = L'\0';

  00115	eb ad		 jmp	 SHORT $LN5@Maklocstr
$LN6@Maklocstr:
  00117	33 c0		 xor	 eax, eax
  00119	8b 4d d8	 mov	 ecx, DWORD PTR __Ptrnext$[ebp]
  0011c	66 89 01	 mov	 WORD PTR [ecx], ax

; 710  : 
; 711  : 	return (_Ptrdest);

  0011f	8b 45 dc	 mov	 eax, DWORD PTR __Ptrdest$[ebp]
$LN11@Maklocstr:

; 712  : 	}

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxtempl.h
;	COMDAT ??$HashKey@K@@YGIK@Z
_TEXT	SEGMENT
$T1 = -80						; size = 8
_HashVal$ = -8						; size = 8
_key$ = 8						; size = 4
??$HashKey@K@@YGIK@Z PROC				; HashKey<unsigned long>, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 162  : 	// (algorithm copied from STL hash in xfunctional)
; 163  : #pragma warning(suppress: 4302) // 'type cast' : truncation
; 164  : #pragma warning(suppress: 4311) // pointer truncation
; 165  : 	ldiv_t HashVal = ldiv((long)(ARG_KEY)key, 127773);

  00009	68 1d f3 01 00	 push	 127773			; 0001f31dH
  0000e	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ldiv
  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 b0	 mov	 DWORD PTR $T1[ebp], eax
  0001e	89 55 b4	 mov	 DWORD PTR $T1[ebp+4], edx
  00021	8b 4d b0	 mov	 ecx, DWORD PTR $T1[ebp]
  00024	89 4d f8	 mov	 DWORD PTR _HashVal$[ebp], ecx
  00027	8b 55 b4	 mov	 edx, DWORD PTR $T1[ebp+4]
  0002a	89 55 fc	 mov	 DWORD PTR _HashVal$[ebp+4], edx

; 166  : 	HashVal.rem = 16807 * HashVal.rem - 2836 * HashVal.quot;

  0002d	69 45 fc a7 41
	00 00		 imul	 eax, DWORD PTR _HashVal$[ebp+4], 16807
  00034	69 4d f8 14 0b
	00 00		 imul	 ecx, DWORD PTR _HashVal$[ebp], 2836
  0003b	2b c1		 sub	 eax, ecx
  0003d	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax

; 167  : 	if (HashVal.rem < 0)

  00040	79 0b		 jns	 SHORT $LN2@HashKey

; 168  : 		HashVal.rem += 2147483647;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]
  00045	05 ff ff ff 7f	 add	 eax, 2147483647		; 7fffffffH
  0004a	89 45 fc	 mov	 DWORD PTR _HashVal$[ebp+4], eax
$LN2@HashKey:

; 169  : 	return ((UINT)HashVal.rem);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _HashVal$[ebp+4]

; 170  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$HashKey@K@@YGIK@Z ENDP				; HashKey<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afxplex_.h
;	COMDAT ?data@CPlex@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?data@CPlex@@QAEPAXXZ PROC				; CPlex::data, COMDAT
; _this$ = ecx

; 35   : 	void* data() { return this+1; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?data@CPlex@@QAEPAXXZ ENDP				; CPlex::data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00009	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	50		 push	 eax
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -36						; size = 4
_bQuit$ = -32						; size = 4
_msg$ = -28						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00009	6a 01		 push	 1
  0000b	6a 12		 push	 18			; 00000012H
  0000d	6a 12		 push	 18			; 00000012H
  0000f	6a 00		 push	 0
  00011	8d 45 e4	 lea	 eax, DWORD PTR _msg$[ebp]
  00014	50		 push	 eax
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0001b	89 45 e0	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _lpszFileName$[ebp]
  00029	51		 push	 ecx
  0002a	6a 02		 push	 2
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00032	83 c4 14	 add	 esp, 20			; 00000014H
  00035	89 45 dc	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00038	83 7d e0 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0003c	74 0a		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -68						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _guidOther$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _guidOne$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _IsEqualGUID
  00016	83 c4 08	 add	 esp, 8
  00019	85 c0		 test	 eax, eax
  0001b	74 09		 je	 SHORT $LN3@
  0001d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00024	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  00026	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@:
  0002d	8a 45 bc	 mov	 al, BYTE PTR tv68[ebp]

; 195  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -68						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00009	6a 10		 push	 16			; 00000010H
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _memcmp
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN3@IsEqualGUI
  0001f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  00028	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]

; 162  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  :         (void)_Size;
; 187  :         return _Where;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File g:\网狐\happygamewh\服务端\系统模块\服务器组件\游戏服务\usertaskmanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	89 45 bc	 mov	 DWORD PTR tv66[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  00012	83 e9 01	 sub	 ecx, 1
  00015	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00018	83 7d bc 00	 cmp	 DWORD PTR tv66[ebp], 0
  0001c	76 11		 jbe	 SHORT $LN1@vector
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00027	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  0002a	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  0002d	eb da		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
