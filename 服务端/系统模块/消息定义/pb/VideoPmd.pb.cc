// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoPmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VideoPmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VideoPmd {
class tagAVServerOption_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagAVServerOption_s2c> {
} _tagAVServerOption_s2c_default_instance_;

namespace protobuf_VideoPmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAVServerOption_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAVServerOption_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAVServerOption_s2c, wavserverport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAVServerOption_s2c, dwavserveraddr_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(tagAVServerOption_s2c)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagAVServerOption_s2c_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "VideoPmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _tagAVServerOption_s2c_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NullPmd::protobuf_NullPmd_2eproto::InitDefaults();
  _tagAVServerOption_s2c_default_instance_.DefaultConstruct();
  _tagAVServerOption_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016VideoPmd.proto\022\010VideoPmd\032\rNullPmd.prot"
      "o\"j\n\025tagAVServerOption_s2c\022\"\n\007respcmd\030\001 "
      "\001(\0132\021.NullPmd.response\022\025\n\rwavserverport\030"
      "\002 \001(\005\022\026\n\016dwavserveraddr\030\003 \001(\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VideoPmd.proto", &protobuf_RegisterTypes);
  ::NullPmd::protobuf_NullPmd_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_VideoPmd_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagAVServerOption_s2c::kRespcmdFieldNumber;
const int tagAVServerOption_s2c::kWavserverportFieldNumber;
const int tagAVServerOption_s2c::kDwavserveraddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagAVServerOption_s2c::tagAVServerOption_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_VideoPmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VideoPmd.tagAVServerOption_s2c)
}
tagAVServerOption_s2c::tagAVServerOption_s2c(const tagAVServerOption_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  ::memcpy(&dwavserveraddr_, &from.dwavserveraddr_,
    reinterpret_cast<char*>(&wavserverport_) -
    reinterpret_cast<char*>(&dwavserveraddr_) + sizeof(wavserverport_));
  // @@protoc_insertion_point(copy_constructor:VideoPmd.tagAVServerOption_s2c)
}

void tagAVServerOption_s2c::SharedCtor() {
  ::memset(&respcmd_, 0, reinterpret_cast<char*>(&wavserverport_) -
    reinterpret_cast<char*>(&respcmd_) + sizeof(wavserverport_));
  _cached_size_ = 0;
}

tagAVServerOption_s2c::~tagAVServerOption_s2c() {
  // @@protoc_insertion_point(destructor:VideoPmd.tagAVServerOption_s2c)
  SharedDtor();
}

void tagAVServerOption_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagAVServerOption_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagAVServerOption_s2c::descriptor() {
  protobuf_VideoPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_VideoPmd_2eproto::file_level_metadata[0].descriptor;
}

const tagAVServerOption_s2c& tagAVServerOption_s2c::default_instance() {
  protobuf_VideoPmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagAVServerOption_s2c* tagAVServerOption_s2c::New(::google::protobuf::Arena* arena) const {
  tagAVServerOption_s2c* n = new tagAVServerOption_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagAVServerOption_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoPmd.tagAVServerOption_s2c)
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
  ::memset(&dwavserveraddr_, 0, reinterpret_cast<char*>(&wavserverport_) -
    reinterpret_cast<char*>(&dwavserveraddr_) + sizeof(wavserverport_));
}

bool tagAVServerOption_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VideoPmd.tagAVServerOption_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wavserverport = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wavserverport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwavserveraddr = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwavserveraddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VideoPmd.tagAVServerOption_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VideoPmd.tagAVServerOption_s2c)
  return false;
#undef DO_
}

void tagAVServerOption_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VideoPmd.tagAVServerOption_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // int32 wavserverport = 2;
  if (this->wavserverport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wavserverport(), output);
  }

  // uint64 dwavserveraddr = 3;
  if (this->dwavserveraddr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dwavserveraddr(), output);
  }

  // @@protoc_insertion_point(serialize_end:VideoPmd.tagAVServerOption_s2c)
}

::google::protobuf::uint8* tagAVServerOption_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VideoPmd.tagAVServerOption_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // int32 wavserverport = 2;
  if (this->wavserverport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wavserverport(), target);
  }

  // uint64 dwavserveraddr = 3;
  if (this->dwavserveraddr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dwavserveraddr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VideoPmd.tagAVServerOption_s2c)
  return target;
}

size_t tagAVServerOption_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoPmd.tagAVServerOption_s2c)
  size_t total_size = 0;

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  // uint64 dwavserveraddr = 3;
  if (this->dwavserveraddr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwavserveraddr());
  }

  // int32 wavserverport = 2;
  if (this->wavserverport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wavserverport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagAVServerOption_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoPmd.tagAVServerOption_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagAVServerOption_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagAVServerOption_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoPmd.tagAVServerOption_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoPmd.tagAVServerOption_s2c)
    MergeFrom(*source);
  }
}

void tagAVServerOption_s2c::MergeFrom(const tagAVServerOption_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoPmd.tagAVServerOption_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
  if (from.dwavserveraddr() != 0) {
    set_dwavserveraddr(from.dwavserveraddr());
  }
  if (from.wavserverport() != 0) {
    set_wavserverport(from.wavserverport());
  }
}

void tagAVServerOption_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoPmd.tagAVServerOption_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagAVServerOption_s2c::CopyFrom(const tagAVServerOption_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoPmd.tagAVServerOption_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagAVServerOption_s2c::IsInitialized() const {
  return true;
}

void tagAVServerOption_s2c::Swap(tagAVServerOption_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagAVServerOption_s2c::InternalSwap(tagAVServerOption_s2c* other) {
  std::swap(respcmd_, other->respcmd_);
  std::swap(dwavserveraddr_, other->dwavserveraddr_);
  std::swap(wavserverport_, other->wavserverport_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagAVServerOption_s2c::GetMetadata() const {
  protobuf_VideoPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_VideoPmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagAVServerOption_s2c

// .NullPmd.response respcmd = 1;
bool tagAVServerOption_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagAVServerOption_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagAVServerOption_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:VideoPmd.tagAVServerOption_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagAVServerOption_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:VideoPmd.tagAVServerOption_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagAVServerOption_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:VideoPmd.tagAVServerOption_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagAVServerOption_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VideoPmd.tagAVServerOption_s2c.respcmd)
}

// int32 wavserverport = 2;
void tagAVServerOption_s2c::clear_wavserverport() {
  wavserverport_ = 0;
}
::google::protobuf::int32 tagAVServerOption_s2c::wavserverport() const {
  // @@protoc_insertion_point(field_get:VideoPmd.tagAVServerOption_s2c.wavserverport)
  return wavserverport_;
}
void tagAVServerOption_s2c::set_wavserverport(::google::protobuf::int32 value) {
  
  wavserverport_ = value;
  // @@protoc_insertion_point(field_set:VideoPmd.tagAVServerOption_s2c.wavserverport)
}

// uint64 dwavserveraddr = 3;
void tagAVServerOption_s2c::clear_dwavserveraddr() {
  dwavserveraddr_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagAVServerOption_s2c::dwavserveraddr() const {
  // @@protoc_insertion_point(field_get:VideoPmd.tagAVServerOption_s2c.dwavserveraddr)
  return dwavserveraddr_;
}
void tagAVServerOption_s2c::set_dwavserveraddr(::google::protobuf::uint64 value) {
  
  dwavserveraddr_ = value;
  // @@protoc_insertion_point(field_set:VideoPmd.tagAVServerOption_s2c.dwavserveraddr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace VideoPmd

// @@protoc_insertion_point(global_scope)
