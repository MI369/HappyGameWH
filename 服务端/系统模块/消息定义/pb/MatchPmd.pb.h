// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchPmd.proto

#ifndef PROTOBUF_MatchPmd_2eproto__INCLUDED
#define PROTOBUF_MatchPmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NullPmd.pb.h"
// @@protoc_insertion_point(includes)
namespace MatchPmd {
class tagGameMatch;
class tagGameMatchDefaultTypeInternal;
extern tagGameMatchDefaultTypeInternal _tagGameMatch_default_instance_;
class tagGameMatch_s2c;
class tagGameMatch_s2cDefaultTypeInternal;
extern tagGameMatch_s2cDefaultTypeInternal _tagGameMatch_s2c_default_instance_;
class tagMatchRewardInfo;
class tagMatchRewardInfoDefaultTypeInternal;
extern tagMatchRewardInfoDefaultTypeInternal _tagMatchRewardInfo_default_instance_;
}  // namespace MatchPmd
namespace NullPmd {
class command;
class commandDefaultTypeInternal;
extern commandDefaultTypeInternal _command_default_instance_;
class head;
class headDefaultTypeInternal;
extern headDefaultTypeInternal _head_default_instance_;
class indication;
class indicationDefaultTypeInternal;
extern indicationDefaultTypeInternal _indication_default_instance_;
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
class message;
class messageDefaultTypeInternal;
extern messageDefaultTypeInternal _message_default_instance_;
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
class responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace NullPmd

namespace MatchPmd {

namespace protobuf_MatchPmd_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_MatchPmd_2eproto

// ===================================================================

class tagMatchRewardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchPmd.tagMatchRewardInfo) */ {
 public:
  tagMatchRewardInfo();
  virtual ~tagMatchRewardInfo();

  tagMatchRewardInfo(const tagMatchRewardInfo& from);

  inline tagMatchRewardInfo& operator=(const tagMatchRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagMatchRewardInfo& default_instance();

  static inline const tagMatchRewardInfo* internal_default_instance() {
    return reinterpret_cast<const tagMatchRewardInfo*>(
               &_tagMatchRewardInfo_default_instance_);
  }

  void Swap(tagMatchRewardInfo* other);

  // implements Message ----------------------------------------------

  inline tagMatchRewardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  tagMatchRewardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagMatchRewardInfo& from);
  void MergeFrom(const tagMatchRewardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagMatchRewardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 lrewardgold = 2;
  void clear_lrewardgold();
  static const int kLrewardgoldFieldNumber = 2;
  ::google::protobuf::uint64 lrewardgold() const;
  void set_lrewardgold(::google::protobuf::uint64 value);

  // uint64 lrewardingot = 3;
  void clear_lrewardingot();
  static const int kLrewardingotFieldNumber = 3;
  ::google::protobuf::uint64 lrewardingot() const;
  void set_lrewardingot(::google::protobuf::uint64 value);

  // uint64 dwrewardexperience = 4;
  void clear_dwrewardexperience();
  static const int kDwrewardexperienceFieldNumber = 4;
  ::google::protobuf::uint64 dwrewardexperience() const;
  void set_dwrewardexperience(::google::protobuf::uint64 value);

  // int32 wrankid = 1;
  void clear_wrankid();
  static const int kWrankidFieldNumber = 1;
  ::google::protobuf::int32 wrankid() const;
  void set_wrankid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchPmd.tagMatchRewardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 lrewardgold_;
  ::google::protobuf::uint64 lrewardingot_;
  ::google::protobuf::uint64 dwrewardexperience_;
  ::google::protobuf::int32 wrankid_;
  mutable int _cached_size_;
  friend struct  protobuf_MatchPmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGameMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchPmd.tagGameMatch) */ {
 public:
  tagGameMatch();
  virtual ~tagGameMatch();

  tagGameMatch(const tagGameMatch& from);

  inline tagGameMatch& operator=(const tagGameMatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameMatch& default_instance();

  static inline const tagGameMatch* internal_default_instance() {
    return reinterpret_cast<const tagGameMatch*>(
               &_tagGameMatch_default_instance_);
  }

  void Swap(tagGameMatch* other);

  // implements Message ----------------------------------------------

  inline tagGameMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGameMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGameMatch& from);
  void MergeFrom(const tagGameMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGameMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchPmd.tagMatchRewardInfo matchrewardinfo = 16;
  int matchrewardinfo_size() const;
  void clear_matchrewardinfo();
  static const int kMatchrewardinfoFieldNumber = 16;
  const ::MatchPmd::tagMatchRewardInfo& matchrewardinfo(int index) const;
  ::MatchPmd::tagMatchRewardInfo* mutable_matchrewardinfo(int index);
  ::MatchPmd::tagMatchRewardInfo* add_matchrewardinfo();
  ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagMatchRewardInfo >*
      mutable_matchrewardinfo();
  const ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagMatchRewardInfo >&
      matchrewardinfo() const;

  // string szmatchname = 4;
  void clear_szmatchname();
  static const int kSzmatchnameFieldNumber = 4;
  const ::std::string& szmatchname() const;
  void set_szmatchname(const ::std::string& value);
  #if LANG_CXX11
  void set_szmatchname(::std::string&& value);
  #endif
  void set_szmatchname(const char* value);
  void set_szmatchname(const char* value, size_t size);
  ::std::string* mutable_szmatchname();
  ::std::string* release_szmatchname();
  void set_allocated_szmatchname(::std::string* szmatchname);

  // string cbmatchrule = 17;
  void clear_cbmatchrule();
  static const int kCbmatchruleFieldNumber = 17;
  const ::std::string& cbmatchrule() const;
  void set_cbmatchrule(const ::std::string& value);
  #if LANG_CXX11
  void set_cbmatchrule(::std::string&& value);
  #endif
  void set_cbmatchrule(const char* value);
  void set_cbmatchrule(const char* value, size_t size);
  ::std::string* mutable_cbmatchrule();
  ::std::string* release_cbmatchrule();
  void set_allocated_cbmatchrule(::std::string* cbmatchrule);

  // uint64 dwmatchid = 2;
  void clear_dwmatchid();
  static const int kDwmatchidFieldNumber = 2;
  ::google::protobuf::uint64 dwmatchid() const;
  void set_dwmatchid(::google::protobuf::uint64 value);

  // int32 wserverid = 1;
  void clear_wserverid();
  static const int kWserveridFieldNumber = 1;
  ::google::protobuf::int32 wserverid() const;
  void set_wserverid(::google::protobuf::int32 value);

  // int32 cbmatchtype = 3;
  void clear_cbmatchtype();
  static const int kCbmatchtypeFieldNumber = 3;
  ::google::protobuf::int32 cbmatchtype() const;
  void set_cbmatchtype(::google::protobuf::int32 value);

  // int32 cbfeetype = 5;
  void clear_cbfeetype();
  static const int kCbfeetypeFieldNumber = 5;
  ::google::protobuf::int32 cbfeetype() const;
  void set_cbfeetype(::google::protobuf::int32 value);

  // int32 cbdeductarea = 6;
  void clear_cbdeductarea();
  static const int kCbdeductareaFieldNumber = 6;
  ::google::protobuf::int32 cbdeductarea() const;
  void set_cbdeductarea(::google::protobuf::int32 value);

  // uint64 lsignupfee = 7;
  void clear_lsignupfee();
  static const int kLsignupfeeFieldNumber = 7;
  ::google::protobuf::uint64 lsignupfee() const;
  void set_lsignupfee(::google::protobuf::uint64 value);

  // int32 cbsignupmode = 8;
  void clear_cbsignupmode();
  static const int kCbsignupmodeFieldNumber = 8;
  ::google::protobuf::int32 cbsignupmode() const;
  void set_cbsignupmode(::google::protobuf::int32 value);

  // int32 cbjoincondition = 9;
  void clear_cbjoincondition();
  static const int kCbjoinconditionFieldNumber = 9;
  ::google::protobuf::int32 cbjoincondition() const;
  void set_cbjoincondition(::google::protobuf::int32 value);

  // uint64 lexperience = 11;
  void clear_lexperience();
  static const int kLexperienceFieldNumber = 11;
  ::google::protobuf::uint64 lexperience() const;
  void set_lexperience(::google::protobuf::uint64 value);

  // int32 cbmemberorder = 10;
  void clear_cbmemberorder();
  static const int kCbmemberorderFieldNumber = 10;
  ::google::protobuf::int32 cbmemberorder() const;
  void set_cbmemberorder(::google::protobuf::int32 value);

  // int32 cbrankingmode = 12;
  void clear_cbrankingmode();
  static const int kCbrankingmodeFieldNumber = 12;
  ::google::protobuf::int32 cbrankingmode() const;
  void set_cbrankingmode(::google::protobuf::int32 value);

  // int32 wcountinnings = 13;
  void clear_wcountinnings();
  static const int kWcountinningsFieldNumber = 13;
  ::google::protobuf::int32 wcountinnings() const;
  void set_wcountinnings(::google::protobuf::int32 value);

  // int32 cbfiltergradesmode = 14;
  void clear_cbfiltergradesmode();
  static const int kCbfiltergradesmodeFieldNumber = 14;
  ::google::protobuf::int32 cbfiltergradesmode() const;
  void set_cbfiltergradesmode(::google::protobuf::int32 value);

  // int32 wrewardcount = 15;
  void clear_wrewardcount();
  static const int kWrewardcountFieldNumber = 15;
  ::google::protobuf::int32 wrewardcount() const;
  void set_wrewardcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchPmd.tagGameMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagMatchRewardInfo > matchrewardinfo_;
  ::google::protobuf::internal::ArenaStringPtr szmatchname_;
  ::google::protobuf::internal::ArenaStringPtr cbmatchrule_;
  ::google::protobuf::uint64 dwmatchid_;
  ::google::protobuf::int32 wserverid_;
  ::google::protobuf::int32 cbmatchtype_;
  ::google::protobuf::int32 cbfeetype_;
  ::google::protobuf::int32 cbdeductarea_;
  ::google::protobuf::uint64 lsignupfee_;
  ::google::protobuf::int32 cbsignupmode_;
  ::google::protobuf::int32 cbjoincondition_;
  ::google::protobuf::uint64 lexperience_;
  ::google::protobuf::int32 cbmemberorder_;
  ::google::protobuf::int32 cbrankingmode_;
  ::google::protobuf::int32 wcountinnings_;
  ::google::protobuf::int32 cbfiltergradesmode_;
  ::google::protobuf::int32 wrewardcount_;
  mutable int _cached_size_;
  friend struct  protobuf_MatchPmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagGameMatch_s2c : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatchPmd.tagGameMatch_s2c) */ {
 public:
  tagGameMatch_s2c();
  virtual ~tagGameMatch_s2c();

  tagGameMatch_s2c(const tagGameMatch_s2c& from);

  inline tagGameMatch_s2c& operator=(const tagGameMatch_s2c& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGameMatch_s2c& default_instance();

  static inline const tagGameMatch_s2c* internal_default_instance() {
    return reinterpret_cast<const tagGameMatch_s2c*>(
               &_tagGameMatch_s2c_default_instance_);
  }

  void Swap(tagGameMatch_s2c* other);

  // implements Message ----------------------------------------------

  inline tagGameMatch_s2c* New() const PROTOBUF_FINAL { return New(NULL); }

  tagGameMatch_s2c* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagGameMatch_s2c& from);
  void MergeFrom(const tagGameMatch_s2c& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagGameMatch_s2c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MatchPmd.tagGameMatch tagGameMatch = 2;
  int taggamematch_size() const;
  void clear_taggamematch();
  static const int kTagGameMatchFieldNumber = 2;
  const ::MatchPmd::tagGameMatch& taggamematch(int index) const;
  ::MatchPmd::tagGameMatch* mutable_taggamematch(int index);
  ::MatchPmd::tagGameMatch* add_taggamematch();
  ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagGameMatch >*
      mutable_taggamematch();
  const ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagGameMatch >&
      taggamematch() const;

  // .NullPmd.response respcmd = 1;
  bool has_respcmd() const;
  void clear_respcmd();
  static const int kRespcmdFieldNumber = 1;
  const ::NullPmd::response& respcmd() const;
  ::NullPmd::response* mutable_respcmd();
  ::NullPmd::response* release_respcmd();
  void set_allocated_respcmd(::NullPmd::response* respcmd);

  // @@protoc_insertion_point(class_scope:MatchPmd.tagGameMatch_s2c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagGameMatch > taggamematch_;
  ::NullPmd::response* respcmd_;
  mutable int _cached_size_;
  friend struct  protobuf_MatchPmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// tagMatchRewardInfo

// int32 wrankid = 1;
inline void tagMatchRewardInfo::clear_wrankid() {
  wrankid_ = 0;
}
inline ::google::protobuf::int32 tagMatchRewardInfo::wrankid() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.wrankid)
  return wrankid_;
}
inline void tagMatchRewardInfo::set_wrankid(::google::protobuf::int32 value) {
  
  wrankid_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.wrankid)
}

// uint64 lrewardgold = 2;
inline void tagMatchRewardInfo::clear_lrewardgold() {
  lrewardgold_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagMatchRewardInfo::lrewardgold() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.lrewardgold)
  return lrewardgold_;
}
inline void tagMatchRewardInfo::set_lrewardgold(::google::protobuf::uint64 value) {
  
  lrewardgold_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.lrewardgold)
}

// uint64 lrewardingot = 3;
inline void tagMatchRewardInfo::clear_lrewardingot() {
  lrewardingot_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagMatchRewardInfo::lrewardingot() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.lrewardingot)
  return lrewardingot_;
}
inline void tagMatchRewardInfo::set_lrewardingot(::google::protobuf::uint64 value) {
  
  lrewardingot_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.lrewardingot)
}

// uint64 dwrewardexperience = 4;
inline void tagMatchRewardInfo::clear_dwrewardexperience() {
  dwrewardexperience_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagMatchRewardInfo::dwrewardexperience() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.dwrewardexperience)
  return dwrewardexperience_;
}
inline void tagMatchRewardInfo::set_dwrewardexperience(::google::protobuf::uint64 value) {
  
  dwrewardexperience_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.dwrewardexperience)
}

// -------------------------------------------------------------------

// tagGameMatch

// int32 wserverid = 1;
inline void tagGameMatch::clear_wserverid() {
  wserverid_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::wserverid() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.wserverid)
  return wserverid_;
}
inline void tagGameMatch::set_wserverid(::google::protobuf::int32 value) {
  
  wserverid_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.wserverid)
}

// uint64 dwmatchid = 2;
inline void tagGameMatch::clear_dwmatchid() {
  dwmatchid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameMatch::dwmatchid() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.dwmatchid)
  return dwmatchid_;
}
inline void tagGameMatch::set_dwmatchid(::google::protobuf::uint64 value) {
  
  dwmatchid_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.dwmatchid)
}

// int32 cbmatchtype = 3;
inline void tagGameMatch::clear_cbmatchtype() {
  cbmatchtype_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbmatchtype() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbmatchtype)
  return cbmatchtype_;
}
inline void tagGameMatch::set_cbmatchtype(::google::protobuf::int32 value) {
  
  cbmatchtype_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbmatchtype)
}

// string szmatchname = 4;
inline void tagGameMatch::clear_szmatchname() {
  szmatchname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGameMatch::szmatchname() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.szmatchname)
  return szmatchname_.GetNoArena();
}
inline void tagGameMatch::set_szmatchname(const ::std::string& value) {
  
  szmatchname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.szmatchname)
}
#if LANG_CXX11
inline void tagGameMatch::set_szmatchname(::std::string&& value) {
  
  szmatchname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchPmd.tagGameMatch.szmatchname)
}
#endif
inline void tagGameMatch::set_szmatchname(const char* value) {
  
  szmatchname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchPmd.tagGameMatch.szmatchname)
}
inline void tagGameMatch::set_szmatchname(const char* value, size_t size) {
  
  szmatchname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchPmd.tagGameMatch.szmatchname)
}
inline ::std::string* tagGameMatch::mutable_szmatchname() {
  
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch.szmatchname)
  return szmatchname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGameMatch::release_szmatchname() {
  // @@protoc_insertion_point(field_release:MatchPmd.tagGameMatch.szmatchname)
  
  return szmatchname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGameMatch::set_allocated_szmatchname(::std::string* szmatchname) {
  if (szmatchname != NULL) {
    
  } else {
    
  }
  szmatchname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szmatchname);
  // @@protoc_insertion_point(field_set_allocated:MatchPmd.tagGameMatch.szmatchname)
}

// int32 cbfeetype = 5;
inline void tagGameMatch::clear_cbfeetype() {
  cbfeetype_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbfeetype() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbfeetype)
  return cbfeetype_;
}
inline void tagGameMatch::set_cbfeetype(::google::protobuf::int32 value) {
  
  cbfeetype_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbfeetype)
}

// int32 cbdeductarea = 6;
inline void tagGameMatch::clear_cbdeductarea() {
  cbdeductarea_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbdeductarea() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbdeductarea)
  return cbdeductarea_;
}
inline void tagGameMatch::set_cbdeductarea(::google::protobuf::int32 value) {
  
  cbdeductarea_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbdeductarea)
}

// uint64 lsignupfee = 7;
inline void tagGameMatch::clear_lsignupfee() {
  lsignupfee_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameMatch::lsignupfee() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.lsignupfee)
  return lsignupfee_;
}
inline void tagGameMatch::set_lsignupfee(::google::protobuf::uint64 value) {
  
  lsignupfee_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.lsignupfee)
}

// int32 cbsignupmode = 8;
inline void tagGameMatch::clear_cbsignupmode() {
  cbsignupmode_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbsignupmode() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbsignupmode)
  return cbsignupmode_;
}
inline void tagGameMatch::set_cbsignupmode(::google::protobuf::int32 value) {
  
  cbsignupmode_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbsignupmode)
}

// int32 cbjoincondition = 9;
inline void tagGameMatch::clear_cbjoincondition() {
  cbjoincondition_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbjoincondition() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbjoincondition)
  return cbjoincondition_;
}
inline void tagGameMatch::set_cbjoincondition(::google::protobuf::int32 value) {
  
  cbjoincondition_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbjoincondition)
}

// int32 cbmemberorder = 10;
inline void tagGameMatch::clear_cbmemberorder() {
  cbmemberorder_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbmemberorder() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbmemberorder)
  return cbmemberorder_;
}
inline void tagGameMatch::set_cbmemberorder(::google::protobuf::int32 value) {
  
  cbmemberorder_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbmemberorder)
}

// uint64 lexperience = 11;
inline void tagGameMatch::clear_lexperience() {
  lexperience_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tagGameMatch::lexperience() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.lexperience)
  return lexperience_;
}
inline void tagGameMatch::set_lexperience(::google::protobuf::uint64 value) {
  
  lexperience_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.lexperience)
}

// int32 cbrankingmode = 12;
inline void tagGameMatch::clear_cbrankingmode() {
  cbrankingmode_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbrankingmode() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbrankingmode)
  return cbrankingmode_;
}
inline void tagGameMatch::set_cbrankingmode(::google::protobuf::int32 value) {
  
  cbrankingmode_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbrankingmode)
}

// int32 wcountinnings = 13;
inline void tagGameMatch::clear_wcountinnings() {
  wcountinnings_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::wcountinnings() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.wcountinnings)
  return wcountinnings_;
}
inline void tagGameMatch::set_wcountinnings(::google::protobuf::int32 value) {
  
  wcountinnings_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.wcountinnings)
}

// int32 cbfiltergradesmode = 14;
inline void tagGameMatch::clear_cbfiltergradesmode() {
  cbfiltergradesmode_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::cbfiltergradesmode() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbfiltergradesmode)
  return cbfiltergradesmode_;
}
inline void tagGameMatch::set_cbfiltergradesmode(::google::protobuf::int32 value) {
  
  cbfiltergradesmode_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbfiltergradesmode)
}

// int32 wrewardcount = 15;
inline void tagGameMatch::clear_wrewardcount() {
  wrewardcount_ = 0;
}
inline ::google::protobuf::int32 tagGameMatch::wrewardcount() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.wrewardcount)
  return wrewardcount_;
}
inline void tagGameMatch::set_wrewardcount(::google::protobuf::int32 value) {
  
  wrewardcount_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.wrewardcount)
}

// repeated .MatchPmd.tagMatchRewardInfo matchrewardinfo = 16;
inline int tagGameMatch::matchrewardinfo_size() const {
  return matchrewardinfo_.size();
}
inline void tagGameMatch::clear_matchrewardinfo() {
  matchrewardinfo_.Clear();
}
inline const ::MatchPmd::tagMatchRewardInfo& tagGameMatch::matchrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_.Get(index);
}
inline ::MatchPmd::tagMatchRewardInfo* tagGameMatch::mutable_matchrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_.Mutable(index);
}
inline ::MatchPmd::tagMatchRewardInfo* tagGameMatch::add_matchrewardinfo() {
  // @@protoc_insertion_point(field_add:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagMatchRewardInfo >*
tagGameMatch::mutable_matchrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:MatchPmd.tagGameMatch.matchrewardinfo)
  return &matchrewardinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagMatchRewardInfo >&
tagGameMatch::matchrewardinfo() const {
  // @@protoc_insertion_point(field_list:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_;
}

// string cbmatchrule = 17;
inline void tagGameMatch::clear_cbmatchrule() {
  cbmatchrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagGameMatch::cbmatchrule() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbmatchrule)
  return cbmatchrule_.GetNoArena();
}
inline void tagGameMatch::set_cbmatchrule(const ::std::string& value) {
  
  cbmatchrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbmatchrule)
}
#if LANG_CXX11
inline void tagGameMatch::set_cbmatchrule(::std::string&& value) {
  
  cbmatchrule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchPmd.tagGameMatch.cbmatchrule)
}
#endif
inline void tagGameMatch::set_cbmatchrule(const char* value) {
  
  cbmatchrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchPmd.tagGameMatch.cbmatchrule)
}
inline void tagGameMatch::set_cbmatchrule(const char* value, size_t size) {
  
  cbmatchrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchPmd.tagGameMatch.cbmatchrule)
}
inline ::std::string* tagGameMatch::mutable_cbmatchrule() {
  
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch.cbmatchrule)
  return cbmatchrule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagGameMatch::release_cbmatchrule() {
  // @@protoc_insertion_point(field_release:MatchPmd.tagGameMatch.cbmatchrule)
  
  return cbmatchrule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagGameMatch::set_allocated_cbmatchrule(::std::string* cbmatchrule) {
  if (cbmatchrule != NULL) {
    
  } else {
    
  }
  cbmatchrule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbmatchrule);
  // @@protoc_insertion_point(field_set_allocated:MatchPmd.tagGameMatch.cbmatchrule)
}

// -------------------------------------------------------------------

// tagGameMatch_s2c

// .NullPmd.response respcmd = 1;
inline bool tagGameMatch_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
inline void tagGameMatch_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
inline const ::NullPmd::response& tagGameMatch_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
inline ::NullPmd::response* tagGameMatch_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch_s2c.respcmd)
  return respcmd_;
}
inline ::NullPmd::response* tagGameMatch_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:MatchPmd.tagGameMatch_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
inline void tagGameMatch_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MatchPmd.tagGameMatch_s2c.respcmd)
}

// repeated .MatchPmd.tagGameMatch tagGameMatch = 2;
inline int tagGameMatch_s2c::taggamematch_size() const {
  return taggamematch_.size();
}
inline void tagGameMatch_s2c::clear_taggamematch() {
  taggamematch_.Clear();
}
inline const ::MatchPmd::tagGameMatch& tagGameMatch_s2c::taggamematch(int index) const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_.Get(index);
}
inline ::MatchPmd::tagGameMatch* tagGameMatch_s2c::mutable_taggamematch(int index) {
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_.Mutable(index);
}
inline ::MatchPmd::tagGameMatch* tagGameMatch_s2c::add_taggamematch() {
  // @@protoc_insertion_point(field_add:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagGameMatch >*
tagGameMatch_s2c::mutable_taggamematch() {
  // @@protoc_insertion_point(field_mutable_list:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return &taggamematch_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagGameMatch >&
tagGameMatch_s2c::taggamematch() const {
  // @@protoc_insertion_point(field_list:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace MatchPmd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MatchPmd_2eproto__INCLUDED
