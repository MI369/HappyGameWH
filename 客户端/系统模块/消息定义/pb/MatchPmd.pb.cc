// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchPmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MatchPmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MatchPmd {
class tagMatchRewardInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagMatchRewardInfo> {
} _tagMatchRewardInfo_default_instance_;
class tagGameMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameMatch> {
} _tagGameMatch_default_instance_;
class tagGameMatch_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameMatch_s2c> {
} _tagGameMatch_s2c_default_instance_;

namespace protobuf_MatchPmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMatchRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMatchRewardInfo, wrankid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMatchRewardInfo, lrewardgold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMatchRewardInfo, lrewardingot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMatchRewardInfo, dwrewardexperience_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, wserverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, dwmatchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbmatchtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, szmatchname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbfeetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbdeductarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, lsignupfee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbsignupmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbjoincondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbmemberorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, lexperience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbrankingmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, wcountinnings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbfiltergradesmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, wrewardcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, matchrewardinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch, cbmatchrule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameMatch_s2c, taggamematch_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(tagMatchRewardInfo)},
  { 8, -1, sizeof(tagGameMatch)},
  { 29, -1, sizeof(tagGameMatch_s2c)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagMatchRewardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameMatch_s2c_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "MatchPmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _tagMatchRewardInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _tagGameMatch_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _tagGameMatch_s2c_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NullPmd::protobuf_NullPmd_2eproto::InitDefaults();
  _tagMatchRewardInfo_default_instance_.DefaultConstruct();
  _tagGameMatch_default_instance_.DefaultConstruct();
  _tagGameMatch_s2c_default_instance_.DefaultConstruct();
  _tagGameMatch_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016MatchPmd.proto\022\010MatchPmd\032\rNullPmd.prot"
      "o\"l\n\022tagMatchRewardInfo\022\017\n\007wrankid\030\001 \001(\005"
      "\022\023\n\013lrewardgold\030\002 \001(\004\022\024\n\014lrewardingot\030\003 "
      "\001(\004\022\032\n\022dwrewardexperience\030\004 \001(\004\"\242\003\n\014tagG"
      "ameMatch\022\021\n\twserverid\030\001 \001(\005\022\021\n\tdwmatchid"
      "\030\002 \001(\004\022\023\n\013cbmatchtype\030\003 \001(\005\022\023\n\013szmatchna"
      "me\030\004 \001(\t\022\021\n\tcbfeetype\030\005 \001(\005\022\024\n\014cbdeducta"
      "rea\030\006 \001(\005\022\022\n\nlsignupfee\030\007 \001(\004\022\024\n\014cbsignu"
      "pmode\030\010 \001(\005\022\027\n\017cbjoincondition\030\t \001(\005\022\025\n\r"
      "cbmemberorder\030\n \001(\005\022\023\n\013lexperience\030\013 \001(\004"
      "\022\025\n\rcbrankingmode\030\014 \001(\005\022\025\n\rwcountinnings"
      "\030\r \001(\005\022\032\n\022cbfiltergradesmode\030\016 \001(\005\022\024\n\014wr"
      "ewardcount\030\017 \001(\005\0225\n\017matchrewardinfo\030\020 \003("
      "\0132\034.MatchPmd.tagMatchRewardInfo\022\023\n\013cbmat"
      "chrule\030\021 \001(\t\"d\n\020tagGameMatch_s2c\022\"\n\007resp"
      "cmd\030\001 \001(\0132\021.NullPmd.response\022,\n\014tagGameM"
      "atch\030\002 \003(\0132\026.MatchPmd.tagGameMatchb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 682);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MatchPmd.proto", &protobuf_RegisterTypes);
  ::NullPmd::protobuf_NullPmd_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_MatchPmd_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagMatchRewardInfo::kWrankidFieldNumber;
const int tagMatchRewardInfo::kLrewardgoldFieldNumber;
const int tagMatchRewardInfo::kLrewardingotFieldNumber;
const int tagMatchRewardInfo::kDwrewardexperienceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagMatchRewardInfo::tagMatchRewardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MatchPmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchPmd.tagMatchRewardInfo)
}
tagMatchRewardInfo::tagMatchRewardInfo(const tagMatchRewardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lrewardgold_, &from.lrewardgold_,
    reinterpret_cast<char*>(&wrankid_) -
    reinterpret_cast<char*>(&lrewardgold_) + sizeof(wrankid_));
  // @@protoc_insertion_point(copy_constructor:MatchPmd.tagMatchRewardInfo)
}

void tagMatchRewardInfo::SharedCtor() {
  ::memset(&lrewardgold_, 0, reinterpret_cast<char*>(&wrankid_) -
    reinterpret_cast<char*>(&lrewardgold_) + sizeof(wrankid_));
  _cached_size_ = 0;
}

tagMatchRewardInfo::~tagMatchRewardInfo() {
  // @@protoc_insertion_point(destructor:MatchPmd.tagMatchRewardInfo)
  SharedDtor();
}

void tagMatchRewardInfo::SharedDtor() {
}

void tagMatchRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagMatchRewardInfo::descriptor() {
  protobuf_MatchPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MatchPmd_2eproto::file_level_metadata[0].descriptor;
}

const tagMatchRewardInfo& tagMatchRewardInfo::default_instance() {
  protobuf_MatchPmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagMatchRewardInfo* tagMatchRewardInfo::New(::google::protobuf::Arena* arena) const {
  tagMatchRewardInfo* n = new tagMatchRewardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagMatchRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchPmd.tagMatchRewardInfo)
  ::memset(&lrewardgold_, 0, reinterpret_cast<char*>(&wrankid_) -
    reinterpret_cast<char*>(&lrewardgold_) + sizeof(wrankid_));
}

bool tagMatchRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchPmd.tagMatchRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wrankid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrankid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lrewardgold = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lrewardgold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lrewardingot = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lrewardingot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwrewardexperience = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwrewardexperience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchPmd.tagMatchRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchPmd.tagMatchRewardInfo)
  return false;
#undef DO_
}

void tagMatchRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchPmd.tagMatchRewardInfo)
  // int32 wrankid = 1;
  if (this->wrankid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wrankid(), output);
  }

  // uint64 lrewardgold = 2;
  if (this->lrewardgold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lrewardgold(), output);
  }

  // uint64 lrewardingot = 3;
  if (this->lrewardingot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lrewardingot(), output);
  }

  // uint64 dwrewardexperience = 4;
  if (this->dwrewardexperience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dwrewardexperience(), output);
  }

  // @@protoc_insertion_point(serialize_end:MatchPmd.tagMatchRewardInfo)
}

::google::protobuf::uint8* tagMatchRewardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MatchPmd.tagMatchRewardInfo)
  // int32 wrankid = 1;
  if (this->wrankid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wrankid(), target);
  }

  // uint64 lrewardgold = 2;
  if (this->lrewardgold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lrewardgold(), target);
  }

  // uint64 lrewardingot = 3;
  if (this->lrewardingot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lrewardingot(), target);
  }

  // uint64 dwrewardexperience = 4;
  if (this->dwrewardexperience() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dwrewardexperience(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MatchPmd.tagMatchRewardInfo)
  return target;
}

size_t tagMatchRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchPmd.tagMatchRewardInfo)
  size_t total_size = 0;

  // uint64 lrewardgold = 2;
  if (this->lrewardgold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lrewardgold());
  }

  // uint64 lrewardingot = 3;
  if (this->lrewardingot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lrewardingot());
  }

  // uint64 dwrewardexperience = 4;
  if (this->dwrewardexperience() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwrewardexperience());
  }

  // int32 wrankid = 1;
  if (this->wrankid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wrankid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagMatchRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchPmd.tagMatchRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const tagMatchRewardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagMatchRewardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchPmd.tagMatchRewardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchPmd.tagMatchRewardInfo)
    MergeFrom(*source);
  }
}

void tagMatchRewardInfo::MergeFrom(const tagMatchRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchPmd.tagMatchRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.lrewardgold() != 0) {
    set_lrewardgold(from.lrewardgold());
  }
  if (from.lrewardingot() != 0) {
    set_lrewardingot(from.lrewardingot());
  }
  if (from.dwrewardexperience() != 0) {
    set_dwrewardexperience(from.dwrewardexperience());
  }
  if (from.wrankid() != 0) {
    set_wrankid(from.wrankid());
  }
}

void tagMatchRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchPmd.tagMatchRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagMatchRewardInfo::CopyFrom(const tagMatchRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchPmd.tagMatchRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagMatchRewardInfo::IsInitialized() const {
  return true;
}

void tagMatchRewardInfo::Swap(tagMatchRewardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagMatchRewardInfo::InternalSwap(tagMatchRewardInfo* other) {
  std::swap(lrewardgold_, other->lrewardgold_);
  std::swap(lrewardingot_, other->lrewardingot_);
  std::swap(dwrewardexperience_, other->dwrewardexperience_);
  std::swap(wrankid_, other->wrankid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagMatchRewardInfo::GetMetadata() const {
  protobuf_MatchPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MatchPmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagMatchRewardInfo

// int32 wrankid = 1;
void tagMatchRewardInfo::clear_wrankid() {
  wrankid_ = 0;
}
::google::protobuf::int32 tagMatchRewardInfo::wrankid() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.wrankid)
  return wrankid_;
}
void tagMatchRewardInfo::set_wrankid(::google::protobuf::int32 value) {
  
  wrankid_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.wrankid)
}

// uint64 lrewardgold = 2;
void tagMatchRewardInfo::clear_lrewardgold() {
  lrewardgold_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagMatchRewardInfo::lrewardgold() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.lrewardgold)
  return lrewardgold_;
}
void tagMatchRewardInfo::set_lrewardgold(::google::protobuf::uint64 value) {
  
  lrewardgold_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.lrewardgold)
}

// uint64 lrewardingot = 3;
void tagMatchRewardInfo::clear_lrewardingot() {
  lrewardingot_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagMatchRewardInfo::lrewardingot() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.lrewardingot)
  return lrewardingot_;
}
void tagMatchRewardInfo::set_lrewardingot(::google::protobuf::uint64 value) {
  
  lrewardingot_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.lrewardingot)
}

// uint64 dwrewardexperience = 4;
void tagMatchRewardInfo::clear_dwrewardexperience() {
  dwrewardexperience_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagMatchRewardInfo::dwrewardexperience() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagMatchRewardInfo.dwrewardexperience)
  return dwrewardexperience_;
}
void tagMatchRewardInfo::set_dwrewardexperience(::google::protobuf::uint64 value) {
  
  dwrewardexperience_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagMatchRewardInfo.dwrewardexperience)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameMatch::kWserveridFieldNumber;
const int tagGameMatch::kDwmatchidFieldNumber;
const int tagGameMatch::kCbmatchtypeFieldNumber;
const int tagGameMatch::kSzmatchnameFieldNumber;
const int tagGameMatch::kCbfeetypeFieldNumber;
const int tagGameMatch::kCbdeductareaFieldNumber;
const int tagGameMatch::kLsignupfeeFieldNumber;
const int tagGameMatch::kCbsignupmodeFieldNumber;
const int tagGameMatch::kCbjoinconditionFieldNumber;
const int tagGameMatch::kCbmemberorderFieldNumber;
const int tagGameMatch::kLexperienceFieldNumber;
const int tagGameMatch::kCbrankingmodeFieldNumber;
const int tagGameMatch::kWcountinningsFieldNumber;
const int tagGameMatch::kCbfiltergradesmodeFieldNumber;
const int tagGameMatch::kWrewardcountFieldNumber;
const int tagGameMatch::kMatchrewardinfoFieldNumber;
const int tagGameMatch::kCbmatchruleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameMatch::tagGameMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MatchPmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchPmd.tagGameMatch)
}
tagGameMatch::tagGameMatch(const tagGameMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      matchrewardinfo_(from.matchrewardinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szmatchname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szmatchname().size() > 0) {
    szmatchname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szmatchname_);
  }
  cbmatchrule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbmatchrule().size() > 0) {
    cbmatchrule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbmatchrule_);
  }
  ::memcpy(&dwmatchid_, &from.dwmatchid_,
    reinterpret_cast<char*>(&wrewardcount_) -
    reinterpret_cast<char*>(&dwmatchid_) + sizeof(wrewardcount_));
  // @@protoc_insertion_point(copy_constructor:MatchPmd.tagGameMatch)
}

void tagGameMatch::SharedCtor() {
  szmatchname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbmatchrule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dwmatchid_, 0, reinterpret_cast<char*>(&wrewardcount_) -
    reinterpret_cast<char*>(&dwmatchid_) + sizeof(wrewardcount_));
  _cached_size_ = 0;
}

tagGameMatch::~tagGameMatch() {
  // @@protoc_insertion_point(destructor:MatchPmd.tagGameMatch)
  SharedDtor();
}

void tagGameMatch::SharedDtor() {
  szmatchname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbmatchrule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagGameMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameMatch::descriptor() {
  protobuf_MatchPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MatchPmd_2eproto::file_level_metadata[1].descriptor;
}

const tagGameMatch& tagGameMatch::default_instance() {
  protobuf_MatchPmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameMatch* tagGameMatch::New(::google::protobuf::Arena* arena) const {
  tagGameMatch* n = new tagGameMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchPmd.tagGameMatch)
  matchrewardinfo_.Clear();
  szmatchname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cbmatchrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dwmatchid_, 0, reinterpret_cast<char*>(&wrewardcount_) -
    reinterpret_cast<char*>(&dwmatchid_) + sizeof(wrewardcount_));
}

bool tagGameMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchPmd.tagGameMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wserverid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwmatchid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwmatchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbmatchtype = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbmatchtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szmatchname = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmatchname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szmatchname().data(), this->szmatchname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchPmd.tagGameMatch.szmatchname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbfeetype = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbfeetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbdeductarea = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbdeductarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lsignupfee = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lsignupfee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbsignupmode = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbsignupmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbjoincondition = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbjoincondition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbmemberorder = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbmemberorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lexperience = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lexperience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbrankingmode = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbrankingmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wcountinnings = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wcountinnings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbfiltergradesmode = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbfiltergradesmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wrewardcount = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrewardcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchPmd.tagMatchRewardInfo matchrewardinfo = 16;
      case 16: {
        if (tag == 130u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matchrewardinfo()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string cbmatchrule = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cbmatchrule()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cbmatchrule().data(), this->cbmatchrule().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MatchPmd.tagGameMatch.cbmatchrule"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchPmd.tagGameMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchPmd.tagGameMatch)
  return false;
#undef DO_
}

void tagGameMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchPmd.tagGameMatch)
  // int32 wserverid = 1;
  if (this->wserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wserverid(), output);
  }

  // uint64 dwmatchid = 2;
  if (this->dwmatchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwmatchid(), output);
  }

  // int32 cbmatchtype = 3;
  if (this->cbmatchtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbmatchtype(), output);
  }

  // string szmatchname = 4;
  if (this->szmatchname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szmatchname().data(), this->szmatchname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchPmd.tagGameMatch.szmatchname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->szmatchname(), output);
  }

  // int32 cbfeetype = 5;
  if (this->cbfeetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbfeetype(), output);
  }

  // int32 cbdeductarea = 6;
  if (this->cbdeductarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbdeductarea(), output);
  }

  // uint64 lsignupfee = 7;
  if (this->lsignupfee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lsignupfee(), output);
  }

  // int32 cbsignupmode = 8;
  if (this->cbsignupmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cbsignupmode(), output);
  }

  // int32 cbjoincondition = 9;
  if (this->cbjoincondition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cbjoincondition(), output);
  }

  // int32 cbmemberorder = 10;
  if (this->cbmemberorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cbmemberorder(), output);
  }

  // uint64 lexperience = 11;
  if (this->lexperience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->lexperience(), output);
  }

  // int32 cbrankingmode = 12;
  if (this->cbrankingmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cbrankingmode(), output);
  }

  // int32 wcountinnings = 13;
  if (this->wcountinnings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wcountinnings(), output);
  }

  // int32 cbfiltergradesmode = 14;
  if (this->cbfiltergradesmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cbfiltergradesmode(), output);
  }

  // int32 wrewardcount = 15;
  if (this->wrewardcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->wrewardcount(), output);
  }

  // repeated .MatchPmd.tagMatchRewardInfo matchrewardinfo = 16;
  for (unsigned int i = 0, n = this->matchrewardinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->matchrewardinfo(i), output);
  }

  // string cbmatchrule = 17;
  if (this->cbmatchrule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cbmatchrule().data(), this->cbmatchrule().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchPmd.tagGameMatch.cbmatchrule");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->cbmatchrule(), output);
  }

  // @@protoc_insertion_point(serialize_end:MatchPmd.tagGameMatch)
}

::google::protobuf::uint8* tagGameMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MatchPmd.tagGameMatch)
  // int32 wserverid = 1;
  if (this->wserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wserverid(), target);
  }

  // uint64 dwmatchid = 2;
  if (this->dwmatchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dwmatchid(), target);
  }

  // int32 cbmatchtype = 3;
  if (this->cbmatchtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbmatchtype(), target);
  }

  // string szmatchname = 4;
  if (this->szmatchname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szmatchname().data(), this->szmatchname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchPmd.tagGameMatch.szmatchname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->szmatchname(), target);
  }

  // int32 cbfeetype = 5;
  if (this->cbfeetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbfeetype(), target);
  }

  // int32 cbdeductarea = 6;
  if (this->cbdeductarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbdeductarea(), target);
  }

  // uint64 lsignupfee = 7;
  if (this->lsignupfee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lsignupfee(), target);
  }

  // int32 cbsignupmode = 8;
  if (this->cbsignupmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cbsignupmode(), target);
  }

  // int32 cbjoincondition = 9;
  if (this->cbjoincondition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cbjoincondition(), target);
  }

  // int32 cbmemberorder = 10;
  if (this->cbmemberorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cbmemberorder(), target);
  }

  // uint64 lexperience = 11;
  if (this->lexperience() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->lexperience(), target);
  }

  // int32 cbrankingmode = 12;
  if (this->cbrankingmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cbrankingmode(), target);
  }

  // int32 wcountinnings = 13;
  if (this->wcountinnings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wcountinnings(), target);
  }

  // int32 cbfiltergradesmode = 14;
  if (this->cbfiltergradesmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cbfiltergradesmode(), target);
  }

  // int32 wrewardcount = 15;
  if (this->wrewardcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->wrewardcount(), target);
  }

  // repeated .MatchPmd.tagMatchRewardInfo matchrewardinfo = 16;
  for (unsigned int i = 0, n = this->matchrewardinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->matchrewardinfo(i), false, target);
  }

  // string cbmatchrule = 17;
  if (this->cbmatchrule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cbmatchrule().data(), this->cbmatchrule().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MatchPmd.tagGameMatch.cbmatchrule");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->cbmatchrule(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MatchPmd.tagGameMatch)
  return target;
}

size_t tagGameMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchPmd.tagGameMatch)
  size_t total_size = 0;

  // repeated .MatchPmd.tagMatchRewardInfo matchrewardinfo = 16;
  {
    unsigned int count = this->matchrewardinfo_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchrewardinfo(i));
    }
  }

  // string szmatchname = 4;
  if (this->szmatchname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szmatchname());
  }

  // string cbmatchrule = 17;
  if (this->cbmatchrule().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cbmatchrule());
  }

  // uint64 dwmatchid = 2;
  if (this->dwmatchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwmatchid());
  }

  // int32 wserverid = 1;
  if (this->wserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverid());
  }

  // int32 cbmatchtype = 3;
  if (this->cbmatchtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbmatchtype());
  }

  // int32 cbfeetype = 5;
  if (this->cbfeetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbfeetype());
  }

  // int32 cbdeductarea = 6;
  if (this->cbdeductarea() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbdeductarea());
  }

  // uint64 lsignupfee = 7;
  if (this->lsignupfee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lsignupfee());
  }

  // int32 cbsignupmode = 8;
  if (this->cbsignupmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbsignupmode());
  }

  // int32 cbjoincondition = 9;
  if (this->cbjoincondition() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbjoincondition());
  }

  // uint64 lexperience = 11;
  if (this->lexperience() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lexperience());
  }

  // int32 cbmemberorder = 10;
  if (this->cbmemberorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbmemberorder());
  }

  // int32 cbrankingmode = 12;
  if (this->cbrankingmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbrankingmode());
  }

  // int32 wcountinnings = 13;
  if (this->wcountinnings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wcountinnings());
  }

  // int32 cbfiltergradesmode = 14;
  if (this->cbfiltergradesmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbfiltergradesmode());
  }

  // int32 wrewardcount = 15;
  if (this->wrewardcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wrewardcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchPmd.tagGameMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchPmd.tagGameMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchPmd.tagGameMatch)
    MergeFrom(*source);
  }
}

void tagGameMatch::MergeFrom(const tagGameMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchPmd.tagGameMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchrewardinfo_.MergeFrom(from.matchrewardinfo_);
  if (from.szmatchname().size() > 0) {

    szmatchname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szmatchname_);
  }
  if (from.cbmatchrule().size() > 0) {

    cbmatchrule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbmatchrule_);
  }
  if (from.dwmatchid() != 0) {
    set_dwmatchid(from.dwmatchid());
  }
  if (from.wserverid() != 0) {
    set_wserverid(from.wserverid());
  }
  if (from.cbmatchtype() != 0) {
    set_cbmatchtype(from.cbmatchtype());
  }
  if (from.cbfeetype() != 0) {
    set_cbfeetype(from.cbfeetype());
  }
  if (from.cbdeductarea() != 0) {
    set_cbdeductarea(from.cbdeductarea());
  }
  if (from.lsignupfee() != 0) {
    set_lsignupfee(from.lsignupfee());
  }
  if (from.cbsignupmode() != 0) {
    set_cbsignupmode(from.cbsignupmode());
  }
  if (from.cbjoincondition() != 0) {
    set_cbjoincondition(from.cbjoincondition());
  }
  if (from.lexperience() != 0) {
    set_lexperience(from.lexperience());
  }
  if (from.cbmemberorder() != 0) {
    set_cbmemberorder(from.cbmemberorder());
  }
  if (from.cbrankingmode() != 0) {
    set_cbrankingmode(from.cbrankingmode());
  }
  if (from.wcountinnings() != 0) {
    set_wcountinnings(from.wcountinnings());
  }
  if (from.cbfiltergradesmode() != 0) {
    set_cbfiltergradesmode(from.cbfiltergradesmode());
  }
  if (from.wrewardcount() != 0) {
    set_wrewardcount(from.wrewardcount());
  }
}

void tagGameMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchPmd.tagGameMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameMatch::CopyFrom(const tagGameMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchPmd.tagGameMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameMatch::IsInitialized() const {
  return true;
}

void tagGameMatch::Swap(tagGameMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameMatch::InternalSwap(tagGameMatch* other) {
  matchrewardinfo_.UnsafeArenaSwap(&other->matchrewardinfo_);
  szmatchname_.Swap(&other->szmatchname_);
  cbmatchrule_.Swap(&other->cbmatchrule_);
  std::swap(dwmatchid_, other->dwmatchid_);
  std::swap(wserverid_, other->wserverid_);
  std::swap(cbmatchtype_, other->cbmatchtype_);
  std::swap(cbfeetype_, other->cbfeetype_);
  std::swap(cbdeductarea_, other->cbdeductarea_);
  std::swap(lsignupfee_, other->lsignupfee_);
  std::swap(cbsignupmode_, other->cbsignupmode_);
  std::swap(cbjoincondition_, other->cbjoincondition_);
  std::swap(lexperience_, other->lexperience_);
  std::swap(cbmemberorder_, other->cbmemberorder_);
  std::swap(cbrankingmode_, other->cbrankingmode_);
  std::swap(wcountinnings_, other->wcountinnings_);
  std::swap(cbfiltergradesmode_, other->cbfiltergradesmode_);
  std::swap(wrewardcount_, other->wrewardcount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameMatch::GetMetadata() const {
  protobuf_MatchPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MatchPmd_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameMatch

// int32 wserverid = 1;
void tagGameMatch::clear_wserverid() {
  wserverid_ = 0;
}
::google::protobuf::int32 tagGameMatch::wserverid() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.wserverid)
  return wserverid_;
}
void tagGameMatch::set_wserverid(::google::protobuf::int32 value) {
  
  wserverid_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.wserverid)
}

// uint64 dwmatchid = 2;
void tagGameMatch::clear_dwmatchid() {
  dwmatchid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameMatch::dwmatchid() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.dwmatchid)
  return dwmatchid_;
}
void tagGameMatch::set_dwmatchid(::google::protobuf::uint64 value) {
  
  dwmatchid_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.dwmatchid)
}

// int32 cbmatchtype = 3;
void tagGameMatch::clear_cbmatchtype() {
  cbmatchtype_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbmatchtype() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbmatchtype)
  return cbmatchtype_;
}
void tagGameMatch::set_cbmatchtype(::google::protobuf::int32 value) {
  
  cbmatchtype_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbmatchtype)
}

// string szmatchname = 4;
void tagGameMatch::clear_szmatchname() {
  szmatchname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameMatch::szmatchname() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.szmatchname)
  return szmatchname_.GetNoArena();
}
void tagGameMatch::set_szmatchname(const ::std::string& value) {
  
  szmatchname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.szmatchname)
}
#if LANG_CXX11
void tagGameMatch::set_szmatchname(::std::string&& value) {
  
  szmatchname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchPmd.tagGameMatch.szmatchname)
}
#endif
void tagGameMatch::set_szmatchname(const char* value) {
  
  szmatchname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchPmd.tagGameMatch.szmatchname)
}
void tagGameMatch::set_szmatchname(const char* value, size_t size) {
  
  szmatchname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchPmd.tagGameMatch.szmatchname)
}
::std::string* tagGameMatch::mutable_szmatchname() {
  
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch.szmatchname)
  return szmatchname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameMatch::release_szmatchname() {
  // @@protoc_insertion_point(field_release:MatchPmd.tagGameMatch.szmatchname)
  
  return szmatchname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameMatch::set_allocated_szmatchname(::std::string* szmatchname) {
  if (szmatchname != NULL) {
    
  } else {
    
  }
  szmatchname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szmatchname);
  // @@protoc_insertion_point(field_set_allocated:MatchPmd.tagGameMatch.szmatchname)
}

// int32 cbfeetype = 5;
void tagGameMatch::clear_cbfeetype() {
  cbfeetype_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbfeetype() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbfeetype)
  return cbfeetype_;
}
void tagGameMatch::set_cbfeetype(::google::protobuf::int32 value) {
  
  cbfeetype_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbfeetype)
}

// int32 cbdeductarea = 6;
void tagGameMatch::clear_cbdeductarea() {
  cbdeductarea_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbdeductarea() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbdeductarea)
  return cbdeductarea_;
}
void tagGameMatch::set_cbdeductarea(::google::protobuf::int32 value) {
  
  cbdeductarea_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbdeductarea)
}

// uint64 lsignupfee = 7;
void tagGameMatch::clear_lsignupfee() {
  lsignupfee_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameMatch::lsignupfee() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.lsignupfee)
  return lsignupfee_;
}
void tagGameMatch::set_lsignupfee(::google::protobuf::uint64 value) {
  
  lsignupfee_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.lsignupfee)
}

// int32 cbsignupmode = 8;
void tagGameMatch::clear_cbsignupmode() {
  cbsignupmode_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbsignupmode() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbsignupmode)
  return cbsignupmode_;
}
void tagGameMatch::set_cbsignupmode(::google::protobuf::int32 value) {
  
  cbsignupmode_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbsignupmode)
}

// int32 cbjoincondition = 9;
void tagGameMatch::clear_cbjoincondition() {
  cbjoincondition_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbjoincondition() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbjoincondition)
  return cbjoincondition_;
}
void tagGameMatch::set_cbjoincondition(::google::protobuf::int32 value) {
  
  cbjoincondition_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbjoincondition)
}

// int32 cbmemberorder = 10;
void tagGameMatch::clear_cbmemberorder() {
  cbmemberorder_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbmemberorder() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbmemberorder)
  return cbmemberorder_;
}
void tagGameMatch::set_cbmemberorder(::google::protobuf::int32 value) {
  
  cbmemberorder_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbmemberorder)
}

// uint64 lexperience = 11;
void tagGameMatch::clear_lexperience() {
  lexperience_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameMatch::lexperience() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.lexperience)
  return lexperience_;
}
void tagGameMatch::set_lexperience(::google::protobuf::uint64 value) {
  
  lexperience_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.lexperience)
}

// int32 cbrankingmode = 12;
void tagGameMatch::clear_cbrankingmode() {
  cbrankingmode_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbrankingmode() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbrankingmode)
  return cbrankingmode_;
}
void tagGameMatch::set_cbrankingmode(::google::protobuf::int32 value) {
  
  cbrankingmode_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbrankingmode)
}

// int32 wcountinnings = 13;
void tagGameMatch::clear_wcountinnings() {
  wcountinnings_ = 0;
}
::google::protobuf::int32 tagGameMatch::wcountinnings() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.wcountinnings)
  return wcountinnings_;
}
void tagGameMatch::set_wcountinnings(::google::protobuf::int32 value) {
  
  wcountinnings_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.wcountinnings)
}

// int32 cbfiltergradesmode = 14;
void tagGameMatch::clear_cbfiltergradesmode() {
  cbfiltergradesmode_ = 0;
}
::google::protobuf::int32 tagGameMatch::cbfiltergradesmode() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbfiltergradesmode)
  return cbfiltergradesmode_;
}
void tagGameMatch::set_cbfiltergradesmode(::google::protobuf::int32 value) {
  
  cbfiltergradesmode_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbfiltergradesmode)
}

// int32 wrewardcount = 15;
void tagGameMatch::clear_wrewardcount() {
  wrewardcount_ = 0;
}
::google::protobuf::int32 tagGameMatch::wrewardcount() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.wrewardcount)
  return wrewardcount_;
}
void tagGameMatch::set_wrewardcount(::google::protobuf::int32 value) {
  
  wrewardcount_ = value;
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.wrewardcount)
}

// repeated .MatchPmd.tagMatchRewardInfo matchrewardinfo = 16;
int tagGameMatch::matchrewardinfo_size() const {
  return matchrewardinfo_.size();
}
void tagGameMatch::clear_matchrewardinfo() {
  matchrewardinfo_.Clear();
}
const ::MatchPmd::tagMatchRewardInfo& tagGameMatch::matchrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_.Get(index);
}
::MatchPmd::tagMatchRewardInfo* tagGameMatch::mutable_matchrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_.Mutable(index);
}
::MatchPmd::tagMatchRewardInfo* tagGameMatch::add_matchrewardinfo() {
  // @@protoc_insertion_point(field_add:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::MatchPmd::tagMatchRewardInfo >*
tagGameMatch::mutable_matchrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:MatchPmd.tagGameMatch.matchrewardinfo)
  return &matchrewardinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagMatchRewardInfo >&
tagGameMatch::matchrewardinfo() const {
  // @@protoc_insertion_point(field_list:MatchPmd.tagGameMatch.matchrewardinfo)
  return matchrewardinfo_;
}

// string cbmatchrule = 17;
void tagGameMatch::clear_cbmatchrule() {
  cbmatchrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameMatch::cbmatchrule() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch.cbmatchrule)
  return cbmatchrule_.GetNoArena();
}
void tagGameMatch::set_cbmatchrule(const ::std::string& value) {
  
  cbmatchrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatchPmd.tagGameMatch.cbmatchrule)
}
#if LANG_CXX11
void tagGameMatch::set_cbmatchrule(::std::string&& value) {
  
  cbmatchrule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatchPmd.tagGameMatch.cbmatchrule)
}
#endif
void tagGameMatch::set_cbmatchrule(const char* value) {
  
  cbmatchrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatchPmd.tagGameMatch.cbmatchrule)
}
void tagGameMatch::set_cbmatchrule(const char* value, size_t size) {
  
  cbmatchrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatchPmd.tagGameMatch.cbmatchrule)
}
::std::string* tagGameMatch::mutable_cbmatchrule() {
  
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch.cbmatchrule)
  return cbmatchrule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameMatch::release_cbmatchrule() {
  // @@protoc_insertion_point(field_release:MatchPmd.tagGameMatch.cbmatchrule)
  
  return cbmatchrule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameMatch::set_allocated_cbmatchrule(::std::string* cbmatchrule) {
  if (cbmatchrule != NULL) {
    
  } else {
    
  }
  cbmatchrule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbmatchrule);
  // @@protoc_insertion_point(field_set_allocated:MatchPmd.tagGameMatch.cbmatchrule)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameMatch_s2c::kRespcmdFieldNumber;
const int tagGameMatch_s2c::kTagGameMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameMatch_s2c::tagGameMatch_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MatchPmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchPmd.tagGameMatch_s2c)
}
tagGameMatch_s2c::tagGameMatch_s2c(const tagGameMatch_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggamematch_(from.taggamematch_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MatchPmd.tagGameMatch_s2c)
}

void tagGameMatch_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGameMatch_s2c::~tagGameMatch_s2c() {
  // @@protoc_insertion_point(destructor:MatchPmd.tagGameMatch_s2c)
  SharedDtor();
}

void tagGameMatch_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGameMatch_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameMatch_s2c::descriptor() {
  protobuf_MatchPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MatchPmd_2eproto::file_level_metadata[2].descriptor;
}

const tagGameMatch_s2c& tagGameMatch_s2c::default_instance() {
  protobuf_MatchPmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameMatch_s2c* tagGameMatch_s2c::New(::google::protobuf::Arena* arena) const {
  tagGameMatch_s2c* n = new tagGameMatch_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameMatch_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchPmd.tagGameMatch_s2c)
  taggamematch_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGameMatch_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchPmd.tagGameMatch_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MatchPmd.tagGameMatch tagGameMatch = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggamematch()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchPmd.tagGameMatch_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchPmd.tagGameMatch_s2c)
  return false;
#undef DO_
}

void tagGameMatch_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchPmd.tagGameMatch_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .MatchPmd.tagGameMatch tagGameMatch = 2;
  for (unsigned int i = 0, n = this->taggamematch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggamematch(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MatchPmd.tagGameMatch_s2c)
}

::google::protobuf::uint8* tagGameMatch_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MatchPmd.tagGameMatch_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .MatchPmd.tagGameMatch tagGameMatch = 2;
  for (unsigned int i = 0, n = this->taggamematch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggamematch(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MatchPmd.tagGameMatch_s2c)
  return target;
}

size_t tagGameMatch_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchPmd.tagGameMatch_s2c)
  size_t total_size = 0;

  // repeated .MatchPmd.tagGameMatch tagGameMatch = 2;
  {
    unsigned int count = this->taggamematch_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggamematch(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameMatch_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchPmd.tagGameMatch_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameMatch_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameMatch_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchPmd.tagGameMatch_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchPmd.tagGameMatch_s2c)
    MergeFrom(*source);
  }
}

void tagGameMatch_s2c::MergeFrom(const tagGameMatch_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchPmd.tagGameMatch_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggamematch_.MergeFrom(from.taggamematch_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGameMatch_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchPmd.tagGameMatch_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameMatch_s2c::CopyFrom(const tagGameMatch_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchPmd.tagGameMatch_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameMatch_s2c::IsInitialized() const {
  return true;
}

void tagGameMatch_s2c::Swap(tagGameMatch_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameMatch_s2c::InternalSwap(tagGameMatch_s2c* other) {
  taggamematch_.UnsafeArenaSwap(&other->taggamematch_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameMatch_s2c::GetMetadata() const {
  protobuf_MatchPmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MatchPmd_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameMatch_s2c

// .NullPmd.response respcmd = 1;
bool tagGameMatch_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGameMatch_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGameMatch_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGameMatch_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGameMatch_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:MatchPmd.tagGameMatch_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGameMatch_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MatchPmd.tagGameMatch_s2c.respcmd)
}

// repeated .MatchPmd.tagGameMatch tagGameMatch = 2;
int tagGameMatch_s2c::taggamematch_size() const {
  return taggamematch_.size();
}
void tagGameMatch_s2c::clear_taggamematch() {
  taggamematch_.Clear();
}
const ::MatchPmd::tagGameMatch& tagGameMatch_s2c::taggamematch(int index) const {
  // @@protoc_insertion_point(field_get:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_.Get(index);
}
::MatchPmd::tagGameMatch* tagGameMatch_s2c::mutable_taggamematch(int index) {
  // @@protoc_insertion_point(field_mutable:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_.Mutable(index);
}
::MatchPmd::tagGameMatch* tagGameMatch_s2c::add_taggamematch() {
  // @@protoc_insertion_point(field_add:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_.Add();
}
::google::protobuf::RepeatedPtrField< ::MatchPmd::tagGameMatch >*
tagGameMatch_s2c::mutable_taggamematch() {
  // @@protoc_insertion_point(field_mutable_list:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return &taggamematch_;
}
const ::google::protobuf::RepeatedPtrField< ::MatchPmd::tagGameMatch >&
tagGameMatch_s2c::taggamematch() const {
  // @@protoc_insertion_point(field_list:MatchPmd.tagGameMatch_s2c.tagGameMatch)
  return taggamematch_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MatchPmd

// @@protoc_insertion_point(global_scope)
