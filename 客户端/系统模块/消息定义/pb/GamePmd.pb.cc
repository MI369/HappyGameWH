// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GamePmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GamePmd {
class taggametypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggametype> {
} _taggametype_default_instance_;
class taggamekindDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggamekind> {
} _taggamekind_default_instance_;
class tagGameNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameNode> {
} _tagGameNode_default_instance_;
class tagGamePageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGamePage> {
} _tagGamePage_default_instance_;
class tagGameServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameServer> {
} _tagGameServer_default_instance_;
class taggametype_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggametype_s2c> {
} _taggametype_s2c_default_instance_;
class taggamekind_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggamekind_s2c> {
} _taggamekind_s2c_default_instance_;
class tagGamePage_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGamePage_s2c> {
} _tagGamePage_s2c_default_instance_;
class tagGameNode_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameNode_s2c> {
} _tagGameNode_s2c_default_instance_;
class tagGameServer_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameServer_s2c> {
} _tagGameServer_s2c_default_instance_;

namespace protobuf_GamePmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, wjoinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, wtypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, sztypename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wtypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wjoinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wgameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wrecommend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wgameflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwonlinecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwandroidcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwsetcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwfullcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, szkindname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, szprocessname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wjoinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wnodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, sznodename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wpageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wnodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, woperatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, szdisplayname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wnodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverkind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wservertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, lcellscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, cbentermember_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, lenterscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwserverrule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwonlinecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwandroidcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwfullcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, szserveraddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, szservername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwsurporttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wtablecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwsetplayercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, szgameinfomation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype_s2c, taggametype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind_s2c, taggamekind_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage_s2c, taggamepage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode_s2c, taggamenode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer_s2c, taggameserver_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(taggametype)},
  { 8, -1, sizeof(taggamekind)},
  { 25, -1, sizeof(tagGameNode)},
  { 34, -1, sizeof(tagGamePage)},
  { 44, -1, sizeof(tagGameServer)},
  { 69, -1, sizeof(taggametype_s2c)},
  { 75, -1, sizeof(taggamekind_s2c)},
  { 81, -1, sizeof(tagGamePage_s2c)},
  { 87, -1, sizeof(tagGameNode_s2c)},
  { 93, -1, sizeof(tagGameServer_s2c)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggametype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggamekind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGamePage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggametype_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggamekind_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGamePage_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameNode_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameServer_s2c_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "GamePmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _taggametype_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _taggamekind_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _tagGameNode_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _tagGamePage_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _tagGameServer_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _taggametype_s2c_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _taggamekind_s2c_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _tagGamePage_s2c_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _tagGameNode_s2c_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _tagGameServer_s2c_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NullPmd::protobuf_NullPmd_2eproto::InitDefaults();
  _taggametype_default_instance_.DefaultConstruct();
  _taggamekind_default_instance_.DefaultConstruct();
  _tagGameNode_default_instance_.DefaultConstruct();
  _tagGamePage_default_instance_.DefaultConstruct();
  _tagGameServer_default_instance_.DefaultConstruct();
  _taggametype_s2c_default_instance_.DefaultConstruct();
  _taggamekind_s2c_default_instance_.DefaultConstruct();
  _tagGamePage_s2c_default_instance_.DefaultConstruct();
  _tagGameNode_s2c_default_instance_.DefaultConstruct();
  _tagGameServer_s2c_default_instance_.DefaultConstruct();
  _taggametype_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _taggamekind_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagGamePage_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagGameNode_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagGameServer_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rGamePmd.proto\022\007GamePmd\032\rNullPmd.proto\""
      "T\n\013taggametype\022\017\n\007wjoinid\030\001 \001(\005\022\017\n\007wsort"
      "id\030\002 \001(\005\022\017\n\007wtypeid\030\003 \001(\005\022\022\n\nsztypename\030"
      "\004 \001(\t\"\214\002\n\013taggamekind\022\017\n\007wtypeid\030\001 \001(\005\022\017"
      "\n\007wjoinid\030\002 \001(\005\022\017\n\007wsortid\030\003 \001(\005\022\017\n\007wkin"
      "did\030\004 \001(\005\022\017\n\007wgameid\030\005 \001(\005\022\022\n\nwrecommend"
      "\030\006 \001(\005\022\021\n\twgameflag\030\007 \001(\005\022\025\n\rdwonlinecou"
      "nt\030\010 \001(\004\022\026\n\016dwandroidcount\030\t \001(\004\022\022\n\ndwse"
      "tcount\030\n \001(\004\022\023\n\013dwfullcount\030\013 \001(\004\022\022\n\nszk"
      "indname\030\014 \001(\t\022\025\n\rszprocessname\030\r \001(\t\"e\n\013"
      "tagGameNode\022\017\n\007wkindid\030\001 \001(\005\022\017\n\007wjoinid\030"
      "\002 \001(\005\022\017\n\007wsortid\030\003 \001(\005\022\017\n\007wnodeid\030\004 \001(\005\022"
      "\022\n\nsznodename\030\005 \001(\t\"~\n\013tagGamePage\022\017\n\007wp"
      "ageid\030\001 \001(\005\022\017\n\007wkindid\030\002 \001(\005\022\017\n\007wnodeid\030"
      "\003 \001(\005\022\017\n\007wsortid\030\004 \001(\005\022\024\n\014woperatetype\030\005"
      " \001(\005\022\025\n\rszdisplayname\030\006 \001(\t\"\320\003\n\rtagGameS"
      "erver\022\017\n\007wKindID\030\001 \001(\005\022\017\n\007wNodeID\030\002 \001(\005\022"
      "\017\n\007wSortID\030\003 \001(\005\022\021\n\twServerID\030\004 \001(\005\022\023\n\013w"
      "ServerKind\030\005 \001(\005\022\023\n\013wServerType\030\006 \001(\005\022\024\n"
      "\014wServerLevel\030\007 \001(\005\022\023\n\013wServerPort\030\010 \001(\005"
      "\022\022\n\nlCellScore\030\t \001(\004\022\025\n\rcbEnterMember\030\n "
      "\001(\005\022\023\n\013lEnterScore\030\013 \001(\004\022\024\n\014dwServerRule"
      "\030\014 \001(\004\022\025\n\rdwOnLineCount\030\r \001(\004\022\026\n\016dwAndro"
      "idCount\030\016 \001(\004\022\023\n\013dwFullCount\030\017 \001(\004\022\024\n\014sz"
      "ServerAddr\030\020 \001(\t\022\024\n\014szServerName\030\021 \001(\t\022\025"
      "\n\rdwSurportType\030\022 \001(\004\022\023\n\013wTableCount\030\023 \001"
      "(\005\022\030\n\020dwSetPlayerCount\030\024 \001(\004\022\030\n\020szGameIn"
      "fomation\030\025 \001(\t\"`\n\017taggametype_s2c\022\"\n\007res"
      "pcmd\030\001 \001(\0132\021.NullPmd.response\022)\n\013taggame"
      "type\030\003 \003(\0132\024.GamePmd.taggametype\"`\n\017tagg"
      "amekind_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.NullPmd.r"
      "esponse\022)\n\013taggamekind\030\002 \003(\0132\024.GamePmd.t"
      "aggamekind\"`\n\017tagGamePage_s2c\022\"\n\007respcmd"
      "\030\001 \001(\0132\021.NullPmd.response\022)\n\013tagGamePage"
      "\030\002 \003(\0132\024.GamePmd.tagGamePage\"`\n\017tagGameN"
      "ode_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.NullPmd.respo"
      "nse\022)\n\013tagGameNode\030\002 \003(\0132\024.GamePmd.tagGa"
      "meNode\"f\n\021tagGameServer_s2c\022\"\n\007respcmd\030\001"
      " \001(\0132\021.NullPmd.response\022-\n\rtagGameServer"
      "\030\002 \003(\0132\026.GamePmd.tagGameServerb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GamePmd.proto", &protobuf_RegisterTypes);
  ::NullPmd::protobuf_NullPmd_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_GamePmd_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggametype::kWjoinidFieldNumber;
const int taggametype::kWsortidFieldNumber;
const int taggametype::kWtypeidFieldNumber;
const int taggametype::kSztypenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggametype::taggametype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggametype)
}
taggametype::taggametype(const taggametype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sztypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sztypename().size() > 0) {
    sztypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sztypename_);
  }
  ::memcpy(&wjoinid_, &from.wjoinid_,
    reinterpret_cast<char*>(&wtypeid_) -
    reinterpret_cast<char*>(&wjoinid_) + sizeof(wtypeid_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggametype)
}

void taggametype::SharedCtor() {
  sztypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wjoinid_, 0, reinterpret_cast<char*>(&wtypeid_) -
    reinterpret_cast<char*>(&wjoinid_) + sizeof(wtypeid_));
  _cached_size_ = 0;
}

taggametype::~taggametype() {
  // @@protoc_insertion_point(destructor:GamePmd.taggametype)
  SharedDtor();
}

void taggametype::SharedDtor() {
  sztypename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void taggametype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggametype::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[0].descriptor;
}

const taggametype& taggametype::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggametype* taggametype::New(::google::protobuf::Arena* arena) const {
  taggametype* n = new taggametype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggametype::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggametype)
  sztypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wjoinid_, 0, reinterpret_cast<char*>(&wtypeid_) -
    reinterpret_cast<char*>(&wjoinid_) + sizeof(wtypeid_));
}

bool taggametype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggametype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wjoinid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wjoinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wtypeid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sztypename = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztypename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sztypename().data(), this->sztypename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.taggametype.sztypename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggametype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggametype)
  return false;
#undef DO_
}

void taggametype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggametype)
  // int32 wjoinid = 1;
  if (this->wjoinid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wjoinid(), output);
  }

  // int32 wsortid = 2;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wsortid(), output);
  }

  // int32 wtypeid = 3;
  if (this->wtypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wtypeid(), output);
  }

  // string sztypename = 4;
  if (this->sztypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sztypename().data(), this->sztypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggametype.sztypename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sztypename(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggametype)
}

::google::protobuf::uint8* taggametype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggametype)
  // int32 wjoinid = 1;
  if (this->wjoinid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wjoinid(), target);
  }

  // int32 wsortid = 2;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wsortid(), target);
  }

  // int32 wtypeid = 3;
  if (this->wtypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wtypeid(), target);
  }

  // string sztypename = 4;
  if (this->sztypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sztypename().data(), this->sztypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggametype.sztypename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sztypename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggametype)
  return target;
}

size_t taggametype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggametype)
  size_t total_size = 0;

  // string sztypename = 4;
  if (this->sztypename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sztypename());
  }

  // int32 wjoinid = 1;
  if (this->wjoinid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wjoinid());
  }

  // int32 wsortid = 2;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wtypeid = 3;
  if (this->wtypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtypeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggametype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggametype)
  GOOGLE_DCHECK_NE(&from, this);
  const taggametype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggametype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggametype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggametype)
    MergeFrom(*source);
  }
}

void taggametype::MergeFrom(const taggametype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggametype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.sztypename().size() > 0) {

    sztypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sztypename_);
  }
  if (from.wjoinid() != 0) {
    set_wjoinid(from.wjoinid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wtypeid() != 0) {
    set_wtypeid(from.wtypeid());
  }
}

void taggametype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggametype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggametype::CopyFrom(const taggametype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggametype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggametype::IsInitialized() const {
  return true;
}

void taggametype::Swap(taggametype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggametype::InternalSwap(taggametype* other) {
  sztypename_.Swap(&other->sztypename_);
  std::swap(wjoinid_, other->wjoinid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wtypeid_, other->wtypeid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggametype::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggametype

// int32 wjoinid = 1;
void taggametype::clear_wjoinid() {
  wjoinid_ = 0;
}
::google::protobuf::int32 taggametype::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wjoinid)
  return wjoinid_;
}
void taggametype::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wjoinid)
}

// int32 wsortid = 2;
void taggametype::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 taggametype::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wsortid)
  return wsortid_;
}
void taggametype::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wsortid)
}

// int32 wtypeid = 3;
void taggametype::clear_wtypeid() {
  wtypeid_ = 0;
}
::google::protobuf::int32 taggametype::wtypeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wtypeid)
  return wtypeid_;
}
void taggametype::set_wtypeid(::google::protobuf::int32 value) {
  
  wtypeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wtypeid)
}

// string sztypename = 4;
void taggametype::clear_sztypename() {
  sztypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& taggametype::sztypename() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.sztypename)
  return sztypename_.GetNoArena();
}
void taggametype::set_sztypename(const ::std::string& value) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.sztypename)
}
#if LANG_CXX11
void taggametype::set_sztypename(::std::string&& value) {
  
  sztypename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggametype.sztypename)
}
#endif
void taggametype::set_sztypename(const char* value) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggametype.sztypename)
}
void taggametype::set_sztypename(const char* value, size_t size) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggametype.sztypename)
}
::std::string* taggametype::mutable_sztypename() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype.sztypename)
  return sztypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* taggametype::release_sztypename() {
  // @@protoc_insertion_point(field_release:GamePmd.taggametype.sztypename)
  
  return sztypename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void taggametype::set_allocated_sztypename(::std::string* sztypename) {
  if (sztypename != NULL) {
    
  } else {
    
  }
  sztypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sztypename);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggametype.sztypename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggamekind::kWtypeidFieldNumber;
const int taggamekind::kWjoinidFieldNumber;
const int taggamekind::kWsortidFieldNumber;
const int taggamekind::kWkindidFieldNumber;
const int taggamekind::kWgameidFieldNumber;
const int taggamekind::kWrecommendFieldNumber;
const int taggamekind::kWgameflagFieldNumber;
const int taggamekind::kDwonlinecountFieldNumber;
const int taggamekind::kDwandroidcountFieldNumber;
const int taggamekind::kDwsetcountFieldNumber;
const int taggamekind::kDwfullcountFieldNumber;
const int taggamekind::kSzkindnameFieldNumber;
const int taggamekind::kSzprocessnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggamekind::taggamekind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggamekind)
}
taggamekind::taggamekind(const taggamekind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szkindname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szkindname().size() > 0) {
    szkindname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szkindname_);
  }
  szprocessname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szprocessname().size() > 0) {
    szprocessname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szprocessname_);
  }
  ::memcpy(&wtypeid_, &from.wtypeid_,
    reinterpret_cast<char*>(&wgameflag_) -
    reinterpret_cast<char*>(&wtypeid_) + sizeof(wgameflag_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggamekind)
}

void taggamekind::SharedCtor() {
  szkindname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szprocessname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wtypeid_, 0, reinterpret_cast<char*>(&wgameflag_) -
    reinterpret_cast<char*>(&wtypeid_) + sizeof(wgameflag_));
  _cached_size_ = 0;
}

taggamekind::~taggamekind() {
  // @@protoc_insertion_point(destructor:GamePmd.taggamekind)
  SharedDtor();
}

void taggamekind::SharedDtor() {
  szkindname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szprocessname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void taggamekind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggamekind::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[1].descriptor;
}

const taggamekind& taggamekind::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggamekind* taggamekind::New(::google::protobuf::Arena* arena) const {
  taggamekind* n = new taggamekind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggamekind::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggamekind)
  szkindname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szprocessname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wtypeid_, 0, reinterpret_cast<char*>(&wgameflag_) -
    reinterpret_cast<char*>(&wtypeid_) + sizeof(wgameflag_));
}

bool taggamekind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggamekind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wtypeid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wjoinid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wjoinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wkindid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wgameid = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wgameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wrecommend = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrecommend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wgameflag = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wgameflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwonlinecount = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwonlinecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwandroidcount = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwandroidcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwsetcount = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwsetcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwfullcount = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwfullcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szkindname = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szkindname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szkindname().data(), this->szkindname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.taggamekind.szkindname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szprocessname = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szprocessname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szprocessname().data(), this->szprocessname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.taggamekind.szprocessname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggamekind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggamekind)
  return false;
#undef DO_
}

void taggamekind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggamekind)
  // int32 wtypeid = 1;
  if (this->wtypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wtypeid(), output);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wjoinid(), output);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // int32 wkindid = 4;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wkindid(), output);
  }

  // int32 wgameid = 5;
  if (this->wgameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wgameid(), output);
  }

  // int32 wrecommend = 6;
  if (this->wrecommend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wrecommend(), output);
  }

  // int32 wgameflag = 7;
  if (this->wgameflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wgameflag(), output);
  }

  // uint64 dwonlinecount = 8;
  if (this->dwonlinecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dwonlinecount(), output);
  }

  // uint64 dwandroidcount = 9;
  if (this->dwandroidcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->dwandroidcount(), output);
  }

  // uint64 dwsetcount = 10;
  if (this->dwsetcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->dwsetcount(), output);
  }

  // uint64 dwfullcount = 11;
  if (this->dwfullcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->dwfullcount(), output);
  }

  // string szkindname = 12;
  if (this->szkindname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szkindname().data(), this->szkindname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szkindname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->szkindname(), output);
  }

  // string szprocessname = 13;
  if (this->szprocessname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szprocessname().data(), this->szprocessname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szprocessname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->szprocessname(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggamekind)
}

::google::protobuf::uint8* taggamekind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggamekind)
  // int32 wtypeid = 1;
  if (this->wtypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wtypeid(), target);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wjoinid(), target);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // int32 wkindid = 4;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wkindid(), target);
  }

  // int32 wgameid = 5;
  if (this->wgameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wgameid(), target);
  }

  // int32 wrecommend = 6;
  if (this->wrecommend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wrecommend(), target);
  }

  // int32 wgameflag = 7;
  if (this->wgameflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wgameflag(), target);
  }

  // uint64 dwonlinecount = 8;
  if (this->dwonlinecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dwonlinecount(), target);
  }

  // uint64 dwandroidcount = 9;
  if (this->dwandroidcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->dwandroidcount(), target);
  }

  // uint64 dwsetcount = 10;
  if (this->dwsetcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->dwsetcount(), target);
  }

  // uint64 dwfullcount = 11;
  if (this->dwfullcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->dwfullcount(), target);
  }

  // string szkindname = 12;
  if (this->szkindname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szkindname().data(), this->szkindname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szkindname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->szkindname(), target);
  }

  // string szprocessname = 13;
  if (this->szprocessname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szprocessname().data(), this->szprocessname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szprocessname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->szprocessname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggamekind)
  return target;
}

size_t taggamekind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggamekind)
  size_t total_size = 0;

  // string szkindname = 12;
  if (this->szkindname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szkindname());
  }

  // string szprocessname = 13;
  if (this->szprocessname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szprocessname());
  }

  // int32 wtypeid = 1;
  if (this->wtypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtypeid());
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wjoinid());
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wkindid = 4;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wgameid = 5;
  if (this->wgameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wgameid());
  }

  // int32 wrecommend = 6;
  if (this->wrecommend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wrecommend());
  }

  // uint64 dwonlinecount = 8;
  if (this->dwonlinecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwonlinecount());
  }

  // uint64 dwandroidcount = 9;
  if (this->dwandroidcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwandroidcount());
  }

  // uint64 dwsetcount = 10;
  if (this->dwsetcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwsetcount());
  }

  // uint64 dwfullcount = 11;
  if (this->dwfullcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwfullcount());
  }

  // int32 wgameflag = 7;
  if (this->wgameflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wgameflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggamekind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggamekind)
  GOOGLE_DCHECK_NE(&from, this);
  const taggamekind* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggamekind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggamekind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggamekind)
    MergeFrom(*source);
  }
}

void taggamekind::MergeFrom(const taggamekind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggamekind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.szkindname().size() > 0) {

    szkindname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szkindname_);
  }
  if (from.szprocessname().size() > 0) {

    szprocessname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szprocessname_);
  }
  if (from.wtypeid() != 0) {
    set_wtypeid(from.wtypeid());
  }
  if (from.wjoinid() != 0) {
    set_wjoinid(from.wjoinid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wgameid() != 0) {
    set_wgameid(from.wgameid());
  }
  if (from.wrecommend() != 0) {
    set_wrecommend(from.wrecommend());
  }
  if (from.dwonlinecount() != 0) {
    set_dwonlinecount(from.dwonlinecount());
  }
  if (from.dwandroidcount() != 0) {
    set_dwandroidcount(from.dwandroidcount());
  }
  if (from.dwsetcount() != 0) {
    set_dwsetcount(from.dwsetcount());
  }
  if (from.dwfullcount() != 0) {
    set_dwfullcount(from.dwfullcount());
  }
  if (from.wgameflag() != 0) {
    set_wgameflag(from.wgameflag());
  }
}

void taggamekind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggamekind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggamekind::CopyFrom(const taggamekind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggamekind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggamekind::IsInitialized() const {
  return true;
}

void taggamekind::Swap(taggamekind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggamekind::InternalSwap(taggamekind* other) {
  szkindname_.Swap(&other->szkindname_);
  szprocessname_.Swap(&other->szprocessname_);
  std::swap(wtypeid_, other->wtypeid_);
  std::swap(wjoinid_, other->wjoinid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wgameid_, other->wgameid_);
  std::swap(wrecommend_, other->wrecommend_);
  std::swap(dwonlinecount_, other->dwonlinecount_);
  std::swap(dwandroidcount_, other->dwandroidcount_);
  std::swap(dwsetcount_, other->dwsetcount_);
  std::swap(dwfullcount_, other->dwfullcount_);
  std::swap(wgameflag_, other->wgameflag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggamekind::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggamekind

// int32 wtypeid = 1;
void taggamekind::clear_wtypeid() {
  wtypeid_ = 0;
}
::google::protobuf::int32 taggamekind::wtypeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wtypeid)
  return wtypeid_;
}
void taggamekind::set_wtypeid(::google::protobuf::int32 value) {
  
  wtypeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wtypeid)
}

// int32 wjoinid = 2;
void taggamekind::clear_wjoinid() {
  wjoinid_ = 0;
}
::google::protobuf::int32 taggamekind::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wjoinid)
  return wjoinid_;
}
void taggamekind::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wjoinid)
}

// int32 wsortid = 3;
void taggamekind::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 taggamekind::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wsortid)
  return wsortid_;
}
void taggamekind::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wsortid)
}

// int32 wkindid = 4;
void taggamekind::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 taggamekind::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wkindid)
  return wkindid_;
}
void taggamekind::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wkindid)
}

// int32 wgameid = 5;
void taggamekind::clear_wgameid() {
  wgameid_ = 0;
}
::google::protobuf::int32 taggamekind::wgameid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wgameid)
  return wgameid_;
}
void taggamekind::set_wgameid(::google::protobuf::int32 value) {
  
  wgameid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wgameid)
}

// int32 wrecommend = 6;
void taggamekind::clear_wrecommend() {
  wrecommend_ = 0;
}
::google::protobuf::int32 taggamekind::wrecommend() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wrecommend)
  return wrecommend_;
}
void taggamekind::set_wrecommend(::google::protobuf::int32 value) {
  
  wrecommend_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wrecommend)
}

// int32 wgameflag = 7;
void taggamekind::clear_wgameflag() {
  wgameflag_ = 0;
}
::google::protobuf::int32 taggamekind::wgameflag() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wgameflag)
  return wgameflag_;
}
void taggamekind::set_wgameflag(::google::protobuf::int32 value) {
  
  wgameflag_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wgameflag)
}

// uint64 dwonlinecount = 8;
void taggamekind::clear_dwonlinecount() {
  dwonlinecount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwonlinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwonlinecount)
  return dwonlinecount_;
}
void taggamekind::set_dwonlinecount(::google::protobuf::uint64 value) {
  
  dwonlinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwonlinecount)
}

// uint64 dwandroidcount = 9;
void taggamekind::clear_dwandroidcount() {
  dwandroidcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwandroidcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwandroidcount)
  return dwandroidcount_;
}
void taggamekind::set_dwandroidcount(::google::protobuf::uint64 value) {
  
  dwandroidcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwandroidcount)
}

// uint64 dwsetcount = 10;
void taggamekind::clear_dwsetcount() {
  dwsetcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwsetcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwsetcount)
  return dwsetcount_;
}
void taggamekind::set_dwsetcount(::google::protobuf::uint64 value) {
  
  dwsetcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwsetcount)
}

// uint64 dwfullcount = 11;
void taggamekind::clear_dwfullcount() {
  dwfullcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwfullcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwfullcount)
  return dwfullcount_;
}
void taggamekind::set_dwfullcount(::google::protobuf::uint64 value) {
  
  dwfullcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwfullcount)
}

// string szkindname = 12;
void taggamekind::clear_szkindname() {
  szkindname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& taggamekind::szkindname() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.szkindname)
  return szkindname_.GetNoArena();
}
void taggamekind::set_szkindname(const ::std::string& value) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.szkindname)
}
#if LANG_CXX11
void taggamekind::set_szkindname(::std::string&& value) {
  
  szkindname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggamekind.szkindname)
}
#endif
void taggamekind::set_szkindname(const char* value) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggamekind.szkindname)
}
void taggamekind::set_szkindname(const char* value, size_t size) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggamekind.szkindname)
}
::std::string* taggamekind::mutable_szkindname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind.szkindname)
  return szkindname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* taggamekind::release_szkindname() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind.szkindname)
  
  return szkindname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void taggamekind::set_allocated_szkindname(::std::string* szkindname) {
  if (szkindname != NULL) {
    
  } else {
    
  }
  szkindname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szkindname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind.szkindname)
}

// string szprocessname = 13;
void taggamekind::clear_szprocessname() {
  szprocessname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& taggamekind::szprocessname() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.szprocessname)
  return szprocessname_.GetNoArena();
}
void taggamekind::set_szprocessname(const ::std::string& value) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.szprocessname)
}
#if LANG_CXX11
void taggamekind::set_szprocessname(::std::string&& value) {
  
  szprocessname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggamekind.szprocessname)
}
#endif
void taggamekind::set_szprocessname(const char* value) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggamekind.szprocessname)
}
void taggamekind::set_szprocessname(const char* value, size_t size) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggamekind.szprocessname)
}
::std::string* taggamekind::mutable_szprocessname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind.szprocessname)
  return szprocessname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* taggamekind::release_szprocessname() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind.szprocessname)
  
  return szprocessname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void taggamekind::set_allocated_szprocessname(::std::string* szprocessname) {
  if (szprocessname != NULL) {
    
  } else {
    
  }
  szprocessname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szprocessname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind.szprocessname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameNode::kWkindidFieldNumber;
const int tagGameNode::kWjoinidFieldNumber;
const int tagGameNode::kWsortidFieldNumber;
const int tagGameNode::kWnodeidFieldNumber;
const int tagGameNode::kSznodenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameNode::tagGameNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameNode)
}
tagGameNode::tagGameNode(const tagGameNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sznodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sznodename().size() > 0) {
    sznodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznodename_);
  }
  ::memcpy(&wkindid_, &from.wkindid_,
    reinterpret_cast<char*>(&wnodeid_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(wnodeid_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameNode)
}

void tagGameNode::SharedCtor() {
  sznodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&wnodeid_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(wnodeid_));
  _cached_size_ = 0;
}

tagGameNode::~tagGameNode() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameNode)
  SharedDtor();
}

void tagGameNode::SharedDtor() {
  sznodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagGameNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameNode::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[2].descriptor;
}

const tagGameNode& tagGameNode::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameNode* tagGameNode::New(::google::protobuf::Arena* arena) const {
  tagGameNode* n = new tagGameNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameNode::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameNode)
  sznodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&wnodeid_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(wnodeid_));
}

bool tagGameNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wkindid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wjoinid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wjoinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wnodeid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wnodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sznodename = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznodename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sznodename().data(), this->sznodename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameNode.sznodename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameNode)
  return false;
#undef DO_
}

void tagGameNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameNode)
  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wkindid(), output);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wjoinid(), output);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // int32 wnodeid = 4;
  if (this->wnodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wnodeid(), output);
  }

  // string sznodename = 5;
  if (this->sznodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznodename().data(), this->sznodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameNode.sznodename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sznodename(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameNode)
}

::google::protobuf::uint8* tagGameNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameNode)
  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wkindid(), target);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wjoinid(), target);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // int32 wnodeid = 4;
  if (this->wnodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wnodeid(), target);
  }

  // string sznodename = 5;
  if (this->sznodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznodename().data(), this->sznodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameNode.sznodename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sznodename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameNode)
  return target;
}

size_t tagGameNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameNode)
  size_t total_size = 0;

  // string sznodename = 5;
  if (this->sznodename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sznodename());
  }

  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wjoinid());
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wnodeid = 4;
  if (this->wnodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wnodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameNode)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameNode)
    MergeFrom(*source);
  }
}

void tagGameNode::MergeFrom(const tagGameNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.sznodename().size() > 0) {

    sznodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznodename_);
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wjoinid() != 0) {
    set_wjoinid(from.wjoinid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wnodeid() != 0) {
    set_wnodeid(from.wnodeid());
  }
}

void tagGameNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameNode::CopyFrom(const tagGameNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameNode::IsInitialized() const {
  return true;
}

void tagGameNode::Swap(tagGameNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameNode::InternalSwap(tagGameNode* other) {
  sznodename_.Swap(&other->sznodename_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wjoinid_, other->wjoinid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wnodeid_, other->wnodeid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameNode::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameNode

// int32 wkindid = 1;
void tagGameNode::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 tagGameNode::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wkindid)
  return wkindid_;
}
void tagGameNode::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wkindid)
}

// int32 wjoinid = 2;
void tagGameNode::clear_wjoinid() {
  wjoinid_ = 0;
}
::google::protobuf::int32 tagGameNode::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wjoinid)
  return wjoinid_;
}
void tagGameNode::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wjoinid)
}

// int32 wsortid = 3;
void tagGameNode::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 tagGameNode::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wsortid)
  return wsortid_;
}
void tagGameNode::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wsortid)
}

// int32 wnodeid = 4;
void tagGameNode::clear_wnodeid() {
  wnodeid_ = 0;
}
::google::protobuf::int32 tagGameNode::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wnodeid)
  return wnodeid_;
}
void tagGameNode::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wnodeid)
}

// string sznodename = 5;
void tagGameNode::clear_sznodename() {
  sznodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameNode::sznodename() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.sznodename)
  return sznodename_.GetNoArena();
}
void tagGameNode::set_sznodename(const ::std::string& value) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.sznodename)
}
#if LANG_CXX11
void tagGameNode::set_sznodename(::std::string&& value) {
  
  sznodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameNode.sznodename)
}
#endif
void tagGameNode::set_sznodename(const char* value) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameNode.sznodename)
}
void tagGameNode::set_sznodename(const char* value, size_t size) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameNode.sznodename)
}
::std::string* tagGameNode::mutable_sznodename() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode.sznodename)
  return sznodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameNode::release_sznodename() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameNode.sznodename)
  
  return sznodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameNode::set_allocated_sznodename(::std::string* sznodename) {
  if (sznodename != NULL) {
    
  } else {
    
  }
  sznodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznodename);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameNode.sznodename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGamePage::kWpageidFieldNumber;
const int tagGamePage::kWkindidFieldNumber;
const int tagGamePage::kWnodeidFieldNumber;
const int tagGamePage::kWsortidFieldNumber;
const int tagGamePage::kWoperatetypeFieldNumber;
const int tagGamePage::kSzdisplaynameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGamePage::tagGamePage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGamePage)
}
tagGamePage::tagGamePage(const tagGamePage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szdisplayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szdisplayname().size() > 0) {
    szdisplayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdisplayname_);
  }
  ::memcpy(&wpageid_, &from.wpageid_,
    reinterpret_cast<char*>(&woperatetype_) -
    reinterpret_cast<char*>(&wpageid_) + sizeof(woperatetype_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGamePage)
}

void tagGamePage::SharedCtor() {
  szdisplayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wpageid_, 0, reinterpret_cast<char*>(&woperatetype_) -
    reinterpret_cast<char*>(&wpageid_) + sizeof(woperatetype_));
  _cached_size_ = 0;
}

tagGamePage::~tagGamePage() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGamePage)
  SharedDtor();
}

void tagGamePage::SharedDtor() {
  szdisplayname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagGamePage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGamePage::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[3].descriptor;
}

const tagGamePage& tagGamePage::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGamePage* tagGamePage::New(::google::protobuf::Arena* arena) const {
  tagGamePage* n = new tagGamePage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGamePage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGamePage)
  szdisplayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wpageid_, 0, reinterpret_cast<char*>(&woperatetype_) -
    reinterpret_cast<char*>(&wpageid_) + sizeof(woperatetype_));
}

bool tagGamePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGamePage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wpageid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wkindid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wnodeid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wnodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 woperatetype = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szdisplayname = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdisplayname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szdisplayname().data(), this->szdisplayname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGamePage.szdisplayname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGamePage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGamePage)
  return false;
#undef DO_
}

void tagGamePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGamePage)
  // int32 wpageid = 1;
  if (this->wpageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wpageid(), output);
  }

  // int32 wkindid = 2;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wkindid(), output);
  }

  // int32 wnodeid = 3;
  if (this->wnodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wnodeid(), output);
  }

  // int32 wsortid = 4;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wsortid(), output);
  }

  // int32 woperatetype = 5;
  if (this->woperatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->woperatetype(), output);
  }

  // string szdisplayname = 6;
  if (this->szdisplayname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdisplayname().data(), this->szdisplayname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGamePage.szdisplayname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->szdisplayname(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGamePage)
}

::google::protobuf::uint8* tagGamePage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGamePage)
  // int32 wpageid = 1;
  if (this->wpageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wpageid(), target);
  }

  // int32 wkindid = 2;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wkindid(), target);
  }

  // int32 wnodeid = 3;
  if (this->wnodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wnodeid(), target);
  }

  // int32 wsortid = 4;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wsortid(), target);
  }

  // int32 woperatetype = 5;
  if (this->woperatetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->woperatetype(), target);
  }

  // string szdisplayname = 6;
  if (this->szdisplayname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdisplayname().data(), this->szdisplayname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGamePage.szdisplayname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->szdisplayname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGamePage)
  return target;
}

size_t tagGamePage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGamePage)
  size_t total_size = 0;

  // string szdisplayname = 6;
  if (this->szdisplayname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szdisplayname());
  }

  // int32 wpageid = 1;
  if (this->wpageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wpageid());
  }

  // int32 wkindid = 2;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wnodeid = 3;
  if (this->wnodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wnodeid());
  }

  // int32 wsortid = 4;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 woperatetype = 5;
  if (this->woperatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->woperatetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGamePage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGamePage)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGamePage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGamePage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGamePage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGamePage)
    MergeFrom(*source);
  }
}

void tagGamePage::MergeFrom(const tagGamePage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGamePage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.szdisplayname().size() > 0) {

    szdisplayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdisplayname_);
  }
  if (from.wpageid() != 0) {
    set_wpageid(from.wpageid());
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wnodeid() != 0) {
    set_wnodeid(from.wnodeid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.woperatetype() != 0) {
    set_woperatetype(from.woperatetype());
  }
}

void tagGamePage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGamePage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGamePage::CopyFrom(const tagGamePage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGamePage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGamePage::IsInitialized() const {
  return true;
}

void tagGamePage::Swap(tagGamePage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGamePage::InternalSwap(tagGamePage* other) {
  szdisplayname_.Swap(&other->szdisplayname_);
  std::swap(wpageid_, other->wpageid_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wnodeid_, other->wnodeid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(woperatetype_, other->woperatetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGamePage::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGamePage

// int32 wpageid = 1;
void tagGamePage::clear_wpageid() {
  wpageid_ = 0;
}
::google::protobuf::int32 tagGamePage::wpageid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wpageid)
  return wpageid_;
}
void tagGamePage::set_wpageid(::google::protobuf::int32 value) {
  
  wpageid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wpageid)
}

// int32 wkindid = 2;
void tagGamePage::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 tagGamePage::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wkindid)
  return wkindid_;
}
void tagGamePage::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wkindid)
}

// int32 wnodeid = 3;
void tagGamePage::clear_wnodeid() {
  wnodeid_ = 0;
}
::google::protobuf::int32 tagGamePage::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wnodeid)
  return wnodeid_;
}
void tagGamePage::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wnodeid)
}

// int32 wsortid = 4;
void tagGamePage::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 tagGamePage::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wsortid)
  return wsortid_;
}
void tagGamePage::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wsortid)
}

// int32 woperatetype = 5;
void tagGamePage::clear_woperatetype() {
  woperatetype_ = 0;
}
::google::protobuf::int32 tagGamePage::woperatetype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.woperatetype)
  return woperatetype_;
}
void tagGamePage::set_woperatetype(::google::protobuf::int32 value) {
  
  woperatetype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.woperatetype)
}

// string szdisplayname = 6;
void tagGamePage::clear_szdisplayname() {
  szdisplayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGamePage::szdisplayname() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.szdisplayname)
  return szdisplayname_.GetNoArena();
}
void tagGamePage::set_szdisplayname(const ::std::string& value) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.szdisplayname)
}
#if LANG_CXX11
void tagGamePage::set_szdisplayname(::std::string&& value) {
  
  szdisplayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGamePage.szdisplayname)
}
#endif
void tagGamePage::set_szdisplayname(const char* value) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGamePage.szdisplayname)
}
void tagGamePage::set_szdisplayname(const char* value, size_t size) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGamePage.szdisplayname)
}
::std::string* tagGamePage::mutable_szdisplayname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage.szdisplayname)
  return szdisplayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGamePage::release_szdisplayname() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGamePage.szdisplayname)
  
  return szdisplayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGamePage::set_allocated_szdisplayname(::std::string* szdisplayname) {
  if (szdisplayname != NULL) {
    
  } else {
    
  }
  szdisplayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdisplayname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGamePage.szdisplayname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameServer::kWKindIDFieldNumber;
const int tagGameServer::kWNodeIDFieldNumber;
const int tagGameServer::kWSortIDFieldNumber;
const int tagGameServer::kWServerIDFieldNumber;
const int tagGameServer::kWServerKindFieldNumber;
const int tagGameServer::kWServerTypeFieldNumber;
const int tagGameServer::kWServerLevelFieldNumber;
const int tagGameServer::kWServerPortFieldNumber;
const int tagGameServer::kLCellScoreFieldNumber;
const int tagGameServer::kCbEnterMemberFieldNumber;
const int tagGameServer::kLEnterScoreFieldNumber;
const int tagGameServer::kDwServerRuleFieldNumber;
const int tagGameServer::kDwOnLineCountFieldNumber;
const int tagGameServer::kDwAndroidCountFieldNumber;
const int tagGameServer::kDwFullCountFieldNumber;
const int tagGameServer::kSzServerAddrFieldNumber;
const int tagGameServer::kSzServerNameFieldNumber;
const int tagGameServer::kDwSurportTypeFieldNumber;
const int tagGameServer::kWTableCountFieldNumber;
const int tagGameServer::kDwSetPlayerCountFieldNumber;
const int tagGameServer::kSzGameInfomationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameServer::tagGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameServer)
}
tagGameServer::tagGameServer(const tagGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szserveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szserveraddr().size() > 0) {
    szserveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szserveraddr_);
  }
  szservername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szservername().size() > 0) {
    szservername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szservername_);
  }
  szgameinfomation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szgameinfomation().size() > 0) {
    szgameinfomation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szgameinfomation_);
  }
  ::memcpy(&wkindid_, &from.wkindid_,
    reinterpret_cast<char*>(&dwsetplayercount_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(dwsetplayercount_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameServer)
}

void tagGameServer::SharedCtor() {
  szserveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szservername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgameinfomation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&dwsetplayercount_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(dwsetplayercount_));
  _cached_size_ = 0;
}

tagGameServer::~tagGameServer() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameServer)
  SharedDtor();
}

void tagGameServer::SharedDtor() {
  szserveraddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szservername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgameinfomation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameServer::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[4].descriptor;
}

const tagGameServer& tagGameServer::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameServer* tagGameServer::New(::google::protobuf::Arena* arena) const {
  tagGameServer* n = new tagGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameServer)
  szserveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szservername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgameinfomation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&dwsetplayercount_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(dwsetplayercount_));
}

bool tagGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wKindID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wNodeID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wnodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wSortID = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wServerID = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wServerKind = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverkind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wServerType = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wservertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wServerLevel = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wServerPort = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lCellScore = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lcellscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbEnterMember = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbentermember_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lEnterScore = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lenterscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwServerRule = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwserverrule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwOnLineCount = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwonlinecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwAndroidCount = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwandroidcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwFullCount = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwfullcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szServerAddr = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szserveraddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szserveraddr().data(), this->szserveraddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameServer.szServerAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szServerName = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szservername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szservername().data(), this->szservername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameServer.szServerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwSurportType = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwsurporttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wTableCount = 19;
      case 19: {
        if (tag == 152u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtablecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwSetPlayerCount = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwsetplayercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szGameInfomation = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szgameinfomation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szgameinfomation().data(), this->szgameinfomation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameServer.szGameInfomation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameServer)
  return false;
#undef DO_
}

void tagGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameServer)
  // int32 wKindID = 1;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wkindid(), output);
  }

  // int32 wNodeID = 2;
  if (this->wnodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wnodeid(), output);
  }

  // int32 wSortID = 3;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // int32 wServerID = 4;
  if (this->wserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wserverid(), output);
  }

  // int32 wServerKind = 5;
  if (this->wserverkind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wserverkind(), output);
  }

  // int32 wServerType = 6;
  if (this->wservertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wservertype(), output);
  }

  // int32 wServerLevel = 7;
  if (this->wserverlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wserverlevel(), output);
  }

  // int32 wServerPort = 8;
  if (this->wserverport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wserverport(), output);
  }

  // uint64 lCellScore = 9;
  if (this->lcellscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->lcellscore(), output);
  }

  // int32 cbEnterMember = 10;
  if (this->cbentermember() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cbentermember(), output);
  }

  // uint64 lEnterScore = 11;
  if (this->lenterscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->lenterscore(), output);
  }

  // uint64 dwServerRule = 12;
  if (this->dwserverrule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->dwserverrule(), output);
  }

  // uint64 dwOnLineCount = 13;
  if (this->dwonlinecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->dwonlinecount(), output);
  }

  // uint64 dwAndroidCount = 14;
  if (this->dwandroidcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->dwandroidcount(), output);
  }

  // uint64 dwFullCount = 15;
  if (this->dwfullcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->dwfullcount(), output);
  }

  // string szServerAddr = 16;
  if (this->szserveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szserveraddr().data(), this->szserveraddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szServerAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->szserveraddr(), output);
  }

  // string szServerName = 17;
  if (this->szservername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szservername().data(), this->szservername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szServerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->szservername(), output);
  }

  // uint64 dwSurportType = 18;
  if (this->dwsurporttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->dwsurporttype(), output);
  }

  // int32 wTableCount = 19;
  if (this->wtablecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->wtablecount(), output);
  }

  // uint64 dwSetPlayerCount = 20;
  if (this->dwsetplayercount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->dwsetplayercount(), output);
  }

  // string szGameInfomation = 21;
  if (this->szgameinfomation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szgameinfomation().data(), this->szgameinfomation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szGameInfomation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->szgameinfomation(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameServer)
}

::google::protobuf::uint8* tagGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameServer)
  // int32 wKindID = 1;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wkindid(), target);
  }

  // int32 wNodeID = 2;
  if (this->wnodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wnodeid(), target);
  }

  // int32 wSortID = 3;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // int32 wServerID = 4;
  if (this->wserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wserverid(), target);
  }

  // int32 wServerKind = 5;
  if (this->wserverkind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wserverkind(), target);
  }

  // int32 wServerType = 6;
  if (this->wservertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wservertype(), target);
  }

  // int32 wServerLevel = 7;
  if (this->wserverlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wserverlevel(), target);
  }

  // int32 wServerPort = 8;
  if (this->wserverport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wserverport(), target);
  }

  // uint64 lCellScore = 9;
  if (this->lcellscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->lcellscore(), target);
  }

  // int32 cbEnterMember = 10;
  if (this->cbentermember() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cbentermember(), target);
  }

  // uint64 lEnterScore = 11;
  if (this->lenterscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->lenterscore(), target);
  }

  // uint64 dwServerRule = 12;
  if (this->dwserverrule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->dwserverrule(), target);
  }

  // uint64 dwOnLineCount = 13;
  if (this->dwonlinecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->dwonlinecount(), target);
  }

  // uint64 dwAndroidCount = 14;
  if (this->dwandroidcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->dwandroidcount(), target);
  }

  // uint64 dwFullCount = 15;
  if (this->dwfullcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->dwfullcount(), target);
  }

  // string szServerAddr = 16;
  if (this->szserveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szserveraddr().data(), this->szserveraddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szServerAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->szserveraddr(), target);
  }

  // string szServerName = 17;
  if (this->szservername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szservername().data(), this->szservername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szServerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->szservername(), target);
  }

  // uint64 dwSurportType = 18;
  if (this->dwsurporttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->dwsurporttype(), target);
  }

  // int32 wTableCount = 19;
  if (this->wtablecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->wtablecount(), target);
  }

  // uint64 dwSetPlayerCount = 20;
  if (this->dwsetplayercount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->dwsetplayercount(), target);
  }

  // string szGameInfomation = 21;
  if (this->szgameinfomation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szgameinfomation().data(), this->szgameinfomation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szGameInfomation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->szgameinfomation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameServer)
  return target;
}

size_t tagGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameServer)
  size_t total_size = 0;

  // string szServerAddr = 16;
  if (this->szserveraddr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szserveraddr());
  }

  // string szServerName = 17;
  if (this->szservername().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szservername());
  }

  // string szGameInfomation = 21;
  if (this->szgameinfomation().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szgameinfomation());
  }

  // int32 wKindID = 1;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wNodeID = 2;
  if (this->wnodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wnodeid());
  }

  // int32 wSortID = 3;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wServerID = 4;
  if (this->wserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverid());
  }

  // int32 wServerKind = 5;
  if (this->wserverkind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverkind());
  }

  // int32 wServerType = 6;
  if (this->wservertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wservertype());
  }

  // int32 wServerLevel = 7;
  if (this->wserverlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverlevel());
  }

  // int32 wServerPort = 8;
  if (this->wserverport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverport());
  }

  // uint64 lCellScore = 9;
  if (this->lcellscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lcellscore());
  }

  // uint64 lEnterScore = 11;
  if (this->lenterscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lenterscore());
  }

  // uint64 dwServerRule = 12;
  if (this->dwserverrule() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwserverrule());
  }

  // uint64 dwOnLineCount = 13;
  if (this->dwonlinecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwonlinecount());
  }

  // uint64 dwAndroidCount = 14;
  if (this->dwandroidcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwandroidcount());
  }

  // int32 cbEnterMember = 10;
  if (this->cbentermember() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbentermember());
  }

  // int32 wTableCount = 19;
  if (this->wtablecount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtablecount());
  }

  // uint64 dwFullCount = 15;
  if (this->dwfullcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwfullcount());
  }

  // uint64 dwSurportType = 18;
  if (this->dwsurporttype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwsurporttype());
  }

  // uint64 dwSetPlayerCount = 20;
  if (this->dwsetplayercount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwsetplayercount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameServer)
    MergeFrom(*source);
  }
}

void tagGameServer::MergeFrom(const tagGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.szserveraddr().size() > 0) {

    szserveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szserveraddr_);
  }
  if (from.szservername().size() > 0) {

    szservername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szservername_);
  }
  if (from.szgameinfomation().size() > 0) {

    szgameinfomation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szgameinfomation_);
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wnodeid() != 0) {
    set_wnodeid(from.wnodeid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wserverid() != 0) {
    set_wserverid(from.wserverid());
  }
  if (from.wserverkind() != 0) {
    set_wserverkind(from.wserverkind());
  }
  if (from.wservertype() != 0) {
    set_wservertype(from.wservertype());
  }
  if (from.wserverlevel() != 0) {
    set_wserverlevel(from.wserverlevel());
  }
  if (from.wserverport() != 0) {
    set_wserverport(from.wserverport());
  }
  if (from.lcellscore() != 0) {
    set_lcellscore(from.lcellscore());
  }
  if (from.lenterscore() != 0) {
    set_lenterscore(from.lenterscore());
  }
  if (from.dwserverrule() != 0) {
    set_dwserverrule(from.dwserverrule());
  }
  if (from.dwonlinecount() != 0) {
    set_dwonlinecount(from.dwonlinecount());
  }
  if (from.dwandroidcount() != 0) {
    set_dwandroidcount(from.dwandroidcount());
  }
  if (from.cbentermember() != 0) {
    set_cbentermember(from.cbentermember());
  }
  if (from.wtablecount() != 0) {
    set_wtablecount(from.wtablecount());
  }
  if (from.dwfullcount() != 0) {
    set_dwfullcount(from.dwfullcount());
  }
  if (from.dwsurporttype() != 0) {
    set_dwsurporttype(from.dwsurporttype());
  }
  if (from.dwsetplayercount() != 0) {
    set_dwsetplayercount(from.dwsetplayercount());
  }
}

void tagGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameServer::CopyFrom(const tagGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameServer::IsInitialized() const {
  return true;
}

void tagGameServer::Swap(tagGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameServer::InternalSwap(tagGameServer* other) {
  szserveraddr_.Swap(&other->szserveraddr_);
  szservername_.Swap(&other->szservername_);
  szgameinfomation_.Swap(&other->szgameinfomation_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wnodeid_, other->wnodeid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wserverid_, other->wserverid_);
  std::swap(wserverkind_, other->wserverkind_);
  std::swap(wservertype_, other->wservertype_);
  std::swap(wserverlevel_, other->wserverlevel_);
  std::swap(wserverport_, other->wserverport_);
  std::swap(lcellscore_, other->lcellscore_);
  std::swap(lenterscore_, other->lenterscore_);
  std::swap(dwserverrule_, other->dwserverrule_);
  std::swap(dwonlinecount_, other->dwonlinecount_);
  std::swap(dwandroidcount_, other->dwandroidcount_);
  std::swap(cbentermember_, other->cbentermember_);
  std::swap(wtablecount_, other->wtablecount_);
  std::swap(dwfullcount_, other->dwfullcount_);
  std::swap(dwsurporttype_, other->dwsurporttype_);
  std::swap(dwsetplayercount_, other->dwsetplayercount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameServer::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameServer

// int32 wKindID = 1;
void tagGameServer::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 tagGameServer::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wKindID)
  return wkindid_;
}
void tagGameServer::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wKindID)
}

// int32 wNodeID = 2;
void tagGameServer::clear_wnodeid() {
  wnodeid_ = 0;
}
::google::protobuf::int32 tagGameServer::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wNodeID)
  return wnodeid_;
}
void tagGameServer::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wNodeID)
}

// int32 wSortID = 3;
void tagGameServer::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 tagGameServer::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wSortID)
  return wsortid_;
}
void tagGameServer::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wSortID)
}

// int32 wServerID = 4;
void tagGameServer::clear_wserverid() {
  wserverid_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wServerID)
  return wserverid_;
}
void tagGameServer::set_wserverid(::google::protobuf::int32 value) {
  
  wserverid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wServerID)
}

// int32 wServerKind = 5;
void tagGameServer::clear_wserverkind() {
  wserverkind_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverkind() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wServerKind)
  return wserverkind_;
}
void tagGameServer::set_wserverkind(::google::protobuf::int32 value) {
  
  wserverkind_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wServerKind)
}

// int32 wServerType = 6;
void tagGameServer::clear_wservertype() {
  wservertype_ = 0;
}
::google::protobuf::int32 tagGameServer::wservertype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wServerType)
  return wservertype_;
}
void tagGameServer::set_wservertype(::google::protobuf::int32 value) {
  
  wservertype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wServerType)
}

// int32 wServerLevel = 7;
void tagGameServer::clear_wserverlevel() {
  wserverlevel_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverlevel() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wServerLevel)
  return wserverlevel_;
}
void tagGameServer::set_wserverlevel(::google::protobuf::int32 value) {
  
  wserverlevel_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wServerLevel)
}

// int32 wServerPort = 8;
void tagGameServer::clear_wserverport() {
  wserverport_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverport() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wServerPort)
  return wserverport_;
}
void tagGameServer::set_wserverport(::google::protobuf::int32 value) {
  
  wserverport_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wServerPort)
}

// uint64 lCellScore = 9;
void tagGameServer::clear_lcellscore() {
  lcellscore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::lcellscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.lCellScore)
  return lcellscore_;
}
void tagGameServer::set_lcellscore(::google::protobuf::uint64 value) {
  
  lcellscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.lCellScore)
}

// int32 cbEnterMember = 10;
void tagGameServer::clear_cbentermember() {
  cbentermember_ = 0;
}
::google::protobuf::int32 tagGameServer::cbentermember() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.cbEnterMember)
  return cbentermember_;
}
void tagGameServer::set_cbentermember(::google::protobuf::int32 value) {
  
  cbentermember_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.cbEnterMember)
}

// uint64 lEnterScore = 11;
void tagGameServer::clear_lenterscore() {
  lenterscore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::lenterscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.lEnterScore)
  return lenterscore_;
}
void tagGameServer::set_lenterscore(::google::protobuf::uint64 value) {
  
  lenterscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.lEnterScore)
}

// uint64 dwServerRule = 12;
void tagGameServer::clear_dwserverrule() {
  dwserverrule_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwserverrule() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwServerRule)
  return dwserverrule_;
}
void tagGameServer::set_dwserverrule(::google::protobuf::uint64 value) {
  
  dwserverrule_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwServerRule)
}

// uint64 dwOnLineCount = 13;
void tagGameServer::clear_dwonlinecount() {
  dwonlinecount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwonlinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwOnLineCount)
  return dwonlinecount_;
}
void tagGameServer::set_dwonlinecount(::google::protobuf::uint64 value) {
  
  dwonlinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwOnLineCount)
}

// uint64 dwAndroidCount = 14;
void tagGameServer::clear_dwandroidcount() {
  dwandroidcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwandroidcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwAndroidCount)
  return dwandroidcount_;
}
void tagGameServer::set_dwandroidcount(::google::protobuf::uint64 value) {
  
  dwandroidcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwAndroidCount)
}

// uint64 dwFullCount = 15;
void tagGameServer::clear_dwfullcount() {
  dwfullcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwfullcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwFullCount)
  return dwfullcount_;
}
void tagGameServer::set_dwfullcount(::google::protobuf::uint64 value) {
  
  dwfullcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwFullCount)
}

// string szServerAddr = 16;
void tagGameServer::clear_szserveraddr() {
  szserveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameServer::szserveraddr() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szServerAddr)
  return szserveraddr_.GetNoArena();
}
void tagGameServer::set_szserveraddr(const ::std::string& value) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szServerAddr)
}
#if LANG_CXX11
void tagGameServer::set_szserveraddr(::std::string&& value) {
  
  szserveraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szServerAddr)
}
#endif
void tagGameServer::set_szserveraddr(const char* value) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szServerAddr)
}
void tagGameServer::set_szserveraddr(const char* value, size_t size) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szServerAddr)
}
::std::string* tagGameServer::mutable_szserveraddr() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szServerAddr)
  return szserveraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameServer::release_szserveraddr() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szServerAddr)
  
  return szserveraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameServer::set_allocated_szserveraddr(::std::string* szserveraddr) {
  if (szserveraddr != NULL) {
    
  } else {
    
  }
  szserveraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szserveraddr);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szServerAddr)
}

// string szServerName = 17;
void tagGameServer::clear_szservername() {
  szservername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameServer::szservername() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szServerName)
  return szservername_.GetNoArena();
}
void tagGameServer::set_szservername(const ::std::string& value) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szServerName)
}
#if LANG_CXX11
void tagGameServer::set_szservername(::std::string&& value) {
  
  szservername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szServerName)
}
#endif
void tagGameServer::set_szservername(const char* value) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szServerName)
}
void tagGameServer::set_szservername(const char* value, size_t size) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szServerName)
}
::std::string* tagGameServer::mutable_szservername() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szServerName)
  return szservername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameServer::release_szservername() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szServerName)
  
  return szservername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameServer::set_allocated_szservername(::std::string* szservername) {
  if (szservername != NULL) {
    
  } else {
    
  }
  szservername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szservername);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szServerName)
}

// uint64 dwSurportType = 18;
void tagGameServer::clear_dwsurporttype() {
  dwsurporttype_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwsurporttype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwSurportType)
  return dwsurporttype_;
}
void tagGameServer::set_dwsurporttype(::google::protobuf::uint64 value) {
  
  dwsurporttype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwSurportType)
}

// int32 wTableCount = 19;
void tagGameServer::clear_wtablecount() {
  wtablecount_ = 0;
}
::google::protobuf::int32 tagGameServer::wtablecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wTableCount)
  return wtablecount_;
}
void tagGameServer::set_wtablecount(::google::protobuf::int32 value) {
  
  wtablecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wTableCount)
}

// uint64 dwSetPlayerCount = 20;
void tagGameServer::clear_dwsetplayercount() {
  dwsetplayercount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwsetplayercount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwSetPlayerCount)
  return dwsetplayercount_;
}
void tagGameServer::set_dwsetplayercount(::google::protobuf::uint64 value) {
  
  dwsetplayercount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwSetPlayerCount)
}

// string szGameInfomation = 21;
void tagGameServer::clear_szgameinfomation() {
  szgameinfomation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameServer::szgameinfomation() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szGameInfomation)
  return szgameinfomation_.GetNoArena();
}
void tagGameServer::set_szgameinfomation(const ::std::string& value) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szGameInfomation)
}
#if LANG_CXX11
void tagGameServer::set_szgameinfomation(::std::string&& value) {
  
  szgameinfomation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szGameInfomation)
}
#endif
void tagGameServer::set_szgameinfomation(const char* value) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szGameInfomation)
}
void tagGameServer::set_szgameinfomation(const char* value, size_t size) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szGameInfomation)
}
::std::string* tagGameServer::mutable_szgameinfomation() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szGameInfomation)
  return szgameinfomation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameServer::release_szgameinfomation() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szGameInfomation)
  
  return szgameinfomation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameServer::set_allocated_szgameinfomation(::std::string* szgameinfomation) {
  if (szgameinfomation != NULL) {
    
  } else {
    
  }
  szgameinfomation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szgameinfomation);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szGameInfomation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggametype_s2c::kRespcmdFieldNumber;
const int taggametype_s2c::kTaggametypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggametype_s2c::taggametype_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggametype_s2c)
}
taggametype_s2c::taggametype_s2c(const taggametype_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggametype_(from.taggametype_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggametype_s2c)
}

void taggametype_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

taggametype_s2c::~taggametype_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.taggametype_s2c)
  SharedDtor();
}

void taggametype_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void taggametype_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggametype_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[5].descriptor;
}

const taggametype_s2c& taggametype_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggametype_s2c* taggametype_s2c::New(::google::protobuf::Arena* arena) const {
  taggametype_s2c* n = new taggametype_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggametype_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggametype_s2c)
  taggametype_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool taggametype_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggametype_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.taggametype taggametype = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggametype()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggametype_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggametype_s2c)
  return false;
#undef DO_
}

void taggametype_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggametype_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.taggametype taggametype = 3;
  for (unsigned int i = 0, n = this->taggametype_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->taggametype(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggametype_s2c)
}

::google::protobuf::uint8* taggametype_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggametype_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.taggametype taggametype = 3;
  for (unsigned int i = 0, n = this->taggametype_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->taggametype(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggametype_s2c)
  return target;
}

size_t taggametype_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggametype_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.taggametype taggametype = 3;
  {
    unsigned int count = this->taggametype_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggametype(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggametype_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggametype_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const taggametype_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggametype_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggametype_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggametype_s2c)
    MergeFrom(*source);
  }
}

void taggametype_s2c::MergeFrom(const taggametype_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggametype_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggametype_.MergeFrom(from.taggametype_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void taggametype_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggametype_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggametype_s2c::CopyFrom(const taggametype_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggametype_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggametype_s2c::IsInitialized() const {
  return true;
}

void taggametype_s2c::Swap(taggametype_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggametype_s2c::InternalSwap(taggametype_s2c* other) {
  taggametype_.UnsafeArenaSwap(&other->taggametype_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggametype_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggametype_s2c

// .NullPmd.response respcmd = 1;
bool taggametype_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void taggametype_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& taggametype_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* taggametype_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* taggametype_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.taggametype_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void taggametype_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggametype_s2c.respcmd)
}

// repeated .GamePmd.taggametype taggametype = 3;
int taggametype_s2c::taggametype_size() const {
  return taggametype_.size();
}
void taggametype_s2c::clear_taggametype() {
  taggametype_.Clear();
}
const ::GamePmd::taggametype& taggametype_s2c::taggametype(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Get(index);
}
::GamePmd::taggametype* taggametype_s2c::mutable_taggametype(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Mutable(index);
}
::GamePmd::taggametype* taggametype_s2c::add_taggametype() {
  // @@protoc_insertion_point(field_add:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >*
taggametype_s2c::mutable_taggametype() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.taggametype_s2c.taggametype)
  return &taggametype_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >&
taggametype_s2c::taggametype() const {
  // @@protoc_insertion_point(field_list:GamePmd.taggametype_s2c.taggametype)
  return taggametype_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggamekind_s2c::kRespcmdFieldNumber;
const int taggamekind_s2c::kTaggamekindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggamekind_s2c::taggamekind_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggamekind_s2c)
}
taggamekind_s2c::taggamekind_s2c(const taggamekind_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggamekind_(from.taggamekind_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggamekind_s2c)
}

void taggamekind_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

taggamekind_s2c::~taggamekind_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.taggamekind_s2c)
  SharedDtor();
}

void taggamekind_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void taggamekind_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggamekind_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[6].descriptor;
}

const taggamekind_s2c& taggamekind_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggamekind_s2c* taggamekind_s2c::New(::google::protobuf::Arena* arena) const {
  taggamekind_s2c* n = new taggamekind_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggamekind_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggamekind_s2c)
  taggamekind_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool taggamekind_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggamekind_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.taggamekind taggamekind = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggamekind()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggamekind_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggamekind_s2c)
  return false;
#undef DO_
}

void taggamekind_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggamekind_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.taggamekind taggamekind = 2;
  for (unsigned int i = 0, n = this->taggamekind_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggamekind(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggamekind_s2c)
}

::google::protobuf::uint8* taggamekind_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggamekind_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.taggamekind taggamekind = 2;
  for (unsigned int i = 0, n = this->taggamekind_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggamekind(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggamekind_s2c)
  return target;
}

size_t taggamekind_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggamekind_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.taggamekind taggamekind = 2;
  {
    unsigned int count = this->taggamekind_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggamekind(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggamekind_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggamekind_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const taggamekind_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggamekind_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggamekind_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggamekind_s2c)
    MergeFrom(*source);
  }
}

void taggamekind_s2c::MergeFrom(const taggamekind_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggamekind_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggamekind_.MergeFrom(from.taggamekind_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void taggamekind_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggamekind_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggamekind_s2c::CopyFrom(const taggamekind_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggamekind_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggamekind_s2c::IsInitialized() const {
  return true;
}

void taggamekind_s2c::Swap(taggamekind_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggamekind_s2c::InternalSwap(taggamekind_s2c* other) {
  taggamekind_.UnsafeArenaSwap(&other->taggamekind_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggamekind_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggamekind_s2c

// .NullPmd.response respcmd = 1;
bool taggamekind_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void taggamekind_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& taggamekind_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* taggamekind_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* taggamekind_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void taggamekind_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind_s2c.respcmd)
}

// repeated .GamePmd.taggamekind taggamekind = 2;
int taggamekind_s2c::taggamekind_size() const {
  return taggamekind_.size();
}
void taggamekind_s2c::clear_taggamekind() {
  taggamekind_.Clear();
}
const ::GamePmd::taggamekind& taggamekind_s2c::taggamekind(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Get(index);
}
::GamePmd::taggamekind* taggamekind_s2c::mutable_taggamekind(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Mutable(index);
}
::GamePmd::taggamekind* taggamekind_s2c::add_taggamekind() {
  // @@protoc_insertion_point(field_add:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >*
taggamekind_s2c::mutable_taggamekind() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.taggamekind_s2c.taggamekind)
  return &taggamekind_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >&
taggamekind_s2c::taggamekind() const {
  // @@protoc_insertion_point(field_list:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGamePage_s2c::kRespcmdFieldNumber;
const int tagGamePage_s2c::kTagGamePageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGamePage_s2c::tagGamePage_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGamePage_s2c)
}
tagGamePage_s2c::tagGamePage_s2c(const tagGamePage_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggamepage_(from.taggamepage_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGamePage_s2c)
}

void tagGamePage_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGamePage_s2c::~tagGamePage_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGamePage_s2c)
  SharedDtor();
}

void tagGamePage_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGamePage_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGamePage_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[7].descriptor;
}

const tagGamePage_s2c& tagGamePage_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGamePage_s2c* tagGamePage_s2c::New(::google::protobuf::Arena* arena) const {
  tagGamePage_s2c* n = new tagGamePage_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGamePage_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGamePage_s2c)
  taggamepage_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGamePage_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGamePage_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.tagGamePage tagGamePage = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggamepage()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGamePage_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGamePage_s2c)
  return false;
#undef DO_
}

void tagGamePage_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGamePage_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.tagGamePage tagGamePage = 2;
  for (unsigned int i = 0, n = this->taggamepage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggamepage(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGamePage_s2c)
}

::google::protobuf::uint8* tagGamePage_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGamePage_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.tagGamePage tagGamePage = 2;
  for (unsigned int i = 0, n = this->taggamepage_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggamepage(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGamePage_s2c)
  return target;
}

size_t tagGamePage_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGamePage_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.tagGamePage tagGamePage = 2;
  {
    unsigned int count = this->taggamepage_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggamepage(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGamePage_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGamePage_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGamePage_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGamePage_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGamePage_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGamePage_s2c)
    MergeFrom(*source);
  }
}

void tagGamePage_s2c::MergeFrom(const tagGamePage_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGamePage_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggamepage_.MergeFrom(from.taggamepage_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGamePage_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGamePage_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGamePage_s2c::CopyFrom(const tagGamePage_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGamePage_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGamePage_s2c::IsInitialized() const {
  return true;
}

void tagGamePage_s2c::Swap(tagGamePage_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGamePage_s2c::InternalSwap(tagGamePage_s2c* other) {
  taggamepage_.UnsafeArenaSwap(&other->taggamepage_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGamePage_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGamePage_s2c

// .NullPmd.response respcmd = 1;
bool tagGamePage_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGamePage_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGamePage_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGamePage_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGamePage_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGamePage_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGamePage_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGamePage_s2c.respcmd)
}

// repeated .GamePmd.tagGamePage tagGamePage = 2;
int tagGamePage_s2c::taggamepage_size() const {
  return taggamepage_.size();
}
void tagGamePage_s2c::clear_taggamepage() {
  taggamepage_.Clear();
}
const ::GamePmd::tagGamePage& tagGamePage_s2c::taggamepage(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Get(index);
}
::GamePmd::tagGamePage* tagGamePage_s2c::mutable_taggamepage(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Mutable(index);
}
::GamePmd::tagGamePage* tagGamePage_s2c::add_taggamepage() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >*
tagGamePage_s2c::mutable_taggamepage() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGamePage_s2c.tagGamePage)
  return &taggamepage_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >&
tagGamePage_s2c::taggamepage() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameNode_s2c::kRespcmdFieldNumber;
const int tagGameNode_s2c::kTagGameNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameNode_s2c::tagGameNode_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameNode_s2c)
}
tagGameNode_s2c::tagGameNode_s2c(const tagGameNode_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggamenode_(from.taggamenode_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameNode_s2c)
}

void tagGameNode_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGameNode_s2c::~tagGameNode_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameNode_s2c)
  SharedDtor();
}

void tagGameNode_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGameNode_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameNode_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[8].descriptor;
}

const tagGameNode_s2c& tagGameNode_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameNode_s2c* tagGameNode_s2c::New(::google::protobuf::Arena* arena) const {
  tagGameNode_s2c* n = new tagGameNode_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameNode_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameNode_s2c)
  taggamenode_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGameNode_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameNode_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.tagGameNode tagGameNode = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggamenode()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameNode_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameNode_s2c)
  return false;
#undef DO_
}

void tagGameNode_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameNode_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.tagGameNode tagGameNode = 2;
  for (unsigned int i = 0, n = this->taggamenode_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggamenode(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameNode_s2c)
}

::google::protobuf::uint8* tagGameNode_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameNode_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.tagGameNode tagGameNode = 2;
  for (unsigned int i = 0, n = this->taggamenode_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggamenode(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameNode_s2c)
  return target;
}

size_t tagGameNode_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameNode_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.tagGameNode tagGameNode = 2;
  {
    unsigned int count = this->taggamenode_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggamenode(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameNode_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameNode_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameNode_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameNode_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameNode_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameNode_s2c)
    MergeFrom(*source);
  }
}

void tagGameNode_s2c::MergeFrom(const tagGameNode_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameNode_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggamenode_.MergeFrom(from.taggamenode_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGameNode_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameNode_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameNode_s2c::CopyFrom(const tagGameNode_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameNode_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameNode_s2c::IsInitialized() const {
  return true;
}

void tagGameNode_s2c::Swap(tagGameNode_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameNode_s2c::InternalSwap(tagGameNode_s2c* other) {
  taggamenode_.UnsafeArenaSwap(&other->taggamenode_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameNode_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameNode_s2c

// .NullPmd.response respcmd = 1;
bool tagGameNode_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGameNode_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGameNode_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGameNode_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGameNode_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameNode_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGameNode_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameNode_s2c.respcmd)
}

// repeated .GamePmd.tagGameNode tagGameNode = 2;
int tagGameNode_s2c::taggamenode_size() const {
  return taggamenode_.size();
}
void tagGameNode_s2c::clear_taggamenode() {
  taggamenode_.Clear();
}
const ::GamePmd::tagGameNode& tagGameNode_s2c::taggamenode(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Get(index);
}
::GamePmd::tagGameNode* tagGameNode_s2c::mutable_taggamenode(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Mutable(index);
}
::GamePmd::tagGameNode* tagGameNode_s2c::add_taggamenode() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >*
tagGameNode_s2c::mutable_taggamenode() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGameNode_s2c.tagGameNode)
  return &taggamenode_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >&
tagGameNode_s2c::taggamenode() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameServer_s2c::kRespcmdFieldNumber;
const int tagGameServer_s2c::kTagGameServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameServer_s2c::tagGameServer_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameServer_s2c)
}
tagGameServer_s2c::tagGameServer_s2c(const tagGameServer_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggameserver_(from.taggameserver_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameServer_s2c)
}

void tagGameServer_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGameServer_s2c::~tagGameServer_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameServer_s2c)
  SharedDtor();
}

void tagGameServer_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGameServer_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameServer_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[9].descriptor;
}

const tagGameServer_s2c& tagGameServer_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameServer_s2c* tagGameServer_s2c::New(::google::protobuf::Arena* arena) const {
  tagGameServer_s2c* n = new tagGameServer_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameServer_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameServer_s2c)
  taggameserver_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGameServer_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameServer_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.tagGameServer tagGameServer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggameserver()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameServer_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameServer_s2c)
  return false;
#undef DO_
}

void tagGameServer_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameServer_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.tagGameServer tagGameServer = 2;
  for (unsigned int i = 0, n = this->taggameserver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggameserver(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameServer_s2c)
}

::google::protobuf::uint8* tagGameServer_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameServer_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.tagGameServer tagGameServer = 2;
  for (unsigned int i = 0, n = this->taggameserver_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggameserver(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameServer_s2c)
  return target;
}

size_t tagGameServer_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameServer_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.tagGameServer tagGameServer = 2;
  {
    unsigned int count = this->taggameserver_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggameserver(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameServer_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameServer_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameServer_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameServer_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameServer_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameServer_s2c)
    MergeFrom(*source);
  }
}

void tagGameServer_s2c::MergeFrom(const tagGameServer_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameServer_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggameserver_.MergeFrom(from.taggameserver_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGameServer_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameServer_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameServer_s2c::CopyFrom(const tagGameServer_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameServer_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameServer_s2c::IsInitialized() const {
  return true;
}

void tagGameServer_s2c::Swap(tagGameServer_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameServer_s2c::InternalSwap(tagGameServer_s2c* other) {
  taggameserver_.UnsafeArenaSwap(&other->taggameserver_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameServer_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameServer_s2c

// .NullPmd.response respcmd = 1;
bool tagGameServer_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGameServer_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGameServer_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGameServer_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGameServer_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGameServer_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer_s2c.respcmd)
}

// repeated .GamePmd.tagGameServer tagGameServer = 2;
int tagGameServer_s2c::taggameserver_size() const {
  return taggameserver_.size();
}
void tagGameServer_s2c::clear_taggameserver() {
  taggameserver_.Clear();
}
const ::GamePmd::tagGameServer& tagGameServer_s2c::taggameserver(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Get(index);
}
::GamePmd::tagGameServer* tagGameServer_s2c::mutable_taggameserver(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Mutable(index);
}
::GamePmd::tagGameServer* tagGameServer_s2c::add_taggameserver() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >*
tagGameServer_s2c::mutable_taggameserver() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGameServer_s2c.tagGameServer)
  return &taggameserver_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >&
tagGameServer_s2c::taggameserver() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GamePmd

// @@protoc_insertion_point(global_scope)
