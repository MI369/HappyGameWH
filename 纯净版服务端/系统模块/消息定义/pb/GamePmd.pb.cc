// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GamePmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GamePmd {
class taggametypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggametype> {
} _taggametype_default_instance_;
class taggamekindDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggamekind> {
} _taggamekind_default_instance_;
class tagGameNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameNode> {
} _tagGameNode_default_instance_;
class tagGamePageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGamePage> {
} _tagGamePage_default_instance_;
class tagGameServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameServer> {
} _tagGameServer_default_instance_;
class taggametype_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggametype_s2c> {
} _taggametype_s2c_default_instance_;
class taggamekind_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<taggamekind_s2c> {
} _taggamekind_s2c_default_instance_;
class tagGamePage_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGamePage_s2c> {
} _tagGamePage_s2c_default_instance_;
class tagGameNode_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameNode_s2c> {
} _tagGameNode_s2c_default_instance_;
class tagGameServer_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameServer_s2c> {
} _tagGameServer_s2c_default_instance_;
class personalParameter_c2sDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<personalParameter_c2s> {
} _personalParameter_c2s_default_instance_;
class tagPersonalTableFeeListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPersonalTableFeeList> {
} _tagPersonalTableFeeList_default_instance_;
class tagPersonalTableFeeList_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPersonalTableFeeList_s2c> {
} _tagPersonalTableFeeList_s2c_default_instance_;
class tagPersonalCellScore_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPersonalCellScore_s2c> {
} _tagPersonalCellScore_s2c_default_instance_;
class tagGetPersonalRule_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGetPersonalRule_s2c> {
} _tagGetPersonalRule_s2c_default_instance_;
class tagPersonalRoomOption_s2cDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPersonalRoomOption_s2c> {
} _tagPersonalRoomOption_s2c_default_instance_;

namespace protobuf_GamePmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, wjoinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, wtypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype, sztypename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wtypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wjoinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wgameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wrecommend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, wgameflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwonlinecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwandroidcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwsetcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, dwfullcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, szkindname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind, szprocessname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wjoinid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, wnodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode, sznodename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wpageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wnodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, woperatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage, szdisplayname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wkindid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wnodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wsortid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverkind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wservertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wserverport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, lcellscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, cbentermember_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, lenterscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwserverrule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwonlinecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwandroidcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwfullcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, szserveraddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, szservername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwsurporttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, wtablecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, dwsetplayercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer, szgameinfomation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggametype_s2c, taggametype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taggamekind_s2c, taggamekind_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGamePage_s2c, taggamepage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameNode_s2c, taggamenode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameServer_s2c, taggameserver_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(personalParameter_c2s, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(personalParameter_c2s, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(personalParameter_c2s, dwkindid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList, dwdrawtimelimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList, dwdrawcountlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList, liniscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList, lfeescore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList, waapayfee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList, cbgamemode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalTableFeeList_s2c, tagpersonaltablefeelist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalCellScore_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalCellScore_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalCellScore_s2c, ncellscore_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGetPersonalRule_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGetPersonalRule_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGetPersonalRule_s2c, cbpersonalrule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, respcmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, cbisjoingame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, cbminpeople_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, cbmaxpeople_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, lmaxcellscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, lpersonalroomtax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, bconsumptiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, wcancreatecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, dwplayturncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, dwplaytimelimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, dwtimeafterbegincount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, dwtimeofflinecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, dwtimenotbegingame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, dwtimeaftercreateroom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, wbeginfreetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPersonalRoomOption_s2c, wendfreetime_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(taggametype)},
  { 8, -1, sizeof(taggamekind)},
  { 25, -1, sizeof(tagGameNode)},
  { 34, -1, sizeof(tagGamePage)},
  { 44, -1, sizeof(tagGameServer)},
  { 69, -1, sizeof(taggametype_s2c)},
  { 75, -1, sizeof(taggamekind_s2c)},
  { 81, -1, sizeof(tagGamePage_s2c)},
  { 87, -1, sizeof(tagGameNode_s2c)},
  { 93, -1, sizeof(tagGameServer_s2c)},
  { 99, -1, sizeof(personalParameter_c2s)},
  { 105, -1, sizeof(tagPersonalTableFeeList)},
  { 115, -1, sizeof(tagPersonalTableFeeList_s2c)},
  { 121, -1, sizeof(tagPersonalCellScore_s2c)},
  { 127, -1, sizeof(tagGetPersonalRule_s2c)},
  { 133, -1, sizeof(tagPersonalRoomOption_s2c)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggametype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggamekind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGamePage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggametype_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_taggamekind_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGamePage_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameNode_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameServer_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_personalParameter_c2s_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPersonalTableFeeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPersonalTableFeeList_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPersonalCellScore_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGetPersonalRule_s2c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPersonalRoomOption_s2c_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "GamePmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace

void TableStruct::Shutdown() {
  _taggametype_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _taggamekind_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _tagGameNode_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _tagGamePage_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _tagGameServer_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _taggametype_s2c_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _taggamekind_s2c_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _tagGamePage_s2c_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _tagGameNode_s2c_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _tagGameServer_s2c_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _personalParameter_c2s_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _tagPersonalTableFeeList_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _tagPersonalTableFeeList_s2c_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _tagPersonalCellScore_s2c_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _tagGetPersonalRule_s2c_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _tagPersonalRoomOption_s2c_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NullPmd::protobuf_NullPmd_2eproto::InitDefaults();
  ::CommonPmd::protobuf_CommonPmd_2eproto::InitDefaults();
  _taggametype_default_instance_.DefaultConstruct();
  _taggamekind_default_instance_.DefaultConstruct();
  _tagGameNode_default_instance_.DefaultConstruct();
  _tagGamePage_default_instance_.DefaultConstruct();
  _tagGameServer_default_instance_.DefaultConstruct();
  _taggametype_s2c_default_instance_.DefaultConstruct();
  _taggamekind_s2c_default_instance_.DefaultConstruct();
  _tagGamePage_s2c_default_instance_.DefaultConstruct();
  _tagGameNode_s2c_default_instance_.DefaultConstruct();
  _tagGameServer_s2c_default_instance_.DefaultConstruct();
  _personalParameter_c2s_default_instance_.DefaultConstruct();
  _tagPersonalTableFeeList_default_instance_.DefaultConstruct();
  _tagPersonalTableFeeList_s2c_default_instance_.DefaultConstruct();
  _tagPersonalCellScore_s2c_default_instance_.DefaultConstruct();
  _tagGetPersonalRule_s2c_default_instance_.DefaultConstruct();
  _tagPersonalRoomOption_s2c_default_instance_.DefaultConstruct();
  _taggametype_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _taggamekind_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagGamePage_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagGameNode_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagGameServer_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _personalParameter_c2s_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagPersonalTableFeeList_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagPersonalCellScore_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagGetPersonalRule_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagPersonalRoomOption_s2c_default_instance_.get_mutable()->respcmd_ = const_cast< ::NullPmd::response*>(
      ::NullPmd::response::internal_default_instance());
  _tagPersonalRoomOption_s2c_default_instance_.get_mutable()->bconsumptiontype_ = const_cast< ::CommonPmd::consumptionType*>(
      ::CommonPmd::consumptionType::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rGamePmd.proto\022\007GamePmd\032\rNullPmd.proto\032"
      "\017CommonPmd.proto\"T\n\013taggametype\022\017\n\007wjoin"
      "id\030\001 \001(\005\022\017\n\007wsortid\030\002 \001(\005\022\017\n\007wtypeid\030\003 \001"
      "(\005\022\022\n\nsztypename\030\004 \001(\t\"\214\002\n\013taggamekind\022\017"
      "\n\007wtypeid\030\001 \001(\005\022\017\n\007wjoinid\030\002 \001(\005\022\017\n\007wsor"
      "tid\030\003 \001(\005\022\017\n\007wkindid\030\004 \001(\005\022\017\n\007wgameid\030\005 "
      "\001(\005\022\022\n\nwrecommend\030\006 \001(\005\022\021\n\twgameflag\030\007 \001"
      "(\005\022\025\n\rdwonlinecount\030\010 \001(\004\022\026\n\016dwandroidco"
      "unt\030\t \001(\004\022\022\n\ndwsetcount\030\n \001(\004\022\023\n\013dwfullc"
      "ount\030\013 \001(\004\022\022\n\nszkindname\030\014 \001(\t\022\025\n\rszproc"
      "essname\030\r \001(\t\"e\n\013tagGameNode\022\017\n\007wkindid\030"
      "\001 \001(\005\022\017\n\007wjoinid\030\002 \001(\005\022\017\n\007wsortid\030\003 \001(\005\022"
      "\017\n\007wnodeid\030\004 \001(\005\022\022\n\nsznodename\030\005 \001(\t\"~\n\013"
      "tagGamePage\022\017\n\007wpageid\030\001 \001(\005\022\017\n\007wkindid\030"
      "\002 \001(\005\022\017\n\007wnodeid\030\003 \001(\005\022\017\n\007wsortid\030\004 \001(\005\022"
      "\024\n\014woperatetype\030\005 \001(\005\022\025\n\rszdisplayname\030\006"
      " \001(\t\"\320\003\n\rtagGameServer\022\017\n\007wkindid\030\001 \001(\005\022"
      "\017\n\007wnodeid\030\002 \001(\005\022\017\n\007wsortid\030\003 \001(\005\022\021\n\twse"
      "rverid\030\004 \001(\005\022\023\n\013wserverkind\030\005 \001(\005\022\023\n\013wse"
      "rvertype\030\006 \001(\005\022\024\n\014wserverlevel\030\007 \001(\005\022\023\n\013"
      "wserverport\030\010 \001(\005\022\022\n\nlcellscore\030\t \001(\004\022\025\n"
      "\rcbentermember\030\n \001(\005\022\023\n\013lenterscore\030\013 \001("
      "\004\022\024\n\014dwserverrule\030\014 \001(\004\022\025\n\rdwonlinecount"
      "\030\r \001(\004\022\026\n\016dwandroidcount\030\016 \001(\004\022\023\n\013dwfull"
      "count\030\017 \001(\004\022\024\n\014szserveraddr\030\020 \001(\t\022\024\n\014szs"
      "ervername\030\021 \001(\t\022\025\n\rdwsurporttype\030\022 \001(\004\022\023"
      "\n\013wtablecount\030\023 \001(\005\022\030\n\020dwsetplayercount\030"
      "\024 \001(\004\022\030\n\020szgameinfomation\030\025 \001(\t\"`\n\017tagga"
      "metype_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.NullPmd.re"
      "sponse\022)\n\013taggametype\030\003 \003(\0132\024.GamePmd.ta"
      "ggametype\"`\n\017taggamekind_s2c\022\"\n\007respcmd\030"
      "\001 \001(\0132\021.NullPmd.response\022)\n\013taggamekind\030"
      "\002 \003(\0132\024.GamePmd.taggamekind\"`\n\017tagGamePa"
      "ge_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.NullPmd.respon"
      "se\022)\n\013tagGamePage\030\002 \003(\0132\024.GamePmd.tagGam"
      "ePage\"`\n\017tagGameNode_s2c\022\"\n\007respcmd\030\001 \001("
      "\0132\021.NullPmd.response\022)\n\013tagGameNode\030\002 \003("
      "\0132\024.GamePmd.tagGameNode\"f\n\021tagGameServer"
      "_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.NullPmd.response"
      "\022-\n\rtagGameServer\030\002 \003(\0132\026.GamePmd.tagGam"
      "eServer\"M\n\025personalParameter_c2s\022\"\n\007resp"
      "cmd\030\001 \001(\0132\021.NullPmd.response\022\020\n\010dwkindid"
      "\030\002 \001(\004\"\231\001\n\027tagPersonalTableFeeList\022\027\n\017dw"
      "drawtimelimit\030\001 \001(\004\022\030\n\020dwdrawcountlimit\030"
      "\002 \001(\004\022\021\n\tliniscore\030\003 \001(\004\022\021\n\tlfeescore\030\004 "
      "\001(\004\022\021\n\twaapayfee\030\005 \001(\005\022\022\n\ncbgamemode\030\006 \001"
      "(\005\"\204\001\n\033tagPersonalTableFeeList_s2c\022\"\n\007re"
      "spcmd\030\001 \001(\0132\021.NullPmd.response\022A\n\027tagPer"
      "sonalTableFeeList\030\002 \003(\0132 .GamePmd.tagPer"
      "sonalTableFeeList\"R\n\030tagPersonalCellScor"
      "e_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.NullPmd.respons"
      "e\022\022\n\nncellscore\030\002 \003(\005\"T\n\026tagGetPersonalR"
      "ule_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.NullPmd.respo"
      "nse\022\026\n\016cbpersonalrule\030\002 \001(\t\"\325\003\n\031tagPerso"
      "nalRoomOption_s2c\022\"\n\007respcmd\030\001 \001(\0132\021.Nul"
      "lPmd.response\022\024\n\014cbisjoingame\030\002 \001(\005\022\023\n\013c"
      "bminpeople\030\003 \001(\005\022\023\n\013cbmaxpeople\030\004 \001(\005\022\025\n"
      "\rlmaxcellscore\030\005 \001(\004\022\030\n\020lpersonalroomtax"
      "\030\006 \001(\004\0224\n\020bconsumptiontype\030\007 \001(\0132\032.Commo"
      "nPmd.consumptionType\022\027\n\017wcancreatecount\030"
      "\010 \001(\005\022\027\n\017dwplayturncount\030\t \001(\004\022\027\n\017dwplay"
      "timelimit\030\n \001(\004\022\035\n\025dwtimeafterbegincount"
      "\030\013 \001(\004\022\032\n\022dwtimeofflinecount\030\014 \001(\004\022\032\n\022dw"
      "timenotbegingame\030\r \001(\004\022\035\n\025dwtimeaftercre"
      "ateroom\030\016 \001(\004\022\026\n\016wbeginfreetime\030\017 \001(\005\022\024\n"
      "\014wendfreetime\030\020 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GamePmd.proto", &protobuf_RegisterTypes);
  ::NullPmd::protobuf_NullPmd_2eproto::AddDescriptors();
  ::CommonPmd::protobuf_CommonPmd_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_GamePmd_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggametype::kWjoinidFieldNumber;
const int taggametype::kWsortidFieldNumber;
const int taggametype::kWtypeidFieldNumber;
const int taggametype::kSztypenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggametype::taggametype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggametype)
}
taggametype::taggametype(const taggametype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sztypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sztypename().size() > 0) {
    sztypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sztypename_);
  }
  ::memcpy(&wjoinid_, &from.wjoinid_,
    reinterpret_cast<char*>(&wtypeid_) -
    reinterpret_cast<char*>(&wjoinid_) + sizeof(wtypeid_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggametype)
}

void taggametype::SharedCtor() {
  sztypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wjoinid_, 0, reinterpret_cast<char*>(&wtypeid_) -
    reinterpret_cast<char*>(&wjoinid_) + sizeof(wtypeid_));
  _cached_size_ = 0;
}

taggametype::~taggametype() {
  // @@protoc_insertion_point(destructor:GamePmd.taggametype)
  SharedDtor();
}

void taggametype::SharedDtor() {
  sztypename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void taggametype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggametype::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[0].descriptor;
}

const taggametype& taggametype::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggametype* taggametype::New(::google::protobuf::Arena* arena) const {
  taggametype* n = new taggametype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggametype::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggametype)
  sztypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wjoinid_, 0, reinterpret_cast<char*>(&wtypeid_) -
    reinterpret_cast<char*>(&wjoinid_) + sizeof(wtypeid_));
}

bool taggametype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggametype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wjoinid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wjoinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wtypeid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sztypename = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztypename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sztypename().data(), this->sztypename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.taggametype.sztypename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggametype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggametype)
  return false;
#undef DO_
}

void taggametype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggametype)
  // int32 wjoinid = 1;
  if (this->wjoinid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wjoinid(), output);
  }

  // int32 wsortid = 2;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wsortid(), output);
  }

  // int32 wtypeid = 3;
  if (this->wtypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wtypeid(), output);
  }

  // string sztypename = 4;
  if (this->sztypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sztypename().data(), this->sztypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggametype.sztypename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sztypename(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggametype)
}

::google::protobuf::uint8* taggametype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggametype)
  // int32 wjoinid = 1;
  if (this->wjoinid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wjoinid(), target);
  }

  // int32 wsortid = 2;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wsortid(), target);
  }

  // int32 wtypeid = 3;
  if (this->wtypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wtypeid(), target);
  }

  // string sztypename = 4;
  if (this->sztypename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sztypename().data(), this->sztypename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggametype.sztypename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sztypename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggametype)
  return target;
}

size_t taggametype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggametype)
  size_t total_size = 0;

  // string sztypename = 4;
  if (this->sztypename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sztypename());
  }

  // int32 wjoinid = 1;
  if (this->wjoinid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wjoinid());
  }

  // int32 wsortid = 2;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wtypeid = 3;
  if (this->wtypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtypeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggametype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggametype)
  GOOGLE_DCHECK_NE(&from, this);
  const taggametype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggametype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggametype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggametype)
    MergeFrom(*source);
  }
}

void taggametype::MergeFrom(const taggametype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggametype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.sztypename().size() > 0) {

    sztypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sztypename_);
  }
  if (from.wjoinid() != 0) {
    set_wjoinid(from.wjoinid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wtypeid() != 0) {
    set_wtypeid(from.wtypeid());
  }
}

void taggametype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggametype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggametype::CopyFrom(const taggametype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggametype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggametype::IsInitialized() const {
  return true;
}

void taggametype::Swap(taggametype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggametype::InternalSwap(taggametype* other) {
  sztypename_.Swap(&other->sztypename_);
  std::swap(wjoinid_, other->wjoinid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wtypeid_, other->wtypeid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggametype::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggametype

// int32 wjoinid = 1;
void taggametype::clear_wjoinid() {
  wjoinid_ = 0;
}
::google::protobuf::int32 taggametype::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wjoinid)
  return wjoinid_;
}
void taggametype::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wjoinid)
}

// int32 wsortid = 2;
void taggametype::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 taggametype::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wsortid)
  return wsortid_;
}
void taggametype::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wsortid)
}

// int32 wtypeid = 3;
void taggametype::clear_wtypeid() {
  wtypeid_ = 0;
}
::google::protobuf::int32 taggametype::wtypeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.wtypeid)
  return wtypeid_;
}
void taggametype::set_wtypeid(::google::protobuf::int32 value) {
  
  wtypeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.wtypeid)
}

// string sztypename = 4;
void taggametype::clear_sztypename() {
  sztypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& taggametype::sztypename() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype.sztypename)
  return sztypename_.GetNoArena();
}
void taggametype::set_sztypename(const ::std::string& value) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggametype.sztypename)
}
#if LANG_CXX11
void taggametype::set_sztypename(::std::string&& value) {
  
  sztypename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggametype.sztypename)
}
#endif
void taggametype::set_sztypename(const char* value) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggametype.sztypename)
}
void taggametype::set_sztypename(const char* value, size_t size) {
  
  sztypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggametype.sztypename)
}
::std::string* taggametype::mutable_sztypename() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype.sztypename)
  return sztypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* taggametype::release_sztypename() {
  // @@protoc_insertion_point(field_release:GamePmd.taggametype.sztypename)
  
  return sztypename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void taggametype::set_allocated_sztypename(::std::string* sztypename) {
  if (sztypename != NULL) {
    
  } else {
    
  }
  sztypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sztypename);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggametype.sztypename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggamekind::kWtypeidFieldNumber;
const int taggamekind::kWjoinidFieldNumber;
const int taggamekind::kWsortidFieldNumber;
const int taggamekind::kWkindidFieldNumber;
const int taggamekind::kWgameidFieldNumber;
const int taggamekind::kWrecommendFieldNumber;
const int taggamekind::kWgameflagFieldNumber;
const int taggamekind::kDwonlinecountFieldNumber;
const int taggamekind::kDwandroidcountFieldNumber;
const int taggamekind::kDwsetcountFieldNumber;
const int taggamekind::kDwfullcountFieldNumber;
const int taggamekind::kSzkindnameFieldNumber;
const int taggamekind::kSzprocessnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggamekind::taggamekind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggamekind)
}
taggamekind::taggamekind(const taggamekind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szkindname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szkindname().size() > 0) {
    szkindname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szkindname_);
  }
  szprocessname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szprocessname().size() > 0) {
    szprocessname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szprocessname_);
  }
  ::memcpy(&wtypeid_, &from.wtypeid_,
    reinterpret_cast<char*>(&wgameflag_) -
    reinterpret_cast<char*>(&wtypeid_) + sizeof(wgameflag_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggamekind)
}

void taggamekind::SharedCtor() {
  szkindname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szprocessname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wtypeid_, 0, reinterpret_cast<char*>(&wgameflag_) -
    reinterpret_cast<char*>(&wtypeid_) + sizeof(wgameflag_));
  _cached_size_ = 0;
}

taggamekind::~taggamekind() {
  // @@protoc_insertion_point(destructor:GamePmd.taggamekind)
  SharedDtor();
}

void taggamekind::SharedDtor() {
  szkindname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szprocessname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void taggamekind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggamekind::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[1].descriptor;
}

const taggamekind& taggamekind::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggamekind* taggamekind::New(::google::protobuf::Arena* arena) const {
  taggamekind* n = new taggamekind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggamekind::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggamekind)
  szkindname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szprocessname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wtypeid_, 0, reinterpret_cast<char*>(&wgameflag_) -
    reinterpret_cast<char*>(&wtypeid_) + sizeof(wgameflag_));
}

bool taggamekind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggamekind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wtypeid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wjoinid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wjoinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wkindid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wgameid = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wgameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wrecommend = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrecommend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wgameflag = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wgameflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwonlinecount = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwonlinecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwandroidcount = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwandroidcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwsetcount = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwsetcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwfullcount = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwfullcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szkindname = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szkindname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szkindname().data(), this->szkindname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.taggamekind.szkindname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szprocessname = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szprocessname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szprocessname().data(), this->szprocessname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.taggamekind.szprocessname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggamekind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggamekind)
  return false;
#undef DO_
}

void taggamekind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggamekind)
  // int32 wtypeid = 1;
  if (this->wtypeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wtypeid(), output);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wjoinid(), output);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // int32 wkindid = 4;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wkindid(), output);
  }

  // int32 wgameid = 5;
  if (this->wgameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wgameid(), output);
  }

  // int32 wrecommend = 6;
  if (this->wrecommend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wrecommend(), output);
  }

  // int32 wgameflag = 7;
  if (this->wgameflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wgameflag(), output);
  }

  // uint64 dwonlinecount = 8;
  if (this->dwonlinecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dwonlinecount(), output);
  }

  // uint64 dwandroidcount = 9;
  if (this->dwandroidcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->dwandroidcount(), output);
  }

  // uint64 dwsetcount = 10;
  if (this->dwsetcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->dwsetcount(), output);
  }

  // uint64 dwfullcount = 11;
  if (this->dwfullcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->dwfullcount(), output);
  }

  // string szkindname = 12;
  if (this->szkindname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szkindname().data(), this->szkindname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szkindname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->szkindname(), output);
  }

  // string szprocessname = 13;
  if (this->szprocessname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szprocessname().data(), this->szprocessname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szprocessname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->szprocessname(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggamekind)
}

::google::protobuf::uint8* taggamekind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggamekind)
  // int32 wtypeid = 1;
  if (this->wtypeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wtypeid(), target);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wjoinid(), target);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // int32 wkindid = 4;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wkindid(), target);
  }

  // int32 wgameid = 5;
  if (this->wgameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wgameid(), target);
  }

  // int32 wrecommend = 6;
  if (this->wrecommend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wrecommend(), target);
  }

  // int32 wgameflag = 7;
  if (this->wgameflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wgameflag(), target);
  }

  // uint64 dwonlinecount = 8;
  if (this->dwonlinecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dwonlinecount(), target);
  }

  // uint64 dwandroidcount = 9;
  if (this->dwandroidcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->dwandroidcount(), target);
  }

  // uint64 dwsetcount = 10;
  if (this->dwsetcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->dwsetcount(), target);
  }

  // uint64 dwfullcount = 11;
  if (this->dwfullcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->dwfullcount(), target);
  }

  // string szkindname = 12;
  if (this->szkindname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szkindname().data(), this->szkindname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szkindname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->szkindname(), target);
  }

  // string szprocessname = 13;
  if (this->szprocessname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szprocessname().data(), this->szprocessname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.taggamekind.szprocessname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->szprocessname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggamekind)
  return target;
}

size_t taggamekind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggamekind)
  size_t total_size = 0;

  // string szkindname = 12;
  if (this->szkindname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szkindname());
  }

  // string szprocessname = 13;
  if (this->szprocessname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szprocessname());
  }

  // int32 wtypeid = 1;
  if (this->wtypeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtypeid());
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wjoinid());
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wkindid = 4;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wgameid = 5;
  if (this->wgameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wgameid());
  }

  // int32 wrecommend = 6;
  if (this->wrecommend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wrecommend());
  }

  // uint64 dwonlinecount = 8;
  if (this->dwonlinecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwonlinecount());
  }

  // uint64 dwandroidcount = 9;
  if (this->dwandroidcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwandroidcount());
  }

  // uint64 dwsetcount = 10;
  if (this->dwsetcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwsetcount());
  }

  // uint64 dwfullcount = 11;
  if (this->dwfullcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwfullcount());
  }

  // int32 wgameflag = 7;
  if (this->wgameflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wgameflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggamekind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggamekind)
  GOOGLE_DCHECK_NE(&from, this);
  const taggamekind* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggamekind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggamekind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggamekind)
    MergeFrom(*source);
  }
}

void taggamekind::MergeFrom(const taggamekind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggamekind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.szkindname().size() > 0) {

    szkindname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szkindname_);
  }
  if (from.szprocessname().size() > 0) {

    szprocessname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szprocessname_);
  }
  if (from.wtypeid() != 0) {
    set_wtypeid(from.wtypeid());
  }
  if (from.wjoinid() != 0) {
    set_wjoinid(from.wjoinid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wgameid() != 0) {
    set_wgameid(from.wgameid());
  }
  if (from.wrecommend() != 0) {
    set_wrecommend(from.wrecommend());
  }
  if (from.dwonlinecount() != 0) {
    set_dwonlinecount(from.dwonlinecount());
  }
  if (from.dwandroidcount() != 0) {
    set_dwandroidcount(from.dwandroidcount());
  }
  if (from.dwsetcount() != 0) {
    set_dwsetcount(from.dwsetcount());
  }
  if (from.dwfullcount() != 0) {
    set_dwfullcount(from.dwfullcount());
  }
  if (from.wgameflag() != 0) {
    set_wgameflag(from.wgameflag());
  }
}

void taggamekind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggamekind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggamekind::CopyFrom(const taggamekind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggamekind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggamekind::IsInitialized() const {
  return true;
}

void taggamekind::Swap(taggamekind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggamekind::InternalSwap(taggamekind* other) {
  szkindname_.Swap(&other->szkindname_);
  szprocessname_.Swap(&other->szprocessname_);
  std::swap(wtypeid_, other->wtypeid_);
  std::swap(wjoinid_, other->wjoinid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wgameid_, other->wgameid_);
  std::swap(wrecommend_, other->wrecommend_);
  std::swap(dwonlinecount_, other->dwonlinecount_);
  std::swap(dwandroidcount_, other->dwandroidcount_);
  std::swap(dwsetcount_, other->dwsetcount_);
  std::swap(dwfullcount_, other->dwfullcount_);
  std::swap(wgameflag_, other->wgameflag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggamekind::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggamekind

// int32 wtypeid = 1;
void taggamekind::clear_wtypeid() {
  wtypeid_ = 0;
}
::google::protobuf::int32 taggamekind::wtypeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wtypeid)
  return wtypeid_;
}
void taggamekind::set_wtypeid(::google::protobuf::int32 value) {
  
  wtypeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wtypeid)
}

// int32 wjoinid = 2;
void taggamekind::clear_wjoinid() {
  wjoinid_ = 0;
}
::google::protobuf::int32 taggamekind::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wjoinid)
  return wjoinid_;
}
void taggamekind::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wjoinid)
}

// int32 wsortid = 3;
void taggamekind::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 taggamekind::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wsortid)
  return wsortid_;
}
void taggamekind::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wsortid)
}

// int32 wkindid = 4;
void taggamekind::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 taggamekind::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wkindid)
  return wkindid_;
}
void taggamekind::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wkindid)
}

// int32 wgameid = 5;
void taggamekind::clear_wgameid() {
  wgameid_ = 0;
}
::google::protobuf::int32 taggamekind::wgameid() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wgameid)
  return wgameid_;
}
void taggamekind::set_wgameid(::google::protobuf::int32 value) {
  
  wgameid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wgameid)
}

// int32 wrecommend = 6;
void taggamekind::clear_wrecommend() {
  wrecommend_ = 0;
}
::google::protobuf::int32 taggamekind::wrecommend() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wrecommend)
  return wrecommend_;
}
void taggamekind::set_wrecommend(::google::protobuf::int32 value) {
  
  wrecommend_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wrecommend)
}

// int32 wgameflag = 7;
void taggamekind::clear_wgameflag() {
  wgameflag_ = 0;
}
::google::protobuf::int32 taggamekind::wgameflag() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.wgameflag)
  return wgameflag_;
}
void taggamekind::set_wgameflag(::google::protobuf::int32 value) {
  
  wgameflag_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.wgameflag)
}

// uint64 dwonlinecount = 8;
void taggamekind::clear_dwonlinecount() {
  dwonlinecount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwonlinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwonlinecount)
  return dwonlinecount_;
}
void taggamekind::set_dwonlinecount(::google::protobuf::uint64 value) {
  
  dwonlinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwonlinecount)
}

// uint64 dwandroidcount = 9;
void taggamekind::clear_dwandroidcount() {
  dwandroidcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwandroidcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwandroidcount)
  return dwandroidcount_;
}
void taggamekind::set_dwandroidcount(::google::protobuf::uint64 value) {
  
  dwandroidcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwandroidcount)
}

// uint64 dwsetcount = 10;
void taggamekind::clear_dwsetcount() {
  dwsetcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwsetcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwsetcount)
  return dwsetcount_;
}
void taggamekind::set_dwsetcount(::google::protobuf::uint64 value) {
  
  dwsetcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwsetcount)
}

// uint64 dwfullcount = 11;
void taggamekind::clear_dwfullcount() {
  dwfullcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 taggamekind::dwfullcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.dwfullcount)
  return dwfullcount_;
}
void taggamekind::set_dwfullcount(::google::protobuf::uint64 value) {
  
  dwfullcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.dwfullcount)
}

// string szkindname = 12;
void taggamekind::clear_szkindname() {
  szkindname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& taggamekind::szkindname() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.szkindname)
  return szkindname_.GetNoArena();
}
void taggamekind::set_szkindname(const ::std::string& value) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.szkindname)
}
#if LANG_CXX11
void taggamekind::set_szkindname(::std::string&& value) {
  
  szkindname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggamekind.szkindname)
}
#endif
void taggamekind::set_szkindname(const char* value) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggamekind.szkindname)
}
void taggamekind::set_szkindname(const char* value, size_t size) {
  
  szkindname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggamekind.szkindname)
}
::std::string* taggamekind::mutable_szkindname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind.szkindname)
  return szkindname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* taggamekind::release_szkindname() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind.szkindname)
  
  return szkindname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void taggamekind::set_allocated_szkindname(::std::string* szkindname) {
  if (szkindname != NULL) {
    
  } else {
    
  }
  szkindname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szkindname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind.szkindname)
}

// string szprocessname = 13;
void taggamekind::clear_szprocessname() {
  szprocessname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& taggamekind::szprocessname() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind.szprocessname)
  return szprocessname_.GetNoArena();
}
void taggamekind::set_szprocessname(const ::std::string& value) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.taggamekind.szprocessname)
}
#if LANG_CXX11
void taggamekind::set_szprocessname(::std::string&& value) {
  
  szprocessname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.taggamekind.szprocessname)
}
#endif
void taggamekind::set_szprocessname(const char* value) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.taggamekind.szprocessname)
}
void taggamekind::set_szprocessname(const char* value, size_t size) {
  
  szprocessname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.taggamekind.szprocessname)
}
::std::string* taggamekind::mutable_szprocessname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind.szprocessname)
  return szprocessname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* taggamekind::release_szprocessname() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind.szprocessname)
  
  return szprocessname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void taggamekind::set_allocated_szprocessname(::std::string* szprocessname) {
  if (szprocessname != NULL) {
    
  } else {
    
  }
  szprocessname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szprocessname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind.szprocessname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameNode::kWkindidFieldNumber;
const int tagGameNode::kWjoinidFieldNumber;
const int tagGameNode::kWsortidFieldNumber;
const int tagGameNode::kWnodeidFieldNumber;
const int tagGameNode::kSznodenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameNode::tagGameNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameNode)
}
tagGameNode::tagGameNode(const tagGameNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sznodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sznodename().size() > 0) {
    sznodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznodename_);
  }
  ::memcpy(&wkindid_, &from.wkindid_,
    reinterpret_cast<char*>(&wnodeid_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(wnodeid_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameNode)
}

void tagGameNode::SharedCtor() {
  sznodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&wnodeid_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(wnodeid_));
  _cached_size_ = 0;
}

tagGameNode::~tagGameNode() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameNode)
  SharedDtor();
}

void tagGameNode::SharedDtor() {
  sznodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagGameNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameNode::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[2].descriptor;
}

const tagGameNode& tagGameNode::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameNode* tagGameNode::New(::google::protobuf::Arena* arena) const {
  tagGameNode* n = new tagGameNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameNode::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameNode)
  sznodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&wnodeid_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(wnodeid_));
}

bool tagGameNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wkindid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wjoinid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wjoinid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wnodeid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wnodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sznodename = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznodename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sznodename().data(), this->sznodename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameNode.sznodename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameNode)
  return false;
#undef DO_
}

void tagGameNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameNode)
  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wkindid(), output);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wjoinid(), output);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // int32 wnodeid = 4;
  if (this->wnodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wnodeid(), output);
  }

  // string sznodename = 5;
  if (this->sznodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznodename().data(), this->sznodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameNode.sznodename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sznodename(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameNode)
}

::google::protobuf::uint8* tagGameNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameNode)
  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wkindid(), target);
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wjoinid(), target);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // int32 wnodeid = 4;
  if (this->wnodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wnodeid(), target);
  }

  // string sznodename = 5;
  if (this->sznodename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznodename().data(), this->sznodename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameNode.sznodename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sznodename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameNode)
  return target;
}

size_t tagGameNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameNode)
  size_t total_size = 0;

  // string sznodename = 5;
  if (this->sznodename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sznodename());
  }

  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wjoinid = 2;
  if (this->wjoinid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wjoinid());
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wnodeid = 4;
  if (this->wnodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wnodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameNode)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameNode)
    MergeFrom(*source);
  }
}

void tagGameNode::MergeFrom(const tagGameNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.sznodename().size() > 0) {

    sznodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznodename_);
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wjoinid() != 0) {
    set_wjoinid(from.wjoinid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wnodeid() != 0) {
    set_wnodeid(from.wnodeid());
  }
}

void tagGameNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameNode::CopyFrom(const tagGameNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameNode::IsInitialized() const {
  return true;
}

void tagGameNode::Swap(tagGameNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameNode::InternalSwap(tagGameNode* other) {
  sznodename_.Swap(&other->sznodename_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wjoinid_, other->wjoinid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wnodeid_, other->wnodeid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameNode::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameNode

// int32 wkindid = 1;
void tagGameNode::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 tagGameNode::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wkindid)
  return wkindid_;
}
void tagGameNode::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wkindid)
}

// int32 wjoinid = 2;
void tagGameNode::clear_wjoinid() {
  wjoinid_ = 0;
}
::google::protobuf::int32 tagGameNode::wjoinid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wjoinid)
  return wjoinid_;
}
void tagGameNode::set_wjoinid(::google::protobuf::int32 value) {
  
  wjoinid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wjoinid)
}

// int32 wsortid = 3;
void tagGameNode::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 tagGameNode::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wsortid)
  return wsortid_;
}
void tagGameNode::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wsortid)
}

// int32 wnodeid = 4;
void tagGameNode::clear_wnodeid() {
  wnodeid_ = 0;
}
::google::protobuf::int32 tagGameNode::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.wnodeid)
  return wnodeid_;
}
void tagGameNode::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.wnodeid)
}

// string sznodename = 5;
void tagGameNode::clear_sznodename() {
  sznodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameNode::sznodename() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode.sznodename)
  return sznodename_.GetNoArena();
}
void tagGameNode::set_sznodename(const ::std::string& value) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameNode.sznodename)
}
#if LANG_CXX11
void tagGameNode::set_sznodename(::std::string&& value) {
  
  sznodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameNode.sznodename)
}
#endif
void tagGameNode::set_sznodename(const char* value) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameNode.sznodename)
}
void tagGameNode::set_sznodename(const char* value, size_t size) {
  
  sznodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameNode.sznodename)
}
::std::string* tagGameNode::mutable_sznodename() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode.sznodename)
  return sznodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameNode::release_sznodename() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameNode.sznodename)
  
  return sznodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameNode::set_allocated_sznodename(::std::string* sznodename) {
  if (sznodename != NULL) {
    
  } else {
    
  }
  sznodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznodename);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameNode.sznodename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGamePage::kWpageidFieldNumber;
const int tagGamePage::kWkindidFieldNumber;
const int tagGamePage::kWnodeidFieldNumber;
const int tagGamePage::kWsortidFieldNumber;
const int tagGamePage::kWoperatetypeFieldNumber;
const int tagGamePage::kSzdisplaynameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGamePage::tagGamePage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGamePage)
}
tagGamePage::tagGamePage(const tagGamePage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szdisplayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szdisplayname().size() > 0) {
    szdisplayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdisplayname_);
  }
  ::memcpy(&wpageid_, &from.wpageid_,
    reinterpret_cast<char*>(&woperatetype_) -
    reinterpret_cast<char*>(&wpageid_) + sizeof(woperatetype_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGamePage)
}

void tagGamePage::SharedCtor() {
  szdisplayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wpageid_, 0, reinterpret_cast<char*>(&woperatetype_) -
    reinterpret_cast<char*>(&wpageid_) + sizeof(woperatetype_));
  _cached_size_ = 0;
}

tagGamePage::~tagGamePage() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGamePage)
  SharedDtor();
}

void tagGamePage::SharedDtor() {
  szdisplayname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagGamePage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGamePage::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[3].descriptor;
}

const tagGamePage& tagGamePage::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGamePage* tagGamePage::New(::google::protobuf::Arena* arena) const {
  tagGamePage* n = new tagGamePage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGamePage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGamePage)
  szdisplayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wpageid_, 0, reinterpret_cast<char*>(&woperatetype_) -
    reinterpret_cast<char*>(&wpageid_) + sizeof(woperatetype_));
}

bool tagGamePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGamePage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wpageid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wkindid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wnodeid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wnodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 woperatetype = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szdisplayname = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdisplayname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szdisplayname().data(), this->szdisplayname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGamePage.szdisplayname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGamePage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGamePage)
  return false;
#undef DO_
}

void tagGamePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGamePage)
  // int32 wpageid = 1;
  if (this->wpageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wpageid(), output);
  }

  // int32 wkindid = 2;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wkindid(), output);
  }

  // int32 wnodeid = 3;
  if (this->wnodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wnodeid(), output);
  }

  // int32 wsortid = 4;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wsortid(), output);
  }

  // int32 woperatetype = 5;
  if (this->woperatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->woperatetype(), output);
  }

  // string szdisplayname = 6;
  if (this->szdisplayname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdisplayname().data(), this->szdisplayname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGamePage.szdisplayname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->szdisplayname(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGamePage)
}

::google::protobuf::uint8* tagGamePage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGamePage)
  // int32 wpageid = 1;
  if (this->wpageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wpageid(), target);
  }

  // int32 wkindid = 2;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wkindid(), target);
  }

  // int32 wnodeid = 3;
  if (this->wnodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wnodeid(), target);
  }

  // int32 wsortid = 4;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wsortid(), target);
  }

  // int32 woperatetype = 5;
  if (this->woperatetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->woperatetype(), target);
  }

  // string szdisplayname = 6;
  if (this->szdisplayname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdisplayname().data(), this->szdisplayname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGamePage.szdisplayname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->szdisplayname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGamePage)
  return target;
}

size_t tagGamePage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGamePage)
  size_t total_size = 0;

  // string szdisplayname = 6;
  if (this->szdisplayname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szdisplayname());
  }

  // int32 wpageid = 1;
  if (this->wpageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wpageid());
  }

  // int32 wkindid = 2;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wnodeid = 3;
  if (this->wnodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wnodeid());
  }

  // int32 wsortid = 4;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 woperatetype = 5;
  if (this->woperatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->woperatetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGamePage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGamePage)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGamePage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGamePage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGamePage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGamePage)
    MergeFrom(*source);
  }
}

void tagGamePage::MergeFrom(const tagGamePage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGamePage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.szdisplayname().size() > 0) {

    szdisplayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdisplayname_);
  }
  if (from.wpageid() != 0) {
    set_wpageid(from.wpageid());
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wnodeid() != 0) {
    set_wnodeid(from.wnodeid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.woperatetype() != 0) {
    set_woperatetype(from.woperatetype());
  }
}

void tagGamePage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGamePage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGamePage::CopyFrom(const tagGamePage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGamePage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGamePage::IsInitialized() const {
  return true;
}

void tagGamePage::Swap(tagGamePage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGamePage::InternalSwap(tagGamePage* other) {
  szdisplayname_.Swap(&other->szdisplayname_);
  std::swap(wpageid_, other->wpageid_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wnodeid_, other->wnodeid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(woperatetype_, other->woperatetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGamePage::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGamePage

// int32 wpageid = 1;
void tagGamePage::clear_wpageid() {
  wpageid_ = 0;
}
::google::protobuf::int32 tagGamePage::wpageid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wpageid)
  return wpageid_;
}
void tagGamePage::set_wpageid(::google::protobuf::int32 value) {
  
  wpageid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wpageid)
}

// int32 wkindid = 2;
void tagGamePage::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 tagGamePage::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wkindid)
  return wkindid_;
}
void tagGamePage::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wkindid)
}

// int32 wnodeid = 3;
void tagGamePage::clear_wnodeid() {
  wnodeid_ = 0;
}
::google::protobuf::int32 tagGamePage::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wnodeid)
  return wnodeid_;
}
void tagGamePage::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wnodeid)
}

// int32 wsortid = 4;
void tagGamePage::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 tagGamePage::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.wsortid)
  return wsortid_;
}
void tagGamePage::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.wsortid)
}

// int32 woperatetype = 5;
void tagGamePage::clear_woperatetype() {
  woperatetype_ = 0;
}
::google::protobuf::int32 tagGamePage::woperatetype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.woperatetype)
  return woperatetype_;
}
void tagGamePage::set_woperatetype(::google::protobuf::int32 value) {
  
  woperatetype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.woperatetype)
}

// string szdisplayname = 6;
void tagGamePage::clear_szdisplayname() {
  szdisplayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGamePage::szdisplayname() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage.szdisplayname)
  return szdisplayname_.GetNoArena();
}
void tagGamePage::set_szdisplayname(const ::std::string& value) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGamePage.szdisplayname)
}
#if LANG_CXX11
void tagGamePage::set_szdisplayname(::std::string&& value) {
  
  szdisplayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGamePage.szdisplayname)
}
#endif
void tagGamePage::set_szdisplayname(const char* value) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGamePage.szdisplayname)
}
void tagGamePage::set_szdisplayname(const char* value, size_t size) {
  
  szdisplayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGamePage.szdisplayname)
}
::std::string* tagGamePage::mutable_szdisplayname() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage.szdisplayname)
  return szdisplayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGamePage::release_szdisplayname() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGamePage.szdisplayname)
  
  return szdisplayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGamePage::set_allocated_szdisplayname(::std::string* szdisplayname) {
  if (szdisplayname != NULL) {
    
  } else {
    
  }
  szdisplayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdisplayname);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGamePage.szdisplayname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameServer::kWkindidFieldNumber;
const int tagGameServer::kWnodeidFieldNumber;
const int tagGameServer::kWsortidFieldNumber;
const int tagGameServer::kWserveridFieldNumber;
const int tagGameServer::kWserverkindFieldNumber;
const int tagGameServer::kWservertypeFieldNumber;
const int tagGameServer::kWserverlevelFieldNumber;
const int tagGameServer::kWserverportFieldNumber;
const int tagGameServer::kLcellscoreFieldNumber;
const int tagGameServer::kCbentermemberFieldNumber;
const int tagGameServer::kLenterscoreFieldNumber;
const int tagGameServer::kDwserverruleFieldNumber;
const int tagGameServer::kDwonlinecountFieldNumber;
const int tagGameServer::kDwandroidcountFieldNumber;
const int tagGameServer::kDwfullcountFieldNumber;
const int tagGameServer::kSzserveraddrFieldNumber;
const int tagGameServer::kSzservernameFieldNumber;
const int tagGameServer::kDwsurporttypeFieldNumber;
const int tagGameServer::kWtablecountFieldNumber;
const int tagGameServer::kDwsetplayercountFieldNumber;
const int tagGameServer::kSzgameinfomationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameServer::tagGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameServer)
}
tagGameServer::tagGameServer(const tagGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szserveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szserveraddr().size() > 0) {
    szserveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szserveraddr_);
  }
  szservername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szservername().size() > 0) {
    szservername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szservername_);
  }
  szgameinfomation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szgameinfomation().size() > 0) {
    szgameinfomation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szgameinfomation_);
  }
  ::memcpy(&wkindid_, &from.wkindid_,
    reinterpret_cast<char*>(&dwsetplayercount_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(dwsetplayercount_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameServer)
}

void tagGameServer::SharedCtor() {
  szserveraddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szservername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgameinfomation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&dwsetplayercount_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(dwsetplayercount_));
  _cached_size_ = 0;
}

tagGameServer::~tagGameServer() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameServer)
  SharedDtor();
}

void tagGameServer::SharedDtor() {
  szserveraddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szservername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgameinfomation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameServer::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[4].descriptor;
}

const tagGameServer& tagGameServer::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameServer* tagGameServer::New(::google::protobuf::Arena* arena) const {
  tagGameServer* n = new tagGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameServer)
  szserveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szservername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szgameinfomation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wkindid_, 0, reinterpret_cast<char*>(&dwsetplayercount_) -
    reinterpret_cast<char*>(&wkindid_) + sizeof(dwsetplayercount_));
}

bool tagGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 wkindid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wnodeid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wnodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wsortid = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wsortid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wserverid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wserverkind = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverkind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wservertype = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wservertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wserverlevel = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wserverport = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wserverport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lcellscore = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lcellscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbentermember = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbentermember_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lenterscore = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lenterscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwserverrule = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwserverrule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwonlinecount = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwonlinecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwandroidcount = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwandroidcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwfullcount = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwfullcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szserveraddr = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szserveraddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szserveraddr().data(), this->szserveraddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameServer.szserveraddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szservername = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szservername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szservername().data(), this->szservername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameServer.szservername"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwsurporttype = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwsurporttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wtablecount = 19;
      case 19: {
        if (tag == 152u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wtablecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwsetplayercount = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwsetplayercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szgameinfomation = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szgameinfomation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szgameinfomation().data(), this->szgameinfomation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGameServer.szgameinfomation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameServer)
  return false;
#undef DO_
}

void tagGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameServer)
  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wkindid(), output);
  }

  // int32 wnodeid = 2;
  if (this->wnodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wnodeid(), output);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wsortid(), output);
  }

  // int32 wserverid = 4;
  if (this->wserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wserverid(), output);
  }

  // int32 wserverkind = 5;
  if (this->wserverkind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wserverkind(), output);
  }

  // int32 wservertype = 6;
  if (this->wservertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wservertype(), output);
  }

  // int32 wserverlevel = 7;
  if (this->wserverlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wserverlevel(), output);
  }

  // int32 wserverport = 8;
  if (this->wserverport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wserverport(), output);
  }

  // uint64 lcellscore = 9;
  if (this->lcellscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->lcellscore(), output);
  }

  // int32 cbentermember = 10;
  if (this->cbentermember() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cbentermember(), output);
  }

  // uint64 lenterscore = 11;
  if (this->lenterscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->lenterscore(), output);
  }

  // uint64 dwserverrule = 12;
  if (this->dwserverrule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->dwserverrule(), output);
  }

  // uint64 dwonlinecount = 13;
  if (this->dwonlinecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->dwonlinecount(), output);
  }

  // uint64 dwandroidcount = 14;
  if (this->dwandroidcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->dwandroidcount(), output);
  }

  // uint64 dwfullcount = 15;
  if (this->dwfullcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->dwfullcount(), output);
  }

  // string szserveraddr = 16;
  if (this->szserveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szserveraddr().data(), this->szserveraddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szserveraddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->szserveraddr(), output);
  }

  // string szservername = 17;
  if (this->szservername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szservername().data(), this->szservername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szservername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->szservername(), output);
  }

  // uint64 dwsurporttype = 18;
  if (this->dwsurporttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->dwsurporttype(), output);
  }

  // int32 wtablecount = 19;
  if (this->wtablecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->wtablecount(), output);
  }

  // uint64 dwsetplayercount = 20;
  if (this->dwsetplayercount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->dwsetplayercount(), output);
  }

  // string szgameinfomation = 21;
  if (this->szgameinfomation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szgameinfomation().data(), this->szgameinfomation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szgameinfomation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->szgameinfomation(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameServer)
}

::google::protobuf::uint8* tagGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameServer)
  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wkindid(), target);
  }

  // int32 wnodeid = 2;
  if (this->wnodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wnodeid(), target);
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wsortid(), target);
  }

  // int32 wserverid = 4;
  if (this->wserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wserverid(), target);
  }

  // int32 wserverkind = 5;
  if (this->wserverkind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wserverkind(), target);
  }

  // int32 wservertype = 6;
  if (this->wservertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wservertype(), target);
  }

  // int32 wserverlevel = 7;
  if (this->wserverlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wserverlevel(), target);
  }

  // int32 wserverport = 8;
  if (this->wserverport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wserverport(), target);
  }

  // uint64 lcellscore = 9;
  if (this->lcellscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->lcellscore(), target);
  }

  // int32 cbentermember = 10;
  if (this->cbentermember() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cbentermember(), target);
  }

  // uint64 lenterscore = 11;
  if (this->lenterscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->lenterscore(), target);
  }

  // uint64 dwserverrule = 12;
  if (this->dwserverrule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->dwserverrule(), target);
  }

  // uint64 dwonlinecount = 13;
  if (this->dwonlinecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->dwonlinecount(), target);
  }

  // uint64 dwandroidcount = 14;
  if (this->dwandroidcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->dwandroidcount(), target);
  }

  // uint64 dwfullcount = 15;
  if (this->dwfullcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->dwfullcount(), target);
  }

  // string szserveraddr = 16;
  if (this->szserveraddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szserveraddr().data(), this->szserveraddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szserveraddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->szserveraddr(), target);
  }

  // string szservername = 17;
  if (this->szservername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szservername().data(), this->szservername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szservername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->szservername(), target);
  }

  // uint64 dwsurporttype = 18;
  if (this->dwsurporttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->dwsurporttype(), target);
  }

  // int32 wtablecount = 19;
  if (this->wtablecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->wtablecount(), target);
  }

  // uint64 dwsetplayercount = 20;
  if (this->dwsetplayercount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->dwsetplayercount(), target);
  }

  // string szgameinfomation = 21;
  if (this->szgameinfomation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szgameinfomation().data(), this->szgameinfomation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGameServer.szgameinfomation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->szgameinfomation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameServer)
  return target;
}

size_t tagGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameServer)
  size_t total_size = 0;

  // string szserveraddr = 16;
  if (this->szserveraddr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szserveraddr());
  }

  // string szservername = 17;
  if (this->szservername().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szservername());
  }

  // string szgameinfomation = 21;
  if (this->szgameinfomation().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szgameinfomation());
  }

  // int32 wkindid = 1;
  if (this->wkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wkindid());
  }

  // int32 wnodeid = 2;
  if (this->wnodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wnodeid());
  }

  // int32 wsortid = 3;
  if (this->wsortid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wsortid());
  }

  // int32 wserverid = 4;
  if (this->wserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverid());
  }

  // int32 wserverkind = 5;
  if (this->wserverkind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverkind());
  }

  // int32 wservertype = 6;
  if (this->wservertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wservertype());
  }

  // int32 wserverlevel = 7;
  if (this->wserverlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverlevel());
  }

  // int32 wserverport = 8;
  if (this->wserverport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wserverport());
  }

  // uint64 lcellscore = 9;
  if (this->lcellscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lcellscore());
  }

  // uint64 lenterscore = 11;
  if (this->lenterscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lenterscore());
  }

  // uint64 dwserverrule = 12;
  if (this->dwserverrule() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwserverrule());
  }

  // uint64 dwonlinecount = 13;
  if (this->dwonlinecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwonlinecount());
  }

  // uint64 dwandroidcount = 14;
  if (this->dwandroidcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwandroidcount());
  }

  // int32 cbentermember = 10;
  if (this->cbentermember() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbentermember());
  }

  // int32 wtablecount = 19;
  if (this->wtablecount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wtablecount());
  }

  // uint64 dwfullcount = 15;
  if (this->dwfullcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwfullcount());
  }

  // uint64 dwsurporttype = 18;
  if (this->dwsurporttype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwsurporttype());
  }

  // uint64 dwsetplayercount = 20;
  if (this->dwsetplayercount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwsetplayercount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameServer)
    MergeFrom(*source);
  }
}

void tagGameServer::MergeFrom(const tagGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.szserveraddr().size() > 0) {

    szserveraddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szserveraddr_);
  }
  if (from.szservername().size() > 0) {

    szservername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szservername_);
  }
  if (from.szgameinfomation().size() > 0) {

    szgameinfomation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szgameinfomation_);
  }
  if (from.wkindid() != 0) {
    set_wkindid(from.wkindid());
  }
  if (from.wnodeid() != 0) {
    set_wnodeid(from.wnodeid());
  }
  if (from.wsortid() != 0) {
    set_wsortid(from.wsortid());
  }
  if (from.wserverid() != 0) {
    set_wserverid(from.wserverid());
  }
  if (from.wserverkind() != 0) {
    set_wserverkind(from.wserverkind());
  }
  if (from.wservertype() != 0) {
    set_wservertype(from.wservertype());
  }
  if (from.wserverlevel() != 0) {
    set_wserverlevel(from.wserverlevel());
  }
  if (from.wserverport() != 0) {
    set_wserverport(from.wserverport());
  }
  if (from.lcellscore() != 0) {
    set_lcellscore(from.lcellscore());
  }
  if (from.lenterscore() != 0) {
    set_lenterscore(from.lenterscore());
  }
  if (from.dwserverrule() != 0) {
    set_dwserverrule(from.dwserverrule());
  }
  if (from.dwonlinecount() != 0) {
    set_dwonlinecount(from.dwonlinecount());
  }
  if (from.dwandroidcount() != 0) {
    set_dwandroidcount(from.dwandroidcount());
  }
  if (from.cbentermember() != 0) {
    set_cbentermember(from.cbentermember());
  }
  if (from.wtablecount() != 0) {
    set_wtablecount(from.wtablecount());
  }
  if (from.dwfullcount() != 0) {
    set_dwfullcount(from.dwfullcount());
  }
  if (from.dwsurporttype() != 0) {
    set_dwsurporttype(from.dwsurporttype());
  }
  if (from.dwsetplayercount() != 0) {
    set_dwsetplayercount(from.dwsetplayercount());
  }
}

void tagGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameServer::CopyFrom(const tagGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameServer::IsInitialized() const {
  return true;
}

void tagGameServer::Swap(tagGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameServer::InternalSwap(tagGameServer* other) {
  szserveraddr_.Swap(&other->szserveraddr_);
  szservername_.Swap(&other->szservername_);
  szgameinfomation_.Swap(&other->szgameinfomation_);
  std::swap(wkindid_, other->wkindid_);
  std::swap(wnodeid_, other->wnodeid_);
  std::swap(wsortid_, other->wsortid_);
  std::swap(wserverid_, other->wserverid_);
  std::swap(wserverkind_, other->wserverkind_);
  std::swap(wservertype_, other->wservertype_);
  std::swap(wserverlevel_, other->wserverlevel_);
  std::swap(wserverport_, other->wserverport_);
  std::swap(lcellscore_, other->lcellscore_);
  std::swap(lenterscore_, other->lenterscore_);
  std::swap(dwserverrule_, other->dwserverrule_);
  std::swap(dwonlinecount_, other->dwonlinecount_);
  std::swap(dwandroidcount_, other->dwandroidcount_);
  std::swap(cbentermember_, other->cbentermember_);
  std::swap(wtablecount_, other->wtablecount_);
  std::swap(dwfullcount_, other->dwfullcount_);
  std::swap(dwsurporttype_, other->dwsurporttype_);
  std::swap(dwsetplayercount_, other->dwsetplayercount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameServer::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameServer

// int32 wkindid = 1;
void tagGameServer::clear_wkindid() {
  wkindid_ = 0;
}
::google::protobuf::int32 tagGameServer::wkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wkindid)
  return wkindid_;
}
void tagGameServer::set_wkindid(::google::protobuf::int32 value) {
  
  wkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wkindid)
}

// int32 wnodeid = 2;
void tagGameServer::clear_wnodeid() {
  wnodeid_ = 0;
}
::google::protobuf::int32 tagGameServer::wnodeid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wnodeid)
  return wnodeid_;
}
void tagGameServer::set_wnodeid(::google::protobuf::int32 value) {
  
  wnodeid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wnodeid)
}

// int32 wsortid = 3;
void tagGameServer::clear_wsortid() {
  wsortid_ = 0;
}
::google::protobuf::int32 tagGameServer::wsortid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wsortid)
  return wsortid_;
}
void tagGameServer::set_wsortid(::google::protobuf::int32 value) {
  
  wsortid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wsortid)
}

// int32 wserverid = 4;
void tagGameServer::clear_wserverid() {
  wserverid_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverid() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverid)
  return wserverid_;
}
void tagGameServer::set_wserverid(::google::protobuf::int32 value) {
  
  wserverid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverid)
}

// int32 wserverkind = 5;
void tagGameServer::clear_wserverkind() {
  wserverkind_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverkind() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverkind)
  return wserverkind_;
}
void tagGameServer::set_wserverkind(::google::protobuf::int32 value) {
  
  wserverkind_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverkind)
}

// int32 wservertype = 6;
void tagGameServer::clear_wservertype() {
  wservertype_ = 0;
}
::google::protobuf::int32 tagGameServer::wservertype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wservertype)
  return wservertype_;
}
void tagGameServer::set_wservertype(::google::protobuf::int32 value) {
  
  wservertype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wservertype)
}

// int32 wserverlevel = 7;
void tagGameServer::clear_wserverlevel() {
  wserverlevel_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverlevel() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverlevel)
  return wserverlevel_;
}
void tagGameServer::set_wserverlevel(::google::protobuf::int32 value) {
  
  wserverlevel_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverlevel)
}

// int32 wserverport = 8;
void tagGameServer::clear_wserverport() {
  wserverport_ = 0;
}
::google::protobuf::int32 tagGameServer::wserverport() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wserverport)
  return wserverport_;
}
void tagGameServer::set_wserverport(::google::protobuf::int32 value) {
  
  wserverport_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wserverport)
}

// uint64 lcellscore = 9;
void tagGameServer::clear_lcellscore() {
  lcellscore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::lcellscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.lcellscore)
  return lcellscore_;
}
void tagGameServer::set_lcellscore(::google::protobuf::uint64 value) {
  
  lcellscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.lcellscore)
}

// int32 cbentermember = 10;
void tagGameServer::clear_cbentermember() {
  cbentermember_ = 0;
}
::google::protobuf::int32 tagGameServer::cbentermember() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.cbentermember)
  return cbentermember_;
}
void tagGameServer::set_cbentermember(::google::protobuf::int32 value) {
  
  cbentermember_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.cbentermember)
}

// uint64 lenterscore = 11;
void tagGameServer::clear_lenterscore() {
  lenterscore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::lenterscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.lenterscore)
  return lenterscore_;
}
void tagGameServer::set_lenterscore(::google::protobuf::uint64 value) {
  
  lenterscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.lenterscore)
}

// uint64 dwserverrule = 12;
void tagGameServer::clear_dwserverrule() {
  dwserverrule_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwserverrule() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwserverrule)
  return dwserverrule_;
}
void tagGameServer::set_dwserverrule(::google::protobuf::uint64 value) {
  
  dwserverrule_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwserverrule)
}

// uint64 dwonlinecount = 13;
void tagGameServer::clear_dwonlinecount() {
  dwonlinecount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwonlinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwonlinecount)
  return dwonlinecount_;
}
void tagGameServer::set_dwonlinecount(::google::protobuf::uint64 value) {
  
  dwonlinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwonlinecount)
}

// uint64 dwandroidcount = 14;
void tagGameServer::clear_dwandroidcount() {
  dwandroidcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwandroidcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwandroidcount)
  return dwandroidcount_;
}
void tagGameServer::set_dwandroidcount(::google::protobuf::uint64 value) {
  
  dwandroidcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwandroidcount)
}

// uint64 dwfullcount = 15;
void tagGameServer::clear_dwfullcount() {
  dwfullcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwfullcount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwfullcount)
  return dwfullcount_;
}
void tagGameServer::set_dwfullcount(::google::protobuf::uint64 value) {
  
  dwfullcount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwfullcount)
}

// string szserveraddr = 16;
void tagGameServer::clear_szserveraddr() {
  szserveraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameServer::szserveraddr() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szserveraddr)
  return szserveraddr_.GetNoArena();
}
void tagGameServer::set_szserveraddr(const ::std::string& value) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szserveraddr)
}
#if LANG_CXX11
void tagGameServer::set_szserveraddr(::std::string&& value) {
  
  szserveraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szserveraddr)
}
#endif
void tagGameServer::set_szserveraddr(const char* value) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szserveraddr)
}
void tagGameServer::set_szserveraddr(const char* value, size_t size) {
  
  szserveraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szserveraddr)
}
::std::string* tagGameServer::mutable_szserveraddr() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szserveraddr)
  return szserveraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameServer::release_szserveraddr() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szserveraddr)
  
  return szserveraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameServer::set_allocated_szserveraddr(::std::string* szserveraddr) {
  if (szserveraddr != NULL) {
    
  } else {
    
  }
  szserveraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szserveraddr);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szserveraddr)
}

// string szservername = 17;
void tagGameServer::clear_szservername() {
  szservername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameServer::szservername() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szservername)
  return szservername_.GetNoArena();
}
void tagGameServer::set_szservername(const ::std::string& value) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szservername)
}
#if LANG_CXX11
void tagGameServer::set_szservername(::std::string&& value) {
  
  szservername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szservername)
}
#endif
void tagGameServer::set_szservername(const char* value) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szservername)
}
void tagGameServer::set_szservername(const char* value, size_t size) {
  
  szservername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szservername)
}
::std::string* tagGameServer::mutable_szservername() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szservername)
  return szservername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameServer::release_szservername() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szservername)
  
  return szservername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameServer::set_allocated_szservername(::std::string* szservername) {
  if (szservername != NULL) {
    
  } else {
    
  }
  szservername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szservername);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szservername)
}

// uint64 dwsurporttype = 18;
void tagGameServer::clear_dwsurporttype() {
  dwsurporttype_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwsurporttype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwsurporttype)
  return dwsurporttype_;
}
void tagGameServer::set_dwsurporttype(::google::protobuf::uint64 value) {
  
  dwsurporttype_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwsurporttype)
}

// int32 wtablecount = 19;
void tagGameServer::clear_wtablecount() {
  wtablecount_ = 0;
}
::google::protobuf::int32 tagGameServer::wtablecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.wtablecount)
  return wtablecount_;
}
void tagGameServer::set_wtablecount(::google::protobuf::int32 value) {
  
  wtablecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.wtablecount)
}

// uint64 dwsetplayercount = 20;
void tagGameServer::clear_dwsetplayercount() {
  dwsetplayercount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagGameServer::dwsetplayercount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.dwsetplayercount)
  return dwsetplayercount_;
}
void tagGameServer::set_dwsetplayercount(::google::protobuf::uint64 value) {
  
  dwsetplayercount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.dwsetplayercount)
}

// string szgameinfomation = 21;
void tagGameServer::clear_szgameinfomation() {
  szgameinfomation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGameServer::szgameinfomation() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer.szgameinfomation)
  return szgameinfomation_.GetNoArena();
}
void tagGameServer::set_szgameinfomation(const ::std::string& value) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGameServer.szgameinfomation)
}
#if LANG_CXX11
void tagGameServer::set_szgameinfomation(::std::string&& value) {
  
  szgameinfomation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGameServer.szgameinfomation)
}
#endif
void tagGameServer::set_szgameinfomation(const char* value) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGameServer.szgameinfomation)
}
void tagGameServer::set_szgameinfomation(const char* value, size_t size) {
  
  szgameinfomation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGameServer.szgameinfomation)
}
::std::string* tagGameServer::mutable_szgameinfomation() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer.szgameinfomation)
  return szgameinfomation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGameServer::release_szgameinfomation() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer.szgameinfomation)
  
  return szgameinfomation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGameServer::set_allocated_szgameinfomation(::std::string* szgameinfomation) {
  if (szgameinfomation != NULL) {
    
  } else {
    
  }
  szgameinfomation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szgameinfomation);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer.szgameinfomation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggametype_s2c::kRespcmdFieldNumber;
const int taggametype_s2c::kTaggametypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggametype_s2c::taggametype_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggametype_s2c)
}
taggametype_s2c::taggametype_s2c(const taggametype_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggametype_(from.taggametype_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggametype_s2c)
}

void taggametype_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

taggametype_s2c::~taggametype_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.taggametype_s2c)
  SharedDtor();
}

void taggametype_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void taggametype_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggametype_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[5].descriptor;
}

const taggametype_s2c& taggametype_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggametype_s2c* taggametype_s2c::New(::google::protobuf::Arena* arena) const {
  taggametype_s2c* n = new taggametype_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggametype_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggametype_s2c)
  taggametype_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool taggametype_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggametype_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.taggametype taggametype = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggametype()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggametype_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggametype_s2c)
  return false;
#undef DO_
}

void taggametype_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggametype_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.taggametype taggametype = 3;
  for (unsigned int i = 0, n = this->taggametype_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->taggametype(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggametype_s2c)
}

::google::protobuf::uint8* taggametype_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggametype_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.taggametype taggametype = 3;
  for (unsigned int i = 0, n = this->taggametype_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->taggametype(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggametype_s2c)
  return target;
}

size_t taggametype_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggametype_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.taggametype taggametype = 3;
  {
    unsigned int count = this->taggametype_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggametype(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggametype_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggametype_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const taggametype_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggametype_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggametype_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggametype_s2c)
    MergeFrom(*source);
  }
}

void taggametype_s2c::MergeFrom(const taggametype_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggametype_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggametype_.MergeFrom(from.taggametype_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void taggametype_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggametype_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggametype_s2c::CopyFrom(const taggametype_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggametype_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggametype_s2c::IsInitialized() const {
  return true;
}

void taggametype_s2c::Swap(taggametype_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggametype_s2c::InternalSwap(taggametype_s2c* other) {
  taggametype_.UnsafeArenaSwap(&other->taggametype_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggametype_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggametype_s2c

// .NullPmd.response respcmd = 1;
bool taggametype_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void taggametype_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& taggametype_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* taggametype_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* taggametype_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.taggametype_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void taggametype_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggametype_s2c.respcmd)
}

// repeated .GamePmd.taggametype taggametype = 3;
int taggametype_s2c::taggametype_size() const {
  return taggametype_.size();
}
void taggametype_s2c::clear_taggametype() {
  taggametype_.Clear();
}
const ::GamePmd::taggametype& taggametype_s2c::taggametype(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Get(index);
}
::GamePmd::taggametype* taggametype_s2c::mutable_taggametype(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Mutable(index);
}
::GamePmd::taggametype* taggametype_s2c::add_taggametype() {
  // @@protoc_insertion_point(field_add:GamePmd.taggametype_s2c.taggametype)
  return taggametype_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >*
taggametype_s2c::mutable_taggametype() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.taggametype_s2c.taggametype)
  return &taggametype_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggametype >&
taggametype_s2c::taggametype() const {
  // @@protoc_insertion_point(field_list:GamePmd.taggametype_s2c.taggametype)
  return taggametype_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taggamekind_s2c::kRespcmdFieldNumber;
const int taggamekind_s2c::kTaggamekindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taggamekind_s2c::taggamekind_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.taggamekind_s2c)
}
taggamekind_s2c::taggamekind_s2c(const taggamekind_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggamekind_(from.taggamekind_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.taggamekind_s2c)
}

void taggamekind_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

taggamekind_s2c::~taggamekind_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.taggamekind_s2c)
  SharedDtor();
}

void taggamekind_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void taggamekind_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taggamekind_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[6].descriptor;
}

const taggamekind_s2c& taggamekind_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

taggamekind_s2c* taggamekind_s2c::New(::google::protobuf::Arena* arena) const {
  taggamekind_s2c* n = new taggamekind_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void taggamekind_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.taggamekind_s2c)
  taggamekind_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool taggamekind_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.taggamekind_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.taggamekind taggamekind = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggamekind()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.taggamekind_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.taggamekind_s2c)
  return false;
#undef DO_
}

void taggamekind_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.taggamekind_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.taggamekind taggamekind = 2;
  for (unsigned int i = 0, n = this->taggamekind_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggamekind(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.taggamekind_s2c)
}

::google::protobuf::uint8* taggamekind_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.taggamekind_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.taggamekind taggamekind = 2;
  for (unsigned int i = 0, n = this->taggamekind_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggamekind(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.taggamekind_s2c)
  return target;
}

size_t taggamekind_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.taggamekind_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.taggamekind taggamekind = 2;
  {
    unsigned int count = this->taggamekind_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggamekind(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taggamekind_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.taggamekind_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const taggamekind_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taggamekind_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.taggamekind_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.taggamekind_s2c)
    MergeFrom(*source);
  }
}

void taggamekind_s2c::MergeFrom(const taggamekind_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.taggamekind_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggamekind_.MergeFrom(from.taggamekind_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void taggamekind_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.taggamekind_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taggamekind_s2c::CopyFrom(const taggamekind_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.taggamekind_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taggamekind_s2c::IsInitialized() const {
  return true;
}

void taggamekind_s2c::Swap(taggamekind_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taggamekind_s2c::InternalSwap(taggamekind_s2c* other) {
  taggamekind_.UnsafeArenaSwap(&other->taggamekind_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata taggamekind_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// taggamekind_s2c

// .NullPmd.response respcmd = 1;
bool taggamekind_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void taggamekind_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& taggamekind_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* taggamekind_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* taggamekind_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.taggamekind_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void taggamekind_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.taggamekind_s2c.respcmd)
}

// repeated .GamePmd.taggamekind taggamekind = 2;
int taggamekind_s2c::taggamekind_size() const {
  return taggamekind_.size();
}
void taggamekind_s2c::clear_taggamekind() {
  taggamekind_.Clear();
}
const ::GamePmd::taggamekind& taggamekind_s2c::taggamekind(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Get(index);
}
::GamePmd::taggamekind* taggamekind_s2c::mutable_taggamekind(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Mutable(index);
}
::GamePmd::taggamekind* taggamekind_s2c::add_taggamekind() {
  // @@protoc_insertion_point(field_add:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >*
taggamekind_s2c::mutable_taggamekind() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.taggamekind_s2c.taggamekind)
  return &taggamekind_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::taggamekind >&
taggamekind_s2c::taggamekind() const {
  // @@protoc_insertion_point(field_list:GamePmd.taggamekind_s2c.taggamekind)
  return taggamekind_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGamePage_s2c::kRespcmdFieldNumber;
const int tagGamePage_s2c::kTagGamePageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGamePage_s2c::tagGamePage_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGamePage_s2c)
}
tagGamePage_s2c::tagGamePage_s2c(const tagGamePage_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggamepage_(from.taggamepage_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGamePage_s2c)
}

void tagGamePage_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGamePage_s2c::~tagGamePage_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGamePage_s2c)
  SharedDtor();
}

void tagGamePage_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGamePage_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGamePage_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[7].descriptor;
}

const tagGamePage_s2c& tagGamePage_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGamePage_s2c* tagGamePage_s2c::New(::google::protobuf::Arena* arena) const {
  tagGamePage_s2c* n = new tagGamePage_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGamePage_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGamePage_s2c)
  taggamepage_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGamePage_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGamePage_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.tagGamePage tagGamePage = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggamepage()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGamePage_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGamePage_s2c)
  return false;
#undef DO_
}

void tagGamePage_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGamePage_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.tagGamePage tagGamePage = 2;
  for (unsigned int i = 0, n = this->taggamepage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggamepage(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGamePage_s2c)
}

::google::protobuf::uint8* tagGamePage_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGamePage_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.tagGamePage tagGamePage = 2;
  for (unsigned int i = 0, n = this->taggamepage_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggamepage(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGamePage_s2c)
  return target;
}

size_t tagGamePage_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGamePage_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.tagGamePage tagGamePage = 2;
  {
    unsigned int count = this->taggamepage_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggamepage(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGamePage_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGamePage_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGamePage_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGamePage_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGamePage_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGamePage_s2c)
    MergeFrom(*source);
  }
}

void tagGamePage_s2c::MergeFrom(const tagGamePage_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGamePage_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggamepage_.MergeFrom(from.taggamepage_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGamePage_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGamePage_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGamePage_s2c::CopyFrom(const tagGamePage_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGamePage_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGamePage_s2c::IsInitialized() const {
  return true;
}

void tagGamePage_s2c::Swap(tagGamePage_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGamePage_s2c::InternalSwap(tagGamePage_s2c* other) {
  taggamepage_.UnsafeArenaSwap(&other->taggamepage_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGamePage_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGamePage_s2c

// .NullPmd.response respcmd = 1;
bool tagGamePage_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGamePage_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGamePage_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGamePage_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGamePage_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGamePage_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGamePage_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGamePage_s2c.respcmd)
}

// repeated .GamePmd.tagGamePage tagGamePage = 2;
int tagGamePage_s2c::taggamepage_size() const {
  return taggamepage_.size();
}
void tagGamePage_s2c::clear_taggamepage() {
  taggamepage_.Clear();
}
const ::GamePmd::tagGamePage& tagGamePage_s2c::taggamepage(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Get(index);
}
::GamePmd::tagGamePage* tagGamePage_s2c::mutable_taggamepage(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Mutable(index);
}
::GamePmd::tagGamePage* tagGamePage_s2c::add_taggamepage() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >*
tagGamePage_s2c::mutable_taggamepage() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGamePage_s2c.tagGamePage)
  return &taggamepage_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGamePage >&
tagGamePage_s2c::taggamepage() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGamePage_s2c.tagGamePage)
  return taggamepage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameNode_s2c::kRespcmdFieldNumber;
const int tagGameNode_s2c::kTagGameNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameNode_s2c::tagGameNode_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameNode_s2c)
}
tagGameNode_s2c::tagGameNode_s2c(const tagGameNode_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggamenode_(from.taggamenode_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameNode_s2c)
}

void tagGameNode_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGameNode_s2c::~tagGameNode_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameNode_s2c)
  SharedDtor();
}

void tagGameNode_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGameNode_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameNode_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[8].descriptor;
}

const tagGameNode_s2c& tagGameNode_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameNode_s2c* tagGameNode_s2c::New(::google::protobuf::Arena* arena) const {
  tagGameNode_s2c* n = new tagGameNode_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameNode_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameNode_s2c)
  taggamenode_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGameNode_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameNode_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.tagGameNode tagGameNode = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggamenode()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameNode_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameNode_s2c)
  return false;
#undef DO_
}

void tagGameNode_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameNode_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.tagGameNode tagGameNode = 2;
  for (unsigned int i = 0, n = this->taggamenode_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggamenode(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameNode_s2c)
}

::google::protobuf::uint8* tagGameNode_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameNode_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.tagGameNode tagGameNode = 2;
  for (unsigned int i = 0, n = this->taggamenode_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggamenode(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameNode_s2c)
  return target;
}

size_t tagGameNode_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameNode_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.tagGameNode tagGameNode = 2;
  {
    unsigned int count = this->taggamenode_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggamenode(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameNode_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameNode_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameNode_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameNode_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameNode_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameNode_s2c)
    MergeFrom(*source);
  }
}

void tagGameNode_s2c::MergeFrom(const tagGameNode_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameNode_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggamenode_.MergeFrom(from.taggamenode_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGameNode_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameNode_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameNode_s2c::CopyFrom(const tagGameNode_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameNode_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameNode_s2c::IsInitialized() const {
  return true;
}

void tagGameNode_s2c::Swap(tagGameNode_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameNode_s2c::InternalSwap(tagGameNode_s2c* other) {
  taggamenode_.UnsafeArenaSwap(&other->taggamenode_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameNode_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameNode_s2c

// .NullPmd.response respcmd = 1;
bool tagGameNode_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGameNode_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGameNode_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGameNode_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGameNode_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameNode_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGameNode_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameNode_s2c.respcmd)
}

// repeated .GamePmd.tagGameNode tagGameNode = 2;
int tagGameNode_s2c::taggamenode_size() const {
  return taggamenode_.size();
}
void tagGameNode_s2c::clear_taggamenode() {
  taggamenode_.Clear();
}
const ::GamePmd::tagGameNode& tagGameNode_s2c::taggamenode(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Get(index);
}
::GamePmd::tagGameNode* tagGameNode_s2c::mutable_taggamenode(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Mutable(index);
}
::GamePmd::tagGameNode* tagGameNode_s2c::add_taggamenode() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >*
tagGameNode_s2c::mutable_taggamenode() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGameNode_s2c.tagGameNode)
  return &taggamenode_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameNode >&
tagGameNode_s2c::taggamenode() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGameNode_s2c.tagGameNode)
  return taggamenode_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameServer_s2c::kRespcmdFieldNumber;
const int tagGameServer_s2c::kTagGameServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameServer_s2c::tagGameServer_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGameServer_s2c)
}
tagGameServer_s2c::tagGameServer_s2c(const tagGameServer_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      taggameserver_(from.taggameserver_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGameServer_s2c)
}

void tagGameServer_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGameServer_s2c::~tagGameServer_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGameServer_s2c)
  SharedDtor();
}

void tagGameServer_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGameServer_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameServer_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[9].descriptor;
}

const tagGameServer_s2c& tagGameServer_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameServer_s2c* tagGameServer_s2c::New(::google::protobuf::Arena* arena) const {
  tagGameServer_s2c* n = new tagGameServer_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameServer_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGameServer_s2c)
  taggameserver_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGameServer_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGameServer_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.tagGameServer tagGameServer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_taggameserver()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGameServer_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGameServer_s2c)
  return false;
#undef DO_
}

void tagGameServer_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGameServer_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.tagGameServer tagGameServer = 2;
  for (unsigned int i = 0, n = this->taggameserver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taggameserver(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGameServer_s2c)
}

::google::protobuf::uint8* tagGameServer_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGameServer_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.tagGameServer tagGameServer = 2;
  for (unsigned int i = 0, n = this->taggameserver_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->taggameserver(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGameServer_s2c)
  return target;
}

size_t tagGameServer_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGameServer_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.tagGameServer tagGameServer = 2;
  {
    unsigned int count = this->taggameserver_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taggameserver(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameServer_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGameServer_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameServer_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameServer_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGameServer_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGameServer_s2c)
    MergeFrom(*source);
  }
}

void tagGameServer_s2c::MergeFrom(const tagGameServer_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGameServer_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taggameserver_.MergeFrom(from.taggameserver_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGameServer_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGameServer_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameServer_s2c::CopyFrom(const tagGameServer_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGameServer_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameServer_s2c::IsInitialized() const {
  return true;
}

void tagGameServer_s2c::Swap(tagGameServer_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameServer_s2c::InternalSwap(tagGameServer_s2c* other) {
  taggameserver_.UnsafeArenaSwap(&other->taggameserver_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameServer_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameServer_s2c

// .NullPmd.response respcmd = 1;
bool tagGameServer_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGameServer_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGameServer_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGameServer_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGameServer_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGameServer_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGameServer_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGameServer_s2c.respcmd)
}

// repeated .GamePmd.tagGameServer tagGameServer = 2;
int tagGameServer_s2c::taggameserver_size() const {
  return taggameserver_.size();
}
void tagGameServer_s2c::clear_taggameserver() {
  taggameserver_.Clear();
}
const ::GamePmd::tagGameServer& tagGameServer_s2c::taggameserver(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Get(index);
}
::GamePmd::tagGameServer* tagGameServer_s2c::mutable_taggameserver(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Mutable(index);
}
::GamePmd::tagGameServer* tagGameServer_s2c::add_taggameserver() {
  // @@protoc_insertion_point(field_add:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >*
tagGameServer_s2c::mutable_taggameserver() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagGameServer_s2c.tagGameServer)
  return &taggameserver_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagGameServer >&
tagGameServer_s2c::taggameserver() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagGameServer_s2c.tagGameServer)
  return taggameserver_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int personalParameter_c2s::kRespcmdFieldNumber;
const int personalParameter_c2s::kDwkindidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

personalParameter_c2s::personalParameter_c2s()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.personalParameter_c2s)
}
personalParameter_c2s::personalParameter_c2s(const personalParameter_c2s& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  dwkindid_ = from.dwkindid_;
  // @@protoc_insertion_point(copy_constructor:GamePmd.personalParameter_c2s)
}

void personalParameter_c2s::SharedCtor() {
  ::memset(&respcmd_, 0, reinterpret_cast<char*>(&dwkindid_) -
    reinterpret_cast<char*>(&respcmd_) + sizeof(dwkindid_));
  _cached_size_ = 0;
}

personalParameter_c2s::~personalParameter_c2s() {
  // @@protoc_insertion_point(destructor:GamePmd.personalParameter_c2s)
  SharedDtor();
}

void personalParameter_c2s::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void personalParameter_c2s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* personalParameter_c2s::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[10].descriptor;
}

const personalParameter_c2s& personalParameter_c2s::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

personalParameter_c2s* personalParameter_c2s::New(::google::protobuf::Arena* arena) const {
  personalParameter_c2s* n = new personalParameter_c2s;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void personalParameter_c2s::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.personalParameter_c2s)
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
  dwkindid_ = GOOGLE_ULONGLONG(0);
}

bool personalParameter_c2s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.personalParameter_c2s)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwkindid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwkindid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.personalParameter_c2s)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.personalParameter_c2s)
  return false;
#undef DO_
}

void personalParameter_c2s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.personalParameter_c2s)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // uint64 dwkindid = 2;
  if (this->dwkindid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwkindid(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.personalParameter_c2s)
}

::google::protobuf::uint8* personalParameter_c2s::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.personalParameter_c2s)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // uint64 dwkindid = 2;
  if (this->dwkindid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dwkindid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.personalParameter_c2s)
  return target;
}

size_t personalParameter_c2s::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.personalParameter_c2s)
  size_t total_size = 0;

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  // uint64 dwkindid = 2;
  if (this->dwkindid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwkindid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void personalParameter_c2s::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.personalParameter_c2s)
  GOOGLE_DCHECK_NE(&from, this);
  const personalParameter_c2s* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const personalParameter_c2s>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.personalParameter_c2s)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.personalParameter_c2s)
    MergeFrom(*source);
  }
}

void personalParameter_c2s::MergeFrom(const personalParameter_c2s& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.personalParameter_c2s)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
  if (from.dwkindid() != 0) {
    set_dwkindid(from.dwkindid());
  }
}

void personalParameter_c2s::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.personalParameter_c2s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void personalParameter_c2s::CopyFrom(const personalParameter_c2s& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.personalParameter_c2s)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool personalParameter_c2s::IsInitialized() const {
  return true;
}

void personalParameter_c2s::Swap(personalParameter_c2s* other) {
  if (other == this) return;
  InternalSwap(other);
}
void personalParameter_c2s::InternalSwap(personalParameter_c2s* other) {
  std::swap(respcmd_, other->respcmd_);
  std::swap(dwkindid_, other->dwkindid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata personalParameter_c2s::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// personalParameter_c2s

// .NullPmd.response respcmd = 1;
bool personalParameter_c2s::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void personalParameter_c2s::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& personalParameter_c2s::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.personalParameter_c2s.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* personalParameter_c2s::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.personalParameter_c2s.respcmd)
  return respcmd_;
}
::NullPmd::response* personalParameter_c2s::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.personalParameter_c2s.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void personalParameter_c2s::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.personalParameter_c2s.respcmd)
}

// uint64 dwkindid = 2;
void personalParameter_c2s::clear_dwkindid() {
  dwkindid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 personalParameter_c2s::dwkindid() const {
  // @@protoc_insertion_point(field_get:GamePmd.personalParameter_c2s.dwkindid)
  return dwkindid_;
}
void personalParameter_c2s::set_dwkindid(::google::protobuf::uint64 value) {
  
  dwkindid_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.personalParameter_c2s.dwkindid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPersonalTableFeeList::kDwdrawtimelimitFieldNumber;
const int tagPersonalTableFeeList::kDwdrawcountlimitFieldNumber;
const int tagPersonalTableFeeList::kLiniscoreFieldNumber;
const int tagPersonalTableFeeList::kLfeescoreFieldNumber;
const int tagPersonalTableFeeList::kWaapayfeeFieldNumber;
const int tagPersonalTableFeeList::kCbgamemodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPersonalTableFeeList::tagPersonalTableFeeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagPersonalTableFeeList)
}
tagPersonalTableFeeList::tagPersonalTableFeeList(const tagPersonalTableFeeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dwdrawtimelimit_, &from.dwdrawtimelimit_,
    reinterpret_cast<char*>(&cbgamemode_) -
    reinterpret_cast<char*>(&dwdrawtimelimit_) + sizeof(cbgamemode_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagPersonalTableFeeList)
}

void tagPersonalTableFeeList::SharedCtor() {
  ::memset(&dwdrawtimelimit_, 0, reinterpret_cast<char*>(&cbgamemode_) -
    reinterpret_cast<char*>(&dwdrawtimelimit_) + sizeof(cbgamemode_));
  _cached_size_ = 0;
}

tagPersonalTableFeeList::~tagPersonalTableFeeList() {
  // @@protoc_insertion_point(destructor:GamePmd.tagPersonalTableFeeList)
  SharedDtor();
}

void tagPersonalTableFeeList::SharedDtor() {
}

void tagPersonalTableFeeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPersonalTableFeeList::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[11].descriptor;
}

const tagPersonalTableFeeList& tagPersonalTableFeeList::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPersonalTableFeeList* tagPersonalTableFeeList::New(::google::protobuf::Arena* arena) const {
  tagPersonalTableFeeList* n = new tagPersonalTableFeeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPersonalTableFeeList::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagPersonalTableFeeList)
  ::memset(&dwdrawtimelimit_, 0, reinterpret_cast<char*>(&cbgamemode_) -
    reinterpret_cast<char*>(&dwdrawtimelimit_) + sizeof(cbgamemode_));
}

bool tagPersonalTableFeeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagPersonalTableFeeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dwdrawtimelimit = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwdrawtimelimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwdrawcountlimit = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwdrawcountlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 liniscore = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liniscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lfeescore = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lfeescore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 waapayfee = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waapayfee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbgamemode = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbgamemode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagPersonalTableFeeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagPersonalTableFeeList)
  return false;
#undef DO_
}

void tagPersonalTableFeeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagPersonalTableFeeList)
  // uint64 dwdrawtimelimit = 1;
  if (this->dwdrawtimelimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwdrawtimelimit(), output);
  }

  // uint64 dwdrawcountlimit = 2;
  if (this->dwdrawcountlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwdrawcountlimit(), output);
  }

  // uint64 liniscore = 3;
  if (this->liniscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->liniscore(), output);
  }

  // uint64 lfeescore = 4;
  if (this->lfeescore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lfeescore(), output);
  }

  // int32 waapayfee = 5;
  if (this->waapayfee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->waapayfee(), output);
  }

  // int32 cbgamemode = 6;
  if (this->cbgamemode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbgamemode(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagPersonalTableFeeList)
}

::google::protobuf::uint8* tagPersonalTableFeeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagPersonalTableFeeList)
  // uint64 dwdrawtimelimit = 1;
  if (this->dwdrawtimelimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dwdrawtimelimit(), target);
  }

  // uint64 dwdrawcountlimit = 2;
  if (this->dwdrawcountlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dwdrawcountlimit(), target);
  }

  // uint64 liniscore = 3;
  if (this->liniscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->liniscore(), target);
  }

  // uint64 lfeescore = 4;
  if (this->lfeescore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lfeescore(), target);
  }

  // int32 waapayfee = 5;
  if (this->waapayfee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->waapayfee(), target);
  }

  // int32 cbgamemode = 6;
  if (this->cbgamemode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbgamemode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagPersonalTableFeeList)
  return target;
}

size_t tagPersonalTableFeeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagPersonalTableFeeList)
  size_t total_size = 0;

  // uint64 dwdrawtimelimit = 1;
  if (this->dwdrawtimelimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwdrawtimelimit());
  }

  // uint64 dwdrawcountlimit = 2;
  if (this->dwdrawcountlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwdrawcountlimit());
  }

  // uint64 liniscore = 3;
  if (this->liniscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->liniscore());
  }

  // uint64 lfeescore = 4;
  if (this->lfeescore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lfeescore());
  }

  // int32 waapayfee = 5;
  if (this->waapayfee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->waapayfee());
  }

  // int32 cbgamemode = 6;
  if (this->cbgamemode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbgamemode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPersonalTableFeeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagPersonalTableFeeList)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPersonalTableFeeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPersonalTableFeeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagPersonalTableFeeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagPersonalTableFeeList)
    MergeFrom(*source);
  }
}

void tagPersonalTableFeeList::MergeFrom(const tagPersonalTableFeeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagPersonalTableFeeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dwdrawtimelimit() != 0) {
    set_dwdrawtimelimit(from.dwdrawtimelimit());
  }
  if (from.dwdrawcountlimit() != 0) {
    set_dwdrawcountlimit(from.dwdrawcountlimit());
  }
  if (from.liniscore() != 0) {
    set_liniscore(from.liniscore());
  }
  if (from.lfeescore() != 0) {
    set_lfeescore(from.lfeescore());
  }
  if (from.waapayfee() != 0) {
    set_waapayfee(from.waapayfee());
  }
  if (from.cbgamemode() != 0) {
    set_cbgamemode(from.cbgamemode());
  }
}

void tagPersonalTableFeeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagPersonalTableFeeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPersonalTableFeeList::CopyFrom(const tagPersonalTableFeeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagPersonalTableFeeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPersonalTableFeeList::IsInitialized() const {
  return true;
}

void tagPersonalTableFeeList::Swap(tagPersonalTableFeeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPersonalTableFeeList::InternalSwap(tagPersonalTableFeeList* other) {
  std::swap(dwdrawtimelimit_, other->dwdrawtimelimit_);
  std::swap(dwdrawcountlimit_, other->dwdrawcountlimit_);
  std::swap(liniscore_, other->liniscore_);
  std::swap(lfeescore_, other->lfeescore_);
  std::swap(waapayfee_, other->waapayfee_);
  std::swap(cbgamemode_, other->cbgamemode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPersonalTableFeeList::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPersonalTableFeeList

// uint64 dwdrawtimelimit = 1;
void tagPersonalTableFeeList::clear_dwdrawtimelimit() {
  dwdrawtimelimit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalTableFeeList::dwdrawtimelimit() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.dwdrawtimelimit)
  return dwdrawtimelimit_;
}
void tagPersonalTableFeeList::set_dwdrawtimelimit(::google::protobuf::uint64 value) {
  
  dwdrawtimelimit_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.dwdrawtimelimit)
}

// uint64 dwdrawcountlimit = 2;
void tagPersonalTableFeeList::clear_dwdrawcountlimit() {
  dwdrawcountlimit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalTableFeeList::dwdrawcountlimit() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.dwdrawcountlimit)
  return dwdrawcountlimit_;
}
void tagPersonalTableFeeList::set_dwdrawcountlimit(::google::protobuf::uint64 value) {
  
  dwdrawcountlimit_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.dwdrawcountlimit)
}

// uint64 liniscore = 3;
void tagPersonalTableFeeList::clear_liniscore() {
  liniscore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalTableFeeList::liniscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.liniscore)
  return liniscore_;
}
void tagPersonalTableFeeList::set_liniscore(::google::protobuf::uint64 value) {
  
  liniscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.liniscore)
}

// uint64 lfeescore = 4;
void tagPersonalTableFeeList::clear_lfeescore() {
  lfeescore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalTableFeeList::lfeescore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.lfeescore)
  return lfeescore_;
}
void tagPersonalTableFeeList::set_lfeescore(::google::protobuf::uint64 value) {
  
  lfeescore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.lfeescore)
}

// int32 waapayfee = 5;
void tagPersonalTableFeeList::clear_waapayfee() {
  waapayfee_ = 0;
}
::google::protobuf::int32 tagPersonalTableFeeList::waapayfee() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.waapayfee)
  return waapayfee_;
}
void tagPersonalTableFeeList::set_waapayfee(::google::protobuf::int32 value) {
  
  waapayfee_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.waapayfee)
}

// int32 cbgamemode = 6;
void tagPersonalTableFeeList::clear_cbgamemode() {
  cbgamemode_ = 0;
}
::google::protobuf::int32 tagPersonalTableFeeList::cbgamemode() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList.cbgamemode)
  return cbgamemode_;
}
void tagPersonalTableFeeList::set_cbgamemode(::google::protobuf::int32 value) {
  
  cbgamemode_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalTableFeeList.cbgamemode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPersonalTableFeeList_s2c::kRespcmdFieldNumber;
const int tagPersonalTableFeeList_s2c::kTagPersonalTableFeeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPersonalTableFeeList_s2c::tagPersonalTableFeeList_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagPersonalTableFeeList_s2c)
}
tagPersonalTableFeeList_s2c::tagPersonalTableFeeList_s2c(const tagPersonalTableFeeList_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tagpersonaltablefeelist_(from.tagpersonaltablefeelist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagPersonalTableFeeList_s2c)
}

void tagPersonalTableFeeList_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagPersonalTableFeeList_s2c::~tagPersonalTableFeeList_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagPersonalTableFeeList_s2c)
  SharedDtor();
}

void tagPersonalTableFeeList_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagPersonalTableFeeList_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPersonalTableFeeList_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[12].descriptor;
}

const tagPersonalTableFeeList_s2c& tagPersonalTableFeeList_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPersonalTableFeeList_s2c* tagPersonalTableFeeList_s2c::New(::google::protobuf::Arena* arena) const {
  tagPersonalTableFeeList_s2c* n = new tagPersonalTableFeeList_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPersonalTableFeeList_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagPersonalTableFeeList_s2c)
  tagpersonaltablefeelist_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagPersonalTableFeeList_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagPersonalTableFeeList_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GamePmd.tagPersonalTableFeeList tagPersonalTableFeeList = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tagpersonaltablefeelist()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagPersonalTableFeeList_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagPersonalTableFeeList_s2c)
  return false;
#undef DO_
}

void tagPersonalTableFeeList_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagPersonalTableFeeList_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated .GamePmd.tagPersonalTableFeeList tagPersonalTableFeeList = 2;
  for (unsigned int i = 0, n = this->tagpersonaltablefeelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tagpersonaltablefeelist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagPersonalTableFeeList_s2c)
}

::google::protobuf::uint8* tagPersonalTableFeeList_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagPersonalTableFeeList_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated .GamePmd.tagPersonalTableFeeList tagPersonalTableFeeList = 2;
  for (unsigned int i = 0, n = this->tagpersonaltablefeelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tagpersonaltablefeelist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagPersonalTableFeeList_s2c)
  return target;
}

size_t tagPersonalTableFeeList_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagPersonalTableFeeList_s2c)
  size_t total_size = 0;

  // repeated .GamePmd.tagPersonalTableFeeList tagPersonalTableFeeList = 2;
  {
    unsigned int count = this->tagpersonaltablefeelist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tagpersonaltablefeelist(i));
    }
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPersonalTableFeeList_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagPersonalTableFeeList_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPersonalTableFeeList_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPersonalTableFeeList_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagPersonalTableFeeList_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagPersonalTableFeeList_s2c)
    MergeFrom(*source);
  }
}

void tagPersonalTableFeeList_s2c::MergeFrom(const tagPersonalTableFeeList_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagPersonalTableFeeList_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagpersonaltablefeelist_.MergeFrom(from.tagpersonaltablefeelist_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagPersonalTableFeeList_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagPersonalTableFeeList_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPersonalTableFeeList_s2c::CopyFrom(const tagPersonalTableFeeList_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagPersonalTableFeeList_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPersonalTableFeeList_s2c::IsInitialized() const {
  return true;
}

void tagPersonalTableFeeList_s2c::Swap(tagPersonalTableFeeList_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPersonalTableFeeList_s2c::InternalSwap(tagPersonalTableFeeList_s2c* other) {
  tagpersonaltablefeelist_.UnsafeArenaSwap(&other->tagpersonaltablefeelist_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPersonalTableFeeList_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPersonalTableFeeList_s2c

// .NullPmd.response respcmd = 1;
bool tagPersonalTableFeeList_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagPersonalTableFeeList_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagPersonalTableFeeList_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagPersonalTableFeeList_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagPersonalTableFeeList_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagPersonalTableFeeList_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalTableFeeList_s2c.respcmd)
}

// repeated .GamePmd.tagPersonalTableFeeList tagPersonalTableFeeList = 2;
int tagPersonalTableFeeList_s2c::tagpersonaltablefeelist_size() const {
  return tagpersonaltablefeelist_.size();
}
void tagPersonalTableFeeList_s2c::clear_tagpersonaltablefeelist() {
  tagpersonaltablefeelist_.Clear();
}
const ::GamePmd::tagPersonalTableFeeList& tagPersonalTableFeeList_s2c::tagpersonaltablefeelist(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_.Get(index);
}
::GamePmd::tagPersonalTableFeeList* tagPersonalTableFeeList_s2c::mutable_tagpersonaltablefeelist(int index) {
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_.Mutable(index);
}
::GamePmd::tagPersonalTableFeeList* tagPersonalTableFeeList_s2c::add_tagpersonaltablefeelist() {
  // @@protoc_insertion_point(field_add:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::GamePmd::tagPersonalTableFeeList >*
tagPersonalTableFeeList_s2c::mutable_tagpersonaltablefeelist() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return &tagpersonaltablefeelist_;
}
const ::google::protobuf::RepeatedPtrField< ::GamePmd::tagPersonalTableFeeList >&
tagPersonalTableFeeList_s2c::tagpersonaltablefeelist() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagPersonalTableFeeList_s2c.tagPersonalTableFeeList)
  return tagpersonaltablefeelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPersonalCellScore_s2c::kRespcmdFieldNumber;
const int tagPersonalCellScore_s2c::kNcellscoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPersonalCellScore_s2c::tagPersonalCellScore_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagPersonalCellScore_s2c)
}
tagPersonalCellScore_s2c::tagPersonalCellScore_s2c(const tagPersonalCellScore_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ncellscore_(from.ncellscore_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagPersonalCellScore_s2c)
}

void tagPersonalCellScore_s2c::SharedCtor() {
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagPersonalCellScore_s2c::~tagPersonalCellScore_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagPersonalCellScore_s2c)
  SharedDtor();
}

void tagPersonalCellScore_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagPersonalCellScore_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPersonalCellScore_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[13].descriptor;
}

const tagPersonalCellScore_s2c& tagPersonalCellScore_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPersonalCellScore_s2c* tagPersonalCellScore_s2c::New(::google::protobuf::Arena* arena) const {
  tagPersonalCellScore_s2c* n = new tagPersonalCellScore_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPersonalCellScore_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagPersonalCellScore_s2c)
  ncellscore_.Clear();
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagPersonalCellScore_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagPersonalCellScore_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ncellscore = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ncellscore())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_ncellscore())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagPersonalCellScore_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagPersonalCellScore_s2c)
  return false;
#undef DO_
}

void tagPersonalCellScore_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagPersonalCellScore_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // repeated int32 ncellscore = 2;
  if (this->ncellscore_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ncellscore_cached_byte_size_);
  }
  for (int i = 0; i < this->ncellscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ncellscore(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagPersonalCellScore_s2c)
}

::google::protobuf::uint8* tagPersonalCellScore_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagPersonalCellScore_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // repeated int32 ncellscore = 2;
  if (this->ncellscore_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ncellscore_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ncellscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ncellscore(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagPersonalCellScore_s2c)
  return target;
}

size_t tagPersonalCellScore_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagPersonalCellScore_s2c)
  size_t total_size = 0;

  // repeated int32 ncellscore = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->ncellscore_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ncellscore_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPersonalCellScore_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagPersonalCellScore_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPersonalCellScore_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPersonalCellScore_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagPersonalCellScore_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagPersonalCellScore_s2c)
    MergeFrom(*source);
  }
}

void tagPersonalCellScore_s2c::MergeFrom(const tagPersonalCellScore_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagPersonalCellScore_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ncellscore_.MergeFrom(from.ncellscore_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagPersonalCellScore_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagPersonalCellScore_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPersonalCellScore_s2c::CopyFrom(const tagPersonalCellScore_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagPersonalCellScore_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPersonalCellScore_s2c::IsInitialized() const {
  return true;
}

void tagPersonalCellScore_s2c::Swap(tagPersonalCellScore_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPersonalCellScore_s2c::InternalSwap(tagPersonalCellScore_s2c* other) {
  ncellscore_.UnsafeArenaSwap(&other->ncellscore_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPersonalCellScore_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPersonalCellScore_s2c

// .NullPmd.response respcmd = 1;
bool tagPersonalCellScore_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagPersonalCellScore_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagPersonalCellScore_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalCellScore_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagPersonalCellScore_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalCellScore_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagPersonalCellScore_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalCellScore_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagPersonalCellScore_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalCellScore_s2c.respcmd)
}

// repeated int32 ncellscore = 2;
int tagPersonalCellScore_s2c::ncellscore_size() const {
  return ncellscore_.size();
}
void tagPersonalCellScore_s2c::clear_ncellscore() {
  ncellscore_.Clear();
}
::google::protobuf::int32 tagPersonalCellScore_s2c::ncellscore(int index) const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalCellScore_s2c.ncellscore)
  return ncellscore_.Get(index);
}
void tagPersonalCellScore_s2c::set_ncellscore(int index, ::google::protobuf::int32 value) {
  ncellscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalCellScore_s2c.ncellscore)
}
void tagPersonalCellScore_s2c::add_ncellscore(::google::protobuf::int32 value) {
  ncellscore_.Add(value);
  // @@protoc_insertion_point(field_add:GamePmd.tagPersonalCellScore_s2c.ncellscore)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPersonalCellScore_s2c::ncellscore() const {
  // @@protoc_insertion_point(field_list:GamePmd.tagPersonalCellScore_s2c.ncellscore)
  return ncellscore_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPersonalCellScore_s2c::mutable_ncellscore() {
  // @@protoc_insertion_point(field_mutable_list:GamePmd.tagPersonalCellScore_s2c.ncellscore)
  return &ncellscore_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGetPersonalRule_s2c::kRespcmdFieldNumber;
const int tagGetPersonalRule_s2c::kCbpersonalruleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGetPersonalRule_s2c::tagGetPersonalRule_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagGetPersonalRule_s2c)
}
tagGetPersonalRule_s2c::tagGetPersonalRule_s2c(const tagGetPersonalRule_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cbpersonalrule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbpersonalrule().size() > 0) {
    cbpersonalrule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbpersonalrule_);
  }
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagGetPersonalRule_s2c)
}

void tagGetPersonalRule_s2c::SharedCtor() {
  cbpersonalrule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  respcmd_ = NULL;
  _cached_size_ = 0;
}

tagGetPersonalRule_s2c::~tagGetPersonalRule_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagGetPersonalRule_s2c)
  SharedDtor();
}

void tagGetPersonalRule_s2c::SharedDtor() {
  cbpersonalrule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
}

void tagGetPersonalRule_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGetPersonalRule_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[14].descriptor;
}

const tagGetPersonalRule_s2c& tagGetPersonalRule_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGetPersonalRule_s2c* tagGetPersonalRule_s2c::New(::google::protobuf::Arena* arena) const {
  tagGetPersonalRule_s2c* n = new tagGetPersonalRule_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGetPersonalRule_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagGetPersonalRule_s2c)
  cbpersonalrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
}

bool tagGetPersonalRule_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagGetPersonalRule_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cbpersonalrule = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cbpersonalrule()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cbpersonalrule().data(), this->cbpersonalrule().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GamePmd.tagGetPersonalRule_s2c.cbpersonalrule"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagGetPersonalRule_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagGetPersonalRule_s2c)
  return false;
#undef DO_
}

void tagGetPersonalRule_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagGetPersonalRule_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // string cbpersonalrule = 2;
  if (this->cbpersonalrule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cbpersonalrule().data(), this->cbpersonalrule().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGetPersonalRule_s2c.cbpersonalrule");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cbpersonalrule(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagGetPersonalRule_s2c)
}

::google::protobuf::uint8* tagGetPersonalRule_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagGetPersonalRule_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // string cbpersonalrule = 2;
  if (this->cbpersonalrule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cbpersonalrule().data(), this->cbpersonalrule().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GamePmd.tagGetPersonalRule_s2c.cbpersonalrule");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cbpersonalrule(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagGetPersonalRule_s2c)
  return target;
}

size_t tagGetPersonalRule_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagGetPersonalRule_s2c)
  size_t total_size = 0;

  // string cbpersonalrule = 2;
  if (this->cbpersonalrule().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cbpersonalrule());
  }

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGetPersonalRule_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagGetPersonalRule_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGetPersonalRule_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGetPersonalRule_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagGetPersonalRule_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagGetPersonalRule_s2c)
    MergeFrom(*source);
  }
}

void tagGetPersonalRule_s2c::MergeFrom(const tagGetPersonalRule_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagGetPersonalRule_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cbpersonalrule().size() > 0) {

    cbpersonalrule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbpersonalrule_);
  }
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
}

void tagGetPersonalRule_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagGetPersonalRule_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGetPersonalRule_s2c::CopyFrom(const tagGetPersonalRule_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagGetPersonalRule_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGetPersonalRule_s2c::IsInitialized() const {
  return true;
}

void tagGetPersonalRule_s2c::Swap(tagGetPersonalRule_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGetPersonalRule_s2c::InternalSwap(tagGetPersonalRule_s2c* other) {
  cbpersonalrule_.Swap(&other->cbpersonalrule_);
  std::swap(respcmd_, other->respcmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGetPersonalRule_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGetPersonalRule_s2c

// .NullPmd.response respcmd = 1;
bool tagGetPersonalRule_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagGetPersonalRule_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagGetPersonalRule_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGetPersonalRule_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagGetPersonalRule_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGetPersonalRule_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagGetPersonalRule_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGetPersonalRule_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagGetPersonalRule_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGetPersonalRule_s2c.respcmd)
}

// string cbpersonalrule = 2;
void tagGetPersonalRule_s2c::clear_cbpersonalrule() {
  cbpersonalrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagGetPersonalRule_s2c::cbpersonalrule() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
  return cbpersonalrule_.GetNoArena();
}
void tagGetPersonalRule_s2c::set_cbpersonalrule(const ::std::string& value) {
  
  cbpersonalrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
#if LANG_CXX11
void tagGetPersonalRule_s2c::set_cbpersonalrule(::std::string&& value) {
  
  cbpersonalrule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
#endif
void tagGetPersonalRule_s2c::set_cbpersonalrule(const char* value) {
  
  cbpersonalrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
void tagGetPersonalRule_s2c::set_cbpersonalrule(const char* value, size_t size) {
  
  cbpersonalrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}
::std::string* tagGetPersonalRule_s2c::mutable_cbpersonalrule() {
  
  // @@protoc_insertion_point(field_mutable:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
  return cbpersonalrule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagGetPersonalRule_s2c::release_cbpersonalrule() {
  // @@protoc_insertion_point(field_release:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
  
  return cbpersonalrule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagGetPersonalRule_s2c::set_allocated_cbpersonalrule(::std::string* cbpersonalrule) {
  if (cbpersonalrule != NULL) {
    
  } else {
    
  }
  cbpersonalrule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbpersonalrule);
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagGetPersonalRule_s2c.cbpersonalrule)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPersonalRoomOption_s2c::kRespcmdFieldNumber;
const int tagPersonalRoomOption_s2c::kCbisjoingameFieldNumber;
const int tagPersonalRoomOption_s2c::kCbminpeopleFieldNumber;
const int tagPersonalRoomOption_s2c::kCbmaxpeopleFieldNumber;
const int tagPersonalRoomOption_s2c::kLmaxcellscoreFieldNumber;
const int tagPersonalRoomOption_s2c::kLpersonalroomtaxFieldNumber;
const int tagPersonalRoomOption_s2c::kBconsumptiontypeFieldNumber;
const int tagPersonalRoomOption_s2c::kWcancreatecountFieldNumber;
const int tagPersonalRoomOption_s2c::kDwplayturncountFieldNumber;
const int tagPersonalRoomOption_s2c::kDwplaytimelimitFieldNumber;
const int tagPersonalRoomOption_s2c::kDwtimeafterbegincountFieldNumber;
const int tagPersonalRoomOption_s2c::kDwtimeofflinecountFieldNumber;
const int tagPersonalRoomOption_s2c::kDwtimenotbegingameFieldNumber;
const int tagPersonalRoomOption_s2c::kDwtimeaftercreateroomFieldNumber;
const int tagPersonalRoomOption_s2c::kWbeginfreetimeFieldNumber;
const int tagPersonalRoomOption_s2c::kWendfreetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPersonalRoomOption_s2c::tagPersonalRoomOption_s2c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GamePmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePmd.tagPersonalRoomOption_s2c)
}
tagPersonalRoomOption_s2c::tagPersonalRoomOption_s2c(const tagPersonalRoomOption_s2c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    respcmd_ = new ::NullPmd::response(*from.respcmd_);
  } else {
    respcmd_ = NULL;
  }
  if (from.has_bconsumptiontype()) {
    bconsumptiontype_ = new ::CommonPmd::consumptionType(*from.bconsumptiontype_);
  } else {
    bconsumptiontype_ = NULL;
  }
  ::memcpy(&cbisjoingame_, &from.cbisjoingame_,
    reinterpret_cast<char*>(&wendfreetime_) -
    reinterpret_cast<char*>(&cbisjoingame_) + sizeof(wendfreetime_));
  // @@protoc_insertion_point(copy_constructor:GamePmd.tagPersonalRoomOption_s2c)
}

void tagPersonalRoomOption_s2c::SharedCtor() {
  ::memset(&respcmd_, 0, reinterpret_cast<char*>(&wendfreetime_) -
    reinterpret_cast<char*>(&respcmd_) + sizeof(wendfreetime_));
  _cached_size_ = 0;
}

tagPersonalRoomOption_s2c::~tagPersonalRoomOption_s2c() {
  // @@protoc_insertion_point(destructor:GamePmd.tagPersonalRoomOption_s2c)
  SharedDtor();
}

void tagPersonalRoomOption_s2c::SharedDtor() {
  if (this != internal_default_instance()) {
    delete respcmd_;
  }
  if (this != internal_default_instance()) {
    delete bconsumptiontype_;
  }
}

void tagPersonalRoomOption_s2c::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPersonalRoomOption_s2c::descriptor() {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[15].descriptor;
}

const tagPersonalRoomOption_s2c& tagPersonalRoomOption_s2c::default_instance() {
  protobuf_GamePmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPersonalRoomOption_s2c* tagPersonalRoomOption_s2c::New(::google::protobuf::Arena* arena) const {
  tagPersonalRoomOption_s2c* n = new tagPersonalRoomOption_s2c;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPersonalRoomOption_s2c::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePmd.tagPersonalRoomOption_s2c)
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) {
    delete respcmd_;
  }
  respcmd_ = NULL;
  if (GetArenaNoVirtual() == NULL && bconsumptiontype_ != NULL) {
    delete bconsumptiontype_;
  }
  bconsumptiontype_ = NULL;
  ::memset(&cbisjoingame_, 0, reinterpret_cast<char*>(&wendfreetime_) -
    reinterpret_cast<char*>(&cbisjoingame_) + sizeof(wendfreetime_));
}

bool tagPersonalRoomOption_s2c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePmd.tagPersonalRoomOption_s2c)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NullPmd.response respcmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_respcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbisjoingame = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbisjoingame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbminpeople = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbminpeople_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cbmaxpeople = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbmaxpeople_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lmaxcellscore = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lmaxcellscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lpersonalroomtax = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lpersonalroomtax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CommonPmd.consumptionType bconsumptiontype = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bconsumptiontype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wcancreatecount = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wcancreatecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwplayturncount = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwplayturncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwplaytimelimit = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwplaytimelimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwtimeafterbegincount = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwtimeafterbegincount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwtimeofflinecount = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwtimeofflinecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwtimenotbegingame = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwtimenotbegingame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwtimeaftercreateroom = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwtimeaftercreateroom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wbeginfreetime = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wbeginfreetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wendfreetime = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wendfreetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePmd.tagPersonalRoomOption_s2c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePmd.tagPersonalRoomOption_s2c)
  return false;
#undef DO_
}

void tagPersonalRoomOption_s2c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePmd.tagPersonalRoomOption_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->respcmd_, output);
  }

  // int32 cbisjoingame = 2;
  if (this->cbisjoingame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cbisjoingame(), output);
  }

  // int32 cbminpeople = 3;
  if (this->cbminpeople() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbminpeople(), output);
  }

  // int32 cbmaxpeople = 4;
  if (this->cbmaxpeople() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cbmaxpeople(), output);
  }

  // uint64 lmaxcellscore = 5;
  if (this->lmaxcellscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lmaxcellscore(), output);
  }

  // uint64 lpersonalroomtax = 6;
  if (this->lpersonalroomtax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->lpersonalroomtax(), output);
  }

  // .CommonPmd.consumptionType bconsumptiontype = 7;
  if (this->has_bconsumptiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->bconsumptiontype_, output);
  }

  // int32 wcancreatecount = 8;
  if (this->wcancreatecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wcancreatecount(), output);
  }

  // uint64 dwplayturncount = 9;
  if (this->dwplayturncount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->dwplayturncount(), output);
  }

  // uint64 dwplaytimelimit = 10;
  if (this->dwplaytimelimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->dwplaytimelimit(), output);
  }

  // uint64 dwtimeafterbegincount = 11;
  if (this->dwtimeafterbegincount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->dwtimeafterbegincount(), output);
  }

  // uint64 dwtimeofflinecount = 12;
  if (this->dwtimeofflinecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->dwtimeofflinecount(), output);
  }

  // uint64 dwtimenotbegingame = 13;
  if (this->dwtimenotbegingame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->dwtimenotbegingame(), output);
  }

  // uint64 dwtimeaftercreateroom = 14;
  if (this->dwtimeaftercreateroom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->dwtimeaftercreateroom(), output);
  }

  // int32 wbeginfreetime = 15;
  if (this->wbeginfreetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->wbeginfreetime(), output);
  }

  // int32 wendfreetime = 16;
  if (this->wendfreetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->wendfreetime(), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePmd.tagPersonalRoomOption_s2c)
}

::google::protobuf::uint8* tagPersonalRoomOption_s2c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GamePmd.tagPersonalRoomOption_s2c)
  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->respcmd_, false, target);
  }

  // int32 cbisjoingame = 2;
  if (this->cbisjoingame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cbisjoingame(), target);
  }

  // int32 cbminpeople = 3;
  if (this->cbminpeople() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbminpeople(), target);
  }

  // int32 cbmaxpeople = 4;
  if (this->cbmaxpeople() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cbmaxpeople(), target);
  }

  // uint64 lmaxcellscore = 5;
  if (this->lmaxcellscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lmaxcellscore(), target);
  }

  // uint64 lpersonalroomtax = 6;
  if (this->lpersonalroomtax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->lpersonalroomtax(), target);
  }

  // .CommonPmd.consumptionType bconsumptiontype = 7;
  if (this->has_bconsumptiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->bconsumptiontype_, false, target);
  }

  // int32 wcancreatecount = 8;
  if (this->wcancreatecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wcancreatecount(), target);
  }

  // uint64 dwplayturncount = 9;
  if (this->dwplayturncount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->dwplayturncount(), target);
  }

  // uint64 dwplaytimelimit = 10;
  if (this->dwplaytimelimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->dwplaytimelimit(), target);
  }

  // uint64 dwtimeafterbegincount = 11;
  if (this->dwtimeafterbegincount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->dwtimeafterbegincount(), target);
  }

  // uint64 dwtimeofflinecount = 12;
  if (this->dwtimeofflinecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->dwtimeofflinecount(), target);
  }

  // uint64 dwtimenotbegingame = 13;
  if (this->dwtimenotbegingame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->dwtimenotbegingame(), target);
  }

  // uint64 dwtimeaftercreateroom = 14;
  if (this->dwtimeaftercreateroom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->dwtimeaftercreateroom(), target);
  }

  // int32 wbeginfreetime = 15;
  if (this->wbeginfreetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->wbeginfreetime(), target);
  }

  // int32 wendfreetime = 16;
  if (this->wendfreetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->wendfreetime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePmd.tagPersonalRoomOption_s2c)
  return target;
}

size_t tagPersonalRoomOption_s2c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePmd.tagPersonalRoomOption_s2c)
  size_t total_size = 0;

  // .NullPmd.response respcmd = 1;
  if (this->has_respcmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->respcmd_);
  }

  // .CommonPmd.consumptionType bconsumptiontype = 7;
  if (this->has_bconsumptiontype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bconsumptiontype_);
  }

  // int32 cbisjoingame = 2;
  if (this->cbisjoingame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbisjoingame());
  }

  // int32 cbminpeople = 3;
  if (this->cbminpeople() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbminpeople());
  }

  // uint64 lmaxcellscore = 5;
  if (this->lmaxcellscore() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lmaxcellscore());
  }

  // uint64 lpersonalroomtax = 6;
  if (this->lpersonalroomtax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lpersonalroomtax());
  }

  // int32 cbmaxpeople = 4;
  if (this->cbmaxpeople() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cbmaxpeople());
  }

  // int32 wcancreatecount = 8;
  if (this->wcancreatecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wcancreatecount());
  }

  // uint64 dwplayturncount = 9;
  if (this->dwplayturncount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwplayturncount());
  }

  // uint64 dwplaytimelimit = 10;
  if (this->dwplaytimelimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwplaytimelimit());
  }

  // uint64 dwtimeafterbegincount = 11;
  if (this->dwtimeafterbegincount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwtimeafterbegincount());
  }

  // uint64 dwtimeofflinecount = 12;
  if (this->dwtimeofflinecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwtimeofflinecount());
  }

  // uint64 dwtimenotbegingame = 13;
  if (this->dwtimenotbegingame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwtimenotbegingame());
  }

  // uint64 dwtimeaftercreateroom = 14;
  if (this->dwtimeaftercreateroom() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwtimeaftercreateroom());
  }

  // int32 wbeginfreetime = 15;
  if (this->wbeginfreetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wbeginfreetime());
  }

  // int32 wendfreetime = 16;
  if (this->wendfreetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wendfreetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPersonalRoomOption_s2c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePmd.tagPersonalRoomOption_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPersonalRoomOption_s2c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPersonalRoomOption_s2c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePmd.tagPersonalRoomOption_s2c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePmd.tagPersonalRoomOption_s2c)
    MergeFrom(*source);
  }
}

void tagPersonalRoomOption_s2c::MergeFrom(const tagPersonalRoomOption_s2c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePmd.tagPersonalRoomOption_s2c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_respcmd()) {
    mutable_respcmd()->::NullPmd::response::MergeFrom(from.respcmd());
  }
  if (from.has_bconsumptiontype()) {
    mutable_bconsumptiontype()->::CommonPmd::consumptionType::MergeFrom(from.bconsumptiontype());
  }
  if (from.cbisjoingame() != 0) {
    set_cbisjoingame(from.cbisjoingame());
  }
  if (from.cbminpeople() != 0) {
    set_cbminpeople(from.cbminpeople());
  }
  if (from.lmaxcellscore() != 0) {
    set_lmaxcellscore(from.lmaxcellscore());
  }
  if (from.lpersonalroomtax() != 0) {
    set_lpersonalroomtax(from.lpersonalroomtax());
  }
  if (from.cbmaxpeople() != 0) {
    set_cbmaxpeople(from.cbmaxpeople());
  }
  if (from.wcancreatecount() != 0) {
    set_wcancreatecount(from.wcancreatecount());
  }
  if (from.dwplayturncount() != 0) {
    set_dwplayturncount(from.dwplayturncount());
  }
  if (from.dwplaytimelimit() != 0) {
    set_dwplaytimelimit(from.dwplaytimelimit());
  }
  if (from.dwtimeafterbegincount() != 0) {
    set_dwtimeafterbegincount(from.dwtimeafterbegincount());
  }
  if (from.dwtimeofflinecount() != 0) {
    set_dwtimeofflinecount(from.dwtimeofflinecount());
  }
  if (from.dwtimenotbegingame() != 0) {
    set_dwtimenotbegingame(from.dwtimenotbegingame());
  }
  if (from.dwtimeaftercreateroom() != 0) {
    set_dwtimeaftercreateroom(from.dwtimeaftercreateroom());
  }
  if (from.wbeginfreetime() != 0) {
    set_wbeginfreetime(from.wbeginfreetime());
  }
  if (from.wendfreetime() != 0) {
    set_wendfreetime(from.wendfreetime());
  }
}

void tagPersonalRoomOption_s2c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePmd.tagPersonalRoomOption_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPersonalRoomOption_s2c::CopyFrom(const tagPersonalRoomOption_s2c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePmd.tagPersonalRoomOption_s2c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPersonalRoomOption_s2c::IsInitialized() const {
  return true;
}

void tagPersonalRoomOption_s2c::Swap(tagPersonalRoomOption_s2c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPersonalRoomOption_s2c::InternalSwap(tagPersonalRoomOption_s2c* other) {
  std::swap(respcmd_, other->respcmd_);
  std::swap(bconsumptiontype_, other->bconsumptiontype_);
  std::swap(cbisjoingame_, other->cbisjoingame_);
  std::swap(cbminpeople_, other->cbminpeople_);
  std::swap(lmaxcellscore_, other->lmaxcellscore_);
  std::swap(lpersonalroomtax_, other->lpersonalroomtax_);
  std::swap(cbmaxpeople_, other->cbmaxpeople_);
  std::swap(wcancreatecount_, other->wcancreatecount_);
  std::swap(dwplayturncount_, other->dwplayturncount_);
  std::swap(dwplaytimelimit_, other->dwplaytimelimit_);
  std::swap(dwtimeafterbegincount_, other->dwtimeafterbegincount_);
  std::swap(dwtimeofflinecount_, other->dwtimeofflinecount_);
  std::swap(dwtimenotbegingame_, other->dwtimenotbegingame_);
  std::swap(dwtimeaftercreateroom_, other->dwtimeaftercreateroom_);
  std::swap(wbeginfreetime_, other->wbeginfreetime_);
  std::swap(wendfreetime_, other->wendfreetime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPersonalRoomOption_s2c::GetMetadata() const {
  protobuf_GamePmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GamePmd_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPersonalRoomOption_s2c

// .NullPmd.response respcmd = 1;
bool tagPersonalRoomOption_s2c::has_respcmd() const {
  return this != internal_default_instance() && respcmd_ != NULL;
}
void tagPersonalRoomOption_s2c::clear_respcmd() {
  if (GetArenaNoVirtual() == NULL && respcmd_ != NULL) delete respcmd_;
  respcmd_ = NULL;
}
const ::NullPmd::response& tagPersonalRoomOption_s2c::respcmd() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.respcmd)
  return respcmd_ != NULL ? *respcmd_
                         : *::NullPmd::response::internal_default_instance();
}
::NullPmd::response* tagPersonalRoomOption_s2c::mutable_respcmd() {
  
  if (respcmd_ == NULL) {
    respcmd_ = new ::NullPmd::response;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalRoomOption_s2c.respcmd)
  return respcmd_;
}
::NullPmd::response* tagPersonalRoomOption_s2c::release_respcmd() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalRoomOption_s2c.respcmd)
  
  ::NullPmd::response* temp = respcmd_;
  respcmd_ = NULL;
  return temp;
}
void tagPersonalRoomOption_s2c::set_allocated_respcmd(::NullPmd::response* respcmd) {
  delete respcmd_;
  respcmd_ = respcmd;
  if (respcmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalRoomOption_s2c.respcmd)
}

// int32 cbisjoingame = 2;
void tagPersonalRoomOption_s2c::clear_cbisjoingame() {
  cbisjoingame_ = 0;
}
::google::protobuf::int32 tagPersonalRoomOption_s2c::cbisjoingame() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.cbisjoingame)
  return cbisjoingame_;
}
void tagPersonalRoomOption_s2c::set_cbisjoingame(::google::protobuf::int32 value) {
  
  cbisjoingame_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.cbisjoingame)
}

// int32 cbminpeople = 3;
void tagPersonalRoomOption_s2c::clear_cbminpeople() {
  cbminpeople_ = 0;
}
::google::protobuf::int32 tagPersonalRoomOption_s2c::cbminpeople() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.cbminpeople)
  return cbminpeople_;
}
void tagPersonalRoomOption_s2c::set_cbminpeople(::google::protobuf::int32 value) {
  
  cbminpeople_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.cbminpeople)
}

// int32 cbmaxpeople = 4;
void tagPersonalRoomOption_s2c::clear_cbmaxpeople() {
  cbmaxpeople_ = 0;
}
::google::protobuf::int32 tagPersonalRoomOption_s2c::cbmaxpeople() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.cbmaxpeople)
  return cbmaxpeople_;
}
void tagPersonalRoomOption_s2c::set_cbmaxpeople(::google::protobuf::int32 value) {
  
  cbmaxpeople_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.cbmaxpeople)
}

// uint64 lmaxcellscore = 5;
void tagPersonalRoomOption_s2c::clear_lmaxcellscore() {
  lmaxcellscore_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::lmaxcellscore() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.lmaxcellscore)
  return lmaxcellscore_;
}
void tagPersonalRoomOption_s2c::set_lmaxcellscore(::google::protobuf::uint64 value) {
  
  lmaxcellscore_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.lmaxcellscore)
}

// uint64 lpersonalroomtax = 6;
void tagPersonalRoomOption_s2c::clear_lpersonalroomtax() {
  lpersonalroomtax_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::lpersonalroomtax() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.lpersonalroomtax)
  return lpersonalroomtax_;
}
void tagPersonalRoomOption_s2c::set_lpersonalroomtax(::google::protobuf::uint64 value) {
  
  lpersonalroomtax_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.lpersonalroomtax)
}

// .CommonPmd.consumptionType bconsumptiontype = 7;
bool tagPersonalRoomOption_s2c::has_bconsumptiontype() const {
  return this != internal_default_instance() && bconsumptiontype_ != NULL;
}
void tagPersonalRoomOption_s2c::clear_bconsumptiontype() {
  if (GetArenaNoVirtual() == NULL && bconsumptiontype_ != NULL) delete bconsumptiontype_;
  bconsumptiontype_ = NULL;
}
const ::CommonPmd::consumptionType& tagPersonalRoomOption_s2c::bconsumptiontype() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
  return bconsumptiontype_ != NULL ? *bconsumptiontype_
                         : *::CommonPmd::consumptionType::internal_default_instance();
}
::CommonPmd::consumptionType* tagPersonalRoomOption_s2c::mutable_bconsumptiontype() {
  
  if (bconsumptiontype_ == NULL) {
    bconsumptiontype_ = new ::CommonPmd::consumptionType;
  }
  // @@protoc_insertion_point(field_mutable:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
  return bconsumptiontype_;
}
::CommonPmd::consumptionType* tagPersonalRoomOption_s2c::release_bconsumptiontype() {
  // @@protoc_insertion_point(field_release:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
  
  ::CommonPmd::consumptionType* temp = bconsumptiontype_;
  bconsumptiontype_ = NULL;
  return temp;
}
void tagPersonalRoomOption_s2c::set_allocated_bconsumptiontype(::CommonPmd::consumptionType* bconsumptiontype) {
  delete bconsumptiontype_;
  bconsumptiontype_ = bconsumptiontype;
  if (bconsumptiontype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GamePmd.tagPersonalRoomOption_s2c.bconsumptiontype)
}

// int32 wcancreatecount = 8;
void tagPersonalRoomOption_s2c::clear_wcancreatecount() {
  wcancreatecount_ = 0;
}
::google::protobuf::int32 tagPersonalRoomOption_s2c::wcancreatecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.wcancreatecount)
  return wcancreatecount_;
}
void tagPersonalRoomOption_s2c::set_wcancreatecount(::google::protobuf::int32 value) {
  
  wcancreatecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.wcancreatecount)
}

// uint64 dwplayturncount = 9;
void tagPersonalRoomOption_s2c::clear_dwplayturncount() {
  dwplayturncount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwplayturncount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwplayturncount)
  return dwplayturncount_;
}
void tagPersonalRoomOption_s2c::set_dwplayturncount(::google::protobuf::uint64 value) {
  
  dwplayturncount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwplayturncount)
}

// uint64 dwplaytimelimit = 10;
void tagPersonalRoomOption_s2c::clear_dwplaytimelimit() {
  dwplaytimelimit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwplaytimelimit() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwplaytimelimit)
  return dwplaytimelimit_;
}
void tagPersonalRoomOption_s2c::set_dwplaytimelimit(::google::protobuf::uint64 value) {
  
  dwplaytimelimit_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwplaytimelimit)
}

// uint64 dwtimeafterbegincount = 11;
void tagPersonalRoomOption_s2c::clear_dwtimeafterbegincount() {
  dwtimeafterbegincount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimeafterbegincount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimeafterbegincount)
  return dwtimeafterbegincount_;
}
void tagPersonalRoomOption_s2c::set_dwtimeafterbegincount(::google::protobuf::uint64 value) {
  
  dwtimeafterbegincount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimeafterbegincount)
}

// uint64 dwtimeofflinecount = 12;
void tagPersonalRoomOption_s2c::clear_dwtimeofflinecount() {
  dwtimeofflinecount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimeofflinecount() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimeofflinecount)
  return dwtimeofflinecount_;
}
void tagPersonalRoomOption_s2c::set_dwtimeofflinecount(::google::protobuf::uint64 value) {
  
  dwtimeofflinecount_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimeofflinecount)
}

// uint64 dwtimenotbegingame = 13;
void tagPersonalRoomOption_s2c::clear_dwtimenotbegingame() {
  dwtimenotbegingame_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimenotbegingame() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimenotbegingame)
  return dwtimenotbegingame_;
}
void tagPersonalRoomOption_s2c::set_dwtimenotbegingame(::google::protobuf::uint64 value) {
  
  dwtimenotbegingame_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimenotbegingame)
}

// uint64 dwtimeaftercreateroom = 14;
void tagPersonalRoomOption_s2c::clear_dwtimeaftercreateroom() {
  dwtimeaftercreateroom_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagPersonalRoomOption_s2c::dwtimeaftercreateroom() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.dwtimeaftercreateroom)
  return dwtimeaftercreateroom_;
}
void tagPersonalRoomOption_s2c::set_dwtimeaftercreateroom(::google::protobuf::uint64 value) {
  
  dwtimeaftercreateroom_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.dwtimeaftercreateroom)
}

// int32 wbeginfreetime = 15;
void tagPersonalRoomOption_s2c::clear_wbeginfreetime() {
  wbeginfreetime_ = 0;
}
::google::protobuf::int32 tagPersonalRoomOption_s2c::wbeginfreetime() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.wbeginfreetime)
  return wbeginfreetime_;
}
void tagPersonalRoomOption_s2c::set_wbeginfreetime(::google::protobuf::int32 value) {
  
  wbeginfreetime_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.wbeginfreetime)
}

// int32 wendfreetime = 16;
void tagPersonalRoomOption_s2c::clear_wendfreetime() {
  wendfreetime_ = 0;
}
::google::protobuf::int32 tagPersonalRoomOption_s2c::wendfreetime() const {
  // @@protoc_insertion_point(field_get:GamePmd.tagPersonalRoomOption_s2c.wendfreetime)
  return wendfreetime_;
}
void tagPersonalRoomOption_s2c::set_wendfreetime(::google::protobuf::int32 value) {
  
  wendfreetime_ = value;
  // @@protoc_insertion_point(field_set:GamePmd.tagPersonalRoomOption_s2c.wendfreetime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GamePmd

// @@protoc_insertion_point(global_scope)
